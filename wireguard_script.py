import sys
import re
import os
import shutil
import time
import colorama
from colorama import Fore, Style
import subprocess
from time import sleep
import readline
import netifaces
import netifaces as ni
import io
import ipaddress


sys.stdout = io.TextIOWrapper(sys.stdout.detach(), encoding="utf-8", errors="replace")

if os.geteuid() != 0:
    print("\033[91mThis script must be run as root. Please use sudo -i.\033[0m")
    sys.exit(1)


def logo():
    logo_path = "/etc/logo2.sh"
    try:
        subprocess.run(["bash", "-c", logo_path], check=True)
    except subprocess.CalledProcessError as e:
        return e

    return None

# wireguard
def wireguard_allinone_mnu():
    os.system("clear")
    logo()
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print("\033[92m(   ) \033[93mWireguard \033[93mMenu\033[0m")
    print(
        '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
    )
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("0. \033[91mStatus\033[0m")
    print("1. \033[92mWireguard \033[0m")
    print("2. \033[93mWireguard + GRE6tap\033[0m")
    print("3. \033[94mSit + Wireguard \033[0m")
    print("4. \033[93mGRE6tap [Native] + Wireguard\033[0m")
    print("5. \033[92mEdit MTU\033[0m")
    print("6. \033[93mEdit local\033[0m")
    print("7. \033[93mEdit IPSEC timer\033[0m")
    print("8. \033[91mUninstall\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    print("q.\033[97mback to the main script\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")
    while True:
        server_type = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if server_type == "0":
            wireguard_status()
            break
        elif server_type == "1":
            wireguardudp_menu()
            break
        elif server_type == "2":
            wireguardgre6tap_mnu()
            break
        elif server_type == "3":
            wireguardsit_menu()
            break
        elif server_type == "4":
            wireguardgre6tapnative_mnu()
            break
        elif server_type == "5":
            wireguard_mtu()
            break
        elif server_type == "6":
            wireguard_edit_server()
            break
        elif server_type == "7":
            enable_reset_ipsec2()
            break
        elif server_type == "8":
            Wireguard_uninstall()
            break
        elif server_type == "q":
            os.system("clear")
            os._exit(0)
            break
        else:
            print("Invalid choice.")


def ipsec_service_remove():

    try:
        devnull = open(os.devnull, "w")
        display_notification("\033[93mRemoving stuff...\033[0m")

        commands = [
            "rm /etc/ipsec2.sh",
            "systemctl disable ipsecreset.service",
            "systemctl stop ipsecreset.service",
            "sudo rm /etc/systemd/system/ipsecreset.service",
            "sudo rm /etc/reset_ipsec.sh" "sudo rm /usr/local/bin/ipsec_daemon.sh",
            "systemctl daemon-reload",
        ]

        for command in commands:
            subprocess.run(command, shell=True, stdout=devnull, stderr=devnull)

        devnull.close()

        print("Progress: ", end="")
        frames = ["⠋", "⠙", "⠹", "⠸", "⠼", "⠴", "⠦", "⠧", "⠇", "⠏"]
        delay = 0.1
        duration = 1
        end_time = time.time() + duration

        while time.time() < end_time:
            for frame in frames:
                print("\r[%s] Loading...  " % frame, end="")
                time.sleep(delay)
                print("\r[%s]             " % frame, end="")
                time.sleep(delay)

        display_checkmark("\033[92mUninstall completed!\033[0m")
    except subprocess.CalledProcessError as e:
        print("Error:", e.output.decode().strip())
    except Exception as e:
        print("Error:", str(e))

def delete_cron3():
    entries_to_delete = [
        "0 * * * * /bin/bash /etc/ipsec2.sh",
        "0 */2 * * * /bin/bash /etc/ipsec2.sh",
        "0 */3 * * * /bin/bash /etc/ipsec2.sh",
        "0 */4 * * * /bin/bash /etc/ipsec2.sh",
        "0 */5 * * * /bin/bash /etc/ipsec2.sh",
        "0 */6 * * * /bin/bash /etc/ipsec2.sh",
        "0 */7 * * * /bin/bash /etc/ipsec2.sh",
        "0 */8 * * * /bin/bash /etc/ipsec2.sh",
        "0 */9 * * * /bin/bash /etc/ipsec2.sh",
        "0 */10 * * * /bin/bash /etc/ipsec2.sh",
        "0 */11 * * * /bin/bash /etc/ipsec2.sh",
        "0 */12 * * * /bin/bash /etc/ipsec2.sh",
        "0 */13 * * * /bin/bash /etc/ipsec2.sh",
        "0 */14 * * * /bin/bash /etc/ipsec2.sh",
        "0 */15 * * * /bin/bash /etc/ipsec2.sh",
        "0 */16 * * * /bin/bash /etc/ipsec2.sh",
        "0 */17 * * * /bin/bash /etc/ipsec2.sh",
        "0 */18 * * * /bin/bash /etc/ipsec2.sh",
        "0 */19 * * * /bin/bash /etc/ipsec2.sh",
        "0 */20 * * * /bin/bash /etc/ipsec2.sh",
        "0 */21 * * * /bin/bash /etc/ipsec2.sh",
        "0 */22 * * * /bin/bash /etc/ipsec2.sh",
        "0 */23 * * * /bin/bash /etc/ipsec2.sh",
    ]

    existing_crontab = ""
    try:
        existing_crontab = subprocess.check_output("crontab -l", shell=True).decode()
    except subprocess.CalledProcessError:

        return

    new_crontab = existing_crontab
    for entry in entries_to_delete:
        if entry in existing_crontab:
            new_crontab = new_crontab.replace(entry, "")

    if new_crontab != existing_crontab:
        subprocess.call(f"echo '{new_crontab}' | crontab -", shell=True)
        display_notification("\033[92mDeleting Previous Crons..\033[0m")

def delete_cron4():
    entries_to_delete = [
        "*/1 * * * * /bin/bash /etc/ipsec2.sh",
        "*/2 * * * * /bin/bash /etc/ipsec2.sh",
        "*/3 * * * * /bin/bash /etc/ipsec2.sh",
        "*/4 * * * * /bin/bash /etc/ipsec2.sh",
        "*/5 * * * * /bin/bash /etc/ipsec2.sh",
        "*/6 * * * * /bin/bash /etc/ipsec2.sh",
        "*/7 * * * * /bin/bash /etc/ipsec2.sh",
        "*/8 * * * * /bin/bash /etc/ipsec2.sh",
        "*/9 * * * * /bin/bash /etc/ipsec2.sh",
        "*/10 * * * * /bin/bash /etc/ipsec2.sh",
        "*/11 * * * * /bin/bash /etc/ipsec2.sh",
        "*/12 * * * * /bin/bash /etc/ipsec2.sh",
        "*/13 * * * * /bin/bash /etc/ipsec2.sh",
        "*/14 * * * * /bin/bash /etc/ipsec2.sh",
        "*/15 * * * * /bin/bash /etc/ipsec2.sh",
        "*/16 * * * * /bin/bash /etc/ipsec2.sh",
        "*/17 * * * * /bin/bash /etc/ipsec2.sh",
        "*/18 * * * * /bin/bash /etc/ipsec2.sh",
        "*/19 * * * * /bin/bash /etc/ipsec2.sh",
        "*/20 * * * * /bin/bash /etc/ipsec2.sh",
        "*/21 * * * * /bin/bash /etc/ipsec2.sh",
        "*/22 * * * * /bin/bash /etc/ipsec2.sh",
        "*/23 * * * * /bin/bash /etc/ipsec2.sh",
        "*/24 * * * * /bin/bash /etc/ipsec2.sh",
        "*/25 * * * * /bin/bash /etc/ipsec2.sh",
        "*/26 * * * * /bin/bash /etc/ipsec2.sh",
        "*/27 * * * * /bin/bash /etc/ipsec2.sh",
        "*/28 * * * * /bin/bash /etc/ipsec2.sh",
        "*/29 * * * * /bin/bash /etc/ipsec2.sh",
        "*/30 * * * * /bin/bash /etc/ipsec2.sh",
        "*/31 * * * * /bin/bash /etc/ipsec2.sh",
        "*/32 * * * * /bin/bash /etc/ipsec2.sh",
        "*/33 * * * * /bin/bash /etc/ipsec2.sh",
        "*/34 * * * * /bin/bash /etc/ipsec2.sh",
        "*/35 * * * * /bin/bash /etc/ipsec2.sh",
        "*/36 * * * * /bin/bash /etc/ipsec2.sh",
        "*/37 * * * * /bin/bash /etc/ipsec2.sh",
        "*/38 * * * * /bin/bash /etc/ipsec2.sh",
        "*/39 * * * * /bin/bash /etc/ipsec2.sh",
        "*/40 * * * * /bin/bash /etc/ipsec2.sh",
        "*/41 * * * * /bin/bash /etc/ipsec2.sh",
        "*/42 * * * * /bin/bash /etc/ipsec2.sh",
        "*/43 * * * * /bin/bash /etc/ipsec2.sh",
        "*/44 * * * * /bin/bash /etc/ipsec2.sh",
        "*/45 * * * * /bin/bash /etc/ipsec2.sh",
        "*/46 * * * * /bin/bash /etc/ipsec2.sh",
        "*/47 * * * * /bin/bash /etc/ipsec2.sh",
        "*/48 * * * * /bin/bash /etc/ipsec2.sh",
        "*/49 * * * * /bin/bash /etc/ipsec2.sh",
        "*/50 * * * * /bin/bash /etc/ipsec2.sh",
        "*/51 * * * * /bin/bash /etc/ipsec2.sh",
        "*/52 * * * * /bin/bash /etc/ipsec2.sh",
        "*/53 * * * * /bin/bash /etc/ipsec2.sh",
        "*/54 * * * * /bin/bash /etc/ipsec2.sh",
        "*/55 * * * * /bin/bash /etc/ipsec2.sh",
        "*/56 * * * * /bin/bash /etc/ipsec2.sh",
        "*/57 * * * * /bin/bash /etc/ipsec2.sh",
        "*/58 * * * * /bin/bash /etc/ipsec2.sh",
        "*/59 * * * * /bin/bash /etc/ipsec2.sh",
    ]

    existing_crontab = ""
    try:
        existing_crontab = subprocess.check_output("crontab -l", shell=True).decode()
    except subprocess.CalledProcessError:

        return

    new_crontab = existing_crontab
    for entry in entries_to_delete:
        if entry in existing_crontab:
            new_crontab = new_crontab.replace(entry, "")

    if new_crontab != existing_crontab:
        subprocess.call(f"echo '{new_crontab}' | crontab -", shell=True)
        display_notification("\033[92mDeleting Previous Crons..\033[0m")

def reset_ipsec(interval):
    service_name = "ipsecreset.service"

    daemon_script_content = f"""#!/bin/bash
INTERVAL={interval}

while true; do
    /bin/bash /etc/reset_ipsec.sh
    sleep $INTERVAL
done
"""

    with open("/usr/local/bin/ipsec_daemon.sh", "w") as daemon_script_file:
        daemon_script_file.write(daemon_script_content)

    subprocess.run(["chmod", "+x", "/usr/local/bin/ipsec_daemon.sh"])

    service_content = f"""[Unit]
Description=Custom Daemon

[Service]
ExecStart=/usr/local/bin/ipsec_daemon.sh
Restart=always

[Install]
WantedBy=multi-user.target
"""

    with open(f"/etc/systemd/system/{service_name}", "w") as service_file:
        service_file.write(service_content)

    ipsec_reset_script_content = """#!/bin/bash
systemctl daemon-reload 
sudo ipsec stop
systemctl restart strong-azumi1 
systemctl restart strongswan-starter 
systemctl restart strongswan
sudo journalctl --vacuum-size=1M --unit=strongswan.service
sudo journalctl --vacuum-size=1M --unit=strongswan-starter.service
"""

    with open("/etc/reset_ipsec.sh", "w") as script_file:
        script_file.write(ipsec_reset_script_content)

    subprocess.run(["chmod", "+x", "/etc/reset_ipsec.sh"])
    subprocess.run(["systemctl", "daemon-reload"])
    subprocess.run(["systemctl", "enable", service_name])
    subprocess.run(["systemctl", "restart", service_name])


def enable_reset_ipsec2():
    ipsec_service_remove()
    delete_cron3()
    delete_cron4()
    print("\033[93m───────────────────────────────────────\033[0m")
    display_notification("\033[93mQuestion time !\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    enable_reset = input("\033[93mDo you want to edit \033[96mIPSEC \033[92mreset time\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m").lower()
    if enable_reset in ['yes', 'y']:
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print('1. \033[92mHour\033[0m')
        print('2. \033[93mMinute\033[0m')
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        
        time_unit_choice = input("\033[93mEnter your choice :\033[0m ").strip()
        if time_unit_choice == '1':
            time_unit = 'hour'
        elif time_unit_choice == '2':
            time_unit = 'minute'
        else:
            print("\033[91mWrong choice\033[0m")
            return
        
        time_value = input("\033[93mEnter the \033[92mdesired input\033[93m:\033[0m ").strip()
        interval_seconds = int(time_value) * 3600 if time_unit == 'hour' else int(time_value) * 60
        reset_ipsec(interval_seconds)
        print("\033[93m────────────────────────────────────────\033[0m")
        
def wireguard_mtu():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print("\033[92m(   ) \033[93mWireguard Edit MTU Menu\033[0m")
    print('\033[92m "-"\033[93m══════════════════════════\033[0m')
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[92mWireguard\033[0m")
    print("2. \033[93mWireguard & GRE6TAP \033[0m")
    print("3. \033[92mWireguard & SIT \033[0m")
    print("0. \033[94mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if server_type == "1":
            wireguardmtu_mnu()
            break
        elif server_type == "2":
            wireguardgre6tapmtu_mnu()
            break
        elif server_type == "3":
            wireguardsitmtu_mnu()
            break
        elif server_type == "0":
            clear()
            wireguard_allinone_mnu()
            break
        else:
            print("Invalid choice.")


def wireguardsitmtu_mnu():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print("\033[92m(   ) \033[93mWireguard SIT Edit Menu\033[0m")
    print('\033[92m "-"\033[93m══════════════════════════\033[0m')
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[92mServer Configs\033[0m")
    print("2. \033[93mClients \033[0m")
    print("0. \033[94mback to the MTU menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if server_type == "1":
            wireguardsitmtuserver_mnu()
            break
        elif server_type == "2":
            wireguardsitmtuclients_mnu()
            break
        elif server_type == "0":
            clear()
            wireguardsitmtu_mnu()
            break
        else:
            print("Invalid choice.")


def wireguardsitmtuserver_mnu():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print("\033[92m(   ) \033[93mWireguard SIT Edit Menu\033[0m")
    print('\033[92m "-"\033[93m══════════════════════════\033[0m')
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[93mServer Configs [1]\033[0m")
    print("2. \033[93mServer Configs [2]\033[0m")
    print("3. \033[92mServer Configs [3]\033[0m")
    print("4. \033[93mServer Configs [4]\033[0m")
    print("5. \033[93mServer Configs [5]\033[0m")
    print("0. \033[94mback to the MTU menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if server_type == "1":
            modify_wireguard_mtu_server1()
            priv_kh1_mtu()
            break
        elif server_type == "2":
            modify_wireguard_mtu_server2()
            priv_kh2_mtu()
            break
        elif server_type == "3":
            modify_wireguard_mtu_server3()
            priv_kh3_mtu()
            break
        elif server_type == "4":
            modify_wireguard_mtu_server4()
            priv_kh4_mtu()
            break
        elif server_type == "5":
            modify_wireguard_mtu_server5()
            priv_kh5_mtu()
            break
        elif server_type == "0":
            clear()
            wireguardsitmtu_mnu()
            break
        else:
            print("Invalid choice.")


def wireguardsitmtuclients_mnu():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print("\033[92m(   ) \033[93mWireguard SIT Edit Menu\033[0m")
    print('\033[92m "-"\033[93m══════════════════════════\033[0m')
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[93mClient [1]\033[0m")
    print("2. \033[93mClient [2]\033[0m")
    print("3. \033[92mClient [3]\033[0m")
    print("4. \033[93mClient [4]\033[0m")
    print("5. \033[93mClient [5]\033[0m")
    print("0. \033[94mback to the MTU menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if server_type == "1":
            modify_wireguard_mtu_client1()
            priv_kh1_mtu()
            break
        elif server_type == "2":
            modify_wireguard_mtu_client1()
            priv_kh2_mtu()
            break
        elif server_type == "3":
            modify_wireguard_mtu_client1()
            priv_kh3_mtu()
            break
        elif server_type == "4":
            modify_wireguard_mtu_client1()
            priv_kh4_mtu()
            break
        elif server_type == "5":
            modify_wireguard_mtu_client1()
            priv_kh5_mtu()
            break
        elif server_type == "0":
            clear()
            wireguardsitmtu_mnu()
            break
        else:
            print("Invalid choice.")


def wireguardgre6tapmtu_mnu():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print("\033[92m(   ) \033[93mWireguard GRE6TAP Edit Menu\033[0m")
    print('\033[92m "-"\033[93m══════════════════════════\033[0m')
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[92mServer Configs\033[0m")
    print("2. \033[93mClients \033[0m")
    print("0. \033[94mback to the MTU menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if server_type == "1":
            wireguardgre6tapmtuserver_mnu()
            break
        elif server_type == "2":
            wireguardgre6tapmtuclients_mnu()
            break
        elif server_type == "0":
            clear()
            wireguardgre6tapmtu_mnu()
            break
        else:
            print("Invalid choice.")


def wireguardgre6tapmtuserver_mnu():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print("\033[92m(   ) \033[93mWireguard GRE6TAP Edit Menu\033[0m")
    print('\033[92m "-"\033[93m══════════════════════════\033[0m')
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[93mServer Configs [1]\033[0m")
    print("2. \033[93mServer Configs [2]\033[0m")
    print("3. \033[92mServer Configs [3]\033[0m")
    print("4. \033[93mServer Configs [4]\033[0m")
    print("5. \033[93mServer Configs [5]\033[0m")
    print("0. \033[94mback to the MTU menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if server_type == "1":
            modify_wireguard_mtu_server1()
            gre6_kh1tap_mtu()
            break
        elif server_type == "2":
            modify_wireguard_mtu_server2()
            gre6_kh2tap_mtu()
            break
        elif server_type == "3":
            modify_wireguard_mtu_server3()
            gre6_kh3tap_mtu()
            break
        elif server_type == "4":
            modify_wireguard_mtu_server4()
            gre6_kh4tap_mtu()
            break
        elif server_type == "5":
            modify_wireguard_mtu_server5()
            gre6_kh5tap_mtu()
            break
        elif server_type == "0":
            clear()
            wireguardgre6tapmtu_mnu()
            break
        else:
            print("Invalid choice.")


def wireguardgre6tapmtuclients_mnu():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print("\033[92m(   ) \033[93mWireguard GRE6TAP Edit Menu\033[0m")
    print('\033[92m "-"\033[93m══════════════════════════\033[0m')
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[93mClient [1]\033[0m")
    print("2. \033[93mClient [2]\033[0m")
    print("3. \033[92mClient [3]\033[0m")
    print("4. \033[93mClient [4]\033[0m")
    print("5. \033[93mClient [5]\033[0m")
    print("0. \033[94mback to the MTU menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if server_type == "1":
            modify_wireguard_mtu_client1()
            gre6_kh1tap_mtu()
            break
        elif server_type == "2":
            modify_wireguard_mtu_client1()
            gre6_kh2tap_mtu()
            break
        elif server_type == "3":
            modify_wireguard_mtu_client1()
            gre6_kh3tap_mtu()
            break
        elif server_type == "4":
            modify_wireguard_mtu_client1()
            gre6_kh4tap_mtu()
            break
        elif server_type == "5":
            modify_wireguard_mtu_client1()
            gre6_kh5tap_mtu()
            break
        elif server_type == "0":
            clear()
            wireguardgre6tapmtu_mnu()
            break
        else:
            print("Invalid choice.")


def wireguardmtu_mnu():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print("\033[92m(   ) \033[93mWireguard UDP Edit Menu\033[0m")
    print('\033[92m "-"\033[93m══════════════════════════\033[0m')
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[92mServer Configs\033[0m")
    print("2. \033[93mClients \033[0m")
    print("0. \033[94mback to the MTU menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if server_type == "1":
            wireguardmtuserver_mnu()
            break
        elif server_type == "2":
            wireguardmtuclients_mnu()
            break
        elif server_type == "0":
            clear()
            wireguard_mtu()
            break
        else:
            print("Invalid choice.")


def wireguardmtuserver_mnu():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print("\033[92m(   ) \033[93mWireguard UDP Edit Menu\033[0m")
    print('\033[92m "-"\033[93m══════════════════════════\033[0m')
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[93mServer Configs [1]\033[0m")
    print("2. \033[93mServer Configs [2]\033[0m")
    print("3. \033[92mServer Configs [3]\033[0m")
    print("4. \033[93mServer Configs [4]\033[0m")
    print("5. \033[93mServer Configs [5]\033[0m")
    print("0. \033[94mback to the MTU menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if server_type == "1":
            modify_wireguard_mtu_server1()
            break
        elif server_type == "2":
            modify_wireguard_mtu_server2()
            break
        elif server_type == "3":
            modify_wireguard_mtu_server3()
            break
        elif server_type == "4":
            modify_wireguard_mtu_server4()
            break
        elif server_type == "5":
            modify_wireguard_mtu_server5()
            break
        elif server_type == "0":
            clear()
            wireguardmtu_mnu()
            break
        else:
            print("Invalid choice.")


def wireguardmtuclients_mnu():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print("\033[92m(   ) \033[93mWireguard UDP Edit Menu\033[0m")
    print('\033[92m "-"\033[93m══════════════════════════\033[0m')
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[93mClient [1]\033[0m")
    print("2. \033[93mClient [2]\033[0m")
    print("3. \033[92mClient [3]\033[0m")
    print("4. \033[93mClient [4]\033[0m")
    print("5. \033[93mClient [5]\033[0m")
    print("0. \033[94mback to the MTU menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if server_type == "1":
            modify_wireguard_mtu_client1()
            break
        elif server_type == "2":
            modify_wireguard_mtu_client1()
            break
        elif server_type == "3":
            modify_wireguard_mtu_client1()
            break
        elif server_type == "4":
            modify_wireguard_mtu_client1()
            break
        elif server_type == "5":
            modify_wireguard_mtu_client1()
            break
        elif server_type == "0":
            clear()
            wireguardmtu_mnu()
            break
        else:
            print("Invalid choice.")


def modify_wireguard_mtu_client1():
    print("\033[93m───────────────────────────────────────\033[0m")
    print("\033[92mCLIENT:\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    mtu_value = input(
        "\033[93mEnter the \033[92mMTU value \033[93m[ \033[96mWireGuard \033[97m[Client] \033[93m]:\033[0m "
    )
    config_file = "/etc/wireguard/wireclient.conf"

    if os.path.exists(config_file):
        with open(config_file, "r") as file:
            config_lines = file.readlines()

        mtu_set = False
        for i, line in enumerate(config_lines):
            if line.strip().startswith("MTU ="):
                config_lines[i] = f"MTU = {mtu_value}\n"
                mtu_set = True
                break

        if not mtu_set:
            for i, line in enumerate(config_lines):
                if line.strip() == "[Interface]":
                    config_lines.insert(i + 1, f"MTU = {mtu_value}\n")
                    break

        with open(config_file, "w") as file:
            file.writelines(config_lines)

        print("\033[92mMTU value updated successfully\033[0m")

        subprocess.run(
            ["wg-quick", "down", "/etc/wireguard/wireclient.conf"], check=True
        )
        subprocess.run(["wg-quick", "up", "/etc/wireguard/wireclient.conf"], check=True)
        print("\033[92mWireGuard interface restarted\033[0m")
    else:
        print("\033[91mWireGuard configuration file doesn't exist\033[0m")


def modify_wireguard_mtu_server1():
    print("\033[93m───────────────────────────────────────\033[0m")
    print("\033[92mServer Config [1]:\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    mtu_value = input(
        "\033[93mEnter the \033[92mMTU value \033[93m[ \033[96mWireGuard \033[97m[Server Config 1] \033[93m]:\033[0m "
    )
    config_file = "/etc/wireguard/wireserver1.conf"

    if os.path.exists(config_file):
        with open(config_file, "r") as file:
            config_lines = file.readlines()

        mtu_set = False
        for i, line in enumerate(config_lines):
            if line.strip().startswith("MTU ="):
                config_lines[i] = f"MTU = {mtu_value}\n"
                mtu_set = True
                break

        if not mtu_set:
            for i, line in enumerate(config_lines):
                if line.strip() == "[Interface]":
                    config_lines.insert(i + 1, f"MTU = {mtu_value}\n")
                    break

        with open(config_file, "w") as file:
            file.writelines(config_lines)

        print("\033[92mMTU value updated successfully\033[0m")

        subprocess.run(
            ["wg-quick", "down", "/etc/wireguard/wireserver1.conf"], check=True
        )
        subprocess.run(
            ["wg-quick", "up", "/etc/wireguard/wireserver1.conf"], check=True
        )
        print("\033[92mWireGuard interface restarted\033[0m")
    else:
        print("\033[91mWireGuard configuration file doesn't exist\033[0m")


def modify_wireguard_mtu_server2():
    print("\033[93m───────────────────────────────────────\033[0m")
    print("\033[92mServer Config [2]:\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    mtu_value = input(
        "\033[93mEnter the \033[92mMTU value \033[93m[ \033[96mWireGuard \033[97m[Server Config 2] \033[93m]:\033[0m "
    )
    config_file = "/etc/wireguard/wireserver2.conf"

    if os.path.exists(config_file):
        with open(config_file, "r") as file:
            config_lines = file.readlines()

        mtu_set = False
        for i, line in enumerate(config_lines):
            if line.strip().startswith("MTU ="):
                config_lines[i] = f"MTU = {mtu_value}\n"
                mtu_set = True
                break

        if not mtu_set:
            for i, line in enumerate(config_lines):
                if line.strip() == "[Interface]":
                    config_lines.insert(i + 1, f"MTU = {mtu_value}\n")
                    break

        with open(config_file, "w") as file:
            file.writelines(config_lines)

        print("\033[92mMTU value updated successfully\033[0m")

        subprocess.run(
            ["wg-quick", "down", "/etc/wireguard/wireserver2.conf"], check=True
        )
        subprocess.run(
            ["wg-quick", "up", "/etc/wireguard/wireserver2.conf"], check=True
        )
        print("\033[92mWireGuard interface restarted\033[0m")
    else:
        print("\033[91mWireGuard configuration file doesn't exist\033[0m")


def modify_wireguard_mtu_server3():
    print("\033[93m───────────────────────────────────────\033[0m")
    print("\033[92mServer Config [3]:\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    mtu_value = input(
        "\033[93mEnter the \033[92mMTU value \033[93m[ \033[96mWireGuard \033[97m[Server Config 3] \033[93m]:\033[0m "
    )
    config_file = "/etc/wireguard/wireserver3.conf"

    if os.path.exists(config_file):
        with open(config_file, "r") as file:
            config_lines = file.readlines()

        mtu_set = False
        for i, line in enumerate(config_lines):
            if line.strip().startswith("MTU ="):
                config_lines[i] = f"MTU = {mtu_value}\n"
                mtu_set = True
                break

        if not mtu_set:
            for i, line in enumerate(config_lines):
                if line.strip() == "[Interface]":
                    config_lines.insert(i + 1, f"MTU = {mtu_value}\n")
                    break

        with open(config_file, "w") as file:
            file.writelines(config_lines)

        print("\033[92mMTU value updated successfully\033[0m")

        subprocess.run(
            ["wg-quick", "down", "/etc/wireguard/wireserver3.conf"], check=True
        )
        subprocess.run(
            ["wg-quick", "up", "/etc/wireguard/wireserver3.conf"], check=True
        )
        print("\033[92mWireGuard interface restarted\033[0m")
    else:
        print("\033[91mWireGuard configuration file doesn't exist\033[0m")


def modify_wireguard_mtu_server4():
    print("\033[93m───────────────────────────────────────\033[0m")
    print("\033[92mServer Config [4]:\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    mtu_value = input(
        "\033[93mEnter the \033[92mMTU value \033[93m[ \033[96mWireGuard \033[97m[Server Config 4] \033[93m]:\033[0m "
    )
    config_file = "/etc/wireguard/wireserver4.conf"

    if os.path.exists(config_file):
        with open(config_file, "r") as file:
            config_lines = file.readlines()

        mtu_set = False
        for i, line in enumerate(config_lines):
            if line.strip().startswith("MTU ="):
                config_lines[i] = f"MTU = {mtu_value}\n"
                mtu_set = True
                break

        if not mtu_set:
            for i, line in enumerate(config_lines):
                if line.strip() == "[Interface]":
                    config_lines.insert(i + 1, f"MTU = {mtu_value}\n")
                    break

        with open(config_file, "w") as file:
            file.writelines(config_lines)

        print("\033[92mMTU value updated successfully\033[0m")

        subprocess.run(
            ["wg-quick", "down", "/etc/wireguard/wireserver4.conf"], check=True
        )
        subprocess.run(
            ["wg-quick", "up", "/etc/wireguard/wireserver4.conf"], check=True
        )
        print("\033[92mWireGuard interface restarted\033[0m")
    else:
        print("\033[91mWireGuard configuration file doesn't exist\033[0m")


def modify_wireguard_mtu_server5():
    print("\033[93m───────────────────────────────────────\033[0m")
    print("\033[92mServer Config [5]:\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    mtu_value = input(
        "\033[93mEnter the \033[92mMTU value \033[93m[ \033[96mWireGuard \033[97m[Server Config 5] \033[93m]:\033[0m "
    )
    config_file = "/etc/wireguard/wireserver5.conf"

    if os.path.exists(config_file):
        with open(config_file, "r") as file:
            config_lines = file.readlines()

        mtu_set = False
        for i, line in enumerate(config_lines):
            if line.strip().startswith("MTU ="):
                config_lines[i] = f"MTU = {mtu_value}\n"
                mtu_set = True
                break

        if not mtu_set:
            for i, line in enumerate(config_lines):
                if line.strip() == "[Interface]":
                    config_lines.insert(i + 1, f"MTU = {mtu_value}\n")
                    break

        with open(config_file, "w") as file:
            file.writelines(config_lines)

        print("\033[92mMTU value updated successfully\033[0m")

        subprocess.run(
            ["wg-quick", "down", "/etc/wireguard/wireserver5.conf"], check=True
        )
        subprocess.run(
            ["wg-quick", "up", "/etc/wireguard/wireserver5.conf"], check=True
        )
        print("\033[92mWireGuard interface restarted\033[0m")
    else:
        print("\033[91mWireGuard configuration file doesn't exist\033[0m")


def gre6_kh1tap_mtu():

    mtu_value = input(
        "\033[93mEnter the \033[92mMTU value \033[93m[ \033[96mGRE6 \033[93m]:\033[0m "
    )
    mtu_command = f"ip link set dev azumig61 mtu {mtu_value}\n"

    if os.path.exists("/etc/gre61.sh"):
        with open("/etc/gre61.sh", "r") as file:
            sh_contents = file.readlines()

        if any("link set dev azumig61 mtu" in line for line in sh_contents):
            sh_contents = [
                line for line in sh_contents if "link set dev azumig61 mtu" not in line
            ]

            with open("/etc/gre61.sh", "w") as file:
                file.writelines(sh_contents)

        with open("/etc/gre61.sh", "a") as file:
            file.write(mtu_command)

        print("\033[92mMTU command edited successfully\033[0m")
        subprocess.run(mtu_command, shell=True)
    else:
        print("\033[91mCommand file doesn't exist\033[0m")


def gre6_kh2tap_mtu():

    mtu_value = input(
        "\033[93mEnter the \033[92mMTU value \033[93m[ \033[96mGRE6 \033[93m]:\033[0m "
    )
    mtu_command = f"ip link set dev azumig62 mtu {mtu_value}\n"

    if os.path.exists("/etc/gre62.sh"):
        with open("/etc/gre62.sh", "r") as file:
            sh_contents = file.readlines()

        if any("link set dev azumig62 mtu" in line for line in sh_contents):
            sh_contents = [
                line for line in sh_contents if "link set dev azumig62 mtu" not in line
            ]

            with open("/etc/gre62.sh", "w") as file:
                file.writelines(sh_contents)

        with open("/etc/gre62.sh", "a") as file:
            file.write(mtu_command)

        print("\033[92mMTU command edited successfully\033[0m")
        subprocess.run(mtu_command, shell=True)
    else:
        print("\033[91mCommand file doesn't exist\033[0m")


def gre6_kh3tap_mtu():

    mtu_value = input(
        "\033[93mEnter the \033[92mMTU value \033[93m[ \033[96mGRE6 \033[93m]:\033[0m "
    )
    mtu_command = f"ip link set dev azumig63 mtu {mtu_value}\n"

    if os.path.exists("/etc/gre63.sh"):
        with open("/etc/gre63.sh", "r") as file:
            sh_contents = file.readlines()

        if any("link set dev azumig63 mtu" in line for line in sh_contents):
            sh_contents = [
                line for line in sh_contents if "link set dev azumig63 mtu" not in line
            ]

            with open("/etc/gre63.sh", "w") as file:
                file.writelines(sh_contents)

        with open("/etc/gre63.sh", "a") as file:
            file.write(mtu_command)

        print("\033[92mMTU command edited successfully\033[0m")
        subprocess.run(mtu_command, shell=True)
    else:
        print("\033[91mCommand file doesn't exist\033[0m")


def gre6_kh4tap_mtu():

    mtu_value = input(
        "\033[93mEnter the \033[92mMTU value \033[93m[ \033[96mGRE6 \033[93m]:\033[0m "
    )
    mtu_command = f"ip link set dev azumig64 mtu {mtu_value}\n"

    if os.path.exists("/etc/gre64.sh"):
        with open("/etc/gre64.sh", "r") as file:
            sh_contents = file.readlines()

        if any("link set dev azumig64 mtu" in line for line in sh_contents):
            sh_contents = [
                line for line in sh_contents if "link set dev azumig64 mtu" not in line
            ]

            with open("/etc/gre64.sh", "w") as file:
                file.writelines(sh_contents)

        with open("/etc/gre64.sh", "a") as file:
            file.write(mtu_command)

        print("\033[92mMTU command edited successfully\033[0m")
        subprocess.run(mtu_command, shell=True)
    else:
        print("\033[91mCommand file doesn't exist\033[0m")


def gre6_kh5tap_mtu():

    mtu_value = input(
        "\033[93mEnter the \033[92mMTU value \033[93m[ \033[96mGRE6 \033[93m]:\033[0m "
    )
    mtu_command = f"ip link set dev azumig65 mtu {mtu_value}\n"

    if os.path.exists("/etc/gre65.sh"):
        with open("/etc/gre65.sh", "r") as file:
            sh_contents = file.readlines()

        if any("link set dev azumig65 mtu" in line for line in sh_contents):
            sh_contents = [
                line for line in sh_contents if "link set dev azumig65 mtu" not in line
            ]

            with open("/etc/gre65.sh", "w") as file:
                file.writelines(sh_contents)

        with open("/etc/gre65.sh", "a") as file:
            file.write(mtu_command)

        print("\033[92mMTU command edited successfully\033[0m")
        subprocess.run(mtu_command, shell=True)
    else:
        print("\033[91mCommand file doesn't exist\033[0m")


def priv_kh1_mtu():
    print("\033[93m───────────────────────────────────────\033[0m")
    display_notification("\033[93m             Server 1\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    mtu_value = input(
        "\033[93mEnter the \033[92mMTU value \033[93m[ \033[96mPrivate IP \033[93m]:\033[0m "
    )
    mtu_command = f"ip link set dev azumi1 mtu {mtu_value}\n"

    if os.path.exists("/etc/private1.sh"):
        with open("/etc/private1.sh", "r") as file:
            sh_contents = file.readlines()

        if any("link set dev azumi1 mtu" in line for line in sh_contents):
            sh_contents = [
                line for line in sh_contents if "link set dev azumi1 mtu" not in line
            ]

            with open("/etc/private1.sh", "w") as file:
                file.writelines(sh_contents)

        with open("/etc/private1.sh", "a") as file:
            file.write(mtu_command)

        print("\033[92mMTU command edited successfully\033[0m")
        subprocess.run(mtu_command, shell=True)
    else:
        print("\033[91mCommand file doesn't exist\033[0m")


def priv_kh2_mtu():
    print("\033[93m───────────────────────────────────────\033[0m")
    display_notification("\033[93m             Server 2\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    mtu_value = input(
        "\033[93mEnter the \033[92mMTU value \033[93m[ \033[96mPrivate IP \033[93m]:\033[0m "
    )
    mtu_command = f"ip link set dev azumi2 mtu {mtu_value}\n"

    if os.path.exists("/etc/private2.sh"):
        with open("/etc/private2.sh", "r") as file:
            sh_contents = file.readlines()

        if any("link set dev azumi2 mtu" in line for line in sh_contents):
            sh_contents = [
                line for line in sh_contents if "link set dev azumi2 mtu" not in line
            ]

            with open("/etc/private2.sh", "w") as file:
                file.writelines(sh_contents)

        with open("/etc/private2.sh", "a") as file:
            file.write(mtu_command)

        print("\033[92mMTU command edited successfully\033[0m")
        subprocess.run(mtu_command, shell=True)
    else:
        print("\033[91mCommand file doesn't exist\033[0m")


def priv_kh3_mtu():
    print("\033[93m───────────────────────────────────────\033[0m")
    display_notification("\033[93m             Server 3\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    mtu_value = input(
        "\033[93mEnter the \033[92mMTU value \033[93m[ \033[96mPrivate IP \033[93m]:\033[0m "
    )
    mtu_command = f"ip link set dev azumi3 mtu {mtu_value}\n"

    if os.path.exists("/etc/private3.sh"):
        with open("/etc/private3.sh", "r") as file:
            sh_contents = file.readlines()

        if any("link set dev azumi3 mtu" in line for line in sh_contents):
            sh_contents = [
                line for line in sh_contents if "link set dev azumi3 mtu" not in line
            ]

            with open("/etc/private3.sh", "w") as file:
                file.writelines(sh_contents)

        with open("/etc/private3.sh", "a") as file:
            file.write(mtu_command)

        print("\033[92mMTU command edited successfully\033[0m")
        subprocess.run(mtu_command, shell=True)
    else:
        print("\033[91mCommand file doesn't exist\033[0m")


def priv_kh4_mtu():
    print("\033[93m───────────────────────────────────────\033[0m")
    display_notification("\033[93m             Server 4\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    mtu_value = input(
        "\033[93mEnter the \033[92mMTU value \033[93m[ \033[96mPrivate IP \033[93m]:\033[0m "
    )
    mtu_command = f"ip link set dev azumi4 mtu {mtu_value}\n"

    if os.path.exists("/etc/private4.sh"):
        with open("/etc/private4.sh", "r") as file:
            sh_contents = file.readlines()

        if any("link set dev azumi4 mtu" in line for line in sh_contents):
            sh_contents = [
                line for line in sh_contents if "link set dev azumi4 mtu" not in line
            ]

            with open("/etc/private4.sh", "w") as file:
                file.writelines(sh_contents)

        with open("/etc/private4.sh", "a") as file:
            file.write(mtu_command)

        print("\033[92mMTU command edited successfully\033[0m")
        subprocess.run(mtu_command, shell=True)
    else:
        print("\033[91mCommand file doesn't exist\033[0m")


def priv_kh5_mtu():
    print("\033[93m───────────────────────────────────────\033[0m")
    display_notification("\033[93m             Server 5\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    mtu_value = input(
        "\033[93mEnter the \033[92mMTU value \033[93m[ \033[96mPrivate IP \033[93m]:\033[0m "
    )
    mtu_command = f"ip link set dev azumi5 mtu {mtu_value}\n"

    if os.path.exists("/etc/private5.sh"):
        with open("/etc/private5.sh", "r") as file:
            sh_contents = file.readlines()

        if any("link set dev azumi5 mtu" in line for line in sh_contents):
            sh_contents = [
                line for line in sh_contents if "link set dev azumi5 mtu" not in line
            ]

            with open("/etc/private5.sh", "w") as file:
                file.writelines(sh_contents)

        with open("/etc/private5.sh", "a") as file:
            file.write(mtu_command)

        print("\033[92mMTU command edited successfully\033[0m")
        subprocess.run(mtu_command, shell=True)
    else:
        print("\033[91mCommand file doesn't exist\033[0m")


def Wireguard_uninstall():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print("\033[92m(   ) \033[93mWireguard Uninstall Menu\033[0m")
    print('\033[92m "-"\033[93m══════════════════════════\033[0m')
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[93mWireguard\033[0m")
    print("2. \033[92mWireguard & GRE6tap\033[0m")
    print("3. \033[92mWireguard & SIT\033[0m")
    print("0. \033[94mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if server_type == "1":
            remove_wireguardudp()
            break
        elif server_type == "2":
            remove_wireguardgre6tap()
            break
        elif server_type == "3":
            remove_wireguardsit()
            break
        elif server_type == "0":
            os.system("clear")
            wireguard_allinone_mnu()
            break
        else:
            print("Invalid choice.")


config_files = [
    "/etc/wireguard/wireserver1.conf",
    "/etc/wireguard/wireserver2.conf",
    "/etc/wireguard/wireserver3.conf",
    "/etc/wireguard/wireserver4.conf",
    "/etc/wireguard/wireserver5.conf",
    "/etc/wireguard/wireclient.conf",
]

listen_port_pattern = re.compile(r"ListenPort\s*=\s*(\d+)")
ipv4_address_pattern = re.compile(r"Address\s*=\s*(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})")
ipv6_address_pattern = re.compile(r"Address\s*=\s*([A-Fa-f0-9:]+)")
ipv4_allowed_ips_pattern = re.compile(
    r"AllowedIPs\s*=\s*(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})"
)
ipv6_allowed_ips_pattern = re.compile(r"AllowedIPs\s*=\s*([A-Fa-f0-9:/]+)")


def extract_ufwrules(config_file):
    listen_port = None
    addresses = []

    listen_port_pattern = re.compile(r'listen\s+(\d+)')
    ipv4_address_pattern = re.compile(r'inet\s+(\d+\.\d+\.\d+\.\d+)')
    ipv6_address_pattern = re.compile(r'inet6\s+([a-fA-F0-9:]+)')
    ipv4_allowed_ips_pattern = re.compile(r'allowed_ips_v4\s+(\d+\.\d+\.\d+\.\d+)')
    ipv6_allowed_ips_pattern = re.compile(r'allowed_ips_v6\s+([a-fA-F0-9:]+)')

    with open(config_file, "r") as file:
        for line in file:
            listen_port_match = listen_port_pattern.search(line)
            if listen_port_match:
                listen_port = listen_port_match.group(1)
            
            ipv4_address_match = ipv4_address_pattern.search(line)
            if ipv4_address_match:
                addresses.append(ipv4_address_match.group(1))

            ipv6_address_match = ipv6_address_pattern.search(line)
            if ipv6_address_match:
                addresses.append(ipv6_address_match.group(1).split("/")[0])
            
            ipv4_allowed_ips_match = ipv4_allowed_ips_pattern.search(line)
            if ipv4_allowed_ips_match:
                addresses.append(ipv4_allowed_ips_match.group(1))

            ipv6_allowed_ips_match = ipv6_allowed_ips_pattern.search(line)
            if ipv6_allowed_ips_match:
                addresses.append(ipv6_allowed_ips_match.group(1).split("/")[0])

    return listen_port, addresses


def delete_ufw_rules_uninstall(listen_port, addresses):
    if listen_port:
        result = subprocess.run(
            ["sudo", "ufw", "delete", "allow", f"{listen_port}/udp"],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            check=False,
        )
        if result.returncode == 0:
            print(f"\033[92mDeleted UFW rule for port {listen_port}/udp\033[0m")
        else:
            print(
                f"\033[91mfailed to delete UFW rule for port {listen_port}/udp: {result.stderr.decode().strip()}\033[0m"
            )

    for ip in addresses:
        if ":" in ip:  # IPv6 address
            result = subprocess.run(
                ["sudo", "ufw", "delete", "allow", "from", ip],
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                check=False,
            )
            if result.returncode == 0:
                print(f"\033[92mDeleted UFW rule for IPv6 address {ip}\033[0m")
            else:
                print(
                    f"\033[91mfailed to delete UFW rule for IPv6 address {ip}: {result.stderr.decode().strip()}\033[0m"
                )
        elif "." in ip:  # IPv4 address
            result = subprocess.run(
                ["sudo", "ufw", "delete", "allow", "from", ip],
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                check=False,
            )
            if result.returncode == 0:
                print(f"\033[92mDeleted UFW rule for IPv4 address {ip}\033[0m")
            else:
                print(
                    f"\033[91mfailed to delete UFW rule for IPv4 address {ip}: {result.stderr.decode().strip()}\033[0m"
                )
        else:
            print(f"\033[91mUnsupported IP address detected: {ip}\033[0m")


def remove_wireguardudp():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print("\033[92m(   ) \033[93mWireguard UDP Uninstall Menu\033[0m")
    print('\033[92m "-"\033[93m══════════════════════════\033[0m')
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[93mServer Configs\033[0m")
    print("2. \033[92mClients\033[0m")
    print("0. \033[94mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if server_type == "1":
            server_wireguardudp()
            break
        elif server_type == "2":
            clients_wireguardudp()
            break
        elif server_type == "0":
            os.system("clear")
            Wireguard_uninstall()
            break
        else:
            print("Invalid choice.")


def server_wireguardudp():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print("\033[92m(   ) \033[93mWireguard UDP Uninstall Menu\033[0m")
    print('\033[92m "-"\033[93m══════════════════════════\033[0m')
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[93mServer Configs [1]\033[0m")
    print("2. \033[93mServer Configs [2]\033[0m")
    print("3. \033[92mServer Configs [3]\033[0m")
    print("4. \033[93mServer Configs [4]\033[0m")
    print("5. \033[93mServer Configs [5]\033[0m")
    print("6. \033[92mall of them\033[0m")
    print("0. \033[94mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if server_type == "1":
            server1_wireguardudp()
            break
        elif server_type == "2":
            server2_wireguardudp()
            break
        elif server_type == "3":
            server3_wireguardudp()
            break
        elif server_type == "4":
            server4_wireguardudp()
            break
        elif server_type == "5":
            server5_wireguardudp()
            break
        elif server_type == "6":
            serverq_wireguardudp()
            break
        elif server_type == "0":
            os.system("clear")
            remove_wireguardudp()
            break
        else:
            print("Invalid choice.")


def serverq_wireguardudp():
    print("\033[93m───────────────────────────────────────\033[0m")
    display_notification("\033[93mQuestion time!\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    num_servers = int(
        input(
            "\033[93mHow many \033[92mConfigs\033[93m do you want to uninstall?\033[0m "
        )
    )

    for i in range(1, num_servers + 1):
        menu_name = "server{}_wireguardudp".format(i)
        if menu_name in globals():
            globals()[menu_name]()
        else:
            print("Function {} does not exist.".format(menu_name))


def clients_wireguardudp():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print("\033[92m(   ) \033[93mWireguard UDP Uninstall Menu\033[0m")
    print('\033[92m "-"\033[93m══════════════════════════\033[0m')
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[93mClient [1]\033[0m")
    print("2. \033[93mClient [2]\033[0m")
    print("3. \033[92mClient [3]\033[0m")
    print("4. \033[93mClient [4]\033[0m")
    print("5. \033[93mClient [5]\033[0m")
    print("6. \033[92mall of them\033[0m")
    print("0. \033[94mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if server_type == "1":
            client1_wireguardudp()
            break
        elif server_type == "2":
            client1_wireguardudp()
            break
        elif server_type == "3":
            client1_wireguardudp()
            break
        elif server_type == "4":
            client1_wireguardudp()
            break
        elif server_type == "5":
            client1_wireguardudp()
            break
        elif server_type == "6":
            client1_wireguardudp()
            break
        elif server_type == "0":
            os.system("clear")
            remove_wireguardudp()
            break
        else:
            print("Invalid choice.")


def server1_wireguardudp():
    os.system("clear")
    print("\033[93m───────────────────────────────────────\033[0m")
    display_notification("\033[93mRemoving \033[92mWireguard\033[93m Tunnel...\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    for config_file in config_files:
        if os.path.exists(config_file):
            print(f"Processing {config_file}...")
            print("\033[93m───────────────────────────────────────\033[0m")
            listen_port, addresses = extract_ufwrules(config_file)
            delete_ufw_rules_uninstall(listen_port, addresses)

    try:
        if (
            subprocess.call(
                "test -f /etc/wireguard/wireserver1.conf > /dev/null 2>&1", shell=True
            )
            == 0
        ):
            subprocess.run(
                "rm /etc/wireguard/wireserver1.conf > /dev/null 2>&1", shell=True
            )

        display_notification("\033[93mRemoving stuff...\033[0m")
        subprocess.run("sudo rm /etc/ipsec1.conf > /dev/null 2>&1", shell=True)
        subprocess.run("sudo rm /etc/ipsec.secrets > /dev/null 2>&1", shell=True)
        subprocess.run("systemctl stop strong-azumi1 > /dev/null 2>&1", shell=True)
        subprocess.run("systemctl disable strong-azumi1 > /dev/null 2>&1", shell=True)
        subprocess.run(
            "rm /etc/systemd/system/strong-azumi1.service > /dev/null 2>&1", shell=True
        )

        subprocess.run("sudo rm /etc/ping_wireguard_1.sh", shell=True)

        subprocess.run("systemctl disable wireguardping_1 > /dev/null 2>&1", shell=True)
        subprocess.run("systemctl stop wireguardping_1 > /dev/null 2>&1", shell=True)
        subprocess.run(
            "rm /etc/systemd/system/wireguardping_1.service > /dev/null 2>&1",
            shell=True,
        )
        subprocess.run(
            "systemctl disable wg-quick@wireserver1 > /dev/null 2>&1", shell=True
        )
        subprocess.run(
            "systemctl stop wg-quick@wireserver1 > /dev/null 2>&1", shell=True
        )
        subprocess.run("systemctl daemon-reload", shell=True)

        subprocess.run("ip link set dev wireserver1 down > /dev/null", shell=True)
        subprocess.run("ip link delete wireserver1 > /dev/null", shell=True)
        subprocess.run("apt purge strongswan -y > /dev/null", shell=True)
        print("Progress: ", end="")

        frames = ["⠋", "⠙", "⠹", "⠸", "⠼", "⠴", "⠦", "⠧", "⠇", "⠏"]
        delay = 0.1
        duration = 1
        end_time = time.time() + duration

        while time.time() < end_time:
            for frame in frames:
                print("\r[%s] Loading...  " % frame, end="")
                time.sleep(delay)
                print("\r[%s]             " % frame, end="")
                time.sleep(delay)

        display_checkmark("\033[92mUninstall completed!\033[0m")
    except subprocess.CalledProcessError as e:
        print("Error:", e.output.decode().strip())


def server2_wireguardudp():
    os.system("clear")
    print("\033[93m───────────────────────────────────────\033[0m")
    display_notification("\033[93mRemoving \033[92mWireguard\033[93m Tunnel...\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    for config_file in config_files:
        if os.path.exists(config_file):
            print(f"Processing {config_file}...")
            print("\033[93m───────────────────────────────────────\033[0m")
            listen_port, addresses = extract_ufwrules(config_file)
            delete_ufw_rules_uninstall(listen_port, addresses)
    try:
        if (
            subprocess.call(
                "test -f /etc/wireguard/wireserver2.conf > /dev/null 2>&1", shell=True
            )
            == 0
        ):
            subprocess.run(
                "rm /etc/wireguard/wireserver2.conf > /dev/null 2>&1", shell=True
            )

        display_notification("\033[93mRemoving stuff...\033[0m")
        subprocess.run("sudo rm /etc/ipsec1.conf > /dev/null 2>&1", shell=True)
        subprocess.run("sudo rm /etc/ipsec.secrets > /dev/null 2>&1", shell=True)
        subprocess.run("systemctl stop strong-azumi1 > /dev/null 2>&1", shell=True)
        subprocess.run("systemctl disable strong-azumi1 > /dev/null 2>&1", shell=True)
        subprocess.run(
            "rm /etc/systemd/system/strong-azumi1.service > /dev/null 2>&1", shell=True
        )

        subprocess.run("sudo rm /etc/ping_wireguard_2.sh", shell=True)

        subprocess.run("systemctl disable wireguardping_2 > /dev/null 2>&1", shell=True)
        subprocess.run("systemctl stop wireguardping_2 > /dev/null 2>&1", shell=True)
        subprocess.run(
            "rm /etc/systemd/system/wireguardping_2.service > /dev/null 2>&1",
            shell=True,
        )
        subprocess.run(
            "systemctl disable wg-quick@wireserver2 > /dev/null 2>&1", shell=True
        )
        subprocess.run(
            "systemctl stop wg-quick@wireserver2 > /dev/null 2>&1", shell=True
        )
        subprocess.run("systemctl daemon-reload", shell=True)

        subprocess.run("ip link set dev wireserver2 down > /dev/null", shell=True)
        subprocess.run("ip link delete wireserver2 > /dev/null", shell=True)
        subprocess.run("apt purge strongswan -y > /dev/null", shell=True)
        print("Progress: ", end="")

        frames = ["⠋", "⠙", "⠹", "⠸", "⠼", "⠴", "⠦", "⠧", "⠇", "⠏"]
        delay = 0.1
        duration = 1
        end_time = time.time() + duration

        while time.time() < end_time:
            for frame in frames:
                print("\r[%s] Loading...  " % frame, end="")
                time.sleep(delay)
                print("\r[%s]             " % frame, end="")
                time.sleep(delay)

        display_checkmark("\033[92mUninstall completed!\033[0m")
    except subprocess.CalledProcessError as e:
        print("Error:", e.output.decode().strip())


def server3_wireguardudp():
    os.system("clear")
    print("\033[93m───────────────────────────────────────\033[0m")
    display_notification("\033[93mRemoving \033[92mWireguard\033[93m Tunnel...\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    for config_file in config_files:
        if os.path.exists(config_file):
            print(f"Processing {config_file}...")
            print("\033[93m───────────────────────────────────────\033[0m")
            listen_port, addresses = extract_ufwrules(config_file)
            delete_ufw_rules_uninstall(listen_port, addresses)
    try:
        if (
            subprocess.call(
                "test -f /etc/wireguard/wireserver3.conf > /dev/null 2>&1", shell=True
            )
            == 0
        ):
            subprocess.run(
                "rm /etc/wireguard/wireserver3.conf > /dev/null 2>&1", shell=True
            )

        display_notification("\033[93mRemoving stuff...\033[0m")
        subprocess.run("sudo rm /etc/ipsec1.conf > /dev/null 2>&1", shell=True)
        subprocess.run("sudo rm /etc/ipsec.secrets > /dev/null 2>&1", shell=True)
        subprocess.run("systemctl stop strong-azumi1 > /dev/null 2>&1", shell=True)
        subprocess.run("systemctl disable strong-azumi1 > /dev/null 2>&1", shell=True)
        subprocess.run(
            "rm /etc/systemd/system/strong-azumi1.service > /dev/null 2>&1", shell=True
        )

        subprocess.run("sudo rm /etc/ping_wireguard_3.sh", shell=True)

        subprocess.run("systemctl disable wireguardping_3 > /dev/null 2>&1", shell=True)
        subprocess.run("systemctl stop wireguardping_3 > /dev/null 2>&1", shell=True)
        subprocess.run(
            "rm /etc/systemd/system/wireguardping_3.service > /dev/null 2>&1",
            shell=True,
        )
        subprocess.run(
            "systemctl disable wg-quick@wireserver3 > /dev/null 2>&1", shell=True
        )
        subprocess.run(
            "systemctl stop wg-quick@wireserver3 > /dev/null 2>&1", shell=True
        )
        subprocess.run("systemctl daemon-reload", shell=True)

        subprocess.run("ip link set dev wireserver3 down > /dev/null", shell=True)
        subprocess.run("ip link delete wireserver3 > /dev/null", shell=True)
        subprocess.run("apt purge strongswan -y > /dev/null", shell=True)
        print("Progress: ", end="")

        frames = ["⠋", "⠙", "⠹", "⠸", "⠼", "⠴", "⠦", "⠧", "⠇", "⠏"]
        delay = 0.1
        duration = 1
        end_time = time.time() + duration

        while time.time() < end_time:
            for frame in frames:
                print("\r[%s] Loading...  " % frame, end="")
                time.sleep(delay)
                print("\r[%s]             " % frame, end="")
                time.sleep(delay)

        display_checkmark("\033[92mUninstall completed!\033[0m")
    except subprocess.CalledProcessError as e:
        print("Error:", e.output.decode().strip())


def server4_wireguardudp():
    os.system("clear")
    print("\033[93m───────────────────────────────────────\033[0m")
    display_notification("\033[93mRemoving \033[92mWireguard\033[93m Tunnel...\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    for config_file in config_files:
        if os.path.exists(config_file):
            print(f"Processing {config_file}...")
            print("\033[93m───────────────────────────────────────\033[0m")
            listen_port, addresses = extract_ufwrules(config_file)
            delete_ufw_rules_uninstall(listen_port, addresses)
    try:
        if (
            subprocess.call(
                "test -f /etc/wireguard/wireserver4.conf > /dev/null 2>&1", shell=True
            )
            == 0
        ):
            subprocess.run(
                "rm /etc/wireguard/wireserver4.conf > /dev/null 2>&1", shell=True
            )

        display_notification("\033[93mRemoving stuff...\033[0m")
        subprocess.run("sudo rm /etc/ipsec1.conf > /dev/null 2>&1", shell=True)
        subprocess.run("sudo rm /etc/ipsec.secrets > /dev/null 2>&1", shell=True)
        subprocess.run("systemctl stop strong-azumi1 > /dev/null 2>&1", shell=True)
        subprocess.run("systemctl disable strong-azumi1 > /dev/null 2>&1", shell=True)
        subprocess.run(
            "rm /etc/systemd/system/strong-azumi1.service > /dev/null 2>&1", shell=True
        )

        subprocess.run("sudo rm /etc/ping_wireguard_4.sh", shell=True)

        subprocess.run("systemctl disable wireguardping_4 > /dev/null 2>&1", shell=True)
        subprocess.run("systemctl stop wireguardping_4 > /dev/null 2>&1", shell=True)
        subprocess.run(
            "rm /etc/systemd/system/wireguardping_4.service > /dev/null 2>&1",
            shell=True,
        )
        subprocess.run(
            "systemctl disable wg-quick@wireserver4 > /dev/null 2>&1", shell=True
        )
        subprocess.run(
            "systemctl stop wg-quick@wireserver4 > /dev/null 2>&1", shell=True
        )
        subprocess.run("systemctl daemon-reload", shell=True)

        subprocess.run("ip link set dev wireserver4 down > /dev/null", shell=True)
        subprocess.run("ip link delete wireserver4 > /dev/null", shell=True)
        subprocess.run("apt purge strongswan -y > /dev/null", shell=True)
        print("Progress: ", end="")

        frames = ["⠋", "⠙", "⠹", "⠸", "⠼", "⠴", "⠦", "⠧", "⠇", "⠏"]
        delay = 0.1
        duration = 1
        end_time = time.time() + duration

        while time.time() < end_time:
            for frame in frames:
                print("\r[%s] Loading...  " % frame, end="")
                time.sleep(delay)
                print("\r[%s]             " % frame, end="")
                time.sleep(delay)

        display_checkmark("\033[92mUninstall completed!\033[0m")
    except subprocess.CalledProcessError as e:
        print("Error:", e.output.decode().strip())


def server5_wireguardudp():
    os.system("clear")
    print("\033[93m───────────────────────────────────────\033[0m")
    display_notification("\033[93mRemoving \033[92mWireguard\033[93m Tunnel...\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    for config_file in config_files:
        if os.path.exists(config_file):
            print(f"Processing {config_file}...")
            print("\033[93m───────────────────────────────────────\033[0m")
            listen_port, addresses = extract_ufwrules(config_file)
            delete_ufw_rules_uninstall(listen_port, addresses)
    try:
        if (
            subprocess.call(
                "test -f /etc/wireguard/wireserver5.conf > /dev/null 2>&1", shell=True
            )
            == 0
        ):
            subprocess.run(
                "rm /etc/wireguard/wireserver5.conf > /dev/null 2>&1", shell=True
            )

        display_notification("\033[93mRemoving stuff...\033[0m")
        subprocess.run("sudo rm /etc/ipsec1.conf > /dev/null 2>&1", shell=True)
        subprocess.run("sudo rm /etc/ipsec.secrets > /dev/null 2>&1", shell=True)
        subprocess.run("systemctl stop strong-azumi1 > /dev/null 2>&1", shell=True)
        subprocess.run("systemctl disable strong-azumi1 > /dev/null 2>&1", shell=True)
        subprocess.run(
            "rm /etc/systemd/system/strong-azumi1.service > /dev/null 2>&1", shell=True
        )

        subprocess.run("sudo rm /etc/ping_wireguard_5.sh", shell=True)

        subprocess.run("systemctl disable wireguardping_5 > /dev/null 2>&1", shell=True)
        subprocess.run("systemctl stop wireguardping_5 > /dev/null 2>&1", shell=True)
        subprocess.run(
            "rm /etc/systemd/system/wireguardping_5.service > /dev/null 2>&1",
            shell=True,
        )
        subprocess.run(
            "systemctl disable wg-quick@wireserver5 > /dev/null 2>&1", shell=True
        )
        subprocess.run(
            "systemctl stop wg-quick@wireserver5 > /dev/null 2>&1", shell=True
        )
        subprocess.run("systemctl daemon-reload", shell=True)

        subprocess.run("ip link set dev wireserver5 down > /dev/null", shell=True)
        subprocess.run("ip link delete wireserver5 > /dev/null", shell=True)
        subprocess.run("apt purge strongswan -y > /dev/null", shell=True)
        print("Progress: ", end="")

        frames = ["⠋", "⠙", "⠹", "⠸", "⠼", "⠴", "⠦", "⠧", "⠇", "⠏"]
        delay = 0.1
        duration = 1
        end_time = time.time() + duration

        while time.time() < end_time:
            for frame in frames:
                print("\r[%s] Loading...  " % frame, end="")
                time.sleep(delay)
                print("\r[%s]             " % frame, end="")
                time.sleep(delay)

        display_checkmark("\033[92mUninstall completed!\033[0m")
    except subprocess.CalledProcessError as e:
        print("Error:", e.output.decode().strip())


def client1_wireguardudp():
    os.system("clear")
    print("\033[93m───────────────────────────────────────\033[0m")
    display_notification("\033[93mRemoving \033[92mWireguard\033[93m Tunnel...\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    for config_file in config_files:
        if os.path.exists(config_file):
            print(f"Processing {config_file}...")
            print("\033[93m───────────────────────────────────────\033[0m")
            listen_port, addresses = extract_ufwrules(config_file)
            delete_ufw_rules_uninstall(listen_port, addresses)
    try:
        if (
            subprocess.call(
                "test -f /etc/wireguard/wireclient.conf > /dev/null 2>&1",
                shell=True,
            )
            == 0
        ):
            subprocess.run(
                "rm /etc/wireguard/wireclient.conf > /dev/null 2>&1", shell=True
            )

        display_notification("\033[93mRemoving stuff...\033[0m")
        subprocess.run("sudo rm /etc/ipsec1.conf > /dev/null 2>&1", shell=True)
        subprocess.run("sudo rm /etc/ipsec.secrets > /dev/null 2>&1", shell=True)
        subprocess.run("systemctl stop strong-azumi1 > /dev/null 2>&1", shell=True)
        subprocess.run("systemctl disable strong-azumi1 > /dev/null 2>&1", shell=True)
        subprocess.run(
            "rm /etc/systemd/system/strong-azumi1.service > /dev/null 2>&1", shell=True
        )

        subprocess.run("sudo rm /etc/ping_wireguard.sh", shell=True)

        subprocess.run("systemctl disable wireguardping > /dev/null 2>&1", shell=True)
        subprocess.run("systemctl stop wireguardping > /dev/null 2>&1", shell=True)
        subprocess.run(
            "rm /etc/systemd/system/wireguardping.service > /dev/null 2>&1", shell=True
        )
        subprocess.run(
            "systemctl disable wg-quick@wireclient > /dev/null 2>&1", shell=True
        )
        subprocess.run(
            "systemctl stop wg-quick@wireclient > /dev/null 2>&1", shell=True
        )
        subprocess.run("systemctl daemon-reload", shell=True)

        subprocess.run("ip link set dev wireclient down > /dev/null", shell=True)
        subprocess.run("ip link delete wireclient > /dev/null", shell=True)
        subprocess.run("apt purge strongswan -y > /dev/null", shell=True)
        print("Progress: ", end="")

        frames = ["⠋", "⠙", "⠹", "⠸", "⠼", "⠴", "⠦", "⠧", "⠇", "⠏"]
        delay = 0.1
        duration = 1
        end_time = time.time() + duration

        while time.time() < end_time:
            for frame in frames:
                print("\r[%s] Loading...  " % frame, end="")
                time.sleep(delay)
                print("\r[%s]             " % frame, end="")
                time.sleep(delay)

        display_checkmark("\033[92mUninstall completed!\033[0m")
    except subprocess.CalledProcessError as e:
        print("Error:", e.output.decode().strip())


def delufw(ip_address):
    subprocess.run(["sudo", "ufw", "delete", "allow", "from", ip_address])


# requirement for gre6tap
def remove_gretap61_server1():
    os.system("clear")
    server1_wireguardudp()
    delufw("2002:801a::2")
    delufw("2002:801a::1")
    print("\033[93m───────────────────────────────────────\033[0m")
    display_notification("\033[93mRemoving \033[92mGRE6tap\033[93m Tunnel...\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")

    try:
        if subprocess.call("test -f /etc/gre61.sh", shell=True) == 0:
            subprocess.run("rm /etc/gre61.sh", shell=True)

        display_notification("\033[93mRemoving stuff..\033[0m")
        subprocess.run("sudo rm /etc/ping_ip1.sh", shell=True)
        subprocess.run(
            "systemctl disable ping_ip1.service > /dev/null 2>&1", shell=True
        )
        subprocess.run("systemctl stop ping_ip1.service > /dev/null 2>&1", shell=True)
        subprocess.run(
            "rm /etc/systemd/system/ping_ip1.service > /dev/null 2>&1", shell=True
        )
        subprocess.run("systemctl daemon-reload", shell=True)
        subprocess.run("ip link set dev azumig61 down > /dev/null", shell=True)
        subprocess.run("ip link delete azumig61 > /dev/null", shell=True)

        print("Progress: ", end="")

        frames = ["⠋", "⠙", "⠹", "⠸", "⠼", "⠴", "⠦", "⠧", "⠇", "⠏"]
        delay = 0.1
        duration = 1
        end_time = time.time() + duration

        while time.time() < end_time:
            for frame in frames:
                print("\r[%s] Loading...  " % frame, end="")
                time.sleep(delay)
                print("\r[%s]             " % frame, end="")
                time.sleep(delay)

        display_checkmark("\033[92mUninstall completed!\033[0m")
    except subprocess.CalledProcessError as e:
        print("Error:", e.output.decode().strip())


def remove_gretap62_server2():
    os.system("clear")
    server2_wireguardudp()
    delufw("2002:811a::2")
    delufw("2002:811a::1")
    print("\033[93m───────────────────────────────────────\033[0m")
    display_notification("\033[93mRemoving \033[92mGRE6tap\033[93m Tunnel...\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")

    try:
        if subprocess.call("test -f /etc/gre62.sh", shell=True) == 0:
            subprocess.run("rm /etc/gre62.sh", shell=True)

        display_notification("\033[93mRemoving stuff..\033[0m")
        subprocess.run("sudo rm /etc/ping_ip2.sh", shell=True)

        subprocess.run(
            "systemctl disable ping_ip2.service > /dev/null 2>&1", shell=True
        )
        subprocess.run("systemctl stop ping_ip2.service > /dev/null 2>&1", shell=True)
        subprocess.run(
            "rm /etc/systemd/system/ping_ip2.service > /dev/null 2>&1", shell=True
        )
        subprocess.run("systemctl daemon-reload", shell=True)

        subprocess.run("ip link set dev azumig62 down > /dev/null", shell=True)
        subprocess.run("ip link delete azumig62 > /dev/null", shell=True)

        print("Progress: ", end="")

        frames = ["⠋", "⠙", "⠹", "⠸", "⠼", "⠴", "⠦", "⠧", "⠇", "⠏"]
        delay = 0.1
        duration = 1
        end_time = time.time() + duration

        while time.time() < end_time:
            for frame in frames:
                print("\r[%s] Loading...  " % frame, end="")
                time.sleep(delay)
                print("\r[%s]             " % frame, end="")
                time.sleep(delay)

        display_checkmark("\033[92mUninstall completed!\033[0m")
    except subprocess.CalledProcessError as e:
        print("Error:", e.output.decode().strip())


def remove_gretap63_server3():
    os.system("clear")
    server3_wireguardudp()
    delufw("2002:821a::2")
    delufw("2002:821a::1")
    print("\033[93m───────────────────────────────────────\033[0m")
    display_notification("\033[93mRemoving \033[92mGRE6tap\033[93m Tunnel...\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")

    try:
        if subprocess.call("test -f /etc/gre63.sh", shell=True) == 0:
            subprocess.run("rm /etc/gre63.sh", shell=True)

        display_notification("\033[93mRemoving stuff..\033[0m")

        subprocess.run("sudo rm /etc/ping_ip3.sh", shell=True)

        subprocess.run(
            "systemctl disable ping_ip3.service > /dev/null 2>&1", shell=True
        )
        subprocess.run("systemctl stop ping_ip3.service > /dev/null 2>&1", shell=True)
        subprocess.run(
            "rm /etc/systemd/system/ping_ip3.service > /dev/null 2>&1", shell=True
        )
        subprocess.run("systemctl daemon-reload", shell=True)

        subprocess.run("ip link set dev azumig63 down > /dev/null", shell=True)
        subprocess.run("ip link delete azumig63 > /dev/null", shell=True)

        print("Progress: ", end="")

        frames = ["⠋", "⠙", "⠹", "⠸", "⠼", "⠴", "⠦", "⠧", "⠇", "⠏"]
        delay = 0.1
        duration = 1
        end_time = time.time() + duration

        while time.time() < end_time:
            for frame in frames:
                print("\r[%s] Loading...  " % frame, end="")
                time.sleep(delay)
                print("\r[%s]             " % frame, end="")
                time.sleep(delay)

        display_checkmark("\033[92mUninstall completed!\033[0m")
    except subprocess.CalledProcessError as e:
        print("Error:", e.output.decode().strip())


def remove_gretap64_server4():
    os.system("clear")
    server4_wireguardudp()
    delufw("2002:831a::2")
    delufw("2002:831a::1")
    print("\033[93m───────────────────────────────────────\033[0m")
    display_notification("\033[93mRemoving \033[92mGRE6tap\033[93m Tunnel...\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")

    try:
        if subprocess.call("test -f /etc/gre64.sh", shell=True) == 0:
            subprocess.run("rm /etc/gre64.sh", shell=True)

        display_notification("\033[93mRemoving stuff..\033[0m")
        subprocess.run("sudo rm /etc/ping_ip4.sh", shell=True)

        subprocess.run(
            "systemctl disable ping_ip4.service > /dev/null 2>&1", shell=True
        )
        subprocess.run("systemctl stop ping_ip4.service > /dev/null 2>&1", shell=True)
        subprocess.run(
            "rm /etc/systemd/system/ping_ip4.service > /dev/null 2>&1", shell=True
        )
        subprocess.run("systemctl daemon-reload", shell=True)

        subprocess.run("ip link set dev azumig64 down > /dev/null", shell=True)
        subprocess.run("ip link delete azumig64 > /dev/null", shell=True)

        print("Progress: ", end="")

        frames = ["⠋", "⠙", "⠹", "⠸", "⠼", "⠴", "⠦", "⠧", "⠇", "⠏"]
        delay = 0.1
        duration = 1
        end_time = time.time() + duration

        while time.time() < end_time:
            for frame in frames:
                print("\r[%s] Loading...  " % frame, end="")
                time.sleep(delay)
                print("\r[%s]             " % frame, end="")
                time.sleep(delay)

        display_checkmark("\033[92mUninstall completed!\033[0m")
    except subprocess.CalledProcessError as e:
        print("Error:", e.output.decode().strip())


def remove_gretap65_server5():
    os.system("clear")
    server5_wireguardudp()
    delufw("2002:841a::2")
    delufw("2002:841a::1")
    print("\033[93m───────────────────────────────────────\033[0m")
    display_notification("\033[93mRemoving \033[92mGRE6tap\033[93m Tunnel...\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")

    try:
        if subprocess.call("test -f /etc/gre65.sh", shell=True) == 0:
            subprocess.run("rm /etc/gre65.sh", shell=True)

        display_notification("\033[93mRemoving stuff..\033[0m")

        subprocess.run("sudo rm /etc/ping_ip5.sh", shell=True)
        subprocess.run(
            "systemctl disable ping_ip5.service > /dev/null 2>&1", shell=True
        )
        subprocess.run("systemctl stop ping_ip5.service > /dev/null 2>&1", shell=True)
        subprocess.run(
            "rm /etc/systemd/system/ping_ip5.service > /dev/null 2>&1", shell=True
        )
        subprocess.run("systemctl daemon-reload", shell=True)

        subprocess.run("ip link set dev azumig65 down > /dev/null", shell=True)
        subprocess.run("ip link delete azumig65 > /dev/null", shell=True)

        print("Progress: ", end="")

        frames = ["⠋", "⠙", "⠹", "⠸", "⠼", "⠴", "⠦", "⠧", "⠇", "⠏"]
        delay = 0.1
        duration = 1
        end_time = time.time() + duration

        while time.time() < end_time:
            for frame in frames:
                print("\r[%s] Loading...  " % frame, end="")
                time.sleep(delay)
                print("\r[%s]             " % frame, end="")
                time.sleep(delay)

        display_checkmark("\033[92mUninstall completed!\033[0m")
    except subprocess.CalledProcessError as e:
        print("Error:", e.output.decode().strip())


# client
def remove_gretap61_client1():
    os.system("clear")
    client1_wireguardudp()
    delufw("2002:801a::2")
    delufw("2002:801a::1")
    print("\033[93m───────────────────────────────────────\033[0m")
    display_notification("\033[93mRemoving \033[92mGRE6tap\033[93m Tunnel...\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")

    try:
        if subprocess.call("test -f /etc/gre61.sh", shell=True) == 0:
            subprocess.run("rm /etc/gre61.sh", shell=True)

        display_notification("\033[93mRemoving stuff..\033[0m")
        subprocess.run("sudo rm /etc/ping_ip1.sh", shell=True)
        subprocess.run(
            "systemctl disable ping_ip1.service > /dev/null 2>&1", shell=True
        )
        subprocess.run("systemctl stop ping_ip1.service > /dev/null 2>&1", shell=True)
        subprocess.run(
            "rm /etc/systemd/system/ping_ip1.service > /dev/null 2>&1", shell=True
        )
        subprocess.run("systemctl daemon-reload", shell=True)
        subprocess.run("ip link set dev azumig61 down > /dev/null", shell=True)
        subprocess.run("ip link delete azumig61 > /dev/null", shell=True)

        print("Progress: ", end="")

        frames = ["⠋", "⠙", "⠹", "⠸", "⠼", "⠴", "⠦", "⠧", "⠇", "⠏"]
        delay = 0.1
        duration = 1
        end_time = time.time() + duration

        while time.time() < end_time:
            for frame in frames:
                print("\r[%s] Loading...  " % frame, end="")
                time.sleep(delay)
                print("\r[%s]             " % frame, end="")
                time.sleep(delay)

        display_checkmark("\033[92mUninstall completed!\033[0m")
    except subprocess.CalledProcessError as e:
        print("Error:", e.output.decode().strip())


def remove_gretap62_client2():
    os.system("clear")
    client1_wireguardudp()
    delufw("2002:811a::2")
    delufw("2002:811a::1")
    print("\033[93m───────────────────────────────────────\033[0m")
    display_notification("\033[93mRemoving \033[92mGRE6tap\033[93m Tunnel...\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")

    try:
        if subprocess.call("test -f /etc/gre62.sh", shell=True) == 0:
            subprocess.run("rm /etc/gre62.sh", shell=True)

        display_notification("\033[93mRemoving stuff..\033[0m")
        subprocess.run("sudo rm /etc/ping_ip2.sh", shell=True)

        subprocess.run(
            "systemctl disable ping_ip2.service > /dev/null 2>&1", shell=True
        )
        subprocess.run("systemctl stop ping_ip2.service > /dev/null 2>&1", shell=True)
        subprocess.run(
            "rm /etc/systemd/system/ping_ip2.service > /dev/null 2>&1", shell=True
        )
        subprocess.run("systemctl daemon-reload", shell=True)

        subprocess.run("ip link set dev azumig62 down > /dev/null", shell=True)
        subprocess.run("ip link delete azumig62 > /dev/null", shell=True)

        print("Progress: ", end="")

        frames = ["⠋", "⠙", "⠹", "⠸", "⠼", "⠴", "⠦", "⠧", "⠇", "⠏"]
        delay = 0.1
        duration = 1
        end_time = time.time() + duration

        while time.time() < end_time:
            for frame in frames:
                print("\r[%s] Loading...  " % frame, end="")
                time.sleep(delay)
                print("\r[%s]             " % frame, end="")
                time.sleep(delay)

        display_checkmark("\033[92mUninstall completed!\033[0m")
    except subprocess.CalledProcessError as e:
        print("Error:", e.output.decode().strip())


def remove_gretap63_client3():
    os.system("clear")
    client1_wireguardudp()
    delufw("2002:821a::2")
    delufw("2002:821a::1")
    print("\033[93m───────────────────────────────────────\033[0m")
    display_notification("\033[93mRemoving \033[92mGRE6tap\033[93m Tunnel...\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")

    try:
        if subprocess.call("test -f /etc/gre63.sh", shell=True) == 0:
            subprocess.run("rm /etc/gre63.sh", shell=True)

        display_notification("\033[93mRemoving stuff..\033[0m")

        subprocess.run("sudo rm /etc/ping_ip3.sh", shell=True)

        subprocess.run(
            "systemctl disable ping_ip3.service > /dev/null 2>&1", shell=True
        )
        subprocess.run("systemctl stop ping_ip3.service > /dev/null 2>&1", shell=True)
        subprocess.run(
            "rm /etc/systemd/system/ping_ip3.service > /dev/null 2>&1", shell=True
        )
        subprocess.run("systemctl daemon-reload", shell=True)

        subprocess.run("ip link set dev azumig63 down > /dev/null", shell=True)
        subprocess.run("ip link delete azumig63 > /dev/null", shell=True)

        print("Progress: ", end="")

        frames = ["⠋", "⠙", "⠹", "⠸", "⠼", "⠴", "⠦", "⠧", "⠇", "⠏"]
        delay = 0.1
        duration = 1
        end_time = time.time() + duration

        while time.time() < end_time:
            for frame in frames:
                print("\r[%s] Loading...  " % frame, end="")
                time.sleep(delay)
                print("\r[%s]             " % frame, end="")
                time.sleep(delay)

        display_checkmark("\033[92mUninstall completed!\033[0m")
    except subprocess.CalledProcessError as e:
        print("Error:", e.output.decode().strip())


def remove_gretap64_client4():
    os.system("clear")
    client1_wireguardudp()
    delufw("2002:831a::2")
    delufw("2002:831a::1")
    print("\033[93m───────────────────────────────────────\033[0m")
    display_notification("\033[93mRemoving \033[92mGRE6tap\033[93m Tunnel...\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")

    try:
        if subprocess.call("test -f /etc/gre64.sh", shell=True) == 0:
            subprocess.run("rm /etc/gre64.sh", shell=True)

        display_notification("\033[93mRemoving stuff..\033[0m")
        subprocess.run("sudo rm /etc/ping_ip4.sh", shell=True)

        subprocess.run(
            "systemctl disable ping_ip4.service > /dev/null 2>&1", shell=True
        )
        subprocess.run("systemctl stop ping_ip4.service > /dev/null 2>&1", shell=True)
        subprocess.run(
            "rm /etc/systemd/system/ping_ip4.service > /dev/null 2>&1", shell=True
        )
        subprocess.run("systemctl daemon-reload", shell=True)

        subprocess.run("ip link set dev azumig64 down > /dev/null", shell=True)
        subprocess.run("ip link delete azumig64 > /dev/null", shell=True)

        print("Progress: ", end="")

        frames = ["⠋", "⠙", "⠹", "⠸", "⠼", "⠴", "⠦", "⠧", "⠇", "⠏"]
        delay = 0.1
        duration = 1
        end_time = time.time() + duration

        while time.time() < end_time:
            for frame in frames:
                print("\r[%s] Loading...  " % frame, end="")
                time.sleep(delay)
                print("\r[%s]             " % frame, end="")
                time.sleep(delay)

        display_checkmark("\033[92mUninstall completed!\033[0m")
    except subprocess.CalledProcessError as e:
        print("Error:", e.output.decode().strip())


def remove_gretap65_client5():
    os.system("clear")
    client1_wireguardudp()
    delufw("2002:841a::2")
    delufw("2002:841a::1")
    print("\033[93m───────────────────────────────────────\033[0m")
    display_notification("\033[93mRemoving \033[92mGRE6tap\033[93m Tunnel...\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")

    try:
        if subprocess.call("test -f /etc/gre65.sh", shell=True) == 0:
            subprocess.run("rm /etc/gre65.sh", shell=True)

        display_notification("\033[93mRemoving stuff..\033[0m")

        subprocess.run("sudo rm /etc/ping_ip5.sh", shell=True)
        subprocess.run(
            "systemctl disable ping_ip5.service > /dev/null 2>&1", shell=True
        )
        subprocess.run("systemctl stop ping_ip5.service > /dev/null 2>&1", shell=True)
        subprocess.run(
            "rm /etc/systemd/system/ping_ip5.service > /dev/null 2>&1", shell=True
        )
        subprocess.run("systemctl daemon-reload", shell=True)

        subprocess.run("ip link set dev azumig65 down > /dev/null", shell=True)
        subprocess.run("ip link delete azumig65 > /dev/null", shell=True)

        print("Progress: ", end="")

        frames = ["⠋", "⠙", "⠹", "⠸", "⠼", "⠴", "⠦", "⠧", "⠇", "⠏"]
        delay = 0.1
        duration = 1
        end_time = time.time() + duration

        while time.time() < end_time:
            for frame in frames:
                print("\r[%s] Loading...  " % frame, end="")
                time.sleep(delay)
                print("\r[%s]             " % frame, end="")
                time.sleep(delay)

        display_checkmark("\033[92mUninstall completed!\033[0m")
    except subprocess.CalledProcessError as e:
        print("Error:", e.output.decode().strip())


def remove_wireguardgre6tap():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print("\033[92m(   ) \033[93mWireguard & GRE6TAP Uninstall Menu\033[0m")
    print('\033[92m "-"\033[93m══════════════════════════\033[0m')
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[93mServer Configs\033[0m")
    print("2. \033[92mClients\033[0m")
    print("0. \033[94mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if server_type == "1":
            server_wireguardgre6tap()
            break
        elif server_type == "2":
            clients_wireguardgre6tap()
            break
        elif server_type == "0":
            os.system("clear")
            Wireguard_uninstall()
            break
        else:
            print("Invalid choice.")


def server_wireguardgre6tap():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print("\033[92m(   ) \033[93mWireguard GRE6TAP Uninstall Menu\033[0m")
    print('\033[92m "-"\033[93m══════════════════════════\033[0m')
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[93mServer Configs [1]\033[0m")
    print("2. \033[93mServer Configs [2]\033[0m")
    print("3. \033[92mServer Configs [3]\033[0m")
    print("4. \033[93mServer Configs [4]\033[0m")
    print("5. \033[93mServer Configs [5]\033[0m")
    print("0. \033[94mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if server_type == "1":
            remove_gretap61_server1()
            break
        elif server_type == "2":
            remove_gretap62_server2()
            break
        elif server_type == "3":
            remove_gretap63_server3()
            break
        elif server_type == "4":
            remove_gretap64_server4()
            break
        elif server_type == "5":
            remove_gretap65_server5()
            break
        elif server_type == "0":
            os.system("clear")
            remove_wireguardgre6tap()
            break
        else:
            print("Invalid choice.")


def clients_wireguardgre6tap():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print("\033[92m(   ) \033[93mWireguard GRE5TAP Uninstall Menu\033[0m")
    print('\033[92m "-"\033[93m══════════════════════════\033[0m')
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[93mClient [1]\033[0m")
    print("2. \033[93mClient [2]\033[0m")
    print("3. \033[92mClient [3]\033[0m")
    print("4. \033[93mClient [4]\033[0m")
    print("5. \033[93mClient [5]\033[0m")
    print("0. \033[94mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if server_type == "1":
            remove_gretap61_client1()
            break
        elif server_type == "2":
            remove_gretap62_client2()
            break
        elif server_type == "3":
            remove_gretap63_client3()
            break
        elif server_type == "4":
            remove_gretap64_client4()
            break
        elif server_type == "5":
            remove_gretap65_client5()
            break
        elif server_type == "0":
            os.system("clear")
            remove_wireguardgre6tap()
            break
        else:
            print("Invalid choice.")


# requirement for sit
def remove_sit1_server1():
    os.system("clear")
    server1_wireguardudp()
    delufw("2002:801b::2")
    delufw("2002:801b::1")
    print("\033[93m───────────────────────────────────────\033[0m")
    display_notification("\033[93mRemoving \033[92mSit\033[93m Tunnel...\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")

    try:
        if subprocess.call("test -f /etc/private1.sh", shell=True) == 0:
            subprocess.run("rm /etc/private1.sh", shell=True)

        display_notification("\033[93mRemoving stuff..\033[0m")
        subprocess.run("sudo rm /etc/ping_v61.sh", shell=True)
        subprocess.run(
            "systemctl disable ping_v61.service > /dev/null 2>&1", shell=True
        )
        subprocess.run("systemctl stop ping_v61.service > /dev/null 2>&1", shell=True)
        subprocess.run(
            "rm /etc/systemd/system/ping_v61.service > /dev/null 2>&1", shell=True
        )
        subprocess.run("systemctl daemon-reload", shell=True)
        subprocess.run("ip link set dev azumi1 down > /dev/null", shell=True)
        subprocess.run("ip link delete azumi1 > /dev/null", shell=True)

        print("Progress: ", end="")

        frames = ["⠋", "⠙", "⠹", "⠸", "⠼", "⠴", "⠦", "⠧", "⠇", "⠏"]
        delay = 0.1
        duration = 1
        end_time = time.time() + duration

        while time.time() < end_time:
            for frame in frames:
                print("\r[%s] Loading...  " % frame, end="")
                time.sleep(delay)
                print("\r[%s]             " % frame, end="")
                time.sleep(delay)

        display_checkmark("\033[92mUninstall completed!\033[0m")
    except subprocess.CalledProcessError as e:
        print("Error:", e.output.decode().strip())


def remove_sit2_server2():
    os.system("clear")
    server2_wireguardudp()
    delufw("2002:811b::2")
    delufw("2002:811b::1")
    print("\033[93m───────────────────────────────────────\033[0m")
    display_notification("\033[93mRemoving \033[92mSit\033[93m Tunnel...\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")

    try:
        if subprocess.call("test -f /etc/private2.sh", shell=True) == 0:
            subprocess.run("rm /etc/private2.sh", shell=True)

        display_notification("\033[93mRemoving stuff..\033[0m")
        subprocess.run("sudo rm /etc/ping_v62.sh", shell=True)
        subprocess.run(
            "systemctl disable ping_v62.service > /dev/null 2>&1", shell=True
        )
        subprocess.run("systemctl stop ping_v62.service > /dev/null 2>&1", shell=True)
        subprocess.run(
            "rm /etc/systemd/system/ping_v62.service > /dev/null 2>&1", shell=True
        )
        subprocess.run("systemctl daemon-reload", shell=True)
        subprocess.run("ip link set dev azumi2 down > /dev/null", shell=True)
        subprocess.run("ip link delete azumi2 > /dev/null", shell=True)

        print("Progress: ", end="")

        frames = ["⠋", "⠙", "⠹", "⠸", "⠼", "⠴", "⠦", "⠧", "⠇", "⠏"]
        delay = 0.1
        duration = 1
        end_time = time.time() + duration

        while time.time() < end_time:
            for frame in frames:
                print("\r[%s] Loading...  " % frame, end="")
                time.sleep(delay)
                print("\r[%s]             " % frame, end="")
                time.sleep(delay)

        display_checkmark("\033[92mUninstall completed!\033[0m")
    except subprocess.CalledProcessError as e:
        print("Error:", e.output.decode().strip())


def remove_sit3_server3():
    os.system("clear")
    server3_wireguardudp()
    delufw("2002:821b::2")
    delufw("2002:821b::1")
    print("\033[93m───────────────────────────────────────\033[0m")
    display_notification("\033[93mRemoving \033[92mSit\033[93m Tunnel...\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")

    try:
        if subprocess.call("test -f /etc/private3.sh", shell=True) == 0:
            subprocess.run("rm /etc/private3.sh", shell=True)

        display_notification("\033[93mRemoving stuff..\033[0m")
        subprocess.run("sudo rm /etc/ping_v63.sh", shell=True)
        subprocess.run(
            "systemctl disable ping_v63.service > /dev/null 2>&1", shell=True
        )
        subprocess.run("systemctl stop ping_v63.service > /dev/null 2>&1", shell=True)
        subprocess.run(
            "rm /etc/systemd/system/ping_v63.service > /dev/null 2>&1", shell=True
        )
        subprocess.run("systemctl daemon-reload", shell=True)
        subprocess.run("ip link set dev azumi3 down > /dev/null", shell=True)
        subprocess.run("ip link delete azumi3 > /dev/null", shell=True)

        print("Progress: ", end="")

        frames = ["⠋", "⠙", "⠹", "⠸", "⠼", "⠴", "⠦", "⠧", "⠇", "⠏"]
        delay = 0.1
        duration = 1
        end_time = time.time() + duration

        while time.time() < end_time:
            for frame in frames:
                print("\r[%s] Loading...  " % frame, end="")
                time.sleep(delay)
                print("\r[%s]             " % frame, end="")
                time.sleep(delay)

        display_checkmark("\033[92mUninstall completed!\033[0m")
    except subprocess.CalledProcessError as e:
        print("Error:", e.output.decode().strip())


def remove_sit4_server4():
    os.system("clear")
    server4_wireguardudp()
    delufw("2002:831b::2")
    delufw("2002:831b::1")
    print("\033[93m───────────────────────────────────────\033[0m")
    display_notification("\033[93mRemoving \033[92mSit\033[93m Tunnel...\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")

    try:
        if subprocess.call("test -f /etc/private4.sh", shell=True) == 0:
            subprocess.run("rm /etc/private4.sh", shell=True)

        display_notification("\033[93mRemoving stuff..\033[0m")
        subprocess.run("sudo rm /etc/ping_v64.sh", shell=True)
        subprocess.run(
            "systemctl disable ping_v64.service > /dev/null 2>&1", shell=True
        )
        subprocess.run("systemctl stop ping_v64.service > /dev/null 2>&1", shell=True)
        subprocess.run(
            "rm /etc/systemd/system/ping_v64.service > /dev/null 2>&1", shell=True
        )
        subprocess.run("systemctl daemon-reload", shell=True)
        subprocess.run("ip link set dev azumi4 down > /dev/null", shell=True)
        subprocess.run("ip link delete azumi4 > /dev/null", shell=True)

        print("Progress: ", end="")

        frames = ["⠋", "⠙", "⠹", "⠸", "⠼", "⠴", "⠦", "⠧", "⠇", "⠏"]
        delay = 0.1
        duration = 1
        end_time = time.time() + duration

        while time.time() < end_time:
            for frame in frames:
                print("\r[%s] Loading...  " % frame, end="")
                time.sleep(delay)
                print("\r[%s]             " % frame, end="")
                time.sleep(delay)

        display_checkmark("\033[92mUninstall completed!\033[0m")
    except subprocess.CalledProcessError as e:
        print("Error:", e.output.decode().strip())


def remove_sit5_server5():
    os.system("clear")
    server5_wireguardudp()
    delufw("2002:841b::2")
    delufw("2002:841b::1")
    print("\033[93m───────────────────────────────────────\033[0m")
    display_notification("\033[93mRemoving \033[92mSit\033[93m Tunnel...\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")

    try:
        if subprocess.call("test -f /etc/private5.sh", shell=True) == 0:
            subprocess.run("rm /etc/private5.sh", shell=True)

        display_notification("\033[93mRemoving stuff..\033[0m")
        subprocess.run("sudo rm /etc/ping_v65.sh", shell=True)
        subprocess.run(
            "systemctl disable ping_v65.service > /dev/null 2>&1", shell=True
        )
        subprocess.run("systemctl stop ping_v65.service > /dev/null 2>&1", shell=True)
        subprocess.run(
            "rm /etc/systemd/system/ping_v65.service > /dev/null 2>&1", shell=True
        )
        subprocess.run("systemctl daemon-reload", shell=True)
        subprocess.run("ip link set dev azumi5 down > /dev/null", shell=True)
        subprocess.run("ip link delete azumi5 > /dev/null", shell=True)

        print("Progress: ", end="")

        frames = ["⠋", "⠙", "⠹", "⠸", "⠼", "⠴", "⠦", "⠧", "⠇", "⠏"]
        delay = 0.1
        duration = 1
        end_time = time.time() + duration

        while time.time() < end_time:
            for frame in frames:
                print("\r[%s] Loading...  " % frame, end="")
                time.sleep(delay)
                print("\r[%s]             " % frame, end="")
                time.sleep(delay)

        display_checkmark("\033[92mUninstall completed!\033[0m")
    except subprocess.CalledProcessError as e:
        print("Error:", e.output.decode().strip())


# client
def remove_sit1_client1():
    os.system("clear")
    client1_wireguardudp()
    delufw("2002:801b::2")
    delufw("2002:801b::1")
    print("\033[93m───────────────────────────────────────\033[0m")
    display_notification("\033[93mRemoving \033[92mSit\033[93m Tunnel...\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")

    try:
        if subprocess.call("test -f /etc/private1.sh", shell=True) == 0:
            subprocess.run("rm /etc/private1.sh", shell=True)

        display_notification("\033[93mRemoving stuff..\033[0m")
        subprocess.run("sudo rm /etc/ping_v61.sh", shell=True)
        subprocess.run(
            "systemctl disable ping_v61.service > /dev/null 2>&1", shell=True
        )
        subprocess.run("systemctl stop ping_v61.service > /dev/null 2>&1", shell=True)
        subprocess.run(
            "rm /etc/systemd/system/ping_v61.service > /dev/null 2>&1", shell=True
        )
        subprocess.run("systemctl daemon-reload", shell=True)
        subprocess.run("ip link set dev azumi1 down > /dev/null", shell=True)
        subprocess.run("ip link delete azumi1 > /dev/null", shell=True)

        print("Progress: ", end="")

        frames = ["⠋", "⠙", "⠹", "⠸", "⠼", "⠴", "⠦", "⠧", "⠇", "⠏"]
        delay = 0.1
        duration = 1
        end_time = time.time() + duration

        while time.time() < end_time:
            for frame in frames:
                print("\r[%s] Loading...  " % frame, end="")
                time.sleep(delay)
                print("\r[%s]             " % frame, end="")
                time.sleep(delay)

        display_checkmark("\033[92mUninstall completed!\033[0m")
    except subprocess.CalledProcessError as e:
        print("Error:", e.output.decode().strip())


def remove_sit2_client2():
    os.system("clear")
    client1_wireguardudp()
    delufw("2002:811b::2")
    delufw("2002:811b::1")
    print("\033[93m───────────────────────────────────────\033[0m")
    display_notification("\033[93mRemoving \033[92mSit\033[93m Tunnel...\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")

    try:
        if subprocess.call("test -f /etc/private2.sh", shell=True) == 0:
            subprocess.run("rm /etc/private2.sh", shell=True)

        display_notification("\033[93mRemoving stuff..\033[0m")
        subprocess.run("sudo rm /etc/ping_v62.sh", shell=True)
        subprocess.run(
            "systemctl disable ping_v62.service > /dev/null 2>&1", shell=True
        )
        subprocess.run("systemctl stop ping_v62.service > /dev/null 2>&1", shell=True)
        subprocess.run(
            "rm /etc/systemd/system/ping_v62.service > /dev/null 2>&1", shell=True
        )
        subprocess.run("systemctl daemon-reload", shell=True)
        subprocess.run("ip link set dev azumi2 down > /dev/null", shell=True)
        subprocess.run("ip link delete azumi2 > /dev/null", shell=True)

        print("Progress: ", end="")

        frames = ["⠋", "⠙", "⠹", "⠸", "⠼", "⠴", "⠦", "⠧", "⠇", "⠏"]
        delay = 0.1
        duration = 1
        end_time = time.time() + duration

        while time.time() < end_time:
            for frame in frames:
                print("\r[%s] Loading...  " % frame, end="")
                time.sleep(delay)
                print("\r[%s]             " % frame, end="")
                time.sleep(delay)

        display_checkmark("\033[92mUninstall completed!\033[0m")
    except subprocess.CalledProcessError as e:
        print("Error:", e.output.decode().strip())


def remove_sit3_client3():
    os.system("clear")
    client1_wireguardudp()
    delufw("2002:821b::2")
    delufw("2002:821b::1")
    print("\033[93m───────────────────────────────────────\033[0m")
    display_notification("\033[93mRemoving \033[92mSit\033[93m Tunnel...\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")

    try:
        if subprocess.call("test -f /etc/private3.sh", shell=True) == 0:
            subprocess.run("rm /etc/private3.sh", shell=True)

        display_notification("\033[93mRemoving stuff..\033[0m")
        subprocess.run("sudo rm /etc/ping_v63.sh", shell=True)
        subprocess.run(
            "systemctl disable ping_v63.service > /dev/null 2>&1", shell=True
        )
        subprocess.run("systemctl stop ping_v63.service > /dev/null 2>&1", shell=True)
        subprocess.run(
            "rm /etc/systemd/system/ping_v63.service > /dev/null 2>&1", shell=True
        )
        subprocess.run("systemctl daemon-reload", shell=True)
        subprocess.run("ip link set dev azumi3 down > /dev/null", shell=True)
        subprocess.run("ip link delete azumi3 > /dev/null", shell=True)

        print("Progress: ", end="")

        frames = ["⠋", "⠙", "⠹", "⠸", "⠼", "⠴", "⠦", "⠧", "⠇", "⠏"]
        delay = 0.1
        duration = 1
        end_time = time.time() + duration

        while time.time() < end_time:
            for frame in frames:
                print("\r[%s] Loading...  " % frame, end="")
                time.sleep(delay)
                print("\r[%s]             " % frame, end="")
                time.sleep(delay)

        display_checkmark("\033[92mUninstall completed!\033[0m")
    except subprocess.CalledProcessError as e:
        print("Error:", e.output.decode().strip())


def remove_sit4_client4():
    os.system("clear")
    client1_wireguardudp()
    delufw("2002:831b::2")
    delufw("2002:831b::1")
    print("\033[93m───────────────────────────────────────\033[0m")
    display_notification("\033[93mRemoving \033[92mSit\033[93m Tunnel...\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")

    try:
        if subprocess.call("test -f /etc/private4.sh", shell=True) == 0:
            subprocess.run("rm /etc/private4.sh", shell=True)

        display_notification("\033[93mRemoving stuff..\033[0m")
        subprocess.run("sudo rm /etc/ping_v64.sh", shell=True)
        subprocess.run(
            "systemctl disable ping_v64.service > /dev/null 2>&1", shell=True
        )
        subprocess.run("systemctl stop ping_v64.service > /dev/null 2>&1", shell=True)
        subprocess.run(
            "rm /etc/systemd/system/ping_v64.service > /dev/null 2>&1", shell=True
        )
        subprocess.run("systemctl daemon-reload", shell=True)
        subprocess.run("ip link set dev azumi4 down > /dev/null", shell=True)
        subprocess.run("ip link delete azumi4 > /dev/null", shell=True)

        print("Progress: ", end="")

        frames = ["⠋", "⠙", "⠹", "⠸", "⠼", "⠴", "⠦", "⠧", "⠇", "⠏"]
        delay = 0.1
        duration = 1
        end_time = time.time() + duration

        while time.time() < end_time:
            for frame in frames:
                print("\r[%s] Loading...  " % frame, end="")
                time.sleep(delay)
                print("\r[%s]             " % frame, end="")
                time.sleep(delay)

        display_checkmark("\033[92mUninstall completed!\033[0m")
    except subprocess.CalledProcessError as e:
        print("Error:", e.output.decode().strip())


def remove_sit5_client5():
    os.system("clear")
    client1_wireguardudp()
    delufw("2002:841b::2")
    delufw("2002:841b::1")
    print("\033[93m───────────────────────────────────────\033[0m")
    display_notification("\033[93mRemoving \033[92mSit\033[93m Tunnel...\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")

    try:
        if subprocess.call("test -f /etc/private5.sh", shell=True) == 0:
            subprocess.run("rm /etc/private5.sh", shell=True)

        display_notification("\033[93mRemoving stuff..\033[0m")
        subprocess.run("sudo rm /etc/ping_v65.sh", shell=True)
        subprocess.run(
            "systemctl disable ping_v65.service > /dev/null 2>&1", shell=True
        )
        subprocess.run("systemctl stop ping_v65.service > /dev/null 2>&1", shell=True)
        subprocess.run(
            "rm /etc/systemd/system/ping_v65.service > /dev/null 2>&1", shell=True
        )
        subprocess.run("systemctl daemon-reload", shell=True)
        subprocess.run("ip link set dev azumi5 down > /dev/null", shell=True)
        subprocess.run("ip link delete azumi5 > /dev/null", shell=True)

        print("Progress: ", end="")

        frames = ["⠋", "⠙", "⠹", "⠸", "⠼", "⠴", "⠦", "⠧", "⠇", "⠏"]
        delay = 0.1
        duration = 1
        end_time = time.time() + duration

        while time.time() < end_time:
            for frame in frames:
                print("\r[%s] Loading...  " % frame, end="")
                time.sleep(delay)
                print("\r[%s]             " % frame, end="")
                time.sleep(delay)

        display_checkmark("\033[92mUninstall completed!\033[0m")
    except subprocess.CalledProcessError as e:
        print("Error:", e.output.decode().strip())


def remove_wireguardsit():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print("\033[92m(   ) \033[93mWireguard & SIT Uninstall Menu\033[0m")
    print('\033[92m "-"\033[93m══════════════════════════\033[0m')
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[93mServer Configs\033[0m")
    print("2. \033[92mClients\033[0m")
    print("0. \033[94mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if server_type == "1":
            server_wireguardsit()
            break
        elif server_type == "2":
            clients_wireguardsit()
            break
        elif server_type == "0":
            os.system("clear")
            Wireguard_uninstall()
            break
        else:
            print("Invalid choice.")


def server_wireguardsit():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print("\033[92m(   ) \033[93mWireguard SIT Uninstall Menu\033[0m")
    print('\033[92m "-"\033[93m══════════════════════════\033[0m')
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[93mServer Configs [1]\033[0m")
    print("2. \033[93mServer Configs [2]\033[0m")
    print("3. \033[92mServer Configs [3]\033[0m")
    print("4. \033[93mServer Configs [4]\033[0m")
    print("5. \033[93mServer Configs [5]\033[0m")
    print("0. \033[94mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if server_type == "1":
            remove_sit1_server1()
            break
        elif server_type == "2":
            remove_sit2_server2()
            break
        elif server_type == "3":
            remove_sit3_server3()
            break
        elif server_type == "4":
            remove_sit4_server4()
            break
        elif server_type == "5":
            remove_sit5_server5()
            break
        elif server_type == "0":
            os.system("clear")
            remove_wireguardsit()
            break
        else:
            print("Invalid choice.")


def clients_wireguardsit():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print("\033[92m(   ) \033[93mWireguard SIT Uninstall Menu\033[0m")
    print('\033[92m "-"\033[93m══════════════════════════\033[0m')
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[93mClient [1]\033[0m")
    print("2. \033[93mClient [2]\033[0m")
    print("3. \033[92mClient [3]\033[0m")
    print("4. \033[93mClient [4]\033[0m")
    print("5. \033[93mClient [5]\033[0m")
    print("0. \033[94mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if server_type == "1":
            remove_sit1_client1()
            break
        elif server_type == "2":
            remove_sit2_client2()
            break
        elif server_type == "3":
            remove_sit3_client3()
            break
        elif server_type == "4":
            remove_sit4_client4()
            break
        elif server_type == "5":
            remove_sit5_client5()
            break
        elif server_type == "0":
            os.system("clear")
            remove_wireguardsit()
            break
        else:
            print("Invalid choice.")


def wireguard_edit_server():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print("\033[92m(   ) \033[93mWireguard Edit local\033[97mMenu\033[0m")
    print(
        '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
    )
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[92mWireguard UDP\033[0m")
    print("2. \033[93mSit + Wireguard\033[0m")
    print("3. \033[92mGre6tap [Native] + Wireguard\033[0m")
    print("4. \033[93mWireguard + Gre6tap\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    print("0.\033[97mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")
    while True:
        server_type = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if server_type == "1":
            wireguardeditserver_mnu()
            break
        elif server_type == "2":
            wireguardsiteditserver_mnu()
            break
        elif server_type == "3":
            gre6tapwireguardeditserver_mnu()
            break
        elif server_type == "4":
            wireguardgre6tapeditserver_mnu()
            break
        elif server_type == "0":
            os.system("clear")
            wireguard_allinone_mnu()
            break
        else:
            print("Invalid choice.")


def wireguardeditserver_mnu():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print("\033[92m(   ) \033[93mWireguard \033[93m Edit Menu\033[0m")
    print(
        '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
    )
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[92mNo IPSEC\033[0m")
    print("2. \033[93mWith IPSEC\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    print("0.\033[97mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")
    while True:
        server_type = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if server_type == "1":
            wireguardeditserver_nosec_mnu()
            break
        elif server_type == "2":
            wireguardeditserver_sec_mnu()
            break
        elif server_type == "0":
            os.system("clear")
            wireguard_edit_server()
            break
        else:
            print("Invalid choice.")


def wireguardeditserver_nosec_mnu():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print("\033[92m(   ) \033[93mWireguard \033[93m Edit Menu\033[0m")
    print(
        '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
    )
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[92mWireguard - [1]Kharej Server [5]IRAN Clients\033[0m")
    print("2. \033[93mWireguard - [1]IRAN   Server [5]Kharej Clients\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    print("0.\033[97mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")
    while True:
        server_type = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if server_type == "1":
            wireguardedit_noconjuction_kharej1_5iran()
            break
        elif server_type == "2":
            wireguardedit_noconjuction_1iran_5kharej()
            break
        elif server_type == "0":
            os.system("clear")
            wireguardeditserver_mnu()
            break
        else:
            print("Invalid choice.")


def wireguardedit_noconjuction_kharej1_5iran():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print(
        "\033[92m(   ) \033[93mWireguard \033[92m[1]Kharej Server\033[96m [5]IRAN Client\033[93m Edit Menu\033[0m"
    )
    print(
        '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
    )
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[92mIRAN Client [1] Config\033[0m")
    print("2. \033[92mIRAN Client [2] Config\033[0m")
    print("3. \033[92mIRAN Client [3] Config\033[0m")
    print("4. \033[93mIRAN Client [4] Config\033[0m")
    print("5. \033[92mIRAN Client [5] Config\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    print("6. \033[96mKharej Server Config\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    print("0.\033[97mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")
    while True:
        server_type = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if server_type == "1":
            wireguardudp_iran_client1()
            break
        elif server_type == "2":
            wireguardudp_iran_client2()
            break
        elif server_type == "3":
            wireguardudp_iran_client3()
            break
        elif server_type == "4":
            wireguardudp_iran_client4()
            break
        elif server_type == "5":
            wireguardudp_iran_client5()
            break
        elif server_type == "6":
            wireguardudpedit_kharej_server()
            break
        elif server_type == "0":
            os.system("clear")
            wireguardeditserver_mnu()
            break
        else:
            print("Invalid choice.")


def wireguardudpedit_kharej_server():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print(
        "\033[92m(   ) \033[93mWireguard \033[92m[1]Kharej Server\033[96m [5]IRAN Client\033[93m Edit Menu\033[0m"
    )
    print(
        '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
    )
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[92mKharej Server Config [1] \033[0m")
    print("2. \033[92mKharej Server Config [2]\033[0m")
    print("3. \033[93mKharej Server Config [3]\033[0m")
    print("4. \033[92mKharej Server Config [4]\033[0m")
    print("5. \033[92mKharej Server Config [5]\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    print("0.\033[97mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")
    while True:
        server_type = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if server_type == "1":
            wireguardedit_kharejconfig_1()
            break
        elif server_type == "2":
            wireguardedit_kharejconfig_2()
            break
        elif server_type == "3":
            wireguardedit_kharejconfig_3()
            break
        elif server_type == "4":
            wireguardedit_kharejconfig_4()
            break
        elif server_type == "5":
            wireguardedit_kharejconfig_5()
            break
        elif server_type == "0":
            os.system("clear")
            wireguardedit_noconjuction_kharej1_5iran()
            break
        else:
            print("Invalid choice.")


def wtb_opposite_ip_wireguard(ip):
    if ":" in ip:
        ip_parts = ip.split(":")
        if ip_parts[-1] == "1":
            ip_parts[-1] = "2"
        elif ip_parts[-1] == "2":
            ip_parts[-1] = "1"
        else:
            ip_parts[-1] = "2"
        return ":".join(ip_parts)
    else:
        ip_parts = ip.split(".")
        ip_parts[-1] = "1" if ip_parts[-1] == "2" else "2"
        return ".".join(ip_parts)


def load_wireguardconfig(file_path):
    try:
        with open(file_path, "r") as file:
            content = file.read()

        address_match = re.search(r"Address = ([^\s]+)", content)
        listen_port_match = re.search(r"ListenPort = (\d+)", content)
        endpoint_match = re.search(r"Endpoint = ([^\s]+):\d+", content)
        allowed_ips_match = re.search(r"AllowedIPs = ([^\s]+)", content)

        address = address_match.group(1) if address_match else "N/A"
        listen_port = listen_port_match.group(1) if listen_port_match else "N/A"
        endpoint = endpoint_match.group(1) if endpoint_match else "N/A"
        allowed_ips = allowed_ips_match.group(1) if allowed_ips_match else "N/A"

        return address, address.split("/")[0], listen_port, endpoint, allowed_ips
    except FileNotFoundError:
        print("\033[91mWireGuard configuration file not found.\033[0m")
        return None, None, None, None, None
    except Exception as e:
        print(f"\033[91mAn error occurred: {e}\033[0m")
        return None, None, None, None, None


def display_checkmark(message):
    print("\u2714 " + message)


def save_wireguardconfig1(file_path, new_config):
    try:
        with open(file_path, "r") as f:
            config = f.read()

        listen_port_pattern = r"ListenPort\s*=\s*\d+"
        endpoint_pattern = r"Endpoint\s*=\s*([^\s]+:\d+)?"
        address_pattern = r"Address\s*=\s*[^\s]+"
        allowed_ips_pattern = r"AllowedIPs\s*=\s*[^\s]+"

        new_config_content = re.sub(
            listen_port_pattern, f'ListenPort = {new_config["ListenPort"]}', config
        )
        new_config_content = re.sub(
            address_pattern, f'Address = {new_config["Address"]}', new_config_content
        )
        new_config_content = re.sub(
            allowed_ips_pattern,
            f'AllowedIPs = {new_config["AllowedIPs"]}',
            new_config_content,
        )
        existing_endpoint_match = re.search(endpoint_pattern, config)
        if existing_endpoint_match:
            existing_endpoint = existing_endpoint_match.group(1)
            if ":" not in new_config["Endpoint"]:
                new_config["Endpoint"] += f":{existing_endpoint.split(':')[1]}"

        new_config_content = re.sub(
            endpoint_pattern, f'Endpoint = {new_config["Endpoint"]}', new_config_content
        )

        with open(file_path, "w") as f:
            f.write(new_config_content)

        subprocess.run(["systemctl", "daemon-reload"], check=True)
        service_name = "wireguardping_1.service"
        service_status = subprocess.run(
            ["systemctl", "is-active", service_name],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
        )

        if service_status.returncode != 0:
            print(f"\033[91mService {service_name} doesn't exist or is inactive\033[0m")

        subprocess.run(
            ["wg-quick", "down", "/etc/wireguard/wireserver1.conf"], check=True
        )
        subprocess.run(
            ["wg-quick", "up", "/etc/wireguard/wireserver1.conf"], check=True
        )

        display_checkmark(f"\033[92mConfiguration updated successfully!\033[0m")

    except FileNotFoundError:
        print(f"\033[91mfile {file_path} not found.\033[0m")
    except subprocess.CalledProcessError as e:
        print(f"\033[91merror in restarting services: {e}\033[0m")
    except Exception as e:
        print(f"\033[91merror in saving the config: {e}\033[0m")


def save_wireguardconfig2(file_path, new_config):
    try:
        with open(file_path, "r") as f:
            config = f.read()

        listen_port_pattern = r"ListenPort\s*=\s*\d+"
        endpoint_pattern = r"Endpoint\s*=\s*([^\s]+:\d+)?"
        address_pattern = r"Address\s*=\s*[^\s]+"
        allowed_ips_pattern = r"AllowedIPs\s*=\s*[^\s]+"

        new_config_content = re.sub(
            listen_port_pattern, f'ListenPort = {new_config["ListenPort"]}', config
        )
        new_config_content = re.sub(
            address_pattern, f'Address = {new_config["Address"]}', new_config_content
        )
        new_config_content = re.sub(
            allowed_ips_pattern,
            f'AllowedIPs = {new_config["AllowedIPs"]}',
            new_config_content,
        )
        existing_endpoint_match = re.search(endpoint_pattern, config)
        if existing_endpoint_match:
            existing_endpoint = existing_endpoint_match.group(1)
            if ":" not in new_config["Endpoint"]:
                new_config["Endpoint"] += f":{existing_endpoint.split(':')[1]}"

        new_config_content = re.sub(
            endpoint_pattern, f'Endpoint = {new_config["Endpoint"]}', new_config_content
        )

        with open(file_path, "w") as f:
            f.write(new_config_content)

        subprocess.run(["systemctl", "daemon-reload"], check=True)
        service_name = "wireguardping_2.service"
        service_status = subprocess.run(
            ["systemctl", "is-active", service_name],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
        )

        if service_status.returncode != 0:
            print(f"\033[91mService {service_name} doesn't exist or is inactive\033[0m")

        subprocess.run(
            ["wg-quick", "down", "/etc/wireguard/wireserver2.conf"], check=True
        )
        subprocess.run(
            ["wg-quick", "up", "/etc/wireguard/wireserver2.conf"], check=True
        )

        display_checkmark(f"\033[92mConfiguration updated successfully!\033[0m")

    except FileNotFoundError:
        print(f"\033[91mfile {file_path} not found.\033[0m")
    except subprocess.CalledProcessError as e:
        print(f"\033[91merror in restarting services: {e}\033[0m")
    except Exception as e:
        print(f"\033[91merror in saving the config: {e}\033[0m")


def save_wireguardconfig3(file_path, new_config):
    try:
        with open(file_path, "r") as f:
            config = f.read()

        listen_port_pattern = r"ListenPort\s*=\s*\d+"
        endpoint_pattern = r"Endpoint\s*=\s*([^\s]+:\d+)?"
        address_pattern = r"Address\s*=\s*[^\s]+"
        allowed_ips_pattern = r"AllowedIPs\s*=\s*[^\s]+"

        new_config_content = re.sub(
            listen_port_pattern, f'ListenPort = {new_config["ListenPort"]}', config
        )
        new_config_content = re.sub(
            address_pattern, f'Address = {new_config["Address"]}', new_config_content
        )
        new_config_content = re.sub(
            allowed_ips_pattern,
            f'AllowedIPs = {new_config["AllowedIPs"]}',
            new_config_content,
        )
        existing_endpoint_match = re.search(endpoint_pattern, config)
        if existing_endpoint_match:
            existing_endpoint = existing_endpoint_match.group(1)
            if ":" not in new_config["Endpoint"]:
                new_config["Endpoint"] += f":{existing_endpoint.split(':')[1]}"

        new_config_content = re.sub(
            endpoint_pattern, f'Endpoint = {new_config["Endpoint"]}', new_config_content
        )

        with open(file_path, "w") as f:
            f.write(new_config_content)

        subprocess.run(["systemctl", "daemon-reload"], check=True)
        service_name = "wireguardping_3.service"
        service_status = subprocess.run(
            ["systemctl", "is-active", service_name],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
        )

        if service_status.returncode != 0:
            print(f"\033[91mService {service_name} doesn't exist or is inactive\033[0m")

        subprocess.run(
            ["wg-quick", "down", "/etc/wireguard/wireserver3.conf"], check=True
        )
        subprocess.run(
            ["wg-quick", "up", "/etc/wireguard/wireserver3.conf"], check=True
        )

        display_checkmark(f"\033[92mConfiguration updated successfully!\033[0m")

    except FileNotFoundError:
        print(f"\033[91mfile {file_path} not found.\033[0m")
    except subprocess.CalledProcessError as e:
        print(f"\033[91merror in restarting services: {e}\033[0m")
    except Exception as e:
        print(f"\033[91merror in saving the config: {e}\033[0m")


def save_wireguardconfig4(file_path, new_config):
    try:
        with open(file_path, "r") as f:
            config = f.read()

        listen_port_pattern = r"ListenPort\s*=\s*\d+"
        endpoint_pattern = r"Endpoint\s*=\s*([^\s]+:\d+)?"
        address_pattern = r"Address\s*=\s*[^\s]+"
        allowed_ips_pattern = r"AllowedIPs\s*=\s*[^\s]+"

        new_config_content = re.sub(
            listen_port_pattern, f'ListenPort = {new_config["ListenPort"]}', config
        )
        new_config_content = re.sub(
            address_pattern, f'Address = {new_config["Address"]}', new_config_content
        )
        new_config_content = re.sub(
            allowed_ips_pattern,
            f'AllowedIPs = {new_config["AllowedIPs"]}',
            new_config_content,
        )
        existing_endpoint_match = re.search(endpoint_pattern, config)
        if existing_endpoint_match:
            existing_endpoint = existing_endpoint_match.group(1)
            if ":" not in new_config["Endpoint"]:
                new_config["Endpoint"] += f":{existing_endpoint.split(':')[1]}"

        new_config_content = re.sub(
            endpoint_pattern, f'Endpoint = {new_config["Endpoint"]}', new_config_content
        )

        with open(file_path, "w") as f:
            f.write(new_config_content)

        subprocess.run(["systemctl", "daemon-reload"], check=True)
        service_name = "wireguardping_4.service"
        service_status = subprocess.run(
            ["systemctl", "is-active", service_name],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
        )

        if service_status.returncode != 0:
            print(f"\033[91mService {service_name} doesn't exist or is inactive\033[0m")

        subprocess.run(
            ["wg-quick", "down", "/etc/wireguard/wireserver4.conf"], check=True
        )
        subprocess.run(
            ["wg-quick", "up", "/etc/wireguard/wireserver4.conf"], check=True
        )

        display_checkmark(f"\033[92mConfiguration updated successfully!\033[0m")

    except FileNotFoundError:
        print(f"\033[91mfile {file_path} not found.\033[0m")
    except subprocess.CalledProcessError as e:
        print(f"\033[91merror in restarting services: {e}\033[0m")
    except Exception as e:
        print(f"\033[91merror in saving the config: {e}\033[0m")


def save_wireguardconfig5(file_path, new_config):
    try:
        with open(file_path, "r") as f:
            config = f.read()

        listen_port_pattern = r"ListenPort\s*=\s*\d+"
        endpoint_pattern = r"Endpoint\s*=\s*([^\s]+:\d+)?"
        address_pattern = r"Address\s*=\s*[^\s]+"
        allowed_ips_pattern = r"AllowedIPs\s*=\s*[^\s]+"

        new_config_content = re.sub(
            listen_port_pattern, f'ListenPort = {new_config["ListenPort"]}', config
        )
        new_config_content = re.sub(
            address_pattern, f'Address = {new_config["Address"]}', new_config_content
        )
        new_config_content = re.sub(
            allowed_ips_pattern,
            f'AllowedIPs = {new_config["AllowedIPs"]}',
            new_config_content,
        )
        existing_endpoint_match = re.search(endpoint_pattern, config)
        if existing_endpoint_match:
            existing_endpoint = existing_endpoint_match.group(1)
            if ":" not in new_config["Endpoint"]:
                new_config["Endpoint"] += f":{existing_endpoint.split(':')[1]}"

        new_config_content = re.sub(
            endpoint_pattern, f'Endpoint = {new_config["Endpoint"]}', new_config_content
        )

        with open(file_path, "w") as f:
            f.write(new_config_content)

        subprocess.run(["systemctl", "daemon-reload"], check=True)
        service_name = "wireguardping_5.service"
        service_status = subprocess.run(
            ["systemctl", "is-active", service_name],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
        )

        if service_status.returncode != 0:
            print(f"\033[91mService {service_name} doesn't exist or is inactive\033[0m")

        subprocess.run(
            ["wg-quick", "down", "/etc/wireguard/wireserver5.conf"], check=True
        )
        subprocess.run(
            ["wg-quick", "up", "/etc/wireguard/wireserver5.conf"], check=True
        )

        display_checkmark(f"\033[92mConfiguration updated successfully!\033[0m")

    except FileNotFoundError:
        print(f"\033[91mfile {file_path} not found.\033[0m")
    except subprocess.CalledProcessError as e:
        print(f"\033[91merror in restarting services: {e}\033[0m")
    except Exception as e:
        print(f"\033[91merror in saving the config: {e}\033[0m")


def save_wireguardconfig_client(file_path, new_config):
    try:
        with open(file_path, "r") as f:
            config = f.read()

        listen_port_pattern = r"ListenPort\s*=\s*\d+"
        endpoint_pattern = r"Endpoint\s*=\s*([^\s]+:\d+)?"
        address_pattern = r"Address\s*=\s*[^\s]+"
        allowed_ips_pattern = r"AllowedIPs\s*=\s*[^\s]+"

        new_config_content = re.sub(
            listen_port_pattern, f'ListenPort = {new_config["ListenPort"]}', config
        )
        new_config_content = re.sub(
            address_pattern, f'Address = {new_config["Address"]}', new_config_content
        )
        new_config_content = re.sub(
            allowed_ips_pattern,
            f'AllowedIPs = {new_config["AllowedIPs"]}',
            new_config_content,
        )
        existing_endpoint_match = re.search(endpoint_pattern, config)
        if existing_endpoint_match:
            existing_endpoint = existing_endpoint_match.group(1)
            if ":" not in new_config["Endpoint"]:
                new_config["Endpoint"] += f":{existing_endpoint.split(':')[1]}"

        new_config_content = re.sub(
            endpoint_pattern, f'Endpoint = {new_config["Endpoint"]}', new_config_content
        )

        with open(file_path, "w") as f:
            f.write(new_config_content)

        subprocess.run(["systemctl", "daemon-reload"], check=True)
        service_name = "wireguardping.service"
        service_status = subprocess.run(
            ["systemctl", "is-active", service_name],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
        )

        if service_status.returncode != 0:
            print(f"\033[91mService {service_name} doesn't exist or is inactive\033[0m")

        subprocess.run(
            ["wg-quick", "down", "/etc/wireguard/wireclient.conf"], check=True
        )
        subprocess.run(["wg-quick", "up", "/etc/wireguard/wireclient.conf"], check=True)

        display_checkmark(f"\033[92mConfiguration updated successfully!\033[0m")

    except FileNotFoundError:
        print(f"\033[91mfile {file_path} not found.\033[0m")
    except subprocess.CalledProcessError as e:
        print(f"\033[91merror in restarting services: {e}\033[0m")
    except Exception as e:
        print(f"\033[91merror in saving the config: {e}\033[0m")


def update_ufw_ruleswireguard(old_ip, new_ip, old_port=None, new_port=None):
    if old_port:
        delete_ufw_rules(old_ip, old_port)
        delete_ufw_rules(wtb_opposite_ip_wireguard(old_ip), old_port)
    add_ufw_ruleswireguard(new_ip, new_port)
    add_ufw_ruleswireguard(wtb_opposite_ip_wireguard(new_ip), new_port)


def delete_ufw_rules(ip, port):
    try:
        subprocess.run(
            ["sudo", "ufw", "delete", "allow", "from", ip, "to", "any", "port", port],
            check=False,
        )
    except subprocess.CalledProcessError as e:
        print(f"\033[91mError deleting UFW rule for {ip} on port {port}: {e}\033[0m")


def add_ufw_ruleswireguard(ip, port):
    try:
        subprocess.run(
            ["sudo", "ufw", "allow", "from", ip, "to", "any", "port", port], check=True
        )
    except subprocess.CalledProcessError as e:
        print(f"\033[91mError adding UFW rule for {ip} on port {port}: {e}\033[0m")


def display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips):
    lines = [
        f"\033[97m──────────────────────────────────────\033[0m",
        f"\033[93mTitle:         Wireguard Configuration\033[0m",
        f"\033[97m──────────────────────────────────────\033[0m",
        f"\033[92mAddress:           \033[97m{address_no_subnet}\033[0m",
        f"\033[92mListenPort:        \033[97m{listen_port}\033[0m",
        f"\033[92mEndpoint:          \033[97m{endpoint}\033[0m",
        f"\033[92mAllowedIPs:        \033[97m{allowed_ips}\033[0m",
    ]
    box_width = 50

    print("\033[93m╭" + "─" * (box_width - 2) + "╮\033[0m")

    for line in lines:
        print(f"\033[93m {line:<{box_width - 4}} \033[0m")

    print("\033[93m╰" + "─" * (box_width - 2) + "╯\033[0m")


def update_ping_script_opposite_ip_wirenosec_client(new_opposite_ip):
    script_path = "/etc/ping_wireguard.sh"
    try:
        with open(script_path, "r") as f:
            script_content = f.read()

        updated_script_content = re.sub(
            r'ip_address="[^"]+"', f'ip_address="{new_opposite_ip}"', script_content
        )

        with open(script_path, "w") as f:
            f.write(updated_script_content)

        display_checkmark(
            "\033[92mPing script updated with new opposite IP address!\033[0m"
        )
    except FileNotFoundError:
        print(f"\033[91mPing script {script_path} not found.\033[0m")
    except Exception as e:
        print(f"\033[91mError updating ping script: {e}\033[0m")


def update_ping_script_opposite_ip_wirenosec1(new_opposite_ip):
    script_path = "/etc/ping_wireguard_1.sh"
    try:
        with open(script_path, "r") as f:
            script_content = f.read()

        updated_script_content = re.sub(
            r'ip_address="[^"]+"', f'ip_address="{new_opposite_ip}"', script_content
        )

        with open(script_path, "w") as f:
            f.write(updated_script_content)

        display_checkmark(
            "\033[92mPing script updated with new opposite IP address!\033[0m"
        )
    except FileNotFoundError:
        print(f"\033[91mPing script {script_path} not found.\033[0m")
    except Exception as e:
        print(f"\033[91mError updating ping script: {e}\033[0m")


def update_ping_script_opposite_ip_wirenosec2(new_opposite_ip):
    script_path = "/etc/ping_wireguard_2.sh"
    try:
        with open(script_path, "r") as f:
            script_content = f.read()

        updated_script_content = re.sub(
            r'ip_address="[^"]+"', f'ip_address="{new_opposite_ip}"', script_content
        )

        with open(script_path, "w") as f:
            f.write(updated_script_content)

        display_checkmark(
            "\033[92mPing script updated with new opposite IP address!\033[0m"
        )
    except FileNotFoundError:
        print(f"\033[91mPing script {script_path} not found.\033[0m")
    except Exception as e:
        print(f"\033[91mError updating ping script: {e}\033[0m")


def update_ping_script_opposite_ip_wirenosec3(new_opposite_ip):
    script_path = "/etc/ping_wireguard_3.sh"
    try:
        with open(script_path, "r") as f:
            script_content = f.read()

        updated_script_content = re.sub(
            r'ip_address="[^"]+"', f'ip_address="{new_opposite_ip}"', script_content
        )

        with open(script_path, "w") as f:
            f.write(updated_script_content)

        display_checkmark(
            "\033[92mPing script updated with new opposite IP address!\033[0m"
        )
    except FileNotFoundError:
        print(f"\033[91mPing script {script_path} not found.\033[0m")
    except Exception as e:
        print(f"\033[91mError updating ping script: {e}\033[0m")


def update_ping_script_opposite_ip_wirenosec4(new_opposite_ip):
    script_path = "/etc/ping_wireguard_4.sh"
    try:
        with open(script_path, "r") as f:
            script_content = f.read()

        updated_script_content = re.sub(
            r'ip_address="[^"]+"', f'ip_address="{new_opposite_ip}"', script_content
        )

        with open(script_path, "w") as f:
            f.write(updated_script_content)

        display_checkmark(
            "\033[92mPing script updated with new opposite IP address!\033[0m"
        )
    except FileNotFoundError:
        print(f"\033[91mPing script {script_path} not found.\033[0m")
    except Exception as e:
        print(f"\033[91mError updating ping script: {e}\033[0m")


def update_ping_script_opposite_ip_wirenosec5(new_opposite_ip):
    script_path = "/etc/ping_wireguard_5.sh"
    try:
        with open(script_path, "r") as f:
            script_content = f.read()

        updated_script_content = re.sub(
            r'ip_address="[^"]+"', f'ip_address="{new_opposite_ip}"', script_content
        )

        with open(script_path, "w") as f:
            f.write(updated_script_content)

        display_checkmark(
            "\033[92mPing script updated with new opposite IP address!\033[0m"
        )
    except FileNotFoundError:
        print(f"\033[91mPing script {script_path} not found.\033[0m")
    except Exception as e:
        print(f"\033[91mError updating ping script: {e}\033[0m")


def listen_port(config_path):
    """Extracts the ListenPort from the WireGuard configuration file."""
    try:
        with open(config_path, "r") as file:
            content = file.read()
            match = re.search(r"^ListenPort\s*=\s*(\d+)", content, re.MULTILINE)
            if match:
                return match.group(1)
            else:
                print("\033[91mPort not found in the config file.\033[0m")
                return "51820"
    except FileNotFoundError:
        print(f"\033[91mError: Configuration file '{config_path}' not found.\033[0m")
        return "51820"


def update_endpoint_ip1(endpoint, config_path="/etc/wireguard/wireserver1.conf"):
    default_port = listen_port(config_path)

    if ":" in endpoint:
        current_ip, current_port = endpoint.split(":")
    else:
        current_ip = endpoint
        current_port = default_port

    new_endpoint_ip = input(
        f"\033[93mEnter\033[92m New Endpoint IP \033[97m(IRAN Client [1]) \033[93m({current_ip}): \033[0m"
    )

    if new_endpoint_ip:
        new_endpoint = f"{new_endpoint_ip}:{current_port}"
        return new_endpoint
    else:
        print("\033[91mNo IP entered, keeping the existing Endpoint unchanged\033[0m")
        return endpoint


def update_endpoint_ip2(endpoint, config_path="/etc/wireguard/wireserver2.conf"):
    default_port = listen_port(config_path)

    if ":" in endpoint:
        current_ip, current_port = endpoint.split(":")
    else:
        current_ip = endpoint
        current_port = default_port

    new_endpoint_ip = input(
        f"\033[93mEnter\033[92m New Endpoint IP \033[97m(IRAN Client [2]) \033[93m({current_ip}): \033[0m"
    )

    if new_endpoint_ip:
        new_endpoint = f"{new_endpoint_ip}:{current_port}"
        return new_endpoint
    else:
        print("\033[91mNo IP entered, keeping the existing Endpoint unchanged\033[0m")
        return endpoint


def update_endpoint_ip3(endpoint, config_path="/etc/wireguard/wireserver3.conf"):
    default_port = listen_port(config_path)

    if ":" in endpoint:
        current_ip, current_port = endpoint.split(":")
    else:
        current_ip = endpoint
        current_port = default_port

    new_endpoint_ip = input(
        f"\033[93mEnter\033[92m New Endpoint IP \033[97m(IRAN Client [3]) \033[93m({current_ip}): \033[0m"
    )

    if new_endpoint_ip:
        new_endpoint = f"{new_endpoint_ip}:{current_port}"
        return new_endpoint
    else:
        print("\033[91mNo IP entered, keeping the existing Endpoint unchanged\033[0m")
        return endpoint


def update_endpoint_ip4(endpoint, config_path="/etc/wireguard/wireserver4.conf"):
    default_port = listen_port(config_path)

    if ":" in endpoint:
        current_ip, current_port = endpoint.split(":")
    else:
        current_ip = endpoint
        current_port = default_port

    new_endpoint_ip = input(
        f"\033[93mEnter\033[92m New Endpoint IP \033[97m(IRAN Client [4]) \033[93m({current_ip}): \033[0m"
    )

    if new_endpoint_ip:
        new_endpoint = f"{new_endpoint_ip}:{current_port}"
        return new_endpoint
    else:
        print("\033[91mNo IP entered, keeping the existing Endpoint unchanged\033[0m")
        return endpoint


def update_endpoint_ip5(endpoint, config_path="/etc/wireguard/wireserver5.conf"):
    default_port = listen_port(config_path)

    if ":" in endpoint:
        current_ip, current_port = endpoint.split(":")
    else:
        current_ip = endpoint
        current_port = default_port

    new_endpoint_ip = input(
        f"\033[93mEnter\033[92m New Endpoint IP \033[97m(IRAN Client [5]) \033[93m({current_ip}): \033[0m"
    )

    if new_endpoint_ip:
        new_endpoint = f"{new_endpoint_ip}:{current_port}"
        return new_endpoint
    else:
        print("\033[91mNo IP entered, keeping the existing Endpoint unchanged\033[0m")
        return endpoint


def update_endpoint_ip_server(endpoint, config_path="/etc/wireguard/wireclient.conf"):
    default_port = listen_port(config_path)

    if ":" in endpoint:
        current_ip, current_port = endpoint.split(":")
    else:
        current_ip = endpoint
        current_port = default_port

    new_endpoint_ip = input(
        f"\033[93mEnter\033[92m New Endpoint IP \033[97m(Kharej Server) \033[93m({current_ip}): \033[0m"
    )

    if new_endpoint_ip:
        new_endpoint = f"{new_endpoint_ip}:{current_port}"
        return new_endpoint
    else:
        print("\033[91mNo IP entered, keeping the existing Endpoint unchanged\033[0m")
        return endpoint


def update_tunnel_port(listen_port, endpoint):
    new_port = input(
        f"\033[93mEnter \033[92mNew Tunnel Port \033[93m({listen_port}): \033[0m"
    )

    if new_port.isdigit():
        if ":" in endpoint:
            endpoint_ip, _ = endpoint.split(":")
        else:
            endpoint_ip = endpoint
        new_endpoint = f"{endpoint_ip}:{new_port}"
        return new_port, new_endpoint
    else:
        print("\033[91mInvalid Port!\033[0m")
        return listen_port, endpoint


def update_endpoint_ir_ip1(endpoint, config_path="/etc/wireguard/wireserver1.conf"):
    default_port = listen_port(config_path)

    if ":" in endpoint:
        current_ip, current_port = endpoint.split(":")
    else:
        current_ip = endpoint
        current_port = default_port

    new_endpoint_ip = input(
        f"\033[93mEnter\033[92m New Endpoint IP \033[97m(Kharej Client [1]) \033[93m({current_ip}): \033[0m"
    )

    if new_endpoint_ip:
        new_endpoint = f"{new_endpoint_ip}:{current_port}"
        return new_endpoint
    else:
        print("\033[91mNo IP entered, keeping the existing Endpoint unchanged\033[0m")
        return endpoint


def update_endpoint_ir_ip2(endpoint, config_path="/etc/wireguard/wireserver2.conf"):
    default_port = listen_port(config_path)

    if ":" in endpoint:
        current_ip, current_port = endpoint.split(":")
    else:
        current_ip = endpoint
        current_port = default_port

    new_endpoint_ip = input(
        f"\033[93mEnter\033[92m New Endpoint IP \033[97m(Kharej Client [2]) \033[93m({current_ip}): \033[0m"
    )

    if new_endpoint_ip:
        new_endpoint = f"{new_endpoint_ip}:{current_port}"
        return new_endpoint
    else:
        print("\033[91mNo IP entered, keeping the existing Endpoint unchanged\033[0m")
        return endpoint


def update_endpoint_ir_ip3(endpoint, config_path="/etc/wireguard/wireserver3.conf"):
    default_port = listen_port(config_path)

    if ":" in endpoint:
        current_ip, current_port = endpoint.split(":")
    else:
        current_ip = endpoint
        current_port = default_port

    new_endpoint_ip = input(
        f"\033[93mEnter\033[92m New Endpoint IP \033[97m(Kharej Client [3]) \033[93m({current_ip}): \033[0m"
    )

    if new_endpoint_ip:
        new_endpoint = f"{new_endpoint_ip}:{current_port}"
        return new_endpoint
    else:
        print("\033[91mNo IP entered, keeping the existing Endpoint unchanged\033[0m")
        return endpoint


def update_endpoint_ir_ip4(endpoint, config_path="/etc/wireguard/wireserver4.conf"):
    default_port = listen_port(config_path)

    if ":" in endpoint:
        current_ip, current_port = endpoint.split(":")
    else:
        current_ip = endpoint
        current_port = default_port

    new_endpoint_ip = input(
        f"\033[93mEnter\033[92m New Endpoint IP \033[97m(Kharej Client [4]) \033[93m({current_ip}): \033[0m"
    )

    if new_endpoint_ip:
        new_endpoint = f"{new_endpoint_ip}:{current_port}"
        return new_endpoint
    else:
        print("\033[91mNo IP entered, keeping the existing Endpoint unchanged\033[0m")
        return endpoint


def update_endpoint_ir_ip5(endpoint, config_path="/etc/wireguard/wireserver5.conf"):
    default_port = listen_port(config_path)

    if ":" in endpoint:
        current_ip, current_port = endpoint.split(":")
    else:
        current_ip = endpoint
        current_port = default_port

    new_endpoint_ip = input(
        f"\033[93mEnter\033[92m New Endpoint IP \033[97m(Kharej Client [5]) \033[93m({current_ip}): \033[0m"
    )

    if new_endpoint_ip:
        new_endpoint = f"{new_endpoint_ip}:{current_port}"
        return new_endpoint
    else:
        print("\033[91mNo IP entered, keeping the existing Endpoint unchanged\033[0m")
        return endpoint


def update_endpoint_ir_server(endpoint, config_path="/etc/wireguard/wireclient.conf"):
    default_port = listen_port(config_path)

    if ":" in endpoint:
        current_ip, current_port = endpoint.split(":")
    else:
        current_ip = endpoint
        current_port = default_port

    new_endpoint_ip = input(
        f"\033[93mEnter\033[92m New Endpoint IP \033[97m(IRAN Server) \033[93m({current_ip}): \033[0m"
    )

    if new_endpoint_ip:
        new_endpoint = f"{new_endpoint_ip}:{current_port}"
        return new_endpoint
    else:
        print("\033[91mNo IP entered, keeping the existing Endpoint unchanged\033[0m")
        return endpoint


def wireguardedit_kharejconfig_1():
    config_path = "/etc/wireguard/wireserver1.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig(config_path)
    )

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCould not retrieve the WireGuard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[93mWireguard Edit local\033[97m Kharej Server Config\033[92m [1]\033[93m Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("\033[93mThis is Kharej Server - \033[97mConfig [1]\033[0m")
        print("1.\033[92m Change \033[97mPrivate IP\033[92m Address\033[0m")
        print("2.\033[96m Change Tunnel Port\033[0m")
        print(
            "3.\033[93m Change \033[92mIRAN Client [1]\033[93m IP \033[96m(Endpoint IP)\033[0m"
        )
        print("4.\033[92m Save and Exit\033[0m")
        print("0. back to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice: ")

        if choice == "1":
            new_ip = input(
                "\033[93mEnter\033[92m New Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec1(opposite_ip)
            else:
                print("\033[91mInvalid IP Address!\033[0m")

        elif choice == "2":
            listen_port, endpoint = update_tunnel_port(listen_port, endpoint)
            update_ufw_ruleswireguard(
                address_no_subnet, address_no_subnet, listen_port, listen_port
            )

        elif choice == "3":
            endpoint = update_endpoint_ip1(endpoint)

        elif choice == "4":
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "Endpoint": endpoint,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig1(config_path, new_config)
            break

        elif choice == "0":
            wireguardedit_noconjuction_kharej1_5iran()
        else:
            print("\033[91mPlease select a valid option.\033[0m")


def wireguardedit_kharejconfig_2():
    config_path = "/etc/wireguard/wireserver2.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig(config_path)
    )

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCould not retrieve the WireGuard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[93mWireguard Edit local\033[97m Kharej Server Config\033[92m [2]\033[93m Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("\033[93mThis is Kharej Server - \033[97mConfig [2]\033[0m")
        print("1.\033[92m Change \033[97mPrivate IP\033[92m Address\033[0m")
        print("2.\033[96m Change Tunnel Port\033[0m")
        print(
            "3.\033[93m Change \033[92mIRAN Client [2]\033[93m IP \033[96m(Endpoint IP)\033[0m"
        )
        print("4.\033[92m Save and Exit\033[0m")
        print("0. back to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice: ")

        if choice == "1":
            new_ip = input(
                "\033[93mEnter\033[92m New Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec2(opposite_ip)
            else:
                print("\033[91mInvalid IP Address!\033[0m")

        elif choice == "2":
            listen_port, endpoint = update_tunnel_port(listen_port, endpoint)
            update_ufw_ruleswireguard(
                address_no_subnet, address_no_subnet, listen_port, listen_port
            )

        elif choice == "3":
            endpoint = update_endpoint_ip2(endpoint)

        elif choice == "4":
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "Endpoint": endpoint,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig2(config_path, new_config)
            break

        elif choice == "0":
            wireguardedit_noconjuction_kharej1_5iran()
        else:
            print("\033[91mPlease select a valid option.\033[0m")


def wireguardedit_kharejconfig_3():
    config_path = "/etc/wireguard/wireserver3.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig(config_path)
    )

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCould not retrieve the WireGuard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[93mWireguard Edit local\033[97m Kharej Server Config\033[92m [3]\033[93m Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("\033[93mThis is Kharej Server - \033[97mConfig [3]\033[0m")
        print("1.\033[92m Change \033[97mPrivate IP\033[92m Address\033[0m")
        print("2.\033[96m Change Tunnel Port\033[0m")
        print(
            "3.\033[93m Change \033[92mIRAN Client [3]\033[93m IP \033[96m(Endpoint IP)\033[0m"
        )
        print("4.\033[92m Save and Exit\033[0m")
        print("0. back to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice: ")

        if choice == "1":
            new_ip = input(
                "\033[93mEnter\033[92m New Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec3(opposite_ip)
            else:
                print("\033[91mInvalid IP Address!\033[0m")

        elif choice == "2":
            listen_port, endpoint = update_tunnel_port(listen_port, endpoint)
            update_ufw_ruleswireguard(
                address_no_subnet, address_no_subnet, listen_port, listen_port
            )

        elif choice == "3":
            endpoint = update_endpoint_ip3(endpoint)

        elif choice == "4":
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "Endpoint": endpoint,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig3(config_path, new_config)
            break

        elif choice == "0":
            wireguardedit_noconjuction_kharej1_5iran()
        else:
            print("\033[91mPlease select a valid option.\033[0m")


def wireguardedit_kharejconfig_4():
    config_path = "/etc/wireguard/wireserver4.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig(config_path)
    )

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCould not retrieve the WireGuard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[93mWireguard Edit local\033[97m Kharej Server Config\033[92m [4]\033[93m Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("\033[93mThis is Kharej Server - \033[97mConfig [4]\033[0m")
        print("1.\033[92m Change \033[97mPrivate IP\033[92m Address\033[0m")
        print("2.\033[96m Change Tunnel Port\033[0m")
        print(
            "3.\033[93m Change \033[92mIRAN Client [4]\033[93m IP \033[96m(Endpoint IP)\033[0m"
        )
        print("4.\033[92m Save and Exit\033[0m")
        print("0. back to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice: ")

        if choice == "1":
            new_ip = input(
                "\033[93mEnter\033[92m New Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec4(opposite_ip)
            else:
                print("\033[91mInvalid IP Address!\033[0m")

        elif choice == "2":
            listen_port, endpoint = update_tunnel_port(listen_port, endpoint)
            update_ufw_ruleswireguard(
                address_no_subnet, address_no_subnet, listen_port, listen_port
            )

        elif choice == "3":
            endpoint = update_endpoint_ip4(endpoint)

        elif choice == "4":
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "Endpoint": endpoint,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig4(config_path, new_config)
            break

        elif choice == "0":
            wireguardedit_noconjuction_kharej1_5iran()
        else:
            print("\033[91mPlease select a valid option.\033[0m")


def wireguardedit_kharejconfig_5():
    config_path = "/etc/wireguard/wireserver5.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig(config_path)
    )

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCould not retrieve the WireGuard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[93mWireguard Edit local\033[97m Kharej Server Config\033[92m [5]\033[93m Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("\033[93mThis is Kharej Server - \033[97mConfig [5]\033[0m")
        print("1.\033[92m Change \033[97mPrivate IP\033[92m Address\033[0m")
        print("2.\033[96m Change Tunnel Port\033[0m")
        print(
            "3.\033[93m Change \033[92mIRAN Client [5]\033[93m IP \033[96m(Endpoint IP)\033[0m"
        )
        print("4.\033[92m Save and Exit\033[0m")
        print("0. back to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice: ")

        if choice == "1":
            new_ip = input(
                "\033[93mEnter\033[92m New Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec5(opposite_ip)
            else:
                print("\033[91mInvalid IP Address!\033[0m")

        elif choice == "2":
            listen_port, endpoint = update_tunnel_port(listen_port, endpoint)
            update_ufw_ruleswireguard(
                address_no_subnet, address_no_subnet, listen_port, listen_port
            )

        elif choice == "3":
            endpoint = update_endpoint_ip5(endpoint)

        elif choice == "4":
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "Endpoint": endpoint,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig5(config_path, new_config)
            break

        elif choice == "0":
            wireguardedit_noconjuction_kharej1_5iran()
        else:
            print("\033[91mPlease select a valid option.\033[0m")


def wireguardudp_iran_client1():
    config_path = "/etc/wireguard/wireclient.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig(config_path)
    )

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCould not retrieve the WireGuard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[93mWireguard Edit local\033[97m IRAN Client\033[92m [1]\033[93m Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("\033[93mThis is IRAN Client - \033[97m[1]\033[0m")
        print("1.\033[92m Change \033[97mPrivate IP\033[92m Address\033[0m")
        print("2.\033[96m Change Tunnel Port\033[0m")
        print(
            "3.\033[93m Change \033[92mKharej Server\033[93m IP \033[96m(Endpoint IP)\033[0m"
        )
        print("4.\033[92m Save and Exit\033[0m")
        print("0. back to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice: ")

        if choice == "1":
            new_ip = input(
                "\033[93mEnter\033[92m New Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec_client(opposite_ip)
            else:
                print("\033[91mInvalid IP Address!\033[0m")

        elif choice == "2":
            listen_port, endpoint = update_tunnel_port(listen_port, endpoint)
            update_ufw_ruleswireguard(
                address_no_subnet, address_no_subnet, listen_port, listen_port
            )

        elif choice == "3":
            endpoint = update_endpoint_ip_server(endpoint)

        elif choice == "4":
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "Endpoint": endpoint,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_client(config_path, new_config)
            break

        elif choice == "0":
            wireguardedit_noconjuction_kharej1_5iran()
        else:
            print("\033[91mPlease select a valid option.\033[0m")


def wireguardudp_iran_client2():
    config_path = "/etc/wireguard/wireclient.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig(config_path)
    )

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCould not retrieve the WireGuard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[93mWireguard Edit local\033[97m IRAN Client\033[92m [2]\033[93m Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("\033[93mThis is IRAN Client - \033[97m[2]\033[0m")
        print("1.\033[92m Change \033[97mPrivate IP\033[92m Address\033[0m")
        print("2.\033[96m Change Tunnel Port\033[0m")
        print(
            "3.\033[93m Change \033[92mKharej Server\033[93m IP \033[96m(Endpoint IP)\033[0m"
        )
        print("4.\033[92m Save and Exit\033[0m")
        print("0. back to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice: ")

        if choice == "1":
            new_ip = input(
                "\033[93mEnter\033[92m New Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec_client(opposite_ip)
            else:
                print("\033[91mInvalid IP Address!\033[0m")

        elif choice == "2":
            listen_port, endpoint = update_tunnel_port(listen_port, endpoint)
            update_ufw_ruleswireguard(
                address_no_subnet, address_no_subnet, listen_port, listen_port
            )

        elif choice == "3":
            endpoint = update_endpoint_ip_server(endpoint)

        elif choice == "4":
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "Endpoint": endpoint,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_client(config_path, new_config)
            break

        elif choice == "0":
            wireguardedit_noconjuction_kharej1_5iran()
        else:
            print("\033[91mPlease select a valid option.\033[0m")


def wireguardudp_iran_client3():
    config_path = "/etc/wireguard/wireclient.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig(config_path)
    )

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCould not retrieve the WireGuard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[93mWireguard Edit local\033[97m IRAN Client\033[92m [3]\033[93m Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("\033[93mThis is IRAN Client - \033[97m[3]\033[0m")
        print("1.\033[92m Change \033[97mPrivate IP\033[92m Address\033[0m")
        print("2.\033[96m Change Tunnel Port\033[0m")
        print(
            "3.\033[93m Change \033[92mKharej Server\033[93m IP \033[96m(Endpoint IP)\033[0m"
        )
        print("4.\033[92m Save and Exit\033[0m")
        print("0. back to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice: ")

        if choice == "1":
            new_ip = input(
                "\033[93mEnter\033[92m New Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec_client(opposite_ip)
            else:
                print("\033[91mInvalid IP Address!\033[0m")

        elif choice == "2":
            listen_port, endpoint = update_tunnel_port(listen_port, endpoint)
            update_ufw_ruleswireguard(
                address_no_subnet, address_no_subnet, listen_port, listen_port
            )

        elif choice == "3":
            endpoint = update_endpoint_ip_server(endpoint)

        elif choice == "4":
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "Endpoint": endpoint,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_client(config_path, new_config)
            break

        elif choice == "0":
            wireguardedit_noconjuction_kharej1_5iran()
        else:
            print("\033[91mPlease select a valid option.\033[0m")


def wireguardudp_iran_client4():
    config_path = "/etc/wireguard/wireclient.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig(config_path)
    )

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCould not retrieve the WireGuard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[93mWireguard Edit local\033[97m IRAN Client\033[92m [4]\033[93m Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("\033[93mThis is IRAN Client - \033[97m[4]\033[0m")
        print("1.\033[92m Change \033[97mPrivate IP\033[92m Address\033[0m")
        print("2.\033[96m Change Tunnel Port\033[0m")
        print(
            "3.\033[93m Change \033[92mKharej Server\033[93m IP \033[96m(Endpoint IP)\033[0m"
        )
        print("4.\033[92m Save and Exit\033[0m")
        print("0. back to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice: ")

        if choice == "1":
            new_ip = input(
                "\033[93mEnter\033[92m New Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec_client(opposite_ip)
            else:
                print("\033[91mInvalid IP Address!\033[0m")

        elif choice == "2":
            listen_port, endpoint = update_tunnel_port(listen_port, endpoint)
            update_ufw_ruleswireguard(
                address_no_subnet, address_no_subnet, listen_port, listen_port
            )

        elif choice == "3":
            endpoint = update_endpoint_ip_server(endpoint)

        elif choice == "4":
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "Endpoint": endpoint,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_client(config_path, new_config)
            break

        elif choice == "0":
            wireguardedit_noconjuction_kharej1_5iran()
        else:
            print("\033[91mPlease select a valid option.\033[0m")


def wireguardudp_iran_client5():
    config_path = "/etc/wireguard/wireclient.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig(config_path)
    )

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCould not retrieve the WireGuard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[93mWireguard Edit local\033[97m IRAN Client\033[92m [5]\033[93m Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("\033[93mThis is IRAN Client - \033[97m[5]\033[0m")
        print("1.\033[92m Change \033[97mPrivate IP\033[92m Address\033[0m")
        print("2.\033[96m Change Tunnel Port\033[0m")
        print(
            "3.\033[93m Change \033[92mKharej Server\033[93m IP \033[96m(Endpoint IP)\033[0m"
        )
        print("4.\033[92m Save and Exit\033[0m")
        print("0. back to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice: ")

        if choice == "1":
            new_ip = input(
                "\033[93mEnter\033[92m New Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec_client(opposite_ip)
            else:
                print("\033[91mInvalid IP Address!\033[0m")

        elif choice == "2":
            listen_port, endpoint = update_tunnel_port(listen_port, endpoint)
            update_ufw_ruleswireguard(
                address_no_subnet, address_no_subnet, listen_port, listen_port
            )

        elif choice == "3":
            endpoint = update_endpoint_ip_server(endpoint)

        elif choice == "4":
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "Endpoint": endpoint,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_client(config_path, new_config)
            break

        elif choice == "0":
            wireguardedit_noconjuction_kharej1_5iran()
        else:
            print("\033[91mPlease select a valid option.\033[0m")


def wireguardedit_noconjuction_1iran_5kharej():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print(
        "\033[92m(   ) \033[93mWireguard \033[92m[1]IRAN Server\033[96m [5]Kharej Client\033[93m Edit Menu\033[0m"
    )
    print(
        '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
    )
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[92mKharej Client [1] Config\033[0m")
    print("2. \033[92mKharej Client [2] Config\033[0m")
    print("3. \033[92mKharej Client [3] Config\033[0m")
    print("4. \033[93mKharej Client [4] Config\033[0m")
    print("5. \033[92mKharej Client [5] Config\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    print("6. \033[96mIRAN Server Config\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    print("0.\033[97mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")
    while True:
        server_type = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if server_type == "1":
            wireguardudp_kharej_client1()
            break
        elif server_type == "2":
            wireguardudp_kharej_client2()
            break
        elif server_type == "3":
            wireguardudp_kharej_client3()
            break
        elif server_type == "4":
            wireguardudp_kharej_client4()
            break
        elif server_type == "5":
            wireguardudp_kharej_client5()
            break
        elif server_type == "6":
            wireguardudpedit_iran_server()
            break
        elif server_type == "0":
            os.system("clear")
            wireguardeditserver_mnu()
            break
        else:
            print("Invalid choice.")


def wireguardudpedit_iran_server():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print("\033[92m(   ) \033[93mWireguard \033[92mIRAN Server Menu\033[0m")
    print(
        '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
    )
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[92mIRAN Server Config [1] \033[0m")
    print("2. \033[92mIRAN Server Config [2]\033[0m")
    print("3. \033[93mIRAN Server Config [3]\033[0m")
    print("4. \033[92mIRAN Server Config [4]\033[0m")
    print("5. \033[92mIRAN Server Config [5]\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    print("0.\033[97mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")
    while True:
        server_type = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if server_type == "1":
            wireguardedit_iranconfig_1()
            break
        elif server_type == "2":
            wireguardedit_iranconfig_2()
            break
        elif server_type == "3":
            wireguardedit_iranconfig_3()
            break
        elif server_type == "4":
            wireguardedit_iranconfig_4()
            break
        elif server_type == "5":
            wireguardedit_iranconfig_5()
            break
        elif server_type == "0":
            os.system("clear")
            wireguardedit_noconjuction_1iran_5kharej()
            break
        else:
            print("Invalid choice.")


def wireguardedit_iranconfig_1():
    config_path = "/etc/wireguard/wireserver1.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig(config_path)
    )

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCould not retrieve the WireGuard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[93mWireguard Edit local\033[97m IRAN Server Config\033[92m [1]\033[93m Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("\033[93mThis is IRAN Server - \033[97mConfig [1]\033[0m")
        print("1.\033[92m Change \033[97mPrivate IP\033[92m Address\033[0m")
        print("2.\033[96m Change Tunnel Port\033[0m")
        print(
            "3.\033[93m Change \033[92mKharej Client [1]\033[93m IP \033[96m(Endpoint IP)\033[0m"
        )
        print("4.\033[92m Save and Exit\033[0m")
        print("0. back to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice: ")

        if choice == "1":
            new_ip = input(
                "\033[93mEnter\033[92m New Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec1(opposite_ip)
            else:
                print("\033[91mInvalid IP Address!\033[0m")

        elif choice == "2":
            listen_port, endpoint = update_tunnel_port(listen_port, endpoint)
            update_ufw_ruleswireguard(
                address_no_subnet, address_no_subnet, listen_port, listen_port
            )

        elif choice == "3":
            endpoint = update_endpoint_ir_ip1(endpoint)

        elif choice == "4":
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "Endpoint": endpoint,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig1(config_path, new_config)
            break

        elif choice == "0":
            wireguardedit_noconjuction_1iran_5kharej()
        else:
            print("\033[91mPlease select a valid option.\033[0m")


def wireguardedit_iranconfig_2():
    config_path = "/etc/wireguard/wireserver2.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig(config_path)
    )

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCould not retrieve the WireGuard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[93mWireguard Edit local\033[97m IRAN Server Config\033[92m [2]\033[93m Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("\033[93mThis is IRAN Server - \033[97mConfig [2]\033[0m")
        print("1.\033[92m Change \033[97mPrivate IP\033[92m Address\033[0m")
        print("2.\033[96m Change Tunnel Port\033[0m")
        print(
            "3.\033[93m Change \033[92mKharej Client [2]\033[93m IP \033[96m(Endpoint IP)\033[0m"
        )
        print("4.\033[92m Save and Exit\033[0m")
        print("0. back to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice: ")

        if choice == "1":
            new_ip = input(
                "\033[93mEnter\033[92m New Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec2(opposite_ip)
            else:
                print("\033[91mInvalid IP Address!\033[0m")

        elif choice == "2":
            listen_port, endpoint = update_tunnel_port(listen_port, endpoint)
            update_ufw_ruleswireguard(
                address_no_subnet, address_no_subnet, listen_port, listen_port
            )

        elif choice == "3":
            endpoint = update_endpoint_ir_ip2(endpoint)

        elif choice == "4":
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "Endpoint": endpoint,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig2(config_path, new_config)
            break

        elif choice == "0":
            wireguardedit_noconjuction_1iran_5kharej()
        else:
            print("\033[91mPlease select a valid option.\033[0m")


def wireguardedit_iranconfig_3():
    config_path = "/etc/wireguard/wireserver3.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig(config_path)
    )

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCould not retrieve the WireGuard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[93mWireguard Edit local\033[97m IRAN Server Config\033[92m [3]\033[93m Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("\033[93mThis is IRAN Server - \033[97mConfig [3]\033[0m")
        print("1.\033[92m Change \033[97mPrivate IP\033[92m Address\033[0m")
        print("2.\033[96m Change Tunnel Port\033[0m")
        print(
            "3.\033[93m Change \033[92mKharej Client [3]\033[93m IP \033[96m(Endpoint IP)\033[0m"
        )
        print("4.\033[92m Save and Exit\033[0m")
        print("0. back to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice: ")

        if choice == "1":
            new_ip = input(
                "\033[93mEnter\033[92m New Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec3(opposite_ip)
            else:
                print("\033[91mInvalid IP Address!\033[0m")

        elif choice == "2":
            listen_port, endpoint = update_tunnel_port(listen_port, endpoint)
            update_ufw_ruleswireguard(
                address_no_subnet, address_no_subnet, listen_port, listen_port
            )

        elif choice == "3":
            endpoint = update_endpoint_ir_ip3(endpoint)

        elif choice == "4":
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "Endpoint": endpoint,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig3(config_path, new_config)
            break

        elif choice == "0":
            wireguardedit_noconjuction_1iran_5kharej()
        else:
            print("\033[91mPlease select a valid option.\033[0m")


def wireguardedit_iranconfig_4():
    config_path = "/etc/wireguard/wireserver4.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig(config_path)
    )

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCould not retrieve the WireGuard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[93mWireguard Edit local\033[97m IRAN Server Config\033[92m [4]\033[93m Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("\033[93mThis is IRAN Server - \033[97mConfig [4]\033[0m")
        print("1.\033[92m Change \033[97mPrivate IP\033[92m Address\033[0m")
        print("2.\033[96m Change Tunnel Port\033[0m")
        print(
            "3.\033[93m Change \033[92mKharej Client [4]\033[93m IP \033[96m(Endpoint IP)\033[0m"
        )
        print("4.\033[92m Save and Exit\033[0m")
        print("0. back to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice: ")

        if choice == "1":
            new_ip = input(
                "\033[93mEnter\033[92m New Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec4(opposite_ip)
            else:
                print("\033[91mInvalid IP Address!\033[0m")

        elif choice == "2":
            listen_port, endpoint = update_tunnel_port(listen_port, endpoint)
            update_ufw_ruleswireguard(
                address_no_subnet, address_no_subnet, listen_port, listen_port
            )

        elif choice == "3":
            endpoint = update_endpoint_ir_ip4(endpoint)

        elif choice == "4":
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "Endpoint": endpoint,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig4(config_path, new_config)
            break

        elif choice == "0":
            wireguardedit_noconjuction_1iran_5kharej()
        else:
            print("\033[91mPlease select a valid option.\033[0m")


def wireguardedit_iranconfig_5():
    config_path = "/etc/wireguard/wireserver5.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig(config_path)
    )

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCould not retrieve the WireGuard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[93mWireguard Edit local\033[97m IRAN Server Config\033[92m [5]\033[93m Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("\033[93mThis is IRAN Server - \033[97mConfig [5]\033[0m")
        print("1.\033[92m Change \033[97mPrivate IP\033[92m Address\033[0m")
        print("2.\033[96m Change Tunnel Port\033[0m")
        print(
            "3.\033[93m Change \033[92mKharej Client [5]\033[93m IP \033[96m(Endpoint IP)\033[0m"
        )
        print("4.\033[92m Save and Exit\033[0m")
        print("0. back to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice: ")

        if choice == "1":
            new_ip = input(
                "\033[93mEnter\033[92m New Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec5(opposite_ip)
            else:
                print("\033[91mInvalid IP Address!\033[0m")

        elif choice == "2":
            listen_port, endpoint = update_tunnel_port(listen_port, endpoint)
            update_ufw_ruleswireguard(
                address_no_subnet, address_no_subnet, listen_port, listen_port
            )

        elif choice == "3":
            endpoint = update_endpoint_ir_ip5(endpoint)

        elif choice == "4":
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "Endpoint": endpoint,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig5(config_path, new_config)
            break

        elif choice == "0":
            wireguardedit_noconjuction_1iran_5kharej()
        else:
            print("\033[91mPlease select a valid option.\033[0m")


def wireguardudp_kharej_client1():
    config_path = "/etc/wireguard/wireclient.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig(config_path)
    )

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCould not retrieve the WireGuard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[93mWireguard Edit local\033[97m Kharej Client\033[92m [1]\033[93m Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("\033[93mThis is Kharej Client - \033[97m[1]\033[0m")
        print("1.\033[92m Change \033[97mPrivate IP\033[92m Address\033[0m")
        print("2.\033[96m Change Tunnel Port\033[0m")
        print(
            "3.\033[93m Change \033[92mIRAN Server\033[93m IP \033[96m(Endpoint IP)\033[0m"
        )
        print("4.\033[92m Save and Exit\033[0m")
        print("0. back to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice: ")

        if choice == "1":
            new_ip = input(
                "\033[93mEnter\033[92m New Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec_client(opposite_ip)
            else:
                print("\033[91mInvalid IP Address!\033[0m")

        elif choice == "2":
            listen_port, endpoint = update_tunnel_port(listen_port, endpoint)
            update_ufw_ruleswireguard(
                address_no_subnet, address_no_subnet, listen_port, listen_port
            )

        elif choice == "3":
            endpoint = update_endpoint_ir_server(endpoint)

        elif choice == "4":
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "Endpoint": endpoint,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_client(config_path, new_config)
            break

        elif choice == "0":
            wireguardedit_noconjuction_1iran_5kharej()
        else:
            print("\033[91mPlease select a valid option.\033[0m")


def wireguardudp_kharej_client2():
    config_path = "/etc/wireguard/wireclient.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig(config_path)
    )

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCould not retrieve the WireGuard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[93mWireguard Edit local\033[97m Kharej Client\033[92m [2]\033[93m Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("\033[93mThis is Kharej Client - \033[97m[2]\033[0m")
        print("1.\033[92m Change \033[97mPrivate IP\033[92m Address\033[0m")
        print("2.\033[96m Change Tunnel Port\033[0m")
        print(
            "3.\033[93m Change \033[92mIRAN Server\033[93m IP \033[96m(Endpoint IP)\033[0m"
        )
        print("4.\033[92m Save and Exit\033[0m")
        print("0. back to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice: ")

        if choice == "1":
            new_ip = input(
                "\033[93mEnter\033[92m New Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec_client(opposite_ip)
            else:
                print("\033[91mInvalid IP Address!\033[0m")

        elif choice == "2":
            listen_port, endpoint = update_tunnel_port(listen_port, endpoint)
            update_ufw_ruleswireguard(
                address_no_subnet, address_no_subnet, listen_port, listen_port
            )

        elif choice == "3":
            endpoint = update_endpoint_ir_server(endpoint)

        elif choice == "4":
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "Endpoint": endpoint,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_client(config_path, new_config)
            break

        elif choice == "0":
            wireguardedit_noconjuction_1iran_5kharej()
        else:
            print("\033[91mPlease select a valid option.\033[0m")


def wireguardudp_kharej_client3():
    config_path = "/etc/wireguard/wireclient.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig(config_path)
    )

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCould not retrieve the WireGuard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[93mWireguard Edit local\033[97m Kharej Client\033[92m [3]\033[93m Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("\033[93mThis is Kharej Client - \033[97m[3]\033[0m")
        print("1.\033[92m Change \033[97mPrivate IP\033[92m Address\033[0m")
        print("2.\033[96m Change Tunnel Port\033[0m")
        print(
            "3.\033[93m Change \033[92mIRAN Server\033[93m IP \033[96m(Endpoint IP)\033[0m"
        )
        print("4.\033[92m Save and Exit\033[0m")
        print("0. back to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice: ")

        if choice == "1":
            new_ip = input(
                "\033[93mEnter\033[92m New Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec_client(opposite_ip)
            else:
                print("\033[91mInvalid IP Address!\033[0m")

        elif choice == "2":
            listen_port, endpoint = update_tunnel_port(listen_port, endpoint)
            update_ufw_ruleswireguard(
                address_no_subnet, address_no_subnet, listen_port, listen_port
            )

        elif choice == "3":
            endpoint = update_endpoint_ir_server(endpoint)

        elif choice == "4":
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "Endpoint": endpoint,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_client(config_path, new_config)
            break

        elif choice == "0":
            wireguardedit_noconjuction_1iran_5kharej()
        else:
            print("\033[91mPlease select a valid option.\033[0m")


def wireguardudp_kharej_client4():
    config_path = "/etc/wireguard/wireclient.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig(config_path)
    )

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCould not retrieve the WireGuard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[93mWireguard Edit local\033[97m Kharej Client\033[92m [4]\033[93m Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("\033[93mThis is Kharej Client - \033[97m[4]\033[0m")
        print("1.\033[92m Change \033[97mPrivate IP\033[92m Address\033[0m")
        print("2.\033[96m Change Tunnel Port\033[0m")
        print(
            "3.\033[93m Change \033[92mIRAN Server\033[93m IP \033[96m(Endpoint IP)\033[0m"
        )
        print("4.\033[92m Save and Exit\033[0m")
        print("0. back to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice: ")

        if choice == "1":
            new_ip = input(
                "\033[93mEnter\033[92m New Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec_client(opposite_ip)
            else:
                print("\033[91mInvalid IP Address!\033[0m")

        elif choice == "2":
            listen_port, endpoint = update_tunnel_port(listen_port, endpoint)
            update_ufw_ruleswireguard(
                address_no_subnet, address_no_subnet, listen_port, listen_port
            )

        elif choice == "3":
            endpoint = update_endpoint_ir_server(endpoint)

        elif choice == "4":
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "Endpoint": endpoint,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_client(config_path, new_config)
            break

        elif choice == "0":
            wireguardedit_noconjuction_1iran_5kharej()
        else:
            print("\033[91mPlease select a valid option.\033[0m")


def wireguardudp_kharej_client5():
    config_path = "/etc/wireguard/wireclient.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig(config_path)
    )

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCould not retrieve the WireGuard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[93mWireguard Edit local\033[97m Kharej Client\033[92m [5]\033[93m Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("\033[93mThis is Kharej Client - \033[97m[5]\033[0m")
        print("1.\033[92m Change \033[97mPrivate IP\033[92m Address\033[0m")
        print("2.\033[96m Change Tunnel Port\033[0m")
        print(
            "3.\033[93m Change \033[92mIRAN Server\033[93m IP \033[96m(Endpoint IP)\033[0m"
        )
        print("4.\033[92m Save and Exit\033[0m")
        print("0. back to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice: ")

        if choice == "1":
            new_ip = input(
                "\033[93mEnter\033[92m New Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec_client(opposite_ip)
            else:
                print("\033[91mInvalid IP Address!\033[0m")

        elif choice == "2":
            listen_port, endpoint = update_tunnel_port(listen_port, endpoint)
            update_ufw_ruleswireguard(
                address_no_subnet, address_no_subnet, listen_port, listen_port
            )

        elif choice == "3":
            endpoint = update_endpoint_ir_server(endpoint)

        elif choice == "4":
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "Endpoint": endpoint,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_client(config_path, new_config)
            break

        elif choice == "0":
            wireguardedit_noconjuction_1iran_5kharej()
        else:
            print("\033[91mPlease select a valid option.\033[0m")


# wireguard ipsec


def wireguardeditserver_sec_mnu():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print("\033[92m(   ) \033[93mWireguard + IPSEC \033[93m Edit Menu\033[0m")
    print(
        '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
    )
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[92mWireguard - [1]Kharej Server [5]IRAN Clients\033[0m")
    print("2. \033[93mWireguard - [1]IRAN   Server [5]Kharej Clients\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    print("0.\033[97mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")
    while True:
        server_type = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if server_type == "1":
            wireguardedit_noconjuction_kharej1_5iransec()
            break
        elif server_type == "2":
            wireguardedit_noconjuction_1iran_5kharejsec()
            break
        elif server_type == "0":
            os.system("clear")
            wireguardeditserver_mnu()
            break
        else:
            print("Invalid choice.")


def wireguardedit_noconjuction_kharej1_5iransec():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print(
        "\033[92m(   ) \033[93mWireguard + IPSEC \033[92m[1]Kharej Server\033[96m [5]IRAN Client\033[93m Edit Menu\033[0m"
    )
    print(
        '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
    )
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[92mIRAN Client [1] Config\033[0m")
    print("2. \033[92mIRAN Client [2] Config\033[0m")
    print("3. \033[92mIRAN Client [3] Config\033[0m")
    print("4. \033[93mIRAN Client [4] Config\033[0m")
    print("5. \033[92mIRAN Client [5] Config\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    print("6. \033[96mKharej Server Config\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    print("0.\033[97mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")
    while True:
        server_type = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if server_type == "1":
            wireguardudp_iran_client1sec()
            break
        elif server_type == "2":
            wireguardudp_iran_client2sec()
            break
        elif server_type == "3":
            wireguardudp_iran_client3sec()
            break
        elif server_type == "4":
            wireguardudp_iran_client4sec()
            break
        elif server_type == "5":
            wireguardudp_iran_client5sec()
            break
        elif server_type == "6":
            wireguardudpedit_kharej_serversec()
            break
        elif server_type == "0":
            os.system("clear")
            wireguardeditserver_sec_mnu()
            break
        else:
            print("Invalid choice.")


def wireguardudpedit_kharej_serversec():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print(
        "\033[92m(   ) \033[93mWireguard + IPSEC \033[92m[1]Kharej Server\033[96m [5]IRAN Client\033[93m Edit Menu\033[0m"
    )
    print(
        '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
    )
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[92mKharej Server Config [1] \033[0m")
    print("2. \033[92mKharej Server Config [2]\033[0m")
    print("3. \033[93mKharej Server Config [3]\033[0m")
    print("4. \033[92mKharej Server Config [4]\033[0m")
    print("5. \033[92mKharej Server Config [5]\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    print("0.\033[97mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")
    while True:
        server_type = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if server_type == "1":
            wireguardedit_kharejconfig_1sec()
            break
        elif server_type == "2":
            wireguardedit_kharejconfig_2sec()
            break
        elif server_type == "3":
            wireguardedit_kharejconfig_3sec()
            break
        elif server_type == "4":
            wireguardedit_kharejconfig_4sec()
            break
        elif server_type == "5":
            wireguardedit_kharejconfig_5sec()
            break
        elif server_type == "0":
            os.system("clear")
            wireguardedit_noconjuction_kharej1_5iransec()
            break
        else:
            print("Invalid choice.")


def wireguardedit_noconjuction_1iran_5kharejsec():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print(
        "\033[92m(   ) \033[93mWireguard + IPSEC \033[92m[1]IRAN Server\033[96m [5]Kharej Client\033[93m Edit Menu\033[0m"
    )
    print(
        '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
    )
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[92mKharej Client [1] Config\033[0m")
    print("2. \033[92mKharej Client [2] Config\033[0m")
    print("3. \033[92mKharej Client [3] Config\033[0m")
    print("4. \033[93mKharej Client [4] Config\033[0m")
    print("5. \033[92mKharej Client [5] Config\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    print("6. \033[96mIRAN Server Config\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    print("0.\033[97mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")
    while True:
        server_type = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if server_type == "1":
            wireguardudp_kharej_client1sec()
            break
        elif server_type == "2":
            wireguardudp_kharej_client2sec()
            break
        elif server_type == "3":
            wireguardudp_kharej_client3sec()
            break
        elif server_type == "4":
            wireguardudp_kharej_client4sec()
            break
        elif server_type == "5":
            wireguardudp_kharej_client5sec()
            break
        elif server_type == "6":
            wireguardudpedit_iran_serversec()
            break
        elif server_type == "0":
            os.system("clear")
            wireguardeditserver_sec_mnu()
            break
        else:
            print("Invalid choice.")


def wireguardudpedit_iran_serversec():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print("\033[92m(   ) \033[93mWireguard + IPSEC \033[92mIRAN Server Menu\033[0m")
    print(
        '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
    )
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[92mIRAN Server Config [1] \033[0m")
    print("2. \033[92mIRAN Server Config [2]\033[0m")
    print("3. \033[93mIRAN Server Config [3]\033[0m")
    print("4. \033[92mIRAN Server Config [4]\033[0m")
    print("5. \033[92mIRAN Server Config [5]\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    print("0.\033[97mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")
    while True:
        server_type = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if server_type == "1":
            wireguardedit_iranconfig_1sec()
            break
        elif server_type == "2":
            wireguardedit_iranconfig_2sec()
            break
        elif server_type == "3":
            wireguardedit_iranconfig_3sec()
            break
        elif server_type == "4":
            wireguardedit_iranconfig_4sec()
            break
        elif server_type == "5":
            wireguardedit_iranconfig_5sec()
            break
        elif server_type == "0":
            os.system("clear")
            wireguardedit_noconjuction_1iran_5kharejsec()
            break
        else:
            print("Invalid choice.")


def wtb_opposite_ip_wireguardsec(ip):
    if ":" in ip:
        ip_parts = ip.split(":")
        if ip_parts[-1] == "1":
            ip_parts[-1] = "2"
        elif ip_parts[-1] == "2":
            ip_parts[-1] = "1"
        else:
            ip_parts[-1] = "2"
        return ":".join(ip_parts)
    else:
        ip_parts = ip.split(".")
        ip_parts[-1] = "1" if ip_parts[-1] == "2" else "2"
        return ".".join(ip_parts)


def load_wireguardconfigsec(file_path):
    try:
        with open(file_path, "r") as file:
            content = file.read()

        address_match = re.search(r"Address = ([^\s]+)", content)
        listen_port_match = re.search(r"ListenPort = (\d+)", content)
        endpoint_match = re.search(r"Endpoint = ([^\s]+):\d+", content)
        allowed_ips_match = re.search(r"AllowedIPs = ([^\s]+)", content)

        address = address_match.group(1) if address_match else "N/A"
        listen_port = listen_port_match.group(1) if listen_port_match else "N/A"
        endpoint = endpoint_match.group(1) if endpoint_match else "N/A"
        allowed_ips = allowed_ips_match.group(1) if allowed_ips_match else "N/A"

        return address, address.split("/")[0], listen_port, endpoint, allowed_ips
    except FileNotFoundError:
        print("\033[91mWireguard configuration file not found\033[0m")
        return None, None, None, None, None
    except Exception as e:
        print(f"\033[91mAn error occurred: {e}\033[0m")
        return None, None, None, None, None


def save_wireguardconfigsec1(file_path, new_config):
    try:
        with open(file_path, "r") as f:
            config = f.read()

        listen_port_pattern = r"ListenPort\s*=\s*\d+"
        endpoint_pattern = r"Endpoint\s*=\s*([^\s]+:\d+)?"
        address_pattern = r"Address\s*=\s*[^\s]+"
        allowed_ips_pattern = r"AllowedIPs\s*=\s*[^\s]+"

        new_config_content = re.sub(
            listen_port_pattern, f'ListenPort = {new_config["ListenPort"]}', config
        )

        new_config_content = re.sub(
            address_pattern, f'Address = {new_config["Address"]}', new_config_content
        )

        new_config_content = re.sub(
            allowed_ips_pattern,
            f'AllowedIPs = {new_config["AllowedIPs"]}',
            new_config_content,
        )

        existing_endpoint_match = re.search(endpoint_pattern, config)
        if existing_endpoint_match:
            existing_endpoint = existing_endpoint_match.group(1)
            if ":" not in new_config["Endpoint"]:

                new_config["Endpoint"] += f":{existing_endpoint.split(':')[1]}"

        new_config_content = re.sub(
            endpoint_pattern, f'Endpoint = {new_config["Endpoint"]}', new_config_content
        )

        with open(file_path, "w") as f:
            f.write(new_config_content)

        subprocess.run(["systemctl", "daemon-reload"], check=True)

        services_to_restart = [
            "strong-azumi1",
            "wireguardping_1.service",
        ]

        wg_quick_interface = "/etc/wireguard/wireserver1.conf"
        wg_quick_down = subprocess.run(
            ["wg-quick", "down", wg_quick_interface],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
        )

        if wg_quick_down.returncode == 0:
            subprocess.run(["wg-quick", "up", wg_quick_interface], check=True)
            display_checkmark(
                f"\033[92mInterface {wg_quick_interface} brought down and up successfully!\033[0m"
            )
        else:
            print(
                f"\033[93mFailed to bring down interface {wg_quick_interface}.\033[0m"
            )

        for service_name in services_to_restart:
            service_status = subprocess.run(
                ["systemctl", "is-active", service_name],
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
            )

            if service_status.returncode == 0:
                subprocess.run(["systemctl", "restart", service_name], check=True)
                display_checkmark(
                    f"\033[92mService {service_name} restarted successfully!\033[0m"
                )
            else:
                print(
                    f"\033[93mService {service_name} doesn't exist or is inactive.\033[0m"
                )

        display_checkmark(f"\033[92mConfiguration updated successfully!\033[0m")

    except FileNotFoundError:
        print(f"\033[91mfile {file_path} not found.\033[0m")
    except subprocess.CalledProcessError as e:
        print(f"\033[91merror in managing services: {e}\033[0m")
    except Exception as e:
        print(f"\033[91merror in saving the config: {e}\033[0m")


def save_wireguardconfigsec2(file_path, new_config):
    try:
        with open(file_path, "r") as f:
            config = f.read()

        listen_port_pattern = r"ListenPort\s*=\s*\d+"
        endpoint_pattern = r"Endpoint\s*=\s*([^\s]+:\d+)?"
        address_pattern = r"Address\s*=\s*[^\s]+"
        allowed_ips_pattern = r"AllowedIPs\s*=\s*[^\s]+"

        new_config_content = re.sub(
            listen_port_pattern, f'ListenPort = {new_config["ListenPort"]}', config
        )

        new_config_content = re.sub(
            address_pattern, f'Address = {new_config["Address"]}', new_config_content
        )

        new_config_content = re.sub(
            allowed_ips_pattern,
            f'AllowedIPs = {new_config["AllowedIPs"]}',
            new_config_content,
        )

        existing_endpoint_match = re.search(endpoint_pattern, config)
        if existing_endpoint_match:
            existing_endpoint = existing_endpoint_match.group(1)
            if ":" not in new_config["Endpoint"]:

                new_config["Endpoint"] += f":{existing_endpoint.split(':')[1]}"

        new_config_content = re.sub(
            endpoint_pattern, f'Endpoint = {new_config["Endpoint"]}', new_config_content
        )

        with open(file_path, "w") as f:
            f.write(new_config_content)

        subprocess.run(["systemctl", "daemon-reload"], check=True)

        services_to_restart = [
            "strong-azumi1",
            "wireguardping_2.service",
        ]

        wg_quick_interface = "/etc/wireguard/wireserver2.conf"
        wg_quick_down = subprocess.run(
            ["wg-quick", "down", wg_quick_interface],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
        )

        if wg_quick_down.returncode == 0:
            subprocess.run(["wg-quick", "up", wg_quick_interface], check=True)
            display_checkmark(
                f"\033[92mInterface {wg_quick_interface} brought down and up successfully!\033[0m"
            )
        else:
            print(
                f"\033[93mFailed to bring down interface {wg_quick_interface}.\033[0m"
            )

        for service_name in services_to_restart:
            service_status = subprocess.run(
                ["systemctl", "is-active", service_name],
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
            )

            if service_status.returncode == 0:
                subprocess.run(["systemctl", "restart", service_name], check=True)
                display_checkmark(
                    f"\033[92mService {service_name} restarted successfully!\033[0m"
                )
            else:
                print(
                    f"\033[93mService {service_name} doesn't exist or is inactive.\033[0m"
                )

        display_checkmark(f"\033[92mConfiguration updated successfully!\033[0m")

    except FileNotFoundError:
        print(f"\033[91mfile {file_path} not found.\033[0m")
    except subprocess.CalledProcessError as e:
        print(f"\033[91merror in managing services: {e}\033[0m")
    except Exception as e:
        print(f"\033[91merror in saving the config: {e}\033[0m")


def save_wireguardconfigsec3(file_path, new_config):
    try:
        with open(file_path, "r") as f:
            config = f.read()

        listen_port_pattern = r"ListenPort\s*=\s*\d+"
        endpoint_pattern = r"Endpoint\s*=\s*([^\s]+:\d+)?"
        address_pattern = r"Address\s*=\s*[^\s]+"
        allowed_ips_pattern = r"AllowedIPs\s*=\s*[^\s]+"

        new_config_content = re.sub(
            listen_port_pattern, f'ListenPort = {new_config["ListenPort"]}', config
        )

        new_config_content = re.sub(
            address_pattern, f'Address = {new_config["Address"]}', new_config_content
        )

        new_config_content = re.sub(
            allowed_ips_pattern,
            f'AllowedIPs = {new_config["AllowedIPs"]}',
            new_config_content,
        )

        existing_endpoint_match = re.search(endpoint_pattern, config)
        if existing_endpoint_match:
            existing_endpoint = existing_endpoint_match.group(1)
            if ":" not in new_config["Endpoint"]:

                new_config["Endpoint"] += f":{existing_endpoint.split(':')[1]}"

        new_config_content = re.sub(
            endpoint_pattern, f'Endpoint = {new_config["Endpoint"]}', new_config_content
        )

        with open(file_path, "w") as f:
            f.write(new_config_content)

        subprocess.run(["systemctl", "daemon-reload"], check=True)

        services_to_restart = [
            "strong-azumi1",
            "wireguardping_3.service",
        ]

        wg_quick_interface = "/etc/wireguard/wireserver3.conf"
        wg_quick_down = subprocess.run(
            ["wg-quick", "down", wg_quick_interface],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
        )

        if wg_quick_down.returncode == 0:
            subprocess.run(["wg-quick", "up", wg_quick_interface], check=True)
            display_checkmark(
                f"\033[92mInterface {wg_quick_interface} brought down and up successfully!\033[0m"
            )
        else:
            print(
                f"\033[93mFailed to bring down interface {wg_quick_interface}.\033[0m"
            )

        for service_name in services_to_restart:
            service_status = subprocess.run(
                ["systemctl", "is-active", service_name],
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
            )

            if service_status.returncode == 0:
                subprocess.run(["systemctl", "restart", service_name], check=True)
                display_checkmark(
                    f"\033[92mService {service_name} restarted successfully!\033[0m"
                )
            else:
                print(
                    f"\033[93mService {service_name} doesn't exist or is inactive.\033[0m"
                )

        display_checkmark(f"\033[92mConfiguration updated successfully!\033[0m")

    except FileNotFoundError:
        print(f"\033[91mfile {file_path} not found.\033[0m")
    except subprocess.CalledProcessError as e:
        print(f"\033[91merror in managing services: {e}\033[0m")
    except Exception as e:
        print(f"\033[91merror in saving the config: {e}\033[0m")


def save_wireguardconfigsec4(file_path, new_config):
    try:
        with open(file_path, "r") as f:
            config = f.read()

        listen_port_pattern = r"ListenPort\s*=\s*\d+"
        endpoint_pattern = r"Endpoint\s*=\s*([^\s]+:\d+)?"
        address_pattern = r"Address\s*=\s*[^\s]+"
        allowed_ips_pattern = r"AllowedIPs\s*=\s*[^\s]+"

        new_config_content = re.sub(
            listen_port_pattern, f'ListenPort = {new_config["ListenPort"]}', config
        )

        new_config_content = re.sub(
            address_pattern, f'Address = {new_config["Address"]}', new_config_content
        )

        new_config_content = re.sub(
            allowed_ips_pattern,
            f'AllowedIPs = {new_config["AllowedIPs"]}',
            new_config_content,
        )

        existing_endpoint_match = re.search(endpoint_pattern, config)
        if existing_endpoint_match:
            existing_endpoint = existing_endpoint_match.group(1)
            if ":" not in new_config["Endpoint"]:

                new_config["Endpoint"] += f":{existing_endpoint.split(':')[1]}"

        new_config_content = re.sub(
            endpoint_pattern, f'Endpoint = {new_config["Endpoint"]}', new_config_content
        )

        with open(file_path, "w") as f:
            f.write(new_config_content)

        subprocess.run(["systemctl", "daemon-reload"], check=True)

        services_to_restart = [
            "strong-azumi1",
            "wireguardping_4.service",
        ]

        wg_quick_interface = "/etc/wireguard/wireserver4.conf"
        wg_quick_down = subprocess.run(
            ["wg-quick", "down", wg_quick_interface],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
        )

        if wg_quick_down.returncode == 0:
            subprocess.run(["wg-quick", "up", wg_quick_interface], check=True)
            display_checkmark(
                f"\033[92mInterface {wg_quick_interface} brought down and up successfully!\033[0m"
            )
        else:
            print(
                f"\033[93mFailed to bring down interface {wg_quick_interface}.\033[0m"
            )

        for service_name in services_to_restart:
            service_status = subprocess.run(
                ["systemctl", "is-active", service_name],
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
            )

            if service_status.returncode == 0:
                subprocess.run(["systemctl", "restart", service_name], check=True)
                display_checkmark(
                    f"\033[92mService {service_name} restarted successfully!\033[0m"
                )
            else:
                print(
                    f"\033[93mService {service_name} doesn't exist or is inactive.\033[0m"
                )

        display_checkmark(f"\033[92mConfiguration updated successfully!\033[0m")

    except FileNotFoundError:
        print(f"\033[91mfile {file_path} not found.\033[0m")
    except subprocess.CalledProcessError as e:
        print(f"\033[91merror in managing services: {e}\033[0m")
    except Exception as e:
        print(f"\033[91merror in saving the config: {e}\033[0m")


def save_wireguardconfigsec5(file_path, new_config):
    try:
        with open(file_path, "r") as f:
            config = f.read()

        listen_port_pattern = r"ListenPort\s*=\s*\d+"
        endpoint_pattern = r"Endpoint\s*=\s*([^\s]+:\d+)?"
        address_pattern = r"Address\s*=\s*[^\s]+"
        allowed_ips_pattern = r"AllowedIPs\s*=\s*[^\s]+"

        new_config_content = re.sub(
            listen_port_pattern, f'ListenPort = {new_config["ListenPort"]}', config
        )

        new_config_content = re.sub(
            address_pattern, f'Address = {new_config["Address"]}', new_config_content
        )

        new_config_content = re.sub(
            allowed_ips_pattern,
            f'AllowedIPs = {new_config["AllowedIPs"]}',
            new_config_content,
        )

        existing_endpoint_match = re.search(endpoint_pattern, config)
        if existing_endpoint_match:
            existing_endpoint = existing_endpoint_match.group(1)
            if ":" not in new_config["Endpoint"]:

                new_config["Endpoint"] += f":{existing_endpoint.split(':')[1]}"

        new_config_content = re.sub(
            endpoint_pattern, f'Endpoint = {new_config["Endpoint"]}', new_config_content
        )

        with open(file_path, "w") as f:
            f.write(new_config_content)

        subprocess.run(["systemctl", "daemon-reload"], check=True)

        services_to_restart = [
            "strong-azumi1",
            "wireguardping_5.service",
        ]

        wg_quick_interface = "/etc/wireguard/wireserver5.conf"
        wg_quick_down = subprocess.run(
            ["wg-quick", "down", wg_quick_interface],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
        )

        if wg_quick_down.returncode == 0:
            subprocess.run(["wg-quick", "up", wg_quick_interface], check=True)
            display_checkmark(
                f"\033[92mInterface {wg_quick_interface} brought down and up successfully!\033[0m"
            )
        else:
            print(
                f"\033[93mFailed to bring down interface {wg_quick_interface}.\033[0m"
            )

        for service_name in services_to_restart:
            service_status = subprocess.run(
                ["systemctl", "is-active", service_name],
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
            )

            if service_status.returncode == 0:
                subprocess.run(["systemctl", "restart", service_name], check=True)
                display_checkmark(
                    f"\033[92mService {service_name} restarted successfully!\033[0m"
                )
            else:
                print(
                    f"\033[93mService {service_name} doesn't exist or is inactive.\033[0m"
                )

        display_checkmark(f"\033[92mConfiguration updated successfully!\033[0m")

    except FileNotFoundError:
        print(f"\033[91mfile {file_path} not found.\033[0m")
    except subprocess.CalledProcessError as e:
        print(f"\033[91merror in managing services: {e}\033[0m")
    except Exception as e:
        print(f"\033[91merror in saving the config: {e}\033[0m")


def save_wireguardconfigsec_client(file_path, new_config):
    try:
        with open(file_path, "r") as f:
            config = f.read()

        listen_port_pattern = r"ListenPort\s*=\s*\d+"
        endpoint_pattern = r"Endpoint\s*=\s*([^\s]+:\d+)?"
        address_pattern = r"Address\s*=\s*[^\s]+"
        allowed_ips_pattern = r"AllowedIPs\s*=\s*[^\s]+"

        new_config_content = re.sub(
            listen_port_pattern, f'ListenPort = {new_config["ListenPort"]}', config
        )

        new_config_content = re.sub(
            address_pattern, f'Address = {new_config["Address"]}', new_config_content
        )

        new_config_content = re.sub(
            allowed_ips_pattern,
            f'AllowedIPs = {new_config["AllowedIPs"]}',
            new_config_content,
        )

        existing_endpoint_match = re.search(endpoint_pattern, config)
        if existing_endpoint_match:
            existing_endpoint = existing_endpoint_match.group(1)
            if ":" not in new_config["Endpoint"]:

                new_config["Endpoint"] += f":{existing_endpoint.split(':')[1]}"

        new_config_content = re.sub(
            endpoint_pattern, f'Endpoint = {new_config["Endpoint"]}', new_config_content
        )

        with open(file_path, "w") as f:
            f.write(new_config_content)

        subprocess.run(["systemctl", "daemon-reload"], check=True)

        services_to_restart = [
            "strong-azumi1",
            "wireguardping.service",
        ]

        wg_quick_interface = "/etc/wireguard/wireclient.conf"
        wg_quick_down = subprocess.run(
            ["wg-quick", "down", wg_quick_interface],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
        )

        if wg_quick_down.returncode == 0:
            subprocess.run(["wg-quick", "up", wg_quick_interface], check=True)
            display_checkmark(
                f"\033[92mInterface {wg_quick_interface} brought down and up successfully!\033[0m"
            )
        else:
            print(
                f"\033[93mFailed to bring down interface {wg_quick_interface}.\033[0m"
            )

        for service_name in services_to_restart:
            service_status = subprocess.run(
                ["systemctl", "is-active", service_name],
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
            )

            if service_status.returncode == 0:
                subprocess.run(["systemctl", "restart", service_name], check=True)
                display_checkmark(
                    f"\033[92mService {service_name} restarted successfully!\033[0m"
                )
            else:
                print(
                    f"\033[93mService {service_name} doesn't exist or is inactive.\033[0m"
                )

        display_checkmark(f"\033[92mConfiguration updated successfully!\033[0m")

    except FileNotFoundError:
        print(f"\033[91mfile {file_path} not found.\033[0m")
    except subprocess.CalledProcessError as e:
        print(f"\033[91merror in managing services: {e}\033[0m")
    except Exception as e:
        print(f"\033[91merror in saving the config: {e}\033[0m")


def update_ufw_ruleswireguardsec(old_ip, new_ip, old_port=None, new_port=None):
    if old_port:
        delete_ufw_rulessec(old_ip, old_port)
        delete_ufw_rulessec(wtb_opposite_ip_wireguardsec(old_ip), old_port)
    add_ufw_ruleswireguardsec(new_ip, new_port)
    add_ufw_ruleswireguardsec(wtb_opposite_ip_wireguardsec(new_ip), new_port)


def delete_ufw_rulessec(ip, port):
    try:
        subprocess.run(
            ["sudo", "ufw", "delete", "allow", "from", ip, "to", "any", "port", port],
            check=False,
        )
    except subprocess.CalledProcessError as e:
        print(f"\033[91mError deleting UFW rule for {ip} on port {port}: {e}\033[0m")


def add_ufw_ruleswireguardsec(ip, port):
    try:
        subprocess.run(
            ["sudo", "ufw", "allow", "from", ip, "to", "any", "port", port], check=True
        )
    except subprocess.CalledProcessError as e:
        print(f"\033[91mError adding UFW rule for {ip} on port {port}: {e}\033[0m")


def display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips):
    lines = [
        f"\033[97m──────────────────────────────────────\033[0m",
        f"\033[93mTitle:         Wireguard Configuration\033[0m",
        f"\033[97m──────────────────────────────────────\033[0m",
        f"\033[92mAddress:           \033[97m{address_no_subnet}\033[0m",
        f"\033[92mListenPort:        \033[97m{listen_port}\033[0m",
        f"\033[92mEndpoint:          \033[97m{endpoint}\033[0m",
        f"\033[92mAllowedIPs:        \033[97m{allowed_ips}\033[0m",
    ]
    box_width = 50

    print("\033[93m╭" + "─" * (box_width - 2) + "╮\033[0m")

    for line in lines:
        print(f"\033[93m {line:<{box_width - 4}} \033[0m")

    print("\033[93m╰" + "─" * (box_width - 2) + "╯\033[0m")


def update_ping_script_opposite_ip_wireguard1(new_opposite_ip):
    script_path = "/etc/ping_wireguard_1.sh"
    try:
        with open(script_path, "r") as f:
            script_content = f.read()

        updated_script_content = re.sub(
            r'ip_address="[^"]+"', f'ip_address="{new_opposite_ip}"', script_content
        )

        with open(script_path, "w") as f:
            f.write(updated_script_content)

        display_checkmark(
            "\033[92mPing script updated with new opposite IP address!\033[0m"
        )
    except FileNotFoundError:
        print(f"\033[91mPing script {script_path} not found.\033[0m")
    except Exception as e:
        print(f"\033[91mError updating ping script: {e}\033[0m")


def update_ping_script_opposite_ip_wireguard_client(new_opposite_ip):
    script_path = "/etc/ping_wireguard.sh"
    try:
        with open(script_path, "r") as f:
            script_content = f.read()

        updated_script_content = re.sub(
            r'ip_address="[^"]+"', f'ip_address="{new_opposite_ip}"', script_content
        )

        with open(script_path, "w") as f:
            f.write(updated_script_content)

        display_checkmark(
            "\033[92mPing script updated with new opposite IP address!\033[0m"
        )
    except FileNotFoundError:
        print(f"\033[91mPing script {script_path} not found.\033[0m")
    except Exception as e:
        print(f"\033[91mError updating ping script: {e}\033[0m")


def update_ping_script_opposite_ip_wireguard2(new_opposite_ip):
    script_path = "/etc/ping_wireguard_2.sh"
    try:
        with open(script_path, "r") as f:
            script_content = f.read()

        updated_script_content = re.sub(
            r'ip_address="[^"]+"', f'ip_address="{new_opposite_ip}"', script_content
        )

        with open(script_path, "w") as f:
            f.write(updated_script_content)

        display_checkmark(
            "\033[92mPing script updated with new opposite IP address!\033[0m"
        )
    except FileNotFoundError:
        print(f"\033[91mPing script {script_path} not found.\033[0m")
    except Exception as e:
        print(f"\033[91mError updating ping script: {e}\033[0m")


def update_ping_script_opposite_ip_wireguard3(new_opposite_ip):
    script_path = "/etc/ping_wireguard_3.sh"
    try:
        with open(script_path, "r") as f:
            script_content = f.read()

        updated_script_content = re.sub(
            r'ip_address="[^"]+"', f'ip_address="{new_opposite_ip}"', script_content
        )

        with open(script_path, "w") as f:
            f.write(updated_script_content)

        display_checkmark(
            "\033[92mPing script updated with new opposite IP address!\033[0m"
        )
    except FileNotFoundError:
        print(f"\033[91mPing script {script_path} not found.\033[0m")
    except Exception as e:
        print(f"\033[91mError updating ping script: {e}\033[0m")


def update_ping_script_opposite_ip_wireguard4(new_opposite_ip):
    script_path = "/etc/ping_wireguard_4.sh"
    try:
        with open(script_path, "r") as f:
            script_content = f.read()

        updated_script_content = re.sub(
            r'ip_address="[^"]+"', f'ip_address="{new_opposite_ip}"', script_content
        )

        with open(script_path, "w") as f:
            f.write(updated_script_content)

        display_checkmark(
            "\033[92mPing script updated with new opposite IP address!\033[0m"
        )
    except FileNotFoundError:
        print(f"\033[91mPing script {script_path} not found.\033[0m")
    except Exception as e:
        print(f"\033[91mError updating ping script: {e}\033[0m")


def update_ping_script_opposite_ip_wireguard5(new_opposite_ip):
    script_path = "/etc/ping_wireguard_5.sh"
    try:
        with open(script_path, "r") as f:
            script_content = f.read()

        updated_script_content = re.sub(
            r'ip_address="[^"]+"', f'ip_address="{new_opposite_ip}"', script_content
        )

        with open(script_path, "w") as f:
            f.write(updated_script_content)

        display_checkmark(
            "\033[92mPing script updated with new opposite IP address!\033[0m"
        )
    except FileNotFoundError:
        print(f"\033[91mPing script {script_path} not found.\033[0m")
    except Exception as e:
        print(f"\033[91mError updating ping script: {e}\033[0m")


def ipsecsecret_key_wire(name):
    try:
        with open(name, "r") as f:
            content = f.read()
        match = re.search(r'PSK "(\S+)"', content)
        if match:
            return match.group(1)
        else:
            print("\033[91mNo IPsec key found\033[0m")
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mOut of ordinary error: {e}\033[0m")
    return None


def update_ipsecsecret_wire(name, new_secret):
    try:
        with open(name, "r") as f:
            content = f.read()

        new_content = re.sub(r'PSK "\S+"', f'PSK "{new_secret}"', content)

        with open(name, "w") as f:
            f.write(new_content)

        display_checkmark("\033[92mIPsec secret key updated successfully!\033[0m")
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mOut of ordinary error: {e}\033[0m")


def update_ipsec_conf_wireguard_46(name, new_private_ip):
    try:
        with open(name, "r") as f:
            content = f.read()

        if ":" in new_private_ip:
            ip_parts = new_private_ip.split(":")
            ip_parts[-1] = "1" if ip_parts[-1].endswith("2") else "2"
            counterpart_ip = ":".join(ip_parts)
            subnet_suffix = "/64"
        else:
            ip_parts = new_private_ip.split(".")
            ip_parts[-1] = "1" if ip_parts[-1] == "2" else "2"
            counterpart_ip = ".".join(ip_parts)
            subnet_suffix = "/24"

        new_content = re.sub(
            r"leftsubnet=\S+", f"leftsubnet={new_private_ip}{subnet_suffix}", content
        )
        new_content = re.sub(r"leftid=\S+", f"leftid={new_private_ip}", new_content)
        new_content = re.sub(r"right=\S+", f"right={counterpart_ip}", new_content)
        new_content = re.sub(
            r"rightsubnet=\S+",
            f"rightsubnet={counterpart_ip}{subnet_suffix}",
            new_content,
        )

        with open(name, "w") as f:
            f.write(new_content)

        display_checkmark("\033[92mIPsec configuration updated successfully!\033[0m")

    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mOut of ordinary error: {e}\033[0m")


def display_ipsecsecret_wire(secret_key):
    box_width = 50
    print("\033[93m╭" + "─" * (box_width - 2) + "╮\033[0m")
    print(f"\033[93m Title:        \033[93m IPsec Secret Key\033[0m")
    print(f"\033[97m──────────────────────────────────────\033[0m")
    print(f"\033[93m IPsec Key:  \033[97m{secret_key}\033[0m")
    print("\033[93m╰" + "─" * (box_width - 2) + "╯\033[0m")


def update_ipsec_ip_wire(new_vxlan_ip):
    def opposite_ip(ip):
        if ":" in ip:
            parts = ip.split(":")
            parts[-1] = "1" if parts[-1].endswith("2") else "2"
            return ":".join(parts)
        else:
            octets = ip.split(".")
            octets[-1] = "1" if octets[-1] == "2" else "2"
            return ".".join(octets)

    secrets_file = "/etc/ipsec.secrets"
    opposite_ip_addr = opposite_ip(new_vxlan_ip)

    try:
        with open(secrets_file, "r") as file:
            lines = file.readlines()

        new_lines = []
        for line in lines:
            if ": PSK" in line:
                parts = line.split()
                if len(parts) > 2:
                    new_line = (
                        f'{opposite_ip_addr} {new_vxlan_ip} : PSK "{parts[-1][1:-1]}"'
                    )
                    new_lines.append(new_line + "\n")
                else:
                    new_lines.append(line)
            else:
                new_lines.append(line)

        with open(secrets_file, "w") as file:
            file.writelines(new_lines)

        display_checkmark("\033[92mIPsec secrets updated successfully!\033[0m")

    except FileNotFoundError:
        print("\033[91mFile not found\033[0m")
    except Exception as e:
        print(f"\033[91mOut of ordinary error: {e}\033[0m")


def update_ipsec_conf_wireguard_server1(name, new_private_ip):
    try:
        with open(name, "r") as f:
            content = f.readlines()

        start_idx, end_idx = None, None
        for i, line in enumerate(content):
            if line.strip() == "conn wireguard_server1":
                start_idx = i
            elif start_idx is not None and line.strip().startswith("conn "):
                end_idx = i
                break

        if start_idx is None:
            print("\033[91m'conn wireguard_server1' section not found\033[0m")
            return

        if end_idx is None:
            end_idx = len(content)

        section = content[start_idx:end_idx]

        ip_type = (
            "ipv6"
            if isinstance(ipaddress.ip_address(new_private_ip), ipaddress.IPv6Address)
            else "ipv4"
        )

        if ip_type == "ipv6":
            subnet = "/64"
        else:
            subnet = "/32"

        ip_parts = (
            new_private_ip.split(".")
            if ip_type == "ipv4"
            else new_private_ip.split(":")
        )
        if new_private_ip.endswith(".2") or new_private_ip.endswith(":2"):
            ip_parts[-1] = "1"
        else:
            ip_parts[-1] = "2"
        counterpart_ip = ".".join(ip_parts) if ip_type == "ipv4" else ":".join(ip_parts)

        new_section = []
        for line in section:
            line = re.sub(
                r"leftsubnet=\S+", f"leftsubnet={new_private_ip}{subnet}", line
            )
            line = re.sub(r"leftid=\S+", f"leftid={new_private_ip}", line)
            line = re.sub(r"right=\S+", f"right={counterpart_ip}", line)
            line = re.sub(
                r"rightsubnet=\S+", f"rightsubnet={counterpart_ip}{subnet}", line
            )
            new_section.append(line)

        new_content = content[:start_idx] + new_section + content[end_idx:]

        with open(name, "w") as f:
            f.writelines(new_content)

        print(f"\033[92m'conn wireguard_server1' section updated successfully\033[0m")
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def wireguardedit_kharejconfig_1sec():
    config_path = "/etc/wireguard/wireserver1.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfigsec(config_path)
    )

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCould not retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips)

        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[93mWireguard + IPSEC Edit local\033[97m Kharej Server Config\033[92m [1]\033[93m Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("\033[93mThis is Kharej Server - \033[97mConfig [1]\033[0m")
        print("1.\033[92m Change \033[97mPrivate IP\033[92m Address\033[0m")
        print("2.\033[94m Change Tunnel Port\033[0m")
        print("3.\033[93m Change \033[92mIRAN Client [1] \033[96m(Endpoint IP)\033[0m")
        print("4.\033[94m Change IPsec Secret Key\033[0m")
        print("5.\033[92m Save and Exit\033[0m")
        print("0. back to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice: ")

        if choice == "1":
            new_ip = input(
                "\033[93mEnter\033[92m New Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguardsec(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguardsec(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wireguard1(opposite_ip)
                update_ipsec_conf_wireguard_server1("/etc/ipsec1.conf", new_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "2":
            listen_port, endpoint = update_tunnel_port(listen_port, endpoint)
            update_ufw_ruleswireguard(
                address_no_subnet, address_no_subnet, listen_port, listen_port
            )
        elif choice == "3":
            endpoint = update_endpoint_ip1(endpoint)
        elif choice == "4":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secret Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")
        elif choice == "5":
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "Endpoint": endpoint,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfigsec1(config_path, new_config)
            update_ipsec_ip_multi(address_no_subnet)
            return
        elif choice == "0":
            wireguardedit_noconjuction_kharej1_5iransec()
        else:
            print("\033[91mPlease select a valid option.\033[0m")


def update_ipsec_conf_wireguard_server2(name, new_private_ip):
    try:
        with open(name, "r") as f:
            content = f.readlines()

        start_idx, end_idx = None, None
        for i, line in enumerate(content):
            if line.strip() == "conn wireguard_server2":
                start_idx = i
            elif start_idx is not None and line.strip().startswith("conn "):
                end_idx = i
                break

        if start_idx is None:
            print("\033[91m'conn wireguard_server2' section not found\033[0m")
            return

        if end_idx is None:
            end_idx = len(content)

        section = content[start_idx:end_idx]

        ip_type = (
            "ipv6"
            if isinstance(ipaddress.ip_address(new_private_ip), ipaddress.IPv6Address)
            else "ipv4"
        )

        if ip_type == "ipv6":
            subnet = "/64"
        else:
            subnet = "/32"

        ip_parts = (
            new_private_ip.split(".")
            if ip_type == "ipv4"
            else new_private_ip.split(":")
        )
        if new_private_ip.endswith(".2") or new_private_ip.endswith(":2"):
            ip_parts[-1] = "1"
        else:
            ip_parts[-1] = "2"
        counterpart_ip = ".".join(ip_parts) if ip_type == "ipv4" else ":".join(ip_parts)

        new_section = []
        for line in section:
            line = re.sub(
                r"leftsubnet=\S+", f"leftsubnet={new_private_ip}{subnet}", line
            )
            line = re.sub(r"leftid=\S+", f"leftid={new_private_ip}", line)
            line = re.sub(r"right=\S+", f"right={counterpart_ip}", line)
            line = re.sub(
                r"rightsubnet=\S+", f"rightsubnet={counterpart_ip}{subnet}", line
            )
            new_section.append(line)

        new_content = content[:start_idx] + new_section + content[end_idx:]

        with open(name, "w") as f:
            f.writelines(new_content)

        print(f"\033[92m'conn wireguard_server2' section updated successfully\033[0m")
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def wireguardedit_kharejconfig_2sec():
    config_path = "/etc/wireguard/wireserver2.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfigsec(config_path)
    )

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCould not retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips)

        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[93mWireguard + IPSEC Edit local\033[97m Kharej Server Config\033[92m [2]\033[93m Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("\033[93mThis is Kharej Server - \033[97mConfig [2]\033[0m")
        print("1.\033[92m Change \033[97mPrivate IP\033[92m Address\033[0m")
        print("2.\033[94m Change Tunnel Port\033[0m")
        print("3.\033[93m Change \033[92mIRAN Client [2] \033[96m(Endpoint IP)\033[0m")
        print("4.\033[94m Change IPsec Secret Key\033[0m")
        print("5.\033[92m Save and Exit\033[0m")
        print("0. back to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice: ")

        if choice == "1":
            new_ip = input(
                "\033[93mEnter\033[92m New Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguardsec(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguardsec(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wireguard2(opposite_ip)
                update_ipsec_conf_wireguard_server2("/etc/ipsec1.conf", new_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "2":
            listen_port, endpoint = update_tunnel_port(listen_port, endpoint)
            update_ufw_ruleswireguard(
                address_no_subnet, address_no_subnet, listen_port, listen_port
            )
        elif choice == "3":
            endpoint = update_endpoint_ip2(endpoint)
        elif choice == "4":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secret Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")
        elif choice == "5":
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "Endpoint": endpoint,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfigsec2(config_path, new_config)
            update_ipsec_ip_multi2(new_ip)
            return
        elif choice == "0":
            wireguardedit_noconjuction_kharej1_5iransec()
        else:
            print("\033[91mPlease select a valid option.\033[0m")


def update_ipsec_conf_wireguard_server3(name, new_private_ip):
    try:
        with open(name, "r") as f:
            content = f.readlines()

        start_idx, end_idx = None, None
        for i, line in enumerate(content):
            if line.strip() == "conn wireguard_server3":
                start_idx = i
            elif start_idx is not None and line.strip().startswith("conn "):
                end_idx = i
                break

        if start_idx is None:
            print("\033[91m'conn wireguard_server3' section not found\033[0m")
            return

        if end_idx is None:
            end_idx = len(content)

        section = content[start_idx:end_idx]

        ip_type = (
            "ipv6"
            if isinstance(ipaddress.ip_address(new_private_ip), ipaddress.IPv6Address)
            else "ipv4"
        )

        if ip_type == "ipv6":
            subnet = "/64"
        else:
            subnet = "/32"

        ip_parts = (
            new_private_ip.split(".")
            if ip_type == "ipv4"
            else new_private_ip.split(":")
        )
        if new_private_ip.endswith(".2") or new_private_ip.endswith(":2"):
            ip_parts[-1] = "1"
        else:
            ip_parts[-1] = "2"
        counterpart_ip = ".".join(ip_parts) if ip_type == "ipv4" else ":".join(ip_parts)

        new_section = []
        for line in section:
            line = re.sub(
                r"leftsubnet=\S+", f"leftsubnet={new_private_ip}{subnet}", line
            )
            line = re.sub(r"leftid=\S+", f"leftid={new_private_ip}", line)
            line = re.sub(r"right=\S+", f"right={counterpart_ip}", line)
            line = re.sub(
                r"rightsubnet=\S+", f"rightsubnet={counterpart_ip}{subnet}", line
            )
            new_section.append(line)

        new_content = content[:start_idx] + new_section + content[end_idx:]

        with open(name, "w") as f:
            f.writelines(new_content)

        print(f"\033[92m'conn wireguard_server3' section updated successfully\033[0m")
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def wireguardedit_kharejconfig_3sec():
    config_path = "/etc/wireguard/wireserver3.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfigsec(config_path)
    )

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCould not retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips)

        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[93mWireguard + IPSEC Edit local\033[97m Kharej Server Config\033[92m [3]\033[93m Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("\033[93mThis is Kharej Server - \033[97mConfig [3]\033[0m")
        print("1.\033[92m Change \033[97mPrivate IP\033[92m Address\033[0m")
        print("2.\033[94m Change Tunnel Port\033[0m")
        print("3.\033[93m Change IRAN Client [3] \033[96m(Endpoint IP)\033[0m")
        print("4.\033[94m Change IPsec Secret Key\033[0m")
        print("5.\033[92m Save and Exit\033[0m")
        print("0. back to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice: ")

        if choice == "1":
            new_ip = input(
                "\033[93mEnter\033[92m New Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguardsec(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguardsec(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wireguard3(opposite_ip)
                update_ipsec_conf_wireguard_server3("/etc/ipsec1.conf", new_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "2":
            listen_port, endpoint = update_tunnel_port(listen_port, endpoint)
            update_ufw_ruleswireguard(
                address_no_subnet, address_no_subnet, listen_port, listen_port
            )
        elif choice == "3":
            endpoint = update_endpoint_ip3(endpoint)
        elif choice == "4":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secret Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")
        elif choice == "5":
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "Endpoint": endpoint,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfigsec3(config_path, new_config)
            update_ipsec_ip_multi3(new_ip)
            return
        elif choice == "0":
            wireguardedit_noconjuction_kharej1_5iransec()
        else:
            print("\033[91mPlease select a valid option.\033[0m")


def update_ipsec_conf_wireguard_server4(name, new_private_ip):
    try:
        with open(name, "r") as f:
            content = f.readlines()

        start_idx, end_idx = None, None
        for i, line in enumerate(content):
            if line.strip() == "conn wireguard_server4":
                start_idx = i
            elif start_idx is not None and line.strip().startswith("conn "):
                end_idx = i
                break

        if start_idx is None:
            print("\033[91m'conn wireguard_server4' section not found\033[0m")
            return

        if end_idx is None:
            end_idx = len(content)

        section = content[start_idx:end_idx]

        ip_type = (
            "ipv6"
            if isinstance(ipaddress.ip_address(new_private_ip), ipaddress.IPv6Address)
            else "ipv4"
        )

        if ip_type == "ipv6":
            subnet = "/64"
        else:
            subnet = "/32"

        ip_parts = (
            new_private_ip.split(".")
            if ip_type == "ipv4"
            else new_private_ip.split(":")
        )
        if new_private_ip.endswith(".2") or new_private_ip.endswith(":2"):
            ip_parts[-1] = "1"
        else:
            ip_parts[-1] = "2"
        counterpart_ip = ".".join(ip_parts) if ip_type == "ipv4" else ":".join(ip_parts)

        new_section = []
        for line in section:
            line = re.sub(
                r"leftsubnet=\S+", f"leftsubnet={new_private_ip}{subnet}", line
            )
            line = re.sub(r"leftid=\S+", f"leftid={new_private_ip}", line)
            line = re.sub(r"right=\S+", f"right={counterpart_ip}", line)
            line = re.sub(
                r"rightsubnet=\S+", f"rightsubnet={counterpart_ip}{subnet}", line
            )
            new_section.append(line)

        new_content = content[:start_idx] + new_section + content[end_idx:]

        with open(name, "w") as f:
            f.writelines(new_content)

        print(f"\033[92m'conn wireguard_server4' section updated successfully\033[0m")
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def wireguardedit_kharejconfig_4sec():
    config_path = "/etc/wireguard/wireserver4.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfigsec(config_path)
    )

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCould not retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips)

        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[93mWireguard + IPSEC Edit local\033[97m Kharej Server Config\033[92m [4]\033[93m Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("\033[93mThis is Kharej Server - \033[97mConfig [4]\033[0m")
        print("1.\033[92m Change \033[97mPrivate IP\033[92m Address\033[0m")
        print("2.\033[94m Change Tunnel Port\033[0m")
        print("3.\033[93m Change IRAN Client [4] \033[96m(Endpoint IP)\033[0m")
        print("4.\033[94m Change IPsec Secret Key\033[0m")
        print("5.\033[92m Save and Exit\033[0m")
        print("0. back to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice: ")

        if choice == "1":
            new_ip = input(
                "\033[93mEnter\033[92m New Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguardsec(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguardsec(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wireguard4(opposite_ip)
                update_ipsec_conf_wireguard_server4("/etc/ipsec1.conf", new_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "2":
            listen_port, endpoint = update_tunnel_port(listen_port, endpoint)
            update_ufw_ruleswireguard(
                address_no_subnet, address_no_subnet, listen_port, listen_port
            )
        elif choice == "3":
            endpoint = update_endpoint_ip4(endpoint)
        elif choice == "4":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secret Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")
        elif choice == "5":
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "Endpoint": endpoint,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfigsec4(config_path, new_config)
            update_ipsec_ip_multi4(new_ip)
            return
        elif choice == "0":
            wireguardedit_noconjuction_kharej1_5iransec()
        else:
            print("\033[91mPlease select a valid option.\033[0m")


def update_ipsec_conf_wireguard_server5(name, new_private_ip):
    try:
        with open(name, "r") as f:
            content = f.readlines()

        start_idx, end_idx = None, None
        for i, line in enumerate(content):
            if line.strip() == "conn wireguard_server5":
                start_idx = i
            elif start_idx is not None and line.strip().startswith("conn "):
                end_idx = i
                break

        if start_idx is None:
            print("\033[91m'conn wireguard_server5' section not found\033[0m")
            return

        if end_idx is None:
            end_idx = len(content)

        section = content[start_idx:end_idx]

        ip_type = (
            "ipv6"
            if isinstance(ipaddress.ip_address(new_private_ip), ipaddress.IPv6Address)
            else "ipv4"
        )

        if ip_type == "ipv6":
            subnet = "/64"
        else:
            subnet = "/32"

        ip_parts = (
            new_private_ip.split(".")
            if ip_type == "ipv4"
            else new_private_ip.split(":")
        )
        if new_private_ip.endswith(".2") or new_private_ip.endswith(":2"):
            ip_parts[-1] = "1"
        else:
            ip_parts[-1] = "2"
        counterpart_ip = ".".join(ip_parts) if ip_type == "ipv4" else ":".join(ip_parts)

        new_section = []
        for line in section:
            line = re.sub(
                r"leftsubnet=\S+", f"leftsubnet={new_private_ip}{subnet}", line
            )
            line = re.sub(r"leftid=\S+", f"leftid={new_private_ip}", line)
            line = re.sub(r"right=\S+", f"right={counterpart_ip}", line)
            line = re.sub(
                r"rightsubnet=\S+", f"rightsubnet={counterpart_ip}{subnet}", line
            )
            new_section.append(line)

        new_content = content[:start_idx] + new_section + content[end_idx:]

        with open(name, "w") as f:
            f.writelines(new_content)

        print(f"\033[92m'conn wireguard_server5' section updated successfully\033[0m")
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def wireguardedit_kharejconfig_5sec():
    config_path = "/etc/wireguard/wireserver5.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfigsec(config_path)
    )

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCould not retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips)

        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[93mWireguard + IPSEC Edit local\033[97m Kharej Server Config\033[92m [5]\033[93m Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("\033[93mThis is Kharej Server - \033[97mConfig [5]\033[0m")
        print("1.\033[92m Change \033[97mPrivate IP\033[92m Address\033[0m")
        print("2.\033[94m Change Tunnel Port\033[0m")
        print("3.\033[93m Change IRAN Client [5] \033[96m(Endpoint IP)\033[0m")
        print("4.\033[94m Change IPsec Secret Key\033[0m")
        print("5.\033[92m Save and Exit\033[0m")
        print("0. back to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice: ")

        if choice == "1":
            new_ip = input(
                "\033[93mEnter\033[92m New Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguardsec(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguardsec(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wireguard5(opposite_ip)
                update_ipsec_conf_wireguard_server5("/etc/ipsec1.conf", new_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "2":
            listen_port, endpoint = update_tunnel_port(listen_port, endpoint)
            update_ufw_ruleswireguard(
                address_no_subnet, address_no_subnet, listen_port, listen_port
            )
        elif choice == "3":
            endpoint = update_endpoint_ip5(endpoint)
        elif choice == "4":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secret Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")
        elif choice == "5":
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "Endpoint": endpoint,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfigsec5(config_path, new_config)
            update_ipsec_ip_multi5(new_ip)
            return
        elif choice == "0":
            wireguardedit_noconjuction_kharej1_5iransec()
        else:
            print("\033[91mPlease select a valid option.\033[0m")


def save_wireguardconfigsec_client(file_path, new_config):
    try:
        with open(file_path, "r") as f:
            config = f.read()

        listen_port_pattern = r"ListenPort\s*=\s*\d+"
        endpoint_pattern = r"Endpoint\s*=\s*([^\s]+):\d+"
        address_pattern = r"Address\s*=\s*[^\s]+"
        allowed_ips_pattern = r"AllowedIPs\s*=\s*[^\s]+"

        new_config_content = re.sub(
            listen_port_pattern, f'ListenPort = {new_config["ListenPort"]}', config
        )
        new_config_content = re.sub(
            address_pattern, f'Address = {new_config["Address"]}', new_config_content
        )
        new_config_content = re.sub(
            allowed_ips_pattern,
            f'AllowedIPs = {new_config["AllowedIPs"]}',
            new_config_content,
        )

        def replace_endpoint_port(match):
            endpoint_ip = match.group(1)
            return f'Endpoint = {endpoint_ip}:{new_config["ListenPort"]}'

        new_config_content = re.sub(
            endpoint_pattern, replace_endpoint_port, new_config_content
        )

        with open(file_path, "w") as f:
            f.write(new_config_content)

        subprocess.run(["systemctl", "daemon-reload"], check=True)

        services_to_restart = [
            "strong-azumi1",
            "wireguardping.service",
        ]

        wg_quick_interface = "/etc/wireguard/wireclient.conf"
        wg_quick_down = subprocess.run(
            ["wg-quick", "down", wg_quick_interface],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
        )

        if wg_quick_down.returncode == 0:
            subprocess.run(["wg-quick", "up", wg_quick_interface], check=True)
            display_checkmark(
                f"\033[92mInterface {wg_quick_interface} brought down and up successfully!\033[0m"
            )
        else:
            print(
                f"\033[93mFailed to bring down interface {wg_quick_interface}.\033[0m"
            )

        for service_name in services_to_restart:
            service_status = subprocess.run(
                ["systemctl", "is-active", service_name],
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
            )

            if service_status.returncode == 0:
                subprocess.run(["systemctl", "restart", service_name], check=True)
                display_checkmark(
                    f"\033[92mService {service_name} restarted successfully!\033[0m"
                )
            else:
                print(
                    f"\033[93mService {service_name} doesn't exist or is inactive.\033[0m"
                )

        display_checkmark(f"\033[92mConfiguration updated successfully!\033[0m")

    except FileNotFoundError:
        print(f"\033[91mfile {file_path} not found.\033[0m")
    except subprocess.CalledProcessError as e:
        print(f"\033[91merror in managing services: {e}\033[0m")
    except Exception as e:
        print(f"\033[91merror in saving the config: {e}\033[0m")


def update_ipsec_conf_wireguard_46(name, new_private_ip):
    try:
        with open(name, "r") as f:
            content = f.read()

        ip_obj = ipaddress.ip_address(new_private_ip)
        if isinstance(ip_obj, ipaddress.IPv6Address):
            ip_parts = new_private_ip.split(":")
            subnet_suffix = "/64"
        else:
            ip_parts = new_private_ip.split(".")
            subnet_suffix = "/32"

        ip_parts[-1] = "1" if ip_parts[-1].endswith("2") else "2"
        counterpart_ip = (
            ":".join(ip_parts)
            if isinstance(ip_obj, ipaddress.IPv6Address)
            else ".".join(ip_parts)
        )

        new_content = re.sub(
            r"leftsubnet=\S+", f"leftsubnet={new_private_ip}{subnet_suffix}", content
        )
        new_content = re.sub(r"leftid=\S+", f"leftid={new_private_ip}", new_content)
        new_content = re.sub(r"right=\S+", f"right={counterpart_ip}", new_content)
        new_content = re.sub(
            r"rightsubnet=\S+",
            f"rightsubnet={counterpart_ip}{subnet_suffix}",
            new_content,
        )

        with open(name, "w") as f:
            f.write(new_content)

        print("\033[92mIPsec configuration updated successfully!\033[0m")

    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mOut of ordinary error: {e}\033[0m")


def wireguardudp_iran_client1sec():
    config_path = "/etc/wireguard/wireclient.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfigsec(config_path)
    )

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCould not retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips)

        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[93mWireguard + IPSEC Edit local\033[97m IRAN Client\033[92m [1]\033[93m Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("\033[93mThis is IRAN Client - \033[97m[1]\033[0m")
        print("1.\033[92m Change \033[97mPrivate IP\033[92m Address\033[0m")
        print("2.\033[94m Change Tunnel Port\033[0m")
        print("3.\033[93m Change \033[92mKharej Server IP\033[96m (Endpoint IP)\033[0m")
        print("4.\033[94m Change IPsec Secret Key\033[0m")
        print("5.\033[92m Save and Exit\033[0m")
        print("0. back to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice: ")

        if choice == "1":
            new_ip = input(
                "\033[93mEnter\033[92m New Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguardsec(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguardsec(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wireguard_client(opposite_ip)
                update_ipsec_conf_wireguard_46("/etc/ipsec1.conf", new_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "2":
            listen_port, endpoint = update_tunnel_port(listen_port, endpoint)
            update_ufw_ruleswireguard(
                address_no_subnet, address_no_subnet, listen_port, listen_port
            )
        elif choice == "3":
            endpoint = update_endpoint_ip_server(endpoint)
        elif choice == "4":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secret Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")
        elif choice == "5":
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "Endpoint": endpoint,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfigsec_client(config_path, new_config)
            update_ipsec_ip(new_ip)
            return
        elif choice == "0":
            wireguardedit_noconjuction_kharej1_5iran()
        else:
            print("\033[91mPlease select a valid option.\033[0m")


def wireguardudp_iran_client2sec():
    config_path = "/etc/wireguard/wireclient.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfigsec(config_path)
    )

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCould not retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips)

        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[93mWireguard + IPSEC Edit local\033[97m IRAN Client\033[92m [2]\033[93m Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("\033[93mThis is IRAN Client - \033[97m[2]\033[0m")
        print("1.\033[92m Change \033[97mPrivate IP\033[92m Address\033[0m")
        print("2.\033[94m Change Tunnel Port\033[0m")
        print("3.\033[93m Change \033[92mKharej Server IP\033[96m (Endpoint IP)\033[0m")
        print("4.\033[94m Change IPsec Secret Key\033[0m")
        print("5.\033[92m Save and Exit\033[0m")
        print("0. back to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice: ")

        if choice == "1":
            new_ip = input(
                "\033[93mEnter\033[92m New Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguardsec(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguardsec(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wireguard_client(opposite_ip)
                update_ipsec_conf_wireguard_46("/etc/ipsec1.conf", new_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "2":
            listen_port, endpoint = update_tunnel_port(listen_port, endpoint)
            update_ufw_ruleswireguard(
                address_no_subnet, address_no_subnet, listen_port, listen_port
            )
        elif choice == "3":
            endpoint = update_endpoint_ip_server(endpoint)
        elif choice == "4":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secret Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")
        elif choice == "5":
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "Endpoint": endpoint,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfigsec_client(config_path, new_config)
            update_ipsec_ip(new_ip)
            return
        elif choice == "0":
            wireguardedit_noconjuction_kharej1_5iran()
        else:
            print("\033[91mPlease select a valid option.\033[0m")


def wireguardudp_iran_client3sec():
    config_path = "/etc/wireguard/wireclient.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfigsec(config_path)
    )

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCould not retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips)

        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[93mWireguard + IPSEC Edit local\033[97m IRAN Client\033[92m [3]\033[93m Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("\033[93mThis is IRAN Client - \033[97m[3]\033[0m")
        print("1.\033[92m Change \033[97mPrivate IP\033[92m Address\033[0m")
        print("2.\033[94m Change Tunnel Port\033[0m")
        print("3.\033[93m Change \033[92mKharej Server IP\033[96m (Endpoint IP)\033[0m")
        print("4.\033[94m Change IPsec Secret Key\033[0m")
        print("5.\033[92m Save and Exit\033[0m")
        print("0. back to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice: ")

        if choice == "1":
            new_ip = input(
                "\033[93mEnter\033[92m New Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguardsec(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguardsec(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wireguard_client(opposite_ip)
                update_ipsec_conf_wireguard_46("/etc/ipsec1.conf", new_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "2":
            listen_port, endpoint = update_tunnel_port(listen_port, endpoint)
            update_ufw_ruleswireguard(
                address_no_subnet, address_no_subnet, listen_port, listen_port
            )
        elif choice == "3":
            endpoint = update_endpoint_ip_server(endpoint)
        elif choice == "4":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secret Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")
        elif choice == "5":
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "Endpoint": endpoint,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfigsec_client(config_path, new_config)
            update_ipsec_ip(new_ip)
            return
        elif choice == "0":
            wireguardedit_noconjuction_kharej1_5iran()
        else:
            print("\033[91mPlease select a valid option.\033[0m")


def wireguardudp_iran_client4sec():
    config_path = "/etc/wireguard/wireclient.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfigsec(config_path)
    )

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCould not retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips)

        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[93mWireguard + IPSEC Edit local\033[97m IRAN Client\033[92m [4]\033[93m Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("\033[93mThis is IRAN Client - \033[97m[4]\033[0m")
        print("1.\033[92m Change \033[97mPrivate IP\033[92m Address\033[0m")
        print("2.\033[94m Change Tunnel Port\033[0m")
        print("3.\033[93m Change \033[92mKharej Server IP\033[96m (Endpoint IP)\033[0m")
        print("4.\033[94m Change IPsec Secret Key\033[0m")
        print("5.\033[92m Save and Exit\033[0m")
        print("0. back to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice: ")

        if choice == "1":
            new_ip = input(
                "\033[93mEnter\033[92m New Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguardsec(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguardsec(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wireguard_client(opposite_ip)
                update_ipsec_conf_wireguard_46("/etc/ipsec1.conf", new_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "2":
            listen_port, endpoint = update_tunnel_port(listen_port, endpoint)
            update_ufw_ruleswireguard(
                address_no_subnet, address_no_subnet, listen_port, listen_port
            )
        elif choice == "3":
            endpoint = update_endpoint_ip_server(endpoint)
        elif choice == "4":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secret Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")
        elif choice == "5":
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "Endpoint": endpoint,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfigsec_client(config_path, new_config)
            update_ipsec_ip(new_ip)
            return
        elif choice == "0":
            wireguardedit_noconjuction_kharej1_5iran()
        else:
            print("\033[91mPlease select a valid option.\033[0m")


def wireguardudp_iran_client5sec():
    config_path = "/etc/wireguard/wireclient.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfigsec(config_path)
    )

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCould not retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips)

        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[93mWireguard + IPSEC Edit local\033[97m IRAN Client\033[92m [5]\033[93m Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("\033[93mThis is IRAN Client - \033[97m[5]\033[0m")
        print("1.\033[92m Change \033[97mPrivate IP\033[92m Address\033[0m")
        print("2.\033[94m Change Tunnel Port\033[0m")
        print("3.\033[93m Change \033[92mKharej Server IP\033[96m (Endpoint IP)\033[0m")
        print("4.\033[94m Change IPsec Secret Key\033[0m")
        print("5.\033[92m Save and Exit\033[0m")
        print("0. back to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice: ")

        if choice == "1":
            new_ip = input(
                "\033[93mEnter\033[92m New Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguardsec(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguardsec(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wireguard_client(opposite_ip)
                update_ipsec_conf_wireguard_46("/etc/ipsec1.conf", new_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "2":
            listen_port, endpoint = update_tunnel_port(listen_port, endpoint)
            update_ufw_ruleswireguard(
                address_no_subnet, address_no_subnet, listen_port, listen_port
            )
        elif choice == "3":
            endpoint = update_endpoint_ip_server(endpoint)
        elif choice == "4":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secret Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")
        elif choice == "5":
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "Endpoint": endpoint,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfigsec_client(config_path, new_config)
            update_ipsec_ip(new_ip)
            return
        elif choice == "0":
            wireguardedit_noconjuction_kharej1_5iran()
        else:
            print("\033[91mPlease select a valid option.\033[0m")


def wireguardedit_iranconfig_1sec():
    config_path = "/etc/wireguard/wireserver1.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfigsec(config_path)
    )

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCould not retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips)

        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[93mWireguard + IPSEC Edit local\033[97m IRAN Server Config\033[92m [1]\033[93m Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("\033[93mThis is IRAN Server - \033[97mConfig [1]\033[0m")
        print("1.\033[92m Change \033[97mPrivate IP\033[92m Address\033[0m")
        print("2.\033[94m Change Tunnel Port\033[0m")
        print(
            "3.\033[93m Change \033[92mKharej Client [1] \033[96m(Endpoint IP)\033[0m"
        )
        print("4.\033[94m Change IPsec Secret Key\033[0m")
        print("5.\033[92m Save and Exit\033[0m")
        print("0. back to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice: ")

        if choice == "1":
            new_ip = input(
                "\033[93mEnter\033[92m New Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguardsec(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguardsec(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wireguard1(opposite_ip)
                update_ipsec_conf_wireguard_server1("/etc/ipsec1.conf", new_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "2":
            listen_port, endpoint = update_tunnel_port(listen_port, endpoint)
            update_ufw_ruleswireguard(
                address_no_subnet, address_no_subnet, listen_port, listen_port
            )
        elif choice == "3":
            endpoint = update_endpoint_ir_ip1(endpoint)
        elif choice == "4":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secret Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")
        elif choice == "5":
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "Endpoint": endpoint,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfigsec1(config_path, new_config)
            update_ipsec_ip_multi(address_no_subnet)
            return
        elif choice == "0":
            wireguardedit_noconjuction_1iran_5kharejsec()
        else:
            print("\033[91mPlease select a valid option.\033[0m")


def wireguardedit_iranconfig_2sec():
    config_path = "/etc/wireguard/wireserver2.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfigsec(config_path)
    )

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCould not retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips)

        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[93mWireguard + IPSEC Edit local\033[97m IRAN Server Config\033[92m [2]\033[93m Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("\033[93mThis is IRAN Server - \033[97mConfig [2]\033[0m")
        print("1.\033[92m Change \033[97mPrivate IP\033[92m Address\033[0m")
        print("2.\033[94m Change Tunnel Port\033[0m")
        print(
            "3.\033[93m Change \033[92mKharej Client [2] \033[96m(Endpoint IP)\033[0m"
        )
        print("4.\033[94m Change IPsec Secret Key\033[0m")
        print("5.\033[92m Save and Exit\033[0m")
        print("0. back to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice: ")

        if choice == "1":
            new_ip = input(
                "\033[93mEnter\033[92m New Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguardsec(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguardsec(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wireguard2(opposite_ip)
                update_ipsec_conf_wireguard_server2("/etc/ipsec1.conf", new_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "2":
            listen_port, endpoint = update_tunnel_port(listen_port, endpoint)
            update_ufw_ruleswireguard(
                address_no_subnet, address_no_subnet, listen_port, listen_port
            )
        elif choice == "3":
            endpoint = update_endpoint_ir_ip2(endpoint)
        elif choice == "4":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secret Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")
        elif choice == "5":
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "Endpoint": endpoint,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfigsec2(config_path, new_config)
            update_ipsec_ip_multi2(new_ip)
            return
        elif choice == "0":
            wireguardedit_noconjuction_1iran_5kharejsec()
        else:
            print("\033[91mPlease select a valid option.\033[0m")


def wireguardedit_iranconfig_3sec():
    config_path = "/etc/wireguard/wireserver3.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfigsec(config_path)
    )

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCould not retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips)

        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[93mWireguard + IPSEC Edit local\033[97m IRAN Server Config\033[92m [3]\033[93m Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("\033[93mThis is IRAN Server - \033[97mConfig [3]\033[0m")
        print("1.\033[92m Change \033[97mPrivate IP\033[92m Address\033[0m")
        print("2.\033[94m Change Tunnel Port\033[0m")
        print(
            "3.\033[93m Change \033[92mKharej Client [3] \033[96m(Endpoint IP)\033[0m"
        )
        print("4.\033[94m Change IPsec Secret Key\033[0m")
        print("5.\033[92m Save and Exit\033[0m")
        print("0. back to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice: ")

        if choice == "1":
            new_ip = input(
                "\033[93mEnter\033[92m New Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguardsec(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguardsec(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wireguard3(opposite_ip)
                update_ipsec_conf_wireguard_server3("/etc/ipsec1.conf", new_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "2":
            listen_port, endpoint = update_tunnel_port(listen_port, endpoint)
            update_ufw_ruleswireguard(
                address_no_subnet, address_no_subnet, listen_port, listen_port
            )
        elif choice == "3":
            endpoint = update_endpoint_ir_ip3(endpoint)
        elif choice == "4":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secret Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")
        elif choice == "5":
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "Endpoint": endpoint,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfigsec3(config_path, new_config)
            update_ipsec_ip_multi3(new_ip)
            return
        elif choice == "0":
            wireguardedit_noconjuction_1iran_5kharejsec()
        else:
            print("\033[91mPlease select a valid option.\033[0m")


def wireguardedit_iranconfig_4sec():
    config_path = "/etc/wireguard/wireserver4.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfigsec(config_path)
    )

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCould not retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips)

        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[93mWireguard + IPSEC Edit local\033[97m IRAN Server Config\033[92m [4]\033[93m Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("\033[93mThis is IRAN Server - \033[97mConfig [4]\033[0m")
        print("1.\033[92m Change \033[97mPrivate IP\033[92m Address\033[0m")
        print("2.\033[94m Change Tunnel Port\033[0m")
        print(
            "3.\033[93m Change \033[92mKharej Client [4] \033[96m(Endpoint IP)\033[0m"
        )
        print("4.\033[94m Change IPsec Secret Key\033[0m")
        print("5.\033[92m Save and Exit\033[0m")
        print("0. back to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice: ")

        if choice == "1":
            new_ip = input(
                "\033[93mEnter\033[92m New Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguardsec(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguardsec(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wireguard4(opposite_ip)
                update_ipsec_conf_wireguard_server4("/etc/ipsec1.conf", new_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "2":
            listen_port, endpoint = update_tunnel_port(listen_port, endpoint)
            update_ufw_ruleswireguard(
                address_no_subnet, address_no_subnet, listen_port, listen_port
            )
        elif choice == "3":
            endpoint = update_endpoint_ir_ip4(endpoint)
        elif choice == "4":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secret Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")
        elif choice == "5":
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "Endpoint": endpoint,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfigsec4(config_path, new_config)
            update_ipsec_ip_multi4(new_ip)
            return
        elif choice == "0":
            wireguardedit_noconjuction_1iran_5kharejsec()
        else:
            print("\033[91mPlease select a valid option.\033[0m")


def wireguardedit_iranconfig_5sec():
    config_path = "/etc/wireguard/wireserver5.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfigsec(config_path)
    )

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCould not retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips)

        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[93mWireguard + IPSEC Edit local\033[97m IRAN Server Config\033[92m [5]\033[93m Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("\033[93mThis is IRAN Server - \033[97mConfig [5]\033[0m")
        print("1.\033[92m Change \033[97mPrivate IP\033[92m Address\033[0m")
        print("2.\033[94m Change Tunnel Port\033[0m")
        print(
            "3.\033[93m Change \033[92mKharej Client [5] \033[96m(Endpoint IP)\033[0m"
        )
        print("4.\033[94m Change IPsec Secret Key\033[0m")
        print("5.\033[92m Save and Exit\033[0m")
        print("0. back to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice: ")

        if choice == "1":
            new_ip = input(
                "\033[93mEnter\033[92m New Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguardsec(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguardsec(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wireguard5(opposite_ip)
                update_ipsec_conf_wireguard_server5("/etc/ipsec1.conf", new_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "2":
            listen_port, endpoint = update_tunnel_port(listen_port, endpoint)
            update_ufw_ruleswireguard(
                address_no_subnet, address_no_subnet, listen_port, listen_port
            )
        elif choice == "3":
            endpoint = update_endpoint_ir_ip5(endpoint)
        elif choice == "4":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secret Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")
        elif choice == "5":
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "Endpoint": endpoint,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfigsec5(config_path, new_config)
            update_ipsec_ip_multi5(new_ip)
            return
        elif choice == "0":
            wireguardedit_noconjuction_1iran_5kharejsec()
        else:
            print("\033[91mPlease select a valid option.\033[0m")


def wireguardudp_kharej_client1sec():
    config_path = "/etc/wireguard/wireclient.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfigsec(config_path)
    )

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCould not retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips)

        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[93mWireguard + IPSEC Edit local\033[97m Kharej Client\033[92m [1]\033[93m Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("\033[93mThis is Kharej Client - \033[97m[1]\033[0m")
        print("1.\033[92m Change \033[97mPrivate IP\033[92m Address\033[0m")
        print("2.\033[94m Change Tunnel Port\033[0m")
        print("3.\033[93m Change \033[92mIRAN Server IP \033[96m(Endpoint IP)\033[0m")
        print("4.\033[94m Change IPsec Secret Key\033[0m")
        print("5.\033[92m Save and Exit\033[0m")
        print("0. back to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice: ")

        if choice == "1":
            new_ip = input(
                "\033[93mEnter\033[92m New Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguardsec(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguardsec(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wireguard_client(opposite_ip)
                update_ipsec_conf_wireguard_46("/etc/ipsec1.conf", new_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "2":
            listen_port, endpoint = update_tunnel_port(listen_port, endpoint)
            update_ufw_ruleswireguard(
                address_no_subnet, address_no_subnet, listen_port, listen_port
            )
        elif choice == "3":
            endpoint = update_endpoint_ir_server(endpoint)
        elif choice == "4":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secret Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")
        elif choice == "5":
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "Endpoint": endpoint,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfigsec_client(config_path, new_config)
            update_ipsec_ip(new_ip)
            return
        elif choice == "0":
            wireguardedit_noconjuction_1iran_5kharej()
        else:
            print("\033[91mPlease select a valid option.\033[0m")


def wireguardudp_kharej_client2sec():
    config_path = "/etc/wireguard/wireclient.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfigsec(config_path)
    )

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCould not retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips)

        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[93mWireguard + IPSEC Edit local\033[97m Kharej Client\033[92m [2]\033[93m Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("\033[93mThis is Kharej Client - \033[97m[2]\033[0m")
        print("1.\033[92m Change \033[97mPrivate IP\033[92m Address\033[0m")
        print("2.\033[94m Change Tunnel Port\033[0m")
        print("3.\033[93m Change \033[92mIRAN Server IP \033[96m(Endpoint IP)\033[0m")
        print("4.\033[94m Change IPsec Secret Key\033[0m")
        print("5.\033[92m Save and Exit\033[0m")
        print("0. back to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice: ")

        if choice == "1":
            new_ip = input(
                "\033[93mEnter\033[92m New Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguardsec(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguardsec(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wireguard_client(opposite_ip)
                update_ipsec_conf_wireguard_46("/etc/ipsec1.conf", new_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "2":
            listen_port, endpoint = update_tunnel_port(listen_port, endpoint)
            update_ufw_ruleswireguard(
                address_no_subnet, address_no_subnet, listen_port, listen_port
            )
        elif choice == "3":
            endpoint = update_endpoint_ir_server(endpoint)
        elif choice == "4":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secret Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")
        elif choice == "5":
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "Endpoint": endpoint,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfigsec_client(config_path, new_config)
            update_ipsec_ip(new_ip)
            return
        elif choice == "0":
            wireguardedit_noconjuction_1iran_5kharej()
        else:
            print("\033[91mPlease select a valid option.\033[0m")


def wireguardudp_kharej_client3sec():
    config_path = "/etc/wireguard/wireclient.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfigsec(config_path)
    )

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCould not retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips)

        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[93mWireguard + IPSEC Edit local\033[97m Kharej Client\033[92m [3]\033[93m Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("\033[93mThis is Kharej Client - \033[97m[3]\033[0m")
        print("1.\033[92m Change \033[97mPrivate IP\033[92m Address\033[0m")
        print("2.\033[94m Change Tunnel Port\033[0m")
        print("3.\033[93m Change \033[92mIRAN Server IP \033[96m(Endpoint IP)\033[0m")
        print("4.\033[94m Change IPsec Secret Key\033[0m")
        print("5.\033[92m Save and Exit\033[0m")
        print("0. back to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice: ")

        if choice == "1":
            new_ip = input(
                "\033[93mEnter\033[92m New Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguardsec(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguardsec(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wireguard_client(opposite_ip)
                update_ipsec_conf_wireguard_46("/etc/ipsec1.conf", new_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "2":
            listen_port, endpoint = update_tunnel_port(listen_port, endpoint)
            update_ufw_ruleswireguard(
                address_no_subnet, address_no_subnet, listen_port, listen_port
            )
        elif choice == "3":
            endpoint = update_endpoint_ir_server(endpoint)
        elif choice == "4":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secret Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")
        elif choice == "5":
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "Endpoint": endpoint,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfigsec_client(config_path, new_config)
            update_ipsec_ip(new_ip)
            return
        elif choice == "0":
            wireguardedit_noconjuction_1iran_5kharej()
        else:
            print("\033[91mPlease select a valid option.\033[0m")


def wireguardudp_kharej_client4sec():
    config_path = "/etc/wireguard/wireclient.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfigsec(config_path)
    )

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCould not retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips)

        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[93mWireguard + IPSEC Edit local\033[97m Kharej Client\033[92m [4]\033[93m Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("\033[93mThis is Kharej Client - \033[97m[4]\033[0m")
        print("1.\033[92m Change \033[97mPrivate IP\033[92m Address\033[0m")
        print("2.\033[94m Change Tunnel Port\033[0m")
        print("3.\033[93m Change \033[92mIRAN Server IP \033[96m(Endpoint IP)\033[0m")
        print("4.\033[94m Change IPsec Secret Key\033[0m")
        print("5.\033[92m Save and Exit\033[0m")
        print("0. back to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice: ")

        if choice == "1":
            new_ip = input(
                "\033[93mEnter\033[92m New Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguardsec(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguardsec(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wireguard_client(opposite_ip)
                update_ipsec_conf_wireguard_46("/etc/ipsec1.conf", new_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "2":
            listen_port, endpoint = update_tunnel_port(listen_port, endpoint)
            update_ufw_ruleswireguard(
                address_no_subnet, address_no_subnet, listen_port, listen_port
            )
        elif choice == "3":
            endpoint = update_endpoint_ir_server(endpoint)
        elif choice == "4":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secret Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")
        elif choice == "5":
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "Endpoint": endpoint,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfigsec_client(config_path, new_config)
            update_ipsec_ip(new_ip)
            return
        elif choice == "0":
            wireguardedit_noconjuction_1iran_5kharej()
        else:
            print("\033[91mPlease select a valid option.\033[0m")


def wireguardudp_kharej_client5sec():
    config_path = "/etc/wireguard/wireclient.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfigsec(config_path)
    )

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCould not retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips)

        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[93mWireguard + IPSEC Edit local\033[97m Kharej Client\033[92m [5]\033[93m Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("\033[93mThis is Kharej Client - \033[97m[5]\033[0m")
        print("1.\033[92m Change \033[97mPrivate IP\033[92m Address\033[0m")
        print("2.\033[94m Change Tunnel Port\033[0m")
        print("3.\033[93m Change \033[92mIRAN Server IP \033[96m(Endpoint IP)\033[0m")
        print("4.\033[94m Change IPsec Secret Key\033[0m")
        print("5.\033[92m Save and Exit\033[0m")
        print("0. back to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice: ")

        if choice == "1":
            new_ip = input(
                "\033[93mEnter\033[92m New Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguardsec(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguardsec(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wireguard_client(opposite_ip)
                update_ipsec_conf_wireguard_46("/etc/ipsec1.conf", new_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "2":
            listen_port, endpoint = update_tunnel_port(listen_port, endpoint)
            update_ufw_ruleswireguard(
                address_no_subnet, address_no_subnet, listen_port, listen_port
            )
        elif choice == "3":
            endpoint = update_endpoint_ir_server(endpoint)
        elif choice == "4":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secret Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")
        elif choice == "5":
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "Endpoint": endpoint,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfigsec_client(config_path, new_config)
            update_ipsec_ip(new_ip)
            return
        elif choice == "0":
            wireguardedit_noconjuction_1iran_5kharej()
        else:
            print("\033[91mPlease select a valid option.\033[0m")


# wire + gre6tap


def private_native(name):
    try:
        with open(name, "r") as f:
            content = f.read()
        match = re.search(r"ip -6 addr add (\S+)/64 dev azumi?", content)
        if match:
            return match.group(1)
        else:
            print("\033[91mno private IP found\033[0m")
    except FileNotFoundError:
        print("\033[91mPrivate file not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")
    return None


def get_current_native_ipsgretap61():
    private_ip_gre6 = private_gre61("/etc/gre61.sh")
    return {
        "gre6": private_ip_gre6,
    }


def get_current_native_ipsgretap62():
    private_ip_gre6 = private_gre61("/etc/gre62.sh")
    return {
        "gre6": private_ip_gre6,
    }


def get_current_native_ipsgretap63():
    private_ip_gre6 = private_gre6tap("/etc/gre63.sh")
    return {
        "gre6": private_ip_gre6,
    }


def get_current_native_ipsgretap64():
    private_ip_gre6 = private_gre6tap("/etc/gre64.sh")
    return {
        "gre6": private_ip_gre6,
    }


def get_current_native_ipsgretap65():
    private_ip_gre6 = private_gre6tap("/etc/gre65.sh")
    return {
        "gre6": private_ip_gre6,
    }


def update_pingfile_sit(name, new_ip):
    try:
        with open(name, "r") as f:
            content = f.read()

        new_content = re.sub(r'ip_address="[^"]+"', f'ip_address="{new_ip}"', content)

        with open(name, "w") as f:
            f.write(new_content)
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def update_ipfile_gre6_wire1(name, new_ip, update_type):
    try:
        with open(name, "r") as f:
            content = f.read()

        if update_type == "private":
            new_content = re.sub(
                r"ip (-6 )?addr add [^ ]+/64 dev azumi?",
                f"ip -6 addr add {new_ip}/64 dev azumi",
                content,
            )
            ip_parts = new_ip.split(":")
            if new_ip.endswith(":2"):
                ip_parts[-1] = "1"
            else:
                ip_parts[-1] = "2"
            counterpart_ip = ":".join(ip_parts)
            new_content = re.sub(
                r"ip (-6 )?route add [^ ]+/64 dev azumi?",
                f"ip -6 route add {counterpart_ip}/64 dev azumi",
                new_content,
            )
            update_ipfile_gre6_wire1("/etc/gre61.sh", new_ip, update_type="gre6_local")
            update_ipfile_gre6_wire1(
                "/etc/gre61.sh", counterpart_ip, update_type="gre6_remote"
            )
        elif update_type == "local":
            new_content = re.sub(r"local \S+", f"local {new_ip}", content)
        elif update_type == "remote":
            new_content = re.sub(r"remote \S+", f"remote {new_ip}", content)
        elif update_type == "gre6_local":
            new_content = re.sub(r"local \S+", f"local {new_ip}", content)
        elif update_type == "gre6_remote":
            new_content = re.sub(r"remote \S+", f"remote {new_ip}", content)
        elif update_type == "ipsec":
            new_content = re.sub(r"leftsubnet=\S+", f"leftsubnet={new_ip}/64", content)
            new_content = re.sub(r"leftid=\S+", f"leftid={new_ip}", new_content)

            ip_parts = new_ip.split(":")
            if new_ip.endswith(":1"):
                ip_parts[-1] = "2"
            else:
                ip_parts[-1] = "1"
            counterpart_ip = ":".join(ip_parts)
            new_content = re.sub(r"right=\S+", f"right={counterpart_ip}", new_content)
            new_content = re.sub(
                r"rightsubnet=\S+", f"rightsubnet={counterpart_ip}/64", new_content
            )

        with open(name, "w") as f:
            f.write(new_content)
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def update_ipfile_gre6_wire2(name, new_ip, update_type):
    try:
        with open(name, "r") as f:
            content = f.read()

        if update_type == "private":
            new_content = re.sub(
                r"ip (-6 )?addr add [^ ]+/64 dev azumi?",
                f"ip -6 addr add {new_ip}/64 dev azumi",
                content,
            )
            ip_parts = new_ip.split(":")
            if new_ip.endswith(":2"):
                ip_parts[-1] = "1"
            else:
                ip_parts[-1] = "2"
            counterpart_ip = ":".join(ip_parts)
            new_content = re.sub(
                r"ip (-6 )?route add [^ ]+/64 dev azumi?",
                f"ip -6 route add {counterpart_ip}/64 dev azumi",
                new_content,
            )
            update_ipfile_gre6_wire2("/etc/gre62.sh", new_ip, update_type="gre6_local")
            update_ipfile_gre6_wire2(
                "/etc/gre62.sh", counterpart_ip, update_type="gre6_remote"
            )
        elif update_type == "local":
            new_content = re.sub(r"local \S+", f"local {new_ip}", content)
        elif update_type == "remote":
            new_content = re.sub(r"remote \S+", f"remote {new_ip}", content)
        elif update_type == "gre6_local":
            new_content = re.sub(r"local \S+", f"local {new_ip}", content)
        elif update_type == "gre6_remote":
            new_content = re.sub(r"remote \S+", f"remote {new_ip}", content)
        elif update_type == "ipsec":
            new_content = re.sub(r"leftsubnet=\S+", f"leftsubnet={new_ip}/64", content)
            new_content = re.sub(r"leftid=\S+", f"leftid={new_ip}", new_content)

            ip_parts = new_ip.split(":")
            if new_ip.endswith(":1"):
                ip_parts[-1] = "2"
            else:
                ip_parts[-1] = "1"
            counterpart_ip = ":".join(ip_parts)
            new_content = re.sub(r"right=\S+", f"right={counterpart_ip}", new_content)
            new_content = re.sub(
                r"rightsubnet=\S+", f"rightsubnet={counterpart_ip}/64", new_content
            )

        with open(name, "w") as f:
            f.write(new_content)
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def update_ipfile_gre6_wire3(name, new_ip, update_type):
    try:
        with open(name, "r") as f:
            content = f.read()

        if update_type == "private":
            new_content = re.sub(
                r"ip (-6 )?addr add [^ ]+/64 dev azumi?",
                f"ip -6 addr add {new_ip}/64 dev azumi",
                content,
            )
            ip_parts = new_ip.split(":")
            if new_ip.endswith(":2"):
                ip_parts[-1] = "1"
            else:
                ip_parts[-1] = "2"
            counterpart_ip = ":".join(ip_parts)
            new_content = re.sub(
                r"ip (-6 )?route add [^ ]+/64 dev azumi?",
                f"ip -6 route add {counterpart_ip}/64 dev azumi",
                new_content,
            )
            update_ipfile_gre6_wire3("/etc/gre63.sh", new_ip, update_type="gre6_local")
            update_ipfile_gre6_wire3(
                "/etc/gre63.sh", counterpart_ip, update_type="gre6_remote"
            )
        elif update_type == "local":
            new_content = re.sub(r"local \S+", f"local {new_ip}", content)
        elif update_type == "remote":
            new_content = re.sub(r"remote \S+", f"remote {new_ip}", content)
        elif update_type == "gre6_local":
            new_content = re.sub(r"local \S+", f"local {new_ip}", content)
        elif update_type == "gre6_remote":
            new_content = re.sub(r"remote \S+", f"remote {new_ip}", content)
        elif update_type == "ipsec":
            new_content = re.sub(r"leftsubnet=\S+", f"leftsubnet={new_ip}/64", content)
            new_content = re.sub(r"leftid=\S+", f"leftid={new_ip}", new_content)

            ip_parts = new_ip.split(":")
            if new_ip.endswith(":1"):
                ip_parts[-1] = "2"
            else:
                ip_parts[-1] = "1"
            counterpart_ip = ":".join(ip_parts)
            new_content = re.sub(r"right=\S+", f"right={counterpart_ip}", new_content)
            new_content = re.sub(
                r"rightsubnet=\S+", f"rightsubnet={counterpart_ip}/64", new_content
            )

        with open(name, "w") as f:
            f.write(new_content)
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def update_ipfile_gre6_wire4(name, new_ip, update_type):
    try:
        with open(name, "r") as f:
            content = f.read()

        if update_type == "private":
            new_content = re.sub(
                r"ip (-6 )?addr add [^ ]+/64 dev azumi?",
                f"ip -6 addr add {new_ip}/64 dev azumi",
                content,
            )
            ip_parts = new_ip.split(":")
            if new_ip.endswith(":2"):
                ip_parts[-1] = "1"
            else:
                ip_parts[-1] = "2"
            counterpart_ip = ":".join(ip_parts)
            new_content = re.sub(
                r"ip (-6 )?route add [^ ]+/64 dev azumi?",
                f"ip -6 route add {counterpart_ip}/64 dev azumi",
                new_content,
            )
            update_ipfile_gre6_wire4("/etc/gre64.sh", new_ip, update_type="gre6_local")
            update_ipfile_gre6_wire4(
                "/etc/gre64.sh", counterpart_ip, update_type="gre6_remote"
            )
        elif update_type == "local":
            new_content = re.sub(r"local \S+", f"local {new_ip}", content)
        elif update_type == "remote":
            new_content = re.sub(r"remote \S+", f"remote {new_ip}", content)
        elif update_type == "gre6_local":
            new_content = re.sub(r"local \S+", f"local {new_ip}", content)
        elif update_type == "gre6_remote":
            new_content = re.sub(r"remote \S+", f"remote {new_ip}", content)
        elif update_type == "ipsec":
            new_content = re.sub(r"leftsubnet=\S+", f"leftsubnet={new_ip}/64", content)
            new_content = re.sub(r"leftid=\S+", f"leftid={new_ip}", new_content)

            ip_parts = new_ip.split(":")
            if new_ip.endswith(":1"):
                ip_parts[-1] = "2"
            else:
                ip_parts[-1] = "1"
            counterpart_ip = ":".join(ip_parts)
            new_content = re.sub(r"right=\S+", f"right={counterpart_ip}", new_content)
            new_content = re.sub(
                r"rightsubnet=\S+", f"rightsubnet={counterpart_ip}/64", new_content
            )

        with open(name, "w") as f:
            f.write(new_content)
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def update_ipfile_gre6_wire5(name, new_ip, update_type):
    try:
        with open(name, "r") as f:
            content = f.read()

        if update_type == "private":
            new_content = re.sub(
                r"ip (-6 )?addr add [^ ]+/64 dev azumi?",
                f"ip -6 addr add {new_ip}/64 dev azumi",
                content,
            )
            ip_parts = new_ip.split(":")
            if new_ip.endswith(":2"):
                ip_parts[-1] = "1"
            else:
                ip_parts[-1] = "2"
            counterpart_ip = ":".join(ip_parts)
            new_content = re.sub(
                r"ip (-6 )?route add [^ ]+/64 dev azumi?",
                f"ip -6 route add {counterpart_ip}/64 dev azumi",
                new_content,
            )
            update_ipfile_gre6_wire5("/etc/gre65.sh", new_ip, update_type="gre6_local")
            update_ipfile_gre6_wire5(
                "/etc/gre65.sh", counterpart_ip, update_type="gre6_remote"
            )
        elif update_type == "local":
            new_content = re.sub(r"local \S+", f"local {new_ip}", content)
        elif update_type == "remote":
            new_content = re.sub(r"remote \S+", f"remote {new_ip}", content)
        elif update_type == "gre6_local":
            new_content = re.sub(r"local \S+", f"local {new_ip}", content)
        elif update_type == "gre6_remote":
            new_content = re.sub(r"remote \S+", f"remote {new_ip}", content)
        elif update_type == "ipsec":
            new_content = re.sub(r"leftsubnet=\S+", f"leftsubnet={new_ip}/64", content)
            new_content = re.sub(r"leftid=\S+", f"leftid={new_ip}", new_content)

            ip_parts = new_ip.split(":")
            if new_ip.endswith(":1"):
                ip_parts[-1] = "2"
            else:
                ip_parts[-1] = "1"
            counterpart_ip = ":".join(ip_parts)
            new_content = re.sub(r"right=\S+", f"right={counterpart_ip}", new_content)
            new_content = re.sub(
                r"rightsubnet=\S+", f"rightsubnet={counterpart_ip}/64", new_content
            )

        with open(name, "w") as f:
            f.write(new_content)
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def add_ufw_rules(ip, port=None):
    counterpart_ip = wtb_opposite_ip_sitwire(ip)
    try:
        if port:
            subprocess.run(
                ["sudo", "ufw", "allow", "from", ip, "to", "any", "port", port],
                check=True,
            )
            subprocess.run(
                [
                    "sudo",
                    "ufw",
                    "allow",
                    "from",
                    counterpart_ip,
                    "to",
                    "any",
                    "port",
                    port,
                ],
                check=True,
            )
        else:
            subprocess.run(["sudo", "ufw", "allow", "from", ip], check=True)
            subprocess.run(["sudo", "ufw", "allow", "from", counterpart_ip], check=True)
    except subprocess.CalledProcessError as e:
        print(f"\033[91merror adding UFW rules: {e}\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def wtb_opposite_ip_sitwire(ip):
    if ":" in ip:  # IPv6
        ip_parts = ip.split(":")
        ip_parts[-1] = "1" if ip_parts[-1] == "2" else "2"
        return ":".join(ip_parts)
    else:  # IPv4
        ip_parts = ip.split(".")
        ip_parts[-1] = "1" if ip_parts[-1] == "2" else "2"
        return ".".join(ip_parts)


def save_stuff_gretap61(private_ip, local_ip, remote_ip, is_gre6):
    current_ips = get_current_native_ipsgretap61()
    current_ip = current_ips["gre6"] if is_gre6 else current_ips["private"]

    if current_ip:
        delete_ufw_rules(current_ip)

    add_ufw_rules(private_ip)

    counterpart_ip = wtb_opposite_ip_sitwire(private_ip)
    try:
        if is_gre6:
            update_pingfile_sit("/etc/ping_ip1.sh", counterpart_ip)
            update_ipfile_gre6_wire1("/etc/gre61.sh", private_ip, update_type="private")
            update_ipfile_gre6_wire1("/etc/gre61.sh", remote_ip, update_type="remote")
        else:
            update_pingfile_sit("/etc/ping_v61.sh", counterpart_ip)
            update_ipfile_gre6_wire1(
                "/etc/private1.sh", private_ip, update_type="private"
            )
            update_ipfile_gre6_wire1("/etc/private1.sh", local_ip, update_type="local")
            update_ipfile_gre6_wire1(
                "/etc/private1.sh", remote_ip, update_type="remote"
            )

        interface = "azumig61" if is_gre6 else "azumi1"
        subprocess.run(["ip", "link", "set", "dev", interface, "down"], check=True)
        subprocess.run(["ip", "link", "delete", interface], check=True)
    except subprocess.CalledProcessError as e:
        print(f"\033[91merror bringing interface down or deleting it: {e}\033[0m")

    try:
        script = "/etc/gre61.sh" if is_gre6 else "/etc/private1.sh"
        result = subprocess.run(["/bin/bash", script], capture_output=True, text=True)
        if "RTNETLINK answers: File exists" in result.stderr:
            print("\033[91madditional ip already exists. Ignoring this error\033[0m")
        else:
            result.check_returncode()
        display_checkmark(
            f"\033[92mChanges saved and {interface} interface updated successfully!\033[0m"
        )
        subprocess.run(["sudo", "systemctl", "daemon-reload"], check=True)
        subprocess.run(["sudo", "systemctl", "restart", "ping_ip1"], check=True)

        # display_checkmark("\033[92mSystem services reloaded and restarted successfully!\033[0m")
    except subprocess.CalledProcessError as e:
        print(
            f"\033[91merror applying network changes: {e.stderr.strip() if e.stderr else str(e)}\033[0m"
        )
    except FileNotFoundError:
        print(f"\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def save_stuff_gretap62(private_ip, local_ip, remote_ip, is_gre6):
    current_ips = get_current_native_ipsgretap62()
    current_ip = current_ips["gre6"] if is_gre6 else current_ips["private"]

    if current_ip:
        delete_ufw_rules(current_ip)

    add_ufw_rules(private_ip)

    counterpart_ip = wtb_opposite_ip_sitwire(private_ip)
    try:
        if is_gre6:
            update_pingfile_sit("/etc/ping_ip2.sh", counterpart_ip)
            update_ipfile_gre6_wire2("/etc/gre62.sh", private_ip, update_type="private")
            update_ipfile_gre6_wire2("/etc/gre62.sh", remote_ip, update_type="remote")
        else:
            update_pingfile_sit("/etc/ping_v62.sh", counterpart_ip)
            update_ipfile_gre6_wire2(
                "/etc/private2.sh", private_ip, update_type="private"
            )
            update_ipfile_gre6_wire2("/etc/private2.sh", local_ip, update_type="local")
            update_ipfile_gre6_wire2(
                "/etc/private2.sh", remote_ip, update_type="remote"
            )

        interface = "azumig62" if is_gre6 else "azumi2"
        subprocess.run(["ip", "link", "set", "dev", interface, "down"], check=True)
        subprocess.run(["ip", "link", "delete", interface], check=True)
    except subprocess.CalledProcessError as e:
        print(f"\033[91merror bringing interface down or deleting it: {e}\033[0m")

    try:
        script = "/etc/gre62.sh" if is_gre6 else "/etc/private2.sh"
        result = subprocess.run(["/bin/bash", script], capture_output=True, text=True)
        if "RTNETLINK answers: File exists" in result.stderr:
            print("\033[91madditional ip already exists. Ignoring this error\033[0m")
        else:
            result.check_returncode()
        display_checkmark(
            f"\033[92mChanges saved and {interface} interface updated successfully!\033[0m"
        )
        subprocess.run(["sudo", "systemctl", "daemon-reload"], check=True)
        subprocess.run(["sudo", "systemctl", "restart", "ping_ip2"], check=True)

        # display_checkmark("\033[92mSystem services reloaded and restarted successfully!\033[0m")
    except subprocess.CalledProcessError as e:
        print(
            f"\033[91merror applying network changes: {e.stderr.strip() if e.stderr else str(e)}\033[0m"
        )
    except FileNotFoundError:
        print(f"\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def save_stuff_gretap63(private_ip, local_ip, remote_ip, is_gre6):
    current_ips = get_current_native_ipsgretap63()
    current_ip = current_ips["gre6"] if is_gre6 else current_ips["private"]

    if current_ip:
        delete_ufw_rules(current_ip)

    add_ufw_rules(private_ip)

    counterpart_ip = wtb_opposite_ip_sitwire(private_ip)
    try:
        if is_gre6:
            update_pingfile_sit("/etc/ping_ip3.sh", counterpart_ip)
            update_ipfile_gre6_wire3("/etc/gre63.sh", private_ip, update_type="private")
            update_ipfile_gre6_wire3("/etc/gre63.sh", remote_ip, update_type="remote")
        else:
            update_pingfile_sit("/etc/ping_v63.sh", counterpart_ip)
            update_ipfile_gre6_wire3(
                "/etc/private3.sh", private_ip, update_type="private"
            )
            update_ipfile_gre6_wire3("/etc/private3.sh", local_ip, update_type="local")
            update_ipfile_gre6_wire3(
                "/etc/private3.sh", remote_ip, update_type="remote"
            )

        interface = "azumig63" if is_gre6 else "azumi3"
        subprocess.run(["ip", "link", "set", "dev", interface, "down"], check=True)
        subprocess.run(["ip", "link", "delete", interface], check=True)
    except subprocess.CalledProcessError as e:
        print(f"\033[91merror bringing interface down or deleting it: {e}\033[0m")

    try:
        script = "/etc/gre63.sh" if is_gre6 else "/etc/private3.sh"
        result = subprocess.run(["/bin/bash", script], capture_output=True, text=True)
        if "RTNETLINK answers: File exists" in result.stderr:
            print("\033[91madditional ip already exists. Ignoring this error\033[0m")
        else:
            result.check_returncode()
        display_checkmark(
            f"\033[92mChanges saved and {interface} interface updated successfully!\033[0m"
        )
        subprocess.run(["sudo", "systemctl", "daemon-reload"], check=True)
        subprocess.run(["sudo", "systemctl", "restart", "ping_ip3"], check=True)

        # display_checkmark("\033[92mSystem services reloaded and restarted successfully!\033[0m")
    except subprocess.CalledProcessError as e:
        print(
            f"\033[91merror applying network changes: {e.stderr.strip() if e.stderr else str(e)}\033[0m"
        )
    except FileNotFoundError:
        print(f"\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def save_stuff_gretap64(private_ip, local_ip, remote_ip, is_gre6):
    current_ips = get_current_native_ipsgretap64()
    current_ip = current_ips["gre6"] if is_gre6 else current_ips["private"]

    if current_ip:
        delete_ufw_rules(current_ip)

    add_ufw_rules(private_ip)

    counterpart_ip = wtb_opposite_ip_sitwire(private_ip)
    try:
        if is_gre6:
            update_pingfile_sit("/etc/ping_ip4.sh", counterpart_ip)
            update_ipfile_gre6_wire4("/etc/gre64.sh", private_ip, update_type="private")
            update_ipfile_gre6_wire4("/etc/gre64.sh", remote_ip, update_type="remote")
        else:
            update_pingfile_sit("/etc/ping_v64.sh", counterpart_ip)
            update_ipfile_gre6_wire4(
                "/etc/private4.sh", private_ip, update_type="private"
            )
            update_ipfile_gre6_wire4("/etc/private4.sh", local_ip, update_type="local")
            update_ipfile_gre6_wire4(
                "/etc/private4.sh", remote_ip, update_type="remote"
            )

        interface = "azumig64" if is_gre6 else "azumi4"
        subprocess.run(["ip", "link", "set", "dev", interface, "down"], check=True)
        subprocess.run(["ip", "link", "delete", interface], check=True)
    except subprocess.CalledProcessError as e:
        print(f"\033[91merror bringing interface down or deleting it: {e}\033[0m")

    try:
        script = "/etc/gre64.sh" if is_gre6 else "/etc/private4.sh"
        result = subprocess.run(["/bin/bash", script], capture_output=True, text=True)
        if "RTNETLINK answers: File exists" in result.stderr:
            print("\033[91madditional ip already exists. Ignoring this error\033[0m")
        else:
            result.check_returncode()
        display_checkmark(
            f"\033[92mChanges saved and {interface} interface updated successfully!\033[0m"
        )
        subprocess.run(["sudo", "systemctl", "daemon-reload"], check=True)
        subprocess.run(["sudo", "systemctl", "restart", "ping_ip4"], check=True)

        # display_checkmark("\033[92mSystem services reloaded and restarted successfully!\033[0m")
    except subprocess.CalledProcessError as e:
        print(
            f"\033[91merror applying network changes: {e.stderr.strip() if e.stderr else str(e)}\033[0m"
        )
    except FileNotFoundError:
        print(f"\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def save_stuff_gretap65(private_ip, local_ip, remote_ip, is_gre6):
    current_ips = get_current_native_ipsgretap65()
    current_ip = current_ips["gre6"] if is_gre6 else current_ips["private"]

    if current_ip:
        delete_ufw_rules(current_ip)

    add_ufw_rules(private_ip)

    counterpart_ip = wtb_opposite_ip_sitwire(private_ip)
    try:
        if is_gre6:
            update_pingfile_sit("/etc/ping_ip5.sh", counterpart_ip)
            update_ipfile_gre6_wire5("/etc/gre65.sh", private_ip, update_type="private")
            update_ipfile_gre6_wire5("/etc/gre65.sh", remote_ip, update_type="remote")
        else:
            update_pingfile_sit("/etc/ping_v65.sh", counterpart_ip)
            update_ipfile_gre6_wire5(
                "/etc/private5.sh", private_ip, update_type="private"
            )
            update_ipfile_gre6_wire5("/etc/private5.sh", local_ip, update_type="local")
            update_ipfile_gre6_wire5(
                "/etc/private5.sh", remote_ip, update_type="remote"
            )

        interface = "azumig65" if is_gre6 else "azumi5"
        subprocess.run(["ip", "link", "set", "dev", interface, "down"], check=True)
        subprocess.run(["ip", "link", "delete", interface], check=True)
    except subprocess.CalledProcessError as e:
        print(f"\033[91merror bringing interface down or deleting it: {e}\033[0m")

    try:
        script = "/etc/gre65.sh" if is_gre6 else "/etc/private5.sh"
        result = subprocess.run(["/bin/bash", script], capture_output=True, text=True)
        if "RTNETLINK answers: File exists" in result.stderr:
            print("\033[91madditional ip already exists. Ignoring this error\033[0m")
        else:
            result.check_returncode()
        display_checkmark(
            f"\033[92mChanges saved and {interface} interface updated successfully!\033[0m"
        )
        subprocess.run(["sudo", "systemctl", "daemon-reload"], check=True)
        subprocess.run(["sudo", "systemctl", "restart", "ping_ip5"], check=True)

        # display_checkmark("\033[92mSystem services reloaded and restarted successfully!\033[0m")
    except subprocess.CalledProcessError as e:
        print(
            f"\033[91merror applying network changes: {e.stderr.strip() if e.stderr else str(e)}\033[0m"
        )
    except FileNotFoundError:
        print(f"\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def private_gre6tap(name):
    try:
        with open(name, "r") as f:
            content = f.read()
        match = re.search(r"ip -6 addr add (\S+)/64 dev azumig6?", content)
        if match:
            return match.group(1)
        else:
            print("\033[91mNo private IP found\033[0m")
    except FileNotFoundError:
        print("\033[91mPrivate file not found\033[0m")
    except Exception as e:
        print(f"\033[91mOut of ordinary error: {e}\033[0m")
    return None


def display_stuff_gre6tapn(local_ip, remote_ip, private_ip):
    lines = [
        f"\033[93mTitle:         GRE6TAP Configuration\033[0m",
        f"\033[97m──────────────────────────────────────\033[0m",
        f"\033[92mLocal IP:        \033[97m{local_ip}\033[0m",
        f"\033[92mKharej IPV6:     \033[97m{remote_ip}\033[0m",
        f"\033[93mPrivate IP:      \033[97m{private_ip}\033[0m",
    ]
    box_width = 50

    print("\033[93m╭" + "─" * (box_width - 2) + "╮\033[0m")

    for line in lines:
        print(f"\033[93m {line:<{box_width - 4}} \033[0m")

    print("\033[93m╰" + "─" * (box_width - 2) + "╯\033[0m")


def local_ip(name):
    try:
        with open(name, "r") as f:
            content = f.read()
        match = re.search(r"local (\S+)", content)
        if match:
            return match.group(1)
        else:
            print(f"\033[91mno local IP found\033[0m")
    except FileNotFoundError:
        print(f"file {name} doesn't exist")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")
    return None


def remote_ip(name):
    try:
        with open(name, "r") as f:
            content = f.read()
        match = re.search(r"remote (\S+)", content)
        if match:
            return match.group(1)
        else:
            print("\033[91mno remote IP found \033[0m")
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")
    return None


def wireguardgre6tapeditserver_mnu():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print("\033[92m(   ) \033[92mEdit local\033[93m Wireguard + GRE6TAP Menu\033[0m")
    print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[92mNo IPSEC\033[0m")
    print("2. \033[93mWith IPSEC\033[0m")
    print("3. \033[94mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        choice = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if choice == "1":
            wireguardgre6tap_nosec_edit_local()
            break
        elif choice == "2":
            wireguardgre6tap_sec_edit_local()
            break
        elif choice == "3":
            clear()
            wireguard_edit_server()
            break
        else:
            print("Invalid choice.")


def wireguardgre6tap_nosec_edit_local():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print("\033[92m(   ) \033[93mWireguard + GRE6TAP\033[93m Edit Menu\033[0m")
    print(
        '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
    )
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[92mWireguard + GRE6TAP - [1]Kharej Server [5]IRAN Clients\033[0m")
    print("2. \033[93mWireguard + GRE6TAP - [1]IRAN   Server [5]Kharej Clients\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    print("0.\033[97mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")
    while True:
        server_type = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if server_type == "1":
            wireguard_gre6tap_noconjuction_kharej1_5iran()
            break
        elif server_type == "2":
            wireguard_gre6tap_noconjuction_1iran_5kharej()
            break
        elif server_type == "0":
            os.system("clear")
            wireguardgre6tapeditserver_mnu()
            break
        else:
            print("Invalid choice.")


def wireguard_gre6tap_noconjuction_1iran_5kharej():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print(
        "\033[92m(   ) \033[93mWireguard + GRE6TAP \033[92m[1]IRAN Server\033[96m [5]Kharej Client\033[93m Edit Menu\033[0m"
    )
    print(
        '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
    )
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[92mKharej Client [1] Config\033[0m")
    print("2. \033[92mKharej Client [2] Config\033[0m")
    print("3. \033[92mKharej Client [3] Config\033[0m")
    print("4. \033[93mKharej Client [4] Config\033[0m")
    print("5. \033[92mKharej Client [5] Config\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    print("6. \033[96mIRAN Server Config\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    print("0.\033[97mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")
    while True:
        server_type = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if server_type == "1":
            wireguardafter_gre6tapn_kharej_client1()
            break
        elif server_type == "2":
            wireguardafter_gre6tapn_kharej_client2()
            break
        elif server_type == "3":
            wireguardafter_gre6tapn_kharej_client3()
            break
        elif server_type == "4":
            wireguardafter_gre6tapn_kharej_client4()
            break
        elif server_type == "5":
            wireguardafter_gre6tapn_kharej_client5()
            break
        elif server_type == "6":
            wireguardafter_gre6tapn_iran_server()
            break
        elif server_type == "0":
            os.system("clear")
            wireguardgre6tap_nosec_edit_local()
            break
        else:
            print("Invalid choice.")


def wireguardafter_gre6tapn_iran_server():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print(
        "\033[92m(   ) \033[93mWireguard + GRE6TAP \033[92m[1]IRAN Server\033[96m [5]Kharej Client\033[93m Edit Menu\033[0m"
    )
    print(
        '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
    )
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[92mIRAN Server Config [1] \033[0m")
    print("2. \033[92mIRAN Server Config [2]\033[0m")
    print("3. \033[93mIRAN Server Config [3]\033[0m")
    print("4. \033[92mIRAN Server Config [4]\033[0m")
    print("5. \033[92mIRAN Server Config [5]\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    print("0.\033[97mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")
    while True:
        server_type = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if server_type == "1":
            wireguardafter_gre6tapn_iranconfig_1()
            break
        elif server_type == "2":
            wireguardafter_gre6tapn_iranconfig_2()
            break
        elif server_type == "3":
            wireguardafter_gre6tapn_iranconfig_3()
            break
        elif server_type == "4":
            wireguardafter_gre6tapn_iranconfig_4()
            break
        elif server_type == "5":
            wireguardafter_gre6tapn_iranconfig_5()
            break
        elif server_type == "0":
            os.system("clear")
            wireguard_gre6tap_noconjuction_1iran_5kharej()
            break
        else:
            print("Invalid choice.")


def wireguard_gre6tap_noconjuction_kharej1_5iran():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print(
        "\033[92m(   ) \033[93mWireguard + GRE6TAP \033[92m[1]Kharej Server\033[96m [5]IRAN Client\033[93m Edit Menu\033[0m"
    )
    print(
        '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
    )
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[92mIRAN Client [1] Config\033[0m")
    print("2. \033[92mIRAN Client [2] Config\033[0m")
    print("3. \033[92mIRAN Client [3] Config\033[0m")
    print("4. \033[93mIRAN Client [4] Config\033[0m")
    print("5. \033[92mIRAN Client [5] Config\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    print("6. \033[96mKharej Server Config\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    print("0.\033[97mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")
    while True:
        server_type = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if server_type == "1":
            wireguardafter_gre6tapn_iran_client1()
            break
        elif server_type == "2":
            wireguardafter_gre6tapn_iran_client2()
            break
        elif server_type == "3":
            wireguardafter_gre6tapn_iran_client3()
            break
        elif server_type == "4":
            wireguardafter_gre6tapn_iran_client4()
            break
        elif server_type == "5":
            wireguardafter_gre6tapn_iran_client5()
            break
        elif server_type == "6":
            wireguardafter_gre6tapn_kharej_server()
            break
        elif server_type == "0":
            os.system("clear")
            wireguardgre6tap_nosec_edit_local()
            break
        else:
            print("Invalid choice.")


def wireguardafter_gre6tapn_kharej_server():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print(
        "\033[92m(   ) \033[93mWireguard + GRE6TAP IPSEC \033[92m[1]Kharej Server\033[96m [5]IRAN Client\033[93m Edit Menu\033[0m"
    )
    print(
        '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
    )
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[92mKharej Server Config [1] \033[0m")
    print("2. \033[92mKharej Server Config [2]\033[0m")
    print("3. \033[93mKharej Server Config [3]\033[0m")
    print("4. \033[92mKharej Server Config [4]\033[0m")
    print("5. \033[92mKharej Server Config [5]\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    print("0.\033[97mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")
    while True:
        server_type = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if server_type == "1":
            wireguardafter_gre6tapn_kharejconfig_1()
            break
        elif server_type == "2":
            wireguardafter_gre6tapn_kharejconfig_2()
            break
        elif server_type == "3":
            wireguardafter_gre6tapn_kharejconfig_3()
            break
        elif server_type == "4":
            wireguardafter_gre6tapn_kharejconfig_4()
            break
        elif server_type == "5":
            wireguardafter_gre6tapn_kharejconfig_5()
            break
        elif server_type == "0":
            os.system("clear")
            wireguard_gre6tap_noconjuction_kharej1_5iran()
            break
        else:
            print("Invalid choice.")


# gre6tap ipsec menu


def wireguardgre6tap_sec_edit_local():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print("\033[92m(   ) \033[93mWireguard + GRE6TAP + IPSEC\033[93m Edit Menu\033[0m")
    print(
        '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
    )
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[92mWireguard + GRE6TAP - [1]Kharej Server [5]IRAN Clients\033[0m")
    print("2. \033[93mWireguard + GRE6TAP - [1]IRAN   Server [5]Kharej Clients\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    print("0.\033[97mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")
    while True:
        server_type = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if server_type == "1":
            wireguard_gre6tapsec_noconjuction_kharej1_5iran()
            break
        elif server_type == "2":
            wireguard_gre6tapsec_noconjuction_1iran_5kharej()
            break
        elif server_type == "0":
            os.system("clear")
            wireguardgre6tapeditserver_mnu()
            break
        else:
            print("Invalid choice.")


def wireguard_gre6tapsec_noconjuction_1iran_5kharej():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print(
        "\033[92m(   ) \033[93mWireguard + GRE6TAP IPSEC \033[92m[1]IRAN Server\033[96m [5]Kharej Client\033[93m Edit Menu\033[0m"
    )
    print(
        '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
    )
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[92mKharej Client [1] Config\033[0m")
    print("2. \033[92mKharej Client [2] Config\033[0m")
    print("3. \033[92mKharej Client [3] Config\033[0m")
    print("4. \033[93mKharej Client [4] Config\033[0m")
    print("5. \033[92mKharej Client [5] Config\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    print("6. \033[96mIRAN Server Config\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    print("0.\033[97mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")
    while True:
        server_type = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if server_type == "1":
            wireguardafter_gre6tapnsec_kharej_client1()
            break
        elif server_type == "2":
            wireguardafter_gre6tapnsec_kharej_client2()
            break
        elif server_type == "3":
            wireguardafter_gre6tapnsec_kharej_client3()
            break
        elif server_type == "4":
            wireguardafter_gre6tapnsec_kharej_client4()
            break
        elif server_type == "5":
            wireguardafter_gre6tapnsec_kharej_client5()
            break
        elif server_type == "6":
            wireguardafter_gre6tapnsec_iran_server()
            break
        elif server_type == "0":
            os.system("clear")
            wireguardgre6tap_sec_edit_local()
            break
        else:
            print("Invalid choice.")


def wireguardafter_gre6tapnsec_iran_server():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print(
        "\033[92m(   ) \033[93mWireguard + GRE6TAP IPSEC \033[92m[1]IRAN Server\033[96m [5]Kharej Client\033[93m Edit Menu\033[0m"
    )
    print(
        '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
    )
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[92mIRAN Server Config [1] \033[0m")
    print("2. \033[92mIRAN Server Config [2]\033[0m")
    print("3. \033[93mIRAN Server Config [3]\033[0m")
    print("4. \033[92mIRAN Server Config [4]\033[0m")
    print("5. \033[92mIRAN Server Config [5]\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    print("0.\033[97mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")
    while True:
        server_type = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if server_type == "1":
            wireguardafter_gre6tapnsec_iranconfig_1()
            break
        elif server_type == "2":
            wireguardafter_gre6tapnsec_iranconfig_2()
            break
        elif server_type == "3":
            wireguardafter_gre6tapnsec_iranconfig_3()
            break
        elif server_type == "4":
            wireguardafter_gre6tapnsec_iranconfig_4()
            break
        elif server_type == "5":
            wireguardafter_gre6tapnsec_iranconfig_5()
            break
        elif server_type == "0":
            os.system("clear")
            wireguard_gre6tapsec_noconjuction_1iran_5kharej()
            break
        else:
            print("Invalid choice.")


def wireguard_gre6tapsec_noconjuction_kharej1_5iran():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print(
        "\033[92m(   ) \033[93mWireguard + GRE6TAP IPSEC \033[92m[1]Kharej Server\033[96m [5]IRAN Client\033[93m Edit Menu\033[0m"
    )
    print(
        '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
    )
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[92mIRAN Client [1] Config\033[0m")
    print("2. \033[92mIRAN Client [2] Config\033[0m")
    print("3. \033[92mIRAN Client [3] Config\033[0m")
    print("4. \033[93mIRAN Client [4] Config\033[0m")
    print("5. \033[92mIRAN Client [5] Config\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    print("6. \033[96mKharej Server Config\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    print("0.\033[97mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")
    while True:
        server_type = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if server_type == "1":
            wireguardafter_gre6tapnsec_iran_client1()
            break
        elif server_type == "2":
            wireguardafter_gre6tapnsec_iran_client2()
            break
        elif server_type == "3":
            wireguardafter_gre6tapnsec_iran_client3()
            break
        elif server_type == "4":
            wireguardafter_gre6tapnsec_iran_client4()
            break
        elif server_type == "5":
            wireguardafter_gre6tapnsec_iran_client5()
            break
        elif server_type == "6":
            wireguardafter_gre6tapnsec_kharej_server()
            break
        elif server_type == "0":
            os.system("clear")
            wireguardgre6tap_sec_edit_local()
            break
        else:
            print("Invalid choice.")


def wireguardafter_gre6tapnsec_kharej_server():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print(
        "\033[92m(   ) \033[93mWireguard + GRE6TAP IPSEC \033[92m[1]Kharej Server\033[96m [5]IRAN Client\033[93m Edit Menu\033[0m"
    )
    print(
        '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
    )
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[92mKharej Server Config [1] \033[0m")
    print("2. \033[92mKharej Server Config [2]\033[0m")
    print("3. \033[93mKharej Server Config [3]\033[0m")
    print("4. \033[92mKharej Server Config [4]\033[0m")
    print("5. \033[92mKharej Server Config [5]\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    print("0.\033[97mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")
    while True:
        server_type = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if server_type == "1":
            wireguardafter_gre6tapnsec_kharejconfig_1()
            break
        elif server_type == "2":
            wireguardafter_gre6tapnsec_kharejconfig_2()
            break
        elif server_type == "3":
            wireguardafter_gre6tapnsec_kharejconfig_3()
            break
        elif server_type == "4":
            wireguardafter_gre6tapnsec_kharejconfig_4()
            break
        elif server_type == "5":
            wireguardafter_gre6tapnsec_kharejconfig_5()
            break
        elif server_type == "0":
            os.system("clear")
            wireguard_gre6tapsec_noconjuction_kharej1_5iran()
            break
        else:
            print("Invalid choice.")


def wireguardafter_gre6tapn_kharejconfig_1():
    wireguard_config_path = "/etc/wireguard/wireserver1.conf"
    gre6_path = "/etc/gre61.sh"
    new_gre6_private_ip = None

    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig(wireguard_config_path)
    )

    local_ip_gre6 = local_ip(gre6_path)
    remote_ip_gre6 = remote_ip(gre6_path)
    private_ip_gre6 = private_gre6tap(gre6_path)

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCould not retrieve the WireGuard configuration.\033[0m")
        return

    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("Could not retrieve the GRE6TAP IP addresses from gre6 file.")
        return

    while True:
        os.system("clear")
        display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips)
        display_stuff_gre6tapn(local_ip_gre6, remote_ip_gre6, private_ip_gre6)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[93mWireGuard & GRE6TAP\033[97m Kharej Server Config\033[92m [1]\033[93m Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print(" \033[93mThis is Kharej Server \033[97mConfig [1]\033[0m")
        print("1. \033[93mChange \033[97mWireGuard Private IP Address\033[0m")
        print("2. \033[93mChange \033[97mGRE6TAP\033[93m Private IP Address\033[0m")
        print("3. \033[93mChange \033[92mTunnel Port\033[0m")
        print(
            "4.\033[93m Change \033[92mIRAN Client [1] IP \033[96m(Endpoint IP)\033[0m"
        )
        print("5. \033[92mSave and Exit\033[0m")
        print("0. Back to the previous menu")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice: ")

        if choice == "1":
            new_ip = input("\033[93mEnter New WireGuard Private IP Address : \033[0m")
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                local_ip_gre6 = new_ip
                remote_ip_gre6 = wtb_opposite_ip_wireguard(new_ip)
                allowed_ips = (
                    f"{remote_ip_gre6}/128" if ":" in new_ip else f"{remote_ip_gre6}/32"
                )

                update_gre6tap_ips(
                    gre6_path, new_local_ip=new_ip, new_remote_ip=remote_ip_gre6
                )
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec1(remote_ip_gre6)

            else:
                print("\033[91mInvalid IP Address!\033[0m")

        elif choice == "2":
            new_gre6_private_ip = input(
                "\033[93mEnter New GRE6TAP Private IP Address : \033[0m"
            )
            if new_gre6_private_ip:
                private_ip_gre6 = new_gre6_private_ip
                update_gre6tap_ips(gre6_path, new_private_ip=private_ip_gre6)
            else:
                print("\033[91mInvalid GRE6TAP Private IP Address!\033[0m")

        elif choice == "3":
            listen_port, endpoint = update_tunnel_port(listen_port, endpoint)
            update_ufw_ruleswireguard(
                address_no_subnet, address_no_subnet, listen_port, listen_port
            )
        elif choice == "4":
            endpoint = update_endpoint_ip1(endpoint)

        elif choice == "5":
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "Endpoint": endpoint,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig1(wireguard_config_path, new_config)

            save_stuff_gretap61(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            break

        elif choice == "0":
            wireguard_gre6tap_noconjuction_kharej1_5iran()
            break

        else:
            print("\033[91mPlease select a valid option.\033[0m")


def wireguardafter_gre6tapn_kharejconfig_2():
    wireguard_config_path = "/etc/wireguard/wireserver2.conf"
    gre6_path = "/etc/gre62.sh"
    new_gre6_private_ip = None

    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig(wireguard_config_path)
    )

    local_ip_gre6 = local_ip(gre6_path)
    remote_ip_gre6 = remote_ip(gre6_path)
    private_ip_gre6 = private_gre6tap(gre6_path)

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCould not retrieve the WireGuard configuration.\033[0m")
        return

    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("Could not retrieve the GRE6TAP IP addresses from gre6 file.")
        return

    while True:
        os.system("clear")
        display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips)
        display_stuff_gre6tapn(local_ip_gre6, remote_ip_gre6, private_ip_gre6)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[93mWireGuard & GRE6TAP\033[97m Kharej Server Config\033[92m [2]\033[93m Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print(" \033[93mThis is Kharej Server \033[97mConfig [2]\033[0m")
        print("1. \033[93mChange \033[97mWireGuard Private IP Address\033[0m")
        print("2. \033[93mChange \033[97mGRE6TAP\033[93m Private IP Address\033[0m")
        print("3. \033[93mChange \033[92mTunnel Port\033[0m")
        print(
            "4.\033[93m Change \033[92mIRAN Client [2] IP \033[96m(Endpoint IP)\033[0m"
        )
        print("5. \033[92mSave and Exit\033[0m")
        print("0. Back to the previous menu")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice: ")

        if choice == "1":
            new_ip = input("\033[93mEnter New WireGuard Private IP Address : \033[0m")
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                local_ip_gre6 = new_ip
                remote_ip_gre6 = wtb_opposite_ip_wireguard(new_ip)
                allowed_ips = (
                    f"{remote_ip_gre6}/128" if ":" in new_ip else f"{remote_ip_gre6}/32"
                )

                update_gre6tap_ips(
                    gre6_path, new_local_ip=new_ip, new_remote_ip=remote_ip_gre6
                )
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec2(remote_ip_gre6)

            else:
                print("\033[91mInvalid IP Address!\033[0m")

        elif choice == "2":
            new_gre6_private_ip = input(
                "\033[93mEnter New GRE6TAP Private IP Address : \033[0m"
            )
            if new_gre6_private_ip:
                private_ip_gre6 = new_gre6_private_ip
                update_gre6tap_ips(gre6_path, new_private_ip=private_ip_gre6)
            else:
                print("\033[91mInvalid GRE6TAP Private IP Address!\033[0m")

        elif choice == "3":
            listen_port, endpoint = update_tunnel_port(listen_port, endpoint)
            update_ufw_ruleswireguard(
                address_no_subnet, address_no_subnet, listen_port, listen_port
            )
        elif choice == "4":
            endpoint = update_endpoint_ip2(endpoint)

        elif choice == "5":
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "Endpoint": endpoint,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig2(wireguard_config_path, new_config)

            save_stuff_gretap62(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            break

        elif choice == "0":
            wireguard_gre6tap_noconjuction_kharej1_5iran()
            break

        else:
            print("\033[91mPlease select a valid option.\033[0m")


def wireguardafter_gre6tapn_kharejconfig_3():
    wireguard_config_path = "/etc/wireguard/wireserver3.conf"
    gre6_path = "/etc/gre63.sh"
    new_gre6_private_ip = None

    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig(wireguard_config_path)
    )

    local_ip_gre6 = local_ip(gre6_path)
    remote_ip_gre6 = remote_ip(gre6_path)
    private_ip_gre6 = private_gre6tap(gre6_path)

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCould not retrieve the WireGuard configuration.\033[0m")
        return

    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("Could not retrieve the GRE6TAP IP addresses from gre6 file.")
        return

    while True:
        os.system("clear")
        display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips)
        display_stuff_gre6tapn(local_ip_gre6, remote_ip_gre6, private_ip_gre6)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[93mWireGuard & GRE6TAP\033[97m Kharej Server Config\033[92m [3]\033[93m Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print(" \033[93mThis is Kharej Server \033[97mConfig [3]\033[0m")
        print("1. \033[93mChange \033[97mWireGuard Private IP Address\033[0m")
        print("2. \033[93mChange \033[97mGRE6TAP\033[93m Private IP Address\033[0m")
        print("3. \033[93mChange \033[92mTunnel Port\033[0m")
        print(
            "4.\033[93m Change \033[92mIRAN Client [3] IP \033[96m(Endpoint IP)\033[0m"
        )
        print("5. \033[92mSave and Exit\033[0m")
        print("0. Back to the previous menu")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice: ")

        if choice == "1":
            new_ip = input("\033[93mEnter New WireGuard Private IP Address : \033[0m")
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                local_ip_gre6 = new_ip
                remote_ip_gre6 = wtb_opposite_ip_wireguard(new_ip)
                allowed_ips = (
                    f"{remote_ip_gre6}/128" if ":" in new_ip else f"{remote_ip_gre6}/32"
                )

                update_gre6tap_ips(
                    gre6_path, new_local_ip=new_ip, new_remote_ip=remote_ip_gre6
                )
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec3(remote_ip_gre6)

            else:
                print("\033[91mInvalid IP Address!\033[0m")

        elif choice == "2":
            new_gre6_private_ip = input(
                "\033[93mEnter New GRE6TAP Private IP Address : \033[0m"
            )
            if new_gre6_private_ip:
                private_ip_gre6 = new_gre6_private_ip
                update_gre6tap_ips(gre6_path, new_private_ip=private_ip_gre6)
            else:
                print("\033[91mInvalid GRE6TAP Private IP Address!\033[0m")

        elif choice == "3":
            listen_port, endpoint = update_tunnel_port(listen_port, endpoint)
            update_ufw_ruleswireguard(
                address_no_subnet, address_no_subnet, listen_port, listen_port
            )
        elif choice == "4":
            endpoint = update_endpoint_ip3(endpoint)

        elif choice == "5":
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "Endpoint": endpoint,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig3(wireguard_config_path, new_config)

            save_stuff_gretap63(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            break

        elif choice == "0":
            wireguard_gre6tap_noconjuction_kharej1_5iran()
            break

        else:
            print("\033[91mPlease select a valid option.\033[0m")


def wireguardafter_gre6tapn_kharejconfig_4():
    wireguard_config_path = "/etc/wireguard/wireserver4.conf"
    gre6_path = "/etc/gre64.sh"
    new_gre6_private_ip = None

    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig(wireguard_config_path)
    )

    local_ip_gre6 = local_ip(gre6_path)
    remote_ip_gre6 = remote_ip(gre6_path)
    private_ip_gre6 = private_gre6tap(gre6_path)

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCould not retrieve the WireGuard configuration.\033[0m")
        return

    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("Could not retrieve the GRE6TAP IP addresses from gre6 file.")
        return

    while True:
        os.system("clear")
        display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips)
        display_stuff_gre6tapn(local_ip_gre6, remote_ip_gre6, private_ip_gre6)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[93mWireGuard & GRE6TAP\033[97m Kharej Server Config\033[92m [4]\033[93m Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print(" \033[93mThis is Kharej Server \033[97mConfig [4]\033[0m")
        print("1. \033[93mChange \033[97mWireGuard Private IP Address\033[0m")
        print("2. \033[93mChange \033[97mGRE6TAP\033[93m Private IP Address\033[0m")
        print("3. \033[93mChange \033[92mTunnel Port\033[0m")
        print(
            "4.\033[93m Change \033[92mIRAN Client [4] IP \033[96m(Endpoint IP)\033[0m"
        )
        print("5. \033[92mSave and Exit\033[0m")
        print("0. Back to the previous menu")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice: ")

        if choice == "1":
            new_ip = input("\033[93mEnter New WireGuard Private IP Address : \033[0m")
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                local_ip_gre6 = new_ip
                remote_ip_gre6 = wtb_opposite_ip_wireguard(new_ip)
                allowed_ips = (
                    f"{remote_ip_gre6}/128" if ":" in new_ip else f"{remote_ip_gre6}/32"
                )

                update_gre6tap_ips(
                    gre6_path, new_local_ip=new_ip, new_remote_ip=remote_ip_gre6
                )
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec4(remote_ip_gre6)

            else:
                print("\033[91mInvalid IP Address!\033[0m")

        elif choice == "2":
            new_gre6_private_ip = input(
                "\033[93mEnter New GRE6TAP Private IP Address : \033[0m"
            )
            if new_gre6_private_ip:
                private_ip_gre6 = new_gre6_private_ip
                update_gre6tap_ips(gre6_path, new_private_ip=private_ip_gre6)
            else:
                print("\033[91mInvalid GRE6TAP Private IP Address!\033[0m")

        elif choice == "3":
            listen_port, endpoint = update_tunnel_port(listen_port, endpoint)
            update_ufw_ruleswireguard(
                address_no_subnet, address_no_subnet, listen_port, listen_port
            )
        elif choice == "4":
            endpoint = update_endpoint_ip4(endpoint)

        elif choice == "5":
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "Endpoint": endpoint,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig4(wireguard_config_path, new_config)

            save_stuff_gretap64(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            break

        elif choice == "0":
            wireguard_gre6tap_noconjuction_kharej1_5iran()
            break

        else:
            print("\033[91mPlease select a valid option.\033[0m")


def wireguardafter_gre6tapn_kharejconfig_5():
    wireguard_config_path = "/etc/wireguard/wireserver5.conf"
    gre6_path = "/etc/gre65.sh"
    new_gre6_private_ip = None

    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig(wireguard_config_path)
    )

    local_ip_gre6 = local_ip(gre6_path)
    remote_ip_gre6 = remote_ip(gre6_path)
    private_ip_gre6 = private_gre6tap(gre6_path)

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCould not retrieve the WireGuard configuration.\033[0m")
        return

    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("Could not retrieve the GRE6TAP IP addresses from gre6 file.")
        return

    while True:
        os.system("clear")
        display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips)
        display_stuff_gre6tapn(local_ip_gre6, remote_ip_gre6, private_ip_gre6)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[93mWireGuard & GRE6TAP\033[97m Kharej Server Config\033[92m [5]\033[93m Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print(" \033[93mThis is Kharej Server \033[97mConfig [5]\033[0m")
        print("1. \033[93mChange \033[97mWireGuard Private IP Address\033[0m")
        print("2. \033[93mChange \033[97mGRE6TAP\033[93m Private IP Address\033[0m")
        print("3. \033[93mChange \033[92mTunnel Port\033[0m")
        print(
            "4.\033[93m Change \033[92mIRAN Client [5] IP \033[96m(Endpoint IP)\033[0m"
        )
        print("5. \033[92mSave and Exit\033[0m")
        print("0. Back to the previous menu")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice: ")

        if choice == "1":
            new_ip = input("\033[93mEnter New WireGuard Private IP Address : \033[0m")
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                local_ip_gre6 = new_ip
                remote_ip_gre6 = wtb_opposite_ip_wireguard(new_ip)
                allowed_ips = (
                    f"{remote_ip_gre6}/128" if ":" in new_ip else f"{remote_ip_gre6}/32"
                )

                update_gre6tap_ips(
                    gre6_path, new_local_ip=new_ip, new_remote_ip=remote_ip_gre6
                )
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec5(remote_ip_gre6)

            else:
                print("\033[91mInvalid IP Address!\033[0m")

        elif choice == "2":
            new_gre6_private_ip = input(
                "\033[93mEnter New GRE6TAP Private IP Address : \033[0m"
            )
            if new_gre6_private_ip:
                private_ip_gre6 = new_gre6_private_ip
                update_gre6tap_ips(gre6_path, new_private_ip=private_ip_gre6)
            else:
                print("\033[91mInvalid GRE6TAP Private IP Address!\033[0m")

        elif choice == "3":
            listen_port, endpoint = update_tunnel_port(listen_port, endpoint)
            update_ufw_ruleswireguard(
                address_no_subnet, address_no_subnet, listen_port, listen_port
            )
        elif choice == "4":
            endpoint = update_endpoint_ip5(endpoint)

        elif choice == "5":
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "Endpoint": endpoint,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig5(wireguard_config_path, new_config)

            save_stuff_gretap65(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            break

        elif choice == "0":
            wireguard_gre6tap_noconjuction_kharej1_5iran()
            break

        else:
            print("\033[91mPlease select a valid option.\033[0m")


def wireguardafter_gre6tapn_iran_client1():
    wireguard_config_path = "/etc/wireguard/wireclient.conf"
    gre6_path = "/etc/gre61.sh"
    new_gre6_private_ip = None

    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig(wireguard_config_path)
    )

    local_ip_gre6 = local_ip(gre6_path)
    remote_ip_gre6 = remote_ip(gre6_path)
    private_ip_gre6 = private_gre6tap(gre6_path)

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCould not retrieve the WireGuard configuration.\033[0m")
        return

    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("Could not retrieve the GRE6TAP IP addresses from gre6 file.")
        return

    while True:
        os.system("clear")
        display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips)
        display_stuff_gre6tapn(local_ip_gre6, remote_ip_gre6, private_ip_gre6)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[93mWireGuard & GRE6TAP\033[97m IRAN Client\033[92m [1]\033[93m Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print(" \033[93mThis is IRAN Client \033[97m[1]\033[0m")
        print("1. \033[93mChange \033[97mWireGuard Private IP Address\033[0m")
        print("2. \033[93mChange \033[97mGRE6TAP\033[93m Private IP Address\033[0m")
        print("3. \033[93mChange \033[92mTunnel Port\033[0m")
        print("4.\033[93m Change \033[92mKharej Server IP \033[96m(Endpoint IP)\033[0m")
        print("5. \033[92mSave and Exit\033[0m")
        print("0. Back to the previous menu")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice: ")

        if choice == "1":
            new_ip = input("\033[93mEnter New WireGuard Private IP Address : \033[0m")
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                local_ip_gre6 = new_ip
                remote_ip_gre6 = wtb_opposite_ip_wireguard(new_ip)
                allowed_ips = (
                    f"{remote_ip_gre6}/128" if ":" in new_ip else f"{remote_ip_gre6}/32"
                )

                update_gre6tap_ips(
                    gre6_path, new_local_ip=new_ip, new_remote_ip=remote_ip_gre6
                )
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec_client(remote_ip_gre6)

            else:
                print("\033[91mInvalid IP Address!\033[0m")

        elif choice == "2":
            new_gre6_private_ip = input(
                "\033[93mEnter New GRE6TAP Private IP Address : \033[0m"
            )
            if new_gre6_private_ip:
                private_ip_gre6 = new_gre6_private_ip
                update_gre6tap_ips(gre6_path, new_private_ip=private_ip_gre6)
            else:
                print("\033[91mInvalid GRE6TAP Private IP Address!\033[0m")

        elif choice == "3":
            listen_port, endpoint = update_tunnel_port(listen_port, endpoint)
            update_ufw_ruleswireguard(
                address_no_subnet, address_no_subnet, listen_port, listen_port
            )
        elif choice == "4":
            endpoint = update_endpoint_ip_server(endpoint)

        elif choice == "5":
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "Endpoint": endpoint,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_client(wireguard_config_path, new_config)

            save_stuff_gretap61(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            break

        elif choice == "0":
            wireguard_gre6tap_noconjuction_kharej1_5iran()
            break

        else:
            print("\033[91mPlease select a valid option.\033[0m")


def wireguardafter_gre6tapn_iran_client2():
    wireguard_config_path = "/etc/wireguard/wireclient.conf"
    gre6_path = "/etc/gre62.sh"
    new_gre6_private_ip = None

    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig(wireguard_config_path)
    )

    local_ip_gre6 = local_ip(gre6_path)
    remote_ip_gre6 = remote_ip(gre6_path)
    private_ip_gre6 = private_gre6tap(gre6_path)

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCould not retrieve the WireGuard configuration.\033[0m")
        return

    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("Could not retrieve the GRE6TAP IP addresses from gre6 file.")
        return

    while True:
        os.system("clear")
        display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips)
        display_stuff_gre6tapn(local_ip_gre6, remote_ip_gre6, private_ip_gre6)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[93mWireGuard & GRE6TAP\033[97m IRAN Client\033[92m [2]\033[93m Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print(" \033[93mThis is IRAN Client \033[97m[2]\033[0m")
        print("1. \033[93mChange \033[97mWireGuard Private IP Address\033[0m")
        print("2. \033[93mChange \033[97mGRE6TAP\033[93m Private IP Address\033[0m")
        print("3. \033[93mChange \033[92mTunnel Port\033[0m")
        print("4.\033[93m Change \033[92mKharej Server IP \033[96m(Endpoint IP)\033[0m")
        print("5. \033[92mSave and Exit\033[0m")
        print("0. Back to the previous menu")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice: ")

        if choice == "1":
            new_ip = input("\033[93mEnter New WireGuard Private IP Address : \033[0m")
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                local_ip_gre6 = new_ip
                remote_ip_gre6 = wtb_opposite_ip_wireguard(new_ip)
                allowed_ips = (
                    f"{remote_ip_gre6}/128" if ":" in new_ip else f"{remote_ip_gre6}/32"
                )

                update_gre6tap_ips(
                    gre6_path, new_local_ip=new_ip, new_remote_ip=remote_ip_gre6
                )
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec_client(remote_ip_gre6)

            else:
                print("\033[91mInvalid IP Address!\033[0m")

        elif choice == "2":
            new_gre6_private_ip = input(
                "\033[93mEnter New GRE6TAP Private IP Address : \033[0m"
            )
            if new_gre6_private_ip:
                private_ip_gre6 = new_gre6_private_ip
                update_gre6tap_ips(gre6_path, new_private_ip=private_ip_gre6)
            else:
                print("\033[91mInvalid GRE6TAP Private IP Address!\033[0m")

        elif choice == "3":
            listen_port, endpoint = update_tunnel_port(listen_port, endpoint)
            update_ufw_ruleswireguard(
                address_no_subnet, address_no_subnet, listen_port, listen_port
            )
        elif choice == "4":
            endpoint = update_endpoint_ip_server(endpoint)

        elif choice == "5":
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "Endpoint": endpoint,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_client(wireguard_config_path, new_config)

            save_stuff_gretap62(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            break

        elif choice == "0":
            wireguard_gre6tap_noconjuction_kharej1_5iran()
            break

        else:
            print("\033[91mPlease select a valid option.\033[0m")


def wireguardafter_gre6tapn_iran_client3():
    wireguard_config_path = "/etc/wireguard/wireclient.conf"
    gre6_path = "/etc/gre63.sh"
    new_gre6_private_ip = None

    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig(wireguard_config_path)
    )

    local_ip_gre6 = local_ip(gre6_path)
    remote_ip_gre6 = remote_ip(gre6_path)
    private_ip_gre6 = private_gre6tap(gre6_path)

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCould not retrieve the WireGuard configuration.\033[0m")
        return

    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("Could not retrieve the GRE6TAP IP addresses from gre6 file.")
        return

    while True:
        os.system("clear")
        display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips)
        display_stuff_gre6tapn(local_ip_gre6, remote_ip_gre6, private_ip_gre6)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[93mWireGuard & GRE6TAP\033[97m IRAN Client\033[92m [3]\033[93m Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print(" \033[93mThis is IRAN Client \033[97m[3]\033[0m")
        print("1. \033[93mChange \033[97mWireGuard Private IP Address\033[0m")
        print("2. \033[93mChange \033[97mGRE6TAP\033[93m Private IP Address\033[0m")
        print("3. \033[93mChange \033[92mTunnel Port\033[0m")
        print("4.\033[93m Change \033[92mKharej Server IP \033[96m(Endpoint IP)\033[0m")
        print("5. \033[92mSave and Exit\033[0m")
        print("0. Back to the previous menu")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice: ")

        if choice == "1":
            new_ip = input("\033[93mEnter New WireGuard Private IP Address : \033[0m")
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                local_ip_gre6 = new_ip
                remote_ip_gre6 = wtb_opposite_ip_wireguard(new_ip)
                allowed_ips = (
                    f"{remote_ip_gre6}/128" if ":" in new_ip else f"{remote_ip_gre6}/32"
                )

                update_gre6tap_ips(
                    gre6_path, new_local_ip=new_ip, new_remote_ip=remote_ip_gre6
                )
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec_client(remote_ip_gre6)

            else:
                print("\033[91mInvalid IP Address!\033[0m")

        elif choice == "2":
            new_gre6_private_ip = input(
                "\033[93mEnter New GRE6TAP Private IP Address : \033[0m"
            )
            if new_gre6_private_ip:
                private_ip_gre6 = new_gre6_private_ip
                update_gre6tap_ips(gre6_path, new_private_ip=private_ip_gre6)
            else:
                print("\033[91mInvalid GRE6TAP Private IP Address!\033[0m")

        elif choice == "3":
            listen_port, endpoint = update_tunnel_port(listen_port, endpoint)
            update_ufw_ruleswireguard(
                address_no_subnet, address_no_subnet, listen_port, listen_port
            )
        elif choice == "4":
            endpoint = update_endpoint_ip_server(endpoint)

        elif choice == "5":
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "Endpoint": endpoint,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_client(wireguard_config_path, new_config)

            save_stuff_gretap63(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            break

        elif choice == "0":
            wireguard_gre6tap_noconjuction_kharej1_5iran()
            break

        else:
            print("\033[91mPlease select a valid option.\033[0m")


def wireguardafter_gre6tapn_iran_client4():
    wireguard_config_path = "/etc/wireguard/wireclient.conf"
    gre6_path = "/etc/gre64.sh"
    new_gre6_private_ip = None

    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig(wireguard_config_path)
    )

    local_ip_gre6 = local_ip(gre6_path)
    remote_ip_gre6 = remote_ip(gre6_path)
    private_ip_gre6 = private_gre6tap(gre6_path)

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCould not retrieve the WireGuard configuration.\033[0m")
        return

    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("Could not retrieve the GRE6TAP IP addresses from gre6 file.")
        return

    while True:
        os.system("clear")
        display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips)
        display_stuff_gre6tapn(local_ip_gre6, remote_ip_gre6, private_ip_gre6)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[93mWireGuard & GRE6TAP\033[97m IRAN Client\033[92m [4]\033[93m Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print(" \033[93mThis is IRAN Client \033[97m[4]\033[0m")
        print("1. \033[93mChange \033[97mWireGuard Private IP Address\033[0m")
        print("2. \033[93mChange \033[97mGRE6TAP\033[93m Private IP Address\033[0m")
        print("3. \033[93mChange \033[92mTunnel Port\033[0m")
        print("4.\033[93m Change \033[92mKharej Server IP \033[96m(Endpoint IP)\033[0m")
        print("5. \033[92mSave and Exit\033[0m")
        print("0. Back to the previous menu")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice: ")

        if choice == "1":
            new_ip = input("\033[93mEnter New WireGuard Private IP Address : \033[0m")
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                local_ip_gre6 = new_ip
                remote_ip_gre6 = wtb_opposite_ip_wireguard(new_ip)
                allowed_ips = (
                    f"{remote_ip_gre6}/128" if ":" in new_ip else f"{remote_ip_gre6}/32"
                )

                update_gre6tap_ips(
                    gre6_path, new_local_ip=new_ip, new_remote_ip=remote_ip_gre6
                )
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec_client(remote_ip_gre6)

            else:
                print("\033[91mInvalid IP Address!\033[0m")

        elif choice == "2":
            new_gre6_private_ip = input(
                "\033[93mEnter New GRE6TAP Private IP Address : \033[0m"
            )
            if new_gre6_private_ip:
                private_ip_gre6 = new_gre6_private_ip
                update_gre6tap_ips(gre6_path, new_private_ip=private_ip_gre6)
            else:
                print("\033[91mInvalid GRE6TAP Private IP Address!\033[0m")

        elif choice == "3":
            listen_port, endpoint = update_tunnel_port(listen_port, endpoint)
            update_ufw_ruleswireguard(
                address_no_subnet, address_no_subnet, listen_port, listen_port
            )
        elif choice == "4":
            endpoint = update_endpoint_ip_server(endpoint)

        elif choice == "5":
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "Endpoint": endpoint,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_client(wireguard_config_path, new_config)

            save_stuff_gretap64(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            break

        elif choice == "0":
            wireguard_gre6tap_noconjuction_kharej1_5iran()
            break

        else:
            print("\033[91mPlease select a valid option.\033[0m")


def wireguardafter_gre6tapn_iran_client5():
    wireguard_config_path = "/etc/wireguard/wireclient.conf"
    gre6_path = "/etc/gre65.sh"
    new_gre6_private_ip = None

    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig(wireguard_config_path)
    )

    local_ip_gre6 = local_ip(gre6_path)
    remote_ip_gre6 = remote_ip(gre6_path)
    private_ip_gre6 = private_gre6tap(gre6_path)

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCould not retrieve the WireGuard configuration.\033[0m")
        return

    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("Could not retrieve the GRE6TAP IP addresses from gre6 file.")
        return

    while True:
        os.system("clear")
        display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips)
        display_stuff_gre6tapn(local_ip_gre6, remote_ip_gre6, private_ip_gre6)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[93mWireGuard & GRE6TAP\033[97m IRAN Client\033[92m [5]\033[93m Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print(" \033[93mThis is IRAN Client \033[97m[5]\033[0m")
        print("1. \033[93mChange \033[97mWireGuard Private IP Address\033[0m")
        print("2. \033[93mChange \033[97mGRE6TAP\033[93m Private IP Address\033[0m")
        print("3. \033[93mChange \033[92mTunnel Port\033[0m")
        print("4.\033[93m Change \033[92mKharej Server IP \033[96m(Endpoint IP)\033[0m")
        print("5. \033[92mSave and Exit\033[0m")
        print("0. Back to the previous menu")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice: ")

        if choice == "1":
            new_ip = input("\033[93mEnter New WireGuard Private IP Address : \033[0m")
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                local_ip_gre6 = new_ip
                remote_ip_gre6 = wtb_opposite_ip_wireguard(new_ip)
                allowed_ips = (
                    f"{remote_ip_gre6}/128" if ":" in new_ip else f"{remote_ip_gre6}/32"
                )

                update_gre6tap_ips(
                    gre6_path, new_local_ip=new_ip, new_remote_ip=remote_ip_gre6
                )
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec_client(remote_ip_gre6)

            else:
                print("\033[91mInvalid IP Address!\033[0m")

        elif choice == "2":
            new_gre6_private_ip = input(
                "\033[93mEnter New GRE6TAP Private IP Address : \033[0m"
            )
            if new_gre6_private_ip:
                private_ip_gre6 = new_gre6_private_ip
                update_gre6tap_ips(gre6_path, new_private_ip=private_ip_gre6)
            else:
                print("\033[91mInvalid GRE6TAP Private IP Address!\033[0m")

        elif choice == "3":
            listen_port, endpoint = update_tunnel_port(listen_port, endpoint)
            update_ufw_ruleswireguard(
                address_no_subnet, address_no_subnet, listen_port, listen_port
            )
        elif choice == "4":
            endpoint = update_endpoint_ip_server(endpoint)

        elif choice == "5":
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "Endpoint": endpoint,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_client(wireguard_config_path, new_config)

            save_stuff_gretap65(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            break

        elif choice == "0":
            wireguard_gre6tap_noconjuction_kharej1_5iran()
            break

        else:
            print("\033[91mPlease select a valid option.\033[0m")


# 1 iran 5 kharej client


def wireguardafter_gre6tapn_iranconfig_1():
    wireguard_config_path = "/etc/wireguard/wireserver1.conf"
    gre6_path = "/etc/gre61.sh"
    new_gre6_private_ip = None

    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig(wireguard_config_path)
    )

    local_ip_gre6 = local_ip(gre6_path)
    remote_ip_gre6 = remote_ip(gre6_path)
    private_ip_gre6 = private_gre6tap(gre6_path)

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCould not retrieve the WireGuard configuration.\033[0m")
        return

    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("Could not retrieve the GRE6TAP IP addresses from gre6 file.")
        return

    while True:
        os.system("clear")
        display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips)
        display_stuff_gre6tapn(local_ip_gre6, remote_ip_gre6, private_ip_gre6)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[93mWireGuard & GRE6TAP\033[97m IRAN Server Config\033[92m [1]\033[93m Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print(" \033[93mThis is IRAN Server \033[97mConfig [1]\033[0m")
        print("1. \033[93mChange \033[97mWireGuard Private IP Address\033[0m")
        print("2. \033[93mChange \033[97mGRE6TAP\033[93m Private IP Address\033[0m")
        print("3. \033[93mChange \033[92mTunnel Port\033[0m")
        print(
            "4.\033[93m Change \033[92mKharej Client [1] IP \033[96m(Endpoint IP)\033[0m"
        )
        print("5. \033[92mSave and Exit\033[0m")
        print("0. Back to the previous menu")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice: ")

        if choice == "1":
            new_ip = input("\033[93mEnter New WireGuard Private IP Address : \033[0m")
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                local_ip_gre6 = new_ip
                remote_ip_gre6 = wtb_opposite_ip_wireguard(new_ip)
                allowed_ips = (
                    f"{remote_ip_gre6}/128" if ":" in new_ip else f"{remote_ip_gre6}/32"
                )

                update_gre6tap_ips(
                    gre6_path, new_local_ip=new_ip, new_remote_ip=remote_ip_gre6
                )
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec1(remote_ip_gre6)

            else:
                print("\033[91mInvalid IP Address!\033[0m")

        elif choice == "2":
            new_gre6_private_ip = input(
                "\033[93mEnter New GRE6TAP Private IP Address : \033[0m"
            )
            if new_gre6_private_ip:
                private_ip_gre6 = new_gre6_private_ip
                update_gre6tap_ips(gre6_path, new_private_ip=private_ip_gre6)
            else:
                print("\033[91mInvalid GRE6TAP Private IP Address!\033[0m")

        elif choice == "3":
            listen_port, endpoint = update_tunnel_port(listen_port, endpoint)
            update_ufw_ruleswireguard(
                address_no_subnet, address_no_subnet, listen_port, listen_port
            )
        elif choice == "4":
            endpoint = update_endpoint_ir_ip1(endpoint)

        elif choice == "5":
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "Endpoint": endpoint,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig1(wireguard_config_path, new_config)

            save_stuff_gretap61(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            break

        elif choice == "0":
            wireguard_gre6tap_noconjuction_kharej1_5iran()
            break

        else:
            print("\033[91mPlease select a valid option.\033[0m")


def wireguardafter_gre6tapn_iranconfig_2():
    wireguard_config_path = "/etc/wireguard/wireserver2.conf"
    gre6_path = "/etc/gre62.sh"
    new_gre6_private_ip = None

    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig(wireguard_config_path)
    )

    local_ip_gre6 = local_ip(gre6_path)
    remote_ip_gre6 = remote_ip(gre6_path)
    private_ip_gre6 = private_gre6tap(gre6_path)

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCould not retrieve the WireGuard configuration.\033[0m")
        return

    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("Could not retrieve the GRE6TAP IP addresses from gre6 file.")
        return

    while True:
        os.system("clear")
        display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips)
        display_stuff_gre6tapn(local_ip_gre6, remote_ip_gre6, private_ip_gre6)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[93mWireGuard & GRE6TAP\033[97m IRAN Server Config\033[92m [2]\033[93m Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print(" \033[93mThis is IRAN Server \033[97mConfig [2]\033[0m")
        print("1. \033[93mChange \033[97mWireGuard Private IP Address\033[0m")
        print("2. \033[93mChange \033[97mGRE6TAP\033[93m Private IP Address\033[0m")
        print("3. \033[93mChange \033[92mTunnel Port\033[0m")
        print(
            "4.\033[93m Change \033[92mKharej Client [2] IP \033[96m(Endpoint IP)\033[0m"
        )
        print("5. \033[92mSave and Exit\033[0m")
        print("0. Back to the previous menu")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice: ")

        if choice == "1":
            new_ip = input("\033[93mEnter New WireGuard Private IP Address : \033[0m")
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                local_ip_gre6 = new_ip
                remote_ip_gre6 = wtb_opposite_ip_wireguard(new_ip)
                allowed_ips = (
                    f"{remote_ip_gre6}/128" if ":" in new_ip else f"{remote_ip_gre6}/32"
                )

                update_gre6tap_ips(
                    gre6_path, new_local_ip=new_ip, new_remote_ip=remote_ip_gre6
                )
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec2(remote_ip_gre6)

            else:
                print("\033[91mInvalid IP Address!\033[0m")

        elif choice == "2":
            new_gre6_private_ip = input(
                "\033[93mEnter New GRE6TAP Private IP Address : \033[0m"
            )
            if new_gre6_private_ip:
                private_ip_gre6 = new_gre6_private_ip
                update_gre6tap_ips(gre6_path, new_private_ip=private_ip_gre6)
            else:
                print("\033[91mInvalid GRE6TAP Private IP Address!\033[0m")

        elif choice == "3":
            listen_port, endpoint = update_tunnel_port(listen_port, endpoint)
            update_ufw_ruleswireguard(
                address_no_subnet, address_no_subnet, listen_port, listen_port
            )
        elif choice == "4":
            endpoint = update_endpoint_ir_ip2(endpoint)

        elif choice == "5":
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "Endpoint": endpoint,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig2(wireguard_config_path, new_config)

            save_stuff_gretap62(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            break

        elif choice == "0":
            wireguard_gre6tap_noconjuction_kharej1_5iran()
            break

        else:
            print("\033[91mPlease select a valid option.\033[0m")


def wireguardafter_gre6tapn_iranconfig_3():
    wireguard_config_path = "/etc/wireguard/wireserver3.conf"
    gre6_path = "/etc/gre63.sh"
    new_gre6_private_ip = None

    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig(wireguard_config_path)
    )

    local_ip_gre6 = local_ip(gre6_path)
    remote_ip_gre6 = remote_ip(gre6_path)
    private_ip_gre6 = private_gre6tap(gre6_path)

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCould not retrieve the WireGuard configuration.\033[0m")
        return

    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("Could not retrieve the GRE6TAP IP addresses from gre6 file.")
        return

    while True:
        os.system("clear")
        display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips)
        display_stuff_gre6tapn(local_ip_gre6, remote_ip_gre6, private_ip_gre6)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[93mWireGuard & GRE6TAP\033[97m IRAN Server Config\033[92m [3]\033[93m Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print(" \033[93mThis is IRAN Server \033[97mConfig [3]\033[0m")
        print("1. \033[93mChange \033[97mWireGuard Private IP Address\033[0m")
        print("2. \033[93mChange \033[97mGRE6TAP\033[93m Private IP Address\033[0m")
        print("3. \033[93mChange \033[92mTunnel Port\033[0m")
        print(
            "4.\033[93m Change \033[92mKharej Client [3] IP \033[96m(Endpoint IP)\033[0m"
        )
        print("5. \033[92mSave and Exit\033[0m")
        print("0. Back to the previous menu")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice: ")

        if choice == "1":
            new_ip = input("\033[93mEnter New WireGuard Private IP Address : \033[0m")
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                local_ip_gre6 = new_ip
                remote_ip_gre6 = wtb_opposite_ip_wireguard(new_ip)
                allowed_ips = (
                    f"{remote_ip_gre6}/128" if ":" in new_ip else f"{remote_ip_gre6}/32"
                )

                update_gre6tap_ips(
                    gre6_path, new_local_ip=new_ip, new_remote_ip=remote_ip_gre6
                )
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec3(remote_ip_gre6)

            else:
                print("\033[91mInvalid IP Address!\033[0m")

        elif choice == "2":
            new_gre6_private_ip = input(
                "\033[93mEnter New GRE6TAP Private IP Address : \033[0m"
            )
            if new_gre6_private_ip:
                private_ip_gre6 = new_gre6_private_ip
                update_gre6tap_ips(gre6_path, new_private_ip=private_ip_gre6)
            else:
                print("\033[91mInvalid GRE6TAP Private IP Address!\033[0m")

        elif choice == "3":
            listen_port, endpoint = update_tunnel_port(listen_port, endpoint)
            update_ufw_ruleswireguard(
                address_no_subnet, address_no_subnet, listen_port, listen_port
            )
        elif choice == "4":
            endpoint = update_endpoint_ir_ip3(endpoint)

        elif choice == "5":
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "Endpoint": endpoint,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig3(wireguard_config_path, new_config)

            save_stuff_gretap63(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            break

        elif choice == "0":
            wireguard_gre6tap_noconjuction_kharej1_5iran()
            break

        else:
            print("\033[91mPlease select a valid option.\033[0m")


def wireguardafter_gre6tapn_iranconfig_4():
    wireguard_config_path = "/etc/wireguard/wireserver4.conf"
    gre6_path = "/etc/gre64.sh"
    new_gre6_private_ip = None

    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig(wireguard_config_path)
    )

    local_ip_gre6 = local_ip(gre6_path)
    remote_ip_gre6 = remote_ip(gre6_path)
    private_ip_gre6 = private_gre6tap(gre6_path)

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCould not retrieve the WireGuard configuration.\033[0m")
        return

    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("Could not retrieve the GRE6TAP IP addresses from gre6 file.")
        return

    while True:
        os.system("clear")
        display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips)
        display_stuff_gre6tapn(local_ip_gre6, remote_ip_gre6, private_ip_gre6)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[93mWireGuard & GRE6TAP\033[97m IRAN Server Config\033[92m [4]\033[93m Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print(" \033[93mThis is IRAN Server \033[97mConfig [4]\033[0m")
        print("1. \033[93mChange \033[97mWireGuard Private IP Address\033[0m")
        print("2. \033[93mChange \033[97mGRE6TAP\033[93m Private IP Address\033[0m")
        print("3. \033[93mChange \033[92mTunnel Port\033[0m")
        print(
            "4.\033[93m Change \033[92mKharej Client [4] IP \033[96m(Endpoint IP)\033[0m"
        )
        print("5. \033[92mSave and Exit\033[0m")
        print("0. Back to the previous menu")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice: ")

        if choice == "1":
            new_ip = input("\033[93mEnter New WireGuard Private IP Address : \033[0m")
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                local_ip_gre6 = new_ip
                remote_ip_gre6 = wtb_opposite_ip_wireguard(new_ip)
                allowed_ips = (
                    f"{remote_ip_gre6}/128" if ":" in new_ip else f"{remote_ip_gre6}/32"
                )

                update_gre6tap_ips(
                    gre6_path, new_local_ip=new_ip, new_remote_ip=remote_ip_gre6
                )
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec4(remote_ip_gre6)

            else:
                print("\033[91mInvalid IP Address!\033[0m")

        elif choice == "2":
            new_gre6_private_ip = input(
                "\033[93mEnter New GRE6TAP Private IP Address : \033[0m"
            )
            if new_gre6_private_ip:
                private_ip_gre6 = new_gre6_private_ip
                update_gre6tap_ips(gre6_path, new_private_ip=private_ip_gre6)
            else:
                print("\033[91mInvalid GRE6TAP Private IP Address!\033[0m")

        elif choice == "3":
            listen_port, endpoint = update_tunnel_port(listen_port, endpoint)
            update_ufw_ruleswireguard(
                address_no_subnet, address_no_subnet, listen_port, listen_port
            )
        elif choice == "4":
            endpoint = update_endpoint_ir_ip4(endpoint)

        elif choice == "5":
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "Endpoint": endpoint,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig4(wireguard_config_path, new_config)

            save_stuff_gretap64(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            break

        elif choice == "0":
            wireguard_gre6tap_noconjuction_kharej1_5iran()
            break

        else:
            print("\033[91mPlease select a valid option.\033[0m")


def wireguardafter_gre6tapn_iranconfig_5():
    wireguard_config_path = "/etc/wireguard/wireserver5.conf"
    gre6_path = "/etc/gre65.sh"
    new_gre6_private_ip = None

    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig(wireguard_config_path)
    )

    local_ip_gre6 = local_ip(gre6_path)
    remote_ip_gre6 = remote_ip(gre6_path)
    private_ip_gre6 = private_gre6tap(gre6_path)

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCould not retrieve the WireGuard configuration.\033[0m")
        return

    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("Could not retrieve the GRE6TAP IP addresses from gre6 file.")
        return

    while True:
        os.system("clear")
        display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips)
        display_stuff_gre6tapn(local_ip_gre6, remote_ip_gre6, private_ip_gre6)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[93mWireGuard & GRE6TAP\033[97m IRAN Server Config\033[92m [5]\033[93m Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print(" \033[93mThis is IRAN Server \033[97mConfig [5]\033[0m")
        print("1. \033[93mChange \033[97mWireGuard Private IP Address\033[0m")
        print("2. \033[93mChange \033[97mGRE6TAP\033[93m Private IP Address\033[0m")
        print("3. \033[93mChange \033[92mTunnel Port\033[0m")
        print(
            "4.\033[93m Change \033[92mKharej Client [5] IP \033[96m(Endpoint IP)\033[0m"
        )
        print("5. \033[92mSave and Exit\033[0m")
        print("0. Back to the previous menu")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice: ")

        if choice == "1":
            new_ip = input("\033[93mEnter New WireGuard Private IP Address : \033[0m")
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                local_ip_gre6 = new_ip
                remote_ip_gre6 = wtb_opposite_ip_wireguard(new_ip)
                allowed_ips = (
                    f"{remote_ip_gre6}/128" if ":" in new_ip else f"{remote_ip_gre6}/32"
                )

                update_gre6tap_ips(
                    gre6_path, new_local_ip=new_ip, new_remote_ip=remote_ip_gre6
                )
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec5(remote_ip_gre6)

            else:
                print("\033[91mInvalid IP Address!\033[0m")

        elif choice == "2":
            new_gre6_private_ip = input(
                "\033[93mEnter New GRE6TAP Private IP Address : \033[0m"
            )
            if new_gre6_private_ip:
                private_ip_gre6 = new_gre6_private_ip
                update_gre6tap_ips(gre6_path, new_private_ip=private_ip_gre6)
            else:
                print("\033[91mInvalid GRE6TAP Private IP Address!\033[0m")

        elif choice == "3":
            listen_port, endpoint = update_tunnel_port(listen_port, endpoint)
            update_ufw_ruleswireguard(
                address_no_subnet, address_no_subnet, listen_port, listen_port
            )
        elif choice == "4":
            endpoint = update_endpoint_ir_ip5(endpoint)

        elif choice == "5":
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "Endpoint": endpoint,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig5(wireguard_config_path, new_config)

            save_stuff_gretap65(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            break

        elif choice == "0":
            wireguard_gre6tap_noconjuction_kharej1_5iran()
            break

        else:
            print("\033[91mPlease select a valid option.\033[0m")


def wireguardafter_gre6tapn_kharej_client1():
    wireguard_config_path = "/etc/wireguard/wireclient.conf"
    gre6_path = "/etc/gre61.sh"
    new_gre6_private_ip = None

    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig(wireguard_config_path)
    )

    local_ip_gre6 = local_ip(gre6_path)
    remote_ip_gre6 = remote_ip(gre6_path)
    private_ip_gre6 = private_gre6tap(gre6_path)

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCould not retrieve the WireGuard configuration.\033[0m")
        return

    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("Could not retrieve the GRE6TAP IP addresses from gre6 file.")
        return

    while True:
        os.system("clear")
        display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips)
        display_stuff_gre6tapn(local_ip_gre6, remote_ip_gre6, private_ip_gre6)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[93mWireGuard & GRE6TAP\033[97m Kharej Client\033[92m [1]\033[93m Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print(" \033[93mThis is Kharej Client \033[97m[1]\033[0m")
        print("1. \033[93mChange \033[97mWireGuard Private IP Address\033[0m")
        print("2. \033[93mChange \033[97mGRE6TAP\033[93m Private IP Address\033[0m")
        print("3. \033[93mChange \033[92mTunnel Port\033[0m")
        print("4.\033[93m Change \033[92mIRAN Server IP \033[96m(Endpoint IP)\033[0m")
        print("5. \033[92mSave and Exit\033[0m")
        print("0. Back to the previous menu")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice: ")

        if choice == "1":
            new_ip = input("\033[93mEnter New WireGuard Private IP Address : \033[0m")
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                local_ip_gre6 = new_ip
                remote_ip_gre6 = wtb_opposite_ip_wireguard(new_ip)
                allowed_ips = (
                    f"{remote_ip_gre6}/128" if ":" in new_ip else f"{remote_ip_gre6}/32"
                )

                update_gre6tap_ips(
                    gre6_path, new_local_ip=new_ip, new_remote_ip=remote_ip_gre6
                )
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec_client(remote_ip_gre6)

            else:
                print("\033[91mInvalid IP Address!\033[0m")

        elif choice == "2":
            new_gre6_private_ip = input(
                "\033[93mEnter New GRE6TAP Private IP Address : \033[0m"
            )
            if new_gre6_private_ip:
                private_ip_gre6 = new_gre6_private_ip
                update_gre6tap_ips(gre6_path, new_private_ip=private_ip_gre6)
            else:
                print("\033[91mInvalid GRE6TAP Private IP Address!\033[0m")

        elif choice == "3":
            listen_port, endpoint = update_tunnel_port(listen_port, endpoint)
            update_ufw_ruleswireguard(
                address_no_subnet, address_no_subnet, listen_port, listen_port
            )
        elif choice == "4":
            endpoint = update_endpoint_ir_server(endpoint)

        elif choice == "5":
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "Endpoint": endpoint,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_client(wireguard_config_path, new_config)

            save_stuff_gretap61(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            break

        elif choice == "0":
            wireguard_gre6tap_noconjuction_kharej1_5iran()
            break

        else:
            print("\033[91mPlease select a valid option.\033[0m")


def wireguardafter_gre6tapn_kharej_client2():
    wireguard_config_path = "/etc/wireguard/wireclient.conf"
    gre6_path = "/etc/gre62.sh"
    new_gre6_private_ip = None

    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig(wireguard_config_path)
    )

    local_ip_gre6 = local_ip(gre6_path)
    remote_ip_gre6 = remote_ip(gre6_path)
    private_ip_gre6 = private_gre6tap(gre6_path)

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCould not retrieve the WireGuard configuration.\033[0m")
        return

    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("Could not retrieve the GRE6TAP IP addresses from gre6 file.")
        return

    while True:
        os.system("clear")
        display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips)
        display_stuff_gre6tapn(local_ip_gre6, remote_ip_gre6, private_ip_gre6)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[93mWireGuard & GRE6TAP\033[97m Kharej Client\033[92m [2]\033[93m Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print(" \033[93mThis is Kharej Client \033[97m[2]\033[0m")
        print("1. \033[93mChange \033[97mWireGuard Private IP Address\033[0m")
        print("2. \033[93mChange \033[97mGRE6TAP\033[93m Private IP Address\033[0m")
        print("3. \033[93mChange \033[92mTunnel Port\033[0m")
        print("4.\033[93m Change \033[92mIRAN Server IP \033[96m(Endpoint IP)\033[0m")
        print("5. \033[92mSave and Exit\033[0m")
        print("0. Back to the previous menu")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice: ")

        if choice == "1":
            new_ip = input("\033[93mEnter New WireGuard Private IP Address : \033[0m")
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                local_ip_gre6 = new_ip
                remote_ip_gre6 = wtb_opposite_ip_wireguard(new_ip)
                allowed_ips = (
                    f"{remote_ip_gre6}/128" if ":" in new_ip else f"{remote_ip_gre6}/32"
                )

                update_gre6tap_ips(
                    gre6_path, new_local_ip=new_ip, new_remote_ip=remote_ip_gre6
                )
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec_client(remote_ip_gre6)

            else:
                print("\033[91mInvalid IP Address!\033[0m")

        elif choice == "2":
            new_gre6_private_ip = input(
                "\033[93mEnter New GRE6TAP Private IP Address : \033[0m"
            )
            if new_gre6_private_ip:
                private_ip_gre6 = new_gre6_private_ip
                update_gre6tap_ips(gre6_path, new_private_ip=private_ip_gre6)
            else:
                print("\033[91mInvalid GRE6TAP Private IP Address!\033[0m")

        elif choice == "3":
            listen_port, endpoint = update_tunnel_port(listen_port, endpoint)
            update_ufw_ruleswireguard(
                address_no_subnet, address_no_subnet, listen_port, listen_port
            )
        elif choice == "4":
            endpoint = update_endpoint_ir_server(endpoint)

        elif choice == "5":
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "Endpoint": endpoint,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_client(wireguard_config_path, new_config)

            save_stuff_gretap62(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            break

        elif choice == "0":
            wireguard_gre6tap_noconjuction_kharej1_5iran()
            break

        else:
            print("\033[91mPlease select a valid option.\033[0m")


def wireguardafter_gre6tapn_kharej_client3():
    wireguard_config_path = "/etc/wireguard/wireclient.conf"
    gre6_path = "/etc/gre63.sh"
    new_gre6_private_ip = None

    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig(wireguard_config_path)
    )

    local_ip_gre6 = local_ip(gre6_path)
    remote_ip_gre6 = remote_ip(gre6_path)
    private_ip_gre6 = private_gre6tap(gre6_path)

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCould not retrieve the WireGuard configuration.\033[0m")
        return

    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("Could not retrieve the GRE6TAP IP addresses from gre6 file.")
        return

    while True:
        os.system("clear")
        display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips)
        display_stuff_gre6tapn(local_ip_gre6, remote_ip_gre6, private_ip_gre6)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[93mWireGuard & GRE6TAP\033[97m Kharej Client\033[92m [3]\033[93m Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print(" \033[93mThis is Kharej Client \033[97m[3]\033[0m")
        print("1. \033[93mChange \033[97mWireGuard Private IP Address\033[0m")
        print("2. \033[93mChange \033[97mGRE6TAP\033[93m Private IP Address\033[0m")
        print("3. \033[93mChange \033[92mTunnel Port\033[0m")
        print("4.\033[93m Change \033[92mIRAN Server IP \033[96m(Endpoint IP)\033[0m")
        print("5. \033[92mSave and Exit\033[0m")
        print("0. Back to the previous menu")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice: ")

        if choice == "1":
            new_ip = input("\033[93mEnter New WireGuard Private IP Address : \033[0m")
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                local_ip_gre6 = new_ip
                remote_ip_gre6 = wtb_opposite_ip_wireguard(new_ip)
                allowed_ips = (
                    f"{remote_ip_gre6}/128" if ":" in new_ip else f"{remote_ip_gre6}/32"
                )

                update_gre6tap_ips(
                    gre6_path, new_local_ip=new_ip, new_remote_ip=remote_ip_gre6
                )
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec_client(remote_ip_gre6)

            else:
                print("\033[91mInvalid IP Address!\033[0m")

        elif choice == "2":
            new_gre6_private_ip = input(
                "\033[93mEnter New GRE6TAP Private IP Address : \033[0m"
            )
            if new_gre6_private_ip:
                private_ip_gre6 = new_gre6_private_ip
                update_gre6tap_ips(gre6_path, new_private_ip=private_ip_gre6)
            else:
                print("\033[91mInvalid GRE6TAP Private IP Address!\033[0m")

        elif choice == "3":
            listen_port, endpoint = update_tunnel_port(listen_port, endpoint)
            update_ufw_ruleswireguard(
                address_no_subnet, address_no_subnet, listen_port, listen_port
            )
        elif choice == "4":
            endpoint = update_endpoint_ir_server(endpoint)

        elif choice == "5":
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "Endpoint": endpoint,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_client(wireguard_config_path, new_config)

            save_stuff_gretap63(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            break

        elif choice == "0":
            wireguard_gre6tap_noconjuction_kharej1_5iran()
            break

        else:
            print("\033[91mPlease select a valid option.\033[0m")


def wireguardafter_gre6tapn_kharej_client4():
    wireguard_config_path = "/etc/wireguard/wireclient.conf"
    gre6_path = "/etc/gre64.sh"
    new_gre6_private_ip = None

    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig(wireguard_config_path)
    )

    local_ip_gre6 = local_ip(gre6_path)
    remote_ip_gre6 = remote_ip(gre6_path)
    private_ip_gre6 = private_gre6tap(gre6_path)

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCould not retrieve the WireGuard configuration.\033[0m")
        return

    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("Could not retrieve the GRE6TAP IP addresses from gre6 file.")
        return

    while True:
        os.system("clear")
        display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips)
        display_stuff_gre6tapn(local_ip_gre6, remote_ip_gre6, private_ip_gre6)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[93mWireGuard & GRE6TAP\033[97m Kharej Client\033[92m [4]\033[93m Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print(" \033[93mThis is Kharej Client \033[97m[4]\033[0m")
        print("1. \033[93mChange \033[97mWireGuard Private IP Address\033[0m")
        print("2. \033[93mChange \033[97mGRE6TAP\033[93m Private IP Address\033[0m")
        print("3. \033[93mChange \033[92mTunnel Port\033[0m")
        print("4.\033[93m Change \033[92mIRAN Server IP \033[96m(Endpoint IP)\033[0m")
        print("5. \033[92mSave and Exit\033[0m")
        print("0. Back to the previous menu")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice: ")

        if choice == "1":
            new_ip = input("\033[93mEnter New WireGuard Private IP Address : \033[0m")
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                local_ip_gre6 = new_ip
                remote_ip_gre6 = wtb_opposite_ip_wireguard(new_ip)
                allowed_ips = (
                    f"{remote_ip_gre6}/128" if ":" in new_ip else f"{remote_ip_gre6}/32"
                )

                update_gre6tap_ips(
                    gre6_path, new_local_ip=new_ip, new_remote_ip=remote_ip_gre6
                )
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec_client(remote_ip_gre6)

            else:
                print("\033[91mInvalid IP Address!\033[0m")

        elif choice == "2":
            new_gre6_private_ip = input(
                "\033[93mEnter New GRE6TAP Private IP Address : \033[0m"
            )
            if new_gre6_private_ip:
                private_ip_gre6 = new_gre6_private_ip
                update_gre6tap_ips(gre6_path, new_private_ip=private_ip_gre6)
            else:
                print("\033[91mInvalid GRE6TAP Private IP Address!\033[0m")

        elif choice == "3":
            listen_port, endpoint = update_tunnel_port(listen_port, endpoint)
            update_ufw_ruleswireguard(
                address_no_subnet, address_no_subnet, listen_port, listen_port
            )
        elif choice == "4":
            endpoint = update_endpoint_ir_server(endpoint)

        elif choice == "5":
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "Endpoint": endpoint,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_client(wireguard_config_path, new_config)

            save_stuff_gretap64(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            break

        elif choice == "0":
            wireguard_gre6tap_noconjuction_kharej1_5iran()
            break

        else:
            print("\033[91mPlease select a valid option.\033[0m")


def wireguardafter_gre6tapn_kharej_client5():
    wireguard_config_path = "/etc/wireguard/wireclient.conf"
    gre6_path = "/etc/gre65.sh"
    new_gre6_private_ip = None

    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig(wireguard_config_path)
    )

    local_ip_gre6 = local_ip(gre6_path)
    remote_ip_gre6 = remote_ip(gre6_path)
    private_ip_gre6 = private_gre6tap(gre6_path)

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCould not retrieve the WireGuard configuration.\033[0m")
        return

    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("Could not retrieve the GRE6TAP IP addresses from gre6 file.")
        return

    while True:
        os.system("clear")
        display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips)
        display_stuff_gre6tapn(local_ip_gre6, remote_ip_gre6, private_ip_gre6)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[93mWireGuard & GRE6TAP\033[97m Kharej Client\033[92m [5]\033[93m Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print(" \033[93mThis is Kharej Client \033[97m[5]\033[0m")
        print("1. \033[93mChange \033[97mWireGuard Private IP Address\033[0m")
        print("2. \033[93mChange \033[97mGRE6TAP\033[93m Private IP Address\033[0m")
        print("3. \033[93mChange \033[92mTunnel Port\033[0m")
        print("4.\033[93m Change \033[92mIRAN Server IP \033[96m(Endpoint IP)\033[0m")
        print("5. \033[92mSave and Exit\033[0m")
        print("0. Back to the previous menu")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice: ")

        if choice == "1":
            new_ip = input("\033[93mEnter New WireGuard Private IP Address : \033[0m")
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                local_ip_gre6 = new_ip
                remote_ip_gre6 = wtb_opposite_ip_wireguard(new_ip)
                allowed_ips = (
                    f"{remote_ip_gre6}/128" if ":" in new_ip else f"{remote_ip_gre6}/32"
                )

                update_gre6tap_ips(
                    gre6_path, new_local_ip=new_ip, new_remote_ip=remote_ip_gre6
                )
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec_client(remote_ip_gre6)

            else:
                print("\033[91mInvalid IP Address!\033[0m")

        elif choice == "2":
            new_gre6_private_ip = input(
                "\033[93mEnter New GRE6TAP Private IP Address : \033[0m"
            )
            if new_gre6_private_ip:
                private_ip_gre6 = new_gre6_private_ip
                update_gre6tap_ips(gre6_path, new_private_ip=private_ip_gre6)
            else:
                print("\033[91mInvalid GRE6TAP Private IP Address!\033[0m")

        elif choice == "3":
            listen_port, endpoint = update_tunnel_port(listen_port, endpoint)
            update_ufw_ruleswireguard(
                address_no_subnet, address_no_subnet, listen_port, listen_port
            )
        elif choice == "4":
            endpoint = update_endpoint_ir_server(endpoint)

        elif choice == "5":
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "Endpoint": endpoint,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_client(wireguard_config_path, new_config)

            save_stuff_gretap65(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            break

        elif choice == "0":
            wireguard_gre6tap_noconjuction_kharej1_5iran()
            break

        else:
            print("\033[91mPlease select a valid option.\033[0m")


# gre6tap ipsec
def update_ipsec_conf_wireguard_gre6tapserver1(name, new_private_ip):
    try:
        with open(name, "r") as f:
            content = f.readlines()

        start_idx, end_idx = None, None
        for i, line in enumerate(content):
            if line.strip() == "conn GRE61":
                start_idx = i
            elif start_idx is not None and line.strip().startswith("conn "):
                end_idx = i
                break

        if start_idx is None:
            print("\033[91m'conn GRE61' section not found\033[0m")
            return

        if end_idx is None:
            end_idx = len(content)

        section = content[start_idx:end_idx]

        ip_type = (
            "ipv6"
            if isinstance(ipaddress.ip_address(new_private_ip), ipaddress.IPv6Address)
            else "ipv4"
        )

        if ip_type == "ipv6":
            subnet = "/64"
        else:
            subnet = "/32"

        ip_parts = (
            new_private_ip.split(".")
            if ip_type == "ipv4"
            else new_private_ip.split(":")
        )
        if new_private_ip.endswith(".2") or new_private_ip.endswith(":2"):
            ip_parts[-1] = "1"
        else:
            ip_parts[-1] = "2"
        counterpart_ip = ".".join(ip_parts) if ip_type == "ipv4" else ":".join(ip_parts)

        new_section = []
        for line in section:
            line = re.sub(
                r"leftsubnet=\S+", f"leftsubnet={new_private_ip}{subnet}", line
            )
            line = re.sub(r"leftid=\S+", f"leftid={new_private_ip}", line)
            line = re.sub(r"right=\S+", f"right={counterpart_ip}", line)
            line = re.sub(
                r"rightsubnet=\S+", f"rightsubnet={counterpart_ip}{subnet}", line
            )
            new_section.append(line)

        new_content = content[:start_idx] + new_section + content[end_idx:]

        with open(name, "w") as f:
            f.writelines(new_content)

        print(f"\033[92m'conn GRE61' section updated successfully\033[0m")
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def update_ipsec_conf_wireguard_gre6tapserver2(name, new_private_ip):
    try:
        with open(name, "r") as f:
            content = f.readlines()

        start_idx, end_idx = None, None
        for i, line in enumerate(content):
            if line.strip() == "conn GRE62":
                start_idx = i
            elif start_idx is not None and line.strip().startswith("conn "):
                end_idx = i
                break

        if start_idx is None:
            print("\033[91m'conn GRE62' section not found\033[0m")
            return

        if end_idx is None:
            end_idx = len(content)

        section = content[start_idx:end_idx]

        ip_type = (
            "ipv6"
            if isinstance(ipaddress.ip_address(new_private_ip), ipaddress.IPv6Address)
            else "ipv4"
        )

        if ip_type == "ipv6":
            subnet = "/64"
        else:
            subnet = "/32"

        ip_parts = (
            new_private_ip.split(".")
            if ip_type == "ipv4"
            else new_private_ip.split(":")
        )
        if new_private_ip.endswith(".2") or new_private_ip.endswith(":2"):
            ip_parts[-1] = "1"
        else:
            ip_parts[-1] = "2"
        counterpart_ip = ".".join(ip_parts) if ip_type == "ipv4" else ":".join(ip_parts)

        new_section = []
        for line in section:
            line = re.sub(
                r"leftsubnet=\S+", f"leftsubnet={new_private_ip}{subnet}", line
            )
            line = re.sub(r"leftid=\S+", f"leftid={new_private_ip}", line)
            line = re.sub(r"right=\S+", f"right={counterpart_ip}", line)
            line = re.sub(
                r"rightsubnet=\S+", f"rightsubnet={counterpart_ip}{subnet}", line
            )
            new_section.append(line)

        new_content = content[:start_idx] + new_section + content[end_idx:]

        with open(name, "w") as f:
            f.writelines(new_content)

        print(f"\033[92m'conn GRE62' section updated successfully\033[0m")
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def update_ipsec_conf_wireguard_gre6tapserver3(name, new_private_ip):
    try:
        with open(name, "r") as f:
            content = f.readlines()

        start_idx, end_idx = None, None
        for i, line in enumerate(content):
            if line.strip() == "conn GRE63":
                start_idx = i
            elif start_idx is not None and line.strip().startswith("conn "):
                end_idx = i
                break

        if start_idx is None:
            print("\033[91m'conn GRE63' section not found\033[0m")
            return

        if end_idx is None:
            end_idx = len(content)

        section = content[start_idx:end_idx]

        ip_type = (
            "ipv6"
            if isinstance(ipaddress.ip_address(new_private_ip), ipaddress.IPv6Address)
            else "ipv4"
        )

        if ip_type == "ipv6":
            subnet = "/64"
        else:
            subnet = "/32"

        ip_parts = (
            new_private_ip.split(".")
            if ip_type == "ipv4"
            else new_private_ip.split(":")
        )
        if new_private_ip.endswith(".2") or new_private_ip.endswith(":2"):
            ip_parts[-1] = "1"
        else:
            ip_parts[-1] = "2"
        counterpart_ip = ".".join(ip_parts) if ip_type == "ipv4" else ":".join(ip_parts)

        new_section = []
        for line in section:
            line = re.sub(
                r"leftsubnet=\S+", f"leftsubnet={new_private_ip}{subnet}", line
            )
            line = re.sub(r"leftid=\S+", f"leftid={new_private_ip}", line)
            line = re.sub(r"right=\S+", f"right={counterpart_ip}", line)
            line = re.sub(
                r"rightsubnet=\S+", f"rightsubnet={counterpart_ip}{subnet}", line
            )
            new_section.append(line)

        new_content = content[:start_idx] + new_section + content[end_idx:]

        with open(name, "w") as f:
            f.writelines(new_content)

        print(f"\033[92m'conn GRE63' section updated successfully\033[0m")
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def update_ipsec_conf_wireguard_gre6tapserver4(name, new_private_ip):
    try:
        with open(name, "r") as f:
            content = f.readlines()

        start_idx, end_idx = None, None
        for i, line in enumerate(content):
            if line.strip() == "conn GRE64":
                start_idx = i
            elif start_idx is not None and line.strip().startswith("conn "):
                end_idx = i
                break

        if start_idx is None:
            print("\033[91m'conn GRE64' section not found\033[0m")
            return

        if end_idx is None:
            end_idx = len(content)

        section = content[start_idx:end_idx]

        ip_type = (
            "ipv6"
            if isinstance(ipaddress.ip_address(new_private_ip), ipaddress.IPv6Address)
            else "ipv4"
        )

        if ip_type == "ipv6":
            subnet = "/64"
        else:
            subnet = "/32"

        ip_parts = (
            new_private_ip.split(".")
            if ip_type == "ipv4"
            else new_private_ip.split(":")
        )
        if new_private_ip.endswith(".2") or new_private_ip.endswith(":2"):
            ip_parts[-1] = "1"
        else:
            ip_parts[-1] = "2"
        counterpart_ip = ".".join(ip_parts) if ip_type == "ipv4" else ":".join(ip_parts)

        new_section = []
        for line in section:
            line = re.sub(
                r"leftsubnet=\S+", f"leftsubnet={new_private_ip}{subnet}", line
            )
            line = re.sub(r"leftid=\S+", f"leftid={new_private_ip}", line)
            line = re.sub(r"right=\S+", f"right={counterpart_ip}", line)
            line = re.sub(
                r"rightsubnet=\S+", f"rightsubnet={counterpart_ip}{subnet}", line
            )
            new_section.append(line)

        new_content = content[:start_idx] + new_section + content[end_idx:]

        with open(name, "w") as f:
            f.writelines(new_content)

        print(f"\033[92m'conn GRE64' section updated successfully\033[0m")
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def update_ipsec_conf_wireguard_gre6tapserver5(name, new_private_ip):
    try:
        with open(name, "r") as f:
            content = f.readlines()

        start_idx, end_idx = None, None
        for i, line in enumerate(content):
            if line.strip() == "conn GRE65":
                start_idx = i
            elif start_idx is not None and line.strip().startswith("conn "):
                end_idx = i
                break

        if start_idx is None:
            print("\033[91m'conn GRE65' section not found\033[0m")
            return

        if end_idx is None:
            end_idx = len(content)

        section = content[start_idx:end_idx]

        ip_type = (
            "ipv6"
            if isinstance(ipaddress.ip_address(new_private_ip), ipaddress.IPv6Address)
            else "ipv4"
        )

        if ip_type == "ipv6":
            subnet = "/64"
        else:
            subnet = "/32"

        ip_parts = (
            new_private_ip.split(".")
            if ip_type == "ipv4"
            else new_private_ip.split(":")
        )
        if new_private_ip.endswith(".2") or new_private_ip.endswith(":2"):
            ip_parts[-1] = "1"
        else:
            ip_parts[-1] = "2"
        counterpart_ip = ".".join(ip_parts) if ip_type == "ipv4" else ":".join(ip_parts)

        new_section = []
        for line in section:
            line = re.sub(
                r"leftsubnet=\S+", f"leftsubnet={new_private_ip}{subnet}", line
            )
            line = re.sub(r"leftid=\S+", f"leftid={new_private_ip}", line)
            line = re.sub(r"right=\S+", f"right={counterpart_ip}", line)
            line = re.sub(
                r"rightsubnet=\S+", f"rightsubnet={counterpart_ip}{subnet}", line
            )
            new_section.append(line)

        new_content = content[:start_idx] + new_section + content[end_idx:]

        with open(name, "w") as f:
            f.writelines(new_content)

        print(f"\033[92m'conn GRE65' section updated successfully\033[0m")
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def update_ipsec_conf_wireguard_gre6tap(name, new_private_ip):
    try:
        with open(name, "r") as f:
            content = f.read()

        if ":" in new_private_ip:
            ip_parts = new_private_ip.split(":")
            ip_parts[-1] = "1" if ip_parts[-1].endswith("2") else "2"
            counterpart_ip = ":".join(ip_parts)
            subnet_suffix = "/64"
        else:
            ip_parts = new_private_ip.split(".")
            ip_parts[-1] = "1" if ip_parts[-1] == "2" else "2"
            counterpart_ip = ".".join(ip_parts)
            subnet_suffix = "/24"

        new_content = re.sub(
            r"leftsubnet=\S+", f"leftsubnet={new_private_ip}{subnet_suffix}", content
        )
        new_content = re.sub(r"leftid=\S+", f"leftid={new_private_ip}", new_content)
        new_content = re.sub(r"right=\S+", f"right={counterpart_ip}", new_content)
        new_content = re.sub(
            r"rightsubnet=\S+",
            f"rightsubnet={counterpart_ip}{subnet_suffix}",
            new_content,
        )

        with open(name, "w") as f:
            f.write(new_content)

        display_checkmark("\033[92mIPsec configuration updated successfully!\033[0m")

    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mOut of ordinary error: {e}\033[0m")


def wireguardafter_gre6tapnsec_kharejconfig_1():
    wireguard_config_path = "/etc/wireguard/wireserver1.conf"
    gre6_path = "/etc/gre61.sh"
    new_gre6_private_ip = None

    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig(wireguard_config_path)
    )

    local_ip_gre6 = local_ip(gre6_path)
    remote_ip_gre6 = remote_ip(gre6_path)
    private_ip_gre6 = private_gre6tap(gre6_path)

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCould not retrieve the WireGuard configuration.\033[0m")
        return

    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("Could not retrieve the GRE6TAP IP addresses from gre6 file.")
        return

    while True:
        os.system("clear")
        display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips)
        display_stuff_gre6tapn(local_ip_gre6, remote_ip_gre6, private_ip_gre6)
        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[93mWireGuard & GRE6TAP IPSEC\033[97m Kharej Server Config\033[92m [1]\033[93m Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print(" \033[93mThis is Kharej Server \033[97mConfig [1]\033[0m")
        print("1. \033[93mChange \033[97mWireGuard Private IP Address\033[0m")
        print("2. \033[93mChange \033[97mGRE6TAP\033[93m Private IP Address\033[0m")
        print("3. \033[93mChange \033[92mTunnel Port\033[0m")
        print(
            "4.\033[93m Change \033[92mIRAN Client [1] IP \033[96m(Endpoint IP)\033[0m"
        )
        print("5.\033[94m Change IPsec Secret Key\033[0m")
        print("6. \033[92mSave and Exit\033[0m")
        print("0. Back to the previous menu")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice: ")

        if choice == "1":
            new_ip = input("\033[93mEnter New WireGuard Private IP Address : \033[0m")
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                local_ip_gre6 = new_ip
                remote_ip_gre6 = wtb_opposite_ip_wireguard(new_ip)
                allowed_ips = (
                    f"{remote_ip_gre6}/128" if ":" in new_ip else f"{remote_ip_gre6}/32"
                )

                update_gre6tap_ips(
                    gre6_path, new_local_ip=new_ip, new_remote_ip=remote_ip_gre6
                )
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec1(remote_ip_gre6)

            else:
                print("\033[91mInvalid IP Address!\033[0m")

        elif choice == "2":
            new_gre6_private_ip = input(
                "\033[93mEnter New GRE6TAP Private IP Address : \033[0m"
            )
            if new_gre6_private_ip:
                private_ip_gre6 = new_gre6_private_ip
                update_gre6tap_ips(gre6_path, new_private_ip=private_ip_gre6)
                update_ipsec_conf_wireguard_gre6tapserver1(
                    "/etc/ipsec1.conf", new_gre6_private_ip
                )
            else:
                print("\033[91mInvalid GRE6TAP Private IP Address!\033[0m")

        elif choice == "3":
            listen_port, endpoint = update_tunnel_port(listen_port, endpoint)
            update_ufw_ruleswireguard(
                address_no_subnet, address_no_subnet, listen_port, listen_port
            )

        elif choice == "4":
            endpoint = update_endpoint_ip1(endpoint)

        elif choice == "5":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secret Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")

        elif choice == "6":
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "Endpoint": endpoint,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfigsec1(wireguard_config_path, new_config)

            save_stuff_gretap61(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            if new_gre6_private_ip:
                update_ipsec_ip_multi(new_gre6_private_ip)
            break

        elif choice == "0":
            wireguard_gre6tapsec_noconjuction_kharej1_5iran()
            break

        else:
            print("\033[91mPlease select a valid option.\033[0m")


def wireguardafter_gre6tapnsec_kharejconfig_2():
    wireguard_config_path = "/etc/wireguard/wireserver2.conf"
    gre6_path = "/etc/gre62.sh"
    new_gre6_private_ip = None

    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig(wireguard_config_path)
    )

    local_ip_gre6 = local_ip(gre6_path)
    remote_ip_gre6 = remote_ip(gre6_path)
    private_ip_gre6 = private_gre6tap(gre6_path)

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCould not retrieve the WireGuard configuration.\033[0m")
        return

    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("Could not retrieve the GRE6TAP IP addresses from gre6 file.")
        return

    while True:
        os.system("clear")
        display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips)
        display_stuff_gre6tapn(local_ip_gre6, remote_ip_gre6, private_ip_gre6)
        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[93mWireGuard & GRE6TAP IPSEC\033[97m Kharej Server Config\033[92m [2]\033[93m Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print(" \033[93mThis is Kharej Server \033[97mConfig [2]\033[0m")
        print("1. \033[93mChange \033[97mWireGuard Private IP Address\033[0m")
        print("2. \033[93mChange \033[97mGRE6TAP\033[93m Private IP Address\033[0m")
        print("3. \033[93mChange \033[92mTunnel Port\033[0m")
        print(
            "4.\033[93m Change \033[92mIRAN Client [2] IP \033[96m(Endpoint IP)\033[0m"
        )
        print("5.\033[94m Change IPsec Secret Key\033[0m")
        print("6. \033[92mSave and Exit\033[0m")
        print("0. Back to the previous menu")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice: ")

        if choice == "1":
            new_ip = input("\033[93mEnter New WireGuard Private IP Address : \033[0m")
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                local_ip_gre6 = new_ip
                remote_ip_gre6 = wtb_opposite_ip_wireguard(new_ip)
                allowed_ips = (
                    f"{remote_ip_gre6}/128" if ":" in new_ip else f"{remote_ip_gre6}/32"
                )

                update_gre6tap_ips(
                    gre6_path, new_local_ip=new_ip, new_remote_ip=remote_ip_gre6
                )
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec2(remote_ip_gre6)

            else:
                print("\033[91mInvalid IP Address!\033[0m")

        elif choice == "2":
            new_gre6_private_ip = input(
                "\033[93mEnter New GRE6TAP Private IP Address : \033[0m"
            )
            if new_gre6_private_ip:
                private_ip_gre6 = new_gre6_private_ip
                update_gre6tap_ips(gre6_path, new_private_ip=private_ip_gre6)
                update_ipsec_conf_wireguard_gre6tapserver2(
                    "/etc/ipsec1.conf", new_gre6_private_ip
                )
            else:
                print("\033[91mInvalid GRE6TAP Private IP Address!\033[0m")

        elif choice == "3":
            listen_port, endpoint = update_tunnel_port(listen_port, endpoint)
            update_ufw_ruleswireguard(
                address_no_subnet, address_no_subnet, listen_port, listen_port
            )

        elif choice == "4":
            endpoint = update_endpoint_ip2(endpoint)

        elif choice == "5":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secret Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")

        elif choice == "6":
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "Endpoint": endpoint,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfigsec2(wireguard_config_path, new_config)

            save_stuff_gretap62(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            if new_gre6_private_ip:
                update_ipsec_ip_multi2(new_gre6_private_ip)
            break

        elif choice == "0":
            wireguard_gre6tapsec_noconjuction_kharej1_5iran()
            break

        else:
            print("\033[91mPlease select a valid option.\033[0m")


def wireguardafter_gre6tapnsec_kharejconfig_3():
    wireguard_config_path = "/etc/wireguard/wireserver3.conf"
    gre6_path = "/etc/gre63.sh"
    new_gre6_private_ip = None

    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig(wireguard_config_path)
    )

    local_ip_gre6 = local_ip(gre6_path)
    remote_ip_gre6 = remote_ip(gre6_path)
    private_ip_gre6 = private_gre6tap(gre6_path)

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCould not retrieve the WireGuard configuration.\033[0m")
        return

    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("Could not retrieve the GRE6TAP IP addresses from gre6 file.")
        return

    while True:
        os.system("clear")
        display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips)
        display_stuff_gre6tapn(local_ip_gre6, remote_ip_gre6, private_ip_gre6)
        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[93mWireGuard & GRE6TAP IPSEC\033[97m Kharej Server Config\033[92m [3]\033[93m Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print(" \033[93mThis is Kharej Server \033[97mConfig [3]\033[0m")
        print("1. \033[93mChange \033[97mWireGuard Private IP Address\033[0m")
        print("2. \033[93mChange \033[97mGRE6TAP\033[93m Private IP Address\033[0m")
        print("3. \033[93mChange \033[92mTunnel Port\033[0m")
        print(
            "4.\033[93m Change \033[92mIRAN Client [3] IP \033[96m(Endpoint IP)\033[0m"
        )
        print("5.\033[94m Change IPsec Secret Key\033[0m")
        print("6. \033[92mSave and Exit\033[0m")
        print("0. Back to the previous menu")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice: ")

        if choice == "1":
            new_ip = input("\033[93mEnter New WireGuard Private IP Address : \033[0m")
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                local_ip_gre6 = new_ip
                remote_ip_gre6 = wtb_opposite_ip_wireguard(new_ip)
                allowed_ips = (
                    f"{remote_ip_gre6}/128" if ":" in new_ip else f"{remote_ip_gre6}/32"
                )

                update_gre6tap_ips(
                    gre6_path, new_local_ip=new_ip, new_remote_ip=remote_ip_gre6
                )
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec3(remote_ip_gre6)

            else:
                print("\033[91mInvalid IP Address!\033[0m")

        elif choice == "2":
            new_gre6_private_ip = input(
                "\033[93mEnter New GRE6TAP Private IP Address : \033[0m"
            )
            if new_gre6_private_ip:
                private_ip_gre6 = new_gre6_private_ip
                update_gre6tap_ips(gre6_path, new_private_ip=private_ip_gre6)
                update_ipsec_conf_wireguard_gre6tapserver3(
                    "/etc/ipsec1.conf", new_gre6_private_ip
                )
            else:
                print("\033[91mInvalid GRE6TAP Private IP Address!\033[0m")

        elif choice == "3":
            listen_port, endpoint = update_tunnel_port(listen_port, endpoint)
            update_ufw_ruleswireguard(
                address_no_subnet, address_no_subnet, listen_port, listen_port
            )

        elif choice == "4":
            endpoint = update_endpoint_ip3(endpoint)

        elif choice == "5":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secret Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")

        elif choice == "6":
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "Endpoint": endpoint,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfigsec3(wireguard_config_path, new_config)

            save_stuff_gretap63(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            if new_gre6_private_ip:
                update_ipsec_ip_multi3(new_gre6_private_ip)
            break

        elif choice == "0":
            wireguard_gre6tapsec_noconjuction_kharej1_5iran()
            break

        else:
            print("\033[91mPlease select a valid option.\033[0m")


def wireguardafter_gre6tapnsec_kharejconfig_4():
    wireguard_config_path = "/etc/wireguard/wireserver4.conf"
    gre6_path = "/etc/gre64.sh"
    new_gre6_private_ip = None

    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig(wireguard_config_path)
    )

    local_ip_gre6 = local_ip(gre6_path)
    remote_ip_gre6 = remote_ip(gre6_path)
    private_ip_gre6 = private_gre6tap(gre6_path)

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCould not retrieve the WireGuard configuration.\033[0m")
        return

    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("Could not retrieve the GRE6TAP IP addresses from gre6 file.")
        return

    while True:
        os.system("clear")
        display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips)
        display_stuff_gre6tapn(local_ip_gre6, remote_ip_gre6, private_ip_gre6)
        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[93mWireGuard & GRE6TAP IPSEC\033[97m Kharej Server Config\033[92m [4]\033[93m Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print(" \033[93mThis is Kharej Server \033[97mConfig [4]\033[0m")
        print("1. \033[93mChange \033[97mWireGuard Private IP Address\033[0m")
        print("2. \033[93mChange \033[97mGRE6TAP\033[93m Private IP Address\033[0m")
        print("3. \033[93mChange \033[92mTunnel Port\033[0m")
        print(
            "4.\033[93m Change \033[92mIRAN Client [4] IP \033[96m(Endpoint IP)\033[0m"
        )
        print("5.\033[94m Change IPsec Secret Key\033[0m")
        print("6. \033[92mSave and Exit\033[0m")
        print("0. Back to the previous menu")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice: ")

        if choice == "1":
            new_ip = input("\033[93mEnter New WireGuard Private IP Address : \033[0m")
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                local_ip_gre6 = new_ip
                remote_ip_gre6 = wtb_opposite_ip_wireguard(new_ip)
                allowed_ips = (
                    f"{remote_ip_gre6}/128" if ":" in new_ip else f"{remote_ip_gre6}/32"
                )

                update_gre6tap_ips(
                    gre6_path, new_local_ip=new_ip, new_remote_ip=remote_ip_gre6
                )
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec4(remote_ip_gre6)

            else:
                print("\033[91mInvalid IP Address!\033[0m")

        elif choice == "2":
            new_gre6_private_ip = input(
                "\033[93mEnter New GRE6TAP Private IP Address : \033[0m"
            )
            if new_gre6_private_ip:
                private_ip_gre6 = new_gre6_private_ip
                update_gre6tap_ips(gre6_path, new_private_ip=private_ip_gre6)
                update_ipsec_conf_wireguard_gre6tapserver4(
                    "/etc/ipsec1.conf", new_gre6_private_ip
                )
            else:
                print("\033[91mInvalid GRE6TAP Private IP Address!\033[0m")

        elif choice == "3":
            listen_port, endpoint = update_tunnel_port(listen_port, endpoint)
            update_ufw_ruleswireguard(
                address_no_subnet, address_no_subnet, listen_port, listen_port
            )

        elif choice == "4":
            endpoint = update_endpoint_ip4(endpoint)

        elif choice == "5":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secret Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")

        elif choice == "6":
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "Endpoint": endpoint,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfigsec4(wireguard_config_path, new_config)

            save_stuff_gretap64(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            if new_gre6_private_ip:
                update_ipsec_ip_multi4(new_gre6_private_ip)
            break

        elif choice == "0":
            wireguard_gre6tapsec_noconjuction_kharej1_5iran()
            break

        else:
            print("\033[91mPlease select a valid option.\033[0m")


def wireguardafter_gre6tapnsec_kharejconfig_5():
    wireguard_config_path = "/etc/wireguard/wireserver5.conf"
    gre6_path = "/etc/gre65.sh"
    new_gre6_private_ip = None

    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig(wireguard_config_path)
    )

    local_ip_gre6 = local_ip(gre6_path)
    remote_ip_gre6 = remote_ip(gre6_path)
    private_ip_gre6 = private_gre6tap(gre6_path)

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCould not retrieve the WireGuard configuration.\033[0m")
        return

    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("Could not retrieve the GRE6TAP IP addresses from gre6 file.")
        return

    while True:
        os.system("clear")
        display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips)
        display_stuff_gre6tapn(local_ip_gre6, remote_ip_gre6, private_ip_gre6)
        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[93mWireGuard & GRE6TAP IPSEC\033[97m Kharej Server Config\033[92m [5]\033[93m Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print(" \033[93mThis is Kharej Server \033[97mConfig [5]\033[0m")
        print("1. \033[93mChange \033[97mWireGuard Private IP Address\033[0m")
        print("2. \033[93mChange \033[97mGRE6TAP\033[93m Private IP Address\033[0m")
        print("3. \033[93mChange \033[92mTunnel Port\033[0m")
        print(
            "4.\033[93m Change \033[92mIRAN Client [5] IP \033[96m(Endpoint IP)\033[0m"
        )
        print("5.\033[94m Change IPsec Secret Key\033[0m")
        print("6. \033[92mSave and Exit\033[0m")
        print("0. Back to the previous menu")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice: ")

        if choice == "1":
            new_ip = input("\033[93mEnter New WireGuard Private IP Address : \033[0m")
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                local_ip_gre6 = new_ip
                remote_ip_gre6 = wtb_opposite_ip_wireguard(new_ip)
                allowed_ips = (
                    f"{remote_ip_gre6}/128" if ":" in new_ip else f"{remote_ip_gre6}/32"
                )

                update_gre6tap_ips(
                    gre6_path, new_local_ip=new_ip, new_remote_ip=remote_ip_gre6
                )
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec5(remote_ip_gre6)

            else:
                print("\033[91mInvalid IP Address!\033[0m")

        elif choice == "2":
            new_gre6_private_ip = input(
                "\033[93mEnter New GRE6TAP Private IP Address : \033[0m"
            )
            if new_gre6_private_ip:
                private_ip_gre6 = new_gre6_private_ip
                update_gre6tap_ips(gre6_path, new_private_ip=private_ip_gre6)
                update_ipsec_conf_wireguard_gre6tapserver5(
                    "/etc/ipsec1.conf", new_gre6_private_ip
                )
            else:
                print("\033[91mInvalid GRE6TAP Private IP Address!\033[0m")

        elif choice == "3":
            listen_port, endpoint = update_tunnel_port(listen_port, endpoint)
            update_ufw_ruleswireguard(
                address_no_subnet, address_no_subnet, listen_port, listen_port
            )

        elif choice == "4":
            endpoint = update_endpoint_ip5(endpoint)

        elif choice == "5":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secret Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")

        elif choice == "6":
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "Endpoint": endpoint,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfigsec5(wireguard_config_path, new_config)

            save_stuff_gretap65(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            if new_gre6_private_ip:
                update_ipsec_ip_multi5(new_gre6_private_ip)
            break

        elif choice == "0":
            wireguard_gre6tapsec_noconjuction_kharej1_5iran()
            break

        else:
            print("\033[91mPlease select a valid option.\033[0m")


def wireguardafter_gre6tapnsec_iran_client1():
    wireguard_config_path = "/etc/wireguard/wireclient.conf"
    gre6_path = "/etc/gre61.sh"
    new_gre6_private_ip = None

    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig(wireguard_config_path)
    )

    local_ip_gre6 = local_ip(gre6_path)
    remote_ip_gre6 = remote_ip(gre6_path)
    private_ip_gre6 = private_gre6tap(gre6_path)

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCould not retrieve the WireGuard configuration.\033[0m")
        return

    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("Could not retrieve the GRE6TAP IP addresses from gre6 file.")
        return

    while True:
        os.system("clear")
        display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips)
        display_stuff_gre6tapn(local_ip_gre6, remote_ip_gre6, private_ip_gre6)
        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[93mWireGuard & GRE6TAP IPSEC\033[97m IRAN Client\033[92m [1]\033[93m Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print(" \033[93mThis is IRAN Client \033[97m[1]\033[0m")
        print("1. \033[93mChange \033[97mWireGuard Private IP Address\033[0m")
        print("2. \033[93mChange \033[97mGRE6TAP\033[93m Private IP Address\033[0m")
        print("3. \033[93mChange \033[92mTunnel Port\033[0m")
        print("4.\033[93m Change \033[92mKharej Server IP \033[96m(Endpoint IP)\033[0m")
        print("5.\033[94m Change IPsec Secret Key\033[0m")
        print("6. \033[92mSave and Exit\033[0m")
        print("0. Back to the previous menu")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice: ")

        if choice == "1":
            new_ip = input("\033[93mEnter New WireGuard Private IP Address : \033[0m")
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                local_ip_gre6 = new_ip
                remote_ip_gre6 = wtb_opposite_ip_wireguard(new_ip)
                allowed_ips = (
                    f"{remote_ip_gre6}/128" if ":" in new_ip else f"{remote_ip_gre6}/32"
                )

                update_gre6tap_ips(
                    gre6_path, new_local_ip=new_ip, new_remote_ip=remote_ip_gre6
                )
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec_client(remote_ip_gre6)

            else:
                print("\033[91mInvalid IP Address!\033[0m")

        elif choice == "2":
            new_gre6_private_ip = input(
                "\033[93mEnter New GRE6TAP Private IP Address : \033[0m"
            )
            if new_gre6_private_ip:
                private_ip_gre6 = new_gre6_private_ip
                update_gre6tap_ips(gre6_path, new_private_ip=private_ip_gre6)
                update_ipsec_conf_wireguard_gre6tap(
                    "/etc/ipsec1.conf", new_gre6_private_ip
                )
            else:
                print("\033[91mInvalid GRE6TAP Private IP Address!\033[0m")

        elif choice == "3":
            listen_port, endpoint = update_tunnel_port(listen_port, endpoint)
            update_ufw_ruleswireguard(
                address_no_subnet, address_no_subnet, listen_port, listen_port
            )

        elif choice == "4":
            endpoint = update_endpoint_ip_server(endpoint)

        elif choice == "5":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secret Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")

        elif choice == "6":
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "Endpoint": endpoint,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfigsec_client(wireguard_config_path, new_config)

            save_stuff_gretap61(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            if new_gre6_private_ip:
                update_ipsec_ip(new_gre6_private_ip)
            break

        elif choice == "0":
            wireguard_gre6tapsec_noconjuction_kharej1_5iran()
            break

        else:
            print("\033[91mPlease select a valid option.\033[0m")


def wireguardafter_gre6tapnsec_iran_client2():
    wireguard_config_path = "/etc/wireguard/wireclient.conf"
    gre6_path = "/etc/gre62.sh"
    new_gre6_private_ip = None

    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig(wireguard_config_path)
    )

    local_ip_gre6 = local_ip(gre6_path)
    remote_ip_gre6 = remote_ip(gre6_path)
    private_ip_gre6 = private_gre6tap(gre6_path)

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCould not retrieve the WireGuard configuration.\033[0m")
        return

    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("Could not retrieve the GRE6TAP IP addresses from gre6 file.")
        return

    while True:
        os.system("clear")
        display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips)
        display_stuff_gre6tapn(local_ip_gre6, remote_ip_gre6, private_ip_gre6)
        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[93mWireGuard & GRE6TAP IPSEC\033[97m IRAN Client\033[92m [2]\033[93m Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print(" \033[93mThis is IRAN Client \033[97m[2]\033[0m")
        print("1. \033[93mChange \033[97mWireGuard Private IP Address\033[0m")
        print("2. \033[93mChange \033[97mGRE6TAP\033[93m Private IP Address\033[0m")
        print("3. \033[93mChange \033[92mTunnel Port\033[0m")
        print("4.\033[93m Change \033[92mKharej Server IP \033[96m(Endpoint IP)\033[0m")
        print("5.\033[94m Change IPsec Secret Key\033[0m")
        print("6. \033[92mSave and Exit\033[0m")
        print("0. Back to the previous menu")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice: ")

        if choice == "1":
            new_ip = input("\033[93mEnter New WireGuard Private IP Address : \033[0m")
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                local_ip_gre6 = new_ip
                remote_ip_gre6 = wtb_opposite_ip_wireguard(new_ip)
                allowed_ips = (
                    f"{remote_ip_gre6}/128" if ":" in new_ip else f"{remote_ip_gre6}/32"
                )

                update_gre6tap_ips(
                    gre6_path, new_local_ip=new_ip, new_remote_ip=remote_ip_gre6
                )
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec_client(remote_ip_gre6)

            else:
                print("\033[91mInvalid IP Address!\033[0m")

        elif choice == "2":
            new_gre6_private_ip = input(
                "\033[93mEnter New GRE6TAP Private IP Address : \033[0m"
            )
            if new_gre6_private_ip:
                private_ip_gre6 = new_gre6_private_ip
                update_gre6tap_ips(gre6_path, new_private_ip=private_ip_gre6)
                update_ipsec_conf_wireguard_gre6tap(
                    "/etc/ipsec1.conf", new_gre6_private_ip
                )
            else:
                print("\033[91mInvalid GRE6TAP Private IP Address!\033[0m")

        elif choice == "3":
            listen_port, endpoint = update_tunnel_port(listen_port, endpoint)
            update_ufw_ruleswireguard(
                address_no_subnet, address_no_subnet, listen_port, listen_port
            )

        elif choice == "4":
            endpoint = update_endpoint_ip_server(endpoint)

        elif choice == "5":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secret Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")

        elif choice == "6":
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "Endpoint": endpoint,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfigsec_client(wireguard_config_path, new_config)

            save_stuff_gretap62(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            if new_gre6_private_ip:
                update_ipsec_ip(new_gre6_private_ip)
            break

        elif choice == "0":
            wireguard_gre6tapsec_noconjuction_kharej1_5iran()
            break

        else:
            print("\033[91mPlease select a valid option.\033[0m")


def wireguardafter_gre6tapnsec_iran_client3():
    wireguard_config_path = "/etc/wireguard/wireclient.conf"
    gre6_path = "/etc/gre63.sh"
    new_gre6_private_ip = None

    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig(wireguard_config_path)
    )

    local_ip_gre6 = local_ip(gre6_path)
    remote_ip_gre6 = remote_ip(gre6_path)
    private_ip_gre6 = private_gre6tap(gre6_path)

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCould not retrieve the WireGuard configuration.\033[0m")
        return

    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("Could not retrieve the GRE6TAP IP addresses from gre6 file.")
        return

    while True:
        os.system("clear")
        display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips)
        display_stuff_gre6tapn(local_ip_gre6, remote_ip_gre6, private_ip_gre6)
        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[93mWireGuard & GRE6TAP IPSEC\033[97m IRAN Client\033[92m [3]\033[93m Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print(" \033[93mThis is IRAN Client \033[97m[3]\033[0m")
        print("1. \033[93mChange \033[97mWireGuard Private IP Address\033[0m")
        print("2. \033[93mChange \033[97mGRE6TAP\033[93m Private IP Address\033[0m")
        print("3. \033[93mChange \033[92mTunnel Port\033[0m")
        print("4.\033[93m Change \033[92mKharej Server IP \033[96m(Endpoint IP)\033[0m")
        print("5.\033[94m Change IPsec Secret Key\033[0m")
        print("6. \033[92mSave and Exit\033[0m")
        print("0. Back to the previous menu")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice: ")

        if choice == "1":
            new_ip = input("\033[93mEnter New WireGuard Private IP Address : \033[0m")
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                local_ip_gre6 = new_ip
                remote_ip_gre6 = wtb_opposite_ip_wireguard(new_ip)
                allowed_ips = (
                    f"{remote_ip_gre6}/128" if ":" in new_ip else f"{remote_ip_gre6}/32"
                )

                update_gre6tap_ips(
                    gre6_path, new_local_ip=new_ip, new_remote_ip=remote_ip_gre6
                )
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec_client(remote_ip_gre6)

            else:
                print("\033[91mInvalid IP Address!\033[0m")

        elif choice == "2":
            new_gre6_private_ip = input(
                "\033[93mEnter New GRE6TAP Private IP Address : \033[0m"
            )
            if new_gre6_private_ip:
                private_ip_gre6 = new_gre6_private_ip
                update_gre6tap_ips(gre6_path, new_private_ip=private_ip_gre6)
                update_ipsec_conf_wireguard_gre6tap(
                    "/etc/ipsec1.conf", new_gre6_private_ip
                )
            else:
                print("\033[91mInvalid GRE6TAP Private IP Address!\033[0m")

        elif choice == "3":
            listen_port, endpoint = update_tunnel_port(listen_port, endpoint)
            update_ufw_ruleswireguard(
                address_no_subnet, address_no_subnet, listen_port, listen_port
            )

        elif choice == "4":
            endpoint = update_endpoint_ip_server(endpoint)

        elif choice == "5":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secret Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")

        elif choice == "6":
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "Endpoint": endpoint,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfigsec_client(wireguard_config_path, new_config)

            save_stuff_gretap63(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            if new_gre6_private_ip:
                update_ipsec_ip(new_gre6_private_ip)
            break

        elif choice == "0":
            wireguard_gre6tapsec_noconjuction_kharej1_5iran()
            break

        else:
            print("\033[91mPlease select a valid option.\033[0m")


def wireguardafter_gre6tapnsec_iran_client4():
    wireguard_config_path = "/etc/wireguard/wireclient.conf"
    gre6_path = "/etc/gre64.sh"
    new_gre6_private_ip = None

    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig(wireguard_config_path)
    )

    local_ip_gre6 = local_ip(gre6_path)
    remote_ip_gre6 = remote_ip(gre6_path)
    private_ip_gre6 = private_gre6tap(gre6_path)

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCould not retrieve the WireGuard configuration.\033[0m")
        return

    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("Could not retrieve the GRE6TAP IP addresses from gre6 file.")
        return

    while True:
        os.system("clear")
        display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips)
        display_stuff_gre6tapn(local_ip_gre6, remote_ip_gre6, private_ip_gre6)
        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[93mWireGuard & GRE6TAP IPSEC\033[97m IRAN Client\033[92m [4]\033[93m Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print(" \033[93mThis is IRAN Client \033[97m[4]\033[0m")
        print("1. \033[93mChange \033[97mWireGuard Private IP Address\033[0m")
        print("2. \033[93mChange \033[97mGRE6TAP\033[93m Private IP Address\033[0m")
        print("3. \033[93mChange \033[92mTunnel Port\033[0m")
        print("4.\033[93m Change \033[92mKharej Server IP \033[96m(Endpoint IP)\033[0m")
        print("5.\033[94m Change IPsec Secret Key\033[0m")
        print("6. \033[92mSave and Exit\033[0m")
        print("0. Back to the previous menu")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice: ")

        if choice == "1":
            new_ip = input("\033[93mEnter New WireGuard Private IP Address : \033[0m")
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                local_ip_gre6 = new_ip
                remote_ip_gre6 = wtb_opposite_ip_wireguard(new_ip)
                allowed_ips = (
                    f"{remote_ip_gre6}/128" if ":" in new_ip else f"{remote_ip_gre6}/32"
                )

                update_gre6tap_ips(
                    gre6_path, new_local_ip=new_ip, new_remote_ip=remote_ip_gre6
                )
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec_client(remote_ip_gre6)

            else:
                print("\033[91mInvalid IP Address!\033[0m")

        elif choice == "2":
            new_gre6_private_ip = input(
                "\033[93mEnter New GRE6TAP Private IP Address : \033[0m"
            )
            if new_gre6_private_ip:
                private_ip_gre6 = new_gre6_private_ip
                update_gre6tap_ips(gre6_path, new_private_ip=private_ip_gre6)
                update_ipsec_conf_wireguard_gre6tap(
                    "/etc/ipsec1.conf", new_gre6_private_ip
                )
            else:
                print("\033[91mInvalid GRE6TAP Private IP Address!\033[0m")

        elif choice == "3":
            listen_port, endpoint = update_tunnel_port(listen_port, endpoint)
            update_ufw_ruleswireguard(
                address_no_subnet, address_no_subnet, listen_port, listen_port
            )

        elif choice == "4":
            endpoint = update_endpoint_ip_server(endpoint)

        elif choice == "5":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secret Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")

        elif choice == "6":
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "Endpoint": endpoint,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfigsec_client(wireguard_config_path, new_config)

            save_stuff_gretap64(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            if new_gre6_private_ip:
                update_ipsec_ip(new_gre6_private_ip)
            break

        elif choice == "0":
            wireguard_gre6tapsec_noconjuction_kharej1_5iran()
            break

        else:
            print("\033[91mPlease select a valid option.\033[0m")


def wireguardafter_gre6tapnsec_iran_client5():
    wireguard_config_path = "/etc/wireguard/wireclient.conf"
    gre6_path = "/etc/gre65.sh"
    new_gre6_private_ip = None

    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig(wireguard_config_path)
    )

    local_ip_gre6 = local_ip(gre6_path)
    remote_ip_gre6 = remote_ip(gre6_path)
    private_ip_gre6 = private_gre6tap(gre6_path)

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCould not retrieve the WireGuard configuration.\033[0m")
        return

    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("Could not retrieve the GRE6TAP IP addresses from gre6 file.")
        return

    while True:
        os.system("clear")
        display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips)
        display_stuff_gre6tapn(local_ip_gre6, remote_ip_gre6, private_ip_gre6)
        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[93mWireGuard & GRE6TAP IPSEC\033[97m IRAN Client\033[92m [5]\033[93m Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print(" \033[93mThis is IRAN Client \033[97m[5]\033[0m")
        print("1. \033[93mChange \033[97mWireGuard Private IP Address\033[0m")
        print("2. \033[93mChange \033[97mGRE6TAP\033[93m Private IP Address\033[0m")
        print("3. \033[93mChange \033[92mTunnel Port\033[0m")
        print("4.\033[93m Change \033[92mKharej Server IP \033[96m(Endpoint IP)\033[0m")
        print("5.\033[94m Change IPsec Secret Key\033[0m")
        print("6. \033[92mSave and Exit\033[0m")
        print("0. Back to the previous menu")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice: ")

        if choice == "1":
            new_ip = input("\033[93mEnter New WireGuard Private IP Address : \033[0m")
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                local_ip_gre6 = new_ip
                remote_ip_gre6 = wtb_opposite_ip_wireguard(new_ip)
                allowed_ips = (
                    f"{remote_ip_gre6}/128" if ":" in new_ip else f"{remote_ip_gre6}/32"
                )

                update_gre6tap_ips(
                    gre6_path, new_local_ip=new_ip, new_remote_ip=remote_ip_gre6
                )
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec_client(remote_ip_gre6)

            else:
                print("\033[91mInvalid IP Address!\033[0m")

        elif choice == "2":
            new_gre6_private_ip = input(
                "\033[93mEnter New GRE6TAP Private IP Address : \033[0m"
            )
            if new_gre6_private_ip:
                private_ip_gre6 = new_gre6_private_ip
                update_gre6tap_ips(gre6_path, new_private_ip=private_ip_gre6)
                update_ipsec_conf_wireguard_gre6tap(
                    "/etc/ipsec1.conf", new_gre6_private_ip
                )
            else:
                print("\033[91mInvalid GRE6TAP Private IP Address!\033[0m")

        elif choice == "3":
            listen_port, endpoint = update_tunnel_port(listen_port, endpoint)
            update_ufw_ruleswireguard(
                address_no_subnet, address_no_subnet, listen_port, listen_port
            )

        elif choice == "4":
            endpoint = update_endpoint_ip_server(endpoint)

        elif choice == "5":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secret Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")

        elif choice == "6":
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "Endpoint": endpoint,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfigsec_client(wireguard_config_path, new_config)

            save_stuff_gretap65(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            if new_gre6_private_ip:
                update_ipsec_ip(new_gre6_private_ip)
            break

        elif choice == "0":
            wireguard_gre6tapsec_noconjuction_kharej1_5iran()
            break

        else:
            print("\033[91mPlease select a valid option.\033[0m")


# 1 iran 5 kharej client


def update_gre6tap_ips(
    gre6_path, new_local_ip=None, new_remote_ip=None, new_private_ip=None
):
    try:
        with open(gre6_path, "r") as f:
            content = f.read()

        if new_local_ip:
            content = re.sub(r"local (\S+)", f"local {new_local_ip}", content)
        if new_remote_ip:
            content = re.sub(r"remote (\S+)", f"remote {new_remote_ip}", content)
        if new_private_ip:
            content = re.sub(
                r"ip -6 addr add \S+/64 dev azumig6?",
                f"ip -6 addr add {new_private_ip}/64 dev azumig6",
                content,
            )

        with open(gre6_path, "w") as f:
            f.write(content)

    except FileNotFoundError:
        print(f"\033[91mFile {gre6_path} doesn't exist\033[0m")
    except Exception as e:
        print(f"\033[91mOut of ordinary error: {e}\033[0m")


def wireguardafter_gre6tapnsec_iranconfig_1():
    wireguard_config_path = "/etc/wireguard/wireserver1.conf"
    gre6_path = "/etc/gre61.sh"
    new_gre6_private_ip = None

    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig(wireguard_config_path)
    )

    local_ip_gre6 = local_ip(gre6_path)
    remote_ip_gre6 = remote_ip(gre6_path)
    private_ip_gre6 = private_gre6tap(gre6_path)

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCould not retrieve the WireGuard configuration.\033[0m")
        return

    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("Could not retrieve the GRE6TAP IP addresses from gre6 file.")
        return

    while True:
        os.system("clear")
        display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips)
        display_stuff_gre6tapn(local_ip_gre6, remote_ip_gre6, private_ip_gre6)
        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[93mWireGuard & GRE6TAP IPSEC\033[97m IRAN Server Config\033[92m [1]\033[93m Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print(" \033[93mThis is IRAN Server \033[97mConfig [1]\033[0m")
        print("1. \033[93mChange \033[97mWireGuard Private IP Address\033[0m")
        print("2. \033[93mChange \033[97mGRE6TAP\033[93m Private IP Address\033[0m")
        print("3. \033[93mChange \033[92mTunnel Port\033[0m")
        print(
            "4.\033[93m Change \033[92mKharej Client [1] IP \033[96m(Endpoint IP)\033[0m"
        )
        print("5.\033[94m Change IPsec Secret Key\033[0m")
        print("6. \033[92mSave and Exit\033[0m")
        print("0. Back to the previous menu")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice: ")

        if choice == "1":
            new_ip = input("\033[93mEnter New WireGuard Private IP Address : \033[0m")
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                local_ip_gre6 = new_ip
                remote_ip_gre6 = wtb_opposite_ip_wireguard(new_ip)
                allowed_ips = (
                    f"{remote_ip_gre6}/128" if ":" in new_ip else f"{remote_ip_gre6}/32"
                )

                update_gre6tap_ips(
                    gre6_path, new_local_ip=new_ip, new_remote_ip=remote_ip_gre6
                )
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec1(remote_ip_gre6)

            else:
                print("\033[91mInvalid IP Address!\033[0m")

        elif choice == "2":
            new_gre6_private_ip = input(
                "\033[93mEnter New GRE6TAP Private IP Address : \033[0m"
            )
            if new_gre6_private_ip:
                private_ip_gre6 = new_gre6_private_ip
                update_gre6tap_ips(gre6_path, new_private_ip=private_ip_gre6)
                update_ipsec_conf_wireguard_gre6tapserver1(
                    "/etc/ipsec1.conf", new_gre6_private_ip
                )
            else:
                print("\033[91mInvalid GRE6TAP Private IP Address!\033[0m")

        elif choice == "3":
            listen_port, endpoint = update_tunnel_port(listen_port, endpoint)
            update_ufw_ruleswireguard(
                address_no_subnet, address_no_subnet, listen_port, listen_port
            )

        elif choice == "4":
            endpoint = update_endpoint_ir_ip1(endpoint)

        elif choice == "5":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secret Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")

        elif choice == "6":
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "Endpoint": endpoint,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfigsec1(wireguard_config_path, new_config)

            save_stuff_gretap61(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            if new_gre6_private_ip:
                update_ipsec_ip_multi(new_gre6_private_ip)
            break

        elif choice == "0":
            wireguard_gre6tapsec_noconjuction_1iran_5kharej()
            break

        else:
            print("\033[91mPlease select a valid option.\033[0m")


def wireguardafter_gre6tapnsec_iranconfig_2():
    wireguard_config_path = "/etc/wireguard/wireserver2.conf"
    gre6_path = "/etc/gre62.sh"
    new_gre6_private_ip = None

    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig(wireguard_config_path)
    )

    local_ip_gre6 = local_ip(gre6_path)
    remote_ip_gre6 = remote_ip(gre6_path)
    private_ip_gre6 = private_gre6tap(gre6_path)

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCould not retrieve the WireGuard configuration.\033[0m")
        return

    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("Could not retrieve the GRE6TAP IP addresses from gre6 file.")
        return

    while True:
        os.system("clear")
        display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips)
        display_stuff_gre6tapn(local_ip_gre6, remote_ip_gre6, private_ip_gre6)
        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[93mWireGuard & GRE6TAP IPSEC\033[97m IRAN Server Config\033[92m [2]\033[93m Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print(" \033[93mThis is IRAN Server \033[97mConfig [2]\033[0m")
        print("1. \033[93mChange \033[97mWireGuard Private IP Address\033[0m")
        print("2. \033[93mChange \033[97mGRE6TAP\033[93m Private IP Address\033[0m")
        print("3. \033[93mChange \033[92mTunnel Port\033[0m")
        print(
            "4.\033[93m Change \033[92mKharej Client [2] IP \033[96m(Endpoint IP)\033[0m"
        )
        print("5.\033[94m Change IPsec Secret Key\033[0m")
        print("6. \033[92mSave and Exit\033[0m")
        print("0. Back to the previous menu")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice: ")

        if choice == "1":
            new_ip = input("\033[93mEnter New WireGuard Private IP Address : \033[0m")
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                local_ip_gre6 = new_ip
                remote_ip_gre6 = wtb_opposite_ip_wireguard(new_ip)
                allowed_ips = (
                    f"{remote_ip_gre6}/128" if ":" in new_ip else f"{remote_ip_gre6}/32"
                )

                update_gre6tap_ips(
                    gre6_path, new_local_ip=new_ip, new_remote_ip=remote_ip_gre6
                )
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec2(remote_ip_gre6)

            else:
                print("\033[91mInvalid IP Address!\033[0m")

        elif choice == "2":
            new_gre6_private_ip = input(
                "\033[93mEnter New GRE6TAP Private IP Address : \033[0m"
            )
            if new_gre6_private_ip:
                private_ip_gre6 = new_gre6_private_ip
                update_gre6tap_ips(gre6_path, new_private_ip=private_ip_gre6)
                update_ipsec_conf_wireguard_gre6tapserver2(
                    "/etc/ipsec1.conf", new_gre6_private_ip
                )
            else:
                print("\033[91mInvalid GRE6TAP Private IP Address!\033[0m")

        elif choice == "3":
            listen_port, endpoint = update_tunnel_port(listen_port, endpoint)
            update_ufw_ruleswireguard(
                address_no_subnet, address_no_subnet, listen_port, listen_port
            )

        elif choice == "4":
            endpoint = update_endpoint_ir_ip2(endpoint)

        elif choice == "5":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secret Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")

        elif choice == "6":
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "Endpoint": endpoint,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfigsec2(wireguard_config_path, new_config)

            save_stuff_gretap62(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            if new_gre6_private_ip:
                update_ipsec_ip_multi2(new_gre6_private_ip)
            break

        elif choice == "0":
            wireguard_gre6tapsec_noconjuction_1iran_5kharej()
            break

        else:
            print("\033[91mPlease select a valid option.\033[0m")


def wireguardafter_gre6tapnsec_iranconfig_3():
    wireguard_config_path = "/etc/wireguard/wireserver3.conf"
    gre6_path = "/etc/gre63.sh"
    new_gre6_private_ip = None

    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig(wireguard_config_path)
    )

    local_ip_gre6 = local_ip(gre6_path)
    remote_ip_gre6 = remote_ip(gre6_path)
    private_ip_gre6 = private_gre6tap(gre6_path)

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCould not retrieve the WireGuard configuration.\033[0m")
        return

    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("Could not retrieve the GRE6TAP IP addresses from gre6 file.")
        return

    while True:
        os.system("clear")
        display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips)
        display_stuff_gre6tapn(local_ip_gre6, remote_ip_gre6, private_ip_gre6)
        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[93mWireGuard & GRE6TAP IPSEC\033[97m IRAN Server Config\033[92m [3]\033[93m Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print(" \033[93mThis is IRAN Server \033[97mConfig [3]\033[0m")
        print("1. \033[93mChange \033[97mWireGuard Private IP Address\033[0m")
        print("2. \033[93mChange \033[97mGRE6TAP\033[93m Private IP Address\033[0m")
        print("3. \033[93mChange \033[92mTunnel Port\033[0m")
        print(
            "4.\033[93m Change \033[92mKharej Client [3] IP \033[96m(Endpoint IP)\033[0m"
        )
        print("5.\033[94m Change IPsec Secret Key\033[0m")
        print("6. \033[92mSave and Exit\033[0m")
        print("0. Back to the previous menu")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice: ")

        if choice == "1":
            new_ip = input("\033[93mEnter New WireGuard Private IP Address : \033[0m")
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                local_ip_gre6 = new_ip
                remote_ip_gre6 = wtb_opposite_ip_wireguard(new_ip)
                allowed_ips = (
                    f"{remote_ip_gre6}/128" if ":" in new_ip else f"{remote_ip_gre6}/32"
                )

                update_gre6tap_ips(
                    gre6_path, new_local_ip=new_ip, new_remote_ip=remote_ip_gre6
                )
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec3(remote_ip_gre6)

            else:
                print("\033[91mInvalid IP Address!\033[0m")

        elif choice == "2":
            new_gre6_private_ip = input(
                "\033[93mEnter New GRE6TAP Private IP Address : \033[0m"
            )
            if new_gre6_private_ip:
                private_ip_gre6 = new_gre6_private_ip
                update_gre6tap_ips(gre6_path, new_private_ip=private_ip_gre6)
                update_ipsec_conf_wireguard_gre6tapserver3(
                    "/etc/ipsec1.conf", new_gre6_private_ip
                )
            else:
                print("\033[91mInvalid GRE6TAP Private IP Address!\033[0m")

        elif choice == "3":
            listen_port, endpoint = update_tunnel_port(listen_port, endpoint)
            update_ufw_ruleswireguard(
                address_no_subnet, address_no_subnet, listen_port, listen_port
            )

        elif choice == "4":
            endpoint = update_endpoint_ir_ip3(endpoint)

        elif choice == "5":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secret Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")

        elif choice == "6":
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "Endpoint": endpoint,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfigsec3(wireguard_config_path, new_config)

            save_stuff_gretap63(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            if new_gre6_private_ip:
                update_ipsec_ip_multi3(new_gre6_private_ip)
            break

        elif choice == "0":
            wireguard_gre6tapsec_noconjuction_1iran_5kharej()
            break

        else:
            print("\033[91mPlease select a valid option.\033[0m")


def wireguardafter_gre6tapnsec_iranconfig_4():
    wireguard_config_path = "/etc/wireguard/wireserver4.conf"
    gre6_path = "/etc/gre64.sh"
    new_gre6_private_ip = None

    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig(wireguard_config_path)
    )

    local_ip_gre6 = local_ip(gre6_path)
    remote_ip_gre6 = remote_ip(gre6_path)
    private_ip_gre6 = private_gre6tap(gre6_path)

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCould not retrieve the WireGuard configuration.\033[0m")
        return

    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("Could not retrieve the GRE6TAP IP addresses from gre6 file.")
        return

    while True:
        os.system("clear")
        display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips)
        display_stuff_gre6tapn(local_ip_gre6, remote_ip_gre6, private_ip_gre6)
        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[93mWireGuard & GRE6TAP IPSEC\033[97m IRAN Server Config\033[92m [4]\033[93m Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print(" \033[93mThis is IRAN Server \033[97mConfig [4]\033[0m")
        print("1. \033[93mChange \033[97mWireGuard Private IP Address\033[0m")
        print("2. \033[93mChange \033[97mGRE6TAP\033[93m Private IP Address\033[0m")
        print("3. \033[93mChange \033[92mTunnel Port\033[0m")
        print(
            "4.\033[93m Change \033[92mKharej Client [4] IP \033[96m(Endpoint IP)\033[0m"
        )
        print("5.\033[94m Change IPsec Secret Key\033[0m")
        print("6. \033[92mSave and Exit\033[0m")
        print("0. Back to the previous menu")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice: ")

        if choice == "1":
            new_ip = input("\033[93mEnter New WireGuard Private IP Address : \033[0m")
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                local_ip_gre6 = new_ip
                remote_ip_gre6 = wtb_opposite_ip_wireguard(new_ip)
                allowed_ips = (
                    f"{remote_ip_gre6}/128" if ":" in new_ip else f"{remote_ip_gre6}/32"
                )

                update_gre6tap_ips(
                    gre6_path, new_local_ip=new_ip, new_remote_ip=remote_ip_gre6
                )
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec4(remote_ip_gre6)

            else:
                print("\033[91mInvalid IP Address!\033[0m")

        elif choice == "2":
            new_gre6_private_ip = input(
                "\033[93mEnter New GRE6TAP Private IP Address : \033[0m"
            )
            if new_gre6_private_ip:
                private_ip_gre6 = new_gre6_private_ip
                update_gre6tap_ips(gre6_path, new_private_ip=private_ip_gre6)
                update_ipsec_conf_wireguard_gre6tapserver4(
                    "/etc/ipsec1.conf", new_gre6_private_ip
                )
            else:
                print("\033[91mInvalid GRE6TAP Private IP Address!\033[0m")

        elif choice == "3":
            listen_port, endpoint = update_tunnel_port(listen_port, endpoint)
            update_ufw_ruleswireguard(
                address_no_subnet, address_no_subnet, listen_port, listen_port
            )

        elif choice == "4":
            endpoint = update_endpoint_ir_ip4(endpoint)

        elif choice == "5":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secrett Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")

        elif choice == "6":
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "Endpoint": endpoint,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfigsec4(wireguard_config_path, new_config)

            save_stuff_gretap64(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            if new_gre6_private_ip:
                update_ipsec_ip_multi4(new_gre6_private_ip)
            break

        elif choice == "0":
            wireguard_gre6tapsec_noconjuction_1iran_5kharej()
            break

        else:
            print("\033[91mPlease select a valid option.\033[0m")


def wireguardafter_gre6tapnsec_iranconfig_5():
    wireguard_config_path = "/etc/wireguard/wireserver5.conf"
    gre6_path = "/etc/gre65.sh"
    new_gre6_private_ip = None

    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig(wireguard_config_path)
    )

    local_ip_gre6 = local_ip(gre6_path)
    remote_ip_gre6 = remote_ip(gre6_path)
    private_ip_gre6 = private_gre6tap(gre6_path)

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCould not retrieve the WireGuard configuration.\033[0m")
        return

    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("Could not retrieve the GRE6TAP IP addresses from gre6 file.")
        return

    while True:
        os.system("clear")
        display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips)
        display_stuff_gre6tapn(local_ip_gre6, remote_ip_gre6, private_ip_gre6)
        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[93mWireGuard & GRE6TAP IPSEC\033[97m IRAN Server Config\033[92m [5]\033[93m Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print(" \033[93mThis is IRAN Server \033[97mConfig [5]\033[0m")
        print("1. \033[93mChange \033[97mWireGuard Private IP Address\033[0m")
        print("2. \033[93mChange \033[97mGRE6TAP\033[93m Private IP Address\033[0m")
        print("3. \033[93mChange \033[92mTunnel Port\033[0m")
        print(
            "4.\033[93m Change \033[92mKharej Client [5] IP \033[96m(Endpoint IP)\033[0m"
        )
        print("5.\033[94m Change IPsec Secret Key\033[0m")
        print("6. \033[92mSave and Exit\033[0m")
        print("0. Back to the previous menu")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice: ")

        if choice == "1":
            new_ip = input("\033[93mEnter New WireGuard Private IP Address : \033[0m")
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                local_ip_gre6 = new_ip
                remote_ip_gre6 = wtb_opposite_ip_wireguard(new_ip)
                allowed_ips = (
                    f"{remote_ip_gre6}/128" if ":" in new_ip else f"{remote_ip_gre6}/32"
                )

                update_gre6tap_ips(
                    gre6_path, new_local_ip=new_ip, new_remote_ip=remote_ip_gre6
                )
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec5(remote_ip_gre6)

            else:
                print("\033[91mInvalid IP Address!\033[0m")

        elif choice == "2":
            new_gre6_private_ip = input(
                "\033[93mEnter New GRE6TAP Private IP Address : \033[0m"
            )
            if new_gre6_private_ip:
                private_ip_gre6 = new_gre6_private_ip
                update_gre6tap_ips(gre6_path, new_private_ip=private_ip_gre6)
                update_ipsec_conf_wireguard_gre6tapserver5(
                    "/etc/ipsec1.conf", new_gre6_private_ip
                )
            else:
                print("\033[91mInvalid GRE6TAP Private IP Address!\033[0m")

        elif choice == "3":
            listen_port, endpoint = update_tunnel_port(listen_port, endpoint)
            update_ufw_ruleswireguard(
                address_no_subnet, address_no_subnet, listen_port, listen_port
            )

        elif choice == "4":
            endpoint = update_endpoint_ir_ip5(endpoint)

        elif choice == "5":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secret Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")

        elif choice == "6":
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "Endpoint": endpoint,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfigsec5(wireguard_config_path, new_config)

            save_stuff_gretap65(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            if new_gre6_private_ip:
                update_ipsec_ip_multi5(new_gre6_private_ip)
            break

        elif choice == "0":
            wireguard_gre6tapsec_noconjuction_1iran_5kharej()
            break

        else:
            print("\033[91mPlease select a valid option.\033[0m")


def wireguardafter_gre6tapnsec_kharej_client1():
    wireguard_config_path = "/etc/wireguard/wireclient.conf"
    gre6_path = "/etc/gre61.sh"
    new_gre6_private_ip = None

    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig(wireguard_config_path)
    )

    local_ip_gre6 = local_ip(gre6_path)
    remote_ip_gre6 = remote_ip(gre6_path)
    private_ip_gre6 = private_gre6tap(gre6_path)

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCould not retrieve the WireGuard configuration.\033[0m")
        return

    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("Could not retrieve the GRE6TAP IP addresses from gre6 file.")
        return

    while True:
        os.system("clear")
        display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips)
        display_stuff_gre6tapn(local_ip_gre6, remote_ip_gre6, private_ip_gre6)
        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[93mWireGuard & GRE6TAP IPSEC\033[97m Kharej Client\033[92m [1]\033[93m Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print(" \033[93mThis is Kharej Client \033[97m[1]\033[0m")
        print("1. \033[93mChange \033[97mWireGuard Private IP Address\033[0m")
        print("2. \033[93mChange \033[97mGRE6TAP\033[93m Private IP Address\033[0m")
        print("3. \033[93mChange \033[92mTunnel Port\033[0m")
        print("4.\033[93m Change \033[92mIRAN Server IP \033[96m(Endpoint IP)\033[0m")
        print("5.\033[94m Change IPsec Secret Key\033[0m")
        print("6. \033[92mSave and Exit\033[0m")
        print("0. Back to the previous menu")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice: ")

        if choice == "1":
            new_ip = input("\033[93mEnter New WireGuard Private IP Address : \033[0m")
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                local_ip_gre6 = new_ip
                remote_ip_gre6 = wtb_opposite_ip_wireguard(new_ip)
                allowed_ips = (
                    f"{remote_ip_gre6}/128" if ":" in new_ip else f"{remote_ip_gre6}/32"
                )

                update_gre6tap_ips(
                    gre6_path, new_local_ip=new_ip, new_remote_ip=remote_ip_gre6
                )
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec_client(remote_ip_gre6)

            else:
                print("\033[91mInvalid IP Address!\033[0m")

        elif choice == "2":
            new_gre6_private_ip = input(
                "\033[93mEnter New GRE6TAP Private IP Address : \033[0m"
            )
            if new_gre6_private_ip:
                private_ip_gre6 = new_gre6_private_ip
                update_gre6tap_ips(gre6_path, new_private_ip=private_ip_gre6)
                update_ipsec_conf_wireguard_gre6tap(
                    "/etc/ipsec1.conf", new_gre6_private_ip
                )
            else:
                print("\033[91mInvalid GRE6TAP Private IP Address!\033[0m")

        elif choice == "3":
            listen_port, endpoint = update_tunnel_port(listen_port, endpoint)
            update_ufw_ruleswireguard(
                address_no_subnet, address_no_subnet, listen_port, listen_port
            )

        elif choice == "4":
            endpoint = update_endpoint_ir_server(endpoint)

        elif choice == "5":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secret Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")

        elif choice == "6":
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "Endpoint": endpoint,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfigsec_client(wireguard_config_path, new_config)

            save_stuff_gretap61(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            if new_gre6_private_ip:
                update_ipsec_ip(new_gre6_private_ip)
            break

        elif choice == "0":
            wireguard_gre6tapsec_noconjuction_1iran_5kharej()
            break

        else:
            print("\033[91mPlease select a valid option.\033[0m")


def wireguardafter_gre6tapnsec_kharej_client2():
    wireguard_config_path = "/etc/wireguard/wireclient.conf"
    gre6_path = "/etc/gre62.sh"
    new_gre6_private_ip = None

    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig(wireguard_config_path)
    )

    local_ip_gre6 = local_ip(gre6_path)
    remote_ip_gre6 = remote_ip(gre6_path)
    private_ip_gre6 = private_gre6tap(gre6_path)

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCould not retrieve the WireGuard configuration.\033[0m")
        return

    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("Could not retrieve the GRE6TAP IP addresses from gre6 file.")
        return

    while True:
        os.system("clear")
        display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips)
        display_stuff_gre6tapn(local_ip_gre6, remote_ip_gre6, private_ip_gre6)
        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[93mWireGuard & GRE6TAP IPSEC\033[97m Kharej Client\033[92m [2]\033[93m Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print(" \033[93mThis is Kharej Client \033[97m[2]\033[0m")
        print("1. \033[93mChange \033[97mWireGuard Private IP Address\033[0m")
        print("2. \033[93mChange \033[97mGRE6TAP\033[93m Private IP Address\033[0m")
        print("3. \033[93mChange \033[92mTunnel Port\033[0m")
        print("4.\033[93m Change \033[92mIRAN Server IP \033[96m(Endpoint IP)\033[0m")
        print("5.\033[94m Change IPsec Secret Key\033[0m")
        print("6. \033[92mSave and Exit\033[0m")
        print("0. Back to the previous menu")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice: ")

        if choice == "1":
            new_ip = input("\033[93mEnter New WireGuard Private IP Address : \033[0m")
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                local_ip_gre6 = new_ip
                remote_ip_gre6 = wtb_opposite_ip_wireguard(new_ip)
                allowed_ips = (
                    f"{remote_ip_gre6}/128" if ":" in new_ip else f"{remote_ip_gre6}/32"
                )

                update_gre6tap_ips(
                    gre6_path, new_local_ip=new_ip, new_remote_ip=remote_ip_gre6
                )
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec_client(remote_ip_gre6)

            else:
                print("\033[91mInvalid IP Address!\033[0m")

        elif choice == "2":
            new_gre6_private_ip = input(
                "\033[93mEnter New GRE6TAP Private IP Address : \033[0m"
            )
            if new_gre6_private_ip:
                private_ip_gre6 = new_gre6_private_ip
                update_gre6tap_ips(gre6_path, new_private_ip=private_ip_gre6)
                update_ipsec_conf_wireguard_gre6tap(
                    "/etc/ipsec1.conf", new_gre6_private_ip
                )
            else:
                print("\033[91mInvalid GRE6TAP Private IP Address!\033[0m")

        elif choice == "3":
            listen_port, endpoint = update_tunnel_port(listen_port, endpoint)
            update_ufw_ruleswireguard(
                address_no_subnet, address_no_subnet, listen_port, listen_port
            )

        elif choice == "4":
            endpoint = update_endpoint_ir_server(endpoint)

        elif choice == "5":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secret Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")

        elif choice == "6":
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "Endpoint": endpoint,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfigsec_client(wireguard_config_path, new_config)

            save_stuff_gretap62(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            if new_gre6_private_ip:
                update_ipsec_ip(new_gre6_private_ip)
            break

        elif choice == "0":
            wireguard_gre6tapsec_noconjuction_1iran_5kharej()
            break

        else:
            print("\033[91mPlease select a valid option.\033[0m")


def wireguardafter_gre6tapnsec_kharej_client3():
    wireguard_config_path = "/etc/wireguard/wireclient.conf"
    gre6_path = "/etc/gre63.sh"
    new_gre6_private_ip = None

    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig(wireguard_config_path)
    )

    local_ip_gre6 = local_ip(gre6_path)
    remote_ip_gre6 = remote_ip(gre6_path)
    private_ip_gre6 = private_gre6tap(gre6_path)

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCould not retrieve the WireGuard configuration.\033[0m")
        return

    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("Could not retrieve the GRE6TAP IP addresses from gre6 file.")
        return

    while True:
        os.system("clear")
        display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips)
        display_stuff_gre6tapn(local_ip_gre6, remote_ip_gre6, private_ip_gre6)
        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[93mWireGuard & GRE6TAP IPSEC\033[97m Kharej Client\033[92m [3]\033[93m Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print(" \033[93mThis is Kharej Client \033[97m[3]\033[0m")
        print("1. \033[93mChange \033[97mWireGuard Private IP Address\033[0m")
        print("2. \033[93mChange \033[97mGRE6TAP\033[93m Private IP Address\033[0m")
        print("3. \033[93mChange \033[92mTunnel Port\033[0m")
        print("4.\033[93m Change \033[92mIRAN Server IP \033[96m(Endpoint IP)\033[0m")
        print("5.\033[94m Change IPsec Secret Key\033[0m")
        print("6. \033[92mSave and Exit\033[0m")
        print("0. Back to the previous menu")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice: ")

        if choice == "1":
            new_ip = input("\033[93mEnter New WireGuard Private IP Address : \033[0m")
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                local_ip_gre6 = new_ip
                remote_ip_gre6 = wtb_opposite_ip_wireguard(new_ip)
                allowed_ips = (
                    f"{remote_ip_gre6}/128" if ":" in new_ip else f"{remote_ip_gre6}/32"
                )

                update_gre6tap_ips(
                    gre6_path, new_local_ip=new_ip, new_remote_ip=remote_ip_gre6
                )
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec_client(remote_ip_gre6)

            else:
                print("\033[91mInvalid IP Address!\033[0m")

        elif choice == "2":
            new_gre6_private_ip = input(
                "\033[93mEnter New GRE6TAP Private IP Address : \033[0m"
            )
            if new_gre6_private_ip:
                private_ip_gre6 = new_gre6_private_ip
                update_gre6tap_ips(gre6_path, new_private_ip=private_ip_gre6)
                update_ipsec_conf_wireguard_gre6tap(
                    "/etc/ipsec1.conf", new_gre6_private_ip
                )
            else:
                print("\033[91mInvalid GRE6TAP Private IP Address!\033[0m")

        elif choice == "3":
            listen_port, endpoint = update_tunnel_port(listen_port, endpoint)
            update_ufw_ruleswireguard(
                address_no_subnet, address_no_subnet, listen_port, listen_port
            )

        elif choice == "4":
            endpoint = update_endpoint_ir_server(endpoint)

        elif choice == "5":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secret Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")

        elif choice == "6":
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "Endpoint": endpoint,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfigsec_client(wireguard_config_path, new_config)

            save_stuff_gretap63(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            if new_gre6_private_ip:
                update_ipsec_ip(new_gre6_private_ip)
            break

        elif choice == "0":
            wireguard_gre6tapsec_noconjuction_1iran_5kharej()
            break

        else:
            print("\033[91mPlease select a valid option.\033[0m")


def wireguardafter_gre6tapnsec_kharej_client4():
    wireguard_config_path = "/etc/wireguard/wireclient.conf"
    gre6_path = "/etc/gre64.sh"
    new_gre6_private_ip = None

    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig(wireguard_config_path)
    )

    local_ip_gre6 = local_ip(gre6_path)
    remote_ip_gre6 = remote_ip(gre6_path)
    private_ip_gre6 = private_gre6tap(gre6_path)

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCould not retrieve the WireGuard configuration.\033[0m")
        return

    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("Could not retrieve the GRE6TAP IP addresses from gre6 file.")
        return

    while True:
        os.system("clear")
        display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips)
        display_stuff_gre6tapn(local_ip_gre6, remote_ip_gre6, private_ip_gre6)
        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[93mWireGuard & GRE6TAP IPSEC\033[97m Kharej Client\033[92m [4]\033[93m Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print(" \033[93mThis is Kharej Client \033[97m[4]\033[0m")
        print("1. \033[93mChange \033[97mWireGuard Private IP Address\033[0m")
        print("2. \033[93mChange \033[97mGRE6TAP\033[93m Private IP Address\033[0m")
        print("3. \033[93mChange \033[92mTunnel Port\033[0m")
        print("4.\033[93m Change \033[92mIRAN Server IP \033[96m(Endpoint IP)\033[0m")
        print("5.\033[94m Change IPsec Secret Key\033[0m")
        print("6. \033[92mSave and Exit\033[0m")
        print("0. Back to the previous menu")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice: ")

        if choice == "1":
            new_ip = input("\033[93mEnter New WireGuard Private IP Address : \033[0m")
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                local_ip_gre6 = new_ip
                remote_ip_gre6 = wtb_opposite_ip_wireguard(new_ip)
                allowed_ips = (
                    f"{remote_ip_gre6}/128" if ":" in new_ip else f"{remote_ip_gre6}/32"
                )

                update_gre6tap_ips(
                    gre6_path, new_local_ip=new_ip, new_remote_ip=remote_ip_gre6
                )
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec_client(remote_ip_gre6)

            else:
                print("\033[91mInvalid IP Address!\033[0m")

        elif choice == "2":
            new_gre6_private_ip = input(
                "\033[93mEnter New GRE6TAP Private IP Address : \033[0m"
            )
            if new_gre6_private_ip:
                private_ip_gre6 = new_gre6_private_ip
                update_gre6tap_ips(gre6_path, new_private_ip=private_ip_gre6)
                update_ipsec_conf_wireguard_gre6tap(
                    "/etc/ipsec1.conf", new_gre6_private_ip
                )
            else:
                print("\033[91mInvalid GRE6TAP Private IP Address!\033[0m")

        elif choice == "3":
            listen_port, endpoint = update_tunnel_port(listen_port, endpoint)
            update_ufw_ruleswireguard(
                address_no_subnet, address_no_subnet, listen_port, listen_port
            )

        elif choice == "4":
            endpoint = update_endpoint_ir_server(endpoint)

        elif choice == "5":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secret Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")

        elif choice == "6":
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "Endpoint": endpoint,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfigsec_client(wireguard_config_path, new_config)

            save_stuff_gretap64(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            if new_gre6_private_ip:
                update_ipsec_ip(new_gre6_private_ip)
            break

        elif choice == "0":
            wireguard_gre6tapsec_noconjuction_1iran_5kharej()
            break

        else:
            print("\033[91mPlease select a valid option.\033[0m")


def wireguardafter_gre6tapnsec_kharej_client5():
    wireguard_config_path = "/etc/wireguard/wireclient.conf"
    gre6_path = "/etc/gre65.sh"
    new_gre6_private_ip = None

    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig(wireguard_config_path)
    )

    local_ip_gre6 = local_ip(gre6_path)
    remote_ip_gre6 = remote_ip(gre6_path)
    private_ip_gre6 = private_gre6tap(gre6_path)

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCould not retrieve the WireGuard configuration.\033[0m")
        return

    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("Could not retrieve the GRE6TAP IP addresses from gre6 file.")
        return

    while True:
        os.system("clear")
        display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips)
        display_stuff_gre6tapn(local_ip_gre6, remote_ip_gre6, private_ip_gre6)
        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[93mWireGuard & GRE6TAP IPSEC\033[97m Kharej Client\033[92m [5]\033[93m Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print(" \033[93mThis is Kharej Client \033[97m[5]\033[0m")
        print("1. \033[93mChange \033[97mWireGuard Private IP Address\033[0m")
        print("2. \033[93mChange \033[97mGRE6TAP\033[93m Private IP Address\033[0m")
        print("3. \033[93mChange \033[92mTunnel Port\033[0m")
        print("4.\033[93m Change \033[92mIRAN Server IP \033[96m(Endpoint IP)\033[0m")
        print("5.\033[94m Change IPsec Secret Key\033[0m")
        print("6. \033[92mSave and Exit\033[0m")
        print("0. Back to the previous menu")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice: ")

        if choice == "1":
            new_ip = input("\033[93mEnter New WireGuard Private IP Address : \033[0m")
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                local_ip_gre6 = new_ip
                remote_ip_gre6 = wtb_opposite_ip_wireguard(new_ip)
                allowed_ips = (
                    f"{remote_ip_gre6}/128" if ":" in new_ip else f"{remote_ip_gre6}/32"
                )

                update_gre6tap_ips(
                    gre6_path, new_local_ip=new_ip, new_remote_ip=remote_ip_gre6
                )
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec_client(remote_ip_gre6)

            else:
                print("\033[91mInvalid IP Address!\033[0m")

        elif choice == "2":
            new_gre6_private_ip = input(
                "\033[93mEnter New GRE6TAP Private IP Address : \033[0m"
            )
            if new_gre6_private_ip:
                private_ip_gre6 = new_gre6_private_ip
                update_gre6tap_ips(gre6_path, new_private_ip=private_ip_gre6)
                update_ipsec_conf_wireguard_gre6tap(
                    "/etc/ipsec1.conf", new_gre6_private_ip
                )
            else:
                print("\033[91mInvalid GRE6TAP Private IP Address!\033[0m")

        elif choice == "3":
            listen_port, endpoint = update_tunnel_port(listen_port, endpoint)
            update_ufw_ruleswireguard(
                address_no_subnet, address_no_subnet, listen_port, listen_port
            )

        elif choice == "4":
            endpoint = update_endpoint_ir_server(endpoint)

        elif choice == "5":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secret Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")

        elif choice == "6":
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "Endpoint": endpoint,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfigsec_client(wireguard_config_path, new_config)

            save_stuff_gretap65(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            if new_gre6_private_ip:
                update_ipsec_ip(new_gre6_private_ip)
            break

        elif choice == "0":
            wireguard_gre6tapsec_noconjuction_1iran_5kharej()
            break

        else:
            print("\033[91mPlease select a valid option.\033[0m")


def gre6tapwireguardeditserver_mnu():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print(
        "\033[92m(   ) \033[92mEdit local\033[93m GRE6TAP Native + Wireguard Menu\033[0m"
    )
    print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[92mNo IPSEC\033[0m")
    print("2. \033[93mWith IPSEC\033[0m")
    print("3. \033[94mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        choice = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if choice == "1":
            gre6tap_wireguard_nosec_edit_local()
            break
        elif choice == "2":
            gre6tap_wireguard_sec_edit_local()
            break
        elif choice == "3":
            clear()
            wireguard_edit_server()
            break
        else:
            print("Invalid choice.")


def gre6tap_wireguard_nosec_edit_local():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print("\033[92m(   ) \033[93mGre6tap[Native] + Wireguard \033[93m Edit Menu\033[0m")
    print(
        '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
    )
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print(
        "1. \033[92mGre6tap[native] + Wireguard - [1]Kharej Server [5]IRAN Clients\033[0m"
    )
    print(
        "2. \033[93mGre6tap[native] + Wireguard - [1]IRAN   Server [5]Kharej Clients\033[0m"
    )
    print("\033[93m───────────────────────────────────────\033[0m")
    print("0.\033[97mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")
    while True:
        server_type = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if server_type == "1":
            wireguardedit_gre6tap_noconjuction_kharej1_5iran()
            break
        elif server_type == "2":
            wireguardedit_gre6tap_noconjuction_1iran_5kharej()
            break
        elif server_type == "0":
            os.system("clear")
            gre6tapwireguardeditserver_mnu()
            break
        else:
            print("Invalid choice.")


def wireguardedit_gre6tap_noconjuction_1iran_5kharej():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print(
        "\033[92m(   ) \033[93mGre6tap[native] + Wireguard \033[92m[1]IRAN Server\033[96m [5]Kharej Client\033[93m Edit Menu\033[0m"
    )
    print(
        '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
    )
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[92mKharej Client [1] Config\033[0m")
    print("2. \033[92mKharej Client [2] Config\033[0m")
    print("3. \033[92mKharej Client [3] Config\033[0m")
    print("4. \033[93mKharej Client [4] Config\033[0m")
    print("5. \033[92mKharej Client [5] Config\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    print("6. \033[96mIRAN Server Config\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    print("0.\033[97mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")
    while True:
        server_type = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if server_type == "1":
            wireguard_gre6tapn_kharej_client1()
            break
        elif server_type == "2":
            wireguard_gre6tapn_kharej_client2()
            break
        elif server_type == "3":
            wireguard_gre6tapn_kharej_client3()
            break
        elif server_type == "4":
            wireguard_gre6tapn_kharej_client4()
            break
        elif server_type == "5":
            wireguard_gre6tapn_kharej_client5()
            break
        elif server_type == "6":
            wireguard_gre6tapn_iran_server()
            break
        elif server_type == "0":
            os.system("clear")
            gre6tap_wireguard_nosec_edit_local()
            break
        else:
            print("Invalid choice.")


def wireguard_gre6tapn_iran_server():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print(
        "\033[92m(   ) \033[93mGre6tap[native] + Wireguard \033[92m[1]IRAN Server\033[96m [5]Kharej Client\033[93m Edit Menu\033[0m"
    )
    print(
        '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
    )
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[92mIRAN Server Config [1] \033[0m")
    print("2. \033[92mIRAN Server Config [2]\033[0m")
    print("3. \033[93mIRAN Server Config [3]\033[0m")
    print("4. \033[92mIRAN Server Config [4]\033[0m")
    print("5. \033[92mIRAN Server Config [5]\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    print("0.\033[97mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")
    while True:
        server_type = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if server_type == "1":
            wireguard_gre6tapn_iranconfig_1()
            break
        elif server_type == "2":
            wireguard_gre6tapn_iranconfig_2()
            break
        elif server_type == "3":
            wireguard_gre6tapn_iranconfig_3()
            break
        elif server_type == "4":
            wireguard_gre6tapn_iranconfig_4()
            break
        elif server_type == "5":
            wireguard_gre6tapn_iranconfig_5()
            break
        elif server_type == "0":
            os.system("clear")
            wireguardedit_gre6tap_noconjuction_1iran_5kharej()
            break
        else:
            print("Invalid choice.")


def wireguardedit_gre6tap_noconjuction_kharej1_5iran():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print(
        "\033[92m(   ) \033[93mGre6tap[native] + Wireguard \033[92m[1]Kharej Server\033[96m [5]IRAN Client\033[93m Edit Menu\033[0m"
    )
    print(
        '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
    )
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[92mIRAN Client [1] Config\033[0m")
    print("2. \033[92mIRAN Client [2] Config\033[0m")
    print("3. \033[92mIRAN Client [3] Config\033[0m")
    print("4. \033[93mIRAN Client [4] Config\033[0m")
    print("5. \033[92mIRAN Client [5] Config\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    print("6. \033[96mKharej Server Config\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    print("0.\033[97mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")
    while True:
        server_type = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if server_type == "1":
            wireguard_gre6tapn_iran_client1()
            break
        elif server_type == "2":
            wireguard_gre6tapn_iran_client2()
            break
        elif server_type == "3":
            wireguard_gre6tapn_iran_client3()
            break
        elif server_type == "4":
            wireguard_gre6tapn_iran_client4()
            break
        elif server_type == "5":
            wireguard_gre6tapn_iran_client5()
            break
        elif server_type == "6":
            wireguard_gre6tapn_kharej_server()
            break
        elif server_type == "0":
            os.system("clear")
            gre6tap_wireguard_nosec_edit_local()
            break
        else:
            print("Invalid choice.")


def wireguard_gre6tapn_kharej_server():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print(
        "\033[92m(   ) \033[93mGre6tap[native] + Wireguard \033[92m[1]Kharej Server\033[96m [5]IRAN Client\033[93m Edit Menu\033[0m"
    )
    print(
        '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
    )
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[92mKharej Server Config [1] \033[0m")
    print("2. \033[92mKharej Server Config [2]\033[0m")
    print("3. \033[93mKharej Server Config [3]\033[0m")
    print("4. \033[92mKharej Server Config [4]\033[0m")
    print("5. \033[92mKharej Server Config [5]\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    print("0.\033[97mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")
    while True:
        server_type = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if server_type == "1":
            wireguard_gre6tapn_kharejconfig_1()
            break
        elif server_type == "2":
            wireguard_gre6tapn_kharejconfig_2()
            break
        elif server_type == "3":
            wireguard_gre6tapn_kharejconfig_3()
            break
        elif server_type == "4":
            wireguard_gre6tapn_kharejconfig_4()
            break
        elif server_type == "5":
            wireguard_gre6tapn_kharejconfig_5()
            break
        elif server_type == "0":
            os.system("clear")
            wireguardedit_gre6tap_noconjuction_kharej1_5iran()
            break
        else:
            print("Invalid choice.")


###


def display_stuff_gre6tapn_wire_iran1(local_ip, remote_ip, private_ip):
    lines = [
        f"\033[93mTitle:         GRE6TAP Configuration\033[0m",
        f"\033[97m──────────────────────────────────────\033[0m",
        f"\033[92mIRAN IPV6:       \033[97m{local_ip}\033[0m",
        f"\033[92mKharej [1] IPV6: \033[97m{remote_ip}\033[0m",
        f"\033[93mPrivate IP:      \033[97m{private_ip}\033[0m",
    ]
    box_width = 50

    print("\033[93m╭" + "─" * (box_width - 2) + "╮\033[0m")

    for line in lines:
        print(f"\033[93m {line:<{box_width - 4}} \033[0m")

    print("\033[93m╰" + "─" * (box_width - 2) + "╯\033[0m")


def display_stuff_gre6tapn_wire_iran2(local_ip, remote_ip, private_ip):
    lines = [
        f"\033[93mTitle:         GRE6TAP Configuration\033[0m",
        f"\033[97m──────────────────────────────────────\033[0m",
        f"\033[92mIRAN IPV6:       \033[97m{local_ip}\033[0m",
        f"\033[92mKharej [2] IPV6: \033[97m{remote_ip}\033[0m",
        f"\033[93mPrivate IP:      \033[97m{private_ip}\033[0m",
    ]
    box_width = 50

    print("\033[93m╭" + "─" * (box_width - 2) + "╮\033[0m")

    for line in lines:
        print(f"\033[93m {line:<{box_width - 4}} \033[0m")

    print("\033[93m╰" + "─" * (box_width - 2) + "╯\033[0m")


def display_stuff_gre6tapn_wire_iran3(local_ip, remote_ip, private_ip):
    lines = [
        f"\033[93mTitle:         GRE6TAP Configuration\033[0m",
        f"\033[97m──────────────────────────────────────\033[0m",
        f"\033[92mIRAN IPV6:       \033[97m{local_ip}\033[0m",
        f"\033[92mKharej [3] IPV6: \033[97m{remote_ip}\033[0m",
        f"\033[93mPrivate IP:      \033[97m{private_ip}\033[0m",
    ]
    box_width = 50

    print("\033[93m╭" + "─" * (box_width - 2) + "╮\033[0m")

    for line in lines:
        print(f"\033[93m {line:<{box_width - 4}} \033[0m")

    print("\033[93m╰" + "─" * (box_width - 2) + "╯\033[0m")


def display_stuff_gre6tapn_wire_iran4(local_ip, remote_ip, private_ip):
    lines = [
        f"\033[93mTitle:         GRE6TAP Configuration\033[0m",
        f"\033[97m──────────────────────────────────────\033[0m",
        f"\033[92mIRAN IPV6:       \033[97m{local_ip}\033[0m",
        f"\033[92mKharej [4] IPV6: \033[97m{remote_ip}\033[0m",
        f"\033[93mPrivate IP:      \033[97m{private_ip}\033[0m",
    ]
    box_width = 50

    print("\033[93m╭" + "─" * (box_width - 2) + "╮\033[0m")

    for line in lines:
        print(f"\033[93m {line:<{box_width - 4}} \033[0m")

    print("\033[93m╰" + "─" * (box_width - 2) + "╯\033[0m")


def display_stuff_gre6tapn_wire_iran5(local_ip, remote_ip, private_ip):
    lines = [
        f"\033[93mTitle:         GRE6TAP Configuration\033[0m",
        f"\033[97m──────────────────────────────────────\033[0m",
        f"\033[92mIRAN IPV6:       \033[97m{local_ip}\033[0m",
        f"\033[92mKharej [5] IPV6: \033[97m{remote_ip}\033[0m",
        f"\033[93mPrivate IP:      \033[97m{private_ip}\033[0m",
    ]
    box_width = 50

    print("\033[93m╭" + "─" * (box_width - 2) + "╮\033[0m")

    for line in lines:
        print(f"\033[93m {line:<{box_width - 4}} \033[0m")

    print("\033[93m╰" + "─" * (box_width - 2) + "╯\033[0m")


def display_stuff_gre6tapn_wire_iran_client1(local_ip, remote_ip, private_ip):
    lines = [
        f"\033[93mTitle:         GRE6TAP Configuration\033[0m",
        f"\033[97m──────────────────────────────────────\033[0m",
        f"\033[92mIRAN [1] IPV6:   \033[97m{local_ip}\033[0m",
        f"\033[92mKharej IPV6:     \033[97m{remote_ip}\033[0m",
        f"\033[93mPrivate IP:      \033[97m{private_ip}\033[0m",
    ]
    box_width = 50

    print("\033[93m╭" + "─" * (box_width - 2) + "╮\033[0m")

    for line in lines:
        print(f"\033[93m {line:<{box_width - 4}} \033[0m")

    print("\033[93m╰" + "─" * (box_width - 2) + "╯\033[0m")


def display_stuff_gre6tapn_wire_iran_client2(local_ip, remote_ip, private_ip):
    lines = [
        f"\033[93mTitle:         GRE6TAP Configuration\033[0m",
        f"\033[97m──────────────────────────────────────\033[0m",
        f"\033[92mIRAN [2] IPV6:   \033[97m{local_ip}\033[0m",
        f"\033[92mKharej IPV6:     \033[97m{remote_ip}\033[0m",
        f"\033[93mPrivate IP:      \033[97m{private_ip}\033[0m",
    ]
    box_width = 50

    print("\033[93m╭" + "─" * (box_width - 2) + "╮\033[0m")

    for line in lines:
        print(f"\033[93m {line:<{box_width - 4}} \033[0m")

    print("\033[93m╰" + "─" * (box_width - 2) + "╯\033[0m")


def display_stuff_gre6tapn_wire_iran_client3(local_ip, remote_ip, private_ip):
    lines = [
        f"\033[93mTitle:         GRE6TAP Configuration\033[0m",
        f"\033[97m──────────────────────────────────────\033[0m",
        f"\033[92mIRAN [3] IPV6:   \033[97m{local_ip}\033[0m",
        f"\033[92mKharej IPV6:     \033[97m{remote_ip}\033[0m",
        f"\033[93mPrivate IP:      \033[97m{private_ip}\033[0m",
    ]
    box_width = 50

    print("\033[93m╭" + "─" * (box_width - 2) + "╮\033[0m")

    for line in lines:
        print(f"\033[93m {line:<{box_width - 4}} \033[0m")

    print("\033[93m╰" + "─" * (box_width - 2) + "╯\033[0m")


def display_stuff_gre6tapn_wire_iran_client4(local_ip, remote_ip, private_ip):
    lines = [
        f"\033[93mTitle:         GRE6TAP Configuration\033[0m",
        f"\033[97m──────────────────────────────────────\033[0m",
        f"\033[92mIRAN [4] IPV6:   \033[97m{local_ip}\033[0m",
        f"\033[92mKharej IPV6:     \033[97m{remote_ip}\033[0m",
        f"\033[93mPrivate IP:      \033[97m{private_ip}\033[0m",
    ]
    box_width = 50

    print("\033[93m╭" + "─" * (box_width - 2) + "╮\033[0m")

    for line in lines:
        print(f"\033[93m {line:<{box_width - 4}} \033[0m")

    print("\033[93m╰" + "─" * (box_width - 2) + "╯\033[0m")


def display_stuff_gre6tapn_wire_iran_client5(local_ip, remote_ip, private_ip):
    lines = [
        f"\033[93mTitle:         GRE6TAP Configuration\033[0m",
        f"\033[97m──────────────────────────────────────\033[0m",
        f"\033[92mIRAN [5] IPV6:   \033[97m{local_ip}\033[0m",
        f"\033[92mKharej IPV6:     \033[97m{remote_ip}\033[0m",
        f"\033[93mPrivate IP:      \033[97m{private_ip}\033[0m",
    ]
    box_width = 50

    print("\033[93m╭" + "─" * (box_width - 2) + "╮\033[0m")

    for line in lines:
        print(f"\033[93m {line:<{box_width - 4}} \033[0m")

    print("\033[93m╰" + "─" * (box_width - 2) + "╯\033[0m")


def display_stuff_gre6tapn_wire_kharej1(local_ip, remote_ip, private_ip):
    lines = [
        f"\033[93mTitle:         GRE6TAP Configuration\033[0m",
        f"\033[97m──────────────────────────────────────\033[0m",
        f"\033[92mKharej [1] IPV6:   \033[97m{local_ip}\033[0m",
        f"\033[92mIRAN IPV6:         \033[97m{remote_ip}\033[0m",
        f"\033[93mPrivate IP:        \033[97m{private_ip}\033[0m",
    ]
    box_width = 50

    print("\033[93m╭" + "─" * (box_width - 2) + "╮\033[0m")

    for line in lines:
        print(f"\033[93m {line:<{box_width - 4}} \033[0m")

    print("\033[93m╰" + "─" * (box_width - 2) + "╯\033[0m")


def display_stuff_gre6tapn_wire_kharej2(local_ip, remote_ip, private_ip):
    lines = [
        f"\033[93mTitle:         GRE6TAP Configuration\033[0m",
        f"\033[97m──────────────────────────────────────\033[0m",
        f"\033[92mKharej [2] IPV6:   \033[97m{local_ip}\033[0m",
        f"\033[92mIRAN IPV6:         \033[97m{remote_ip}\033[0m",
        f"\033[93mPrivate IP:        \033[97m{private_ip}\033[0m",
    ]
    box_width = 50

    print("\033[93m╭" + "─" * (box_width - 2) + "╮\033[0m")

    for line in lines:
        print(f"\033[93m {line:<{box_width - 4}} \033[0m")

    print("\033[93m╰" + "─" * (box_width - 2) + "╯\033[0m")


def display_stuff_gre6tapn_wire_kharej3(local_ip, remote_ip, private_ip):
    lines = [
        f"\033[93mTitle:         GRE6TAP Configuration\033[0m",
        f"\033[97m──────────────────────────────────────\033[0m",
        f"\033[92mKharej [3] IPV6:   \033[97m{local_ip}\033[0m",
        f"\033[92mIRAN IPV6:         \033[97m{remote_ip}\033[0m",
        f"\033[93mPrivate IP:        \033[97m{private_ip}\033[0m",
    ]
    box_width = 50

    print("\033[93m╭" + "─" * (box_width - 2) + "╮\033[0m")

    for line in lines:
        print(f"\033[93m {line:<{box_width - 4}} \033[0m")

    print("\033[93m╰" + "─" * (box_width - 2) + "╯\033[0m")


def display_stuff_gre6tapn_wire_kharej4(local_ip, remote_ip, private_ip):
    lines = [
        f"\033[93mTitle:         GRE6TAP Configuration\033[0m",
        f"\033[97m──────────────────────────────────────\033[0m",
        f"\033[92mKharej [4] IPV6:   \033[97m{local_ip}\033[0m",
        f"\033[92mIRAN IPV6:         \033[97m{remote_ip}\033[0m",
        f"\033[93mPrivate IP:        \033[97m{private_ip}\033[0m",
    ]
    box_width = 50

    print("\033[93m╭" + "─" * (box_width - 2) + "╮\033[0m")

    for line in lines:
        print(f"\033[93m {line:<{box_width - 4}} \033[0m")

    print("\033[93m╰" + "─" * (box_width - 2) + "╯\033[0m")


def display_stuff_gre6tapn_wire_kharej5(local_ip, remote_ip, private_ip):
    lines = [
        f"\033[93mTitle:         GRE6TAP Configuration\033[0m",
        f"\033[97m──────────────────────────────────────\033[0m",
        f"\033[92mKharej [5] IPV6:   \033[97m{local_ip}\033[0m",
        f"\033[92mIRAN IPV6:         \033[97m{remote_ip}\033[0m",
        f"\033[93mPrivate IP:        \033[97m{private_ip}\033[0m",
    ]
    box_width = 50

    print("\033[93m╭" + "─" * (box_width - 2) + "╮\033[0m")

    for line in lines:
        print(f"\033[93m {line:<{box_width - 4}} \033[0m")

    print("\033[93m╰" + "─" * (box_width - 2) + "╯\033[0m")


def display_stuff_gre6tapn_wire_kharej_server1(local_ip, remote_ip, private_ip):
    lines = [
        f"\033[93mTitle:         GRE6TAP Configuration\033[0m",
        f"\033[97m──────────────────────────────────────\033[0m",
        f"\033[92mKharej IPV6:       \033[97m{local_ip}\033[0m",
        f"\033[92mIRAN [1] IPV6:     \033[97m{remote_ip}\033[0m",
        f"\033[93mPrivate IP:        \033[97m{private_ip}\033[0m",
    ]
    box_width = 50

    print("\033[93m╭" + "─" * (box_width - 2) + "╮\033[0m")

    for line in lines:
        print(f"\033[93m {line:<{box_width - 4}} \033[0m")

    print("\033[93m╰" + "─" * (box_width - 2) + "╯\033[0m")


def display_stuff_gre6tapn_wire_kharej_server2(local_ip, remote_ip, private_ip):
    lines = [
        f"\033[93mTitle:         GRE6TAP Configuration\033[0m",
        f"\033[97m──────────────────────────────────────\033[0m",
        f"\033[92mKharej IPV6:       \033[97m{local_ip}\033[0m",
        f"\033[92mIRAN [2] IPV6:     \033[97m{remote_ip}\033[0m",
        f"\033[93mPrivate IP:        \033[97m{private_ip}\033[0m",
    ]
    box_width = 50

    print("\033[93m╭" + "─" * (box_width - 2) + "╮\033[0m")

    for line in lines:
        print(f"\033[93m {line:<{box_width - 4}} \033[0m")

    print("\033[93m╰" + "─" * (box_width - 2) + "╯\033[0m")


def display_stuff_gre6tapn_wire_kharej_server3(local_ip, remote_ip, private_ip):
    lines = [
        f"\033[93mTitle:         GRE6TAP Configuration\033[0m",
        f"\033[97m──────────────────────────────────────\033[0m",
        f"\033[92mKharej IPV6:       \033[97m{local_ip}\033[0m",
        f"\033[92mIRAN [3] IPV6:     \033[97m{remote_ip}\033[0m",
        f"\033[93mPrivate IP:        \033[97m{private_ip}\033[0m",
    ]
    box_width = 50

    print("\033[93m╭" + "─" * (box_width - 2) + "╮\033[0m")

    for line in lines:
        print(f"\033[93m {line:<{box_width - 4}} \033[0m")

    print("\033[93m╰" + "─" * (box_width - 2) + "╯\033[0m")


def display_stuff_gre6tapn_wire_kharej_server4(local_ip, remote_ip, private_ip):
    lines = [
        f"\033[93mTitle:         GRE6TAP Configuration\033[0m",
        f"\033[97m──────────────────────────────────────\033[0m",
        f"\033[92mKharej IPV6:       \033[97m{local_ip}\033[0m",
        f"\033[92mIRAN [4] IPV6:     \033[97m{remote_ip}\033[0m",
        f"\033[93mPrivate IP:        \033[97m{private_ip}\033[0m",
    ]
    box_width = 50

    print("\033[93m╭" + "─" * (box_width - 2) + "╮\033[0m")

    for line in lines:
        print(f"\033[93m {line:<{box_width - 4}} \033[0m")

    print("\033[93m╰" + "─" * (box_width - 2) + "╯\033[0m")


def display_stuff_gre6tapn_wire_kharej_server5(local_ip, remote_ip, private_ip):
    lines = [
        f"\033[93mTitle:         GRE6TAP Configuration\033[0m",
        f"\033[97m──────────────────────────────────────\033[0m",
        f"\033[92mKharej IPV6:       \033[97m{local_ip}\033[0m",
        f"\033[92mIRAN [5] IPV6:     \033[97m{remote_ip}\033[0m",
        f"\033[93mPrivate IP:        \033[97m{private_ip}\033[0m",
    ]
    box_width = 50

    print("\033[93m╭" + "─" * (box_width - 2) + "╮\033[0m")

    for line in lines:
        print(f"\033[93m {line:<{box_width - 4}} \033[0m")

    print("\033[93m╰" + "─" * (box_width - 2) + "╯\033[0m")


# az inja


def update_pingfile_sit(name, new_ip):
    try:
        with open(name, "r") as f:
            content = f.read()

        new_content = re.sub(r'ip_address="[^"]+"', f'ip_address="{new_ip}"', content)

        with open(name, "w") as f:
            f.write(new_content)
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def wtb_opposite_ip_sitwire(ip):
    if ":" in ip:  # IPv6
        ip_parts = ip.split(":")
        ip_parts[-1] = "1" if ip_parts[-1] == "2" else "2"
        return ":".join(ip_parts)
    else:  # IPv4
        ip_parts = ip.split(".")
        ip_parts[-1] = "1" if ip_parts[-1] == "2" else "2"
        return ".".join(ip_parts)


def delete_ufw_rules(ip, port=None):
    counterpart_ip = wtb_opposite_ip_sitwire(ip)
    try:
        if port:
            subprocess.run(
                [
                    "sudo",
                    "ufw",
                    "delete",
                    "allow",
                    "from",
                    ip,
                    "to",
                    "any",
                    "port",
                    port,
                ],
                check=False,
            )
            subprocess.run(
                [
                    "sudo",
                    "ufw",
                    "delete",
                    "allow",
                    "from",
                    counterpart_ip,
                    "to",
                    "any",
                    "port",
                    port,
                ],
                check=False,
            )
        else:
            subprocess.run(["sudo", "ufw", "delete", "allow", "from", ip], check=False)
            subprocess.run(
                ["sudo", "ufw", "delete", "allow", "from", counterpart_ip], check=False
            )
    except subprocess.CalledProcessError as e:
        print(f"\033[91merror deleting UFW rules: {e}\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def add_ufw_rules(ip, port=None):
    counterpart_ip = wtb_opposite_ip_sitwire(ip)
    try:
        if port:
            subprocess.run(
                ["sudo", "ufw", "allow", "from", ip, "to", "any", "port", port],
                check=True,
            )
            subprocess.run(
                [
                    "sudo",
                    "ufw",
                    "allow",
                    "from",
                    counterpart_ip,
                    "to",
                    "any",
                    "port",
                    port,
                ],
                check=True,
            )
        else:
            subprocess.run(["sudo", "ufw", "allow", "from", ip], check=True)
            subprocess.run(["sudo", "ufw", "allow", "from", counterpart_ip], check=True)
    except subprocess.CalledProcessError as e:
        print(f"\033[91merror adding UFW rules: {e}\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def display_checkmark(message):
    print("\u2714 " + message)


def private_native(name):
    try:
        with open(name, "r") as f:
            content = f.read()
        match = re.search(r"ip -6 addr add (\S+)/64 dev azumi?", content)
        if match:
            return match.group(1)
        else:
            print("\033[91mno private IP found\033[0m")
    except FileNotFoundError:
        print("\033[91mPrivate file not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")
    return None


def get_current_native_ipsgre61():
    private_ip_private = private_native("/etc/private1.sh")
    private_ip_gre6 = private_gre61("/etc/gre61.sh")
    return {
        "private": private_ip_private,
        "gre6": private_ip_gre6,
    }


def get_current_native_ipsgre62():
    private_ip_private = private_native("/etc/private2.sh")
    private_ip_gre6 = private_gre61("/etc/gre62.sh")
    return {
        "private": private_ip_private,
        "gre6": private_ip_gre6,
    }


def get_current_native_ipsgre63():
    private_ip_private = private_native("/etc/private3.sh")
    private_ip_gre6 = private_gre61("/etc/gre63.sh")
    return {
        "private": private_ip_private,
        "gre6": private_ip_gre6,
    }


def get_current_native_ipsgre64():
    private_ip_private = private_native("/etc/private4.sh")
    private_ip_gre6 = private_gre61("/etc/gre64.sh")
    return {
        "private": private_ip_private,
        "gre6": private_ip_gre6,
    }


def get_current_native_ipsgre65():
    private_ip_private = private_native("/etc/private5.sh")
    private_ip_gre6 = private_gre61("/etc/gre65.sh")
    return {
        "private": private_ip_private,
        "gre6": private_ip_gre6,
    }


def wtb_opposite_ip(ip):
    if ":" in ip:  # IPv6
        ip_parts = ip.split(":")
        ip_parts[-1] = "1" if ip_parts[-1] == "2" else "2"
        return ":".join(ip_parts)
    else:  # IPv4
        ip_parts = ip.split(".")
        ip_parts[-1] = "1" if ip_parts[-1] == "2" else "2"
        return ".".join(ip_parts)


def update_ipfile_gre6_wire1(name, new_ip, update_type):
    try:
        with open(name, "r") as f:
            content = f.read()

        if update_type == "private":
            new_content = re.sub(
                r"ip (-6 )?addr add [^ ]+/64 dev azumi?",
                f"ip -6 addr add {new_ip}/64 dev azumi",
                content,
            )
            ip_parts = new_ip.split(":")
            if new_ip.endswith(":2"):
                ip_parts[-1] = "1"
            else:
                ip_parts[-1] = "2"
            counterpart_ip = ":".join(ip_parts)
            new_content = re.sub(
                r"ip (-6 )?route add [^ ]+/64 dev azumi?",
                f"ip -6 route add {counterpart_ip}/64 dev azumi",
                new_content,
            )
            update_ipfile_gre6_wire1("/etc/gre61.sh", new_ip, update_type="gre6_local")
            update_ipfile_gre6_wire1(
                "/etc/gre61.sh", counterpart_ip, update_type="gre6_remote"
            )
        elif update_type == "local":
            new_content = re.sub(r"local \S+", f"local {new_ip}", content)
        elif update_type == "remote":
            new_content = re.sub(r"remote \S+", f"remote {new_ip}", content)
        elif update_type == "gre6_local":
            new_content = re.sub(r"local \S+", f"local {new_ip}", content)
        elif update_type == "gre6_remote":
            new_content = re.sub(r"remote \S+", f"remote {new_ip}", content)
        elif update_type == "ipsec":
            new_content = re.sub(r"leftsubnet=\S+", f"leftsubnet={new_ip}/64", content)
            new_content = re.sub(r"leftid=\S+", f"leftid={new_ip}", new_content)

            ip_parts = new_ip.split(":")
            if new_ip.endswith(":1"):
                ip_parts[-1] = "2"
            else:
                ip_parts[-1] = "1"
            counterpart_ip = ":".join(ip_parts)
            new_content = re.sub(r"right=\S+", f"right={counterpart_ip}", new_content)
            new_content = re.sub(
                r"rightsubnet=\S+", f"rightsubnet={counterpart_ip}/64", new_content
            )

        with open(name, "w") as f:
            f.write(new_content)
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def update_ipfile_gre6_wire2(name, new_ip, update_type):
    try:
        with open(name, "r") as f:
            content = f.read()

        if update_type == "private":
            new_content = re.sub(
                r"ip (-6 )?addr add [^ ]+/64 dev azumi?",
                f"ip -6 addr add {new_ip}/64 dev azumi",
                content,
            )
            ip_parts = new_ip.split(":")
            if new_ip.endswith(":2"):
                ip_parts[-1] = "1"
            else:
                ip_parts[-1] = "2"
            counterpart_ip = ":".join(ip_parts)
            new_content = re.sub(
                r"ip (-6 )?route add [^ ]+/64 dev azumi?",
                f"ip -6 route add {counterpart_ip}/64 dev azumi",
                new_content,
            )
            update_ipfile_gre6_wire2("/etc/gre62.sh", new_ip, update_type="gre6_local")
            update_ipfile_gre6_wire2(
                "/etc/gre62.sh", counterpart_ip, update_type="gre6_remote"
            )
        elif update_type == "local":
            new_content = re.sub(r"local \S+", f"local {new_ip}", content)
        elif update_type == "remote":
            new_content = re.sub(r"remote \S+", f"remote {new_ip}", content)
        elif update_type == "gre6_local":
            new_content = re.sub(r"local \S+", f"local {new_ip}", content)
        elif update_type == "gre6_remote":
            new_content = re.sub(r"remote \S+", f"remote {new_ip}", content)
        elif update_type == "ipsec":
            new_content = re.sub(r"leftsubnet=\S+", f"leftsubnet={new_ip}/64", content)
            new_content = re.sub(r"leftid=\S+", f"leftid={new_ip}", new_content)

            ip_parts = new_ip.split(":")
            if new_ip.endswith(":1"):
                ip_parts[-1] = "2"
            else:
                ip_parts[-1] = "1"
            counterpart_ip = ":".join(ip_parts)
            new_content = re.sub(r"right=\S+", f"right={counterpart_ip}", new_content)
            new_content = re.sub(
                r"rightsubnet=\S+", f"rightsubnet={counterpart_ip}/64", new_content
            )

        with open(name, "w") as f:
            f.write(new_content)
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def update_ipfile_gre6_wire3(name, new_ip, update_type):
    try:
        with open(name, "r") as f:
            content = f.read()

        if update_type == "private":
            new_content = re.sub(
                r"ip (-6 )?addr add [^ ]+/64 dev azumi?",
                f"ip -6 addr add {new_ip}/64 dev azumi",
                content,
            )
            ip_parts = new_ip.split(":")
            if new_ip.endswith(":2"):
                ip_parts[-1] = "1"
            else:
                ip_parts[-1] = "2"
            counterpart_ip = ":".join(ip_parts)
            new_content = re.sub(
                r"ip (-6 )?route add [^ ]+/64 dev azumi?",
                f"ip -6 route add {counterpart_ip}/64 dev azumi",
                new_content,
            )
            update_ipfile_gre6_wire3("/etc/gre63.sh", new_ip, update_type="gre6_local")
            update_ipfile_gre6_wire3(
                "/etc/gre63.sh", counterpart_ip, update_type="gre6_remote"
            )
        elif update_type == "local":
            new_content = re.sub(r"local \S+", f"local {new_ip}", content)
        elif update_type == "remote":
            new_content = re.sub(r"remote \S+", f"remote {new_ip}", content)
        elif update_type == "gre6_local":
            new_content = re.sub(r"local \S+", f"local {new_ip}", content)
        elif update_type == "gre6_remote":
            new_content = re.sub(r"remote \S+", f"remote {new_ip}", content)
        elif update_type == "ipsec":
            new_content = re.sub(r"leftsubnet=\S+", f"leftsubnet={new_ip}/64", content)
            new_content = re.sub(r"leftid=\S+", f"leftid={new_ip}", new_content)

            ip_parts = new_ip.split(":")
            if new_ip.endswith(":1"):
                ip_parts[-1] = "2"
            else:
                ip_parts[-1] = "1"
            counterpart_ip = ":".join(ip_parts)
            new_content = re.sub(r"right=\S+", f"right={counterpart_ip}", new_content)
            new_content = re.sub(
                r"rightsubnet=\S+", f"rightsubnet={counterpart_ip}/64", new_content
            )

        with open(name, "w") as f:
            f.write(new_content)
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def update_ipfile_gre6_wire4(name, new_ip, update_type):
    try:
        with open(name, "r") as f:
            content = f.read()

        if update_type == "private":
            new_content = re.sub(
                r"ip (-6 )?addr add [^ ]+/64 dev azumi?",
                f"ip -6 addr add {new_ip}/64 dev azumi",
                content,
            )
            ip_parts = new_ip.split(":")
            if new_ip.endswith(":2"):
                ip_parts[-1] = "1"
            else:
                ip_parts[-1] = "2"
            counterpart_ip = ":".join(ip_parts)
            new_content = re.sub(
                r"ip (-6 )?route add [^ ]+/64 dev azumi?",
                f"ip -6 route add {counterpart_ip}/64 dev azumi",
                new_content,
            )
            update_ipfile_gre6_wire4("/etc/gre64.sh", new_ip, update_type="gre6_local")
            update_ipfile_gre6_wire4(
                "/etc/gre64.sh", counterpart_ip, update_type="gre6_remote"
            )
        elif update_type == "local":
            new_content = re.sub(r"local \S+", f"local {new_ip}", content)
        elif update_type == "remote":
            new_content = re.sub(r"remote \S+", f"remote {new_ip}", content)
        elif update_type == "gre6_local":
            new_content = re.sub(r"local \S+", f"local {new_ip}", content)
        elif update_type == "gre6_remote":
            new_content = re.sub(r"remote \S+", f"remote {new_ip}", content)
        elif update_type == "ipsec":
            new_content = re.sub(r"leftsubnet=\S+", f"leftsubnet={new_ip}/64", content)
            new_content = re.sub(r"leftid=\S+", f"leftid={new_ip}", new_content)

            ip_parts = new_ip.split(":")
            if new_ip.endswith(":1"):
                ip_parts[-1] = "2"
            else:
                ip_parts[-1] = "1"
            counterpart_ip = ":".join(ip_parts)
            new_content = re.sub(r"right=\S+", f"right={counterpart_ip}", new_content)
            new_content = re.sub(
                r"rightsubnet=\S+", f"rightsubnet={counterpart_ip}/64", new_content
            )

        with open(name, "w") as f:
            f.write(new_content)
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def update_ipfile_gre6_wire5(name, new_ip, update_type):
    try:
        with open(name, "r") as f:
            content = f.read()

        if update_type == "private":
            new_content = re.sub(
                r"ip (-6 )?addr add [^ ]+/64 dev azumi?",
                f"ip -6 addr add {new_ip}/64 dev azumi",
                content,
            )
            ip_parts = new_ip.split(":")
            if new_ip.endswith(":2"):
                ip_parts[-1] = "1"
            else:
                ip_parts[-1] = "2"
            counterpart_ip = ":".join(ip_parts)
            new_content = re.sub(
                r"ip (-6 )?route add [^ ]+/64 dev azumi?",
                f"ip -6 route add {counterpart_ip}/64 dev azumi",
                new_content,
            )
            update_ipfile_gre6_wire5("/etc/gre65.sh", new_ip, update_type="gre6_local")
            update_ipfile_gre6_wire5(
                "/etc/gre65.sh", counterpart_ip, update_type="gre6_remote"
            )
        elif update_type == "local":
            new_content = re.sub(r"local \S+", f"local {new_ip}", content)
        elif update_type == "remote":
            new_content = re.sub(r"remote \S+", f"remote {new_ip}", content)
        elif update_type == "gre6_local":
            new_content = re.sub(r"local \S+", f"local {new_ip}", content)
        elif update_type == "gre6_remote":
            new_content = re.sub(r"remote \S+", f"remote {new_ip}", content)
        elif update_type == "ipsec":
            new_content = re.sub(r"leftsubnet=\S+", f"leftsubnet={new_ip}/64", content)
            new_content = re.sub(r"leftid=\S+", f"leftid={new_ip}", new_content)

            ip_parts = new_ip.split(":")
            if new_ip.endswith(":1"):
                ip_parts[-1] = "2"
            else:
                ip_parts[-1] = "1"
            counterpart_ip = ":".join(ip_parts)
            new_content = re.sub(r"right=\S+", f"right={counterpart_ip}", new_content)
            new_content = re.sub(
                r"rightsubnet=\S+", f"rightsubnet={counterpart_ip}/64", new_content
            )

        with open(name, "w") as f:
            f.write(new_content)
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def save_stuff_gre61(private_ip, local_ip, remote_ip, is_gre6):
    current_ips = get_current_native_ipsgre61()
    current_ip = current_ips["gre6"] if is_gre6 else current_ips["private"]

    if current_ip:
        delete_ufw_rules(current_ip)

    add_ufw_rules(private_ip)

    counterpart_ip = wtb_opposite_ip(private_ip)
    try:
        if is_gre6:
            update_pingfile_sit("/etc/ping_ip1.sh", counterpart_ip)
            update_ipfile_gre6_wire1("/etc/gre61.sh", private_ip, update_type="private")
            update_ipfile_gre6_wire1("/etc/gre61.sh", local_ip, update_type="local")
            update_ipfile_gre6_wire1("/etc/gre61.sh", remote_ip, update_type="remote")
        else:
            update_pingfile_sit("/etc/ping_v61.sh", counterpart_ip)
            update_ipfile_gre6_wire1(
                "/etc/private1.sh", private_ip, update_type="private"
            )
            update_ipfile_gre6_wire1("/etc/private1.sh", local_ip, update_type="local")
            update_ipfile_gre6_wire1(
                "/etc/private1.sh", remote_ip, update_type="remote"
            )

        interface = "azumig61" if is_gre6 else "azumi1"
        subprocess.run(["ip", "link", "set", "dev", interface, "down"], check=True)
        subprocess.run(["ip", "link", "delete", interface], check=True)
    except subprocess.CalledProcessError as e:
        print(f"\033[91merror bringing interface down or deleting it: {e}\033[0m")

    try:
        script = "/etc/gre61.sh" if is_gre6 else "/etc/private1.sh"
        result = subprocess.run(["/bin/bash", script], capture_output=True, text=True)
        if "RTNETLINK answers: File exists" in result.stderr:
            print("\033[91madditional ip already exists. Ignoring this error\033[0m")
        else:
            result.check_returncode()
        display_checkmark(
            f"\033[92mChanges saved and {interface} interface updated successfully!\033[0m"
        )
        subprocess.run(["sudo", "systemctl", "daemon-reload"], check=True)
        subprocess.run(["sudo", "systemctl", "restart", "ping_ip1"], check=True)

        # display_checkmark("\033[92mSystem services reloaded and restarted successfully!\033[0m")
    except subprocess.CalledProcessError as e:
        print(
            f"\033[91merror applying network changes: {e.stderr.strip() if e.stderr else str(e)}\033[0m"
        )
    except FileNotFoundError:
        print(f"\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def save_stuff_gre62(private_ip, local_ip, remote_ip, is_gre6):
    current_ips = get_current_native_ipsgre62()
    current_ip = current_ips["gre6"] if is_gre6 else current_ips["private"]

    if current_ip:
        delete_ufw_rules(current_ip)

    add_ufw_rules(private_ip)

    counterpart_ip = wtb_opposite_ip(private_ip)
    try:
        if is_gre6:
            update_pingfile_sit("/etc/ping_ip2.sh", counterpart_ip)
            update_ipfile_gre6_wire2("/etc/gre62.sh", private_ip, update_type="private")
            update_ipfile_gre6_wire2("/etc/gre62.sh", local_ip, update_type="local")
            update_ipfile_gre6_wire2("/etc/gre62.sh", remote_ip, update_type="remote")
        else:
            update_pingfile_sit("/etc/ping_v62.sh", counterpart_ip)
            update_ipfile_gre6_wire2(
                "/etc/private2.sh", private_ip, update_type="private"
            )
            update_ipfile_gre6_wire2("/etc/private2.sh", local_ip, update_type="local")
            update_ipfile_gre6_wire2(
                "/etc/private2.sh", remote_ip, update_type="remote"
            )

        interface = "azumig62" if is_gre6 else "azumi2"
        subprocess.run(["ip", "link", "set", "dev", interface, "down"], check=True)
        subprocess.run(["ip", "link", "delete", interface], check=True)
    except subprocess.CalledProcessError as e:
        print(f"\033[91merror bringing interface down or deleting it: {e}\033[0m")

    try:
        script = "/etc/gre62.sh" if is_gre6 else "/etc/private2.sh"
        result = subprocess.run(["/bin/bash", script], capture_output=True, text=True)
        if "RTNETLINK answers: File exists" in result.stderr:
            print("\033[91madditional ip already exists. Ignoring this error\033[0m")
        else:
            result.check_returncode()
        display_checkmark(
            f"\033[92mChanges saved and {interface} interface updated successfully!\033[0m"
        )
        subprocess.run(["sudo", "systemctl", "daemon-reload"], check=True)
        subprocess.run(["sudo", "systemctl", "restart", "ping_ip2"], check=True)

        # display_checkmark("\033[92mSystem services reloaded and restarted successfully!\033[0m")
    except subprocess.CalledProcessError as e:
        print(
            f"\033[91merror applying network changes: {e.stderr.strip() if e.stderr else str(e)}\033[0m"
        )
    except FileNotFoundError:
        print(f"\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def save_stuff_gre63(private_ip, local_ip, remote_ip, is_gre6):
    current_ips = get_current_native_ipsgre63()
    current_ip = current_ips["gre6"] if is_gre6 else current_ips["private"]

    if current_ip:
        delete_ufw_rules(current_ip)

    add_ufw_rules(private_ip)

    counterpart_ip = wtb_opposite_ip(private_ip)
    try:
        if is_gre6:
            update_pingfile_sit("/etc/ping_ip3.sh", counterpart_ip)
            update_ipfile_gre6_wire3("/etc/gre63.sh", private_ip, update_type="private")
            update_ipfile_gre6_wire3("/etc/gre63.sh", local_ip, update_type="local")
            update_ipfile_gre6_wire3("/etc/gre63.sh", remote_ip, update_type="remote")
        else:
            update_pingfile_sit("/etc/ping_v63.sh", counterpart_ip)
            update_ipfile_gre6_wire3(
                "/etc/private3.sh", private_ip, update_type="private"
            )
            update_ipfile_gre6_wire3("/etc/private3.sh", local_ip, update_type="local")
            update_ipfile_gre6_wire3(
                "/etc/private3.sh", remote_ip, update_type="remote"
            )

        interface = "azumig63" if is_gre6 else "azumi3"
        subprocess.run(["ip", "link", "set", "dev", interface, "down"], check=True)
        subprocess.run(["ip", "link", "delete", interface], check=True)
    except subprocess.CalledProcessError as e:
        print(f"\033[91merror bringing interface down or deleting it: {e}\033[0m")

    try:
        script = "/etc/gre63.sh" if is_gre6 else "/etc/private3.sh"
        result = subprocess.run(["/bin/bash", script], capture_output=True, text=True)
        if "RTNETLINK answers: File exists" in result.stderr:
            print("\033[91madditional ip already exists. Ignoring this error\033[0m")
        else:
            result.check_returncode()
        display_checkmark(
            f"\033[92mChanges saved and {interface} interface updated successfully!\033[0m"
        )
        subprocess.run(["sudo", "systemctl", "daemon-reload"], check=True)
        subprocess.run(["sudo", "systemctl", "restart", "ping_ip3"], check=True)

        # display_checkmark("\033[92mSystem services reloaded and restarted successfully!\033[0m")
    except subprocess.CalledProcessError as e:
        print(
            f"\033[91merror applying network changes: {e.stderr.strip() if e.stderr else str(e)}\033[0m"
        )
    except FileNotFoundError:
        print(f"\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def save_stuff_gre64(private_ip, local_ip, remote_ip, is_gre6):
    current_ips = get_current_native_ipsgre64()
    current_ip = current_ips["gre6"] if is_gre6 else current_ips["private"]

    if current_ip:
        delete_ufw_rules(current_ip)

    add_ufw_rules(private_ip)

    counterpart_ip = wtb_opposite_ip(private_ip)
    try:
        if is_gre6:
            update_pingfile_sit("/etc/ping_ip4.sh", counterpart_ip)
            update_ipfile_gre6_wire4("/etc/gre64.sh", private_ip, update_type="private")
            update_ipfile_gre6_wire4("/etc/gre64.sh", local_ip, update_type="local")
            update_ipfile_gre6_wire4("/etc/gre64.sh", remote_ip, update_type="remote")
        else:
            update_pingfile_sit("/etc/ping_v64.sh", counterpart_ip)
            update_ipfile_gre6_wire4(
                "/etc/private4.sh", private_ip, update_type="private"
            )
            update_ipfile_gre6_wire4("/etc/private4.sh", local_ip, update_type="local")
            update_ipfile_gre6_wire4(
                "/etc/private4.sh", remote_ip, update_type="remote"
            )

        interface = "azumig64" if is_gre6 else "azumi4"
        subprocess.run(["ip", "link", "set", "dev", interface, "down"], check=True)
        subprocess.run(["ip", "link", "delete", interface], check=True)
    except subprocess.CalledProcessError as e:
        print(f"\033[91merror bringing interface down or deleting it: {e}\033[0m")

    try:
        script = "/etc/gre64.sh" if is_gre6 else "/etc/private4.sh"
        result = subprocess.run(["/bin/bash", script], capture_output=True, text=True)
        if "RTNETLINK answers: File exists" in result.stderr:
            print("\033[91madditional ip already exists. Ignoring this error\033[0m")
        else:
            result.check_returncode()
        display_checkmark(
            f"\033[92mChanges saved and {interface} interface updated successfully!\033[0m"
        )
        subprocess.run(["sudo", "systemctl", "daemon-reload"], check=True)
        subprocess.run(["sudo", "systemctl", "restart", "ping_ip4"], check=True)

        # display_checkmark("\033[92mSystem services reloaded and restarted successfully!\033[0m")
    except subprocess.CalledProcessError as e:
        print(
            f"\033[91merror applying network changes: {e.stderr.strip() if e.stderr else str(e)}\033[0m"
        )
    except FileNotFoundError:
        print(f"\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def save_stuff_gre65(private_ip, local_ip, remote_ip, is_gre6):
    current_ips = get_current_native_ipsgre65()
    current_ip = current_ips["gre6"] if is_gre6 else current_ips["private"]

    if current_ip:
        delete_ufw_rules(current_ip)

    add_ufw_rules(private_ip)

    counterpart_ip = wtb_opposite_ip(private_ip)
    try:
        if is_gre6:
            update_pingfile_sit("/etc/ping_ip5.sh", counterpart_ip)
            update_ipfile_gre6_wire5("/etc/gre65.sh", private_ip, update_type="private")
            update_ipfile_gre6_wire5("/etc/gre65.sh", local_ip, update_type="local")
            update_ipfile_gre6_wire5("/etc/gre65.sh", remote_ip, update_type="remote")
        else:
            update_pingfile_sit("/etc/ping_v65.sh", counterpart_ip)
            update_ipfile_gre6_wire5(
                "/etc/private5.sh", private_ip, update_type="private"
            )
            update_ipfile_gre6_wire5("/etc/private5.sh", local_ip, update_type="local")
            update_ipfile_gre6_wire5(
                "/etc/private5.sh", remote_ip, update_type="remote"
            )

        interface = "azumig65" if is_gre6 else "azumi5"
        subprocess.run(["ip", "link", "set", "dev", interface, "down"], check=True)
        subprocess.run(["ip", "link", "delete", interface], check=True)
    except subprocess.CalledProcessError as e:
        print(f"\033[91merror bringing interface down or deleting it: {e}\033[0m")

    try:
        script = "/etc/gre65.sh" if is_gre6 else "/etc/private5.sh"
        result = subprocess.run(["/bin/bash", script], capture_output=True, text=True)
        if "RTNETLINK answers: File exists" in result.stderr:
            print("\033[91madditional ip already exists. Ignoring this error\033[0m")
        else:
            result.check_returncode()
        display_checkmark(
            f"\033[92mChanges saved and {interface} interface updated successfully!\033[0m"
        )
        subprocess.run(["sudo", "systemctl", "daemon-reload"], check=True)
        subprocess.run(["sudo", "systemctl", "restart", "ping_ip5"], check=True)

        # display_checkmark("\033[92mSystem services reloaded and restarted successfully!\033[0m")
    except subprocess.CalledProcessError as e:
        print(
            f"\033[91merror applying network changes: {e.stderr.strip() if e.stderr else str(e)}\033[0m"
        )
    except FileNotFoundError:
        print(f"\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def local_ip(name):
    try:
        with open(name, "r") as f:
            content = f.read()
        match = re.search(r"local (\S+)", content)
        if match:
            return match.group(1)
        else:
            print(f"\033[91mno local IP found\033[0m")
    except FileNotFoundError:
        print(f"file {name} doesn't exist")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")
    return None


def remote_ip(name):
    try:
        with open(name, "r") as f:
            content = f.read()
        match = re.search(r"remote (\S+)", content)
        if match:
            return match.group(1)
        else:
            print("\033[91mno remote IP found \033[0m")
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")
    return None


def private_gre61(name):
    try:
        with open(name, "r") as f:
            content = f.read()
        match = re.search(r"ip -6 addr add (\S+)/64 dev azumig6?", content)
        if match:
            return match.group(1)
        else:
            print(f"\033[91mno private IP found\033[0m")
    except FileNotFoundError:
        print("\033[91mPrivate file not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")
    return None


def wtb_opposite_ip_wireguard(ip):
    return wtb_opposite_ip_sitwire(ip)


def load_wireguardconfig_sitwire(file_path):
    try:
        with open(file_path, "r") as file:
            content = file.read()

        address_match = re.search(r"Address = ([^\s]+)", content)
        listen_port_match = re.search(r"ListenPort = (\d+)", content)
        endpoint_match = re.search(r"Endpoint = ([^\s]+):\d+", content)
        allowed_ips_match = re.search(r"AllowedIPs = ([^\s]+)", content)

        address = address_match.group(1) if address_match else "N/A"
        listen_port = listen_port_match.group(1) if listen_port_match else "N/A"
        endpoint = endpoint_match.group(1) if endpoint_match else "N/A"
        allowed_ips = allowed_ips_match.group(1) if allowed_ips_match else "N/A"

        return address, address.split("/")[0], listen_port, endpoint, allowed_ips
    except FileNotFoundError:
        print("\033[91mWireguard configuration file not found.\033[0m")
        return None, None, None, None, None
    except Exception as e:
        print(f"\033[91mAn error occurred: {e}\033[0m")
        return None, None, None, None, None


def save_wireguardconfig_sitwire1sec(file_path, new_config):
    try:
        with open(file_path, "r") as f:
            config = f.read()

        listen_port_pattern = r"ListenPort\s*=\s*\d+"
        endpoint_pattern = r"Endpoint\s*=\s*([^\s]+):\d+"
        address_pattern = r"Address\s*=\s*[^\s]+"
        allowed_ips_pattern = r"AllowedIPs\s*=\s*[^\s]+"

        new_config_content = re.sub(
            listen_port_pattern, f'ListenPort = {new_config["ListenPort"]}', config
        )
        new_config_content = re.sub(
            address_pattern, f'Address = {new_config["Address"]}', new_config_content
        )
        new_config_content = re.sub(
            allowed_ips_pattern,
            f'AllowedIPs = {new_config["AllowedIPs"]}',
            new_config_content,
        )

        def replace_endpoint(match):
            endpoint_ip = new_config["EndpointIP"]
            return f'Endpoint = {endpoint_ip}:{new_config["ListenPort"]}'

        new_config_content = re.sub(
            endpoint_pattern, replace_endpoint, new_config_content
        )

        with open(file_path, "w") as f:
            f.write(new_config_content)

        subprocess.run(["systemctl", "daemon-reload"], check=True)

        services_to_restart = [
            "strong-azumi1",
            "wireguardping_1.service",
        ]

        wg_quick_interface = "/etc/wireguard/wireserver1.conf"
        wg_quick_down = subprocess.run(
            ["wg-quick", "down", wg_quick_interface],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
        )

        if wg_quick_down.returncode == 0:
            subprocess.run(["wg-quick", "up", wg_quick_interface], check=True)
            display_checkmark(
                f"\033[92mInterface {wg_quick_interface} brought down and up successfully!\033[0m"
            )
        else:
            print(
                f"\033[93mFailed to bring down interface {wg_quick_interface}.\033[0m"
            )

        for service_name in services_to_restart:
            service_status = subprocess.run(
                ["systemctl", "is-active", service_name],
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
            )

            if service_status.returncode == 0:
                subprocess.run(["systemctl", "restart", service_name], check=True)
                display_checkmark(
                    f"\033[92mService {service_name} restarted successfully!\033[0m"
                )
            else:
                print(
                    f"\033[93mService {service_name} doesn't exist or is inactive.\033[0m"
                )

        display_checkmark(f"\033[92mConfiguration updated successfully!\033[0m")

    except FileNotFoundError:
        print(f"\033[91mfile {file_path} not found.\033[0m")
    except subprocess.CalledProcessError as e:
        print(f"\033[91merror in managing services: {e}\033[0m")
    except Exception as e:
        print(f"\033[91merror in saving the config: {e}\033[0m")


def save_wireguardconfig_sitwire2sec(file_path, new_config):
    try:
        with open(file_path, "r") as f:
            config = f.read()

        listen_port_pattern = r"ListenPort\s*=\s*\d+"
        endpoint_pattern = r"Endpoint\s*=\s*([^\s]+):\d+"
        address_pattern = r"Address\s*=\s*[^\s]+"
        allowed_ips_pattern = r"AllowedIPs\s*=\s*[^\s]+"

        new_config_content = re.sub(
            listen_port_pattern, f'ListenPort = {new_config["ListenPort"]}', config
        )
        new_config_content = re.sub(
            address_pattern, f'Address = {new_config["Address"]}', new_config_content
        )
        new_config_content = re.sub(
            allowed_ips_pattern,
            f'AllowedIPs = {new_config["AllowedIPs"]}',
            new_config_content,
        )

        def replace_endpoint(match):
            endpoint_ip = new_config["EndpointIP"]
            return f'Endpoint = {endpoint_ip}:{new_config["ListenPort"]}'

        new_config_content = re.sub(
            endpoint_pattern, replace_endpoint, new_config_content
        )

        with open(file_path, "w") as f:
            f.write(new_config_content)

        subprocess.run(["systemctl", "daemon-reload"], check=True)

        services_to_restart = [
            "strong-azumi1",
            "wireguardping_2.service",
        ]

        wg_quick_interface = "/etc/wireguard/wireserver2.conf"
        wg_quick_down = subprocess.run(
            ["wg-quick", "down", wg_quick_interface],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
        )

        if wg_quick_down.returncode == 0:
            subprocess.run(["wg-quick", "up", wg_quick_interface], check=True)
            display_checkmark(
                f"\033[92mInterface {wg_quick_interface} brought down and up successfully!\033[0m"
            )
        else:
            print(
                f"\033[93mFailed to bring down interface {wg_quick_interface}.\033[0m"
            )

        for service_name in services_to_restart:
            service_status = subprocess.run(
                ["systemctl", "is-active", service_name],
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
            )

            if service_status.returncode == 0:
                subprocess.run(["systemctl", "restart", service_name], check=True)
                display_checkmark(
                    f"\033[92mService {service_name} restarted successfully!\033[0m"
                )
            else:
                print(
                    f"\033[93mService {service_name} doesn't exist or is inactive.\033[0m"
                )

        display_checkmark(f"\033[92mConfiguration updated successfully!\033[0m")

    except FileNotFoundError:
        print(f"\033[91mfile {file_path} not found.\033[0m")
    except subprocess.CalledProcessError as e:
        print(f"\033[91merror in managing services: {e}\033[0m")
    except Exception as e:
        print(f"\033[91merror in saving the config: {e}\033[0m")


def save_wireguardconfig_sitwire3sec(file_path, new_config):
    try:
        with open(file_path, "r") as f:
            config = f.read()

        listen_port_pattern = r"ListenPort\s*=\s*\d+"
        endpoint_pattern = r"Endpoint\s*=\s*([^\s]+):\d+"
        address_pattern = r"Address\s*=\s*[^\s]+"
        allowed_ips_pattern = r"AllowedIPs\s*=\s*[^\s]+"

        new_config_content = re.sub(
            listen_port_pattern, f'ListenPort = {new_config["ListenPort"]}', config
        )
        new_config_content = re.sub(
            address_pattern, f'Address = {new_config["Address"]}', new_config_content
        )
        new_config_content = re.sub(
            allowed_ips_pattern,
            f'AllowedIPs = {new_config["AllowedIPs"]}',
            new_config_content,
        )

        def replace_endpoint(match):
            endpoint_ip = new_config["EndpointIP"]
            return f'Endpoint = {endpoint_ip}:{new_config["ListenPort"]}'

        new_config_content = re.sub(
            endpoint_pattern, replace_endpoint, new_config_content
        )

        with open(file_path, "w") as f:
            f.write(new_config_content)

        subprocess.run(["systemctl", "daemon-reload"], check=True)

        services_to_restart = [
            "strong-azumi1",
            "wireguardping_3.service",
        ]

        wg_quick_interface = "/etc/wireguard/wireserver3.conf"
        wg_quick_down = subprocess.run(
            ["wg-quick", "down", wg_quick_interface],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
        )

        if wg_quick_down.returncode == 0:
            subprocess.run(["wg-quick", "up", wg_quick_interface], check=True)
            display_checkmark(
                f"\033[92mInterface {wg_quick_interface} brought down and up successfully!\033[0m"
            )
        else:
            print(
                f"\033[93mFailed to bring down interface {wg_quick_interface}.\033[0m"
            )

        for service_name in services_to_restart:
            service_status = subprocess.run(
                ["systemctl", "is-active", service_name],
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
            )

            if service_status.returncode == 0:
                subprocess.run(["systemctl", "restart", service_name], check=True)
                display_checkmark(
                    f"\033[92mService {service_name} restarted successfully!\033[0m"
                )
            else:
                print(
                    f"\033[93mService {service_name} doesn't exist or is inactive.\033[0m"
                )

        display_checkmark(f"\033[92mConfiguration updated successfully!\033[0m")

    except FileNotFoundError:
        print(f"\033[91mfile {file_path} not found.\033[0m")
    except subprocess.CalledProcessError as e:
        print(f"\033[91merror in managing services: {e}\033[0m")
    except Exception as e:
        print(f"\033[91merror in saving the config: {e}\033[0m")


def save_wireguardconfig_sitwire4sec(file_path, new_config):
    try:
        with open(file_path, "r") as f:
            config = f.read()

        listen_port_pattern = r"ListenPort\s*=\s*\d+"
        endpoint_pattern = r"Endpoint\s*=\s*([^\s]+):\d+"
        address_pattern = r"Address\s*=\s*[^\s]+"
        allowed_ips_pattern = r"AllowedIPs\s*=\s*[^\s]+"

        new_config_content = re.sub(
            listen_port_pattern, f'ListenPort = {new_config["ListenPort"]}', config
        )
        new_config_content = re.sub(
            address_pattern, f'Address = {new_config["Address"]}', new_config_content
        )
        new_config_content = re.sub(
            allowed_ips_pattern,
            f'AllowedIPs = {new_config["AllowedIPs"]}',
            new_config_content,
        )

        def replace_endpoint(match):
            endpoint_ip = new_config["EndpointIP"]
            return f'Endpoint = {endpoint_ip}:{new_config["ListenPort"]}'

        new_config_content = re.sub(
            endpoint_pattern, replace_endpoint, new_config_content
        )

        with open(file_path, "w") as f:
            f.write(new_config_content)

        subprocess.run(["systemctl", "daemon-reload"], check=True)

        services_to_restart = [
            "strong-azumi1",
            "wireguardping_4.service",
        ]

        wg_quick_interface = "/etc/wireguard/wireserver4.conf"
        wg_quick_down = subprocess.run(
            ["wg-quick", "down", wg_quick_interface],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
        )

        if wg_quick_down.returncode == 0:
            subprocess.run(["wg-quick", "up", wg_quick_interface], check=True)
            display_checkmark(
                f"\033[92mInterface {wg_quick_interface} brought down and up successfully!\033[0m"
            )
        else:
            print(
                f"\033[93mFailed to bring down interface {wg_quick_interface}.\033[0m"
            )

        for service_name in services_to_restart:
            service_status = subprocess.run(
                ["systemctl", "is-active", service_name],
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
            )

            if service_status.returncode == 0:
                subprocess.run(["systemctl", "restart", service_name], check=True)
                display_checkmark(
                    f"\033[92mService {service_name} restarted successfully!\033[0m"
                )
            else:
                print(
                    f"\033[93mService {service_name} doesn't exist or is inactive.\033[0m"
                )

        display_checkmark(f"\033[92mConfiguration updated successfully!\033[0m")

    except FileNotFoundError:
        print(f"\033[91mfile {file_path} not found.\033[0m")
    except subprocess.CalledProcessError as e:
        print(f"\033[91merror in managing services: {e}\033[0m")
    except Exception as e:
        print(f"\033[91merror in saving the config: {e}\033[0m")


def save_wireguardconfig_sitwire5sec(file_path, new_config):
    try:
        with open(file_path, "r") as f:
            config = f.read()

        listen_port_pattern = r"ListenPort\s*=\s*\d+"
        endpoint_pattern = r"Endpoint\s*=\s*([^\s]+):\d+"
        address_pattern = r"Address\s*=\s*[^\s]+"
        allowed_ips_pattern = r"AllowedIPs\s*=\s*[^\s]+"

        new_config_content = re.sub(
            listen_port_pattern, f'ListenPort = {new_config["ListenPort"]}', config
        )
        new_config_content = re.sub(
            address_pattern, f'Address = {new_config["Address"]}', new_config_content
        )
        new_config_content = re.sub(
            allowed_ips_pattern,
            f'AllowedIPs = {new_config["AllowedIPs"]}',
            new_config_content,
        )

        def replace_endpoint(match):
            endpoint_ip = new_config["EndpointIP"]
            return f'Endpoint = {endpoint_ip}:{new_config["ListenPort"]}'

        new_config_content = re.sub(
            endpoint_pattern, replace_endpoint, new_config_content
        )

        with open(file_path, "w") as f:
            f.write(new_config_content)

        subprocess.run(["systemctl", "daemon-reload"], check=True)

        services_to_restart = [
            "strong-azumi1",
            "wireguardping_5.service",
        ]

        wg_quick_interface = "/etc/wireguard/wireserver5.conf"
        wg_quick_down = subprocess.run(
            ["wg-quick", "down", wg_quick_interface],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
        )

        if wg_quick_down.returncode == 0:
            subprocess.run(["wg-quick", "up", wg_quick_interface], check=True)
            display_checkmark(
                f"\033[92mInterface {wg_quick_interface} brought down and up successfully!\033[0m"
            )
        else:
            print(
                f"\033[93mFailed to bring down interface {wg_quick_interface}.\033[0m"
            )

        for service_name in services_to_restart:
            service_status = subprocess.run(
                ["systemctl", "is-active", service_name],
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
            )

            if service_status.returncode == 0:
                subprocess.run(["systemctl", "restart", service_name], check=True)
                display_checkmark(
                    f"\033[92mService {service_name} restarted successfully!\033[0m"
                )
            else:
                print(
                    f"\033[93mService {service_name} doesn't exist or is inactive.\033[0m"
                )

        display_checkmark(f"\033[92mConfiguration updated successfully!\033[0m")

    except FileNotFoundError:
        print(f"\033[91mfile {file_path} not found.\033[0m")
    except subprocess.CalledProcessError as e:
        print(f"\033[91merror in managing services: {e}\033[0m")
    except Exception as e:
        print(f"\033[91merror in saving the config: {e}\033[0m")


def save_wireguardconfig_sitwiresec_client(file_path, new_config):
    try:
        with open(file_path, "r") as f:
            config = f.read()

        listen_port_pattern = r"ListenPort\s*=\s*\d+"
        endpoint_pattern = r"Endpoint\s*=\s*([^\s]+):\d+"
        address_pattern = r"Address\s*=\s*[^\s]+"
        allowed_ips_pattern = r"AllowedIPs\s*=\s*[^\s]+"

        new_config_content = re.sub(
            listen_port_pattern, f'ListenPort = {new_config["ListenPort"]}', config
        )
        new_config_content = re.sub(
            address_pattern, f'Address = {new_config["Address"]}', new_config_content
        )
        new_config_content = re.sub(
            allowed_ips_pattern,
            f'AllowedIPs = {new_config["AllowedIPs"]}',
            new_config_content,
        )

        def replace_endpoint(match):
            endpoint_ip = new_config["EndpointIP"]
            return f'Endpoint = {endpoint_ip}:{new_config["ListenPort"]}'

        new_config_content = re.sub(
            endpoint_pattern, replace_endpoint, new_config_content
        )

        with open(file_path, "w") as f:
            f.write(new_config_content)

        subprocess.run(["systemctl", "daemon-reload"], check=True)

        services_to_restart = [
            "strong-azumi1",
            "wireguardping.service",
        ]

        wg_quick_interface = "/etc/wireguard/wireclient.conf"
        wg_quick_down = subprocess.run(
            ["wg-quick", "down", wg_quick_interface],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
        )

        if wg_quick_down.returncode == 0:
            subprocess.run(["wg-quick", "up", wg_quick_interface], check=True)
            display_checkmark(
                f"\033[92mInterface {wg_quick_interface} brought down and up successfully!\033[0m"
            )
        else:
            print(
                f"\033[93mFailed to bring down interface {wg_quick_interface}.\033[0m"
            )

        for service_name in services_to_restart:
            service_status = subprocess.run(
                ["systemctl", "is-active", service_name],
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
            )

            if service_status.returncode == 0:
                subprocess.run(["systemctl", "restart", service_name], check=True)
                display_checkmark(
                    f"\033[92mService {service_name} restarted successfully!\033[0m"
                )
            else:
                print(
                    f"\033[93mService {service_name} doesn't exist or is inactive.\033[0m"
                )

        display_checkmark(f"\033[92mConfiguration updated successfully!\033[0m")

    except FileNotFoundError:
        print(f"\033[91mfile {file_path} not found.\033[0m")
    except subprocess.CalledProcessError as e:
        print(f"\033[91merror in managing services: {e}\033[0m")
    except Exception as e:
        print(f"\033[91merror in saving the config: {e}\033[0m")


def update_ufw_ruleswireguard(old_ip, new_ip, old_port=None, new_port=None):
    if old_port:
        delete_ufw_rules(old_ip, old_port)
        delete_ufw_rules(wtb_opposite_ip_wireguard(old_ip), old_port)
    add_ufw_rules(new_ip, new_port)
    add_ufw_rules(wtb_opposite_ip_wireguard(new_ip), new_port)


def update_ping_script_opposite_ip_wirenosec_client(new_opposite_ip):
    script_path = "/etc/ping_wireguard.sh"
    try:
        with open(script_path, "r") as f:
            script_content = f.read()

        updated_script_content = re.sub(
            r'ip_address="[^"]+"', f'ip_address="{new_opposite_ip}"', script_content
        )

        with open(script_path, "w") as f:
            f.write(updated_script_content)

        display_checkmark(
            "\033[92mPing script updated with new opposite IP address!\033[0m"
        )
    except FileNotFoundError:
        print(f"\033[91mPing script {script_path} not found.\033[0m")
    except Exception as e:
        print(f"\033[91mError updating ping script: {e}\033[0m")


def update_ping_script_opposite_ip_wirenosec1(new_opposite_ip):
    script_path = "/etc/ping_wireguard_1.sh"
    try:
        with open(script_path, "r") as f:
            script_content = f.read()

        updated_script_content = re.sub(
            r'ip_address="[^"]+"', f'ip_address="{new_opposite_ip}"', script_content
        )

        with open(script_path, "w") as f:
            f.write(updated_script_content)

        display_checkmark(
            "\033[92mPing script updated with new opposite IP address!\033[0m"
        )
    except FileNotFoundError:
        print(f"\033[91mPing script {script_path} not found.\033[0m")
    except Exception as e:
        print(f"\033[91mError updating ping script: {e}\033[0m")


def update_ping_script_opposite_ip_wirenosec2(new_opposite_ip):
    script_path = "/etc/ping_wireguard_2.sh"
    try:
        with open(script_path, "r") as f:
            script_content = f.read()

        updated_script_content = re.sub(
            r'ip_address="[^"]+"', f'ip_address="{new_opposite_ip}"', script_content
        )

        with open(script_path, "w") as f:
            f.write(updated_script_content)

        display_checkmark(
            "\033[92mPing script updated with new opposite IP address!\033[0m"
        )
    except FileNotFoundError:
        print(f"\033[91mPing script {script_path} not found.\033[0m")
    except Exception as e:
        print(f"\033[91mError updating ping script: {e}\033[0m")


def update_ping_script_opposite_ip_wirenosec3(new_opposite_ip):
    script_path = "/etc/ping_wireguard_3.sh"
    try:
        with open(script_path, "r") as f:
            script_content = f.read()

        updated_script_content = re.sub(
            r'ip_address="[^"]+"', f'ip_address="{new_opposite_ip}"', script_content
        )

        with open(script_path, "w") as f:
            f.write(updated_script_content)

        display_checkmark(
            "\033[92mPing script updated with new opposite IP address!\033[0m"
        )
    except FileNotFoundError:
        print(f"\033[91mPing script {script_path} not found.\033[0m")
    except Exception as e:
        print(f"\033[91mError updating ping script: {e}\033[0m")


def update_ping_script_opposite_ip_wirenosec4(new_opposite_ip):
    script_path = "/etc/ping_wireguard_4.sh"
    try:
        with open(script_path, "r") as f:
            script_content = f.read()

        updated_script_content = re.sub(
            r'ip_address="[^"]+"', f'ip_address="{new_opposite_ip}"', script_content
        )

        with open(script_path, "w") as f:
            f.write(updated_script_content)

        display_checkmark(
            "\033[92mPing script updated with new opposite IP address!\033[0m"
        )
    except FileNotFoundError:
        print(f"\033[91mPing script {script_path} not found.\033[0m")
    except Exception as e:
        print(f"\033[91mError updating ping script: {e}\033[0m")


def update_ping_script_opposite_ip_wirenosec5(new_opposite_ip):
    script_path = "/etc/ping_wireguard_5.sh"
    try:
        with open(script_path, "r") as f:
            script_content = f.read()

        updated_script_content = re.sub(
            r'ip_address="[^"]+"', f'ip_address="{new_opposite_ip}"', script_content
        )

        with open(script_path, "w") as f:
            f.write(updated_script_content)

        display_checkmark(
            "\033[92mPing script updated with new opposite IP address!\033[0m"
        )
    except FileNotFoundError:
        print(f"\033[91mPing script {script_path} not found.\033[0m")
    except Exception as e:
        print(f"\033[91mError updating ping script: {e}\033[0m")


def update_ping_script_opposite_ip_wirenosec_client(new_opposite_ip):
    script_path = "/etc/ping_wireguard.sh"
    try:
        with open(script_path, "r") as f:
            script_content = f.read()

        updated_script_content = re.sub(
            r'ip_address="[^"]+"', f'ip_address="{new_opposite_ip}"', script_content
        )

        with open(script_path, "w") as f:
            f.write(updated_script_content)

        display_checkmark(
            "\033[92mPing script updated with new opposite IP address!\033[0m"
        )
    except FileNotFoundError:
        print(f"\033[91mPing script {script_path} not found.\033[0m")
    except Exception as e:
        print(f"\033[91mError updating ping script: {e}\033[0m")


def display_wireguard_config_sitwire(
    address_no_subnet, listen_port, endpoint, allowed_ips
):
    lines = [
        f"\033[97m──────────────────────────────────────\033[0m",
        f"\033[93mTitle:         Wireguard Configuration\033[0m",
        f"\033[97m──────────────────────────────────────\033[0m",
        f"\033[92mAddress:           \033[97m{address_no_subnet}\033[0m",
        f"\033[92mListenPort:        \033[97m{listen_port}\033[0m",
        f"\033[92mEndpoint:          \033[97m{endpoint}\033[0m",
        f"\033[92mAllowedIPs:        \033[97m{allowed_ips}\033[0m",
    ]
    box_width = 50

    print("\033[93m╭" + "─" * (box_width - 2) + "╮\033[0m")

    for line in lines:
        print(f"\033[93m {line:<{box_width - 4}} \033[0m")

    print("\033[93m╰" + "─" * (box_width - 2) + "╯\033[0m")


def wireguard_gre6tapn_iranconfig_1():
    local_ip_private = local_ip("/etc/gre61.sh")
    remote_ip_private = remote_ip("/etc/gre61.sh")
    private_ip_private = private_gre61("/etc/gre61.sh")
    config_path = "/etc/wireguard/wireserver1.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_gre6tapn_wire_iran1(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mGre6tap[Native] + Wireguard\033[93m IRAN Server \033[96mConfig [1]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN Server\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mKharej Client [1] \033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mGRE6tap \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6. \033[92mSave All Changes\033[0m")
        print("0. \033[97mback to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[GRE6tap]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Client [1]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec1(opposite_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "6":
            save_stuff_gre61(
                private_ip_private, local_ip_private, remote_ip_private, is_gre6=True
            )
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwire1sec(config_path, new_config)
            break
        elif choice == "0":
            clear()
            wireguardedit_gre6tap_noconjuction_1iran_5kharej()
            break
        else:
            print("Please select a valid option.")


def wireguard_gre6tapn_iranconfig_2():
    local_ip_private = local_ip("/etc/gre62.sh")
    remote_ip_private = remote_ip("/etc/gre62.sh")
    private_ip_private = private_gre61("/etc/gre62.sh")
    config_path = "/etc/wireguard/wireserver2.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_gre6tapn_wire_iran2(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mGre6tap[Native] + Wireguard\033[93m IRAN Server \033[96mConfig [2]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN Server\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mKharej Client [2] \033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mGRE6tap \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6. \033[92mSave All Changes\033[0m")
        print("0. \033[97mback to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[GRE6tap]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Client [2]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec2(opposite_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "6":
            save_stuff_gre62(
                private_ip_private, local_ip_private, remote_ip_private, is_gre6=True
            )
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwire2sec(config_path, new_config)
            break
        elif choice == "0":
            clear()
            wireguardedit_gre6tap_noconjuction_1iran_5kharej()
            break
        else:
            print("Please select a valid option.")


def wireguard_gre6tapn_iranconfig_3():
    local_ip_private = local_ip("/etc/gre63.sh")
    remote_ip_private = remote_ip("/etc/gre63.sh")
    private_ip_private = private_gre61("/etc/gre63.sh")
    config_path = "/etc/wireguard/wireserver3.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_gre6tapn_wire_iran3(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mGre6tap[Native] + Wireguard\033[93m IRAN Server \033[96mConfig [3]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN Server\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mKharej Client [3] \033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mGRE6tap \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6. \033[92mSave All Changes\033[0m")
        print("0. \033[97mback to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[GRE6tap]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Client [3]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec3(opposite_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "6":
            save_stuff_gre63(
                private_ip_private, local_ip_private, remote_ip_private, is_gre6=True
            )
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwire3sec(config_path, new_config)
            break
        elif choice == "0":
            clear()
            wireguardedit_gre6tap_noconjuction_1iran_5kharej()
            break
        else:
            print("Please select a valid option.")


def wireguard_gre6tapn_iranconfig_4():
    local_ip_private = local_ip("/etc/gre64.sh")
    remote_ip_private = remote_ip("/etc/gre64.sh")
    private_ip_private = private_gre61("/etc/gre64.sh")
    config_path = "/etc/wireguard/wireserver4.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_gre6tapn_wire_iran4(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mGre6tap[Native] + Wireguard\033[93m IRAN Server \033[96mConfig [4]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN Server\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mKharej Client [4] \033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mGRE6tap \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6. \033[92mSave All Changes\033[0m")
        print("0. \033[97mback to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[GRE6tap]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Client [4]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec4(opposite_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "6":
            save_stuff_gre64(
                private_ip_private, local_ip_private, remote_ip_private, is_gre6=True
            )
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwire4sec(config_path, new_config)
            break
        elif choice == "0":
            clear()
            wireguardedit_gre6tap_noconjuction_1iran_5kharej()
            break
        else:
            print("Please select a valid option.")


def wireguard_gre6tapn_iranconfig_5():
    local_ip_private = local_ip("/etc/gre65.sh")
    remote_ip_private = remote_ip("/etc/gre65.sh")
    private_ip_private = private_gre61("/etc/gre65.sh")
    config_path = "/etc/wireguard/wireserver5.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_gre6tapn_wire_iran5(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mGre6tap[Native] + Wireguard\033[93m IRAN Server \033[96mConfig [5]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN Server\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mKharej Client [5] \033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mGRE6tap \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6. \033[92mSave All Changes\033[0m")
        print("0. \033[97mback to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[GRE6tap]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Client [5]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec5(opposite_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "6":
            save_stuff_gre65(
                private_ip_private, local_ip_private, remote_ip_private, is_gre6=True
            )
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwire5sec(config_path, new_config)
            break
        elif choice == "0":
            clear()
            wireguardedit_gre6tap_noconjuction_1iran_5kharej()
            break
        else:
            print("Please select a valid option.")


def wireguard_gre6tapn_kharej_client1():
    local_ip_private = local_ip("/etc/gre61.sh")
    remote_ip_private = remote_ip("/etc/gre61.sh")
    private_ip_private = private_gre61("/etc/gre61.sh")
    config_path = "/etc/wireguard/wireclient.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_gre6tapn_wire_kharej1(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mGre6tap[Native] + Wireguard\033[93m Kharej Client \033[96m[1]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej Client [1]\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mIRAN Server \033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mGRE6tap \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6. \033[92mSave All Changes\033[0m")
        print("0. \033[97mback to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[GRE6tap]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Client [1]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec_client(opposite_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "6":
            save_stuff_gre61(
                private_ip_private, local_ip_private, remote_ip_private, is_gre6=True
            )
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwiresec_client(config_path, new_config)
            break
        elif choice == "0":
            clear()
            wireguardedit_gre6tap_noconjuction_1iran_5kharej()
            break
        else:
            print("Please select a valid option.")


def wireguard_gre6tapn_kharej_client2():
    local_ip_private = local_ip("/etc/gre62.sh")
    remote_ip_private = remote_ip("/etc/gre62.sh")
    private_ip_private = private_gre61("/etc/gre62.sh")
    config_path = "/etc/wireguard/wireclient.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_gre6tapn_wire_kharej2(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mGre6tap[Native] + Wireguard\033[93m Kharej Client \033[96m[2]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej Client [2]\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mIRAN Server \033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mGRE6tap \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6. \033[92mSave All Changes\033[0m")
        print("0. \033[97mback to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[GRE6tap]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Client [2]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec_client(opposite_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "6":
            save_stuff_gre62(
                private_ip_private, local_ip_private, remote_ip_private, is_gre6=True
            )
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwiresec_client(config_path, new_config)
            break
        elif choice == "0":
            clear()
            wireguardedit_gre6tap_noconjuction_1iran_5kharej()
            break
        else:
            print("Please select a valid option.")


def wireguard_gre6tapn_kharej_client3():
    local_ip_private = local_ip("/etc/gre63.sh")
    remote_ip_private = remote_ip("/etc/gre63.sh")
    private_ip_private = private_gre61("/etc/gre63.sh")
    config_path = "/etc/wireguard/wireclient.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_gre6tapn_wire_kharej3(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mGre6tap[Native] + Wireguard\033[93m Kharej Client \033[96m[3]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej Client [3]\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mIRAN Server \033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mGRE6tap \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6. \033[92mSave All Changes\033[0m")
        print("0. \033[97mback to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[GRE6tap]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Client [3]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec_client(opposite_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "6":
            save_stuff_gre63(
                private_ip_private, local_ip_private, remote_ip_private, is_gre6=True
            )
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwiresec_client(config_path, new_config)
            break
        elif choice == "0":
            clear()
            wireguardedit_gre6tap_noconjuction_1iran_5kharej()
            break
        else:
            print("Please select a valid option.")


def wireguard_gre6tapn_kharej_client4():
    local_ip_private = local_ip("/etc/gre64.sh")
    remote_ip_private = remote_ip("/etc/gre64.sh")
    private_ip_private = private_gre61("/etc/gre64.sh")
    config_path = "/etc/wireguard/wireclient.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_gre6tapn_wire_kharej4(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mGre6tap[Native] + Wireguard\033[93m Kharej Client \033[96m[4]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej Client [4]\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mIRAN Server \033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mGRE6tap \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6. \033[92mSave All Changes\033[0m")
        print("0. \033[97mback to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[GRE6tap]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Client [4]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec_client(opposite_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "6":
            save_stuff_gre64(
                private_ip_private, local_ip_private, remote_ip_private, is_gre6=True
            )
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwiresec_client(config_path, new_config)
            break
        elif choice == "0":
            clear()
            wireguardedit_gre6tap_noconjuction_1iran_5kharej()
            break
        else:
            print("Please select a valid option.")


def wireguard_gre6tapn_kharej_client5():
    local_ip_private = local_ip("/etc/gre65.sh")
    remote_ip_private = remote_ip("/etc/gre65.sh")
    private_ip_private = private_gre61("/etc/gre65.sh")
    config_path = "/etc/wireguard/wireclient.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_gre6tapn_wire_kharej5(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mGre6tap[Native] + Wireguard\033[93m Kharej Client \033[96m[5]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej Client [5]\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mIRAN Server \033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mGRE6tap \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6. \033[92mSave All Changes\033[0m")
        print("0. \033[97mback to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[GRE6tap]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Client [5]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec_client(opposite_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "6":
            save_stuff_gre65(
                private_ip_private, local_ip_private, remote_ip_private, is_gre6=True
            )
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwiresec_client(config_path, new_config)
            break
        elif choice == "0":
            clear()
            wireguardedit_gre6tap_noconjuction_1iran_5kharej()
            break
        else:
            print("Please select a valid option.")


# 1 kharej server 5 iran client


def wireguard_gre6tapn_kharejconfig_1():
    local_ip_private = local_ip("/etc/gre61.sh")
    remote_ip_private = remote_ip("/etc/gre61.sh")
    private_ip_private = private_gre61("/etc/gre61.sh")
    config_path = "/etc/wireguard/wireserver1.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_gre6tapn_wire_kharej_server1(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mGre6tap[Native] + Wireguard\033[93m Kharej Server \033[96mConfig [1]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej Server\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mIRAN Client [1] \033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mGRE6tap \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6. \033[92mSave All Changes\033[0m")
        print("0. \033[97mback to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[GRE6tap]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Client [1]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec1(opposite_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "6":
            save_stuff_gre61(
                private_ip_private, local_ip_private, remote_ip_private, is_gre6=True
            )
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwire1sec(config_path, new_config)
            break
        elif choice == "0":
            clear()
            wireguardedit_gre6tap_noconjuction_kharej1_5iran()
            break
        else:
            print("Please select a valid option.")


def wireguard_gre6tapn_kharejconfig_2():
    local_ip_private = local_ip("/etc/gre62.sh")
    remote_ip_private = remote_ip("/etc/gre62.sh")
    private_ip_private = private_gre61("/etc/gre62.sh")
    config_path = "/etc/wireguard/wireserver2.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_gre6tapn_wire_kharej_server2(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mGre6tap[Native] + Wireguard\033[93m Kharej Server \033[96mConfig [2]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej Server\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mIRAN Client [2] \033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mGRE6tap \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6. \033[92mSave All Changes\033[0m")
        print("0. \033[97mback to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[GRE6tap]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Client [2]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec2(opposite_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "6":
            save_stuff_gre62(
                private_ip_private, local_ip_private, remote_ip_private, is_gre6=True
            )
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwire2sec(config_path, new_config)
            break
        elif choice == "0":
            clear()
            wireguardedit_gre6tap_noconjuction_kharej1_5iran()
            break
        else:
            print("Please select a valid option.")


def wireguard_gre6tapn_kharejconfig_3():
    local_ip_private = local_ip("/etc/gre63.sh")
    remote_ip_private = remote_ip("/etc/gre63.sh")
    private_ip_private = private_gre61("/etc/gre63.sh")
    config_path = "/etc/wireguard/wireserver3.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_gre6tapn_wire_kharej_server3(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mGre6tap[Native] + Wireguard\033[93m Kharej Server \033[96mConfig [3]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej Server\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mIRAN Client [3] \033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mGRE6tap \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6. \033[92mSave All Changes\033[0m")
        print("0. \033[97mback to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[GRE6tap]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Client [3]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec3(opposite_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "6":
            save_stuff_gre63(
                private_ip_private, local_ip_private, remote_ip_private, is_gre6=True
            )
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwire3sec(config_path, new_config)
            break
        elif choice == "0":
            clear()
            wireguardedit_gre6tap_noconjuction_kharej1_5iran()
            break
        else:
            print("Please select a valid option.")


def wireguard_gre6tapn_kharejconfig_4():
    local_ip_private = local_ip("/etc/gre64.sh")
    remote_ip_private = remote_ip("/etc/gre64.sh")
    private_ip_private = private_gre61("/etc/gre64.sh")
    config_path = "/etc/wireguard/wireserver4.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_gre6tapn_wire_kharej_server4(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mGre6tap[Native] + Wireguard\033[93m Kharej Server \033[96mConfig [4]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej Server\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mIRAN Client [4] \033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mGRE6tap \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6. \033[92mSave All Changes\033[0m")
        print("0. \033[97mback to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[GRE6tap]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Client [4]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec4(opposite_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "6":
            save_stuff_gre64(
                private_ip_private, local_ip_private, remote_ip_private, is_gre6=True
            )
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwire4sec(config_path, new_config)
            break
        elif choice == "0":
            clear()
            wireguardedit_gre6tap_noconjuction_kharej1_5iran()
            break
        else:
            print("Please select a valid option.")


def wireguard_gre6tapn_kharejconfig_5():
    local_ip_private = local_ip("/etc/gre65.sh")
    remote_ip_private = remote_ip("/etc/gre65.sh")
    private_ip_private = private_gre61("/etc/gre65.sh")
    config_path = "/etc/wireguard/wireserver5.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_gre6tapn_wire_kharej_server5(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mGre6tap[Native] + Wireguard\033[93m Kharej Server \033[96mConfig [5]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej Server\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mIRAN Client [5] \033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mGRE6tap \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6. \033[92mSave All Changes\033[0m")
        print("0. \033[97mback to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[GRE6tap]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Client [5]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec5(opposite_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "6":
            save_stuff_gre65(
                private_ip_private, local_ip_private, remote_ip_private, is_gre6=True
            )
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwire5sec(config_path, new_config)
            break
        elif choice == "0":
            clear()
            wireguardedit_gre6tap_noconjuction_kharej1_5iran()
            break
        else:
            print("Please select a valid option.")


def wireguard_gre6tapn_iran_client1():
    local_ip_private = local_ip("/etc/gre61.sh")
    remote_ip_private = remote_ip("/etc/gre61.sh")
    private_ip_private = private_gre61("/etc/gre61.sh")
    config_path = "/etc/wireguard/wireclient.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_gre6tapn_wire_iran_client1(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mGre6tap[Native] + Wireguard\033[93m IRAN Client \033[96m[1]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN Client [1]\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mKharej Server \033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mGRE6tap \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6. \033[92mSave All Changes\033[0m")
        print("0. \033[97mback to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[GRE6tap]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Client [1]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec_client(opposite_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "6":
            save_stuff_gre61(
                private_ip_private, local_ip_private, remote_ip_private, is_gre6=True
            )
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwiresec_client(config_path, new_config)
            break
        elif choice == "0":
            clear()
            wireguardedit_gre6tap_noconjuction_kharej1_5iran()
            break
        else:
            print("Please select a valid option.")


def wireguard_gre6tapn_iran_client2():
    local_ip_private = local_ip("/etc/gre62.sh")
    remote_ip_private = remote_ip("/etc/gre62.sh")
    private_ip_private = private_gre61("/etc/gre62.sh")
    config_path = "/etc/wireguard/wireclient.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_gre6tapn_wire_iran_client2(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mGre6tap[Native] + Wireguard\033[93m IRAN Client \033[96m[2]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN Client [2]\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mKharej Server \033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mGRE6tap \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6. \033[92mSave All Changes\033[0m")
        print("0. \033[97mback to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[GRE6tap]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Client [2]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec_client(opposite_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "6":
            save_stuff_gre62(
                private_ip_private, local_ip_private, remote_ip_private, is_gre6=True
            )
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwiresec_client(config_path, new_config)
            break
        elif choice == "0":
            clear()
            wireguardedit_gre6tap_noconjuction_kharej1_5iran()
            break
        else:
            print("Please select a valid option.")


def wireguard_gre6tapn_iran_client3():
    local_ip_private = local_ip("/etc/gre63.sh")
    remote_ip_private = remote_ip("/etc/gre63.sh")
    private_ip_private = private_gre61("/etc/gre63.sh")
    config_path = "/etc/wireguard/wireclient.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_gre6tapn_wire_iran_client3(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mGre6tap[Native] + Wireguard\033[93m IRAN Client \033[96m[3]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN Client [3]\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mKharej Server \033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mGRE6tap \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6. \033[92mSave All Changes\033[0m")
        print("0. \033[97mback to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[GRE6tap]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Client [3]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec_client(opposite_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "6":
            save_stuff_gre63(
                private_ip_private, local_ip_private, remote_ip_private, is_gre6=True
            )
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwiresec_client(config_path, new_config)
            break
        elif choice == "0":
            clear()
            wireguardedit_gre6tap_noconjuction_kharej1_5iran()
            break
        else:
            print("Please select a valid option.")


def wireguard_gre6tapn_iran_client4():
    local_ip_private = local_ip("/etc/gre64.sh")
    remote_ip_private = remote_ip("/etc/gre64.sh")
    private_ip_private = private_gre61("/etc/gre64.sh")
    config_path = "/etc/wireguard/wireclient.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_gre6tapn_wire_iran_client4(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mGre6tap[Native] + Wireguard\033[93m IRAN Client \033[96m[4]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN Client [4]\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mKharej Server \033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mGRE6tap \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6. \033[92mSave All Changes\033[0m")
        print("0. \033[97mback to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[GRE6tap]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Client [4]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec_client(opposite_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "6":
            save_stuff_gre64(
                private_ip_private, local_ip_private, remote_ip_private, is_gre6=True
            )
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwiresec_client(config_path, new_config)
            break
        elif choice == "0":
            clear()
            wireguardedit_gre6tap_noconjuction_kharej1_5iran()
            break
        else:
            print("Please select a valid option.")


def wireguard_gre6tapn_iran_client5():
    local_ip_private = local_ip("/etc/gre65.sh")
    remote_ip_private = remote_ip("/etc/gre65.sh")
    private_ip_private = private_gre61("/etc/gre65.sh")
    config_path = "/etc/wireguard/wireclient.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_gre6tapn_wire_iran_client5(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mGre6tap[Native] + Wireguard\033[93m IRAN Client \033[96m[5]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN Client [5]\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mKharej Server \033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mGRE6tap \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6. \033[92mSave All Changes\033[0m")
        print("0. \033[97mback to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[GRE6tap]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Client [5]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec_client(opposite_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "6":
            save_stuff_gre65(
                private_ip_private, local_ip_private, remote_ip_private, is_gre6=True
            )
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwiresec_client(config_path, new_config)
            break
        elif choice == "0":
            clear()
            wireguardedit_gre6tap_noconjuction_kharej1_5iran()
            break
        else:
            print("Please select a valid option.")


# ipsec
def gre6tap_wireguard_sec_edit_local():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print(
        "\033[92m(   ) \033[93mGre6tap[Native] + Wireguard + IPSEC \033[93m Edit Menu\033[0m"
    )
    print(
        '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
    )
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print(
        "1. \033[92mGre6tap[native] + Wireguard - [1]Kharej Server [5]IRAN Clients\033[0m"
    )
    print(
        "2. \033[93mGre6tap[native] + Wireguard - [1]IRAN   Server [5]Kharej Clients\033[0m"
    )
    print("\033[93m───────────────────────────────────────\033[0m")
    print("0.\033[97mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")
    while True:
        server_type = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if server_type == "1":
            wireguardedit_gre6tapsec_noconjuction_kharej1_5iran()
            break
        elif server_type == "2":
            wireguardedit_gre6tapsec_noconjuction_1iran_5kharej()
            break
        elif server_type == "0":
            os.system("clear")
            gre6tapwireguardeditserver_mnu()
            break
        else:
            print("Invalid choice.")


def wireguardedit_gre6tapsec_noconjuction_1iran_5kharej():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print(
        "\033[92m(   ) \033[93mGre6tap[native] + Wireguard + IPSEC \033[92m[1]IRAN Server\033[96m [5]Kharej Client\033[93m Edit Menu\033[0m"
    )
    print(
        '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
    )
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[92mKharej Client [1] Config\033[0m")
    print("2. \033[92mKharej Client [2] Config\033[0m")
    print("3. \033[92mKharej Client [3] Config\033[0m")
    print("4. \033[93mKharej Client [4] Config\033[0m")
    print("5. \033[92mKharej Client [5] Config\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    print("6. \033[96mIRAN Server Config\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    print("0.\033[97mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")
    while True:
        server_type = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if server_type == "1":
            wireguard_gre6tapnsec_kharej_client1()
            break
        elif server_type == "2":
            wireguard_gre6tapnsec_kharej_client2()
            break
        elif server_type == "3":
            wireguard_gre6tapnsec_kharej_client3()
            break
        elif server_type == "4":
            wireguard_gre6tapnsec_kharej_client4()
            break
        elif server_type == "5":
            wireguard_gre6tapnsec_kharej_client5()
            break
        elif server_type == "6":
            wireguard_gre6tapnsec_iran_server()
            break
        elif server_type == "0":
            os.system("clear")
            gre6tap_wireguard_sec_edit_local()
            break
        else:
            print("Invalid choice.")


def wireguard_gre6tapnsec_iran_server():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print(
        "\033[92m(   ) \033[93mGre6tap[native] + Wireguard + IPSEC \033[92m[1]IRAN Server\033[96m [5]Kharej Client\033[93m Edit Menu\033[0m"
    )
    print(
        '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
    )
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[92mIRAN Server Config [1] \033[0m")
    print("2. \033[92mIRAN Server Config [2]\033[0m")
    print("3. \033[93mIRAN Server Config [3]\033[0m")
    print("4. \033[92mIRAN Server Config [4]\033[0m")
    print("5. \033[92mIRAN Server Config [5]\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    print("0.\033[97mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")
    while True:
        server_type = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if server_type == "1":
            wireguard_gre6tapnsec_iranconfig_1()
            break
        elif server_type == "2":
            wireguard_gre6tapnsec_iranconfig_2()
            break
        elif server_type == "3":
            wireguard_gre6tapnsec_iranconfig_3()
            break
        elif server_type == "4":
            wireguard_gre6tapnsec_iranconfig_4()
            break
        elif server_type == "5":
            wireguard_gre6tapnsec_iranconfig_5()
            break
        elif server_type == "0":
            os.system("clear")
            wireguardedit_gre6tapsec_noconjuction_1iran_5kharej()
            break
        else:
            print("Invalid choice.")


def wireguardedit_gre6tapsec_noconjuction_kharej1_5iran():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print(
        "\033[92m(   ) \033[93mGre6tap[native] + Wireguard + IPSEC \033[92m[1]Kharej Server\033[96m [5]IRAN Client\033[93m Edit Menu\033[0m"
    )
    print(
        '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
    )
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[92mIRAN Client [1] Config\033[0m")
    print("2. \033[92mIRAN Client [2] Config\033[0m")
    print("3. \033[92mIRAN Client [3] Config\033[0m")
    print("4. \033[93mIRAN Client [4] Config\033[0m")
    print("5. \033[92mIRAN Client [5] Config\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    print("6. \033[96mKharej Server Config\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    print("0.\033[97mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")
    while True:
        server_type = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if server_type == "1":
            wireguard_gre6tapnsec_iran_client1()
            break
        elif server_type == "2":
            wireguard_gre6tapnsec_iran_client2()
            break
        elif server_type == "3":
            wireguard_gre6tapnsec_iran_client3()
            break
        elif server_type == "4":
            wireguard_gre6tapnsec_iran_client4()
            break
        elif server_type == "5":
            wireguard_gre6tapnsec_iran_client5()
            break
        elif server_type == "6":
            wireguard_gre6tapnsec_kharej_server()
            break
        elif server_type == "0":
            os.system("clear")
            gre6tap_wireguard_sec_edit_local()
            break
        else:
            print("Invalid choice.")


def wireguard_gre6tapnsec_kharej_server():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print(
        "\033[92m(   ) \033[93mGre6tap[native] + Wireguard + IPSEC \033[92m[1]Kharej Server\033[96m [5]IRAN Client\033[93m Edit Menu\033[0m"
    )
    print(
        '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
    )
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[92mKharej Server Config [1] \033[0m")
    print("2. \033[92mKharej Server Config [2]\033[0m")
    print("3. \033[93mKharej Server Config [3]\033[0m")
    print("4. \033[92mKharej Server Config [4]\033[0m")
    print("5. \033[92mKharej Server Config [5]\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    print("0.\033[97mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")
    while True:
        server_type = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if server_type == "1":
            wireguard_gre6tapnsec_kharejconfig_1()
            break
        elif server_type == "2":
            wireguard_gre6tapnsec_kharejconfig_2()
            break
        elif server_type == "3":
            wireguard_gre6tapnsec_kharejconfig_3()
            break
        elif server_type == "4":
            wireguard_gre6tapnsec_kharejconfig_4()
            break
        elif server_type == "5":
            wireguard_gre6tapnsec_kharejconfig_5()
            break
        elif server_type == "0":
            os.system("clear")
            wireguardedit_gre6tapsec_noconjuction_kharej1_5iran()
            break
        else:
            print("Invalid choice.")


# can be removed#
def update_ipsec_conf_wireguard_server1(name, new_private_ip):
    try:
        with open(name, "r") as f:
            content = f.readlines()

        start_idx, end_idx = None, None
        for i, line in enumerate(content):
            if line.strip() == "conn wireguard_server1":
                start_idx = i
            elif start_idx is not None and line.strip().startswith("conn "):
                end_idx = i
                break

        if start_idx is None:
            print("\033[91m'conn wireguard_server1' section not found\033[0m")
            return

        if end_idx is None:
            end_idx = len(content)

        section = content[start_idx:end_idx]

        ip_type = (
            "ipv6"
            if isinstance(ipaddress.ip_address(new_private_ip), ipaddress.IPv6Address)
            else "ipv4"
        )

        if ip_type == "ipv6":
            subnet = "/64"
        else:
            subnet = "/32"

        ip_parts = (
            new_private_ip.split(".")
            if ip_type == "ipv4"
            else new_private_ip.split(":")
        )
        if new_private_ip.endswith(".2") or new_private_ip.endswith(":2"):
            ip_parts[-1] = "1"
        else:
            ip_parts[-1] = "2"
        counterpart_ip = ".".join(ip_parts) if ip_type == "ipv4" else ":".join(ip_parts)

        new_section = []
        for line in section:
            line = re.sub(
                r"leftsubnet=\S+", f"leftsubnet={new_private_ip}{subnet}", line
            )
            line = re.sub(r"leftid=\S+", f"leftid={new_private_ip}", line)
            line = re.sub(r"right=\S+", f"right={counterpart_ip}", line)
            line = re.sub(
                r"rightsubnet=\S+", f"rightsubnet={counterpart_ip}{subnet}", line
            )
            new_section.append(line)

        new_content = content[:start_idx] + new_section + content[end_idx:]

        with open(name, "w") as f:
            f.writelines(new_content)

        print(f"\033[92m'conn wireguard_server1' section updated successfully\033[0m")
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def update_ipsec_conf_wireguard_server2(name, new_private_ip):
    try:
        with open(name, "r") as f:
            content = f.readlines()

        start_idx, end_idx = None, None
        for i, line in enumerate(content):
            if line.strip() == "conn wireguard_server2":
                start_idx = i
            elif start_idx is not None and line.strip().startswith("conn "):
                end_idx = i
                break

        if start_idx is None:
            print("\033[91m'conn wireguard_server2' section not found\033[0m")
            return

        if end_idx is None:
            end_idx = len(content)

        section = content[start_idx:end_idx]

        ip_type = (
            "ipv6"
            if isinstance(ipaddress.ip_address(new_private_ip), ipaddress.IPv6Address)
            else "ipv4"
        )

        if ip_type == "ipv6":
            subnet = "/64"
        else:
            subnet = "/32"

        ip_parts = (
            new_private_ip.split(".")
            if ip_type == "ipv4"
            else new_private_ip.split(":")
        )
        if new_private_ip.endswith(".2") or new_private_ip.endswith(":2"):
            ip_parts[-1] = "1"
        else:
            ip_parts[-1] = "2"
        counterpart_ip = ".".join(ip_parts) if ip_type == "ipv4" else ":".join(ip_parts)

        new_section = []
        for line in section:
            line = re.sub(
                r"leftsubnet=\S+", f"leftsubnet={new_private_ip}{subnet}", line
            )
            line = re.sub(r"leftid=\S+", f"leftid={new_private_ip}", line)
            line = re.sub(r"right=\S+", f"right={counterpart_ip}", line)
            line = re.sub(
                r"rightsubnet=\S+", f"rightsubnet={counterpart_ip}{subnet}", line
            )
            new_section.append(line)

        new_content = content[:start_idx] + new_section + content[end_idx:]

        with open(name, "w") as f:
            f.writelines(new_content)

        print(f"\033[92m'conn wireguard_server2' section updated successfully\033[0m")
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def update_ipsec_conf_wireguard_server3(name, new_private_ip):
    try:
        with open(name, "r") as f:
            content = f.readlines()

        start_idx, end_idx = None, None
        for i, line in enumerate(content):
            if line.strip() == "conn wireguard_server3":
                start_idx = i
            elif start_idx is not None and line.strip().startswith("conn "):
                end_idx = i
                break

        if start_idx is None:
            print("\033[91m'conn wireguard_server3' section not found\033[0m")
            return

        if end_idx is None:
            end_idx = len(content)

        section = content[start_idx:end_idx]

        ip_type = (
            "ipv6"
            if isinstance(ipaddress.ip_address(new_private_ip), ipaddress.IPv6Address)
            else "ipv4"
        )

        if ip_type == "ipv6":
            subnet = "/64"
        else:
            subnet = "/32"

        ip_parts = (
            new_private_ip.split(".")
            if ip_type == "ipv4"
            else new_private_ip.split(":")
        )
        if new_private_ip.endswith(".2") or new_private_ip.endswith(":2"):
            ip_parts[-1] = "1"
        else:
            ip_parts[-1] = "2"
        counterpart_ip = ".".join(ip_parts) if ip_type == "ipv4" else ":".join(ip_parts)

        new_section = []
        for line in section:
            line = re.sub(
                r"leftsubnet=\S+", f"leftsubnet={new_private_ip}{subnet}", line
            )
            line = re.sub(r"leftid=\S+", f"leftid={new_private_ip}", line)
            line = re.sub(r"right=\S+", f"right={counterpart_ip}", line)
            line = re.sub(
                r"rightsubnet=\S+", f"rightsubnet={counterpart_ip}{subnet}", line
            )
            new_section.append(line)

        new_content = content[:start_idx] + new_section + content[end_idx:]

        with open(name, "w") as f:
            f.writelines(new_content)

        print(f"\033[92m'conn wireguard_server3' section updated successfully\033[0m")
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def update_ipsec_conf_wireguard_server4(name, new_private_ip):
    try:
        with open(name, "r") as f:
            content = f.readlines()

        start_idx, end_idx = None, None
        for i, line in enumerate(content):
            if line.strip() == "conn wireguard_server4":
                start_idx = i
            elif start_idx is not None and line.strip().startswith("conn "):
                end_idx = i
                break

        if start_idx is None:
            print("\033[91m'conn wireguard_server4' section not found\033[0m")
            return

        if end_idx is None:
            end_idx = len(content)

        section = content[start_idx:end_idx]

        ip_type = (
            "ipv6"
            if isinstance(ipaddress.ip_address(new_private_ip), ipaddress.IPv6Address)
            else "ipv4"
        )

        if ip_type == "ipv6":
            subnet = "/64"
        else:
            subnet = "/32"

        ip_parts = (
            new_private_ip.split(".")
            if ip_type == "ipv4"
            else new_private_ip.split(":")
        )
        if new_private_ip.endswith(".2") or new_private_ip.endswith(":2"):
            ip_parts[-1] = "1"
        else:
            ip_parts[-1] = "2"
        counterpart_ip = ".".join(ip_parts) if ip_type == "ipv4" else ":".join(ip_parts)

        new_section = []
        for line in section:
            line = re.sub(
                r"leftsubnet=\S+", f"leftsubnet={new_private_ip}{subnet}", line
            )
            line = re.sub(r"leftid=\S+", f"leftid={new_private_ip}", line)
            line = re.sub(r"right=\S+", f"right={counterpart_ip}", line)
            line = re.sub(
                r"rightsubnet=\S+", f"rightsubnet={counterpart_ip}{subnet}", line
            )
            new_section.append(line)

        new_content = content[:start_idx] + new_section + content[end_idx:]

        with open(name, "w") as f:
            f.writelines(new_content)

        print(f"\033[92m'conn wireguard_server4' section updated successfully\033[0m")
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def update_ipsec_conf_wireguard_server5(name, new_private_ip):
    try:
        with open(name, "r") as f:
            content = f.readlines()

        start_idx, end_idx = None, None
        for i, line in enumerate(content):
            if line.strip() == "conn wireguard_server5":
                start_idx = i
            elif start_idx is not None and line.strip().startswith("conn "):
                end_idx = i
                break

        if start_idx is None:
            print("\033[91m'conn wireguard_server5' section not found\033[0m")
            return

        if end_idx is None:
            end_idx = len(content)

        section = content[start_idx:end_idx]

        ip_type = (
            "ipv6"
            if isinstance(ipaddress.ip_address(new_private_ip), ipaddress.IPv6Address)
            else "ipv4"
        )

        if ip_type == "ipv6":
            subnet = "/64"
        else:
            subnet = "/32"

        ip_parts = (
            new_private_ip.split(".")
            if ip_type == "ipv4"
            else new_private_ip.split(":")
        )
        if new_private_ip.endswith(".2") or new_private_ip.endswith(":2"):
            ip_parts[-1] = "1"
        else:
            ip_parts[-1] = "2"
        counterpart_ip = ".".join(ip_parts) if ip_type == "ipv4" else ":".join(ip_parts)

        new_section = []
        for line in section:
            line = re.sub(
                r"leftsubnet=\S+", f"leftsubnet={new_private_ip}{subnet}", line
            )
            line = re.sub(r"leftid=\S+", f"leftid={new_private_ip}", line)
            line = re.sub(r"right=\S+", f"right={counterpart_ip}", line)
            line = re.sub(
                r"rightsubnet=\S+", f"rightsubnet={counterpart_ip}{subnet}", line
            )
            new_section.append(line)

        new_content = content[:start_idx] + new_section + content[end_idx:]

        with open(name, "w") as f:
            f.writelines(new_content)

        print(f"\033[92m'conn wireguard_server5' section updated successfully\033[0m")
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def update_ipsec_conf_wireguard_46sec(name, new_private_ip):
    try:
        with open(name, "r") as f:
            content = f.read()

        ip_obj = ipaddress.ip_address(new_private_ip)
        if isinstance(ip_obj, ipaddress.IPv6Address):
            ip_parts = new_private_ip.split(":")
            subnet_suffix = "/64"
        else:
            ip_parts = new_private_ip.split(".")
            subnet_suffix = "/32"

        ip_parts[-1] = "1" if ip_parts[-1].endswith("2") else "2"
        counterpart_ip = (
            ":".join(ip_parts)
            if isinstance(ip_obj, ipaddress.IPv6Address)
            else ".".join(ip_parts)
        )

        new_content = re.sub(
            r"leftsubnet=\S+", f"leftsubnet={new_private_ip}{subnet_suffix}", content
        )
        new_content = re.sub(r"leftid=\S+", f"leftid={new_private_ip}", new_content)
        new_content = re.sub(r"right=\S+", f"right={counterpart_ip}", new_content)
        new_content = re.sub(
            r"rightsubnet=\S+",
            f"rightsubnet={counterpart_ip}{subnet_suffix}",
            new_content,
        )

        with open(name, "w") as f:
            f.write(new_content)

        print("\033[92mIPsec configuration updated successfully!\033[0m")

    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mOut of ordinary error: {e}\033[0m")


def update_ipsecsecret_wire(name, new_secret):
    try:
        with open(name, "r") as f:
            content = f.read()

        new_content = re.sub(r'PSK "\S+"', f'PSK "{new_secret}"', content)

        with open(name, "w") as f:
            f.write(new_content)

        display_checkmark("\033[92mIPsec secret key updated successfully!\033[0m")
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mOut of ordinary error: {e}\033[0m")


def ipsecsecret_key_wire(name):
    try:
        with open(name, "r") as f:
            content = f.read()
        match = re.search(r'PSK "(\S+)"', content)
        if match:
            return match.group(1)
        else:
            print("\033[91mNo IPsec key found\033[0m")
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mOut of ordinary error: {e}\033[0m")
    return None


def display_ipsecsecret_wire(secret_key):
    box_width = 50
    print("\033[93m╭" + "─" * (box_width - 2) + "╮\033[0m")
    print(f"\033[93m Title:        \033[93m IPsec Secret Key\033[0m")
    print(f"\033[97m──────────────────────────────────────\033[0m")
    print(f"\033[93m IPsec Key:  \033[97m{secret_key}\033[0m")
    print("\033[93m╰" + "─" * (box_width - 2) + "╯\033[0m")


# can be removed#


def wireguard_gre6tapnsec_kharejconfig_1():
    local_ip_private = local_ip("/etc/gre61.sh")
    remote_ip_private = remote_ip("/etc/gre61.sh")
    private_ip_private = private_gre61("/etc/gre61.sh")
    config_path = "/etc/wireguard/wireserver1.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_gre6tapn_wire_kharej_server1(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )
        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mGre6tap[Native] + Wireguard\033[93m Kharej Server \033[96mConfig [1]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej Server\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mIRAN Client [1] \033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mGRE6tap \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6.\033[94m Change IPsec Secret Key\033[0m")
        print("7. \033[92mSave All Changes\033[0m")
        print("0. \033[97mback to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[GRE6tap]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Client [1]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec1(opposite_ip)
                update_ipsec_conf_wireguard_server1("/etc/ipsec1.conf", new_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "6":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secret Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")
        elif choice == "7":
            save_stuff_gre61(
                private_ip_private, local_ip_private, remote_ip_private, is_gre6=True
            )
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwire1sec(config_path, new_config)
            update_ipsec_ip_multi(address_no_subnet)
            break
        elif choice == "0":
            clear()
            wireguardedit_gre6tapsec_noconjuction_kharej1_5iran()
            break
        else:
            print("Please select a valid option.")


def wireguard_gre6tapnsec_kharejconfig_2():
    local_ip_private = local_ip("/etc/gre62.sh")
    remote_ip_private = remote_ip("/etc/gre62.sh")
    private_ip_private = private_gre61("/etc/gre62.sh")
    config_path = "/etc/wireguard/wireserver2.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_gre6tapn_wire_kharej_server2(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )
        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mGre6tap[Native] + Wireguard\033[93m Kharej Server \033[96mConfig [2]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej Server\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mIRAN Client [2] \033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mGRE6tap \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6.\033[94m Change IPsec Secret Key\033[0m")
        print("7. \033[92mSave All Changes\033[0m")
        print("0. \033[97mback to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[GRE6tap]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Client [2]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec2(opposite_ip)
                update_ipsec_conf_wireguard_server2("/etc/ipsec1.conf", new_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "6":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secret Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")
        elif choice == "7":
            save_stuff_gre62(
                private_ip_private, local_ip_private, remote_ip_private, is_gre6=True
            )
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwire2sec(config_path, new_config)
            update_ipsec_ip_multi2(address_no_subnet)
            break
        elif choice == "0":
            clear()
            wireguardedit_gre6tapsec_noconjuction_kharej1_5iran()
            break
        else:
            print("Please select a valid option.")


def wireguard_gre6tapnsec_kharejconfig_3():
    local_ip_private = local_ip("/etc/gre63.sh")
    remote_ip_private = remote_ip("/etc/gre63.sh")
    private_ip_private = private_gre61("/etc/gre63.sh")
    config_path = "/etc/wireguard/wireserver3.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_gre6tapn_wire_kharej_server3(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )
        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mGre6tap[Native] + Wireguard\033[93m Kharej Server \033[96mConfig [3]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej Server\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mIRAN Client [3] \033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mGRE6tap \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6.\033[94m Change IPsec Secret Key\033[0m")
        print("7. \033[92mSave All Changes\033[0m")
        print("0. \033[97mback to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[GRE6tap]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Client [3]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec3(opposite_ip)
                update_ipsec_conf_wireguard_server3("/etc/ipsec1.conf", new_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "6":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secret Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")
        elif choice == "7":
            save_stuff_gre63(
                private_ip_private, local_ip_private, remote_ip_private, is_gre6=True
            )
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwire3sec(config_path, new_config)
            update_ipsec_ip_multi3(address_no_subnet)
            break
        elif choice == "0":
            clear()
            wireguardedit_gre6tapsec_noconjuction_kharej1_5iran()
            break
        else:
            print("Please select a valid option.")


def wireguard_gre6tapnsec_kharejconfig_4():
    local_ip_private = local_ip("/etc/gre64.sh")
    remote_ip_private = remote_ip("/etc/gre64.sh")
    private_ip_private = private_gre61("/etc/gre64.sh")
    config_path = "/etc/wireguard/wireserver4.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_gre6tapn_wire_kharej_server4(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )
        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mGre6tap[Native] + Wireguard\033[93m Kharej Server \033[96mConfig [4]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej Server\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mIRAN Client [4] \033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mGRE6tap \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6.\033[94m Change IPsec Secret Key\033[0m")
        print("7. \033[92mSave All Changes\033[0m")
        print("0. \033[97mback to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[GRE6tap]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Client [4]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec4(opposite_ip)
                update_ipsec_conf_wireguard_server4("/etc/ipsec1.conf", new_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "6":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secret Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")
        elif choice == "7":
            save_stuff_gre64(
                private_ip_private, local_ip_private, remote_ip_private, is_gre6=True
            )
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwire4sec(config_path, new_config)
            update_ipsec_ip_multi4(address_no_subnet)
            break
        elif choice == "0":
            clear()
            wireguardedit_gre6tapsec_noconjuction_kharej1_5iran()
            break
        else:
            print("Please select a valid option.")


def wireguard_gre6tapnsec_kharejconfig_5():
    local_ip_private = local_ip("/etc/gre65.sh")
    remote_ip_private = remote_ip("/etc/gre65.sh")
    private_ip_private = private_gre61("/etc/gre65.sh")
    config_path = "/etc/wireguard/wireserver5.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_gre6tapn_wire_kharej_server5(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )
        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mGre6tap[Native] + Wireguard\033[93m Kharej Server \033[96mConfig [5]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej Server\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mIRAN Client [5] \033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mGRE6tap \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6.\033[94m Change IPsec Secret Key\033[0m")
        print("7. \033[92mSave All Changes\033[0m")
        print("0. \033[97mback to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[GRE6tap]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Client [5]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec5(opposite_ip)
                update_ipsec_conf_wireguard_server5("/etc/ipsec1.conf", new_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "6":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secret Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")
        elif choice == "7":
            save_stuff_gre64(
                private_ip_private, local_ip_private, remote_ip_private, is_gre6=True
            )
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwire5sec(config_path, new_config)
            update_ipsec_ip_multi5(address_no_subnet)
            break
        elif choice == "0":
            clear()
            wireguardedit_gre6tapsec_noconjuction_kharej1_5iran()
            break
        else:
            print("Please select a valid option.")


def wireguard_gre6tapnsec_iran_client1():
    local_ip_private = local_ip("/etc/gre61.sh")
    remote_ip_private = remote_ip("/etc/gre61.sh")
    private_ip_private = private_gre61("/etc/gre61.sh")
    config_path = "/etc/wireguard/wireclient.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_gre6tapn_wire_iran_client1(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )
        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mGre6tap[Native] + Wireguard\033[93m IRAN Client \033[96m[1]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN Client [1]\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mKharej Server \033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mGRE6tap \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6.\033[94m Change IPsec Secret Key\033[0m")
        print("7. \033[92mSave All Changes\033[0m")
        print("0. \033[97mback to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[GRE6tap]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Client [1]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec_client(opposite_ip)
                update_ipsec_conf_wireguard_46sec("/etc/ipsec1.conf", new_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "6":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secret Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")
        elif choice == "7":
            save_stuff_gre61(
                private_ip_private, local_ip_private, remote_ip_private, is_gre6=True
            )
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwiresec_client(config_path, new_config)
            update_ipsec_ip(address_no_subnet)
            break
        elif choice == "0":
            clear()
            wireguardedit_gre6tapsec_noconjuction_kharej1_5iran()
            break
        else:
            print("Please select a valid option.")


def wireguard_gre6tapnsec_iran_client2():
    local_ip_private = local_ip("/etc/gre62.sh")
    remote_ip_private = remote_ip("/etc/gre62.sh")
    private_ip_private = private_gre61("/etc/gre62.sh")
    config_path = "/etc/wireguard/wireclient.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_gre6tapn_wire_iran_client2(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )
        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mGre6tap[Native] + Wireguard\033[93m IRAN Client \033[96m[2]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN Client [2]\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mKharej Server \033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mGRE6tap \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6.\033[94m Change IPsec Secret Key\033[0m")
        print("7. \033[92mSave All Changes\033[0m")
        print("0. \033[97mback to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[GRE6tap]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Client [2]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec_client(opposite_ip)
                update_ipsec_conf_wireguard_46sec("/etc/ipsec1.conf", new_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "6":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secret Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")
        elif choice == "7":
            save_stuff_gre62(
                private_ip_private, local_ip_private, remote_ip_private, is_gre6=True
            )
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwiresec_client(config_path, new_config)
            update_ipsec_ip(address_no_subnet)
            break
        elif choice == "0":
            clear()
            wireguardedit_gre6tapsec_noconjuction_kharej1_5iran()
            break
        else:
            print("Please select a valid option.")


def wireguard_gre6tapnsec_iran_client3():
    local_ip_private = local_ip("/etc/gre63.sh")
    remote_ip_private = remote_ip("/etc/gre63.sh")
    private_ip_private = private_gre61("/etc/gre63.sh")
    config_path = "/etc/wireguard/wireclient.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_gre6tapn_wire_iran_client3(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )
        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mGre6tap[Native] + Wireguard\033[93m IRAN Client \033[96m[3]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN Client [3]\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mKharej Server \033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mGRE6tap \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6.\033[94m Change IPsec Secret Key\033[0m")
        print("7. \033[92mSave All Changes\033[0m")
        print("0. \033[97mback to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[GRE6tap]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Client [3]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec_client(opposite_ip)
                update_ipsec_conf_wireguard_46sec("/etc/ipsec1.conf", new_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "6":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secret Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")
        elif choice == "7":
            save_stuff_gre63(
                private_ip_private, local_ip_private, remote_ip_private, is_gre6=True
            )
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwiresec_client(config_path, new_config)
            update_ipsec_ip(address_no_subnet)
            break
        elif choice == "0":
            clear()
            wireguardedit_gre6tapsec_noconjuction_kharej1_5iran()
            break
        else:
            print("Please select a valid option.")


def wireguard_gre6tapnsec_iran_client4():
    local_ip_private = local_ip("/etc/gre64.sh")
    remote_ip_private = remote_ip("/etc/gre64.sh")
    private_ip_private = private_gre61("/etc/gre64.sh")
    config_path = "/etc/wireguard/wireclient.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_gre6tapn_wire_iran_client4(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )
        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mGre6tap[Native] + Wireguard\033[93m IRAN Client \033[96m[4]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN Client [4]\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mKharej Server \033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mGRE6tap \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6.\033[94m Change IPsec Secret Key\033[0m")
        print("7. \033[92mSave All Changes\033[0m")
        print("0. \033[97mback to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[GRE6tap]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Client [4]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec_client(opposite_ip)
                update_ipsec_conf_wireguard_46sec("/etc/ipsec1.conf", new_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "6":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secret Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")
        elif choice == "7":
            save_stuff_gre64(
                private_ip_private, local_ip_private, remote_ip_private, is_gre6=True
            )
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwiresec_client(config_path, new_config)
            update_ipsec_ip(address_no_subnet)
            break
        elif choice == "0":
            clear()
            wireguardedit_gre6tapsec_noconjuction_kharej1_5iran()
            break
        else:
            print("Please select a valid option.")


def wireguard_gre6tapnsec_iran_client4():
    local_ip_private = local_ip("/etc/gre64.sh")
    remote_ip_private = remote_ip("/etc/gre64.sh")
    private_ip_private = private_gre61("/etc/gre64.sh")
    config_path = "/etc/wireguard/wireclient.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_gre6tapn_wire_iran_client4(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )
        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mGre6tap[Native] + Wireguard\033[93m IRAN Client \033[96m[4]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN Client [4]\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mKharej Server \033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mGRE6tap \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6.\033[94m Change IPsec Secret Key\033[0m")
        print("7. \033[92mSave All Changes\033[0m")
        print("0. \033[97mback to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[GRE6tap]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Client [4]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec_client(opposite_ip)
                update_ipsec_conf_wireguard_46sec("/etc/ipsec1.conf", new_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "6":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secret Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")
        elif choice == "7":
            save_stuff_gre64(
                private_ip_private, local_ip_private, remote_ip_private, is_gre6=True
            )
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwiresec_client(config_path, new_config)
            update_ipsec_ip(address_no_subnet)
            break
        elif choice == "0":
            clear()
            wireguardedit_gre6tapsec_noconjuction_kharej1_5iran()
            break
        else:
            print("Please select a valid option.")


def wireguard_gre6tapnsec_iran_client5():
    local_ip_private = local_ip("/etc/gre65.sh")
    remote_ip_private = remote_ip("/etc/gre65.sh")
    private_ip_private = private_gre61("/etc/gre65.sh")
    config_path = "/etc/wireguard/wireclient.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_gre6tapn_wire_iran_client5(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )
        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mGre6tap[Native] + Wireguard\033[93m IRAN Client \033[96m[5]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN Client [5]\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mKharej Server \033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mGRE6tap \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6.\033[94m Change IPsec Secret Key\033[0m")
        print("7. \033[92mSave All Changes\033[0m")
        print("0. \033[97mback to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[GRE6tap]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Client [5]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec_client(opposite_ip)
                update_ipsec_conf_wireguard_46sec("/etc/ipsec1.conf", new_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "6":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secret Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")
        elif choice == "7":
            save_stuff_gre65(
                private_ip_private, local_ip_private, remote_ip_private, is_gre6=True
            )
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwiresec_client(config_path, new_config)
            update_ipsec_ip(address_no_subnet)
            break
        elif choice == "0":
            clear()
            wireguardedit_gre6tapsec_noconjuction_kharej1_5iran()
            break
        else:
            print("Please select a valid option.")


# I iran 5 kharej client
def wireguard_gre6tapnsec_iranconfig_1():
    local_ip_private = local_ip("/etc/gre61.sh")
    remote_ip_private = remote_ip("/etc/gre61.sh")
    private_ip_private = private_gre61("/etc/gre61.sh")
    config_path = "/etc/wireguard/wireserver1.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_gre6tapn_wire_iran1(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )
        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mGre6tap[Native] + Wireguard\033[93m IRAN Server \033[96mConfig [1]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN Server\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mKharej Client [1] \033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mGRE6tap \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6.\033[94m Change IPsec Secret Key\033[0m")
        print("7. \033[92mSave All Changes\033[0m")
        print("0. \033[97mback to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[GRE6tap]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Client [1]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec1(opposite_ip)
                update_ipsec_conf_wireguard_server1("/etc/ipsec1.conf", new_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "6":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secret Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")
        elif choice == "7":
            save_stuff_gre61(
                private_ip_private, local_ip_private, remote_ip_private, is_gre6=True
            )
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwire1sec(config_path, new_config)
            update_ipsec_ip_multi(address_no_subnet)
            break
        elif choice == "0":
            clear()
            wireguardedit_gre6tapsec_noconjuction_1iran_5kharej()
            break
        else:
            print("Please select a valid option.")


def wireguard_gre6tapnsec_iranconfig_2():
    local_ip_private = local_ip("/etc/gre62.sh")
    remote_ip_private = remote_ip("/etc/gre62.sh")
    private_ip_private = private_gre61("/etc/gre62.sh")
    config_path = "/etc/wireguard/wireserver2.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_gre6tapn_wire_iran2(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )
        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mGre6tap[Native] + Wireguard\033[93m IRAN Server \033[96mConfig [2]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN Server\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mKharej Client [2] \033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mGRE6tap \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6.\033[94m Change IPsec Secret Key\033[0m")
        print("7. \033[92mSave All Changes\033[0m")
        print("0. \033[97mback to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[GRE6tap]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Client [2]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec2(opposite_ip)
                update_ipsec_conf_wireguard_server2("/etc/ipsec1.conf", new_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "6":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secret Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")
        elif choice == "7":
            save_stuff_gre62(
                private_ip_private, local_ip_private, remote_ip_private, is_gre6=True
            )
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwire2sec(config_path, new_config)
            update_ipsec_ip_multi2(address_no_subnet)
            break
        elif choice == "0":
            clear()
            wireguardedit_gre6tapsec_noconjuction_1iran_5kharej()
            break
        else:
            print("Please select a valid option.")


def wireguard_gre6tapnsec_iranconfig_3():
    local_ip_private = local_ip("/etc/gre63.sh")
    remote_ip_private = remote_ip("/etc/gre63.sh")
    private_ip_private = private_gre61("/etc/gre63.sh")
    config_path = "/etc/wireguard/wireserver3.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_gre6tapn_wire_iran3(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )
        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mGre6tap[Native] + Wireguard\033[93m IRAN Server \033[96mConfig [3]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN Server\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mKharej Client [3] \033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mGRE6tap \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6.\033[94m Change IPsec Secret Key\033[0m")
        print("7. \033[92mSave All Changes\033[0m")
        print("0. \033[97mback to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[GRE6tap]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Client [3]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec3(opposite_ip)
                update_ipsec_conf_wireguard_server3("/etc/ipsec1.conf", new_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "6":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secret Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")
        elif choice == "7":
            save_stuff_gre63(
                private_ip_private, local_ip_private, remote_ip_private, is_gre6=True
            )
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwire3sec(config_path, new_config)
            update_ipsec_ip_multi3(address_no_subnet)
            break
        elif choice == "0":
            clear()
            wireguardedit_gre6tapsec_noconjuction_1iran_5kharej()
            break
        else:
            print("Please select a valid option.")


def wireguard_gre6tapnsec_iranconfig_4():
    local_ip_private = local_ip("/etc/gre64.sh")
    remote_ip_private = remote_ip("/etc/gre64.sh")
    private_ip_private = private_gre61("/etc/gre64.sh")
    config_path = "/etc/wireguard/wireserver4.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_gre6tapn_wire_iran4(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )
        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mGre6tap[Native] + Wireguard\033[93m IRAN Server \033[96mConfig [4]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN Server\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mKharej Client [4] \033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mGRE6tap \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6.\033[94m Change IPsec Secret Key\033[0m")
        print("7. \033[92mSave All Changes\033[0m")
        print("0. \033[97mback to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[GRE6tap]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Client [4]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec4(opposite_ip)
                update_ipsec_conf_wireguard_server4("/etc/ipsec1.conf", new_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "6":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secret Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")
        elif choice == "7":
            save_stuff_gre64(
                private_ip_private, local_ip_private, remote_ip_private, is_gre6=True
            )
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwire4sec(config_path, new_config)
            update_ipsec_ip_multi4(address_no_subnet)
            break
        elif choice == "0":
            clear()
            wireguardedit_gre6tapsec_noconjuction_1iran_5kharej()
            break
        else:
            print("Please select a valid option.")


def wireguard_gre6tapnsec_iranconfig_5():
    local_ip_private = local_ip("/etc/gre65.sh")
    remote_ip_private = remote_ip("/etc/gre65.sh")
    private_ip_private = private_gre61("/etc/gre65.sh")
    config_path = "/etc/wireguard/wireserver5.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_gre6tapn_wire_iran5(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )
        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mGre6tap[Native] + Wireguard\033[93m IRAN Server \033[96mConfig [5]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN Server\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mKharej Client [5] \033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mGRE6tap \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6.\033[94m Change IPsec Secret Key\033[0m")
        print("7. \033[92mSave All Changes\033[0m")
        print("0. \033[97mback to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[GRE6tap]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Client [5]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec5(opposite_ip)
                update_ipsec_conf_wireguard_server5("/etc/ipsec1.conf", new_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "6":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secret Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")
        elif choice == "7":
            save_stuff_gre64(
                private_ip_private, local_ip_private, remote_ip_private, is_gre6=True
            )
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwire5sec(config_path, new_config)
            update_ipsec_ip_multi5(address_no_subnet)
            break
        elif choice == "0":
            clear()
            wireguardedit_gre6tapsec_noconjuction_1iran_5kharej()
            break
        else:
            print("Please select a valid option.")


def wireguard_gre6tapnsec_kharej_client1():
    local_ip_private = local_ip("/etc/gre61.sh")
    remote_ip_private = remote_ip("/etc/gre61.sh")
    private_ip_private = private_gre61("/etc/gre61.sh")
    config_path = "/etc/wireguard/wireclient.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_gre6tapn_wire_kharej1(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )
        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mGre6tap[Native] + Wireguard\033[93m Kharej Client \033[96m[1]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej Client [1]\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mIRAN Server \033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mGRE6tap \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6.\033[94m Change IPsec Secret Key\033[0m")
        print("7. \033[92mSave All Changes\033[0m")
        print("0. \033[97mback to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[GRE6tap]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Client [1]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec_client(opposite_ip)
                update_ipsec_conf_wireguard_46sec("/etc/ipsec1.conf", new_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "6":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secret Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")
        elif choice == "7":
            save_stuff_gre61(
                private_ip_private, local_ip_private, remote_ip_private, is_gre6=True
            )
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwiresec_client(config_path, new_config)
            update_ipsec_ip(address_no_subnet)
            break
        elif choice == "0":
            clear()
            wireguardedit_gre6tapsec_noconjuction_1iran_5kharej()
            break
        else:
            print("Please select a valid option.")


def wireguard_gre6tapnsec_kharej_client2():
    local_ip_private = local_ip("/etc/gre62.sh")
    remote_ip_private = remote_ip("/etc/gre62.sh")
    private_ip_private = private_gre61("/etc/gre62.sh")
    config_path = "/etc/wireguard/wireclient.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_gre6tapn_wire_kharej2(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )
        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mGre6tap[Native] + Wireguard\033[93m Kharej Client \033[96m[2]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej Client [2]\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mIRAN Server \033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mGRE6tap \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6.\033[94m Change IPsec Secret Key\033[0m")
        print("7. \033[92mSave All Changes\033[0m")
        print("0. \033[97mback to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[GRE6tap]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Client [2]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec_client(opposite_ip)
                update_ipsec_conf_wireguard_46sec("/etc/ipsec1.conf", new_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "6":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secret Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")
        elif choice == "7":
            save_stuff_gre62(
                private_ip_private, local_ip_private, remote_ip_private, is_gre6=True
            )
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwiresec_client(config_path, new_config)
            update_ipsec_ip(address_no_subnet)
            break
        elif choice == "0":
            clear()
            wireguardedit_gre6tapsec_noconjuction_1iran_5kharej()
            break
        else:
            print("Please select a valid option.")


def wireguard_gre6tapnsec_kharej_client3():
    local_ip_private = local_ip("/etc/gre63.sh")
    remote_ip_private = remote_ip("/etc/gre63.sh")
    private_ip_private = private_gre61("/etc/gre63.sh")
    config_path = "/etc/wireguard/wireclient.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_gre6tapn_wire_kharej3(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )
        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mGre6tap[Native] + Wireguard\033[93m Kharej Client \033[96m[3]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej Client [3]\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mIRAN Server \033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mGRE6tap \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6.\033[94m Change IPsec Secret Key\033[0m")
        print("7. \033[92mSave All Changes\033[0m")
        print("0. \033[97mback to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[GRE6tap]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Client [3]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec_client(opposite_ip)
                update_ipsec_conf_wireguard_46sec("/etc/ipsec1.conf", new_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "6":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secret Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")
        elif choice == "7":
            save_stuff_gre63(
                private_ip_private, local_ip_private, remote_ip_private, is_gre6=True
            )
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwiresec_client(config_path, new_config)
            update_ipsec_ip(address_no_subnet)
            break
        elif choice == "0":
            clear()
            wireguardedit_gre6tapsec_noconjuction_1iran_5kharej()
            break
        else:
            print("Please select a valid option.")


def wireguard_gre6tapnsec_kharej_client4():
    local_ip_private = local_ip("/etc/gre64.sh")
    remote_ip_private = remote_ip("/etc/gre64.sh")
    private_ip_private = private_gre61("/etc/gre64.sh")
    config_path = "/etc/wireguard/wireclient.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_gre6tapn_wire_kharej4(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )
        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mGre6tap[Native] + Wireguard\033[93m Kharej Client \033[96m[4]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej Client [4]\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mIRAN Server \033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mGRE6tap \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6.\033[94m Change IPsec Secret Key\033[0m")
        print("7. \033[92mSave All Changes\033[0m")
        print("0. \033[97mback to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[GRE6tap]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Client [4]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec_client(opposite_ip)
                update_ipsec_conf_wireguard_46sec("/etc/ipsec1.conf", new_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "6":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secret Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")
        elif choice == "7":
            save_stuff_gre64(
                private_ip_private, local_ip_private, remote_ip_private, is_gre6=True
            )
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwiresec_client(config_path, new_config)
            update_ipsec_ip(address_no_subnet)
            break
        elif choice == "0":
            clear()
            wireguardedit_gre6tapsec_noconjuction_1iran_5kharej()
            break
        else:
            print("Please select a valid option.")


def wireguard_gre6tapnsec_kharej_client5():
    local_ip_private = local_ip("/etc/gre65.sh")
    remote_ip_private = remote_ip("/etc/gre65.sh")
    private_ip_private = private_gre61("/etc/gre65.sh")
    config_path = "/etc/wireguard/wireclient.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_gre6tapn_wire_kharej5(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )
        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mGre6tap[Native] + Wireguard\033[93m Kharej Client \033[96m[5]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej Client [5]\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mIRAN Server \033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mGRE6tap \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6.\033[94m Change IPsec Secret Key\033[0m")
        print("7. \033[92mSave All Changes\033[0m")
        print("0. \033[97mback to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[GRE6tap]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Client [5]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec_client(opposite_ip)
                update_ipsec_conf_wireguard_46sec("/etc/ipsec1.conf", new_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "6":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secret Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")
        elif choice == "7":
            save_stuff_gre65(
                private_ip_private, local_ip_private, remote_ip_private, is_gre6=True
            )
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwiresec_client(config_path, new_config)
            update_ipsec_ip(address_no_subnet)
            break
        elif choice == "0":
            clear()
            wireguardedit_gre6tapsec_noconjuction_1iran_5kharej()
            break
        else:
            print("Please select a valid option.")


def wireguardsiteditserver_mnu():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print("\033[92m(   ) \033[93mWireguard + SIT \033[93m Edit Menu\033[0m")
    print(
        '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
    )
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[92mNo IPSEC\033[0m")
    print("2. \033[93mWith IPSEC\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    print("0.\033[97mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")
    while True:
        server_type = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if server_type == "1":
            wireguardeditserver_nosec_sit_mnu()
            break
        elif server_type == "2":
            wireguardeditserver_sec_sit_mnu()
            break
        elif server_type == "0":
            os.system("clear")
            wireguard_edit_server()
            break
        else:
            print("Invalid choice.")


def wireguardeditserver_nosec_sit_mnu():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print("\033[92m(   ) \033[93mWireguard + SIT \033[93m Edit Menu\033[0m")
    print(
        '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
    )
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[92mWireguard + SIT - [1]Kharej Server [5]IRAN Clients\033[0m")
    print("2. \033[93mWireguard + SIT - [1]IRAN   Server [5]Kharej Clients\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    print("0.\033[97mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")
    while True:
        server_type = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if server_type == "1":
            wireguardedit_noconjuction_sit_kharej1_5iran()
            break
        elif server_type == "2":
            wireguardedit_noconjuction_sit_1iran_5kharej()
            break
        elif server_type == "0":
            os.system("clear")
            wireguardsiteditserver_mnu()
            break
        else:
            print("Invalid choice.")


def wireguardedit_noconjuction_sit_kharej1_5iran():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print(
        "\033[92m(   ) \033[93mWireguard + SIT \033[92m[1]Kharej Server\033[96m [5]IRAN Client\033[93m Edit Menu\033[0m"
    )
    print(
        '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
    )
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[92mIRAN Client [1] Config\033[0m")
    print("2. \033[92mIRAN Client [2] Config\033[0m")
    print("3. \033[92mIRAN Client [3] Config\033[0m")
    print("4. \033[93mIRAN Client [4] Config\033[0m")
    print("5. \033[92mIRAN Client [5] Config\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    print("6. \033[96mKharej Server Config\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    print("0.\033[97mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")
    while True:
        server_type = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if server_type == "1":
            wireguardudp_sit_iran_client1()
            break
        elif server_type == "2":
            wireguardudp_sit_iran_client2()
            break
        elif server_type == "3":
            wireguardudp_sit_iran_client3()
            break
        elif server_type == "4":
            wireguardudp_sit_iran_client4()
            break
        elif server_type == "5":
            wireguardudp_sit_iran_client5()
            break
        elif server_type == "6":
            wireguardudpedit_sit_kharej_server()
            break
        elif server_type == "0":
            os.system("clear")
            wireguardeditserver_nosec_sit_mnu()
            break
        else:
            print("Invalid choice.")


def wireguardudpedit_sit_kharej_server():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print(
        "\033[92m(   ) \033[93mWireguard + SIT \033[92m[1]Kharej Server\033[96m [5]IRAN Client\033[93m Edit Menu\033[0m"
    )
    print(
        '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
    )
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[92mKharej Server Config [1] \033[0m")
    print("2. \033[92mKharej Server Config [2]\033[0m")
    print("3. \033[93mKharej Server Config [3]\033[0m")
    print("4. \033[92mKharej Server Config [4]\033[0m")
    print("5. \033[92mKharej Server Config [5]\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    print("0.\033[97mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")
    while True:
        server_type = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if server_type == "1":
            wireguardedit_sit_kharejconfig_1()
            break
        elif server_type == "2":
            wireguardedit_sit_kharejconfig_2()
            break
        elif server_type == "3":
            wireguardedit_sit_kharejconfig_3()
            break
        elif server_type == "4":
            wireguardedit_sit_kharejconfig_4()
            break
        elif server_type == "5":
            wireguardedit_sit_kharejconfig_5()
            break
        elif server_type == "0":
            os.system("clear")
            wireguardedit_noconjuction_sit_kharej1_5iran()
            break
        else:
            print("Invalid choice.")


def wireguardedit_noconjuction_sit_1iran_5kharej():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print(
        "\033[92m(   ) \033[93mWireguard + SIT \033[92m[1]IRAN Server\033[96m [5]Kharej Client\033[93m Edit Menu\033[0m"
    )
    print(
        '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
    )
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[92mKharej Client [1] Config\033[0m")
    print("2. \033[92mKharej Client [2] Config\033[0m")
    print("3. \033[92mKharej Client [3] Config\033[0m")
    print("4. \033[93mKharej Client [4] Config\033[0m")
    print("5. \033[92mKharej Client [5] Config\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    print("6. \033[96mIRAN Server Config\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    print("0.\033[97mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")
    while True:
        server_type = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if server_type == "1":
            wireguardudp_sit_kharej_client1()
            break
        elif server_type == "2":
            wireguardudp_sit_kharej_client2()
            break
        elif server_type == "3":
            wireguardudp_sit_kharej_client3()
            break
        elif server_type == "4":
            wireguardudp_sit_kharej_client4()
            break
        elif server_type == "5":
            wireguardudp_sit_kharej_client5()
            break
        elif server_type == "6":
            wireguardudpedit_sit_iran_server()
            break
        elif server_type == "0":
            os.system("clear")
            wireguardeditserver_nosec_sit_mnu()
            break
        else:
            print("Invalid choice.")


def wireguardudpedit_sit_iran_server():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print(
        "\033[92m(   ) \033[93mWireguard + SIT \033[92m[1]IRAN Server\033[96m [5]Kharej Client\033[93m Edit Menu\033[0m"
    )
    print(
        '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
    )
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[92mIRAN Server Config [1] \033[0m")
    print("2. \033[92mIRAN Server Config [2]\033[0m")
    print("3. \033[93mIRAN Server Config [3]\033[0m")
    print("4. \033[92mIRAN Server Config [4]\033[0m")
    print("5. \033[92mIRAN Server Config [5]\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    print("0.\033[97mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")
    while True:
        server_type = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if server_type == "1":
            wireguardedit_sit_iranconfig_1()
            break
        elif server_type == "2":
            wireguardedit_sit_iranconfig_2()
            break
        elif server_type == "3":
            wireguardedit_sit_iranconfig_3()
            break
        elif server_type == "4":
            wireguardedit_sit_iranconfig_4()
            break
        elif server_type == "5":
            wireguardedit_sit_iranconfig_5()
            break
        elif server_type == "0":
            os.system("clear")
            wireguardedit_noconjuction_sit_1iran_5kharej()
            break
        else:
            print("Invalid choice.")
def wtb_opposite_ip_sitwire(ip):
    if ":" in ip:  # IPv6
        ip_parts = ip.split(":")
        ip_parts[-1] = "1" if ip_parts[-1] == "2" else "2"
        return ":".join(ip_parts)
    else:  # IPv4
        ip_parts = ip.split(".")
        ip_parts[-1] = "1" if ip_parts[-1] == "2" else "2"
        return ".".join(ip_parts)


def delete_ufw_rules(ip, port=None):
    counterpart_ip = wtb_opposite_ip_sitwire(ip)
    try:
        if port:
            subprocess.run(
                [
                    "sudo",
                    "ufw",
                    "delete",
                    "allow",
                    "from",
                    ip,
                    "to",
                    "any",
                    "port",
                    port,
                ],
                check=False,
            )
            subprocess.run(
                [
                    "sudo",
                    "ufw",
                    "delete",
                    "allow",
                    "from",
                    counterpart_ip,
                    "to",
                    "any",
                    "port",
                    port,
                ],
                check=False,
            )
        else:
            subprocess.run(["sudo", "ufw", "delete", "allow", "from", ip], check=False)
            subprocess.run(
                ["sudo", "ufw", "delete", "allow", "from", counterpart_ip], check=False
            )
    except subprocess.CalledProcessError as e:
        print(f"\033[91merror deleting UFW rules: {e}\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def add_ufw_rules(ip, port=None):
    counterpart_ip = wtb_opposite_ip_sitwire(ip)
    try:
        if port:
            subprocess.run(
                ["sudo", "ufw", "allow", "from", ip, "to", "any", "port", port],
                check=True,
            )
            subprocess.run(
                [
                    "sudo",
                    "ufw",
                    "allow",
                    "from",
                    counterpart_ip,
                    "to",
                    "any",
                    "port",
                    port,
                ],
                check=True,
            )
        else:
            subprocess.run(["sudo", "ufw", "allow", "from", ip], check=True)
            subprocess.run(["sudo", "ufw", "allow", "from", counterpart_ip], check=True)
    except subprocess.CalledProcessError as e:
        print(f"\033[91merror adding UFW rules: {e}\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def display_checkmark(message):
    print("\u2714 " + message)


def local_ip(name):
    try:
        with open(name, "r") as f:
            content = f.read()
        match = re.search(r"local (\S+)", content)
        if match:
            return match.group(1)
        else:
            print(f"\033[91mno local IP found\033[0m")
    except FileNotFoundError:
        print(f"file {name} doesn't exist")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")
    return None


def remote_ip(name):
    try:
        with open(name, "r") as f:
            content = f.read()
        match = re.search(r"remote (\S+)", content)
        if match:
            return match.group(1)
        else:
            print("\033[91mno remote IP found \033[0m")
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")
    return None


def private_ip1(name):
    try:
        with open(name, "r") as f:
            content = f.read()
        match = re.search(r"ip (-6 )?addr add (\S+)/64 dev azumi?", content)
        if match:
            return match.group(2)
        else:
            print(f"\033[91mno private IP found\033[0m")
    except FileNotFoundError:
        print(f"file {name} doesn't exist")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")
    return None


def update_pingfile_sit(name, new_ip):
    try:
        with open(name, "r") as f:
            content = f.read()

        new_content = re.sub(r'ip_address="[^"]+"', f'ip_address="{new_ip}"', content)

        with open(name, "w") as f:
            f.write(new_content)
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def update_ipfile_sit1(name, new_ip, update_type):
    try:
        with open(name, "r") as f:
            content = f.read()

        if update_type == "private":
            new_content = re.sub(
                r"ip (-6 )?addr add [^ ]+/64 dev azumi1",
                f"ip -6 addr add {new_ip}/64 dev azumi1",
                content,
            )
            ip_parts = new_ip.split(":")
            if new_ip.endswith(":2"):
                ip_parts[-1] = "1"
            else:
                ip_parts[-1] = "2"
            counterpart_ip = ":".join(ip_parts)
            new_content = re.sub(
                r"ip (-6 )?route add [^ ]+/64 dev azumi1",
                f"ip -6 route add {counterpart_ip}/64 dev azumi1",
                new_content,
            )
        elif update_type == "local":
            new_content = re.sub(r"local \S+", f"local {new_ip}", content)
        elif update_type == "remote":
            new_content = re.sub(r"remote \S+", f"remote {new_ip}", content)

        with open(name, "w") as f:
            f.write(new_content)
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def update_ipfile_sit2(name, new_ip, update_type):
    try:
        with open(name, "r") as f:
            content = f.read()

        if update_type == "private":
            new_content = re.sub(
                r"ip (-6 )?addr add [^ ]+/64 dev azumi2",
                f"ip -6 addr add {new_ip}/64 dev azumi2",
                content,
            )
            ip_parts = new_ip.split(":")
            if new_ip.endswith(":2"):
                ip_parts[-1] = "1"
            else:
                ip_parts[-1] = "2"
            counterpart_ip = ":".join(ip_parts)
            new_content = re.sub(
                r"ip (-6 )?route add [^ ]+/64 dev azumi2",
                f"ip -6 route add {counterpart_ip}/64 dev azumi2",
                new_content,
            )
        elif update_type == "local":
            new_content = re.sub(r"local \S+", f"local {new_ip}", content)
        elif update_type == "remote":
            new_content = re.sub(r"remote \S+", f"remote {new_ip}", content)

        with open(name, "w") as f:
            f.write(new_content)
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def update_ipfile_sit3(name, new_ip, update_type):
    try:
        with open(name, "r") as f:
            content = f.read()

        if update_type == "private":
            new_content = re.sub(
                r"ip (-6 )?addr add [^ ]+/64 dev azumi3",
                f"ip -6 addr add {new_ip}/64 dev azumi3",
                content,
            )
            ip_parts = new_ip.split(":")
            if new_ip.endswith(":2"):
                ip_parts[-1] = "1"
            else:
                ip_parts[-1] = "2"
            counterpart_ip = ":".join(ip_parts)
            new_content = re.sub(
                r"ip (-6 )?route add [^ ]+/64 dev azumi3",
                f"ip -6 route add {counterpart_ip}/64 dev azumi3",
                new_content,
            )
        elif update_type == "local":
            new_content = re.sub(r"local \S+", f"local {new_ip}", content)
        elif update_type == "remote":
            new_content = re.sub(r"remote \S+", f"remote {new_ip}", content)

        with open(name, "w") as f:
            f.write(new_content)
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def update_ipfile_sit4(name, new_ip, update_type):
    try:
        with open(name, "r") as f:
            content = f.read()

        if update_type == "private":
            new_content = re.sub(
                r"ip (-6 )?addr add [^ ]+/64 dev azumi4",
                f"ip -6 addr add {new_ip}/64 dev azumi4",
                content,
            )
            ip_parts = new_ip.split(":")
            if new_ip.endswith(":2"):
                ip_parts[-1] = "1"
            else:
                ip_parts[-1] = "2"
            counterpart_ip = ":".join(ip_parts)
            new_content = re.sub(
                r"ip (-6 )?route add [^ ]+/64 dev azumi4",
                f"ip -6 route add {counterpart_ip}/64 dev azumi4",
                new_content,
            )
        elif update_type == "local":
            new_content = re.sub(r"local \S+", f"local {new_ip}", content)
        elif update_type == "remote":
            new_content = re.sub(r"remote \S+", f"remote {new_ip}", content)

        with open(name, "w") as f:
            f.write(new_content)
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def update_ipfile_sit5(name, new_ip, update_type):
    try:
        with open(name, "r") as f:
            content = f.read()

        if update_type == "private":
            new_content = re.sub(
                r"ip (-6 )?addr add [^ ]+/64 dev azumi5",
                f"ip -6 addr add {new_ip}/64 dev azumi5",
                content,
            )
            ip_parts = new_ip.split(":")
            if new_ip.endswith(":2"):
                ip_parts[-1] = "1"
            else:
                ip_parts[-1] = "2"
            counterpart_ip = ":".join(ip_parts)
            new_content = re.sub(
                r"ip (-6 )?route add [^ ]+/64 dev azumi5",
                f"ip -6 route add {counterpart_ip}/64 dev azumi5",
                new_content,
            )
        elif update_type == "local":
            new_content = re.sub(r"local \S+", f"local {new_ip}", content)
        elif update_type == "remote":
            new_content = re.sub(r"remote \S+", f"remote {new_ip}", content)

        with open(name, "w") as f:
            f.write(new_content)
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def save_stuff_sit1(private_ip, local_ip, remote_ip):
    current_ips = {"private": private_ip1("/etc/private1.sh")}
    current_ip = current_ips["private"]

    if current_ip:
        delete_ufw_rules(current_ip)

    add_ufw_rules(private_ip)

    counterpart_ip = wtb_opposite_ip_sitwire(private_ip)
    try:
        update_pingfile_sit("/etc/ping_v61.sh", counterpart_ip)
        update_ipfile_sit1("/etc/private1.sh", private_ip, update_type="private")
        update_ipfile_sit1("/etc/private1.sh", local_ip, update_type="local")
        update_ipfile_sit1("/etc/private1.sh", remote_ip, update_type="remote")

        interface = "azumi1"
        try:
            subprocess.run(["ip", "link", "set", "dev", interface, "down"], check=True)
            subprocess.run(["ip", "link", "delete", interface], check=True)
        except subprocess.CalledProcessError as e:
            print("\033[91merror bringing interface down or deleting it\033[0m")

        script = "/etc/private1.sh"
        result = subprocess.run(["/bin/bash", script], capture_output=True, text=True)
        if "RTNETLINK answers: File exists" in result.stderr:
            print("interface already exists, don't mind this")
        else:
            result.check_returncode()
        subprocess.run(["sudo", "systemctl", "daemon-reload"], check=True)
        subprocess.run(["systemctl", "restart", "ping_v61"], check=True)
        display_checkmark(
            f"\033[92mChanges saved and {interface} interface updated successfully!\033[0m"
        )
    except subprocess.CalledProcessError as e:
        print(f"\033[91merror applying network stuff\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def save_stuff_sit2(private_ip, local_ip, remote_ip):
    current_ips = {"private": private_ip1("/etc/private2.sh")}
    current_ip = current_ips["private"]

    if current_ip:
        delete_ufw_rules(current_ip)

    add_ufw_rules(private_ip)

    counterpart_ip = wtb_opposite_ip_sitwire(private_ip)
    try:
        update_pingfile_sit("/etc/ping_v62.sh", counterpart_ip)
        update_ipfile_sit2("/etc/private2.sh", private_ip, update_type="private")
        update_ipfile_sit2("/etc/private2.sh", local_ip, update_type="local")
        update_ipfile_sit2("/etc/private2.sh", remote_ip, update_type="remote")

        interface = "azumi2"
        try:
            subprocess.run(["ip", "link", "set", "dev", interface, "down"], check=True)
            subprocess.run(["ip", "link", "delete", interface], check=True)
        except subprocess.CalledProcessError as e:
            print("\033[91merror bringing interface down or deleting it\033[0m")

        script = "/etc/private2.sh"
        result = subprocess.run(["/bin/bash", script], capture_output=True, text=True)
        if "RTNETLINK answers: File exists" in result.stderr:
            print("interface already exists, don't mind this")
        else:
            result.check_returncode()
        subprocess.run(["sudo", "systemctl", "daemon-reload"], check=True)
        subprocess.run(["systemctl", "restart", "ping_v62"], check=True)
        display_checkmark(
            f"\033[92mChanges saved and {interface} interface updated successfully!\033[0m"
        )
    except subprocess.CalledProcessError as e:
        print(f"\033[91merror applying network stuff\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def save_stuff_sit3(private_ip, local_ip, remote_ip):
    current_ips = {"private": private_ip1("/etc/private3.sh")}
    current_ip = current_ips["private"]

    if current_ip:
        delete_ufw_rules(current_ip)

    add_ufw_rules(private_ip)

    counterpart_ip = wtb_opposite_ip_sitwire(private_ip)
    try:
        update_pingfile_sit("/etc/ping_v63.sh", counterpart_ip)
        update_ipfile_sit3("/etc/private3.sh", private_ip, update_type="private")
        update_ipfile_sit3("/etc/private3.sh", local_ip, update_type="local")
        update_ipfile_sit3("/etc/private3.sh", remote_ip, update_type="remote")

        interface = "azumi3"
        try:
            subprocess.run(["ip", "link", "set", "dev", interface, "down"], check=True)
            subprocess.run(["ip", "link", "delete", interface], check=True)
        except subprocess.CalledProcessError as e:
            print("\033[91merror bringing interface down or deleting it\033[0m")

        script = "/etc/private3.sh"
        result = subprocess.run(["/bin/bash", script], capture_output=True, text=True)
        if "RTNETLINK answers: File exists" in result.stderr:
            print("interface already exists, don't mind this")
        else:
            result.check_returncode()
        subprocess.run(["sudo", "systemctl", "daemon-reload"], check=True)
        subprocess.run(["systemctl", "restart", "ping_v63"], check=True)
        display_checkmark(
            f"\033[92mChanges saved and {interface} interface updated successfully!\033[0m"
        )
    except subprocess.CalledProcessError as e:
        print(f"\033[91merror applying network stuff\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def save_stuff_sit4(private_ip, local_ip, remote_ip):
    current_ips = {"private": private_ip1("/etc/private4.sh")}
    current_ip = current_ips["private"]

    if current_ip:
        delete_ufw_rules(current_ip)

    add_ufw_rules(private_ip)

    counterpart_ip = wtb_opposite_ip_sitwire(private_ip)
    try:
        update_pingfile_sit("/etc/ping_v64.sh", counterpart_ip)
        update_ipfile_sit4("/etc/private4.sh", private_ip, update_type="private")
        update_ipfile_sit4("/etc/private4.sh", local_ip, update_type="local")
        update_ipfile_sit4("/etc/private4.sh", remote_ip, update_type="remote")

        interface = "azumi4"
        try:
            subprocess.run(["ip", "link", "set", "dev", interface, "down"], check=True)
            subprocess.run(["ip", "link", "delete", interface], check=True)
        except subprocess.CalledProcessError as e:
            print("\033[91merror bringing interface down or deleting it\033[0m")

        script = "/etc/private4.sh"
        result = subprocess.run(["/bin/bash", script], capture_output=True, text=True)
        if "RTNETLINK answers: File exists" in result.stderr:
            print("interface already exists, don't mind this")
        else:
            result.check_returncode()
        subprocess.run(["sudo", "systemctl", "daemon-reload"], check=True)
        subprocess.run(["systemctl", "restart", "ping_v64"], check=True)
        display_checkmark(
            f"\033[92mChanges saved and {interface} interface updated successfully!\033[0m"
        )
    except subprocess.CalledProcessError as e:
        print(f"\033[91merror applying network stuff\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def save_stuff_sit5(private_ip, local_ip, remote_ip):
    current_ips = {"private": private_ip1("/etc/private5.sh")}
    current_ip = current_ips["private"]

    if current_ip:
        delete_ufw_rules(current_ip)

    add_ufw_rules(private_ip)

    counterpart_ip = wtb_opposite_ip_sitwire(private_ip)
    try:
        update_pingfile_sit("/etc/ping_v65.sh", counterpart_ip)
        update_ipfile_sit5("/etc/private5.sh", private_ip, update_type="private")
        update_ipfile_sit5("/etc/private5.sh", local_ip, update_type="local")
        update_ipfile_sit5("/etc/private5.sh", remote_ip, update_type="remote")

        interface = "azumi5"
        try:
            subprocess.run(["ip", "link", "set", "dev", interface, "down"], check=True)
            subprocess.run(["ip", "link", "delete", interface], check=True)
        except subprocess.CalledProcessError as e:
            print("\033[91merror bringing interface down or deleting it\033[0m")

        script = "/etc/private5.sh"
        result = subprocess.run(["/bin/bash", script], capture_output=True, text=True)
        if "RTNETLINK answers: File exists" in result.stderr:
            print("interface already exists, don't mind this")
        else:
            result.check_returncode()
        subprocess.run(["sudo", "systemctl", "daemon-reload"], check=True)
        subprocess.run(["systemctl", "restart", "ping_v65"], check=True)
        display_checkmark(
            f"\033[92mChanges saved and {interface} interface updated successfully!\033[0m"
        )
    except subprocess.CalledProcessError as e:
        print(f"\033[91merror applying network stuff\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def wtb_opposite_ip_wireguard(ip):
    return wtb_opposite_ip_sitwire(ip)


def load_wireguardconfig_sitwire(file_path):
    try:
        with open(file_path, "r") as file:
            content = file.read()

        address_match = re.search(r"Address = ([^\s]+)", content)
        listen_port_match = re.search(r"ListenPort = (\d+)", content)
        endpoint_match = re.search(r"Endpoint = ([^\s]+):\d+", content)
        allowed_ips_match = re.search(r"AllowedIPs = ([^\s]+)", content)

        address = address_match.group(1) if address_match else "N/A"
        listen_port = listen_port_match.group(1) if listen_port_match else "N/A"
        endpoint = endpoint_match.group(1) if endpoint_match else "N/A"
        allowed_ips = allowed_ips_match.group(1) if allowed_ips_match else "N/A"

        return address, address.split("/")[0], listen_port, endpoint, allowed_ips
    except FileNotFoundError:
        print("\033[91mWireguard configuration file not found.\033[0m")
        return None, None, None, None, None
    except Exception as e:
        print(f"\033[91mAn error occurred: {e}\033[0m")
        return None, None, None, None, None


def save_wireguardconfig_sitwire1(file_path, new_config):
    try:
        with open(file_path, "r") as f:
            config = f.read()

        listen_port_pattern = r"ListenPort\s*=\s*\d+"
        endpoint_pattern = r"Endpoint\s*=\s*([^\s]+):\d+"
        address_pattern = r"Address\s*=\s*[^\s]+"
        allowed_ips_pattern = r"AllowedIPs\s*=\s*[^\s]+"

        new_config_content = re.sub(
            listen_port_pattern, f'ListenPort = {new_config["ListenPort"]}', config
        )
        new_config_content = re.sub(
            address_pattern, f'Address = {new_config["Address"]}', new_config_content
        )
        new_config_content = re.sub(
            allowed_ips_pattern,
            f'AllowedIPs = {new_config["AllowedIPs"]}',
            new_config_content,
        )

        def replace_endpoint(match):
            endpoint_ip = new_config["EndpointIP"]
            return f'Endpoint = {endpoint_ip}:{new_config["ListenPort"]}'

        new_config_content = re.sub(
            endpoint_pattern, replace_endpoint, new_config_content
        )

        with open(file_path, "w") as f:
            f.write(new_config_content)

        subprocess.run(["systemctl", "daemon-reload"], check=True)
        service_name = "wireguardping_1.service"
        service_status = subprocess.run(
            ["systemctl", "is-active", service_name],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
        )

        if service_status.returncode != 0:
            print(f"\033[91mService {service_name} doesn't exist or is inactive\033[0m")

        subprocess.run(
            ["wg-quick", "down", "/etc/wireguard/wireserver1.conf"], check=True
        )
        subprocess.run(
            ["wg-quick", "up", "/etc/wireguard/wireserver1.conf"], check=True
        )

        display_checkmark(f"\033[92mConfiguration updated successfully!\033[0m")

    except FileNotFoundError:
        print(f"\033[91mfile {file_path} not found.\033[0m")
    except subprocess.CalledProcessError as e:
        print(f"\033[91merror in restating services: {e}\033[0m")
    except Exception as e:
        print(f"\033[91merror in saving da config: {e}\033[0m")


def save_wireguardconfig_sitwire2(file_path, new_config):
    try:
        with open(file_path, "r") as f:
            config = f.read()

        listen_port_pattern = r"ListenPort\s*=\s*\d+"
        endpoint_pattern = r"Endpoint\s*=\s*([^\s]+):\d+"
        address_pattern = r"Address\s*=\s*[^\s]+"
        allowed_ips_pattern = r"AllowedIPs\s*=\s*[^\s]+"

        new_config_content = re.sub(
            listen_port_pattern, f'ListenPort = {new_config["ListenPort"]}', config
        )
        new_config_content = re.sub(
            address_pattern, f'Address = {new_config["Address"]}', new_config_content
        )
        new_config_content = re.sub(
            allowed_ips_pattern,
            f'AllowedIPs = {new_config["AllowedIPs"]}',
            new_config_content,
        )

        def replace_endpoint(match):
            endpoint_ip = new_config["EndpointIP"]
            return f'Endpoint = {endpoint_ip}:{new_config["ListenPort"]}'

        new_config_content = re.sub(
            endpoint_pattern, replace_endpoint, new_config_content
        )

        with open(file_path, "w") as f:
            f.write(new_config_content)

        subprocess.run(["systemctl", "daemon-reload"], check=True)
        service_name = "wireguardping_2.service"
        service_status = subprocess.run(
            ["systemctl", "is-active", service_name],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
        )

        if service_status.returncode != 0:
            print(f"\033[91mService {service_name} doesn't exist or is inactive\033[0m")

        subprocess.run(
            ["wg-quick", "down", "/etc/wireguard/wireserver2.conf"], check=True
        )
        subprocess.run(
            ["wg-quick", "up", "/etc/wireguard/wireserver2.conf"], check=True
        )

        display_checkmark(f"\033[92mConfiguration updated successfully!\033[0m")

    except FileNotFoundError:
        print(f"\033[91mfile {file_path} not found.\033[0m")
    except subprocess.CalledProcessError as e:
        print(f"\033[91merror in restating services: {e}\033[0m")
    except Exception as e:
        print(f"\033[91merror in saving da config: {e}\033[0m")


def save_wireguardconfig_sitwire3(file_path, new_config):
    try:
        with open(file_path, "r") as f:
            config = f.read()

        listen_port_pattern = r"ListenPort\s*=\s*\d+"
        endpoint_pattern = r"Endpoint\s*=\s*([^\s]+):\d+"
        address_pattern = r"Address\s*=\s*[^\s]+"
        allowed_ips_pattern = r"AllowedIPs\s*=\s*[^\s]+"

        new_config_content = re.sub(
            listen_port_pattern, f'ListenPort = {new_config["ListenPort"]}', config
        )
        new_config_content = re.sub(
            address_pattern, f'Address = {new_config["Address"]}', new_config_content
        )
        new_config_content = re.sub(
            allowed_ips_pattern,
            f'AllowedIPs = {new_config["AllowedIPs"]}',
            new_config_content,
        )

        def replace_endpoint(match):
            endpoint_ip = new_config["EndpointIP"]
            return f'Endpoint = {endpoint_ip}:{new_config["ListenPort"]}'

        new_config_content = re.sub(
            endpoint_pattern, replace_endpoint, new_config_content
        )

        with open(file_path, "w") as f:
            f.write(new_config_content)

        subprocess.run(["systemctl", "daemon-reload"], check=True)
        service_name = "wireguardping_3.service"
        service_status = subprocess.run(
            ["systemctl", "is-active", service_name],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
        )

        if service_status.returncode != 0:
            print(f"\033[91mService {service_name} doesn't exist or is inactive\033[0m")

        subprocess.run(
            ["wg-quick", "down", "/etc/wireguard/wireserver3.conf"], check=True
        )
        subprocess.run(
            ["wg-quick", "up", "/etc/wireguard/wireserver3.conf"], check=True
        )

        display_checkmark(f"\033[92mConfiguration updated successfully!\033[0m")

    except FileNotFoundError:
        print(f"\033[91mfile {file_path} not found.\033[0m")
    except subprocess.CalledProcessError as e:
        print(f"\033[91merror in restating services: {e}\033[0m")
    except Exception as e:
        print(f"\033[91merror in saving da config: {e}\033[0m")


def save_wireguardconfig_sitwire4(file_path, new_config):
    try:
        with open(file_path, "r") as f:
            config = f.read()

        listen_port_pattern = r"ListenPort\s*=\s*\d+"
        endpoint_pattern = r"Endpoint\s*=\s*([^\s]+):\d+"
        address_pattern = r"Address\s*=\s*[^\s]+"
        allowed_ips_pattern = r"AllowedIPs\s*=\s*[^\s]+"

        new_config_content = re.sub(
            listen_port_pattern, f'ListenPort = {new_config["ListenPort"]}', config
        )
        new_config_content = re.sub(
            address_pattern, f'Address = {new_config["Address"]}', new_config_content
        )
        new_config_content = re.sub(
            allowed_ips_pattern,
            f'AllowedIPs = {new_config["AllowedIPs"]}',
            new_config_content,
        )

        def replace_endpoint(match):
            endpoint_ip = new_config["EndpointIP"]
            return f'Endpoint = {endpoint_ip}:{new_config["ListenPort"]}'

        new_config_content = re.sub(
            endpoint_pattern, replace_endpoint, new_config_content
        )

        with open(file_path, "w") as f:
            f.write(new_config_content)

        subprocess.run(["systemctl", "daemon-reload"], check=True)
        service_name = "wireguardping_4.service"
        service_status = subprocess.run(
            ["systemctl", "is-active", service_name],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
        )

        if service_status.returncode != 0:
            print(f"\033[91mService {service_name} doesn't exist or is inactive\033[0m")

        subprocess.run(
            ["wg-quick", "down", "/etc/wireguard/wireserver4.conf"], check=True
        )
        subprocess.run(
            ["wg-quick", "up", "/etc/wireguard/wireserver4.conf"], check=True
        )

        display_checkmark(f"\033[92mConfiguration updated successfully!\033[0m")

    except FileNotFoundError:
        print(f"\033[91mfile {file_path} not found.\033[0m")
    except subprocess.CalledProcessError as e:
        print(f"\033[91merror in restating services: {e}\033[0m")
    except Exception as e:
        print(f"\033[91merror in saving da config: {e}\033[0m")


def save_wireguardconfig_sitwire5(file_path, new_config):
    try:
        with open(file_path, "r") as f:
            config = f.read()

        listen_port_pattern = r"ListenPort\s*=\s*\d+"
        endpoint_pattern = r"Endpoint\s*=\s*([^\s]+):\d+"
        address_pattern = r"Address\s*=\s*[^\s]+"
        allowed_ips_pattern = r"AllowedIPs\s*=\s*[^\s]+"

        new_config_content = re.sub(
            listen_port_pattern, f'ListenPort = {new_config["ListenPort"]}', config
        )
        new_config_content = re.sub(
            address_pattern, f'Address = {new_config["Address"]}', new_config_content
        )
        new_config_content = re.sub(
            allowed_ips_pattern,
            f'AllowedIPs = {new_config["AllowedIPs"]}',
            new_config_content,
        )

        def replace_endpoint(match):
            endpoint_ip = new_config["EndpointIP"]
            return f'Endpoint = {endpoint_ip}:{new_config["ListenPort"]}'

        new_config_content = re.sub(
            endpoint_pattern, replace_endpoint, new_config_content
        )

        with open(file_path, "w") as f:
            f.write(new_config_content)

        subprocess.run(["systemctl", "daemon-reload"], check=True)
        service_name = "wireguardping_5.service"
        service_status = subprocess.run(
            ["systemctl", "is-active", service_name],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
        )

        if service_status.returncode != 0:
            print(f"\033[91mService {service_name} doesn't exist or is inactive\033[0m")

        subprocess.run(
            ["wg-quick", "down", "/etc/wireguard/wireserver5.conf"], check=True
        )
        subprocess.run(
            ["wg-quick", "up", "/etc/wireguard/wireserver5.conf"], check=True
        )

        display_checkmark(f"\033[92mConfiguration updated successfully!\033[0m")

    except FileNotFoundError:
        print(f"\033[91mfile {file_path} not found.\033[0m")
    except subprocess.CalledProcessError as e:
        print(f"\033[91merror in restating services: {e}\033[0m")
    except Exception as e:
        print(f"\033[91merror in saving da config: {e}\033[0m")


def save_wireguardconfig_sitwire_client(file_path, new_config):
    try:
        with open(file_path, "r") as f:
            config = f.read()

        listen_port_pattern = r"ListenPort\s*=\s*\d+"
        endpoint_pattern = r"Endpoint\s*=\s*([^\s]+):\d+"
        address_pattern = r"Address\s*=\s*[^\s]+"
        allowed_ips_pattern = r"AllowedIPs\s*=\s*[^\s]+"

        new_config_content = re.sub(
            listen_port_pattern, f'ListenPort = {new_config["ListenPort"]}', config
        )
        new_config_content = re.sub(
            address_pattern, f'Address = {new_config["Address"]}', new_config_content
        )
        new_config_content = re.sub(
            allowed_ips_pattern,
            f'AllowedIPs = {new_config["AllowedIPs"]}',
            new_config_content,
        )

        def replace_endpoint(match):
            endpoint_ip = new_config["EndpointIP"]
            return f'Endpoint = {endpoint_ip}:{new_config["ListenPort"]}'

        new_config_content = re.sub(
            endpoint_pattern, replace_endpoint, new_config_content
        )

        with open(file_path, "w") as f:
            f.write(new_config_content)

        subprocess.run(["systemctl", "daemon-reload"], check=True)
        service_name = "wireguardping.service"
        service_status = subprocess.run(
            ["systemctl", "is-active", service_name],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
        )

        if service_status.returncode != 0:
            print(f"\033[91mService {service_name} doesn't exist or is inactive\033[0m")

        subprocess.run(
            ["wg-quick", "down", "/etc/wireguard/wireclient.conf"], check=True
        )
        subprocess.run(["wg-quick", "up", "/etc/wireguard/wireclient.conf"], check=True)

        display_checkmark(f"\033[92mConfiguration updated successfully!\033[0m")

    except FileNotFoundError:
        print(f"\033[91mfile {file_path} not found.\033[0m")
    except subprocess.CalledProcessError as e:
        print(f"\033[91merror in restating services: {e}\033[0m")
    except Exception as e:
        print(f"\033[91merror in saving da config: {e}\033[0m")


def update_ufw_ruleswireguard(old_ip, new_ip, old_port=None, new_port=None):
    if old_port:
        delete_ufw_rules(old_ip, old_port)
        delete_ufw_rules(wtb_opposite_ip_wireguard(old_ip), old_port)
    add_ufw_rules(new_ip, new_port)
    add_ufw_rules(wtb_opposite_ip_wireguard(new_ip), new_port)


def update_ping_script_opposite_ip_wirenosec_client(new_opposite_ip):
    script_path = "/etc/ping_wireguard.sh"
    try:
        with open(script_path, "r") as f:
            script_content = f.read()

        updated_script_content = re.sub(
            r'ip_address="[^"]+"', f'ip_address="{new_opposite_ip}"', script_content
        )

        with open(script_path, "w") as f:
            f.write(updated_script_content)

        display_checkmark(
            "\033[92mPing script updated with new opposite IP address!\033[0m"
        )
    except FileNotFoundError:
        print(f"\033[91mPing script {script_path} not found.\033[0m")
    except Exception as e:
        print(f"\033[91mError updating ping script: {e}\033[0m")


def update_ping_script_opposite_ip_wirenosec1(new_opposite_ip):
    script_path = "/etc/ping_wireguard_1.sh"
    try:
        with open(script_path, "r") as f:
            script_content = f.read()

        updated_script_content = re.sub(
            r'ip_address="[^"]+"', f'ip_address="{new_opposite_ip}"', script_content
        )

        with open(script_path, "w") as f:
            f.write(updated_script_content)

        display_checkmark(
            "\033[92mPing script updated with new opposite IP address!\033[0m"
        )
    except FileNotFoundError:
        print(f"\033[91mPing script {script_path} not found.\033[0m")
    except Exception as e:
        print(f"\033[91mError updating ping script: {e}\033[0m")


def update_ping_script_opposite_ip_wirenosec2(new_opposite_ip):
    script_path = "/etc/ping_wireguard_2.sh"
    try:
        with open(script_path, "r") as f:
            script_content = f.read()

        updated_script_content = re.sub(
            r'ip_address="[^"]+"', f'ip_address="{new_opposite_ip}"', script_content
        )

        with open(script_path, "w") as f:
            f.write(updated_script_content)

        display_checkmark(
            "\033[92mPing script updated with new opposite IP address!\033[0m"
        )
    except FileNotFoundError:
        print(f"\033[91mPing script {script_path} not found.\033[0m")
    except Exception as e:
        print(f"\033[91mError updating ping script: {e}\033[0m")


def update_ping_script_opposite_ip_wirenosec3(new_opposite_ip):
    script_path = "/etc/ping_wireguard_3.sh"
    try:
        with open(script_path, "r") as f:
            script_content = f.read()

        updated_script_content = re.sub(
            r'ip_address="[^"]+"', f'ip_address="{new_opposite_ip}"', script_content
        )

        with open(script_path, "w") as f:
            f.write(updated_script_content)

        display_checkmark(
            "\033[92mPing script updated with new opposite IP address!\033[0m"
        )
    except FileNotFoundError:
        print(f"\033[91mPing script {script_path} not found.\033[0m")
    except Exception as e:
        print(f"\033[91mError updating ping script: {e}\033[0m")


def update_ping_script_opposite_ip_wirenosec4(new_opposite_ip):
    script_path = "/etc/ping_wireguard_4.sh"
    try:
        with open(script_path, "r") as f:
            script_content = f.read()

        updated_script_content = re.sub(
            r'ip_address="[^"]+"', f'ip_address="{new_opposite_ip}"', script_content
        )

        with open(script_path, "w") as f:
            f.write(updated_script_content)

        display_checkmark(
            "\033[92mPing script updated with new opposite IP address!\033[0m"
        )
    except FileNotFoundError:
        print(f"\033[91mPing script {script_path} not found.\033[0m")
    except Exception as e:
        print(f"\033[91mError updating ping script: {e}\033[0m")


def update_ping_script_opposite_ip_wirenosec5(new_opposite_ip):
    script_path = "/etc/ping_wireguard_5.sh"
    try:
        with open(script_path, "r") as f:
            script_content = f.read()

        updated_script_content = re.sub(
            r'ip_address="[^"]+"', f'ip_address="{new_opposite_ip}"', script_content
        )

        with open(script_path, "w") as f:
            f.write(updated_script_content)

        display_checkmark(
            "\033[92mPing script updated with new opposite IP address!\033[0m"
        )
    except FileNotFoundError:
        print(f"\033[91mPing script {script_path} not found.\033[0m")
    except Exception as e:
        print(f"\033[91mError updating ping script: {e}\033[0m")


def display_stuff_sitwire_privateiran1(local_ip, remote_ip, private_ip):
    lines = [
        f"\033[93mTitle:         SIT Configuration\033[0m",
        f"\033[97m──────────────────────────────────────\033[0m",
        f"\033[93mIRAN Public IP:         \033[97m{local_ip}\033[0m",
        f"\033[92mKharej \033[96m[1]\033[92m Public IP:   \033[97m{remote_ip}\033[0m",
        f"\033[93mSIT Private IP:         \033[97m{private_ip}\033[0m",
    ]
    box_width = 50

    print("\033[93m╭" + "─" * (box_width - 2) + "╮\033[0m")

    for line in lines:
        print(f"\033[93m {line:<{box_width - 4}} \033[0m")

    print("\033[93m╰" + "─" * (box_width - 2) + "╯\033[0m")


def display_stuff_sitwire_privateiran2(local_ip, remote_ip, private_ip):
    lines = [
        f"\033[93mTitle:         SIT Configuration\033[0m",
        f"\033[97m──────────────────────────────────────\033[0m",
        f"\033[93mIRAN Public IP:         \033[97m{local_ip}\033[0m",
        f"\033[92mKharej \033[96m[2]\033[92m Public IP:   \033[97m{remote_ip}\033[0m",
        f"\033[93mSIT Private IP:         \033[97m{private_ip}\033[0m",
    ]
    box_width = 50

    print("\033[93m╭" + "─" * (box_width - 2) + "╮\033[0m")

    for line in lines:
        print(f"\033[93m {line:<{box_width - 4}} \033[0m")

    print("\033[93m╰" + "─" * (box_width - 2) + "╯\033[0m")


def display_stuff_sitwire_privateiran3(local_ip, remote_ip, private_ip):
    lines = [
        f"\033[93mTitle:         SIT Configuration\033[0m",
        f"\033[97m──────────────────────────────────────\033[0m",
        f"\033[93mIRAN Public IP:         \033[97m{local_ip}\033[0m",
        f"\033[92mKharej \033[96m[3]\033[92m Public IP:   \033[97m{remote_ip}\033[0m",
        f"\033[93mSIT Private IP:         \033[97m{private_ip}\033[0m",
    ]
    box_width = 50

    print("\033[93m╭" + "─" * (box_width - 2) + "╮\033[0m")

    for line in lines:
        print(f"\033[93m {line:<{box_width - 4}} \033[0m")

    print("\033[93m╰" + "─" * (box_width - 2) + "╯\033[0m")


def display_stuff_sitwire_privateiran4(local_ip, remote_ip, private_ip):
    lines = [
        f"\033[93mTitle:         SIT Configuration\033[0m",
        f"\033[97m──────────────────────────────────────\033[0m",
        f"\033[93mIRAN Public IP:         \033[97m{local_ip}\033[0m",
        f"\033[92mKharej \033[96m[4]\033[92m Public IP:   \033[97m{remote_ip}\033[0m",
        f"\033[93mSIT Private IP:         \033[97m{private_ip}\033[0m",
    ]
    box_width = 50

    print("\033[93m╭" + "─" * (box_width - 2) + "╮\033[0m")

    for line in lines:
        print(f"\033[93m {line:<{box_width - 4}} \033[0m")

    print("\033[93m╰" + "─" * (box_width - 2) + "╯\033[0m")


def display_stuff_sitwire_privateiran5(local_ip, remote_ip, private_ip):
    lines = [
        f"\033[93mTitle:         SIT Configuration\033[0m",
        f"\033[97m──────────────────────────────────────\033[0m",
        f"\033[93mIRAN Public IP:         \033[97m{local_ip}\033[0m",
        f"\033[92mKharej \033[96m[5]\033[92m Public IP:   \033[97m{remote_ip}\033[0m",
        f"\033[93mSIT Private IP:         \033[97m{private_ip}\033[0m",
    ]
    box_width = 50

    print("\033[93m╭" + "─" * (box_width - 2) + "╮\033[0m")

    for line in lines:
        print(f"\033[93m {line:<{box_width - 4}} \033[0m")

    print("\033[93m╰" + "─" * (box_width - 2) + "╯\033[0m")


def display_stuff_sitwire_privatekharej1(local_ip, remote_ip, private_ip):
    lines = [
        f"\033[93mTitle:         SIT Configuration\033[0m",
        f"\033[97m──────────────────────────────────────\033[0m",
        f"\033[92mKharej \033[96m[1]\033[92m Public IP:   \033[97m{local_ip}\033[0m",
        f"\033[93mIRAN Public IP:         \033[97m{remote_ip}\033[0m",
        f"\033[93mSIT Private IP:         \033[97m{private_ip}\033[0m",
    ]
    box_width = 50

    print("\033[93m╭" + "─" * (box_width - 2) + "╮\033[0m")

    for line in lines:
        print(f"\033[93m {line:<{box_width - 4}} \033[0m")

    print("\033[93m╰" + "─" * (box_width - 2) + "╯\033[0m")


def display_stuff_sitwire_privatekharej2(local_ip, remote_ip, private_ip):
    lines = [
        f"\033[93mTitle:         SIT Configuration\033[0m",
        f"\033[97m──────────────────────────────────────\033[0m",
        f"\033[92mKharej \033[96m[2]\033[92m Public IP:   \033[97m{local_ip}\033[0m",
        f"\033[93mIRAN Public IP:         \033[97m{remote_ip}\033[0m",
        f"\033[93mSIT Private IP:         \033[97m{private_ip}\033[0m",
    ]
    box_width = 50

    print("\033[93m╭" + "─" * (box_width - 2) + "╮\033[0m")

    for line in lines:
        print(f"\033[93m {line:<{box_width - 4}} \033[0m")

    print("\033[93m╰" + "─" * (box_width - 2) + "╯\033[0m")


def display_stuff_sitwire_privatekharej3(local_ip, remote_ip, private_ip):
    lines = [
        f"\033[93mTitle:         SIT Configuration\033[0m",
        f"\033[97m──────────────────────────────────────\033[0m",
        f"\033[92mKharej \033[96m[3]\033[92m Public IP:   \033[97m{local_ip}\033[0m",
        f"\033[93mIRAN Public IP:         \033[97m{remote_ip}\033[0m",
        f"\033[93mSIT Private IP:         \033[97m{private_ip}\033[0m",
    ]
    box_width = 50

    print("\033[93m╭" + "─" * (box_width - 2) + "╮\033[0m")

    for line in lines:
        print(f"\033[93m {line:<{box_width - 4}} \033[0m")

    print("\033[93m╰" + "─" * (box_width - 2) + "╯\033[0m")


def display_stuff_sitwire_privatekharej4(local_ip, remote_ip, private_ip):
    lines = [
        f"\033[93mTitle:         SIT Configuration\033[0m",
        f"\033[97m──────────────────────────────────────\033[0m",
        f"\033[92mKharej \033[96m[4]\033[92m Public IP:   \033[97m{local_ip}\033[0m",
        f"\033[93mIRAN Public IP:         \033[97m{remote_ip}\033[0m",
        f"\033[93mSIT Private IP:         \033[97m{private_ip}\033[0m",
    ]
    box_width = 50

    print("\033[93m╭" + "─" * (box_width - 2) + "╮\033[0m")

    for line in lines:
        print(f"\033[93m {line:<{box_width - 4}} \033[0m")

    print("\033[93m╰" + "─" * (box_width - 2) + "╯\033[0m")


def display_stuff_sitwire_privatekharej5(local_ip, remote_ip, private_ip):
    lines = [
        f"\033[93mTitle:         SIT Configuration\033[0m",
        f"\033[97m──────────────────────────────────────\033[0m",
        f"\033[92mKharej \033[96m[5]\033[92m Public IP:   \033[97m{local_ip}\033[0m",
        f"\033[93mIRAN Public IP:         \033[97m{remote_ip}\033[0m",
        f"\033[93mSIT Private IP:         \033[97m{private_ip}\033[0m",
    ]
    box_width = 50

    print("\033[93m╭" + "─" * (box_width - 2) + "╮\033[0m")

    for line in lines:
        print(f"\033[93m {line:<{box_width - 4}} \033[0m")

    print("\033[93m╰" + "─" * (box_width - 2) + "╯\033[0m")


def display_wireguard_config_sitwire(
    address_no_subnet, listen_port, endpoint, allowed_ips
):
    lines = [
        f"\033[97m──────────────────────────────────────\033[0m",
        f"\033[93mTitle:         Wireguard Configuration\033[0m",
        f"\033[97m──────────────────────────────────────\033[0m",
        f"\033[92mAddress:           \033[97m{address_no_subnet}\033[0m",
        f"\033[92mListenPort:        \033[97m{listen_port}\033[0m",
        f"\033[92mEndpoint:          \033[97m{endpoint}\033[0m",
        f"\033[92mAllowedIPs:        \033[97m{allowed_ips}\033[0m",
    ]
    box_width = 50

    print("\033[93m╭" + "─" * (box_width - 2) + "╮\033[0m")

    for line in lines:
        print(f"\033[93m {line:<{box_width - 4}} \033[0m")

    print("\033[93m╰" + "─" * (box_width - 2) + "╯\033[0m")


def wireguardedit_sit_iranconfig_1():
    local_ip_private = local_ip("/etc/private1.sh")
    remote_ip_private = remote_ip("/etc/private1.sh")
    private_ip_private = private_ip1("/etc/private1.sh")
    config_path = "/etc/wireguard/wireserver1.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_sitwire_privateiran1(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mPrivate[SIT] + Wireguard\033[93m IRAN Server \033[96mConfig [1]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN Server\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mKharej Client [1] \033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6. \033[93mChange WireGuard Endpoint IP\033[0m")
        print("7. \033[92mSave All Stuff\033[0m")
        print("0. \033[97mback to the related menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Client [1]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec1(opposite_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "6":
            new_endpoint = input(
                "\033[93mEnter New \033[92mWireGuard Endpoint\033[93m Address:\033[0m "
            )
            if new_endpoint:
                try:
                    endpoint_ip, new_port = new_endpoint.rsplit(":", 1)
                    if endpoint.startswith(endpoint_ip):
                        endpoint = f"{endpoint_ip}:{new_port}"
                    else:
                        print(
                            "\033[97mSince Endpoint IP doesn't match with the original one, only port will be updated\033[0m"
                        )
                except ValueError:
                    print("\033[91minvalid Endpoint format\033[0m")
            else:
                print("\033[91minvalid Endpoint Address!\033[0m")
        elif choice == "7":
            save_stuff_sit1(private_ip_private, local_ip_private, remote_ip_private)
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwire1(config_path, new_config)
            break
        elif choice == "0":
            clear()
            wireguardedit_noconjuction_sit_1iran_5kharej()
            break
        else:
            print("Please select a valid option.")


def wireguardedit_sit_iranconfig_2():
    local_ip_private = local_ip("/etc/private2.sh")
    remote_ip_private = remote_ip("/etc/private2.sh")
    private_ip_private = private_ip1("/etc/private2.sh")
    config_path = "/etc/wireguard/wireserver2.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_sitwire_privateiran2(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mPrivate[SIT] + Wireguard\033[93m IRAN Server \033[96mConfig [2]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN Server\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mKharej Client [2] \033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6. \033[93mChange WireGuard Endpoint IP\033[0m")
        print("7. \033[92mSave All Stuff\033[0m")
        print("0. \033[97mback to the related menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Client [2]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec2(opposite_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "6":
            new_endpoint = input(
                "\033[93mEnter New \033[92mWireGuard Endpoint\033[93m Address:\033[0m "
            )
            if new_endpoint:
                try:
                    endpoint_ip, new_port = new_endpoint.rsplit(":", 1)
                    if endpoint.startswith(endpoint_ip):
                        endpoint = f"{endpoint_ip}:{new_port}"
                    else:
                        print(
                            "\033[97mSince Endpoint IP doesn't match with the original one, only port will be updated\033[0m"
                        )
                except ValueError:
                    print("\033[91minvalid Endpoint format\033[0m")
            else:
                print("\033[91minvalid Endpoint Address!\033[0m")
        elif choice == "7":
            save_stuff_sit2(private_ip_private, local_ip_private, remote_ip_private)
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwire2(config_path, new_config)
            break
        elif choice == "0":
            clear()
            wireguardedit_noconjuction_sit_1iran_5kharej()
            break
        else:
            print("Please select a valid option.")


def wireguardedit_sit_iranconfig_3():
    local_ip_private = local_ip("/etc/private3.sh")
    remote_ip_private = remote_ip("/etc/private3.sh")
    private_ip_private = private_ip1("/etc/private3.sh")
    config_path = "/etc/wireguard/wireserver3.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_sitwire_privateiran3(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mPrivate[SIT] + Wireguard\033[93m IRAN Server \033[96mConfig [3]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN Server\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mKharej Client [3] \033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6. \033[93mChange WireGuard Endpoint IP\033[0m")
        print("7. \033[92mSave All Stuff\033[0m")
        print("0. \033[97mback to the related menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Client [3]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec3(opposite_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "6":
            new_endpoint = input(
                "\033[93mEnter New \033[92mWireGuard Endpoint\033[93m Address:\033[0m "
            )
            if new_endpoint:
                try:
                    endpoint_ip, new_port = new_endpoint.rsplit(":", 1)
                    if endpoint.startswith(endpoint_ip):
                        endpoint = f"{endpoint_ip}:{new_port}"
                    else:
                        print(
                            "\033[97mSince Endpoint IP doesn't match with the original one, only port will be updated\033[0m"
                        )
                except ValueError:
                    print("\033[91minvalid Endpoint format\033[0m")
            else:
                print("\033[91minvalid Endpoint Address!\033[0m")
        elif choice == "7":
            save_stuff_sit3(private_ip_private, local_ip_private, remote_ip_private)
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwire3(config_path, new_config)
            break
        elif choice == "0":
            clear()
            wireguardedit_noconjuction_sit_1iran_5kharej()
            break
        else:
            print("Please select a valid option.")


def wireguardedit_sit_iranconfig_4():
    local_ip_private = local_ip("/etc/private4.sh")
    remote_ip_private = remote_ip("/etc/private4.sh")
    private_ip_private = private_ip1("/etc/private4.sh")
    config_path = "/etc/wireguard/wireserver4.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_sitwire_privateiran4(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mPrivate[SIT] + Wireguard\033[93m IRAN Server \033[96mConfig [4]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN Server\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mKharej Client [4] \033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6. \033[93mChange WireGuard Endpoint IP\033[0m")
        print("7. \033[92mSave All Stuff\033[0m")
        print("0. \033[97mback to the related menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Client [4]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec4(opposite_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "6":
            new_endpoint = input(
                "\033[93mEnter New \033[92mWireGuard Endpoint\033[93m Address:\033[0m "
            )
            if new_endpoint:
                try:
                    endpoint_ip, new_port = new_endpoint.rsplit(":", 1)
                    if endpoint.startswith(endpoint_ip):
                        endpoint = f"{endpoint_ip}:{new_port}"
                    else:
                        print(
                            "\033[97mSince Endpoint IP doesn't match with the original one, only port will be updated\033[0m"
                        )
                except ValueError:
                    print("\033[91minvalid Endpoint format\033[0m")
            else:
                print("\033[91minvalid Endpoint Address!\033[0m")
        elif choice == "7":
            save_stuff_sit4(private_ip_private, local_ip_private, remote_ip_private)
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwire4(config_path, new_config)
            break
        elif choice == "0":
            clear()
            wireguardedit_noconjuction_sit_1iran_5kharej()
            break
        else:
            print("Please select a valid option.")


def wireguardedit_sit_iranconfig_5():
    local_ip_private = local_ip("/etc/private5.sh")
    remote_ip_private = remote_ip("/etc/private5.sh")
    private_ip_private = private_ip1("/etc/private5.sh")
    config_path = "/etc/wireguard/wireserver5.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_sitwire_privateiran5(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mPrivate[SIT] + Wireguard\033[93m IRAN Server \033[96mConfig [5]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN Server\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mKharej Client [5] \033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6. \033[93mChange WireGuard Endpoint IP\033[0m")
        print("7. \033[92mSave All Stuff\033[0m")
        print("0. \033[97mback to the related menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Client [5]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec5(opposite_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "6":
            new_endpoint = input(
                "\033[93mEnter New \033[92mWireGuard Endpoint\033[93m Address:\033[0m "
            )
            if new_endpoint:
                try:
                    endpoint_ip, new_port = new_endpoint.rsplit(":", 1)
                    if endpoint.startswith(endpoint_ip):
                        endpoint = f"{endpoint_ip}:{new_port}"
                    else:
                        print(
                            "\033[97mSince Endpoint IP doesn't match with the original one, only port will be updated\033[0m"
                        )
                except ValueError:
                    print("\033[91minvalid Endpoint format\033[0m")
            else:
                print("\033[91minvalid Endpoint Address!\033[0m")
        elif choice == "7":
            save_stuff_sit5(private_ip_private, local_ip_private, remote_ip_private)
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwire5(config_path, new_config)
            break
        elif choice == "0":
            clear()
            wireguardedit_noconjuction_sit_1iran_5kharej()
            break
        else:
            print("Please select a valid option.")


def wireguardudp_sit_kharej_client1():
    local_ip_private = local_ip("/etc/private1.sh")
    remote_ip_private = remote_ip("/etc/private1.sh")
    private_ip_private = private_ip1("/etc/private1.sh")
    config_path = "/etc/wireguard/wireclient.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_sitwire_privatekharej1(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mPrivate[SIT] + Wireguard\033[93m Kharej Client \033[96m[1]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej Client [1]\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mIRAN Server\033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6. \033[93mChange WireGuard Endpoint IP\033[0m")
        print("7. \033[92mSave All Stuff\033[0m")
        print("0. \033[97mback to the related menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Client [1]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec_client(opposite_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "6":
            new_endpoint = input(
                "\033[93mEnter New \033[92mWireGuard Endpoint\033[93m Address:\033[0m "
            )
            if new_endpoint:
                try:
                    endpoint_ip, new_port = new_endpoint.rsplit(":", 1)
                    if endpoint.startswith(endpoint_ip):
                        endpoint = f"{endpoint_ip}:{new_port}"
                    else:
                        print(
                            "\033[97mSince Endpoint IP doesn't match with the original one, only port will be updated\033[0m"
                        )
                except ValueError:
                    print("\033[91minvalid Endpoint format\033[0m")
            else:
                print("\033[91minvalid Endpoint Address!\033[0m")
        elif choice == "7":
            save_stuff_sit1(private_ip_private, local_ip_private, remote_ip_private)
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwire_client(config_path, new_config)
            break
        elif choice == "0":
            clear()
            wireguardedit_noconjuction_sit_1iran_5kharej()
            break
        else:
            print("Please select a valid option.")


def wireguardudp_sit_kharej_client2():
    local_ip_private = local_ip("/etc/private2.sh")
    remote_ip_private = remote_ip("/etc/private2.sh")
    private_ip_private = private_ip1("/etc/private2.sh")
    config_path = "/etc/wireguard/wireclient.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_sitwire_privatekharej2(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mPrivate[SIT] + Wireguard\033[93m Kharej Client \033[96m[2]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej Client [2]\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mIRAN Server\033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6. \033[93mChange WireGuard Endpoint IP\033[0m")
        print("7. \033[92mSave All Stuff\033[0m")
        print("0. \033[97mback to the related menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Client [2]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec_client(opposite_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "6":
            new_endpoint = input(
                "\033[93mEnter New \033[92mWireGuard Endpoint\033[93m Address:\033[0m "
            )
            if new_endpoint:
                try:
                    endpoint_ip, new_port = new_endpoint.rsplit(":", 1)
                    if endpoint.startswith(endpoint_ip):
                        endpoint = f"{endpoint_ip}:{new_port}"
                    else:
                        print(
                            "\033[97mSince Endpoint IP doesn't match with the original one, only port will be updated\033[0m"
                        )
                except ValueError:
                    print("\033[91minvalid Endpoint format\033[0m")
            else:
                print("\033[91minvalid Endpoint Address!\033[0m")
        elif choice == "7":
            save_stuff_sit2(private_ip_private, local_ip_private, remote_ip_private)
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwire_client(config_path, new_config)
            break
        elif choice == "0":
            clear()
            wireguardedit_noconjuction_sit_1iran_5kharej()
            break
        else:
            print("Please select a valid option.")


def wireguardudp_sit_kharej_client3():
    local_ip_private = local_ip("/etc/private3.sh")
    remote_ip_private = remote_ip("/etc/private3.sh")
    private_ip_private = private_ip1("/etc/private3.sh")
    config_path = "/etc/wireguard/wireclient.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_sitwire_privatekharej3(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mPrivate[SIT] + Wireguard\033[93m Kharej Client \033[96m[3]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej Client [3]\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mIRAN Server\033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6. \033[93mChange WireGuard Endpoint IP\033[0m")
        print("7. \033[92mSave All Stuff\033[0m")
        print("0. \033[97mback to the related menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Client [3]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec_client(opposite_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "6":
            new_endpoint = input(
                "\033[93mEnter New \033[92mWireGuard Endpoint\033[93m Address:\033[0m "
            )
            if new_endpoint:
                try:
                    endpoint_ip, new_port = new_endpoint.rsplit(":", 1)
                    if endpoint.startswith(endpoint_ip):
                        endpoint = f"{endpoint_ip}:{new_port}"
                    else:
                        print(
                            "\033[97mSince Endpoint IP doesn't match with the original one, only port will be updated\033[0m"
                        )
                except ValueError:
                    print("\033[91minvalid Endpoint format\033[0m")
            else:
                print("\033[91minvalid Endpoint Address!\033[0m")
        elif choice == "7":
            save_stuff_sit3(private_ip_private, local_ip_private, remote_ip_private)
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwire_client(config_path, new_config)
            break
        elif choice == "0":
            clear()
            wireguardedit_noconjuction_sit_1iran_5kharej()
            break
        else:
            print("Please select a valid option.")


def wireguardudp_sit_kharej_client4():
    local_ip_private = local_ip("/etc/private4.sh")
    remote_ip_private = remote_ip("/etc/private4.sh")
    private_ip_private = private_ip1("/etc/private4.sh")
    config_path = "/etc/wireguard/wireclient.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_sitwire_privatekharej4(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mPrivate[SIT] + Wireguard\033[93m Kharej Client \033[96m[4]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej Client [4]\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mIRAN Server\033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6. \033[93mChange WireGuard Endpoint IP\033[0m")
        print("7. \033[92mSave All Stuff\033[0m")
        print("0. \033[97mback to the related menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Client [4]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec_client(opposite_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "6":
            new_endpoint = input(
                "\033[93mEnter New \033[92mWireGuard Endpoint\033[93m Address:\033[0m "
            )
            if new_endpoint:
                try:
                    endpoint_ip, new_port = new_endpoint.rsplit(":", 1)
                    if endpoint.startswith(endpoint_ip):
                        endpoint = f"{endpoint_ip}:{new_port}"
                    else:
                        print(
                            "\033[97mSince Endpoint IP doesn't match with the original one, only port will be updated\033[0m"
                        )
                except ValueError:
                    print("\033[91minvalid Endpoint format\033[0m")
            else:
                print("\033[91minvalid Endpoint Address!\033[0m")
        elif choice == "7":
            save_stuff_sit4(private_ip_private, local_ip_private, remote_ip_private)
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwire_client(config_path, new_config)
            break
        elif choice == "0":
            clear()
            wireguardedit_noconjuction_sit_1iran_5kharej()
            break
        else:
            print("Please select a valid option.")


def wireguardudp_sit_kharej_client5():
    local_ip_private = local_ip("/etc/private5.sh")
    remote_ip_private = remote_ip("/etc/private5.sh")
    private_ip_private = private_ip1("/etc/private5.sh")
    config_path = "/etc/wireguard/wireclient.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_sitwire_privatekharej5(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mPrivate[SIT] + Wireguard\033[93m Kharej Client \033[96m[5]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej Client [5]\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mIRAN Server\033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6. \033[93mChange WireGuard Endpoint IP\033[0m")
        print("7. \033[92mSave All Stuff\033[0m")
        print("0. \033[97mback to the related menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Client [5]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec_client(opposite_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "6":
            new_endpoint = input(
                "\033[93mEnter New \033[92mWireGuard Endpoint\033[93m Address:\033[0m "
            )
            if new_endpoint:
                try:
                    endpoint_ip, new_port = new_endpoint.rsplit(":", 1)
                    if endpoint.startswith(endpoint_ip):
                        endpoint = f"{endpoint_ip}:{new_port}"
                    else:
                        print(
                            "\033[97mSince Endpoint IP doesn't match with the original one, only port will be updated\033[0m"
                        )
                except ValueError:
                    print("\033[91minvalid Endpoint format\033[0m")
            else:
                print("\033[91minvalid Endpoint Address!\033[0m")
        elif choice == "7":
            save_stuff_sit5(private_ip_private, local_ip_private, remote_ip_private)
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwire_client(config_path, new_config)
            break
        elif choice == "0":
            clear()
            wireguardedit_noconjuction_sit_1iran_5kharej()
            break
        else:
            print("Please select a valid option.")


def display_stuff_sitwire_privateiran_client1(local_ip, remote_ip, private_ip):
    lines = [
        f"\033[93mTitle:         SIT Configuration\033[0m",
        f"\033[97m──────────────────────────────────────\033[0m",
        f"\033[93mIRAN \033[96m[1] Public IP:         \033[97m{local_ip}\033[0m",
        f"\033[92mKharej Public IP:   \033[97m{remote_ip}\033[0m",
        f"\033[93mSIT Private IP:         \033[97m{private_ip}\033[0m",
    ]
    box_width = 50

    print("\033[93m╭" + "─" * (box_width - 2) + "╮\033[0m")

    for line in lines:
        print(f"\033[93m {line:<{box_width - 4}} \033[0m")

    print("\033[93m╰" + "─" * (box_width - 2) + "╯\033[0m")


def display_stuff_sitwire_privateiran_client2(local_ip, remote_ip, private_ip):
    lines = [
        f"\033[93mTitle:         SIT Configuration\033[0m",
        f"\033[97m──────────────────────────────────────\033[0m",
        f"\033[93mIRAN \033[96m[2] Public IP:         \033[97m{local_ip}\033[0m",
        f"\033[92mKharej Public IP:   \033[97m{remote_ip}\033[0m",
        f"\033[93mSIT Private IP:         \033[97m{private_ip}\033[0m",
    ]
    box_width = 50

    print("\033[93m╭" + "─" * (box_width - 2) + "╮\033[0m")

    for line in lines:
        print(f"\033[93m {line:<{box_width - 4}} \033[0m")

    print("\033[93m╰" + "─" * (box_width - 2) + "╯\033[0m")


def display_stuff_sitwire_privateiran_client3(local_ip, remote_ip, private_ip):
    lines = [
        f"\033[93mTitle:         SIT Configuration\033[0m",
        f"\033[97m──────────────────────────────────────\033[0m",
        f"\033[93mIRAN \033[96m[3] Public IP:         \033[97m{local_ip}\033[0m",
        f"\033[92mKharej Public IP:   \033[97m{remote_ip}\033[0m",
        f"\033[93mSIT Private IP:         \033[97m{private_ip}\033[0m",
    ]
    box_width = 50

    print("\033[93m╭" + "─" * (box_width - 2) + "╮\033[0m")

    for line in lines:
        print(f"\033[93m {line:<{box_width - 4}} \033[0m")

    print("\033[93m╰" + "─" * (box_width - 2) + "╯\033[0m")


def display_stuff_sitwire_privateiran_client4(local_ip, remote_ip, private_ip):
    lines = [
        f"\033[93mTitle:         SIT Configuration\033[0m",
        f"\033[97m──────────────────────────────────────\033[0m",
        f"\033[93mIRAN \033[96m[4] Public IP:         \033[97m{local_ip}\033[0m",
        f"\033[92mKharej Public IP:   \033[97m{remote_ip}\033[0m",
        f"\033[93mSIT Private IP:         \033[97m{private_ip}\033[0m",
    ]
    box_width = 50

    print("\033[93m╭" + "─" * (box_width - 2) + "╮\033[0m")

    for line in lines:
        print(f"\033[93m {line:<{box_width - 4}} \033[0m")

    print("\033[93m╰" + "─" * (box_width - 2) + "╯\033[0m")


def display_stuff_sitwire_privateiran_client5(local_ip, remote_ip, private_ip):
    lines = [
        f"\033[93mTitle:         SIT Configuration\033[0m",
        f"\033[97m──────────────────────────────────────\033[0m",
        f"\033[93mIRAN \033[96m[5] Public IP:         \033[97m{local_ip}\033[0m",
        f"\033[92mKharej Public IP:   \033[97m{remote_ip}\033[0m",
        f"\033[93mSIT Private IP:         \033[97m{private_ip}\033[0m",
    ]
    box_width = 50

    print("\033[93m╭" + "─" * (box_width - 2) + "╮\033[0m")

    for line in lines:
        print(f"\033[93m {line:<{box_width - 4}} \033[0m")

    print("\033[93m╰" + "─" * (box_width - 2) + "╯\033[0m")


def display_stuff_sitwire_privatekharej_server1(local_ip, remote_ip, private_ip):
    lines = [
        f"\033[93mTitle:         SIT Configuration\033[0m",
        f"\033[97m──────────────────────────────────────\033[0m",
        f"\033[92mKharej Public IP:   \033[97m{local_ip}\033[0m",
        f"\033[93mIRAN \033[96m[1]\033[93m Public IP:         \033[97m{remote_ip}\033[0m",
        f"\033[93mSIT Private IP:         \033[97m{private_ip}\033[0m",
    ]
    box_width = 50

    print("\033[93m╭" + "─" * (box_width - 2) + "╮\033[0m")

    for line in lines:
        print(f"\033[93m {line:<{box_width - 4}} \033[0m")

    print("\033[93m╰" + "─" * (box_width - 2) + "╯\033[0m")


def display_stuff_sitwire_privatekharej_server2(local_ip, remote_ip, private_ip):
    lines = [
        f"\033[93mTitle:         SIT Configuration\033[0m",
        f"\033[97m──────────────────────────────────────\033[0m",
        f"\033[92mKharej Public IP:   \033[97m{local_ip}\033[0m",
        f"\033[93mIRAN \033[96m[2]\033[93m Public IP:         \033[97m{remote_ip}\033[0m",
        f"\033[93mSIT Private IP:         \033[97m{private_ip}\033[0m",
    ]
    box_width = 50

    print("\033[93m╭" + "─" * (box_width - 2) + "╮\033[0m")

    for line in lines:
        print(f"\033[93m {line:<{box_width - 4}} \033[0m")

    print("\033[93m╰" + "─" * (box_width - 2) + "╯\033[0m")


def display_stuff_sitwire_privatekharej_server3(local_ip, remote_ip, private_ip):
    lines = [
        f"\033[93mTitle:         SIT Configuration\033[0m",
        f"\033[97m──────────────────────────────────────\033[0m",
        f"\033[92mKharej Public IP:   \033[97m{local_ip}\033[0m",
        f"\033[93mIRAN \033[96m[3]\033[93m Public IP:         \033[97m{remote_ip}\033[0m",
        f"\033[93mSIT Private IP:         \033[97m{private_ip}\033[0m",
    ]
    box_width = 50

    print("\033[93m╭" + "─" * (box_width - 2) + "╮\033[0m")

    for line in lines:
        print(f"\033[93m {line:<{box_width - 4}} \033[0m")

    print("\033[93m╰" + "─" * (box_width - 2) + "╯\033[0m")


def display_stuff_sitwire_privatekharej_server4(local_ip, remote_ip, private_ip):
    lines = [
        f"\033[93mTitle:         SIT Configuration\033[0m",
        f"\033[97m──────────────────────────────────────\033[0m",
        f"\033[92mKharej Public IP:   \033[97m{local_ip}\033[0m",
        f"\033[93mIRAN \033[96m[4]\033[93m Public IP:         \033[97m{remote_ip}\033[0m",
        f"\033[93mSIT Private IP:         \033[97m{private_ip}\033[0m",
    ]
    box_width = 50

    print("\033[93m╭" + "─" * (box_width - 2) + "╮\033[0m")

    for line in lines:
        print(f"\033[93m {line:<{box_width - 4}} \033[0m")

    print("\033[93m╰" + "─" * (box_width - 2) + "╯\033[0m")


def display_stuff_sitwire_privatekharej_server5(local_ip, remote_ip, private_ip):
    lines = [
        f"\033[93mTitle:         SIT Configuration\033[0m",
        f"\033[97m──────────────────────────────────────\033[0m",
        f"\033[92mKharej Public IP:   \033[97m{local_ip}\033[0m",
        f"\033[93mIRAN \033[96m[5]\033[93m Public IP:         \033[97m{remote_ip}\033[0m",
        f"\033[93mSIT Private IP:         \033[97m{private_ip}\033[0m",
    ]
    box_width = 50

    print("\033[93m╭" + "─" * (box_width - 2) + "╮\033[0m")

    for line in lines:
        print(f"\033[93m {line:<{box_width - 4}} \033[0m")

    print("\033[93m╰" + "─" * (box_width - 2) + "╯\033[0m")


def wireguardedit_sit_kharejconfig_1():
    local_ip_private = local_ip("/etc/private1.sh")
    remote_ip_private = remote_ip("/etc/private1.sh")
    private_ip_private = private_ip1("/etc/private1.sh")
    config_path = "/etc/wireguard/wireserver1.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_sitwire_privatekharej_server1(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mPrivate[SIT] + Wireguard\033[93m Kharej Server \033[96mConfig [1]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej Server\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mIRAN Client [1] \033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6. \033[93mChange WireGuard Endpoint IP\033[0m")
        print("7. \033[92mSave All Stuff\033[0m")
        print("0. \033[97mback to the related menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Client [1]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec1(opposite_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "6":
            new_endpoint = input(
                "\033[93mEnter New \033[92mWireGuard Endpoint\033[93m Address:\033[0m "
            )
            if new_endpoint:
                try:
                    endpoint_ip, new_port = new_endpoint.rsplit(":", 1)
                    if endpoint.startswith(endpoint_ip):
                        endpoint = f"{endpoint_ip}:{new_port}"
                    else:
                        print(
                            "\033[97mSince Endpoint IP doesn't match with the original one, only port will be updated\033[0m"
                        )
                except ValueError:
                    print("\033[91minvalid Endpoint format\033[0m")
            else:
                print("\033[91minvalid Endpoint Address!\033[0m")
        elif choice == "7":
            save_stuff_sit1(private_ip_private, local_ip_private, remote_ip_private)
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwire1(config_path, new_config)
            break
        elif choice == "0":
            clear()
            wireguardedit_noconjuction_sit_kharej1_5iran()
            break
        else:
            print("Please select a valid option.")


def wireguardedit_sit_kharejconfig_2():
    local_ip_private = local_ip("/etc/private2.sh")
    remote_ip_private = remote_ip("/etc/private2.sh")
    private_ip_private = private_ip1("/etc/private2.sh")
    config_path = "/etc/wireguard/wireserver2.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_sitwire_privatekharej_server2(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mPrivate[SIT] + Wireguard\033[93m Kharej Server \033[96mConfig [2]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej Server\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mIRAN Client [2] \033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6. \033[93mChange WireGuard Endpoint IP\033[0m")
        print("7. \033[92mSave All Stuff\033[0m")
        print("0. \033[97mback to the related menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Client [2]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec2(opposite_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "6":
            new_endpoint = input(
                "\033[93mEnter New \033[92mWireGuard Endpoint\033[93m Address:\033[0m "
            )
            if new_endpoint:
                try:
                    endpoint_ip, new_port = new_endpoint.rsplit(":", 1)
                    if endpoint.startswith(endpoint_ip):
                        endpoint = f"{endpoint_ip}:{new_port}"
                    else:
                        print(
                            "\033[97mSince Endpoint IP doesn't match with the original one, only port will be updated\033[0m"
                        )
                except ValueError:
                    print("\033[91minvalid Endpoint format\033[0m")
            else:
                print("\033[91minvalid Endpoint Address!\033[0m")
        elif choice == "7":
            save_stuff_sit2(private_ip_private, local_ip_private, remote_ip_private)
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwire2(config_path, new_config)
            break
        elif choice == "0":
            clear()
            wireguardedit_noconjuction_sit_kharej1_5iran()
            break
        else:
            print("Please select a valid option.")


def wireguardedit_sit_kharejconfig_3():
    local_ip_private = local_ip("/etc/private3.sh")
    remote_ip_private = remote_ip("/etc/private3.sh")
    private_ip_private = private_ip1("/etc/private3.sh")
    config_path = "/etc/wireguard/wireserver3.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_sitwire_privatekharej_server3(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mPrivate[SIT] + Wireguard\033[93m Kharej Server \033[96mConfig [3]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej Server\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mIRAN Client [3] \033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6. \033[93mChange WireGuard Endpoint IP\033[0m")
        print("7. \033[92mSave All Stuff\033[0m")
        print("0. \033[97mback to the related menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Client [3]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec3(opposite_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "6":
            new_endpoint = input(
                "\033[93mEnter New \033[92mWireGuard Endpoint\033[93m Address:\033[0m "
            )
            if new_endpoint:
                try:
                    endpoint_ip, new_port = new_endpoint.rsplit(":", 1)
                    if endpoint.startswith(endpoint_ip):
                        endpoint = f"{endpoint_ip}:{new_port}"
                    else:
                        print(
                            "\033[97mSince Endpoint IP doesn't match with the original one, only port will be updated\033[0m"
                        )
                except ValueError:
                    print("\033[91minvalid Endpoint format\033[0m")
            else:
                print("\033[91minvalid Endpoint Address!\033[0m")
        elif choice == "7":
            save_stuff_sit3(private_ip_private, local_ip_private, remote_ip_private)
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwire3(config_path, new_config)
            break
        elif choice == "0":
            clear()
            wireguardedit_noconjuction_sit_kharej1_5iran()
            break
        else:
            print("Please select a valid option.")


def wireguardedit_sit_kharejconfig_4():
    local_ip_private = local_ip("/etc/private4.sh")
    remote_ip_private = remote_ip("/etc/private4.sh")
    private_ip_private = private_ip1("/etc/private4.sh")
    config_path = "/etc/wireguard/wireserver4.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_sitwire_privatekharej_server4(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mPrivate[SIT] + Wireguard\033[93m Kharej Server \033[96mConfig [4]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej Server\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mIRAN Client [4] \033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6. \033[93mChange WireGuard Endpoint IP\033[0m")
        print("7. \033[92mSave All Stuff\033[0m")
        print("0. \033[97mback to the related menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Client [4]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec4(opposite_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "6":
            new_endpoint = input(
                "\033[93mEnter New \033[92mWireGuard Endpoint\033[93m Address:\033[0m "
            )
            if new_endpoint:
                try:
                    endpoint_ip, new_port = new_endpoint.rsplit(":", 1)
                    if endpoint.startswith(endpoint_ip):
                        endpoint = f"{endpoint_ip}:{new_port}"
                    else:
                        print(
                            "\033[97mSince Endpoint IP doesn't match with the original one, only port will be updated\033[0m"
                        )
                except ValueError:
                    print("\033[91minvalid Endpoint format\033[0m")
            else:
                print("\033[91minvalid Endpoint Address!\033[0m")
        elif choice == "7":
            save_stuff_sit4(private_ip_private, local_ip_private, remote_ip_private)
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwire4(config_path, new_config)
            break
        elif choice == "0":
            clear()
            wireguardedit_noconjuction_sit_1iran_5kharej()
            break
        else:
            print("Please select a valid option.")


def wireguardedit_sit_kharejconfig_5():
    local_ip_private = local_ip("/etc/private5.sh")
    remote_ip_private = remote_ip("/etc/private5.sh")
    private_ip_private = private_ip1("/etc/private5.sh")
    config_path = "/etc/wireguard/wireserver5.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_sitwire_privatekharej_server5(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mPrivate[SIT] + Wireguard\033[93m Kharej Server \033[96mConfig [5]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej Server\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mIRAN Client [5] \033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6. \033[93mChange WireGuard Endpoint IP\033[0m")
        print("7. \033[92mSave All Stuff\033[0m")
        print("0. \033[97mback to the related menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Client [5]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec5(opposite_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "6":
            new_endpoint = input(
                "\033[93mEnter New \033[92mWireGuard Endpoint\033[93m Address:\033[0m "
            )
            if new_endpoint:
                try:
                    endpoint_ip, new_port = new_endpoint.rsplit(":", 1)
                    if endpoint.startswith(endpoint_ip):
                        endpoint = f"{endpoint_ip}:{new_port}"
                    else:
                        print(
                            "\033[97mSince Endpoint IP doesn't match with the original one, only port will be updated\033[0m"
                        )
                except ValueError:
                    print("\033[91minvalid Endpoint format\033[0m")
            else:
                print("\033[91minvalid Endpoint Address!\033[0m")
        elif choice == "7":
            save_stuff_sit5(private_ip_private, local_ip_private, remote_ip_private)
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwire5(config_path, new_config)
            break
        elif choice == "0":
            clear()
            wireguardedit_noconjuction_sit_kharej1_5iran()
            break
        else:
            print("Please select a valid option.")

def wireguardudp_sit_iran_client1():
    local_ip_private = local_ip("/etc/private1.sh")
    remote_ip_private = remote_ip("/etc/private1.sh")
    private_ip_private = private_ip1("/etc/private1.sh")
    config_path = "/etc/wireguard/wireclient.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_sitwire_privateiran_client1(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mPrivate[SIT] + Wireguard\033[93m IRAN Client \033[96m[1]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN Client [1]\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mKharej Server\033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6. \033[93mChange WireGuard Endpoint IP\033[0m")
        print("7. \033[92mSave All Stuff\033[0m")
        print("0. \033[97mback to the related menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Client [1]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec_client(opposite_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "6":
            new_endpoint = input(
                "\033[93mEnter New \033[92mWireGuard Endpoint\033[93m Address:\033[0m "
            )
            if new_endpoint:
                try:
                    endpoint_ip, new_port = new_endpoint.rsplit(":", 1)
                    if endpoint.startswith(endpoint_ip):
                        endpoint = f"{endpoint_ip}:{new_port}"
                    else:
                        print(
                            "\033[97mSince Endpoint IP doesn't match with the original one, only port will be updated\033[0m"
                        )
                except ValueError:
                    print("\033[91minvalid Endpoint format\033[0m")
            else:
                print("\033[91minvalid Endpoint Address!\033[0m")
        elif choice == "7":
            save_stuff_sit1(private_ip_private, local_ip_private, remote_ip_private)
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwire_client(config_path, new_config)
            break
        elif choice == "0":
            clear()
            wireguardedit_noconjuction_sit_kharej1_5iran()
            break
        else:
            print("Please select a valid option.")


def wireguardudp_sit_iran_client2():
    local_ip_private = local_ip("/etc/private2.sh")
    remote_ip_private = remote_ip("/etc/private2.sh")
    private_ip_private = private_ip1("/etc/private2.sh")
    config_path = "/etc/wireguard/wireclient.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_sitwire_privateiran_client2(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mPrivate[SIT] + Wireguard\033[93m IRAN Client \033[96m[2]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN Client [2]\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mKharej Server\033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6. \033[93mChange WireGuard Endpoint IP\033[0m")
        print("7. \033[92mSave All Stuff\033[0m")
        print("0. \033[97mback to the related menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Client [2]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec_client(opposite_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "6":
            new_endpoint = input(
                "\033[93mEnter New \033[92mWireGuard Endpoint\033[93m Address:\033[0m "
            )
            if new_endpoint:
                try:
                    endpoint_ip, new_port = new_endpoint.rsplit(":", 1)
                    if endpoint.startswith(endpoint_ip):
                        endpoint = f"{endpoint_ip}:{new_port}"
                    else:
                        print(
                            "\033[97mSince Endpoint IP doesn't match with the original one, only port will be updated\033[0m"
                        )
                except ValueError:
                    print("\033[91minvalid Endpoint format\033[0m")
            else:
                print("\033[91minvalid Endpoint Address!\033[0m")
        elif choice == "7":
            save_stuff_sit2(private_ip_private, local_ip_private, remote_ip_private)
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwire_client(config_path, new_config)
            break
        elif choice == "0":
            clear()
            wireguardedit_noconjuction_sit_kharej1_5iran()
            break
        else:
            print("Please select a valid option.")


def wireguardudp_sit_iran_client3():
    local_ip_private = local_ip("/etc/private3.sh")
    remote_ip_private = remote_ip("/etc/private3.sh")
    private_ip_private = private_ip1("/etc/private3.sh")
    config_path = "/etc/wireguard/wireclient.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_sitwire_privateiran_client3(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mPrivate[SIT] + Wireguard\033[93m IRAN Client \033[96m[3]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN Client [3]\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mKharej Server\033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6. \033[93mChange WireGuard Endpoint IP\033[0m")
        print("7. \033[92mSave All Stuff\033[0m")
        print("0. \033[97mback to the related menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Client [3]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec_client(opposite_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "6":
            new_endpoint = input(
                "\033[93mEnter New \033[92mWireGuard Endpoint\033[93m Address:\033[0m "
            )
            if new_endpoint:
                try:
                    endpoint_ip, new_port = new_endpoint.rsplit(":", 1)
                    if endpoint.startswith(endpoint_ip):
                        endpoint = f"{endpoint_ip}:{new_port}"
                    else:
                        print(
                            "\033[97mSince Endpoint IP doesn't match with the original one, only port will be updated\033[0m"
                        )
                except ValueError:
                    print("\033[91minvalid Endpoint format\033[0m")
            else:
                print("\033[91minvalid Endpoint Address!\033[0m")
        elif choice == "7":
            save_stuff_sit3(private_ip_private, local_ip_private, remote_ip_private)
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwire_client(config_path, new_config)
            break
        elif choice == "0":
            clear()
            wireguardedit_noconjuction_sit_kharej1_5iran()
            break
        else:
            print("Please select a valid option.")


def wireguardudp_sit_iran_client4():
    local_ip_private = local_ip("/etc/private4.sh")
    remote_ip_private = remote_ip("/etc/private4.sh")
    private_ip_private = private_ip1("/etc/private4.sh")
    config_path = "/etc/wireguard/wireclient.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_sitwire_privateiran_client4(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mPrivate[SIT] + Wireguard\033[93m IRAN Client \033[96m[4]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN Client [4]\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mKharej Server\033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6. \033[93mChange WireGuard Endpoint IP\033[0m")
        print("7. \033[92mSave All Stuff\033[0m")
        print("0. \033[97mback to the related menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Client [4]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec_client(opposite_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "6":
            new_endpoint = input(
                "\033[93mEnter New \033[92mWireGuard Endpoint\033[93m Address:\033[0m "
            )
            if new_endpoint:
                try:
                    endpoint_ip, new_port = new_endpoint.rsplit(":", 1)
                    if endpoint.startswith(endpoint_ip):
                        endpoint = f"{endpoint_ip}:{new_port}"
                    else:
                        print(
                            "\033[97mSince Endpoint IP doesn't match with the original one, only port will be updated\033[0m"
                        )
                except ValueError:
                    print("\033[91minvalid Endpoint format\033[0m")
            else:
                print("\033[91minvalid Endpoint Address!\033[0m")
        elif choice == "7":
            save_stuff_sit4(private_ip_private, local_ip_private, remote_ip_private)
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwire_client(config_path, new_config)
            break
        elif choice == "0":
            clear()
            wireguardedit_noconjuction_sit_kharej1_5iran()
            break
        else:
            print("Please select a valid option.")


def wireguardudp_sit_iran_client5():
    local_ip_private = local_ip("/etc/private5.sh")
    remote_ip_private = remote_ip("/etc/private5.sh")
    private_ip_private = private_ip1("/etc/private5.sh")
    config_path = "/etc/wireguard/wireclient.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_sitwire_privateiran_client5(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mPrivate[SIT] + Wireguard\033[93m IRAN Client \033[96m[5]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN Client [5]\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mKharej Server\033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6. \033[93mChange WireGuard Endpoint IP\033[0m")
        print("7. \033[92mSave All Stuff\033[0m")
        print("0. \033[97mback to the related menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Client [5]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec_client(opposite_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "6":
            new_endpoint = input(
                "\033[93mEnter New \033[92mWireGuard Endpoint\033[93m Address:\033[0m "
            )
            if new_endpoint:
                try:
                    endpoint_ip, new_port = new_endpoint.rsplit(":", 1)
                    if endpoint.startswith(endpoint_ip):
                        endpoint = f"{endpoint_ip}:{new_port}"
                    else:
                        print(
                            "\033[97mSince Endpoint IP doesn't match with the original one, only port will be updated\033[0m"
                        )
                except ValueError:
                    print("\033[91minvalid Endpoint format\033[0m")
            else:
                print("\033[91minvalid Endpoint Address!\033[0m")
        elif choice == "7":
            save_stuff_sit5(private_ip_private, local_ip_private, remote_ip_private)
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwire_client(config_path, new_config)
            break
        elif choice == "0":
            clear()
            wireguardedit_noconjuction_sit_kharej1_5iran()
            break
        else:
            print("Please select a valid option.")


# ipsec
def wireguardeditserver_sec_sit_mnu():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print("\033[92m(   ) \033[93mWireguard + SIT + IPSEC \033[93m Edit Menu\033[0m")
    print(
        '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
    )
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print(
        "1. \033[92mWireguard + SIT + IPSEC - [1]Kharej Server [5]IRAN Clients\033[0m"
    )
    print(
        "2. \033[93mWireguard + SIT + IPSEC - [1]IRAN   Server [5]Kharej Clients\033[0m"
    )
    print("\033[93m───────────────────────────────────────\033[0m")
    print("0.\033[97mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")
    while True:
        server_type = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if server_type == "1":
            wireguardedit_noconjuction_sitsec_kharej1_5iran()
            break
        elif server_type == "2":
            wireguardedit_noconjuction_sitsec_1iran_5kharej()
            break
        elif server_type == "0":
            os.system("clear")
            wireguardsiteditserver_mnu()
            break
        else:
            print("Invalid choice.")


def wireguardedit_noconjuction_sitsec_kharej1_5iran():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print(
        "\033[92m(   ) \033[93mWireguard + SIT + IPSEC \033[92m[1]Kharej Server\033[96m [5]IRAN Client\033[93m Edit Menu\033[0m"
    )
    print(
        '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
    )
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[92mIRAN Client [1] Config\033[0m")
    print("2. \033[92mIRAN Client [2] Config\033[0m")
    print("3. \033[92mIRAN Client [3] Config\033[0m")
    print("4. \033[93mIRAN Client [4] Config\033[0m")
    print("5. \033[92mIRAN Client [5] Config\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    print("6. \033[96mKharej Server Config\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    print("0.\033[97mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")
    while True:
        server_type = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if server_type == "1":
            wireguardudp_sitsec_iran_client1()
            break
        elif server_type == "2":
            wireguardudp_sitsec_iran_client2()
            break
        elif server_type == "3":
            wireguardudp_sitsec_iran_client3()
            break
        elif server_type == "4":
            wireguardudp_sitsec_iran_client4()
            break
        elif server_type == "5":
            wireguardudp_sitsec_iran_client5()
            break
        elif server_type == "6":
            wireguardudpedit_sitsec_kharej_server()
            break
        elif server_type == "0":
            os.system("clear")
            wireguardeditserver_sec_sit_mnu()
            break
        else:
            print("Invalid choice.")


def wireguardudpedit_sitsec_kharej_server():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print(
        "\033[92m(   ) \033[93mWireguard + SIT + IPSEC \033[92m[1]Kharej Server\033[96m [5]IRAN Client\033[93m Edit Menu\033[0m"
    )
    print(
        '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
    )
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[92mKharej Server Config [1] \033[0m")
    print("2. \033[92mKharej Server Config [2]\033[0m")
    print("3. \033[93mKharej Server Config [3]\033[0m")
    print("4. \033[92mKharej Server Config [4]\033[0m")
    print("5. \033[92mKharej Server Config [5]\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    print("0.\033[97mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")
    while True:
        server_type = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if server_type == "1":
            wireguardedit_sitsec_kharejconfig_1()
            break
        elif server_type == "2":
            wireguardedit_sitsec_kharejconfig_2()
            break
        elif server_type == "3":
            wireguardedit_sitsec_kharejconfig_3()
            break
        elif server_type == "4":
            wireguardedit_sitsec_kharejconfig_4()
            break
        elif server_type == "5":
            wireguardedit_sitsec_kharejconfig_5()
            break
        elif server_type == "0":
            os.system("clear")
            wireguardedit_noconjuction_sitsec_kharej1_5iran()
            break
        else:
            print("Invalid choice.")


def wireguardedit_noconjuction_sitsec_1iran_5kharej():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print(
        "\033[92m(   ) \033[93mWireguard + SIT + IPSEC \033[92m[1]IRAN Server\033[96m [5]Kharej Client\033[93m Edit Menu\033[0m"
    )
    print(
        '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
    )
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[92mKharej Client [1] Config\033[0m")
    print("2. \033[92mKharej Client [2] Config\033[0m")
    print("3. \033[92mKharej Client [3] Config\033[0m")
    print("4. \033[93mKharej Client [4] Config\033[0m")
    print("5. \033[92mKharej Client [5] Config\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    print("6. \033[96mIRAN Server Config\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    print("0.\033[97mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")
    while True:
        server_type = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if server_type == "1":
            wireguardudp_sitsec_kharej_client1()
            break
        elif server_type == "2":
            wireguardudp_sitsec_kharej_client2()
            break
        elif server_type == "3":
            wireguardudp_sitsec_kharej_client3()
            break
        elif server_type == "4":
            wireguardudp_sitsec_kharej_client4()
            break
        elif server_type == "5":
            wireguardudp_sitsec_kharej_client5()
            break
        elif server_type == "6":
            wireguardudpedit_sitsec_iran_server()
            break
        elif server_type == "0":
            os.system("clear")
            wireguardeditserver_sec_sit_mnu()
            break
        else:
            print("Invalid choice.")


def wireguardudpedit_sitsec_iran_server():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print(
        "\033[92m(   ) \033[93mWireguard + SIT + IPSEC \033[92m[1]IRAN Server\033[96m [5]Kharej Client\033[93m Edit Menu\033[0m"
    )
    print(
        '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
    )
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[92mIRAN Server Config [1] \033[0m")
    print("2. \033[92mIRAN Server Config [2]\033[0m")
    print("3. \033[93mIRAN Server Config [3]\033[0m")
    print("4. \033[92mIRAN Server Config [4]\033[0m")
    print("5. \033[92mIRAN Server Config [5]\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    print("0.\033[97mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")
    while True:
        server_type = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if server_type == "1":
            wireguardedit_sitsec_iranconfig_1()
            break
        elif server_type == "2":
            wireguardedit_sitsec_iranconfig_2()
            break
        elif server_type == "3":
            wireguardedit_sitsec_iranconfig_3()
            break
        elif server_type == "4":
            wireguardedit_sitsec_iranconfig_4()
            break
        elif server_type == "5":
            wireguardedit_sitsec_iranconfig_5()
            break
        elif server_type == "0":
            os.system("clear")
            wireguardedit_noconjuction_sitsec_1iran_5kharej()
            break
        else:
            print("Invalid choice.")


def update_ipsec_conf_wireguard_server1(name, new_private_ip):
    try:
        with open(name, "r") as f:
            content = f.readlines()

        start_idx, end_idx = None, None
        for i, line in enumerate(content):
            if line.strip() == "conn wireguard_server1":
                start_idx = i
            elif start_idx is not None and line.strip().startswith("conn "):
                end_idx = i
                break

        if start_idx is None:
            print("\033[91m'conn wireguard_server1' section not found\033[0m")
            return

        if end_idx is None:
            end_idx = len(content)

        section = content[start_idx:end_idx]

        ip_type = (
            "ipv6"
            if isinstance(ipaddress.ip_address(new_private_ip), ipaddress.IPv6Address)
            else "ipv4"
        )

        if ip_type == "ipv6":
            subnet = "/64"
        else:
            subnet = "/32"

        ip_parts = (
            new_private_ip.split(".")
            if ip_type == "ipv4"
            else new_private_ip.split(":")
        )
        if new_private_ip.endswith(".2") or new_private_ip.endswith(":2"):
            ip_parts[-1] = "1"
        else:
            ip_parts[-1] = "2"
        counterpart_ip = ".".join(ip_parts) if ip_type == "ipv4" else ":".join(ip_parts)

        new_section = []
        for line in section:
            line = re.sub(
                r"leftsubnet=\S+", f"leftsubnet={new_private_ip}{subnet}", line
            )
            line = re.sub(r"leftid=\S+", f"leftid={new_private_ip}", line)
            line = re.sub(r"right=\S+", f"right={counterpart_ip}", line)
            line = re.sub(
                r"rightsubnet=\S+", f"rightsubnet={counterpart_ip}{subnet}", line
            )
            new_section.append(line)

        new_content = content[:start_idx] + new_section + content[end_idx:]

        with open(name, "w") as f:
            f.writelines(new_content)

        print(f"\033[92m'conn wireguard_server1' section updated successfully\033[0m")
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def update_ipsec_conf_wireguard_server2(name, new_private_ip):
    try:
        with open(name, "r") as f:
            content = f.readlines()

        start_idx, end_idx = None, None
        for i, line in enumerate(content):
            if line.strip() == "conn wireguard_server2":
                start_idx = i
            elif start_idx is not None and line.strip().startswith("conn "):
                end_idx = i
                break

        if start_idx is None:
            print("\033[91m'conn wireguard_server2' section not found\033[0m")
            return

        if end_idx is None:
            end_idx = len(content)

        section = content[start_idx:end_idx]

        ip_type = (
            "ipv6"
            if isinstance(ipaddress.ip_address(new_private_ip), ipaddress.IPv6Address)
            else "ipv4"
        )

        if ip_type == "ipv6":
            subnet = "/64"
        else:
            subnet = "/32"

        ip_parts = (
            new_private_ip.split(".")
            if ip_type == "ipv4"
            else new_private_ip.split(":")
        )
        if new_private_ip.endswith(".2") or new_private_ip.endswith(":2"):
            ip_parts[-1] = "1"
        else:
            ip_parts[-1] = "2"
        counterpart_ip = ".".join(ip_parts) if ip_type == "ipv4" else ":".join(ip_parts)

        new_section = []
        for line in section:
            line = re.sub(
                r"leftsubnet=\S+", f"leftsubnet={new_private_ip}{subnet}", line
            )
            line = re.sub(r"leftid=\S+", f"leftid={new_private_ip}", line)
            line = re.sub(r"right=\S+", f"right={counterpart_ip}", line)
            line = re.sub(
                r"rightsubnet=\S+", f"rightsubnet={counterpart_ip}{subnet}", line
            )
            new_section.append(line)

        new_content = content[:start_idx] + new_section + content[end_idx:]

        with open(name, "w") as f:
            f.writelines(new_content)

        print(f"\033[92m'conn wireguard_server2' section updated successfully\033[0m")
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def update_ipsec_conf_wireguard_server3(name, new_private_ip):
    try:
        with open(name, "r") as f:
            content = f.readlines()

        start_idx, end_idx = None, None
        for i, line in enumerate(content):
            if line.strip() == "conn wireguard_server3":
                start_idx = i
            elif start_idx is not None and line.strip().startswith("conn "):
                end_idx = i
                break

        if start_idx is None:
            print("\033[91m'conn wireguard_server3' section not found\033[0m")
            return

        if end_idx is None:
            end_idx = len(content)

        section = content[start_idx:end_idx]

        ip_type = (
            "ipv6"
            if isinstance(ipaddress.ip_address(new_private_ip), ipaddress.IPv6Address)
            else "ipv4"
        )

        if ip_type == "ipv6":
            subnet = "/64"
        else:
            subnet = "/32"

        ip_parts = (
            new_private_ip.split(".")
            if ip_type == "ipv4"
            else new_private_ip.split(":")
        )
        if new_private_ip.endswith(".2") or new_private_ip.endswith(":2"):
            ip_parts[-1] = "1"
        else:
            ip_parts[-1] = "2"
        counterpart_ip = ".".join(ip_parts) if ip_type == "ipv4" else ":".join(ip_parts)

        new_section = []
        for line in section:
            line = re.sub(
                r"leftsubnet=\S+", f"leftsubnet={new_private_ip}{subnet}", line
            )
            line = re.sub(r"leftid=\S+", f"leftid={new_private_ip}", line)
            line = re.sub(r"right=\S+", f"right={counterpart_ip}", line)
            line = re.sub(
                r"rightsubnet=\S+", f"rightsubnet={counterpart_ip}{subnet}", line
            )
            new_section.append(line)

        new_content = content[:start_idx] + new_section + content[end_idx:]

        with open(name, "w") as f:
            f.writelines(new_content)

        print(f"\033[92m'conn wireguard_server3' section updated successfully\033[0m")
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def update_ipsec_conf_wireguard_server4(name, new_private_ip):
    try:
        with open(name, "r") as f:
            content = f.readlines()

        start_idx, end_idx = None, None
        for i, line in enumerate(content):
            if line.strip() == "conn wireguard_server4":
                start_idx = i
            elif start_idx is not None and line.strip().startswith("conn "):
                end_idx = i
                break

        if start_idx is None:
            print("\033[91m'conn wireguard_server4' section not found\033[0m")
            return

        if end_idx is None:
            end_idx = len(content)

        section = content[start_idx:end_idx]

        ip_type = (
            "ipv6"
            if isinstance(ipaddress.ip_address(new_private_ip), ipaddress.IPv6Address)
            else "ipv4"
        )

        if ip_type == "ipv6":
            subnet = "/64"
        else:
            subnet = "/32"

        ip_parts = (
            new_private_ip.split(".")
            if ip_type == "ipv4"
            else new_private_ip.split(":")
        )
        if new_private_ip.endswith(".2") or new_private_ip.endswith(":2"):
            ip_parts[-1] = "1"
        else:
            ip_parts[-1] = "2"
        counterpart_ip = ".".join(ip_parts) if ip_type == "ipv4" else ":".join(ip_parts)

        new_section = []
        for line in section:
            line = re.sub(
                r"leftsubnet=\S+", f"leftsubnet={new_private_ip}{subnet}", line
            )
            line = re.sub(r"leftid=\S+", f"leftid={new_private_ip}", line)
            line = re.sub(r"right=\S+", f"right={counterpart_ip}", line)
            line = re.sub(
                r"rightsubnet=\S+", f"rightsubnet={counterpart_ip}{subnet}", line
            )
            new_section.append(line)

        new_content = content[:start_idx] + new_section + content[end_idx:]

        with open(name, "w") as f:
            f.writelines(new_content)

        print(f"\033[92m'conn wireguard_server4' section updated successfully\033[0m")
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def update_ipsec_conf_wireguard_server5(name, new_private_ip):
    try:
        with open(name, "r") as f:
            content = f.readlines()

        start_idx, end_idx = None, None
        for i, line in enumerate(content):
            if line.strip() == "conn wireguard_server5":
                start_idx = i
            elif start_idx is not None and line.strip().startswith("conn "):
                end_idx = i
                break

        if start_idx is None:
            print("\033[91m'conn wireguard_server5' section not found\033[0m")
            return

        if end_idx is None:
            end_idx = len(content)

        section = content[start_idx:end_idx]

        ip_type = (
            "ipv6"
            if isinstance(ipaddress.ip_address(new_private_ip), ipaddress.IPv6Address)
            else "ipv4"
        )

        if ip_type == "ipv6":
            subnet = "/64"
        else:
            subnet = "/32"

        ip_parts = (
            new_private_ip.split(".")
            if ip_type == "ipv4"
            else new_private_ip.split(":")
        )
        if new_private_ip.endswith(".2") or new_private_ip.endswith(":2"):
            ip_parts[-1] = "1"
        else:
            ip_parts[-1] = "2"
        counterpart_ip = ".".join(ip_parts) if ip_type == "ipv4" else ":".join(ip_parts)

        new_section = []
        for line in section:
            line = re.sub(
                r"leftsubnet=\S+", f"leftsubnet={new_private_ip}{subnet}", line
            )
            line = re.sub(r"leftid=\S+", f"leftid={new_private_ip}", line)
            line = re.sub(r"right=\S+", f"right={counterpart_ip}", line)
            line = re.sub(
                r"rightsubnet=\S+", f"rightsubnet={counterpart_ip}{subnet}", line
            )
            new_section.append(line)

        new_content = content[:start_idx] + new_section + content[end_idx:]

        with open(name, "w") as f:
            f.writelines(new_content)

        print(f"\033[92m'conn wireguard_server5' section updated successfully\033[0m")
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def save_wireguardconfig_sitwire1sec(file_path, new_config):
    try:
        with open(file_path, "r") as f:
            config = f.read()

        listen_port_pattern = r"ListenPort\s*=\s*\d+"
        endpoint_pattern = r"Endpoint\s*=\s*([^\s]+):\d+"
        address_pattern = r"Address\s*=\s*[^\s]+"
        allowed_ips_pattern = r"AllowedIPs\s*=\s*[^\s]+"

        new_config_content = re.sub(
            listen_port_pattern, f'ListenPort = {new_config["ListenPort"]}', config
        )
        new_config_content = re.sub(
            address_pattern, f'Address = {new_config["Address"]}', new_config_content
        )
        new_config_content = re.sub(
            allowed_ips_pattern,
            f'AllowedIPs = {new_config["AllowedIPs"]}',
            new_config_content,
        )

        def replace_endpoint(match):
            endpoint_ip = new_config["EndpointIP"]
            return f'Endpoint = {endpoint_ip}:{new_config["ListenPort"]}'

        new_config_content = re.sub(
            endpoint_pattern, replace_endpoint, new_config_content
        )

        with open(file_path, "w") as f:
            f.write(new_config_content)

        subprocess.run(["systemctl", "daemon-reload"], check=True)

        services_to_restart = [
            "strong-azumi1",
            "wireguardping_1.service",
        ]

        wg_quick_interface = "/etc/wireguard/wireserver1.conf"
        wg_quick_down = subprocess.run(
            ["wg-quick", "down", wg_quick_interface],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
        )

        if wg_quick_down.returncode == 0:
            subprocess.run(["wg-quick", "up", wg_quick_interface], check=True)
            display_checkmark(
                f"\033[92mInterface {wg_quick_interface} brought down and up successfully!\033[0m"
            )
        else:
            print(
                f"\033[93mFailed to bring down interface {wg_quick_interface}.\033[0m"
            )

        for service_name in services_to_restart:
            service_status = subprocess.run(
                ["systemctl", "is-active", service_name],
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
            )

            if service_status.returncode == 0:
                subprocess.run(["systemctl", "restart", service_name], check=True)
                display_checkmark(
                    f"\033[92mService {service_name} restarted successfully!\033[0m"
                )
            else:
                print(
                    f"\033[93mService {service_name} doesn't exist or is inactive.\033[0m"
                )

        display_checkmark(f"\033[92mConfiguration updated successfully!\033[0m")

    except FileNotFoundError:
        print(f"\033[91mfile {file_path} not found.\033[0m")
    except subprocess.CalledProcessError as e:
        print(f"\033[91merror in managing services: {e}\033[0m")
    except Exception as e:
        print(f"\033[91merror in saving the config: {e}\033[0m")


def save_wireguardconfig_sitwire2sec(file_path, new_config):
    try:
        with open(file_path, "r") as f:
            config = f.read()

        listen_port_pattern = r"ListenPort\s*=\s*\d+"
        endpoint_pattern = r"Endpoint\s*=\s*([^\s]+):\d+"
        address_pattern = r"Address\s*=\s*[^\s]+"
        allowed_ips_pattern = r"AllowedIPs\s*=\s*[^\s]+"

        new_config_content = re.sub(
            listen_port_pattern, f'ListenPort = {new_config["ListenPort"]}', config
        )
        new_config_content = re.sub(
            address_pattern, f'Address = {new_config["Address"]}', new_config_content
        )
        new_config_content = re.sub(
            allowed_ips_pattern,
            f'AllowedIPs = {new_config["AllowedIPs"]}',
            new_config_content,
        )

        def replace_endpoint(match):
            endpoint_ip = new_config["EndpointIP"]
            return f'Endpoint = {endpoint_ip}:{new_config["ListenPort"]}'

        new_config_content = re.sub(
            endpoint_pattern, replace_endpoint, new_config_content
        )

        with open(file_path, "w") as f:
            f.write(new_config_content)

        subprocess.run(["systemctl", "daemon-reload"], check=True)

        services_to_restart = [
            "strong-azumi1",
            "wireguardping_2.service",
        ]

        wg_quick_interface = "/etc/wireguard/wireserver2.conf"
        wg_quick_down = subprocess.run(
            ["wg-quick", "down", wg_quick_interface],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
        )

        if wg_quick_down.returncode == 0:
            subprocess.run(["wg-quick", "up", wg_quick_interface], check=True)
            display_checkmark(
                f"\033[92mInterface {wg_quick_interface} brought down and up successfully!\033[0m"
            )
        else:
            print(
                f"\033[93mFailed to bring down interface {wg_quick_interface}.\033[0m"
            )

        for service_name in services_to_restart:
            service_status = subprocess.run(
                ["systemctl", "is-active", service_name],
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
            )

            if service_status.returncode == 0:
                subprocess.run(["systemctl", "restart", service_name], check=True)
                display_checkmark(
                    f"\033[92mService {service_name} restarted successfully!\033[0m"
                )
            else:
                print(
                    f"\033[93mService {service_name} doesn't exist or is inactive.\033[0m"
                )

        display_checkmark(f"\033[92mConfiguration updated successfully!\033[0m")

    except FileNotFoundError:
        print(f"\033[91mfile {file_path} not found.\033[0m")
    except subprocess.CalledProcessError as e:
        print(f"\033[91merror in managing services: {e}\033[0m")
    except Exception as e:
        print(f"\033[91merror in saving the config: {e}\033[0m")


def save_wireguardconfig_sitwire3sec(file_path, new_config):
    try:
        with open(file_path, "r") as f:
            config = f.read()

        listen_port_pattern = r"ListenPort\s*=\s*\d+"
        endpoint_pattern = r"Endpoint\s*=\s*([^\s]+):\d+"
        address_pattern = r"Address\s*=\s*[^\s]+"
        allowed_ips_pattern = r"AllowedIPs\s*=\s*[^\s]+"

        new_config_content = re.sub(
            listen_port_pattern, f'ListenPort = {new_config["ListenPort"]}', config
        )
        new_config_content = re.sub(
            address_pattern, f'Address = {new_config["Address"]}', new_config_content
        )
        new_config_content = re.sub(
            allowed_ips_pattern,
            f'AllowedIPs = {new_config["AllowedIPs"]}',
            new_config_content,
        )

        def replace_endpoint(match):
            endpoint_ip = new_config["EndpointIP"]
            return f'Endpoint = {endpoint_ip}:{new_config["ListenPort"]}'

        new_config_content = re.sub(
            endpoint_pattern, replace_endpoint, new_config_content
        )

        with open(file_path, "w") as f:
            f.write(new_config_content)

        subprocess.run(["systemctl", "daemon-reload"], check=True)

        services_to_restart = [
            "strong-azumi1",
            "wireguardping_3.service",
        ]

        wg_quick_interface = "/etc/wireguard/wireserver3.conf"
        wg_quick_down = subprocess.run(
            ["wg-quick", "down", wg_quick_interface],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
        )

        if wg_quick_down.returncode == 0:
            subprocess.run(["wg-quick", "up", wg_quick_interface], check=True)
            display_checkmark(
                f"\033[92mInterface {wg_quick_interface} brought down and up successfully!\033[0m"
            )
        else:
            print(
                f"\033[93mFailed to bring down interface {wg_quick_interface}.\033[0m"
            )

        for service_name in services_to_restart:
            service_status = subprocess.run(
                ["systemctl", "is-active", service_name],
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
            )

            if service_status.returncode == 0:
                subprocess.run(["systemctl", "restart", service_name], check=True)
                display_checkmark(
                    f"\033[92mService {service_name} restarted successfully!\033[0m"
                )
            else:
                print(
                    f"\033[93mService {service_name} doesn't exist or is inactive.\033[0m"
                )

        display_checkmark(f"\033[92mConfiguration updated successfully!\033[0m")

    except FileNotFoundError:
        print(f"\033[91mfile {file_path} not found.\033[0m")
    except subprocess.CalledProcessError as e:
        print(f"\033[91merror in managing services: {e}\033[0m")
    except Exception as e:
        print(f"\033[91merror in saving the config: {e}\033[0m")


def save_wireguardconfig_sitwire4sec(file_path, new_config):
    try:
        with open(file_path, "r") as f:
            config = f.read()

        listen_port_pattern = r"ListenPort\s*=\s*\d+"
        endpoint_pattern = r"Endpoint\s*=\s*([^\s]+):\d+"
        address_pattern = r"Address\s*=\s*[^\s]+"
        allowed_ips_pattern = r"AllowedIPs\s*=\s*[^\s]+"

        new_config_content = re.sub(
            listen_port_pattern, f'ListenPort = {new_config["ListenPort"]}', config
        )
        new_config_content = re.sub(
            address_pattern, f'Address = {new_config["Address"]}', new_config_content
        )
        new_config_content = re.sub(
            allowed_ips_pattern,
            f'AllowedIPs = {new_config["AllowedIPs"]}',
            new_config_content,
        )

        def replace_endpoint(match):
            endpoint_ip = new_config["EndpointIP"]
            return f'Endpoint = {endpoint_ip}:{new_config["ListenPort"]}'

        new_config_content = re.sub(
            endpoint_pattern, replace_endpoint, new_config_content
        )

        with open(file_path, "w") as f:
            f.write(new_config_content)

        subprocess.run(["systemctl", "daemon-reload"], check=True)

        services_to_restart = [
            "strong-azumi1",
            "wireguardping_4.service",
        ]

        wg_quick_interface = "/etc/wireguard/wireserver4.conf"
        wg_quick_down = subprocess.run(
            ["wg-quick", "down", wg_quick_interface],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
        )

        if wg_quick_down.returncode == 0:
            subprocess.run(["wg-quick", "up", wg_quick_interface], check=True)
            display_checkmark(
                f"\033[92mInterface {wg_quick_interface} brought down and up successfully!\033[0m"
            )
        else:
            print(
                f"\033[93mFailed to bring down interface {wg_quick_interface}.\033[0m"
            )

        for service_name in services_to_restart:
            service_status = subprocess.run(
                ["systemctl", "is-active", service_name],
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
            )

            if service_status.returncode == 0:
                subprocess.run(["systemctl", "restart", service_name], check=True)
                display_checkmark(
                    f"\033[92mService {service_name} restarted successfully!\033[0m"
                )
            else:
                print(
                    f"\033[93mService {service_name} doesn't exist or is inactive.\033[0m"
                )

        display_checkmark(f"\033[92mConfiguration updated successfully!\033[0m")

    except FileNotFoundError:
        print(f"\033[91mfile {file_path} not found.\033[0m")
    except subprocess.CalledProcessError as e:
        print(f"\033[91merror in managing services: {e}\033[0m")
    except Exception as e:
        print(f"\033[91merror in saving the config: {e}\033[0m")


def save_wireguardconfig_sitwire5sec(file_path, new_config):
    try:
        with open(file_path, "r") as f:
            config = f.read()

        listen_port_pattern = r"ListenPort\s*=\s*\d+"
        endpoint_pattern = r"Endpoint\s*=\s*([^\s]+):\d+"
        address_pattern = r"Address\s*=\s*[^\s]+"
        allowed_ips_pattern = r"AllowedIPs\s*=\s*[^\s]+"

        new_config_content = re.sub(
            listen_port_pattern, f'ListenPort = {new_config["ListenPort"]}', config
        )
        new_config_content = re.sub(
            address_pattern, f'Address = {new_config["Address"]}', new_config_content
        )
        new_config_content = re.sub(
            allowed_ips_pattern,
            f'AllowedIPs = {new_config["AllowedIPs"]}',
            new_config_content,
        )

        def replace_endpoint(match):
            endpoint_ip = new_config["EndpointIP"]
            return f'Endpoint = {endpoint_ip}:{new_config["ListenPort"]}'

        new_config_content = re.sub(
            endpoint_pattern, replace_endpoint, new_config_content
        )

        with open(file_path, "w") as f:
            f.write(new_config_content)

        subprocess.run(["systemctl", "daemon-reload"], check=True)

        services_to_restart = [
            "strong-azumi1",
            "wireguardping_5.service",
        ]

        wg_quick_interface = "/etc/wireguard/wireserver5.conf"
        wg_quick_down = subprocess.run(
            ["wg-quick", "down", wg_quick_interface],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
        )

        if wg_quick_down.returncode == 0:
            subprocess.run(["wg-quick", "up", wg_quick_interface], check=True)
            display_checkmark(
                f"\033[92mInterface {wg_quick_interface} brought down and up successfully!\033[0m"
            )
        else:
            print(
                f"\033[93mFailed to bring down interface {wg_quick_interface}.\033[0m"
            )

        for service_name in services_to_restart:
            service_status = subprocess.run(
                ["systemctl", "is-active", service_name],
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
            )

            if service_status.returncode == 0:
                subprocess.run(["systemctl", "restart", service_name], check=True)
                display_checkmark(
                    f"\033[92mService {service_name} restarted successfully!\033[0m"
                )
            else:
                print(
                    f"\033[93mService {service_name} doesn't exist or is inactive.\033[0m"
                )

        display_checkmark(f"\033[92mConfiguration updated successfully!\033[0m")

    except FileNotFoundError:
        print(f"\033[91mfile {file_path} not found.\033[0m")
    except subprocess.CalledProcessError as e:
        print(f"\033[91merror in managing services: {e}\033[0m")
    except Exception as e:
        print(f"\033[91merror in saving the config: {e}\033[0m")


def save_wireguardconfig_sitwiresec_client(file_path, new_config):
    try:
        with open(file_path, "r") as f:
            config = f.read()

        listen_port_pattern = r"ListenPort\s*=\s*\d+"
        endpoint_pattern = r"Endpoint\s*=\s*([^\s]+):\d+"
        address_pattern = r"Address\s*=\s*[^\s]+"
        allowed_ips_pattern = r"AllowedIPs\s*=\s*[^\s]+"

        new_config_content = re.sub(
            listen_port_pattern, f'ListenPort = {new_config["ListenPort"]}', config
        )
        new_config_content = re.sub(
            address_pattern, f'Address = {new_config["Address"]}', new_config_content
        )
        new_config_content = re.sub(
            allowed_ips_pattern,
            f'AllowedIPs = {new_config["AllowedIPs"]}',
            new_config_content,
        )

        def replace_endpoint(match):
            endpoint_ip = new_config["EndpointIP"]
            return f'Endpoint = {endpoint_ip}:{new_config["ListenPort"]}'

        new_config_content = re.sub(
            endpoint_pattern, replace_endpoint, new_config_content
        )

        with open(file_path, "w") as f:
            f.write(new_config_content)

        subprocess.run(["systemctl", "daemon-reload"], check=True)

        services_to_restart = [
            "strong-azumi1",
            "wireguardping.service",
        ]

        wg_quick_interface = "/etc/wireguard/wireclient.conf"
        wg_quick_down = subprocess.run(
            ["wg-quick", "down", wg_quick_interface],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
        )

        if wg_quick_down.returncode == 0:
            subprocess.run(["wg-quick", "up", wg_quick_interface], check=True)
            display_checkmark(
                f"\033[92mInterface {wg_quick_interface} brought down and up successfully!\033[0m"
            )
        else:
            print(
                f"\033[93mFailed to bring down interface {wg_quick_interface}.\033[0m"
            )

        for service_name in services_to_restart:
            service_status = subprocess.run(
                ["systemctl", "is-active", service_name],
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
            )

            if service_status.returncode == 0:
                subprocess.run(["systemctl", "restart", service_name], check=True)
                display_checkmark(
                    f"\033[92mService {service_name} restarted successfully!\033[0m"
                )
            else:
                print(
                    f"\033[93mService {service_name} doesn't exist or is inactive.\033[0m"
                )

        display_checkmark(f"\033[92mConfiguration updated successfully!\033[0m")

    except FileNotFoundError:
        print(f"\033[91mfile {file_path} not found.\033[0m")
    except subprocess.CalledProcessError as e:
        print(f"\033[91merror in managing services: {e}\033[0m")
    except Exception as e:
        print(f"\033[91merror in saving the config: {e}\033[0m")


def update_ipsec_conf_wireguard_46sec(name, new_private_ip):
    try:
        with open(name, "r") as f:
            content = f.read()

        ip_obj = ipaddress.ip_address(new_private_ip)
        if isinstance(ip_obj, ipaddress.IPv6Address):
            ip_parts = new_private_ip.split(":")
            subnet_suffix = "/64"
        else:
            ip_parts = new_private_ip.split(".")
            subnet_suffix = "/32"

        ip_parts[-1] = "1" if ip_parts[-1].endswith("2") else "2"
        counterpart_ip = (
            ":".join(ip_parts)
            if isinstance(ip_obj, ipaddress.IPv6Address)
            else ".".join(ip_parts)
        )

        new_content = re.sub(
            r"leftsubnet=\S+", f"leftsubnet={new_private_ip}{subnet_suffix}", content
        )
        new_content = re.sub(r"leftid=\S+", f"leftid={new_private_ip}", new_content)
        new_content = re.sub(r"right=\S+", f"right={counterpart_ip}", new_content)
        new_content = re.sub(
            r"rightsubnet=\S+",
            f"rightsubnet={counterpart_ip}{subnet_suffix}",
            new_content,
        )

        with open(name, "w") as f:
            f.write(new_content)

        print("\033[92mIPsec configuration updated successfully!\033[0m")

    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mOut of ordinary error: {e}\033[0m")


def wireguardedit_sitsec_iranconfig_1():
    local_ip_private = local_ip("/etc/private1.sh")
    remote_ip_private = remote_ip("/etc/private1.sh")
    private_ip_private = private_ip1("/etc/private1.sh")
    config_path = "/etc/wireguard/wireserver1.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_sitwire_privateiran1(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )
        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mPrivate[SIT] + Wireguard\033[93m IRAN Server \033[96mConfig [1]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN Server\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mKharej Client [1] \033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6. \033[93mChange WireGuard Endpoint IP\033[0m")
        print("7.\033[94m Change IPsec Secret Key\033[0m")
        print("8. \033[92mSave All Changes\033[0m")
        print("0. \033[97mback to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Client [1]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec1(opposite_ip)
                update_ipsec_conf_wireguard_server1("/etc/ipsec1.conf", new_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "7":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secret Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")
        elif choice == "6":
            new_endpoint = input(
                "\033[93mEnter New \033[92mWireGuard Endpoint\033[93m Address:\033[0m "
            )
            if new_endpoint:
                try:
                    endpoint_ip, new_port = new_endpoint.rsplit(":", 1)
                    if endpoint.startswith(endpoint_ip):
                        endpoint = f"{endpoint_ip}:{new_port}"
                    else:
                        print(
                            "\033[97mSince Endpoint IP doesn't match with the original one, only port will be updated\033[0m"
                        )
                except ValueError:
                    print("\033[91minvalid Endpoint format\033[0m")
            else:
                print("\033[91minvalid Endpoint Address!\033[0m")
        elif choice == "8":
            save_stuff_sit1(private_ip_private, local_ip_private, remote_ip_private)
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwire1sec(config_path, new_config)
            update_ipsec_ip_multi(address_no_subnet)
            break
        elif choice == "0":
            clear()
            wireguardedit_noconjuction_sitsec_1iran_5kharej()
            break
        else:
            print("Please select a valid option.")


def wireguardedit_sitsec_iranconfig_2():
    local_ip_private = local_ip("/etc/private2.sh")
    remote_ip_private = remote_ip("/etc/private2.sh")
    private_ip_private = private_ip1("/etc/private2.sh")
    config_path = "/etc/wireguard/wireserver2.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_sitwire_privateiran2(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )
        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mPrivate[SIT] + Wireguard\033[93m IRAN Server \033[96mConfig [2]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN Server\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mKharej Client [2] \033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6. \033[93mChange WireGuard Endpoint IP\033[0m")
        print("7.\033[94m Change IPsec Secret Key\033[0m")
        print("8. \033[92mSave All Changes\033[0m")
        print("0. \033[97mback to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Client [2]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec2(opposite_ip)
                update_ipsec_conf_wireguard_server2("/etc/ipsec1.conf", new_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "7":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secret Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")
        elif choice == "6":
            new_endpoint = input(
                "\033[93mEnter New \033[92mWireGuard Endpoint\033[93m Address:\033[0m "
            )
            if new_endpoint:
                try:
                    endpoint_ip, new_port = new_endpoint.rsplit(":", 1)
                    if endpoint.startswith(endpoint_ip):
                        endpoint = f"{endpoint_ip}:{new_port}"
                    else:
                        print(
                            "\033[97mSince Endpoint IP doesn't match with the original one, only port will be updated\033[0m"
                        )
                except ValueError:
                    print("\033[91minvalid Endpoint format\033[0m")
            else:
                print("\033[91minvalid Endpoint Address!\033[0m")
        elif choice == "8":
            save_stuff_sit2(private_ip_private, local_ip_private, remote_ip_private)
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwire2sec(config_path, new_config)
            update_ipsec_ip_multi2(address_no_subnet)
            break
        elif choice == "0":
            clear()
            wireguardedit_noconjuction_sitsec_1iran_5kharej()
            break
        else:
            print("Please select a valid option.")


def wireguardedit_sitsec_iranconfig_3():
    local_ip_private = local_ip("/etc/private3.sh")
    remote_ip_private = remote_ip("/etc/private3.sh")
    private_ip_private = private_ip1("/etc/private3.sh")
    config_path = "/etc/wireguard/wireserver3.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_sitwire_privateiran3(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )
        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mPrivate[SIT] + Wireguard\033[93m IRAN Server \033[96mConfig [3]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN Server\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mKharej Client [3] \033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6. \033[93mChange WireGuard Endpoint IP\033[0m")
        print("7.\033[94m Change IPsec Secret Key\033[0m")
        print("8. \033[92mSave All Changes\033[0m")
        print("0. \033[97mback to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Client [3]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec3(opposite_ip)
                update_ipsec_conf_wireguard_server3("/etc/ipsec1.conf", new_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "7":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secret Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")
        elif choice == "6":
            new_endpoint = input(
                "\033[93mEnter New \033[92mWireGuard Endpoint\033[93m Address:\033[0m "
            )
            if new_endpoint:
                try:
                    endpoint_ip, new_port = new_endpoint.rsplit(":", 1)
                    if endpoint.startswith(endpoint_ip):
                        endpoint = f"{endpoint_ip}:{new_port}"
                    else:
                        print(
                            "\033[97mSince Endpoint IP doesn't match with the original one, only port will be updated\033[0m"
                        )
                except ValueError:
                    print("\033[91minvalid Endpoint format\033[0m")
            else:
                print("\033[91minvalid Endpoint Address!\033[0m")
        elif choice == "8":
            save_stuff_sit3(private_ip_private, local_ip_private, remote_ip_private)
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwire3sec(config_path, new_config)
            update_ipsec_ip_multi3(address_no_subnet)
            break
        elif choice == "0":
            clear()
            wireguardedit_noconjuction_sitsec_1iran_5kharej()
            break
        else:
            print("Please select a valid option.")


def wireguardedit_sitsec_iranconfig_4():
    local_ip_private = local_ip("/etc/private4.sh")
    remote_ip_private = remote_ip("/etc/private4.sh")
    private_ip_private = private_ip1("/etc/private4.sh")
    config_path = "/etc/wireguard/wireserver4.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_sitwire_privateiran4(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )
        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mPrivate[SIT] + Wireguard\033[93m IRAN Server \033[96mConfig [4]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN Server\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mKharej Client [4] \033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6. \033[93mChange WireGuard Endpoint IP\033[0m")
        print("7.\033[94m Change IPsec Secret Key\033[0m")
        print("8. \033[92mSave All Changes\033[0m")
        print("0. \033[97mback to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Client [4]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec4(opposite_ip)
                update_ipsec_conf_wireguard_server4("/etc/ipsec1.conf", new_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "7":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secret Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")
        elif choice == "6":
            new_endpoint = input(
                "\033[93mEnter New \033[92mWireGuard Endpoint\033[93m Address:\033[0m "
            )
            if new_endpoint:
                try:
                    endpoint_ip, new_port = new_endpoint.rsplit(":", 1)
                    if endpoint.startswith(endpoint_ip):
                        endpoint = f"{endpoint_ip}:{new_port}"
                    else:
                        print(
                            "\033[97mSince Endpoint IP doesn't match with the original one, only port will be updated\033[0m"
                        )
                except ValueError:
                    print("\033[91minvalid Endpoint format\033[0m")
            else:
                print("\033[91minvalid Endpoint Address!\033[0m")
        elif choice == "8":
            save_stuff_sit4(private_ip_private, local_ip_private, remote_ip_private)
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwire4sec(config_path, new_config)
            update_ipsec_ip_multi4(address_no_subnet)
            break
        elif choice == "0":
            clear()
            wireguardedit_noconjuction_sitsec_1iran_5kharej()
            break
        else:
            print("Please select a valid option.")


def wireguardedit_sitsec_iranconfig_5():
    local_ip_private = local_ip("/etc/private5.sh")
    remote_ip_private = remote_ip("/etc/private5.sh")
    private_ip_private = private_ip1("/etc/private5.sh")
    config_path = "/etc/wireguard/wireserver5.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_sitwire_privateiran5(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )
        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mPrivate[SIT] + Wireguard\033[93m IRAN Server \033[96mConfig [5]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN Server\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mKharej Client [5] \033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6. \033[93mChange WireGuard Endpoint IP\033[0m")
        print("7.\033[94m Change IPsec Secret Key\033[0m")
        print("8. \033[92mSave All Changes\033[0m")
        print("0. \033[97mback to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Client [5]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec5(opposite_ip)
                update_ipsec_conf_wireguard_server5("/etc/ipsec1.conf", new_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "7":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secret Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")
        elif choice == "6":
            new_endpoint = input(
                "\033[93mEnter New \033[92mWireGuard Endpoint\033[93m Address:\033[0m "
            )
            if new_endpoint:
                try:
                    endpoint_ip, new_port = new_endpoint.rsplit(":", 1)
                    if endpoint.startswith(endpoint_ip):
                        endpoint = f"{endpoint_ip}:{new_port}"
                    else:
                        print(
                            "\033[97mSince Endpoint IP doesn't match with the original one, only port will be updated\033[0m"
                        )
                except ValueError:
                    print("\033[91minvalid Endpoint format\033[0m")
            else:
                print("\033[91minvalid Endpoint Address!\033[0m")
        elif choice == "8":
            save_stuff_sit5(private_ip_private, local_ip_private, remote_ip_private)
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwire5sec(config_path, new_config)
            update_ipsec_ip_multi5(address_no_subnet)
            break
        elif choice == "0":
            clear()
            wireguardedit_noconjuction_sitsec_1iran_5kharej()
            break
        else:
            print("Please select a valid option.")


def wireguardudp_sitsec_kharej_client1():
    local_ip_private = local_ip("/etc/private1.sh")
    remote_ip_private = remote_ip("/etc/private1.sh")
    private_ip_private = private_ip1("/etc/private1.sh")
    config_path = "/etc/wireguard/wireclient.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_sitwire_privatekharej1(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )
        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mPrivate[SIT] + Wireguard\033[93m Kharej Client \033[96m[1]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej Client [1]\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mIRAN Server \033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6. \033[93mChange WireGuard Endpoint IP\033[0m")
        print("7.\033[94m Change IPsec Secret Key\033[0m")
        print("8. \033[92mSave All Changes\033[0m")
        print("0. \033[97mback to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Client [1]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec_client(opposite_ip)
                update_ipsec_conf_wireguard_46sec("/etc/ipsec1.conf", new_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "7":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secret Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")
        elif choice == "6":
            new_endpoint = input(
                "\033[93mEnter New \033[92mWireGuard Endpoint\033[93m Address:\033[0m "
            )
            if new_endpoint:
                try:
                    endpoint_ip, new_port = new_endpoint.rsplit(":", 1)
                    if endpoint.startswith(endpoint_ip):
                        endpoint = f"{endpoint_ip}:{new_port}"
                    else:
                        print(
                            "\033[97mSince Endpoint IP doesn't match with the original one, only port will be updated\033[0m"
                        )
                except ValueError:
                    print("\033[91minvalid Endpoint format\033[0m")
            else:
                print("\033[91minvalid Endpoint Address!\033[0m")
        elif choice == "8":
            save_stuff_sit1(private_ip_private, local_ip_private, remote_ip_private)
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwiresec_client(config_path, new_config)
            update_ipsec_ip(address_no_subnet)
            break
        elif choice == "0":
            clear()
            wireguardedit_noconjuction_sitsec_1iran_5kharej()
            break
        else:
            print("Please select a valid option.")


def wireguardudp_sitsec_kharej_client2():
    local_ip_private = local_ip("/etc/private2.sh")
    remote_ip_private = remote_ip("/etc/private2.sh")
    private_ip_private = private_ip1("/etc/private2.sh")
    config_path = "/etc/wireguard/wireclient.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_sitwire_privatekharej2(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )
        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mPrivate[SIT] + Wireguard\033[93m Kharej Client \033[96m[2]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej Client [2]\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mIRAN Server \033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6. \033[93mChange WireGuard Endpoint IP\033[0m")
        print("7.\033[94m Change IPsec Secret Key\033[0m")
        print("8. \033[92mSave All Changes\033[0m")
        print("0. \033[97mback to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Client [2]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec_client(opposite_ip)
                update_ipsec_conf_wireguard_46sec("/etc/ipsec1.conf", new_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "7":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secret Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")
        elif choice == "6":
            new_endpoint = input(
                "\033[93mEnter New \033[92mWireGuard Endpoint\033[93m Address:\033[0m "
            )
            if new_endpoint:
                try:
                    endpoint_ip, new_port = new_endpoint.rsplit(":", 1)
                    if endpoint.startswith(endpoint_ip):
                        endpoint = f"{endpoint_ip}:{new_port}"
                    else:
                        print(
                            "\033[97mSince Endpoint IP doesn't match with the original one, only port will be updated\033[0m"
                        )
                except ValueError:
                    print("\033[91minvalid Endpoint format\033[0m")
            else:
                print("\033[91minvalid Endpoint Address!\033[0m")
        elif choice == "8":
            save_stuff_sit2(private_ip_private, local_ip_private, remote_ip_private)
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwiresec_client(config_path, new_config)
            update_ipsec_ip(address_no_subnet)
            break
        elif choice == "0":
            clear()
            wireguardedit_noconjuction_sitsec_1iran_5kharej()
            break
        else:
            print("Please select a valid option.")


def wireguardudp_sitsec_kharej_client3():
    local_ip_private = local_ip("/etc/private3.sh")
    remote_ip_private = remote_ip("/etc/private3.sh")
    private_ip_private = private_ip1("/etc/private3.sh")
    config_path = "/etc/wireguard/wireclient.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_sitwire_privatekharej3(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )
        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mPrivate[SIT] + Wireguard\033[93m Kharej Client \033[96m[3]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej Client [3]\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mIRAN Server \033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6. \033[93mChange WireGuard Endpoint IP\033[0m")
        print("7.\033[94m Change IPsec Secret Key\033[0m")
        print("8. \033[92mSave All Changes\033[0m")
        print("0. \033[97mback to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Client [3]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec_client(opposite_ip)
                update_ipsec_conf_wireguard_46sec("/etc/ipsec1.conf", new_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "7":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secret Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")
        elif choice == "6":
            new_endpoint = input(
                "\033[93mEnter New \033[92mWireGuard Endpoint\033[93m Address:\033[0m "
            )
            if new_endpoint:
                try:
                    endpoint_ip, new_port = new_endpoint.rsplit(":", 1)
                    if endpoint.startswith(endpoint_ip):
                        endpoint = f"{endpoint_ip}:{new_port}"
                    else:
                        print(
                            "\033[97mSince Endpoint IP doesn't match with the original one, only port will be updated\033[0m"
                        )
                except ValueError:
                    print("\033[91minvalid Endpoint format\033[0m")
            else:
                print("\033[91minvalid Endpoint Address!\033[0m")
        elif choice == "8":
            save_stuff_sit3(private_ip_private, local_ip_private, remote_ip_private)
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwiresec_client(config_path, new_config)
            update_ipsec_ip(address_no_subnet)
            break
        elif choice == "0":
            clear()
            wireguardedit_noconjuction_sitsec_1iran_5kharej()
            break
        else:
            print("Please select a valid option.")


def wireguardudp_sitsec_kharej_client4():
    local_ip_private = local_ip("/etc/private4.sh")
    remote_ip_private = remote_ip("/etc/private4.sh")
    private_ip_private = private_ip1("/etc/private4.sh")
    config_path = "/etc/wireguard/wireclient.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_sitwire_privatekharej4(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )
        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mPrivate[SIT] + Wireguard\033[93m Kharej Client \033[96m[4]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej Client [4]\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mIRAN Server \033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6. \033[93mChange WireGuard Endpoint IP\033[0m")
        print("7.\033[94m Change IPsec Secret Key\033[0m")
        print("8. \033[92mSave All Changes\033[0m")
        print("0. \033[97mback to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Client [4]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec_client(opposite_ip)
                update_ipsec_conf_wireguard_46sec("/etc/ipsec1.conf", new_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "7":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secret Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")
        elif choice == "6":
            new_endpoint = input(
                "\033[93mEnter New \033[92mWireGuard Endpoint\033[93m Address:\033[0m "
            )
            if new_endpoint:
                try:
                    endpoint_ip, new_port = new_endpoint.rsplit(":", 1)
                    if endpoint.startswith(endpoint_ip):
                        endpoint = f"{endpoint_ip}:{new_port}"
                    else:
                        print(
                            "\033[97mSince Endpoint IP doesn't match with the original one, only port will be updated\033[0m"
                        )
                except ValueError:
                    print("\033[91minvalid Endpoint format\033[0m")
            else:
                print("\033[91minvalid Endpoint Address!\033[0m")
        elif choice == "8":
            save_stuff_sit4(private_ip_private, local_ip_private, remote_ip_private)
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwiresec_client(config_path, new_config)
            update_ipsec_ip(address_no_subnet)
            break
        elif choice == "0":
            clear()
            wireguardedit_noconjuction_sitsec_1iran_5kharej()
            break
        else:
            print("Please select a valid option.")


def wireguardudp_sitsec_kharej_client5():
    local_ip_private = local_ip("/etc/private5.sh")
    remote_ip_private = remote_ip("/etc/private5.sh")
    private_ip_private = private_ip1("/etc/private5.sh")
    config_path = "/etc/wireguard/wireclient.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_sitwire_privatekharej5(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )
        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mPrivate[SIT] + Wireguard\033[93m Kharej Client \033[96m[2]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej Client [5]\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mIRAN Server \033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6. \033[93mChange WireGuard Endpoint IP\033[0m")
        print("7.\033[94m Change IPsec Secret Key\033[0m")
        print("8. \033[92mSave All Changes\033[0m")
        print("0. \033[97mback to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Client [5]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec_client(opposite_ip)
                update_ipsec_conf_wireguard_46sec("/etc/ipsec1.conf", new_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "7":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secret Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")
        elif choice == "6":
            new_endpoint = input(
                "\033[93mEnter New \033[92mWireGuard Endpoint\033[93m Address:\033[0m "
            )
            if new_endpoint:
                try:
                    endpoint_ip, new_port = new_endpoint.rsplit(":", 1)
                    if endpoint.startswith(endpoint_ip):
                        endpoint = f"{endpoint_ip}:{new_port}"
                    else:
                        print(
                            "\033[97mSince Endpoint IP doesn't match with the original one, only port will be updated\033[0m"
                        )
                except ValueError:
                    print("\033[91minvalid Endpoint format\033[0m")
            else:
                print("\033[91minvalid Endpoint Address!\033[0m")
        elif choice == "8":
            save_stuff_sit5(private_ip_private, local_ip_private, remote_ip_private)
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwiresec_client(config_path, new_config)
            update_ipsec_ip(address_no_subnet)
            break
        elif choice == "0":
            clear()
            wireguardedit_noconjuction_sitsec_1iran_5kharej()
            break
        else:
            print("Please select a valid option.")


# 1 kharej server 5 iran client


def wireguardedit_sitsec_kharejconfig_1():
    local_ip_private = local_ip("/etc/private1.sh")
    remote_ip_private = remote_ip("/etc/private1.sh")
    private_ip_private = private_ip1("/etc/private1.sh")
    config_path = "/etc/wireguard/wireserver1.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_sitwire_privatekharej_server1(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )
        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mPrivate[SIT] + Wireguard\033[93m Kharej Server \033[96mConfig [1]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej Server\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mIRAN Client [1] \033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6. \033[93mChange WireGuard Endpoint IP\033[0m")
        print("7.\033[94m Change IPsec Secret Key\033[0m")
        print("8. \033[92mSave All Changes\033[0m")
        print("0. \033[97mback to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Client [1]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec1(opposite_ip)
                update_ipsec_conf_wireguard_server1("/etc/ipsec1.conf", new_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "7":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secret Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")
        elif choice == "6":
            new_endpoint = input(
                "\033[93mEnter New \033[92mWireGuard Endpoint\033[93m Address:\033[0m "
            )
            if new_endpoint:
                try:
                    endpoint_ip, new_port = new_endpoint.rsplit(":", 1)
                    if endpoint.startswith(endpoint_ip):
                        endpoint = f"{endpoint_ip}:{new_port}"
                    else:
                        print(
                            "\033[97mSince Endpoint IP doesn't match with the original one, only port will be updated\033[0m"
                        )
                except ValueError:
                    print("\033[91minvalid Endpoint format\033[0m")
            else:
                print("\033[91minvalid Endpoint Address!\033[0m")
        elif choice == "8":
            save_stuff_sit1(private_ip_private, local_ip_private, remote_ip_private)
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwire1sec(config_path, new_config)
            update_ipsec_ip_multi(address_no_subnet)
            break
        elif choice == "0":
            clear()
            wireguardedit_noconjuction_sitsec_kharej1_5iran()
            break
        else:
            print("Please select a valid option.")


def wireguardedit_sitsec_kharejconfig_2():
    local_ip_private = local_ip("/etc/private2.sh")
    remote_ip_private = remote_ip("/etc/private2.sh")
    private_ip_private = private_ip1("/etc/private2.sh")
    config_path = "/etc/wireguard/wireserver2.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_sitwire_privatekharej_server2(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )
        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mPrivate[SIT] + Wireguard\033[93m Kharej Server \033[96mConfig [2]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej Server\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mIRAN Client [2] \033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6. \033[93mChange WireGuard Endpoint IP\033[0m")
        print("7.\033[94m Change IPsec Secret Key\033[0m")
        print("8. \033[92mSave All Changes\033[0m")
        print("0. \033[97mback to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Client [2]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec2(opposite_ip)
                update_ipsec_conf_wireguard_server2("/etc/ipsec1.conf", new_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "7":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secret Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")
        elif choice == "6":
            new_endpoint = input(
                "\033[93mEnter New \033[92mWireGuard Endpoint\033[93m Address:\033[0m "
            )
            if new_endpoint:
                try:
                    endpoint_ip, new_port = new_endpoint.rsplit(":", 1)
                    if endpoint.startswith(endpoint_ip):
                        endpoint = f"{endpoint_ip}:{new_port}"
                    else:
                        print(
                            "\033[97mSince Endpoint IP doesn't match with the original one, only port will be updated\033[0m"
                        )
                except ValueError:
                    print("\033[91minvalid Endpoint format\033[0m")
            else:
                print("\033[91minvalid Endpoint Address!\033[0m")
        elif choice == "8":
            save_stuff_sit2(private_ip_private, local_ip_private, remote_ip_private)
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwire2sec(config_path, new_config)
            update_ipsec_ip_multi2(address_no_subnet)
            break
        elif choice == "0":
            clear()
            wireguardedit_noconjuction_sitsec_kharej1_5iran()
            break
        else:
            print("Please select a valid option.")


def wireguardedit_sitsec_kharejconfig_3():
    local_ip_private = local_ip("/etc/private3.sh")
    remote_ip_private = remote_ip("/etc/private3.sh")
    private_ip_private = private_ip1("/etc/private3.sh")
    config_path = "/etc/wireguard/wireserver3.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_sitwire_privatekharej_server3(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )
        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mPrivate[SIT] + Wireguard\033[93m Kharej Server \033[96mConfig [3]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej Server\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mIRAN Client [3] \033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6. \033[93mChange WireGuard Endpoint IP\033[0m")
        print("7.\033[94m Change IPsec Secret Key\033[0m")
        print("8. \033[92mSave All Changes\033[0m")
        print("0. \033[97mback to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Client [3]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec3(opposite_ip)
                update_ipsec_conf_wireguard_server3("/etc/ipsec1.conf", new_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "7":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secret Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")
        elif choice == "6":
            new_endpoint = input(
                "\033[93mEnter New \033[92mWireGuard Endpoint\033[93m Address:\033[0m "
            )
            if new_endpoint:
                try:
                    endpoint_ip, new_port = new_endpoint.rsplit(":", 1)
                    if endpoint.startswith(endpoint_ip):
                        endpoint = f"{endpoint_ip}:{new_port}"
                    else:
                        print(
                            "\033[97mSince Endpoint IP doesn't match with the original one, only port will be updated\033[0m"
                        )
                except ValueError:
                    print("\033[91minvalid Endpoint format\033[0m")
            else:
                print("\033[91minvalid Endpoint Address!\033[0m")
        elif choice == "8":
            save_stuff_sit3(private_ip_private, local_ip_private, remote_ip_private)
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwire3sec(config_path, new_config)
            update_ipsec_ip_multi3(address_no_subnet)
            break
        elif choice == "0":
            clear()
            wireguardedit_noconjuction_sitsec_kharej1_5iran()
            break
        else:
            print("Please select a valid option.")


def wireguardedit_sitsec_kharejconfig_4():
    local_ip_private = local_ip("/etc/private4.sh")
    remote_ip_private = remote_ip("/etc/private4.sh")
    private_ip_private = private_ip1("/etc/private4.sh")
    config_path = "/etc/wireguard/wireserver4.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_sitwire_privatekharej_server4(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )
        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mPrivate[SIT] + Wireguard\033[93m Kharej Server \033[96mConfig [4]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej Server\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mIRAN Client [4] \033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6. \033[93mChange WireGuard Endpoint IP\033[0m")
        print("7.\033[94m Change IPsec Secret Key\033[0m")
        print("8. \033[92mSave All Changes\033[0m")
        print("0. \033[97mback to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Client [4]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec4(opposite_ip)
                update_ipsec_conf_wireguard_server4("/etc/ipsec1.conf", new_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "7":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secret Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")
        elif choice == "6":
            new_endpoint = input(
                "\033[93mEnter New \033[92mWireGuard Endpoint\033[93m Address:\033[0m "
            )
            if new_endpoint:
                try:
                    endpoint_ip, new_port = new_endpoint.rsplit(":", 1)
                    if endpoint.startswith(endpoint_ip):
                        endpoint = f"{endpoint_ip}:{new_port}"
                    else:
                        print(
                            "\033[97mSince Endpoint IP doesn't match with the original one, only port will be updated\033[0m"
                        )
                except ValueError:
                    print("\033[91minvalid Endpoint format\033[0m")
            else:
                print("\033[91minvalid Endpoint Address!\033[0m")
        elif choice == "8":
            save_stuff_sit4(private_ip_private, local_ip_private, remote_ip_private)
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwire4sec(config_path, new_config)
            update_ipsec_ip_multi4(address_no_subnet)
            break
        elif choice == "0":
            clear()
            wireguardedit_noconjuction_sitsec_kharej1_5iran()
            break
        else:
            print("Please select a valid option.")


def wireguardedit_sitsec_kharejconfig_5():
    local_ip_private = local_ip("/etc/private5.sh")
    remote_ip_private = remote_ip("/etc/private5.sh")
    private_ip_private = private_ip1("/etc/private5.sh")
    config_path = "/etc/wireguard/wireserver5.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_sitwire_privatekharej_server5(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )
        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mPrivate[SIT] + Wireguard\033[93m Kharej Server \033[96mConfig [5]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej Server\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mIRAN Client [5] \033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6. \033[93mChange WireGuard Endpoint IP\033[0m")
        print("7.\033[94m Change IPsec Secret Key\033[0m")
        print("8. \033[92mSave All Changes\033[0m")
        print("0. \033[97mback to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Client [5]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec5(opposite_ip)
                update_ipsec_conf_wireguard_server5("/etc/ipsec1.conf", new_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "7":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secret Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")
        elif choice == "6":
            new_endpoint = input(
                "\033[93mEnter New \033[92mWireGuard Endpoint\033[93m Address:\033[0m "
            )
            if new_endpoint:
                try:
                    endpoint_ip, new_port = new_endpoint.rsplit(":", 1)
                    if endpoint.startswith(endpoint_ip):
                        endpoint = f"{endpoint_ip}:{new_port}"
                    else:
                        print(
                            "\033[97mSince Endpoint IP doesn't match with the original one, only port will be updated\033[0m"
                        )
                except ValueError:
                    print("\033[91minvalid Endpoint format\033[0m")
            else:
                print("\033[91minvalid Endpoint Address!\033[0m")
        elif choice == "8":
            save_stuff_sit5(private_ip_private, local_ip_private, remote_ip_private)
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwire5sec(config_path, new_config)
            update_ipsec_ip_multi5(address_no_subnet)
            break
        elif choice == "0":
            clear()
            wireguardedit_noconjuction_sitsec_kharej1_5iran()
            break
        else:
            print("Please select a valid option.")


def wireguardudp_sitsec_iran_client1():
    local_ip_private = local_ip("/etc/private1.sh")
    remote_ip_private = remote_ip("/etc/private1.sh")
    private_ip_private = private_ip1("/etc/private1.sh")
    config_path = "/etc/wireguard/wireclient.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_sitwire_privateiran_client1(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )
        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mPrivate[SIT] + Wireguard\033[93m IRAN Client \033[96m[1]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN Client [1]\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mKharej Server \033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6. \033[93mChange WireGuard Endpoint IP\033[0m")
        print("7.\033[94m Change IPsec Secret Key\033[0m")
        print("8. \033[92mSave All Changes\033[0m")
        print("0. \033[97mback to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Client [1]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec_client(opposite_ip)
                update_ipsec_conf_wireguard_46sec("/etc/ipsec1.conf", new_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "7":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secret Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")
        elif choice == "6":
            new_endpoint = input(
                "\033[93mEnter New \033[92mWireGuard Endpoint\033[93m Address:\033[0m "
            )
            if new_endpoint:
                try:
                    endpoint_ip, new_port = new_endpoint.rsplit(":", 1)
                    if endpoint.startswith(endpoint_ip):
                        endpoint = f"{endpoint_ip}:{new_port}"
                    else:
                        print(
                            "\033[97mSince Endpoint IP doesn't match with the original one, only port will be updated\033[0m"
                        )
                except ValueError:
                    print("\033[91minvalid Endpoint format\033[0m")
            else:
                print("\033[91minvalid Endpoint Address!\033[0m")
        elif choice == "8":
            save_stuff_sit1(private_ip_private, local_ip_private, remote_ip_private)
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwiresec_client(config_path, new_config)
            update_ipsec_ip(address_no_subnet)
            break
        elif choice == "0":
            clear()
            wireguardedit_noconjuction_sitsec_kharej1_5iran()
            break
        else:
            print("Please select a valid option.")


def wireguardudp_sitsec_iran_client2():
    local_ip_private = local_ip("/etc/private2.sh")
    remote_ip_private = remote_ip("/etc/private2.sh")
    private_ip_private = private_ip1("/etc/private2.sh")
    config_path = "/etc/wireguard/wireclient.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_sitwire_privateiran_client2(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )
        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mPrivate[SIT] + Wireguard\033[93m IRAN Client \033[96m[2]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN Client [2]\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mKharej Server \033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6. \033[93mChange WireGuard Endpoint IP\033[0m")
        print("7.\033[94m Change IPsec Secret Key\033[0m")
        print("8. \033[92mSave All Changes\033[0m")
        print("0. \033[97mback to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Client [2]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec_client(opposite_ip)
                update_ipsec_conf_wireguard_46sec("/etc/ipsec1.conf", new_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "7":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secret Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")
        elif choice == "6":
            new_endpoint = input(
                "\033[93mEnter New \033[92mWireGuard Endpoint\033[93m Address:\033[0m "
            )
            if new_endpoint:
                try:
                    endpoint_ip, new_port = new_endpoint.rsplit(":", 1)
                    if endpoint.startswith(endpoint_ip):
                        endpoint = f"{endpoint_ip}:{new_port}"
                    else:
                        print(
                            "\033[97mSince Endpoint IP doesn't match with the original one, only port will be updated\033[0m"
                        )
                except ValueError:
                    print("\033[91minvalid Endpoint format\033[0m")
            else:
                print("\033[91minvalid Endpoint Address!\033[0m")
        elif choice == "8":
            save_stuff_sit2(private_ip_private, local_ip_private, remote_ip_private)
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwiresec_client(config_path, new_config)
            update_ipsec_ip(address_no_subnet)
            break
        elif choice == "0":
            clear()
            wireguardedit_noconjuction_sitsec_kharej1_5iran()
            break
        else:
            print("Please select a valid option.")


def wireguardudp_sitsec_iran_client3():
    local_ip_private = local_ip("/etc/private3.sh")
    remote_ip_private = remote_ip("/etc/private3.sh")
    private_ip_private = private_ip1("/etc/private3.sh")
    config_path = "/etc/wireguard/wireclient.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_sitwire_privateiran_client3(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )
        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mPrivate[SIT] + Wireguard\033[93m IRAN Client \033[96m[3]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN Client [3]\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mKharej Server \033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6. \033[93mChange WireGuard Endpoint IP\033[0m")
        print("7.\033[94m Change IPsec Secret Key\033[0m")
        print("8. \033[92mSave All Changes\033[0m")
        print("0. \033[97mback to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Client [3]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec_client(opposite_ip)
                update_ipsec_conf_wireguard_46sec("/etc/ipsec1.conf", new_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "7":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secret Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")
        elif choice == "6":
            new_endpoint = input(
                "\033[93mEnter New \033[92mWireGuard Endpoint\033[93m Address:\033[0m "
            )
            if new_endpoint:
                try:
                    endpoint_ip, new_port = new_endpoint.rsplit(":", 1)
                    if endpoint.startswith(endpoint_ip):
                        endpoint = f"{endpoint_ip}:{new_port}"
                    else:
                        print(
                            "\033[97mSince Endpoint IP doesn't match with the original one, only port will be updated\033[0m"
                        )
                except ValueError:
                    print("\033[91minvalid Endpoint format\033[0m")
            else:
                print("\033[91minvalid Endpoint Address!\033[0m")
        elif choice == "8":
            save_stuff_sit3(private_ip_private, local_ip_private, remote_ip_private)
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwiresec_client(config_path, new_config)
            update_ipsec_ip(address_no_subnet)
            break
        elif choice == "0":
            clear()
            wireguardedit_noconjuction_sitsec_kharej1_5iran()
            break
        else:
            print("Please select a valid option.")


def wireguardudp_sitsec_iran_client4():
    local_ip_private = local_ip("/etc/private4.sh")
    remote_ip_private = remote_ip("/etc/private4.sh")
    private_ip_private = private_ip1("/etc/private4.sh")
    config_path = "/etc/wireguard/wireclient.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_sitwire_privateiran_client4(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )
        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mPrivate[SIT] + Wireguard\033[93m IRAN Client \033[96m[4]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN Client [4]\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mKharej Server \033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6. \033[93mChange WireGuard Endpoint IP\033[0m")
        print("7.\033[94m Change IPsec Secret Key\033[0m")
        print("8. \033[92mSave All Changes\033[0m")
        print("0. \033[97mback to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Client [4]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec_client(opposite_ip)
                update_ipsec_conf_wireguard_46sec("/etc/ipsec1.conf", new_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "7":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secret Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")
        elif choice == "6":
            new_endpoint = input(
                "\033[93mEnter New \033[92mWireGuard Endpoint\033[93m Address:\033[0m "
            )
            if new_endpoint:
                try:
                    endpoint_ip, new_port = new_endpoint.rsplit(":", 1)
                    if endpoint.startswith(endpoint_ip):
                        endpoint = f"{endpoint_ip}:{new_port}"
                    else:
                        print(
                            "\033[97mSince Endpoint IP doesn't match with the original one, only port will be updated\033[0m"
                        )
                except ValueError:
                    print("\033[91minvalid Endpoint format\033[0m")
            else:
                print("\033[91minvalid Endpoint Address!\033[0m")
        elif choice == "8":
            save_stuff_sit4(private_ip_private, local_ip_private, remote_ip_private)
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwiresec_client(config_path, new_config)
            update_ipsec_ip(address_no_subnet)
            break
        elif choice == "0":
            clear()
            wireguardedit_noconjuction_sitsec_kharej1_5iran()
            break
        else:
            print("Please select a valid option.")


def wireguardudp_sitsec_iran_client5():
    local_ip_private = local_ip("/etc/private5.sh")
    remote_ip_private = remote_ip("/etc/private5.sh")
    private_ip_private = private_ip1("/etc/private5.sh")
    config_path = "/etc/wireguard/wireclient.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_sitwire_privateiran_client5(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )
        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mPrivate[SIT] + Wireguard\033[93m IRAN Client \033[96m[2]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN Client [5]\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mKharej Server \033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6. \033[93mChange WireGuard Endpoint IP\033[0m")
        print("7.\033[94m Change IPsec Secret Key\033[0m")
        print("8. \033[92mSave All Changes\033[0m")
        print("0. \033[97mback to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Client [5]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec_client(opposite_ip)
                update_ipsec_conf_wireguard_46sec("/etc/ipsec1.conf", new_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "7":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secret Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")
        elif choice == "6":
            new_endpoint = input(
                "\033[93mEnter New \033[92mWireGuard Endpoint\033[93m Address:\033[0m "
            )
            if new_endpoint:
                try:
                    endpoint_ip, new_port = new_endpoint.rsplit(":", 1)
                    if endpoint.startswith(endpoint_ip):
                        endpoint = f"{endpoint_ip}:{new_port}"
                    else:
                        print(
                            "\033[97mSince Endpoint IP doesn't match with the original one, only port will be updated\033[0m"
                        )
                except ValueError:
                    print("\033[91minvalid Endpoint format\033[0m")
            else:
                print("\033[91minvalid Endpoint Address!\033[0m")
        elif choice == "8":
            save_stuff_sit5(private_ip_private, local_ip_private, remote_ip_private)
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwiresec_client(config_path, new_config)
            update_ipsec_ip(address_no_subnet)
            break
        elif choice == "0":
            clear()
            wireguardedit_noconjuction_sitsec_kharej1_5iran()
            break
        else:
            print("Please select a valid option.")


def update_ipsec_ip(new_vxlan_ip):
    def opposite_ip(ip):
        if ":" in ip:
            parts = ip.split(":")
            if parts[-1].endswith("1"):
                parts[-1] = parts[-1][:-1] + "2"
            else:
                parts[-1] = parts[-1][:-1] + "1"
            return ":".join(parts)
        else:
            octets = ip.split(".")
            if octets[-1] == "1":
                octets[-1] = "2"
            else:
                octets[-1] = "1"
            return ".".join(octets)

    secrets_file = "/etc/ipsec.secrets"
    opposite_ip_addr = opposite_ip(new_vxlan_ip)

    with open(secrets_file, "r") as file:
        lines = file.readlines()

    new_lines = []
    for line in lines:
        if ": PSK" in line:
            parts = line.split()
            if len(parts) > 2:
                new_line = (
                    f'{opposite_ip_addr} {new_vxlan_ip} : PSK "{parts[-1][1:-1]}"'
                )
                new_lines.append(new_line + "\n")
            else:
                new_lines.append(line)
        else:
            new_lines.append(line)

    with open(secrets_file, "w") as file:
        file.writelines(new_lines)


def update_ipsec_ip_multi(new_vxlan_ip):
    def opposite_ip(ip):
        if ":" in ip:
            parts = ip.split(":")
            if parts[-1].endswith("1"):
                parts[-1] = parts[-1][:-1] + "2"
            else:
                parts[-1] = parts[-1][:-1] + "1"
            return ":".join(parts)
        else:
            octets = ip.split(".")
            if octets[-1] == "1":
                octets[-1] = "2"
            else:
                octets[-1] = "1"
            return ".".join(octets)

    secrets_file = "/etc/ipsec.secrets"
    opposite_ip_addr = opposite_ip(new_vxlan_ip)

    with open(secrets_file, "r") as file:
        lines = file.readlines()

    new_lines = []
    modified = False
    for line in lines:
        if not modified and ": PSK" in line:
            parts = line.split()
            if len(parts) > 2:
                new_line = (
                    f'{opposite_ip_addr} {new_vxlan_ip} : PSK "{parts[-1][1:-1]}"'
                )
                new_lines.append(new_line + "\n")
                modified = True
            else:
                new_lines.append(line)
        else:
            new_lines.append(line)

    with open(secrets_file, "w") as file:
        file.writelines(new_lines)


def update_ipsec_ip_multi2(new_vxlan_ip):
    def opposite_ip(ip):
        if ":" in ip:
            parts = ip.split(":")
            if parts[-1].endswith("1"):
                parts[-1] = parts[-1][:-1] + "2"
            else:
                parts[-1] = parts[-1][:-1] + "1"
            return ":".join(parts)
        else:
            octets = ip.split(".")
            if octets[-1] == "1":
                octets[-1] = "2"
            else:
                octets[-1] = "1"
            return ".".join(octets)

    secrets_file = "/etc/ipsec.secrets"
    opposite_ip_addr = opposite_ip(new_vxlan_ip)

    with open(secrets_file, "r") as file:
        lines = file.readlines()

    if len(lines) < 2:
        raise ValueError("The secrets file doesn't have at least 2 lines")

    new_lines = []
    for index, line in enumerate(lines):
        if index == 1 and ": PSK" in line:
            parts = line.split()
            if len(parts) > 2:
                new_line = (
                    f'{opposite_ip_addr} {new_vxlan_ip} : PSK "{parts[-1][1:-1]}"'
                )
                new_lines.append(new_line + "\n")
            else:
                new_lines.append(line)
        else:
            new_lines.append(line)

    with open(secrets_file, "w") as file:
        file.writelines(new_lines)


def update_ipsec_ip_multi3(new_vxlan_ip):
    def opposite_ip(ip):
        if ":" in ip:
            parts = ip.split(":")
            if parts[-1].endswith("1"):
                parts[-1] = parts[-1][:-1] + "2"
            else:
                parts[-1] = parts[-1][:-1] + "1"
            return ":".join(parts)
        else:
            octets = ip.split(".")
            if octets[-1] == "1":
                octets[-1] = "2"
            else:
                octets[-1] = "1"
            return ".".join(octets)

    secrets_file = "/etc/ipsec.secrets"
    opposite_ip_addr = opposite_ip(new_vxlan_ip)

    with open(secrets_file, "r") as file:
        lines = file.readlines()

    if len(lines) < 3:
        raise ValueError("The secrets file doesn't have at least 3 lines")

    new_lines = []
    for index, line in enumerate(lines):
        if index == 2:
            parts = line.split()
            if len(parts) >= 3 and parts[2] == ":":
                new_line = (
                    f'{opposite_ip_addr} {new_vxlan_ip} : PSK "{parts[-1][1:-1]}"'
                )
                new_lines.append(new_line + "\n")
            else:
                new_lines.append(line)
        else:
            new_lines.append(line)

    with open(secrets_file, "w") as file:
        file.writelines(new_lines)


def update_ipsec_ip_multi4(new_vxlan_ip):
    def opposite_ip(ip):
        if ":" in ip:
            parts = ip.split(":")
            if parts[-1].endswith("1"):
                parts[-1] = parts[-1][:-1] + "2"
            else:
                parts[-1] = parts[-1][:-1] + "1"
            return ":".join(parts)
        else:
            octets = ip.split(".")
            if octets[-1] == "1":
                octets[-1] = "2"
            else:
                octets[-1] = "1"
            return ".".join(octets)

    secrets_file = "/etc/ipsec.secrets"
    opposite_ip_addr = opposite_ip(new_vxlan_ip)

    with open(secrets_file, "r") as file:
        lines = file.readlines()

    if len(lines) < 4:
        raise ValueError("The secrets file doesn't have at least 4 lines")

    new_lines = []
    for index, line in enumerate(lines):
        if index == 3:
            parts = line.split()
            if len(parts) >= 3 and parts[2] == ":":
                new_line = (
                    f'{opposite_ip_addr} {new_vxlan_ip} : PSK "{parts[-1][1:-1]}"'
                )
                new_lines.append(new_line + "\n")
            else:
                new_lines.append(line)
        else:
            new_lines.append(line)

    with open(secrets_file, "w") as file:
        file.writelines(new_lines)


def update_ipsec_ip_multi5(new_vxlan_ip):
    def opposite_ip(ip):
        if ":" in ip:
            parts = ip.split(":")
            if parts[-1].endswith("1"):
                parts[-1] = parts[-1][:-1] + "2"
            else:
                parts[-1] = parts[-1][:-1] + "1"
            return ":".join(parts)
        else:
            octets = ip.split(".")
            if octets[-1] == "1":
                octets[-1] = "2"
            else:
                octets[-1] = "1"
            return ".".join(octets)

    secrets_file = "/etc/ipsec.secrets"
    opposite_ip_addr = opposite_ip(new_vxlan_ip)

    with open(secrets_file, "r") as file:
        lines = file.readlines()

    if len(lines) < 5:
        raise ValueError("The secrets file doesn't have at least 5 lines")

    new_lines = []
    for index, line in enumerate(lines):
        if index == 4:
            parts = line.split()
            if len(parts) >= 3 and parts[2] == ":":
                new_line = (
                    f'{opposite_ip_addr} {new_vxlan_ip} : PSK "{parts[-1][1:-1]}"'
                )
                new_lines.append(new_line + "\n")
            else:
                new_lines.append(line)
        else:
            new_lines.append(line)

    with open(secrets_file, "w") as file:
        file.writelines(new_lines)


def clear():
    subprocess.run(["clear"])


## edit menu close##


def remote_extraction(file_path):
    with open(file_path, "r") as file:
        content = file.read()
        match_ipv4 = re.search(
            r"remote\s+(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})", content
        )
        match_ipv6 = re.search(r"remote\s+([0-9a-fA-F:]+)", content)
        if match_ipv4:
            return match_ipv4.group(1)
        elif match_ipv6:
            return match_ipv6.group(1)
    return None


def remote_extraction_sit(file_path):
    with open(file_path, "r") as file:
        content = file.read()
        match = re.search(r"remote\s+(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})", content)
        if match:
            return match.group(1)
    return None


def remote_endpoint(file_path):
    with open(file_path, "r") as file:
        content = file.read()
        match = re.search(r"\[Peer\][\s\S]*?Endpoint\s*=\s*([\d\.]+)", content)
        if match:
            return match.group(1)
    return None


def parse_wireguard_config(file_path):
    with open(file_path, "r") as file:
        content = file.read()
    endpoint = re.search(r"Endpoint\s*=\s*(\S+)", content)
    mtu = re.search(r"MTU\s*=\s*(\d+)", content)
    port = re.search(r"ListenPort\s*=\s*(\d+)", content)
    return {
        "endpoint": endpoint.group(1) if endpoint else None,
        "mtu": mtu.group(1) if mtu else None,
        "port": port.group(1) if port else None,
    }


def interface_ex(interface):
    output = subprocess.run(
        ["ip", "a", "show", interface], capture_output=True, text=True
    )
    return output.returncode == 0


def interface_check(interface):
    output = subprocess.run(
        ["ip", "a", "show", interface], capture_output=True, text=True
    )
    if output.returncode == 0:
        if re.search(r"state (UP|UNKNOWN)", output.stdout):
            return "online"
    return "offline"


def wireguard_status():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print("\033[92m(   ) \033[93mWireguard Status Menu\033[0m")
    print('\033[92m "-"\033[93m══════════════════════════\033[0m')
    print("\033[93m╭─────────────────────────────────────────────────╮\033[0m")
    print("\033[93mYou are viewing the status of your current tunnels:\033[0m")

    interfaces = [
        "wireserver5",
        "azumig65",
        "wireserver4",
        "azumig64",
        "wireserver3",
        "azumig63",
        "wireserver2",
        "azumig62",
        "wireserver1",
        "azumig61",
        "wireclient",
        "azumi5",
        "azumi4",
        "azumi3",
        "azumi2",
        "azumi1",
    ]

    active_int = {}
    for interface in interfaces:
        if interface_ex(interface):
            status = interface_check(interface)
            if status == "online":
                active_int[interface] = True

    if not active_int:
        print(" No Interfaces available.")
        return

    config_pairs = [
        (
            "wireserver5",
            "azumig65",
            "/etc/gre65.sh",
            "/etc/wireguard/wireserver5.conf",
            "Server Config [5]",
            "Native GRE6TAP + WireGuard",
            "WireGuard + GRE6TAP",
        ),
        (
            "wireserver4",
            "azumig64",
            "/etc/gre64.sh",
            "/etc/wireguard/wireserver4.conf",
            "Server Config [4]",
            "Native GRE6TAP + WireGuard",
            "WireGuard + GRE6TAP",
        ),
        (
            "wireserver3",
            "azumig63",
            "/etc/gre63.sh",
            "/etc/wireguard/wireserver3.conf",
            "Server Config [3]",
            "Native GRE6TAP + WireGuard",
            "WireGuard + GRE6TAP",
        ),
        (
            "wireserver2",
            "azumig62",
            "/etc/gre62.sh",
            "/etc/wireguard/wireserver2.conf",
            "Server Config [2]",
            "Native GRE6TAP + WireGuard",
            "WireGuard + GRE6TAP",
        ),
        (
            "wireserver1",
            "azumig61",
            "/etc/gre61.sh",
            "/etc/wireguard/wireserver1.conf",
            "Server Config [1]",
            "Native GRE6TAP + WireGuard",
            "WireGuard + GRE6TAP",
        ),
        (
            "wireclient",
            "azumig65",
            "/etc/gre65.sh",
            "/etc/wireguard/wireclient.conf",
            "Client [5]",
            "Native GRE6TAP + WireGuard",
            "WireGuard + GRE6TAP",
        ),
        (
            "wireclient",
            "azumig64",
            "/etc/gre64.sh",
            "/etc/wireguard/wireclient.conf",
            "Client [4]",
            "Native GRE6TAP + WireGuard",
            "WireGuard + GRE6TAP",
        ),
        (
            "wireclient",
            "azumig63",
            "/etc/gre63.sh",
            "/etc/wireguard/wireclient.conf",
            "Client [3]",
            "Native GRE6TAP + WireGuard",
            "WireGuard + GRE6TAP",
        ),
        (
            "wireclient",
            "azumig62",
            "/etc/gre62.sh",
            "/etc/wireguard/wireclient.conf",
            "Client [2]",
            "Native GRE6TAP + WireGuard",
            "WireGuard + GRE6TAP",
        ),
        (
            "wireclient",
            "azumig61",
            "/etc/gre61.sh",
            "/etc/wireguard/wireclient.conf",
            "Client [1]",
            "Native GRE6TAP + WireGuard",
            "WireGuard + GRE6TAP",
        ),
        (
            "wireserver5",
            "azumi5",
            "/etc/private5.sh",
            "/etc/wireguard/wireserver5.conf",
            "Server Config [5]",
            "Sit + Wireguard",
            "Sit + Wireguard",
        ),
        (
            "wireserver4",
            "azumi4",
            "/etc/private4.sh",
            "/etc/wireguard/wireserver4.conf",
            "Server Config [4]",
            "Sit + Wireguard",
            "Sit + Wireguard",
        ),
        (
            "wireserver3",
            "azumi3",
            "/etc/private3.sh",
            "/etc/wireguard/wireserver3.conf",
            "Server Config [3]",
            "Sit + Wireguard",
            "Sit + Wireguard",
        ),
        (
            "wireserver2",
            "azumi2",
            "/etc/private2.sh",
            "/etc/wireguard/wireserver2.conf",
            "Server Config [2]",
            "Sit + Wireguard",
            "Sit + Wireguard",
        ),
        (
            "wireserver1",
            "azumi1",
            "/etc/private1.sh",
            "/etc/wireguard/wireserver1.conf",
            "Server Config [1]",
            "Sit + Wireguard",
            "Sit + Wireguard",
        ),
        (
            "wireclient",
            "azumi5",
            "/etc/private5.sh",
            "/etc/wireguard/wireclient.conf",
            "Client [5]",
            "Sit + Wireguard",
            "Sit + Wireguard",
        ),
        (
            "wireclient",
            "azumi4",
            "/etc/private4.sh",
            "/etc/wireguard/wireclient.conf",
            "Client [4]",
            "Sit + Wireguard",
            "Sit + Wireguard",
        ),
        (
            "wireclient",
            "azumi3",
            "/etc/private3.sh",
            "/etc/wireguard/wireclient.conf",
            "Client [3]",
            "Sit + Wireguard",
            "Sit + Wireguard",
        ),
        (
            "wireclient",
            "azumi2",
            "/etc/private2.sh",
            "/etc/wireguard/wireclient.conf",
            "Client [2]",
            "Sit + Wireguard",
            "Sit + Wireguard",
        ),
        (
            "wireclient",
            "azumi1",
            "/etc/private1.sh",
            "/etc/wireguard/wireclient.conf",
            "Client [1]",
            "Sit + Wireguard",
            "Sit + Wireguard",
        ),
    ]

    displayed_servers = set()

    for (
        int_a,
        int_b,
        gre_file,
        wg_file,
        config_label,
        tunnel_type_ipv6,
        tunnel_type_ipv4,
    ) in config_pairs:
        if active_int.get(int_a) and active_int.get(int_b):
            remote_ip = (
                remote_extraction(gre_file)
                if "private" not in gre_file
                else remote_extraction_sit(gre_file)
            )
            wg_config = parse_wireguard_config(wg_file)

            if remote_ip:
                if config_label not in displayed_servers:
                    if ":" in remote_ip:  # IPv6
                        print(
                            "\033[93m─────────────────────────────────────────────────\033[0m"
                        )
                        print(f" \033[93mThis is \033[92m{config_label}\033[0m")
                        print(
                            f" \033[97mTunnel Type: \033[92m{tunnel_type_ipv6}\033[0m"
                        )
                        print(
                            f" \033[93mRemote \033[92m[Client]\033[93m IP Address : \033[97m{remote_ip}\033[0m"
                        )
                    else:  # IPv4
                        print(
                            "\033[93m─────────────────────────────────────────────────\033[0m"
                        )
                        print(f" \033[93mThis is \033[92m{config_label}\033[0m")
                        print(
                            f" \033[97mTunnel Type: \033[92m{tunnel_type_ipv4}\033[0m"
                        )
                        if wg_config["endpoint"]:
                            print(
                                f" \033[93mRemote \033[92m[Client]\033[93m IP Address : \033[97m{wg_config['endpoint'].split(':')[0]}\033[0m"
                            )

                    print(f" \033[93mPort: \033[97m{wg_config['port']}\033[0m")
                    print(f" \033[93mMTU: \033[97m{wg_config['mtu']}\033[0m")

                    displayed_servers.add(config_label)

    additional_servers = [
        (
            "wireserver5",
            "Server Config [5]",
            "/etc/wireguard/wireserver5.conf",
        ),
        (
            "wireserver4",
            "Server Config [4]",
            "/etc/wireguard/wireserver4.conf",
        ),
        (
            "wireserver3",
            "Server Config [3]",
            "/etc/wireguard/wireserver3.conf",
        ),
        (
            "wireserver2",
            "Server Config [2]",
            "/etc/wireguard/wireserver2.conf",
        ),
        (
            "wireserver1",
            "Server Config [1]",
            "/etc/wireguard/wireserver1.conf",
        ),
        ("wireclient", "Client", "/etc/wireguard/wireclient.conf"),
    ]

    for interface, label, config_path in additional_servers:
        if active_int.get(interface) and label not in displayed_servers:
            remote_ip = remote_endpoint(config_path)
            wg_config = parse_wireguard_config(config_path)

            if remote_ip:
                print(
                    "\033[93m─────────────────────────────────────────────────\033[0m"
                )
                print(f" \033[93mThis is \033[92m{label}\033[0m")
                print(f" \033[97mTunnel Type: \033[92mWireGuard UDP\033[0m")
                print(
                    f" \033[93mRemote \033[92mClient\033[93m IP Address  \033[96m[{interface[-1]}]: \033[97m{remote_ip}\033[0m"
                )
                print(f" \033[93mPort: \033[97m{wg_config['port']}\033[0m")
                print(f" \033[93mMTU: \033[97m{wg_config['mtu']}\033[0m")
                print(
                    "\033[93m─────────────────────────────────────────────────\033[0m"
                )
    print("\033[93m─────────────────────────────────────────────────\033[0m")
    print("0.\033[97mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")
    while True:
        server_type = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if server_type == "0":
            os.system("clear")
            wireguard_allinone_mnu()
            break
        else:
            print("Invalid choice.")


##this can be removed ###


def write_config(file_path, content):
    with open(file_path, "w") as file:
        file.write(content)


def iran_ping1_script(ip_address, max_pings, interval):
    file_path = "/etc/ping_ip1.sh"

    if os.path.exists(file_path):
        os.remove(file_path)

    script_content = f"""#!/bin/bash

ip_address="{ip_address}"

max_pings={max_pings}

interval={interval}

while true
do
    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{{print $2}}" | awk -F " " "{{print $1}}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done

    echo "Waiting for $interval seconds..."
    sleep $interval
done
"""

    with open(file_path, "w") as file:
        file.write(script_content)

    command = f"chmod +x {file_path}"
    subprocess.run(command, shell=True, check=True)


def iran_ping2_script(ip_address, max_pings, interval):
    file_path = "/etc/ping_ip2.sh"

    if os.path.exists(file_path):
        os.remove(file_path)

    script_content = f"""#!/bin/bash

ip_address="{ip_address}"

max_pings={max_pings}

interval={interval}

while true
do
    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{{print $2}}" | awk -F " " "{{print $1}}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done

    echo "Waiting for $interval seconds..."
    sleep $interval
done
"""

    with open(file_path, "w") as file:
        file.write(script_content)

    command = f"chmod +x {file_path}"
    subprocess.run(command, shell=True, check=True)


def iran_ping3_script(ip_address, max_pings, interval):
    file_path = "/etc/ping_ip3.sh"

    if os.path.exists(file_path):
        os.remove(file_path)

    script_content = f"""#!/bin/bash

ip_address="{ip_address}"

max_pings={max_pings}

interval={interval}

while true
do
    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{{print $2}}" | awk -F " " "{{print $1}}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done

    echo "Waiting for $interval seconds..."
    sleep $interval
done
"""

    with open(file_path, "w") as file:
        file.write(script_content)

    command = f"chmod +x {file_path}"
    subprocess.run(command, shell=True, check=True)


def iran_ping4_script(ip_address, max_pings, interval):
    file_path = "/etc/ping_ip4.sh"

    if os.path.exists(file_path):
        os.remove(file_path)

    script_content = f"""#!/bin/bash

ip_address="{ip_address}"

max_pings={max_pings}

interval={interval}

while true
do
    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{{print $2}}" | awk -F " " "{{print $1}}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done

    echo "Waiting for $interval seconds..."
    sleep $interval
done
"""

    with open(file_path, "w") as file:
        file.write(script_content)

    command = f"chmod +x {file_path}"
    subprocess.run(command, shell=True, check=True)


def iran_ping5_script(ip_address, max_pings, interval):
    file_path = "/etc/ping_ip5.sh"

    if os.path.exists(file_path):
        os.remove(file_path)

    script_content = f"""#!/bin/bash

ip_address="{ip_address}"

max_pings={max_pings}

interval={interval}

while true
do
    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{{print $2}}" | awk -F " " "{{print $1}}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done

    echo "Waiting for $interval seconds..."
    sleep $interval
done
"""

    with open(file_path, "w") as file:
        file.write(script_content)

    command = f"chmod +x {file_path}"
    subprocess.run(command, shell=True, check=True)


def display_checkmark(message):
    print("\u2714 " + message)


def check_wireguard_installed():
    try:
        subprocess.check_output(["dpkg", "-s", "wireguard"])
        print("\033[92mWireGuard is already installed\033[0m")
    except subprocess.CalledProcessError:
        print("\033[93mWireGuard is not installed. \033[92mInstalling now..\033[0m")
        wire(["sudo", "apt-get", "install", "wireguard", "-y"])
        animate("\033[92mWireGuard is installed\033[0m")


def generate_keys():
    private_key = (
        subprocess.check_output("wg genkey", shell=True).strip().decode("utf-8")
    )
    public_key = (
        subprocess.check_output(f"echo {private_key} | wg pubkey", shell=True)
        .strip()
        .decode("utf-8")
    )
    return private_key, public_key


def keynconfig(keypath, content):
    with open(keypath, "w") as file:
        file.write(content)


def display_notification(message):
    print("\u2728 " + message)


def permissionz():
    print("Setting permissions for config files...")
    subprocess.run(
        ["sudo", "chmod", "600", "/etc/ipsec.secrets"],
        stdout=subprocess.DEVNULL,
        stderr=subprocess.DEVNULL,
    )
    subprocess.run(
        ["sudo", "chmod", "600", "/etc/ipsec1.conf"],
        stdout=subprocess.DEVNULL,
        stderr=subprocess.DEVNULL,
    )
    print("Setting permissions was successful.")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")


def config_ipsecn1k(psk, num_servers):
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[93mInstalling IPSEC..\033[0m")
    install_process = subprocess.Popen(["sudo", "apt", "install", "strongswan", "-y"])
    install_process.wait()
    print("IPSEC Installation complete.")

    subprocess.run(
        ["sudo", "systemctl", "disable", "strongswan-starter"],
        stdout=subprocess.DEVNULL,
        stderr=subprocess.DEVNULL,
    )
    subprocess.run(
        ["sudo", "systemctl", "stop", "strongswan-starter"],
        stdout=subprocess.DEVNULL,
        stderr=subprocess.DEVNULL,
    )
    subprocess.run(
        ["sudo", "systemctl", "disable", "strongswan"],
        stdout=subprocess.DEVNULL,
        stderr=subprocess.DEVNULL,
    )
    subprocess.run(
        ["sudo", "systemctl", "stop", "strongswan"],
        stdout=subprocess.DEVNULL,
        stderr=subprocess.DEVNULL,
    )
    subprocess.run(
        ["sudo", "rm", "/etc/ipsec1.conf"],
        stdout=subprocess.DEVNULL,
        stderr=subprocess.DEVNULL,
    )
    subprocess.run(
        ["sudo", "rm", "/etc/ipsec.secrets"],
        stdout=subprocess.DEVNULL,
        stderr=subprocess.DEVNULL,
    )

    with open(f"/etc/ipsec1.conf", "w") as f:
        f.write("config setup\n")
        f.write('  charondebug="all"\n')
        f.write("  uniqueids=no\n")
        f.write("##azumiisinyourarea\n")

        for i in range(num_servers):
            f.write(f"\nconn GRE6{i+1}\n")
            f.write("  left=%defaultroute\n")
            f.write(f"  leftsubnet=2002:8{i+0}1a::1/64\n")
            f.write(f"  leftid=2002:8{i+0}1a::1\n")
            f.write(f"  right=2002:8{i+0}1a::2\n")
            f.write(f"  rightsubnet=2002:8{i+0}1a::2/64\n")
            f.write("  ike=aes256gcm16-sha512-ecp384!\n")
            f.write("  esp=aes256gcm16-sha512-ecp384!\n")
            f.write("  keyexchange=ikev2\n")
            f.write("  auto=start\n")
            f.write("  authby=secret\n")
            f.write("  keyingtries=%forever\n")
            f.write("  dpdaction=restart\n")
            f.write("  dpddelay=30s\n")
            f.write("  dpdtimeout=120s\n")
            f.write("  rekeymargin=3m\n")
            f.write("  rekeyfuzz=100%\n")
            f.write("  reauth=no\n")

    subprocess.run(
        ["sudo", "chmod", "+x", f"/etc/ipsec1.conf"],
        stdout=subprocess.DEVNULL,
        stderr=subprocess.DEVNULL,
    )

    with open("/etc/ipsec.secrets", "w") as f:
        for i in range(num_servers):
            f.write(f'2002:8{i+0}1a::2 2002:8{i+0}1a::1 : PSK "{psk}"\n')

    subprocess.run(
        ["sudo", "chmod", "+x", "/etc/ipsec.secrets"],
        stdout=subprocess.DEVNULL,
        stderr=subprocess.DEVNULL,
    )

    with open("/etc/systemd/system/strong-azumi1.service", "w") as f:
        f.write(
            """[Unit]
Description=strongazumi IPsec IKEv1/IKEv2 daemon using ipsec.conf
After=network-online.target

[Service]
ExecStart=/usr/sbin/ipsec start --nofork"""
        )

        for i in range(num_servers):
            f.write(f" --conf /etc/ipsec1.conf")

        f.write(
            """
ExecReload=/usr/sbin/ipsec reload
Restart=always
RestartSec=5
LimitNOFILE=1048576

[Install]
WantedBy=multi-user.target\n"""
        )

    permissionz()
    subprocess.run(
        ["sudo", "systemctl", "daemon-reload"],
        stdout=subprocess.DEVNULL,
        stderr=subprocess.DEVNULL,
    )
    subprocess.run(
        ["sudo", "systemctl", "enable", "strong-azumi1"],
        stdout=subprocess.DEVNULL,
        stderr=subprocess.DEVNULL,
    )
    subprocess.run(
        ["sudo", "systemctl", "restart", "strong-azumi1"],
        stdout=subprocess.DEVNULL,
        stderr=subprocess.DEVNULL,
    )


def config_ipsecn1i(psk, num_servers):
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[93mInstalling IPSEC..\033[0m")
    install_process = subprocess.Popen(["sudo", "apt", "install", "strongswan", "-y"])
    install_process.wait()
    print("IPSEC Installation complete.")

    subprocess.run(
        ["sudo", "systemctl", "disable", "strongswan-starter"],
        stdout=subprocess.DEVNULL,
        stderr=subprocess.DEVNULL,
    )
    subprocess.run(
        ["sudo", "systemctl", "stop", "strongswan-starter"],
        stdout=subprocess.DEVNULL,
        stderr=subprocess.DEVNULL,
    )
    subprocess.run(
        ["sudo", "systemctl", "disable", "strongswan"],
        stdout=subprocess.DEVNULL,
        stderr=subprocess.DEVNULL,
    )
    subprocess.run(
        ["sudo", "systemctl", "stop", "strongswan"],
        stdout=subprocess.DEVNULL,
        stderr=subprocess.DEVNULL,
    )
    subprocess.run(
        ["sudo", "rm", "/etc/ipsec1.conf"],
        stdout=subprocess.DEVNULL,
        stderr=subprocess.DEVNULL,
    )
    subprocess.run(
        ["sudo", "rm", "/etc/ipsec.secrets"],
        stdout=subprocess.DEVNULL,
        stderr=subprocess.DEVNULL,
    )

    with open(f"/etc/ipsec1.conf", "w") as f:
        f.write("config setup\n")
        f.write('  charondebug="all"\n')
        f.write("  uniqueids=no\n")
        f.write("##azumiisinyourarea\n")

        for i in range(num_servers):
            f.write(f"\nconn GRE6{i+1}\n")
            f.write("  left=%defaultroute\n")
            f.write(f"  leftsubnet=2002:8{i+0}1a::2/64\n")
            f.write(f"  leftid=2002:8{i+0}1a::2\n")
            f.write(f"  right=2002:8{i+0}1a::1\n")
            f.write(f"  rightsubnet=2002:8{i+0}1a::1/64\n")
            f.write("  ike=aes256gcm16-sha512-ecp384!\n")
            f.write("  esp=aes256gcm16-sha512-ecp384!\n")
            f.write("  keyexchange=ikev2\n")
            f.write("  auto=start\n")
            f.write("  authby=secret\n")
            f.write("  keyingtries=%forever\n")
            f.write("  dpdaction=restart\n")
            f.write("  dpddelay=30s\n")
            f.write("  dpdtimeout=120s\n")
            f.write("  rekeymargin=3m\n")
            f.write("  rekeyfuzz=100%\n")
            f.write("  reauth=no\n")

    subprocess.run(
        ["sudo", "chmod", "+x", f"/etc/ipsec1.conf"],
        stdout=subprocess.DEVNULL,
        stderr=subprocess.DEVNULL,
    )

    with open("/etc/ipsec.secrets", "w") as f:
        for i in range(num_servers):
            f.write(f'2002:8{i+0}1a::1 2002:8{i+0}1a::2 : PSK "{psk}"\n')

    subprocess.run(
        ["sudo", "chmod", "+x", "/etc/ipsec.secrets"],
        stdout=subprocess.DEVNULL,
        stderr=subprocess.DEVNULL,
    )

    with open("/etc/systemd/system/strong-azumi1.service", "w") as f:
        f.write(
            """[Unit]
Description=strongazumi IPsec IKEv1/IKEv2 daemon using ipsec.conf
After=network-online.target

[Service]
ExecStart=/usr/sbin/ipsec start --nofork"""
        )

        for i in range(num_servers):
            f.write(f" --conf /etc/ipsec1.conf")

        f.write(
            """
ExecReload=/usr/sbin/ipsec reload
Restart=always
RestartSec=5
LimitNOFILE=1048576

[Install]
WantedBy=multi-user.target\n"""
        )

    permissionz()
    subprocess.run(
        ["sudo", "systemctl", "daemon-reload"],
        stdout=subprocess.DEVNULL,
        stderr=subprocess.DEVNULL,
    )
    subprocess.run(
        ["sudo", "systemctl", "enable", "strong-azumi1"],
        stdout=subprocess.DEVNULL,
        stderr=subprocess.DEVNULL,
    )
    subprocess.run(
        ["sudo", "systemctl", "restart", "strong-azumi1"],
        stdout=subprocess.DEVNULL,
        stderr=subprocess.DEVNULL,
    )


def restart_forced_strongazumi():
    subprocess.run(
        ["sudo", "systemctl", "restart", "strong-azumi1"], stdout=subprocess.DEVNULL
    )


def iran_gre61_service():
    service_content = """[Unit]
Description=keepalive
After=network.target

[Service]
ExecStart=/bin/bash /etc/ping_ip1.sh
Restart=always

[Install]
WantedBy=multi-user.target
"""

    service_file_path = "/etc/systemd/system/ping_ip1.service"
    with open(service_file_path, "w") as service_file:
        service_file.write(service_content)

    subprocess.run(["systemctl", "daemon-reload"])
    subprocess.run(["systemctl", "enable", "ping_ip1.service"])
    subprocess.run(["systemctl", "start", "ping_ip1.service"])
    subprocess.run(["systemctl", "restart", "ping_ip1.service"])


def iran_gre62_service():
    service_content = """[Unit]
Description=keepalive
After=network.target

[Service]
ExecStart=/bin/bash /etc/ping_ip2.sh
Restart=always

[Install]
WantedBy=multi-user.target
"""

    service_file_path = "/etc/systemd/system/ping_ip2.service"
    with open(service_file_path, "w") as service_file:
        service_file.write(service_content)

    subprocess.run(["systemctl", "daemon-reload"])
    subprocess.run(["systemctl", "enable", "ping_ip2.service"])
    subprocess.run(["systemctl", "start", "ping_ip2.service"])
    subprocess.run(["systemctl", "restart", "ping_ip2.service"])


def iran_gre63_service():
    service_content = """[Unit]
Description=keepalive
After=network.target

[Service]
ExecStart=/bin/bash /etc/ping_ip3.sh
Restart=always

[Install]
WantedBy=multi-user.target
"""

    service_file_path = "/etc/systemd/system/ping_ip3.service"
    with open(service_file_path, "w") as service_file:
        service_file.write(service_content)

    subprocess.run(["systemctl", "daemon-reload"])
    subprocess.run(["systemctl", "enable", "ping_ip3.service"])
    subprocess.run(["systemctl", "start", "ping_ip3.service"])
    subprocess.run(["systemctl", "restart", "ping_ip3.service"])


def iran_gre64_service():
    service_content = """[Unit]
Description=keepalive
After=network.target

[Service]
ExecStart=/bin/bash /etc/ping_ip4.sh
Restart=always

[Install]
WantedBy=multi-user.target
"""

    service_file_path = "/etc/systemd/system/ping_ip4.service"
    with open(service_file_path, "w") as service_file:
        service_file.write(service_content)

    subprocess.run(["systemctl", "daemon-reload"])
    subprocess.run(["systemctl", "enable", "ping_ip4.service"])
    subprocess.run(["systemctl", "start", "ping_ip4.service"])
    subprocess.run(["systemctl", "restart", "ping_ip4.service"])


def iran_gre65_service():
    service_content = """[Unit]
Description=keepalive
After=network.target

[Service]
ExecStart=/bin/bash /etc/ping_ip5.sh
Restart=always

[Install]
WantedBy=multi-user.target
"""

    service_file_path = "/etc/systemd/system/ping_ip5.service"
    with open(service_file_path, "w") as service_file:
        service_file.write(service_content)

    subprocess.run(["systemctl", "daemon-reload"])
    subprocess.run(["systemctl", "enable", "ping_ip5.service"])
    subprocess.run(["systemctl", "start", "ping_ip5.service"])
    subprocess.run(["systemctl", "restart", "ping_ip5.service"])


### this can be removed ^^^ ####


# this is the question for 1 iran 5 kharej
def irangretap_q_wire(server_ips, client_ips):
    print("\033[93m───────────────────────────────────────\033[0m")
    display_notification("\033[93mGRE6Tap IRAN Config !\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")

    ipsec_choice = (
        input(
            "\033[93mDo you want to configure IPsec? (\033[92myes\033[93m or \033[91mno): \033[0m"
        )
        .strip()
        .lower()
    )

    if ipsec_choice in ["yes", "y"]:
        num_servers = len(client_ips)
        psk = input("\033[93mEnter the \033[92mSecret key\033[93m: \033[0m")
        config_ipsecn1i(psk, num_servers)

    num_servers = len(client_ips)
    for i in range(1, num_servers + 1):
        menu_name = "gre6tap2_iran{}_wireguard".format(i)
        globals()[menu_name](server_ips[i - 1], client_ips[i - 1])

    restart_forced_strongazumi()


# this is the question for 1 kharej 5 iran
def kharejgretap_q_wire(server_ips, client_ips):
    print("\033[93m───────────────────────────────────────\033[0m")
    display_notification("\033[93mGRE6Tap Kharej Config !\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")

    ipsec_choice = (
        input(
            "\033[93mDo you want to configure IPsec? (\033[92myes\033[93m or \033[91mno): \033[0m"
        )
        .strip()
        .lower()
    )

    if ipsec_choice in ["yes", "y"]:
        num_servers = len(client_ips)
        psk = input("\033[93mEnter the \033[92mSecret key\033[93m: \033[0m")
        config_ipsecn1k(psk, num_servers)

    num_servers = len(client_ips)
    for i in range(num_servers):
        menu_name = "gre6tap2_kharej{}_wireguard".format(i + 1)
        globals()[menu_name](server_ips[i], client_ips[i])

    restart_forced_strongazumi()


def ipaddr(options, iptype):
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    print(f"\033[93mChoose an IPv6 address for {iptype}:\033[0m")
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    for i, option in enumerate(options, 1):
        print(f"{i}) {option}")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")
    choice = int(input("\033[93mPlease choose: \033[0m"))
    if choice == len(options):
        print(
            "\033[93m─────────────────────────────────────────────────────────\033[0m"
        )
        return input(f"\033[93mEnter the Manual IPv6 address for {iptype}: \033[0m")
    return options[choice - 1]


def animate(message):
    for char in message:
        print(char, end="", flush=True)
        time.sleep(0.05)
    print()


def anime():
    animation = [
        "[=     ]",
        "[==    ]",
        "[===   ]",
        "[====  ]",
        "[===== ]",
        "[======]",
        "[===== ]",
        "[====  ]",
        "[===   ]",
        "[==    ]",
        "[=     ]",
    ]
    for i in range(20):
        time.sleep(0.1)
        sys.stdout.write(f"\r{animation[i % len(animation)]}")
        sys.stdout.flush()
    sys.stdout.write("\r")
    sys.stdout.flush()


def wire(command):
    process = subprocess.Popen(
        command, stdout=subprocess.DEVNULL, stderr=subprocess.PIPE
    )
    while process.poll() is None:
        anime()
    _, stderr = process.communicate()
    if process.returncode != 0:
        print(f"\033[91merror: {stderr.decode()}\033[0m")


def hide(command):
    process = subprocess.Popen(
        command, shell=True, stdout=subprocess.DEVNULL, stderr=subprocess.PIPE
    )
    while process.poll() is None:
        anime()
    _, stderr = process.communicate()
    if process.returncode != 0:
        print(f"\033[91merror: {stderr.decode()}\033[0m")


def ipaddrv6(ip_options, config_name, ip_type="ipv6"):
    if ip_type == "ipv6":
        return ip_options[0]
    else:
        return ip_options[1]


def servernclient_ipv6(client_num):
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    print(f"\033[93mConfiguring Server & Client {client_num}\033[0m")

    server_private_key, server_public_key = generate_keys()
    client_private_key, client_public_key = generate_keys()

    print(f"\033[93m───────────────────────────────────────\033[0m")
    print(
        f"\033[92mKharej\033[93m Server\033[96m Config\033[97m {client_num}\033[93m Keys:\033[0m"
    )
    print(f"\033[93m───────────────────────────────────────\033[0m")
    print(
        f"\033[93m╭──────────────────────────────────────────────────────────╮\033[0m"
    )
    print(f"  Private Key:\033[96m {server_private_key}\033[0m")
    print(f"  Public  Key:\033[96m {server_public_key}\033[0m")
    print(
        f"\033[93m╰──────────────────────────────────────────────────────────╯\033[0m"
    )

    print(f"\033[93m───────────────────────────────────────\033[0m")
    print(f"\033[92mIRAN\033[93m Client\033[96m {client_num}\033[93m Keys:\033[0m")
    print(f"\033[93m───────────────────────────────────────\033[0m")
    print(
        f"\033[93m╭──────────────────────────────────────────────────────────╮\033[0m"
    )
    print(f"  Private Key:\033[96m {client_private_key}\033[0m")
    print(f"  Public  Key:\033[96m {client_public_key}\033[0m")
    print(
        f"\033[93m╰──────────────────────────────────────────────────────────╯\033[0m"
    )

    ipoptions = {
        1: ["2001:dc5::1", "fd1d:cd1::1", "manual"],
        2: ["2001:de5::1", "fd1d:ed1::1", "manual"],
        3: ["2001:df5::1", "fd1d:fd1::1", "manual"],
        4: ["2001:da5::1", "fd1d:ad1::1", "manual"],
        5: ["2001:db5::1", "fd1d:bd1::1", "manual"],
    }
    subnet = "64"

    print("\033[93m───────────────────────────────────────\033[0m")
    print(
        f"\033[93mSelect \033[92mKharej \033[93mServer \033[97mConfig\033[96m {client_num}\033[93m IP:\033[0m"
    )
    print(f"\033[93m╭───────────────────────────────────────╮\033[0m")
    for idx, ip in enumerate(ipoptions[client_num], start=1):
        print(f"{idx}. {ip}")
    print(f"\033[93m╰───────────────────────────────────────╯\033[0m")

    choice = (
        int(input(f"\033[93mChoose IP [1-{len(ipoptions[client_num])}]: \033[0m")) - 1
    )
    server_ip = ipoptions[client_num][choice]

    server_port = input(
        f"\033[93mEnter \033[92mTunnel {client_num}\033[93m Port: \033[0m"
    )

    client_public_ip = input(
        f"\033[93mEnter \033[92mIRAN \033[93mClient \033[96m{client_num}\033[93m IPV4: \033[0m"
    )

    ipoptions = {
        1: ["2001:dc5::2", "fd1d:cd1::2", "manual"],
        2: ["2001:de5::2", "fd1d:ed1::2", "manual"],
        3: ["2001:df5::2", "fd1d:fd1::2", "manual"],
        4: ["2001:da5::2", "fd1d:ad1::2", "manual"],
        5: ["2001:db5::2", "fd1d:bd1::2", "manual"],
    }
    client_subnet = "128"

    print("\033[93m───────────────────────────────────────\033[0m")
    print(
        f"\033[93mSelect \033[92mClient IP \033[93mfor \033[97m IRAN Client \033[96m{client_num}\033[93m:\033[0m"
    )
    print(f"\033[93m╭───────────────────────────────────────╮\033[0m")
    for idx, ip in enumerate(ipoptions[client_num], start=1):
        print(f"{idx}. {ip}")
    print(f"\033[93m╰───────────────────────────────────────╯\033[0m")

    choice = (
        int(input(f"\033[93mChoose IP [1-{len(ipoptions[client_num])}]: \033[0m")) - 1
    )
    client_ip = ipoptions[client_num][choice]

    print("\033[93m───────────────────────────────────────\033[0m")
    find_interface = input(
        "\033[93mDo you want meh to find the \033[92mmain interface\033[96m automatically\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m"
    )
    if find_interface.lower() in ["yes", "y"]:
        interface = main_interface()
        if interface is None:
            print("\033[91merror: Couldn't find your network interface.\033[0m")
            return
    else:
        interface = input(
            "\033[93mWhat is your \033[92mmain interface\033[93m? \033[0m"
        )

    print("\033[93m───────────────────────────────────────\033[0m")
    mtu_config = ""
    mtu_choice = input(
        f"\033[93mDo you want to set \033[92mWireguard MTU\033[93m for \033[92mKharej Server\033[97m Config \033[92m{client_num} \033[93m(\033[92myes\033[93m/\033[91mno\033[93m): \033[0m"
    ).lower()
    if mtu_choice in ["yes", "y"]:
        mtu_value = input(
            f"\033[93mEnter MTU value for \033[92mKharej Server\033[97m Config \033[92m{client_num} \033[93m: \033[0m"
        )
        mtu_config = f"MTU = {mtu_value}\n"

    server_config = f"""
[Interface]
PrivateKey = {server_private_key}
Address = {server_ip}/{subnet}
ListenPort = {server_port}
{mtu_config}
PostUp = iptables -I INPUT -p udp --dport {server_port} -j ACCEPT
PostUp = iptables -I FORWARD -i {interface} -o wireserver{client_num} -j ACCEPT
PostUp = iptables -I FORWARD -i wireserver{client_num} -j ACCEPT
PostUp = iptables -t nat -A POSTROUTING -o {interface} -j MASQUERADE
PostUp = ip6tables -I FORWARD -i wireserver{client_num} -j ACCEPT
PostUp = ip6tables -t nat -A POSTROUTING -o {interface} -j MASQUERADE
PostDown = iptables -D INPUT -p udp --dport {server_port} -j ACCEPT
PostDown = iptables -D FORWARD -i {interface} -o wireserver{client_num} -j ACCEPT
PostDown = iptables -D FORWARD -i wireserver{client_num} -j ACCEPT
PostDown = iptables -t nat -D POSTROUTING -o {interface} -j MASQUERADE
PostDown = ip6tables -D FORWARD -i wireserver{client_num} -j ACCEPT
PostDown = ip6tables -t nat -D POSTROUTING -o {interface} -j MASQUERADE

[Peer]
PublicKey = {client_public_key}
AllowedIPs = {client_ip}/{client_subnet}
Endpoint = {client_public_ip}:{server_port}
"""

    server_confpath = f"/etc/wireguard/wireserver{client_num}.conf"
    keynconfig(server_confpath, server_config)
    ufwportudp(server_port)
    wg(client_num)

    return server_ip, client_ip, "ipv6"


def wg(client_num):
    try:
        disable_command = f"sudo systemctl stop wg-quick@wireserver{client_num}"
        daemon_reload_command = "sudo systemctl daemon-reload"
        enable_command = f"sudo systemctl enable wg-quick@wireserver{client_num}"
        restart_command = f"wg-quick up /etc/wireguard/wireserver{client_num}.conf"

        subprocess.run(disable_command, shell=True, check=True)
        subprocess.run(daemon_reload_command, shell=True, check=True)
        subprocess.run(enable_command, shell=True, check=True)
        subprocess.run(restart_command, shell=True, check=True)

        display_checkmark(
            f"\033[92mWireGuard configuration for wireserver\033[96m{client_num} activated\033[0m"
        )
    except subprocess.CalledProcessError as e:
        print(f"\033[91mError: failed to activate the service\033[0m")
        print(
            f"\033[97mSkipping the activation of wireserver\033[91m{client_num}\033[0m"
        )


# iran server kharej client
def servernclient2_ipv6(client_num):
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    print(f"\033[93mConfiguring Server & Client {client_num}\033[0m")

    server_private_key, server_public_key = generate_keys()
    client_private_key, client_public_key = generate_keys()

    print(f"\033[93m───────────────────────────────────────\033[0m")
    print(
        f"\033[92mIRAN\033[93m Server\033[96m Config\033[97m {client_num}\033[93m Keys:\033[0m"
    )
    print(f"\033[93m───────────────────────────────────────\033[0m")
    print(
        f"\033[93m╭──────────────────────────────────────────────────────────╮\033[0m"
    )
    print(f"  Private Key:\033[96m {server_private_key}\033[0m")
    print(f"  Public  Key:\033[96m {server_public_key}\033[0m")
    print(
        f"\033[93m╰──────────────────────────────────────────────────────────╯\033[0m"
    )

    print(f"\033[93m───────────────────────────────────────\033[0m")
    print(f"\033[92mKharej\033[93m Client\033[96m {client_num}\033[93m Keys:\033[0m")
    print(f"\033[93m───────────────────────────────────────\033[0m")
    print(
        f"\033[93m╭──────────────────────────────────────────────────────────╮\033[0m"
    )
    print(f"  Private Key:\033[96m {client_private_key}\033[0m")
    print(f"  Public  Key:\033[96m {client_public_key}\033[0m")
    print(
        f"\033[93m╰──────────────────────────────────────────────────────────╯\033[0m"
    )

    ipoptions = {
        1: ["2001:dc5::1", "fd1d:cd1::1", "manual"],
        2: ["2001:de5::1", "fd1d:ed1::1", "manual"],
        3: ["2001:df5::1", "fd1d:fd1::1", "manual"],
        4: ["2001:da5::1", "fd1d:ad1::1", "manual"],
        5: ["2001:db5::1", "fd1d:bd1::1", "manual"],
    }
    subnet = "64"

    print("\033[93m───────────────────────────────────────\033[0m")
    print(
        f"\033[93mSelect \033[92mIRAN \033[93mServer \033[97mConfig\033[96m {client_num}\033[93m IP:\033[0m"
    )
    print(f"\033[93m╭───────────────────────────────────────╮\033[0m")
    for idx, ip in enumerate(ipoptions[client_num], start=1):
        print(f"{idx}. {ip}")
    print(f"\033[93m╰───────────────────────────────────────╯\033[0m")

    choice = (
        int(input(f"\033[93mChoose IP [1-{len(ipoptions[client_num])}]: \033[0m")) - 1
    )
    server_ip = ipoptions[client_num][choice]

    server_port = input(
        f"\033[93mEnter \033[92mTunnel {client_num}\033[93m Port: \033[0m"
    )

    client_public_ip = input(
        f"\033[93mEnter \033[92mKharej \033[93mClient \033[96m{client_num}\033[93m IPV4: \033[0m"
    )

    ipoptions = {
        1: ["2001:dc5::2", "fd1d:cd1::2", "manual"],
        2: ["2001:de5::2", "fd1d:ed1::2", "manual"],
        3: ["2001:df5::2", "fd1d:fd1::2", "manual"],
        4: ["2001:da5::2", "fd1d:ad1::2", "manual"],
        5: ["2001:db5::2", "fd1d:bd1::2", "manual"],
    }
    client_subnet = "128"

    print("\033[93m───────────────────────────────────────\033[0m")
    print(
        f"\033[93mSelect \033[92mClient IP \033[93mfor \033[97m IRAN Client \033[96m{client_num}\033[93m:\033[0m"
    )
    print(f"\033[93m╭───────────────────────────────────────╮\033[0m")
    for idx, ip in enumerate(ipoptions[client_num], start=1):
        print(f"{idx}. {ip}")
    print(f"\033[93m╰───────────────────────────────────────╯\033[0m")

    choice = (
        int(input(f"\033[93mChoose IP [1-{len(ipoptions[client_num])}]: \033[0m")) - 1
    )
    client_ip = ipoptions[client_num][choice]

    print("\033[93m───────────────────────────────────────\033[0m")
    find_interface = input(
        "\033[93mDo you want meh to find the \033[92mmain interface\033[96m automatically\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m"
    )
    if find_interface.lower() in ["yes", "y"]:
        interface = main_interface()
        if interface is None:
            print("\033[91merror: Couldn't find your network interface.\033[0m")
            return
    else:
        interface = input(
            "\033[93mWhat is your \033[92mmain interface\033[93m? \033[0m"
        )

    print("\033[93m───────────────────────────────────────\033[0m")
    mtu_config = ""
    mtu_choice = input(
        f"\033[93mDo you want to set \033[92mWireguard MTU\033[93m for \033[92mIRAN Server\033[97m Config \033[92m{client_num} \033[93m(\033[92myes\033[93m/\033[91mno\033[93m): \033[0m"
    ).lower()
    if mtu_choice in ["yes", "y"]:
        mtu_value = input(
            f"\033[93mEnter MTU value for \033[92mIRAN Server\033[97m Config \033[92m{client_num} \033[93m: \033[0m"
        )
        mtu_config = f"MTU = {mtu_value}\n"

    server_config = f"""
[Interface]
PrivateKey = {server_private_key}
Address = {server_ip}/{subnet}
ListenPort = {server_port}
{mtu_config}
PostUp = iptables -I INPUT -p udp --dport {server_port} -j ACCEPT
PostUp = iptables -I FORWARD -i {interface} -o wireserver{client_num} -j ACCEPT
PostUp = iptables -I FORWARD -i wireserver{client_num} -j ACCEPT
PostUp = iptables -t nat -A POSTROUTING -o {interface} -j MASQUERADE
PostUp = ip6tables -I FORWARD -i wireserver{client_num} -j ACCEPT
PostUp = ip6tables -t nat -A POSTROUTING -o {interface} -j MASQUERADE
PostDown = iptables -D INPUT -p udp --dport {server_port} -j ACCEPT
PostDown = iptables -D FORWARD -i {interface} -o wireserver{client_num} -j ACCEPT
PostDown = iptables -D FORWARD -i wireserver{client_num} -j ACCEPT
PostDown = iptables -t nat -D POSTROUTING -o {interface} -j MASQUERADE
PostDown = ip6tables -D FORWARD -i wireserver{client_num} -j ACCEPT
PostDown = ip6tables -t nat -D POSTROUTING -o {interface} -j MASQUERADE

[Peer]
PublicKey = {client_public_key}
AllowedIPs = {client_ip}/{client_subnet}
Endpoint = {client_public_ip}:{server_port}
"""

    server_confpath = f"/etc/wireguard/wireserver{client_num}.conf"
    keynconfig(server_confpath, server_config)
    ufwportudp(server_port)
    wg(client_num)

    return server_ip, client_ip, "ipv6"


def wireguardgre6tap_mnu():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print("\033[92m(   ) \033[93mWireguard + GRE6tap + IPSEC \033[93mMenu\033[0m")
    print(
        '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
    )
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[92mWireguard + GRE6tap - [1]Kharej Server [5]IRAN Clients\033[0m")
    print("2. \033[93mWireguard + GRE6tap - [1]IRAN   Server [5]Kharej Clients\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    print("0.\033[97mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")
    while True:
        server_type = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if server_type == "1":
            gre6tapkharej_wireguard_menu()
            break
        elif server_type == "2":
            gre6tapiran_wireguard_menu()
            break
        elif server_type == "0":
            os.system("clear")
            wireguard_allinone_mnu()
            break
        else:
            print("Invalid choice.")


def gre6tapkharej_wireguard_menu():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print(
        "\033[92m(   ) \033[93mWireguard + GRE6tap + IPSEC \033[92m[1]Kharej Server\033[96m [5]IRAN Client\033[93mMenu\033[0m"
    )
    print(
        '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
    )
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[92mIRAN Client [1] Config\033[0m")
    print("2. \033[92mIRAN Client [2] Config\033[0m")
    print("3. \033[92mIRAN Client [3] Config\033[0m")
    print("4. \033[93mIRAN Client [4] Config\033[0m")
    print("5. \033[92mIRAN Client [5] Config\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    print("6. \033[96mKharej Server Config\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    print("0.\033[97mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")
    while True:
        server_type = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if server_type == "1":
            wireguardgre6tap_iran_client1()
            break
        elif server_type == "2":
            wireguardgre6tap_iran_client2()
            break
        elif server_type == "3":
            wireguardgre6tap_iran_client3()
            break
        elif server_type == "4":
            wireguardgre6tap_iran_client4()
            break
        elif server_type == "5":
            wireguardgre6tap_iran_client5()
            break
        elif server_type == "6":
            wireguardgre6tap_kharej_server()
            break
        elif server_type == "0":
            os.system("clear")
            wireguardgre6tap_mnu()
            break
        else:
            print("Invalid choice.")


def wireguardgre6tap_kharej_server():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print("\033[92m(   ) \033[93mWireguard + GRE6tap \033[92mKharej Server\033[0m")
    print('\033[92m "-"\033[93m═════════════════════════════════════════\033[0m')
    check_wireguard_installed()
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")

    ip_versions = set()
    server_ips = []
    client_ips = []

    num_clients = int(
        input("\033[93mEnter the number of \033[92mIRAN\033[93m Clients: \033[0m")
    )
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")

    for i in range(1, num_clients + 1):
        server_ip, client_ip, ip_version = servernclient_ipv6(i)
        server_ips.append(server_ip)
        client_ips.append(client_ip)
        ip_versions.add(ip_version)
        create_wireguardping_server(client_ip, i)
        wireguardping_server_service(i)
        ufw(server_ip)
        ufw(client_ip)
    selected_server_num = num_clients

    for i in range(num_clients):
        menu_name = f"gre6tap2_kharej{i+1}_wireguard"
        if menu_name in globals():
            globals()[menu_name](server_ips[i], client_ips[i])
        else:
            print(f"\033[91merror: {menu_name} function not found!\033[0m")

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")

    ipsec_choice = (
        input(
            "\033[93mDo you want to configure IPsec? (\033[92myes\033[93m or \033[91mno): \033[0m"
        )
        .strip()
        .lower()
    )

    if ipsec_choice in ["yes", "y"]:
        psk = input("\033[93mEnter IPSEC \033[92mSecret Key\033[93m: \033[0m")
        config_ipsecn1k(psk, selected_server_num)

    restart_forced_strongazumi()


### no changes ###
def user_input(prompt):
    return input(prompt).strip()


def ip_choice_gre6tapwire(entity, ip_version, options):
    print(
        f"\033[93mChoose an \033[92mIP address \033[93mfor {entity} ({ip_version}):\033[0m"
    )
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    for i, option in enumerate(options, 1):
        print(f"{i}) {option}")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")
    choice = int(user_input("\033[93mEnter the number: \033[0m"))
    if choice == len(options):
        print("\033[93m───────────────────────────────────────\033[0m")
        return user_input(
            f"\033[93mEnter the custom \033[92m{ip_version} \033[93maddress for {entity}: \033[0m"
        )
    return options[choice - 1]


# changes starts
def ipversion_n_address_gre6tapwire1(entity):
    ip_version = "ipv6"
    ip_options = (
        ["2001:dc5::2", "fd1d::cd1::2", "manual"]
        if "Client" in entity
        else ["2001:dc5::1", "fd1d::cd1::1", "manual"]
    )
    subnet = "64" if "Client" in entity else "128"

    ip_address = ip_choice_gre6tapwire(entity, ip_version, ip_options)
    return ip_address, subnet, ip_version


# iran client 1
def wireguardgre6tap_iran_client1():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print("\033[92m(   ) \033[93mWireguard + Gre6tap \033[92mIRAN Client [1]\033[0m")
    print('\033[92m "-"\033[93m═════════════════════════════════════════\033[0m')
    check_wireguard_installed()
    print("\033[93m───────────────────────────────────────\033[0m")
    display_notification("\033[93mConfiguring WireGuard Client\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    server_public_key = user_input(
        "\033[93mEnter \033[92mKharej Server\033[93m's config \033[96m[1] \033[96mpublic key:\033[0m "
    )
    client_private_key = user_input(
        "\033[93mEnter \033[92mIRAN Client\033[96m [1]\033[93m private key:\033[0m "
    )
    server_public_ip = user_input(
        "\033[93mEnter \033[92mKharej Server\033[93m IPV4 address:\033[0m "
    )
    client_port = user_input(
        "\033[93mEnter the \033[92mConfig \033[96m[1] Tunnel \033[93mport:\033[0m "
    )
    ufwportudp(client_port)
    print("\033[93m───────────────────────────────────────\033[0m")
    client_ip, client_subnet, ip_version = ipversion_n_address_gre6tapwire1(
        "\033[92mIRAN\033[93m Client \033[96m[1]\033[0m"
    )
    ufw(client_ip)
    print("\033[93m───────────────────────────────────────\033[0m")
    server_private_ip, server_subnet = ipversion_n_address_gre6tapwire1(
        "\033[92mKharej Server\033[93m Config \033[96m[1]\033[0m"
    )[:2]
    ufw(server_private_ip)
    print("\033[93m───────────────────────────────────────\033[0m")
    find_interface = input(
        "\033[93mDo you want meh to find the \033[92mmain interface\033[96m automatically\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m"
    )
    if find_interface.lower() == "yes" or find_interface.lower() == "y":
        interface = main_interface()
        if interface is None:
            print("\033[91merror: Couldn't find your network interface.\033[0m")
            return
    else:
        interface = input(
            "\033[93mWhat is your \033[92mmain interface\033[93m? \033[0m"
        )
    print("\033[93m───────────────────────────────────────\033[0m")
    mtu_config = ""
    mtu_choice = input(
        f"\033[93mDo you want to set \033[92mWireguard MTU\033[93m for \033[92mClient\033[96m [1] \033[93m(\033[92myes\033[93m/\033[91mno\033[93m): \033[0m"
    ).lower()
    if mtu_choice in ["yes", "y"]:
        mtu_value = input(
            f"\033[93mEnter MTU value for \033[92mClient\033[96m [1] \033[93m: \033[0m"
        )
        mtu_config = f"MTU = {mtu_value}\n"

    client_config = f"""
[Interface]
PrivateKey = {client_private_key}
Address = {client_ip}/{client_subnet}
ListenPort = {client_port}
{mtu_config}
PostUp = iptables -I INPUT -p udp --dport {client_port} -j ACCEPT
PostUp = iptables -I FORWARD -i {interface} -o wireclient -j ACCEPT
PostUp = iptables -I FORWARD -i wireclient -j ACCEPT
PostUp = iptables -t nat -A POSTROUTING -o {interface} -j MASQUERADE
PostUp = ip6tables -I FORWARD -i wireclient -j ACCEPT
PostUp = ip6tables -t nat -A POSTROUTING -o {interface} -j MASQUERADE
PostDown = iptables -D INPUT -p udp --dport {client_port} -j ACCEPT
PostDown = iptables -D FORWARD -i {interface} -o wireclient -j ACCEPT
PostDown = iptables -D FORWARD -i wireclient -j ACCEPT
PostDown = iptables -t nat -D POSTROUTING -o {interface} -j MASQUERADE
PostDown = ip6tables -D FORWARD -i wireclient -j ACCEPT
PostDown = ip6tables -t nat -D POSTROUTING -o {interface} -j MASQUERADE

[Peer]
PublicKey = {server_public_key}
AllowedIPs = {server_private_ip}/{server_subnet}
Endpoint = {server_public_ip}:{client_port}
"""

    client_config_path = "/etc/wireguard/wireclient.conf"
    write_config(client_config_path, client_config)
    wgclient()
    print("\033[93m───────────────────────────────────────\033[0m")
    display_checkmark(
        f"\033[92mClient configuration saved to \033[97m{client_config_path}\033[0m"
    )
    gre6tap_iran1_wireguard(client_ip, server_private_ip)


def wgclient():
    enable_command = "sudo systemctl enable wg-quick@wireclient"
    subprocess.run(enable_command, shell=True, check=True)

    up_command = "wg-quick up /etc/wireguard/wireclient.conf"
    subprocess.run(up_command, shell=True, check=True)


# iran client 2
def ipversion_n_address_gre6tapwire2(entity):
    ip_version = "ipv6"
    ip_options = (
        ["2001:de5::2", "fd1d::ed1::2", "manual"]
        if "Client" in entity
        else ["2001:de5::1", "fd1d::ed1::1", "manual"]
    )
    subnet = "64" if "Client" in entity else "128"

    ip_address = ip_choice_gre6tapwire(entity, ip_version, ip_options)
    return ip_address, subnet, ip_version


# iran client 2
def wireguardgre6tap_iran_client2():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print("\033[92m(   ) \033[93mWireguard + Gre6tap \033[92mIRAN Client [2]\033[0m")
    print('\033[92m "-"\033[93m═════════════════════════════════════════\033[0m')
    check_wireguard_installed()
    print("\033[93m───────────────────────────────────────\033[0m")
    display_notification("\033[93mConfiguring WireGuard Client\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    server_public_key = user_input(
        "\033[93mEnter \033[92mKharej Server\033[93m's config \033[96m[2] \033[96mpublic key:\033[0m "
    )
    client_private_key = user_input(
        "\033[93mEnter \033[92mIRAN Client\033[96m [2]\033[93m private key:\033[0m "
    )
    server_public_ip = user_input(
        "\033[93mEnter \033[92mKharej Server\033[93m IPV4 address:\033[0m "
    )
    client_port = user_input(
        "\033[93mEnter the \033[92mConfig \033[96m[2] Tunnel \033[93mport:\033[0m "
    )
    ufwportudp(client_port)
    print("\033[93m───────────────────────────────────────\033[0m")
    client_ip, client_subnet, ip_version = ipversion_n_address_gre6tapwire2(
        "\033[92mIRAN\033[93m Client \033[96m[2]\033[0m"
    )
    ufw(client_ip)
    print("\033[93m───────────────────────────────────────\033[0m")
    server_private_ip, server_subnet = ipversion_n_address_gre6tapwire2(
        "\033[92mKharej Server\033[93m Config \033[96m[2]\033[0m"
    )[:2]
    ufw(server_private_ip)
    print("\033[93m───────────────────────────────────────\033[0m")
    find_interface = input(
        "\033[93mDo you want meh to find the \033[92mmain interface\033[96m automatically\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m"
    )
    if find_interface.lower() == "yes" or find_interface.lower() == "y":
        interface = main_interface()
        if interface is None:
            print("\033[91merror: Couldn't find your network interface.\033[0m")
            return
    else:
        interface = input(
            "\033[93mWhat is your \033[92mmain interface\033[93m? \033[0m"
        )
    print("\033[93m───────────────────────────────────────\033[0m")
    mtu_config = ""
    mtu_choice = input(
        f"\033[93mDo you want to set \033[92mWireguard MTU\033[93m for \033[92mClient\033[96m [2] \033[93m(\033[92myes\033[93m/\033[91mno\033[93m): \033[0m"
    ).lower()
    if mtu_choice in ["yes", "y"]:
        mtu_value = input(
            f"\033[93mEnter MTU value for \033[92mClient\033[96m [2] \033[93m: \033[0m"
        )
        mtu_config = f"MTU = {mtu_value}\n"
    client_config = f"""
    
[Interface]
PrivateKey = {client_private_key}
Address = {client_ip}/{client_subnet}
ListenPort = {client_port}
{mtu_config}
PostUp = iptables -I INPUT -p udp --dport {client_port} -j ACCEPT
PostUp = iptables -I FORWARD -i {interface} -o wireclient -j ACCEPT
PostUp = iptables -I FORWARD -i wireclient -j ACCEPT
PostUp = iptables -t nat -A POSTROUTING -o {interface} -j MASQUERADE
PostUp = ip6tables -I FORWARD -i wireclient -j ACCEPT
PostUp = ip6tables -t nat -A POSTROUTING -o {interface} -j MASQUERADE
PostDown = iptables -D INPUT -p udp --dport {client_port} -j ACCEPT
PostDown = iptables -D FORWARD -i {interface} -o wireclient -j ACCEPT
PostDown = iptables -D FORWARD -i wireclient -j ACCEPT
PostDown = iptables -t nat -D POSTROUTING -o {interface} -j MASQUERADE
PostDown = ip6tables -D FORWARD -i wireclient -j ACCEPT
PostDown = ip6tables -t nat -D POSTROUTING -o {interface} -j MASQUERADE

[Peer]
PublicKey = {server_public_key}
AllowedIPs = {server_private_ip}/{server_subnet}
Endpoint = {server_public_ip}:{client_port}
"""

    client_config_path = "/etc/wireguard/wireclient.conf"
    write_config(client_config_path, client_config)
    wgclient()
    print("\033[93m───────────────────────────────────────\033[0m")
    display_checkmark(
        f"\033[92mClient configuration saved to \033[97m{client_config_path}\033[0m"
    )
    gre6tap_iran2_wireguard(client_ip, server_private_ip)


# iran client 3
def ipversion_n_address_gre6tapwire3(entity):
    ip_version = "ipv6"
    ip_options = (
        ["2001:df5::2", "fd1d::fd1::2", "manual"]
        if "Client" in entity
        else ["2001:df5::1", "fd1d::fd1::1", "manual"]
    )
    subnet = "64" if "Client" in entity else "128"

    ip_address = ip_choice_gre6tapwire(entity, ip_version, ip_options)
    return ip_address, subnet, ip_version


# iran client 3
def wireguardgre6tap_iran_client3():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print("\033[92m(   ) \033[93mWireguard + Gre6tap \033[92mIRAN Client [3]\033[0m")
    print('\033[92m "-"\033[93m═════════════════════════════════════════\033[0m')
    check_wireguard_installed()
    print("\033[93m───────────────────────────────────────\033[0m")
    display_notification("\033[93mConfiguring WireGuard Client\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    server_public_key = user_input(
        "\033[93mEnter \033[92mKharej Server\033[93m's config \033[96m[3] \033[96mpublic key:\033[0m "
    )
    client_private_key = user_input(
        "\033[93mEnter \033[92mIRAN Client\033[96m [3]\033[93m private key:\033[0m "
    )
    server_public_ip = user_input(
        "\033[93mEnter \033[92mKharej Server\033[93m IPV4 address:\033[0m "
    )
    client_port = user_input(
        "\033[93mEnter the \033[92mConfig \033[96m[3] Tunnel \033[93mport:\033[0m "
    )
    ufwportudp(client_port)
    print("\033[93m───────────────────────────────────────\033[0m")
    client_ip, client_subnet, ip_version = ipversion_n_address_gre6tapwire3(
        "\033[92mIRAN\033[93m Client \033[96m[3]\033[0m"
    )
    ufw(client_ip)
    print("\033[93m───────────────────────────────────────\033[0m")
    server_private_ip, server_subnet = ipversion_n_address_gre6tapwire3(
        "\033[92mKharej Server\033[93m Config \033[96m[3]\033[0m"
    )[:2]
    ufw(server_private_ip)
    print("\033[93m───────────────────────────────────────\033[0m")
    find_interface = input(
        "\033[93mDo you want meh to find the \033[92mmain interface\033[96m automatically\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m"
    )
    if find_interface.lower() == "yes" or find_interface.lower() == "y":
        interface = main_interface()
        if interface is None:
            print("\033[91merror: Couldn't find your network interface.\033[0m")
            return
    else:
        interface = input(
            "\033[93mWhat is your \033[92mmain interface\033[93m? \033[0m"
        )
    print("\033[93m───────────────────────────────────────\033[0m")
    mtu_config = ""
    mtu_choice = input(
        f"\033[93mDo you want to set \033[92mWireguard MTU\033[93m for \033[92mClient\033[96m [3] \033[93m(\033[92myes\033[93m/\033[91mno\033[93m): \033[0m"
    ).lower()
    if mtu_choice in ["yes", "y"]:
        mtu_value = input(
            f"\033[93mEnter MTU value for \033[92mClient\033[96m [3] \033[93m: \033[0m"
        )
        mtu_config = f"MTU = {mtu_value}\n"

    client_config = f"""
[Interface]
PrivateKey = {client_private_key}
Address = {client_ip}/{client_subnet}
ListenPort = {client_port}
{mtu_config}
PostUp = iptables -I INPUT -p udp --dport {client_port} -j ACCEPT
PostUp = iptables -I FORWARD -i {interface} -o wireclient -j ACCEPT
PostUp = iptables -I FORWARD -i wireclient -j ACCEPT
PostUp = iptables -t nat -A POSTROUTING -o {interface} -j MASQUERADE
PostUp = ip6tables -I FORWARD -i wireclient -j ACCEPT
PostUp = ip6tables -t nat -A POSTROUTING -o {interface} -j MASQUERADE
PostDown = iptables -D INPUT -p udp --dport {client_port} -j ACCEPT
PostDown = iptables -D FORWARD -i {interface} -o wireclient -j ACCEPT
PostDown = iptables -D FORWARD -i wireclient -j ACCEPT
PostDown = iptables -t nat -D POSTROUTING -o {interface} -j MASQUERADE
PostDown = ip6tables -D FORWARD -i wireclient -j ACCEPT
PostDown = ip6tables -t nat -D POSTROUTING -o {interface} -j MASQUERADE

[Peer]
PublicKey = {server_public_key}
AllowedIPs = {server_private_ip}/{server_subnet}
Endpoint = {server_public_ip}:{client_port}
"""

    client_config_path = "/etc/wireguard/wireclient.conf"
    write_config(client_config_path, client_config)
    wgclient()
    print("\033[93m───────────────────────────────────────\033[0m")
    display_checkmark(
        f"\033[92mClient configuration saved to \033[97m{client_config_path}\033[0m"
    )
    gre6tap_iran3_wireguard(client_ip, server_private_ip)


# iran client 4
def ipversion_n_address_gre6tapwire4(entity):
    ip_version = "ipv6"
    ip_options = (
        ["2001:da5::2", "fd1d::ad1::2", "manual"]
        if "Client" in entity
        else ["2001:da5::1", "fd1d::ad1::1", "manual"]
    )
    subnet = "64" if "Client" in entity else "128"

    ip_address = ip_choice_gre6tapwire(entity, ip_version, ip_options)
    return ip_address, subnet, ip_version


# iran client 4
def wireguardgre6tap_iran_client4():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print("\033[92m(   ) \033[93mWireguard + Gre6tap \033[92mIRAN Client [4]\033[0m")
    print('\033[92m "-"\033[93m═════════════════════════════════════════\033[0m')
    check_wireguard_installed()
    print("\033[93m───────────────────────────────────────\033[0m")
    display_notification("\033[93mConfiguring WireGuard Client\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    server_public_key = user_input(
        "\033[93mEnter \033[92mKharej Server\033[93m's config \033[96m[4] \033[96mpublic key:\033[0m "
    )
    client_private_key = user_input(
        "\033[93mEnter \033[92mIRAN Client\033[96m [4]\033[93m private key:\033[0m "
    )
    server_public_ip = user_input(
        "\033[93mEnter \033[92mKharej Server\033[93m IPV4 address:\033[0m "
    )
    client_port = user_input(
        "\033[93mEnter the \033[92mConfig \033[96m[4] \033[93mTunnel port:\033[0m "
    )
    ufwportudp(client_port)
    print("\033[93m───────────────────────────────────────\033[0m")
    client_ip, client_subnet, ip_version = ipversion_n_address_gre6tapwire4(
        "\033[92mIRAN\033[93m Client \033[96m[4]\033[0m"
    )
    ufw(client_ip)
    print("\033[93m───────────────────────────────────────\033[0m")
    server_private_ip, server_subnet = ipversion_n_address_gre6tapwire4(
        "\033[92mKharej Server\033[93m Config \033[96m[4]\033[0m"
    )[:2]
    ufw(server_private_ip)
    print("\033[93m───────────────────────────────────────\033[0m")
    find_interface = input(
        "\033[93mDo you want meh to find the \033[92mmain interface\033[96m automatically\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m"
    )
    if find_interface.lower() == "yes" or find_interface.lower() == "y":
        interface = main_interface()
        if interface is None:
            print("\033[91merror: Couldn't find your network interface.\033[0m")
            return
    else:
        interface = input(
            "\033[93mWhat is your \033[92mmain interface\033[93m? \033[0m"
        )
    print("\033[93m───────────────────────────────────────\033[0m")
    mtu_config = ""
    mtu_choice = input(
        f"\033[93mDo you want to set \033[92mWireguard MTU\033[93m for \033[92mClient\033[96m [4] \033[93m(\033[92myes\033[93m/\033[91mno\033[93m): \033[0m"
    ).lower()
    if mtu_choice in ["yes", "y"]:
        mtu_value = input(
            f"\033[93mEnter MTU value for \033[92mClient\033[96m [4] \033[93m: \033[0m"
        )
        mtu_config = f"MTU = {mtu_value}\n"

    client_config = f"""
[Interface]
PrivateKey = {client_private_key}
Address = {client_ip}/{client_subnet}
ListenPort = {client_port}
{mtu_config}
PostUp = iptables -I INPUT -p udp --dport {client_port} -j ACCEPT
PostUp = iptables -I FORWARD -i {interface} -o wireclient -j ACCEPT
PostUp = iptables -I FORWARD -i wireclient -j ACCEPT
PostUp = iptables -t nat -A POSTROUTING -o {interface} -j MASQUERADE
PostUp = ip6tables -I FORWARD -i wireclient -j ACCEPT
PostUp = ip6tables -t nat -A POSTROUTING -o {interface} -j MASQUERADE
PostDown = iptables -D INPUT -p udp --dport {client_port} -j ACCEPT
PostDown = iptables -D FORWARD -i {interface} -o wireclient -j ACCEPT
PostDown = iptables -D FORWARD -i wireclient -j ACCEPT
PostDown = iptables -t nat -D POSTROUTING -o {interface} -j MASQUERADE
PostDown = ip6tables -D FORWARD -i wireclient -j ACCEPT
PostDown = ip6tables -t nat -D POSTROUTING -o {interface} -j MASQUERADE

[Peer]
PublicKey = {server_public_key}
AllowedIPs = {server_private_ip}/{server_subnet}
Endpoint = {server_public_ip}:{client_port}
"""

    client_config_path = "/etc/wireguard/wireclient.conf"
    write_config(client_config_path, client_config)
    wgclient()
    print("\033[93m───────────────────────────────────────\033[0m")
    display_checkmark(
        f"\033[92mClient configuration saved to \033[97m{client_config_path}\033[0m"
    )
    gre6tap_iran4_wireguard(client_ip, server_private_ip)


# iran client 5
def ipversion_n_address_gre6tapwire5(entity):
    ip_version = "ipv6"
    ip_options = (
        ["2001:db5::2", "fd1d::bd1::2", "manual"]
        if "Client" in entity
        else ["2001:db5::1", "fd1d::bd1::1", "manual"]
    )
    subnet = "64" if "Client" in entity else "128"

    ip_address = ip_choice_gre6tapwire(entity, ip_version, ip_options)
    return ip_address, subnet, ip_version


# iran client 5
def wireguardgre6tap_iran_client5():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print("\033[92m(   ) \033[93mWireguard + Gre6tap \033[92mIRAN Client [5]\033[0m")
    print('\033[92m "-"\033[93m═════════════════════════════════════════\033[0m')
    check_wireguard_installed()
    print("\033[93m───────────────────────────────────────\033[0m")
    display_notification("\033[93mConfiguring WireGuard Client\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    server_public_key = user_input(
        "\033[93mEnter \033[92mKharej Server\033[93m's config \033[96m[5] \033[96mpublic key:\033[0m "
    )
    client_private_key = user_input(
        "\033[93mEnter \033[92mIRAN Client\033[96m [5]\033[93m private key:\033[0m "
    )
    server_public_ip = user_input(
        "\033[93mEnter \033[92mKharej Server\033[93m IPV4 address:\033[0m "
    )
    client_port = user_input(
        "\033[93mEnter the \033[92mConfig \033[96m[5] \033[93mTunnel port:\033[0m "
    )
    ufwportudp(client_port)
    print("\033[93m───────────────────────────────────────\033[0m")
    client_ip, client_subnet, ip_version = ipversion_n_address_gre6tapwire5(
        "\033[92mIRAN\033[93m Client \033[96m[5]\033[0m"
    )
    ufw(client_ip)
    print("\033[93m───────────────────────────────────────\033[0m")
    server_private_ip, server_subnet = ipversion_n_address_gre6tapwire5(
        "\033[92mKharej Server\033[93m Config \033[96m[5]\033[0m"
    )[:2]
    ufw(server_private_ip)
    print("\033[93m───────────────────────────────────────\033[0m")
    find_interface = input(
        "\033[93mDo you want meh to find the \033[92mmain interface\033[96m automatically\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m"
    )
    if find_interface.lower() == "yes" or find_interface.lower() == "y":
        interface = main_interface()
        if interface is None:
            print("\033[91merror: Couldn't find your network interface.\033[0m")
            return
    else:
        interface = input(
            "\033[93mWhat is your \033[92mmain interface\033[93m? \033[0m"
        )
    print("\033[93m───────────────────────────────────────\033[0m")
    mtu_config = ""
    mtu_choice = input(
        f"\033[93mDo you want to set \033[92mWireguard MTU\033[93m for \033[92mClient\033[96m [5] \033[93m(\033[92myes\033[93m/\033[91mno\033[93m): \033[0m"
    ).lower()
    if mtu_choice in ["yes", "y"]:
        mtu_value = input(
            f"\033[93mEnter MTU value for \033[92mClient\033[96m [5] \033[93m: \033[0m"
        )
        mtu_config = f"MTU = {mtu_value}\n"

    client_config = f"""
[Interface]
PrivateKey = {client_private_key}
Address = {client_ip}/{client_subnet}
ListenPort = {client_port}
{mtu_config}
PostUp = iptables -I INPUT -p udp --dport {client_port} -j ACCEPT
PostUp = iptables -I FORWARD -i {interface} -o wireclient -j ACCEPT
PostUp = iptables -I FORWARD -i wireclient -j ACCEPT
PostUp = iptables -t nat -A POSTROUTING -o {interface} -j MASQUERADE
PostUp = ip6tables -I FORWARD -i wireclient -j ACCEPT
PostUp = ip6tables -t nat -A POSTROUTING -o {interface} -j MASQUERADE
PostDown = iptables -D INPUT -p udp --dport {client_port} -j ACCEPT
PostDown = iptables -D FORWARD -i {interface} -o wireclient -j ACCEPT
PostDown = iptables -D FORWARD -i wireclient -j ACCEPT
PostDown = iptables -t nat -D POSTROUTING -o {interface} -j MASQUERADE
PostDown = ip6tables -D FORWARD -i wireclient -j ACCEPT
PostDown = ip6tables -t nat -D POSTROUTING -o {interface} -j MASQUERADE

[Peer]
PublicKey = {server_public_key}
AllowedIPs = {server_private_ip}/{server_subnet}
Endpoint = {server_public_ip}:{client_port}
"""

    client_config_path = "/etc/wireguard/wireclient.conf"
    write_config(client_config_path, client_config)
    wgclient()
    print("\033[93m───────────────────────────────────────\033[0m")
    display_checkmark(
        f"\033[92mClient configuration saved to \033[97m{client_config_path}\033[0m"
    )
    gre6tap_iran5_wireguard(client_ip, server_private_ip)


# server kharej 1
def gre6tapk_tunnel1_wire(local_ip, remote_ip):
    file_path = "/etc/gre61.sh"

    if os.path.exists(file_path):
        os.remove(file_path)

    with open(file_path, "w") as f:
        f.write("#!/bin/bash\n")
        f.write("/sbin/modprobe ip6_gre\n")
        f.write(
            f"ip link add name azumig61 type ip6gretap local {local_ip} remote {remote_ip}\n"
        )
        f.write("ip -6 addr add 2002:801a::1/64 dev azumig61\n")
        f.write("ip link set azumig61 up\n")
        f.write("ip -6 route add 2002::/16 dev azumig61\n")

    command = f"chmod +x {file_path}"
    subprocess.run(command, shell=True, check=True)

    set_mtu = input(
        "\033[93mDo you want to set the \033[92mMTU\033[96m [GRE6tap]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m"
    )
    if set_mtu.lower() == "yes" or set_mtu.lower() == "y":
        mtu_value = input(
            "\033[93mEnter the desired \033[92mMTU value\033[93m: \033[0m"
        )
        mtu_command = f"ip link set dev azumig61 mtu {mtu_value}\n"
        with open(file_path, "a") as f:
            f.write(mtu_command)

    subprocess.run(["bash", file_path], check=True)


# server 2 kharej
def gre6tapk_tunnel2_wire(local_ip, remote_ip):
    file_path = "/etc/gre62.sh"

    if os.path.exists(file_path):
        os.remove(file_path)

    with open(file_path, "w") as f:
        f.write("#!/bin/bash\n")
        f.write("/sbin/modprobe ip6_gre\n")
        f.write(
            f"ip link add name azumig62 type ip6gretap local {local_ip} remote {remote_ip}\n"
        )
        f.write("ip -6 addr add 2002:811a::1/64 dev azumig62\n")
        f.write("ip link set azumig62 up\n")

    command = f"chmod +x {file_path}"
    subprocess.run(command, shell=True, check=True)

    set_mtu = input(
        "\033[93mDo you want to set the \033[92mMTU\033[96m [GRE6tap]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m"
    )
    if set_mtu.lower() == "yes" or set_mtu.lower() == "y":
        mtu_value = input(
            "\033[93mEnter the desired \033[92mMTU value\033[93m: \033[0m"
        )
        mtu_command = f"ip link set dev azumig62 mtu {mtu_value}\n"
        with open(file_path, "a") as f:
            f.write(mtu_command)

    subprocess.run(["bash", file_path], check=True)


# server 3 kharej
def gre6tapk_tunnel3_wire(local_ip, remote_ip):
    file_path = "/etc/gre63.sh"

    if os.path.exists(file_path):
        os.remove(file_path)

    with open(file_path, "w") as f:
        f.write("#!/bin/bash\n")
        f.write("/sbin/modprobe ip6_gre\n")
        f.write(
            f"ip link add name azumig63 type ip6gretap local {local_ip} remote {remote_ip}\n"
        )
        f.write(f"ip -6 addr add 2002:821a::1/64 dev azumig63\n")
        f.write("ip link set azumig63 up\n")

    command = f"chmod +x {file_path}"
    subprocess.run(command, shell=True, check=True)

    set_mtu = input(
        "\033[93mDo you want to set the \033[92mMTU\033[96m [GRE6tap]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m"
    )
    if set_mtu.lower() == "yes" or set_mtu.lower() == "y":
        mtu_value = input(
            "\033[93mEnter the desired \033[92mMTU value\033[93m: \033[0m"
        )
        mtu_command = f"ip link set dev azumig63 mtu {mtu_value}\n"
        with open(file_path, "a") as f:
            f.write(mtu_command)

    subprocess.run(["bash", file_path], check=True)


# server 4 kharej
def gre6tapk_tunnel4_wire(local_ip, remote_ip):
    file_path = "/etc/gre64.sh"

    if os.path.exists(file_path):
        os.remove(file_path)

    with open(file_path, "w") as f:
        f.write("#!/bin/bash\n")
        f.write("/sbin/modprobe ip6_gre\n")
        f.write(
            f"ip link add name azumig64 type ip6gretap local {local_ip} remote {remote_ip}\n"
        )
        f.write(f"ip -6 addr add 2002:831a::1/64 dev azumig64\n")
        f.write("ip link set azumig64 up\n")

    command = f"chmod +x {file_path}"
    subprocess.run(command, shell=True, check=True)

    set_mtu = input(
        "\033[93mDo you want to set the \033[92mMTU\033[96m [GRE6tap]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m"
    )
    if set_mtu.lower() == "yes" or set_mtu.lower() == "y":
        mtu_value = input(
            "\033[93mEnter the desired \033[92mMTU value\033[93m: \033[0m"
        )
        mtu_command = f"ip link set dev azumig64 mtu {mtu_value}\n"
        with open(file_path, "a") as f:
            f.write(mtu_command)

    subprocess.run(["bash", file_path], check=True)


# server 5 kharej
def gre6tapk_tunnel5_wire(local_ip, remote_ip):
    file_path = "/etc/gre65.sh"

    if os.path.exists(file_path):
        os.remove(file_path)

    with open(file_path, "w") as f:
        f.write("#!/bin/bash\n")
        f.write("/sbin/modprobe ip6_gre\n")
        f.write(
            f"ip link add name azumig65 type ip6gretap local {local_ip} remote {remote_ip}\n"
        )
        f.write(f"ip -6 addr add 2002:841a::1/64 dev azumig65\n")
        f.write("ip link set azumig65 up\n")

    command = f"chmod +x {file_path}"
    subprocess.run(command, shell=True, check=True)

    set_mtu = input(
        "\033[93mDo you want to set the \033[92mMTU\033[96m [GRE6tap]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m"
    )
    if set_mtu.lower() == "yes" or set_mtu.lower() == "y":
        mtu_value = input(
            "\033[93mEnter the desired \033[92mMTU value\033[93m: \033[0m"
        )
        mtu_command = f"ip link set dev azumig65 mtu {mtu_value}\n"
        with open(file_path, "a") as f:
            f.write(mtu_command)

    subprocess.run(["bash", file_path], check=True)


# this part can be removed later
def gre61_cronjob():
    try:

        subprocess.run(
            "crontab -l | grep -v '/etc/gre61.sh' | crontab -",
            shell=True,
            capture_output=True,
            text=True,
        )

        subprocess.run(
            "(crontab -l ; echo '@reboot /bin/bash /etc/gre61.sh') | crontab -",
            shell=True,
            capture_output=True,
            text=True,
        )

        display_checkmark("\033[92mCronjob added successfully!\033[0m")
    except subprocess.CalledProcessError as e:
        print("\033[91mFailed to add cronjob:\033[0m", e)


def gre62_cronjob():
    try:

        subprocess.run(
            "crontab -l | grep -v '/etc/gre62.sh' | crontab -",
            shell=True,
            capture_output=True,
            text=True,
        )

        subprocess.run(
            "(crontab -l ; echo '@reboot /bin/bash /etc/gre62.sh') | crontab -",
            shell=True,
            capture_output=True,
            text=True,
        )

        display_checkmark("\033[92mCronjob added successfully!\033[0m")
    except subprocess.CalledProcessError as e:
        print("\033[91mFailed to add cronjob:\033[0m", e)


def gre63_cronjob():
    try:

        subprocess.run(
            "crontab -l | grep -v '/etc/gre63.sh' | crontab -",
            shell=True,
            capture_output=True,
            text=True,
        )

        subprocess.run(
            "(crontab -l ; echo '@reboot /bin/bash /etc/gre63.sh') | crontab -",
            shell=True,
            capture_output=True,
            text=True,
        )

        display_checkmark("\033[92mCronjob added successfully!\033[0m")
    except subprocess.CalledProcessError as e:
        print("\033[91mFailed to add cronjob:\033[0m", e)


def gre64_cronjob():
    try:

        subprocess.run(
            "crontab -l | grep -v '/etc/gre64.sh' | crontab -",
            shell=True,
            capture_output=True,
            text=True,
        )

        subprocess.run(
            "(crontab -l ; echo '@reboot /bin/bash /etc/gre64.sh') | crontab -",
            shell=True,
            capture_output=True,
            text=True,
        )

        display_checkmark("\033[92mCronjob added successfully!\033[0m")
    except subprocess.CalledProcessError as e:
        print("\033[91mFailed to add cronjob:\033[0m", e)


def gre65_cronjob():
    try:

        subprocess.run(
            "crontab -l | grep -v '/etc/gre65.sh' | crontab -",
            shell=True,
            capture_output=True,
            text=True,
        )

        subprocess.run(
            "(crontab -l ; echo '@reboot /bin/bash /etc/gre65.sh') | crontab -",
            shell=True,
            capture_output=True,
            text=True,
        )

        display_checkmark("\033[92mCronjob added successfully!\033[0m")
    except subprocess.CalledProcessError as e:
        print("\033[91mFailed to add cronjob:\033[0m", e)


def ping_gre61_service():
    service_content = """[Unit]
Description=keepalive
After=network.target

[Service]
ExecStart=/bin/bash /etc/ping_ip1.sh
Restart=always

[Install]
WantedBy=multi-user.target
"""

    service_file_path = "/etc/systemd/system/ping_ip1.service"
    with open(service_file_path, "w") as service_file:
        service_file.write(service_content)

    subprocess.run(["systemctl", "daemon-reload"])
    subprocess.run(["systemctl", "enable", "ping_ip1.service"])
    subprocess.run(["systemctl", "start", "ping_ip1.service"])
    subprocess.run(["systemctl", "restart", "ping_ip1.service"])


def ping_gre62_service():
    service_content = """[Unit]
Description=keepalive
After=network.target

[Service]
ExecStart=/bin/bash /etc/ping_ip2.sh
Restart=always

[Install]
WantedBy=multi-user.target
"""

    service_file_path = "/etc/systemd/system/ping_ip2.service"
    with open(service_file_path, "w") as service_file:
        service_file.write(service_content)

    subprocess.run(["systemctl", "daemon-reload"])
    subprocess.run(["systemctl", "enable", "ping_ip2.service"])
    subprocess.run(["systemctl", "start", "ping_ip2.service"])
    sleep(1)
    subprocess.run(["systemctl", "restart", "ping_ip2.service"])


def ping_gre63_service():
    service_content = """[Unit]
Description=keepalive
After=network.target

[Service]
ExecStart=/bin/bash /etc/ping_ip3.sh
Restart=always

[Install]
WantedBy=multi-user.target
"""

    service_file_path = "/etc/systemd/system/ping_ip3.service"
    with open(service_file_path, "w") as service_file:
        service_file.write(service_content)

    subprocess.run(["systemctl", "daemon-reload"])
    subprocess.run(["systemctl", "enable", "ping_ip3.service"])
    subprocess.run(["systemctl", "start", "ping_ip3.service"])
    sleep(1)
    subprocess.run(["systemctl", "restart", "ping_ip3.service"])


def ping_gre64_service():
    service_content = """[Unit]
Description=keepalive
After=network.target

[Service]
ExecStart=/bin/bash /etc/ping_ip4.sh
Restart=always

[Install]
WantedBy=multi-user.target
"""

    service_file_path = "/etc/systemd/system/ping_ip4.service"
    with open(service_file_path, "w") as service_file:
        service_file.write(service_content)

    subprocess.run(["systemctl", "daemon-reload"])
    subprocess.run(["systemctl", "enable", "ping_ip4.service"])
    subprocess.run(["systemctl", "start", "ping_ip4.service"])
    sleep(1)
    subprocess.run(["systemctl", "restart", "ping_ip4.service"])


def ping_gre65_service():
    service_content = """[Unit]
Description=keepalive
After=network.target

[Service]
ExecStart=/bin/bash /etc/ping_ip5.sh
Restart=always

[Install]
WantedBy=multi-user.target
"""

    service_file_path = "/etc/systemd/system/ping_ip5.service"
    with open(service_file_path, "w") as service_file:
        service_file.write(service_content)

    subprocess.run(["systemctl", "daemon-reload"])
    subprocess.run(["systemctl", "enable", "ping_ip5.service"])
    subprocess.run(["systemctl", "start", "ping_ip5.service"])
    subprocess.run(["systemctl", "restart", "ping_ip5.service"])


def create_ping1_script(ip_address, max_pings, interval):
    file_path = "/etc/ping_ip1.sh"

    if os.path.exists(file_path):
        os.remove(file_path)

    script_content = f"""#!/bin/bash

ip_address="{ip_address}"

max_pings={max_pings}

interval={interval}

while true
do
    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{{print $2}}" | awk -F " " "{{print $1}}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done

    echo "Waiting for $interval seconds..."
    sleep $interval
done
"""

    with open(file_path, "w") as file:
        file.write(script_content)

    command = f"chmod +x {file_path}"
    subprocess.run(command, shell=True, check=True)


def create_ping2_script(ip_address, max_pings, interval):
    file_path = "/etc/ping_ip2.sh"

    if os.path.exists(file_path):
        os.remove(file_path)

    script_content = f"""#!/bin/bash

ip_address="{ip_address}"

max_pings={max_pings}

interval={interval}

while true
do
    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{{print $2}}" | awk -F " " "{{print $1}}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done

    echo "Waiting for $interval seconds..."
    sleep $interval
done
"""

    with open(file_path, "w") as file:
        file.write(script_content)

    command = f"chmod +x {file_path}"
    subprocess.run(command, shell=True, check=True)


def create_ping3_script(ip_address, max_pings, interval):
    file_path = "/etc/ping_ip3.sh"

    if os.path.exists(file_path):
        os.remove(file_path)

    script_content = f"""#!/bin/bash

ip_address="{ip_address}"

max_pings={max_pings}

interval={interval}

while true
do
    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{{print $2}}" | awk -F " " "{{print $1}}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done

    echo "Waiting for $interval seconds..."
    sleep $interval
done
"""

    with open(file_path, "w") as file:
        file.write(script_content)

    command = f"chmod +x {file_path}"
    subprocess.run(command, shell=True, check=True)


def create_ping4_script(ip_address, max_pings, interval):
    file_path = "/etc/ping_ip4.sh"

    if os.path.exists(file_path):
        os.remove(file_path)

    script_content = f"""#!/bin/bash

ip_address="{ip_address}"

max_pings={max_pings}

interval={interval}

while true
do
    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{{print $2}}" | awk -F " " "{{print $1}}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done

    echo "Waiting for $interval seconds..."
    sleep $interval
done
"""

    with open(file_path, "w") as file:
        file.write(script_content)

    command = f"chmod +x {file_path}"
    subprocess.run(command, shell=True, check=True)


def create_ping5_script(ip_address, max_pings, interval):
    file_path = "/etc/ping_ip5.sh"

    if os.path.exists(file_path):
        os.remove(file_path)

    script_content = f"""#!/bin/bash

ip_address="{ip_address}"

max_pings={max_pings}

interval={interval}

while true
do
    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{{print $2}}" | awk -F " " "{{print $1}}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done

    echo "Waiting for $interval seconds..."
    sleep $interval
done
"""

    with open(file_path, "w") as file:
        file.write(script_content)

    command = f"chmod +x {file_path}"
    subprocess.run(command, shell=True, check=True)


####
# kharej side
def kharej_gre6tapwire_tunnel1(local_ip, remote_ip):
    gre6tapk_tunnel1_wire(local_ip, remote_ip)
    ip_address = "2002:801a::2"  # iranip
    max_pings = 3
    interval = 2
    print("\033[92m(\033[96mPlease wait,Azumi is pinging...\033[0m")
    create_ping1_script(ip_address, max_pings, interval)
    ping_result = subprocess.run(
        ["ping6", "-c", "2", ip_address], capture_output=True, text=True
    ).stdout.strip()
    print(ping_result)
    ping_gre61_service()
    gre61_cronjob()


# kharej 2
def kharej_gre6tapwire_tunnel2(local_ip, remote_ip):
    gre6tapk_tunnel2_wire(local_ip, remote_ip)
    ip_address = "2002:811a::2"  # iranip
    max_pings = 3
    interval = 2
    print("\033[92m(\033[96mPlease wait,Azumi is pinging...\033[0m")
    create_ping2_script(ip_address, max_pings, interval)
    ping_result = subprocess.run(
        ["ping6", "-c", "2", ip_address], capture_output=True, text=True
    ).stdout.strip()
    print(ping_result)
    ping_gre62_service()
    gre62_cronjob()


# kahrej 3
def kharej_gre6tapwire_tunnel3(local_ip, remote_ip):
    gre6tapk_tunnel3_wire(local_ip, remote_ip)
    ip_address = "2002:821a::2"  # iranip
    max_pings = 3
    interval = 2
    print("\033[92m(\033[96mPlease wait,Azumi is pinging...\033[0m")
    create_ping3_script(ip_address, max_pings, interval)
    ping_result = subprocess.run(
        ["ping6", "-c", "2", ip_address], capture_output=True, text=True
    ).stdout.strip()
    print(ping_result)
    ping_gre63_service()
    gre63_cronjob()


# kharej 4
def kharej_gre6tapwire_tunnel4(local_ip, remote_ip):
    gre6tapk_tunnel4_wire(local_ip, remote_ip)
    ip_address = "2002:831a::2"  # iranip
    max_pings = 3
    interval = 2
    print("\033[92m(\033[96mPlease wait,Azumi is pinging...\033[0m")
    create_ping4_script(ip_address, max_pings, interval)
    ping_result = subprocess.run(
        ["ping6", "-c", "2", ip_address], capture_output=True, text=True
    ).stdout.strip()
    print(ping_result)
    ping_gre64_service()
    gre64_cronjob()


# kharej 5
def kharej_gre6tapwire_tunnel5(local_ip, remote_ip):
    gre6tapk_tunnel5_wire(local_ip, remote_ip)
    ip_address = "2002:841a::2"  # iranip
    max_pings = 3
    interval = 2
    print("\033[92m(\033[96mPlease wait,Azumi is pinging...\033[0m")
    create_ping5_script(ip_address, max_pings, interval)
    ping_result = subprocess.run(
        ["ping6", "-c", "2", ip_address], capture_output=True, text=True
    ).stdout.strip()
    print(ping_result)
    ping_gre65_service()
    gre65_cronjob()


# iran side
def gre6tapi_tunnel1_wire(local_ip, remote_ip):
    file_path = "/etc/gre61.sh"

    if os.path.exists(file_path):
        os.remove(file_path)

    with open(file_path, "w") as f:
        f.write("#!/bin/bash\n")
        f.write("/sbin/modprobe ip6_gre\n")
        f.write(
            f"ip link add name azumig61 type ip6gretap local {local_ip} remote {remote_ip}\n"
        )
        f.write("ip -6 addr add 2002:801a::2/64 dev azumig61\n")
        f.write("ip link set azumig61 up\n")
        f.write("ip -6 route add 2002::/16 dev azumig61\n")

    command = f"chmod +x {file_path}"
    subprocess.run(command, shell=True, check=True)

    set_mtu = input(
        "\033[93mDo you want to set the \033[92mMTU\033[96m [GRE6tap]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m"
    )
    if set_mtu.lower() == "yes" or set_mtu.lower() == "y":
        mtu_value = input(
            "\033[93mEnter the desired \033[92mMTU value\033[93m: \033[0m"
        )
        mtu_command = f"ip link set dev azumig61 mtu {mtu_value}\n"
        with open(file_path, "a") as f:
            f.write(mtu_command)

    subprocess.run(["bash", file_path], check=True)


def iran_gre6tapwire_tunnel1(local_ip, remote_ip):
    gre6tapi_tunnel1_wire(local_ip, remote_ip)
    ip_address = "2002:801a::1"  # kharejip
    max_pings = 3
    interval = 2
    iran_ping1_script(ip_address, max_pings, interval)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    print("\033[92m(\033[96mPlease wait,Azumi is pinging...\033[0m")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    ping_result = subprocess.run(
        ["ping6", "-c", "2", ip_address], capture_output=True, text=True
    ).stdout.strip()
    print(ping_result)
    iran_gre61_service()
    gre61_cronjob()


# iran server 2
def gre6tapi_tunnel2_wire(local_ip, remote_ip):
    file_path = "/etc/gre62.sh"

    if os.path.exists(file_path):
        os.remove(file_path)

    with open(file_path, "w") as f:
        f.write("#!/bin/bash\n")
        f.write("/sbin/modprobe ip6_gre\n")
        f.write(
            f"ip link add name azumig62 type ip6gretap local {local_ip} remote {remote_ip}\n"
        )
        f.write(f"ip -6 addr add 2002:811a::2/64 dev azumig62\n")
        f.write("ip link set azumig62 up\n")

    command = f"chmod +x {file_path}"
    subprocess.run(command, shell=True, check=True)

    set_mtu = input(
        "\033[93mDo you want to set the \033[92mMTU\033[96m [GRE6tap]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m"
    )
    if set_mtu.lower() == "yes" or set_mtu.lower() == "y":
        mtu_value = input(
            "\033[93mEnter the desired \033[92mMTU value\033[93m: \033[0m"
        )
        mtu_command = f"ip link set dev azumig62 mtu {mtu_value}\n"
        with open(file_path, "a") as f:
            f.write(mtu_command)

    subprocess.run(["bash", file_path], check=True)


def iran_gre6tapwire_tunnel2(local_ip, remote_ip):
    gre6tapi_tunnel2_wire(local_ip, remote_ip)
    ip_address = "2002:811a::1"  # kharejip
    max_pings = 3
    interval = 2
    iran_ping2_script(ip_address, max_pings, interval)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    print("\033[92m(\033[96mPlease wait,Azumi is pinging...\033[0m")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    ping_result = subprocess.run(
        ["ping6", "-c", "2", ip_address], capture_output=True, text=True
    ).stdout.strip()
    print(ping_result)
    iran_gre62_service()
    gre62_cronjob()


# iran server 3
def gre6tapi_tunnel3_wire(local_ip, remote_ip):
    file_path = "/etc/gre63.sh"

    if os.path.exists(file_path):
        os.remove(file_path)

    with open(file_path, "w") as f:
        f.write("#!/bin/bash\n")
        f.write("/sbin/modprobe ip6_gre\n")
        f.write(
            f"ip link add name azumig63 type ip6gretap local {local_ip} remote {remote_ip}\n"
        )
        f.write(f"ip -6 addr add 2002:821a::2/64 dev azumig63\n")
        f.write("ip link set azumig63 up\n")

    command = f"chmod +x {file_path}"
    subprocess.run(command, shell=True, check=True)

    set_mtu = input(
        "\033[93mDo you want to set the \033[92mMTU\033[96m [GRE6tap]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m"
    )
    if set_mtu.lower() == "yes" or set_mtu.lower() == "y":
        mtu_value = input(
            "\033[93mEnter the desired \033[92mMTU value\033[93m: \033[0m"
        )
        mtu_command = f"ip link set dev azumig63 mtu {mtu_value}\n"
        with open(file_path, "a") as f:
            f.write(mtu_command)

    subprocess.run(["bash", file_path], check=True)


def iran_gre6tapwire_tunnel3(local_ip, remote_ip):
    gre6tapi_tunnel3_wire(local_ip, remote_ip)
    ip_address = "2002:821a::1"  # kharejip
    max_pings = 3
    interval = 2
    iran_ping3_script(ip_address, max_pings, interval)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    print("\033[92m(\033[96mPlease wait,Azumi is pinging...\033[0m")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    ping_result = subprocess.run(
        ["ping6", "-c", "2", ip_address], capture_output=True, text=True
    ).stdout.strip()
    print(ping_result)
    iran_gre63_service()
    gre63_cronjob()


# iran server 4
def gre6tapi_tunnel4_wire(local_ip, remote_ip):
    file_path = "/etc/gre64.sh"

    if os.path.exists(file_path):
        os.remove(file_path)

    with open(file_path, "w") as f:
        f.write("#!/bin/bash\n")
        f.write("/sbin/modprobe ip6_gre\n")
        f.write(
            f"ip link add name azumig64 type ip6gretap local {local_ip} remote {remote_ip}\n"
        )
        f.write(f"ip -6 addr add 2002:831a::2/64 dev azumig64\n")
        f.write("ip link set azumig64 up\n")

    command = f"chmod +x {file_path}"
    subprocess.run(command, shell=True, check=True)

    set_mtu = input(
        "\033[93mDo you want to set the \033[92mMTU\033[96m [GRE6tap]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m"
    )
    if set_mtu.lower() == "yes" or set_mtu.lower() == "y":
        mtu_value = input(
            "\033[93mEnter the desired \033[92mMTU value\033[93m: \033[0m"
        )
        mtu_command = f"ip link set dev azumig64 mtu {mtu_value}\n"
        with open(file_path, "a") as f:
            f.write(mtu_command)

    subprocess.run(["bash", file_path], check=True)


def iran_gre6tapwire_tunnel4(local_ip, remote_ip):
    gre6tapi_tunnel4_wire(local_ip, remote_ip)
    ip_address = "2002:831a::1"  # kharejip
    max_pings = 3
    interval = 2
    iran_ping4_script(ip_address, max_pings, interval)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    print("\033[92m(\033[96mPlease wait,Azumi is pinging...\033[0m")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    ping_result = subprocess.run(
        ["ping6", "-c", "2", ip_address], capture_output=True, text=True
    ).stdout.strip()
    print(ping_result)
    iran_gre64_service()
    gre64_cronjob()


# iran server5
def gre6tapi_tunnel5_wire(local_ip, remote_ip):
    file_path = "/etc/gre65.sh"

    if os.path.exists(file_path):
        os.remove(file_path)

    with open(file_path, "w") as f:
        f.write("#!/bin/bash\n")
        f.write("/sbin/modprobe ip6_gre\n")
        f.write(
            f"ip link add name azumig65 type ip6gretap local {local_ip} remote {remote_ip}\n"
        )
        f.write(f"ip -6 addr add 2002:841a::2/64 dev azumig65\n")
        f.write("ip link set azumig65 up\n")

    command = f"chmod +x {file_path}"
    subprocess.run(command, shell=True, check=True)

    set_mtu = input(
        "\033[93mDo you want to set the \033[92mMTU\033[96m [GRE6tap]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m"
    )
    if set_mtu.lower() == "yes" or set_mtu.lower() == "y":
        mtu_value = input(
            "\033[93mEnter the desired \033[92mMTU value\033[93m: \033[0m"
        )
        mtu_command = f"ip link set dev azumig65 mtu {mtu_value}\n"
        with open(file_path, "a") as f:
            f.write(mtu_command)

    subprocess.run(["bash", file_path], check=True)


def iran_gre6tapwire_tunnel5(local_ip, remote_ip):
    gre6tapi_tunnel5_wire(local_ip, remote_ip)
    ip_address = "2002:841a::1"  # kharejip
    max_pings = 3
    interval = 2
    iran_ping5_script(ip_address, max_pings, interval)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    print("\033[92m(\033[96mPlease wait,Azumi is pinging...\033[0m")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    ping_result = subprocess.run(
        ["ping6", "-c", "2", ip_address], capture_output=True, text=True
    ).stdout.strip()
    print(ping_result)
    iran_gre65_service()
    gre65_cronjob()


def permissions1():
    print("Setting permissions for config files...")
    subprocess.run(
        ["sudo", "chmod", "600", "/etc/ipsec.secrets"],
        stdout=subprocess.DEVNULL,
        stderr=subprocess.DEVNULL,
    )
    subprocess.run(
        ["sudo", "chmod", "600", "/etc/ipsec1.conf"],
        stdout=subprocess.DEVNULL,
        stderr=subprocess.DEVNULL,
    )
    print("Setting permissions was successful.")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")


def config_ipsecn_kharej1(psk):
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[93mInstalling IPSEC..\033[0m")
    install_process = subprocess.Popen(["sudo", "apt", "install", "strongswan", "-y"])
    install_process.wait()
    print("IPSEC Installation complete.")

    subprocess.run(
        ["sudo", "systemctl", "disable", "strongswan-starter"],
        stdout=subprocess.DEVNULL,
        stderr=subprocess.DEVNULL,
    )
    subprocess.run(
        ["sudo", "systemctl", "stop", "strongswan-starter"],
        stdout=subprocess.DEVNULL,
        stderr=subprocess.DEVNULL,
    )
    subprocess.run(
        ["sudo", "systemctl", "disable", "strongswan"],
        stdout=subprocess.DEVNULL,
        stderr=subprocess.DEVNULL,
    )
    subprocess.run(
        ["sudo", "systemctl", "stop", "strongswan"],
        stdout=subprocess.DEVNULL,
        stderr=subprocess.DEVNULL,
    )
    subprocess.run(
        ["sudo", "rm", "/etc/ipsec1.conf"],
        stdout=subprocess.DEVNULL,
        stderr=subprocess.DEVNULL,
    )
    subprocess.run(
        ["sudo", "rm", "/etc/ipsec.secrets"],
        stdout=subprocess.DEVNULL,
        stderr=subprocess.DEVNULL,
    )
    with open("/etc/ipsec1.conf", "w") as f:
        f.write(
            f"""config setup
##azumiisinyourarea
  
conn gretap1
  left=%defaultroute
  leftsubnet=2002:801a::1/64
  leftid=2002:801a::1
  right=2002:801a::2
  rightsubnet=2002:801a::2/64
  ike=aes256gcm16-sha512-ecp384!
  esp=aes256gcm16-sha512-ecp384!
  keyexchange=ikev2
  auto=start
  authby=secret
  keyingtries=%forever
  dpdaction=restart
  dpddelay=30s
  dpdtimeout=120s
  rekeymargin=3m
  rekeyfuzz=100%
  reauth=no\n"""
        )

    with open("/etc/ipsec.secrets", "w") as f:
        f.write(f'2002:801a::2 2002:801a::1 : PSK "{psk}"\n')
    with open("/etc/systemd/system/strong-azumi1.service", "w") as f:
        f.write(
            """[Unit]
Description=strongazumi IPsec IKEv1/IKEv2 daemon using ipsec.conf
After=network-online.target

[Service]
ExecStart=/usr/sbin/ipsec start --nofork --conf /etc/ipsec1.conf
ExecReload=/usr/sbin/ipsec reload
Restart=always
RestartSec=5
LimitNOFILE=1048576

[Install]
WantedBy=multi-user.target\n"""
        )

    permissions1()
    subprocess.run(
        ["sudo", "systemctl", "daemon-reload"],
        stdout=subprocess.DEVNULL,
        stderr=subprocess.DEVNULL,
    )
    subprocess.run(
        ["sudo", "systemctl", "enable", "strong-azumi1"],
        stdout=subprocess.DEVNULL,
        stderr=subprocess.DEVNULL,
    )
    subprocess.run(
        ["sudo", "systemctl", "restart", "strong-azumi1"],
        stdout=subprocess.DEVNULL,
        stderr=subprocess.DEVNULL,
    )


def config_ipsecn_kharej2(psk):
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[93mInstalling IPSEC..\033[0m")
    install_process = subprocess.Popen(["sudo", "apt", "install", "strongswan", "-y"])
    install_process.wait()
    print("IPSEC Installation complete.")
    subprocess.run(
        ["sudo", "systemctl", "disable", "strongswan-starter"],
        stdout=subprocess.DEVNULL,
        stderr=subprocess.DEVNULL,
    )
    subprocess.run(
        ["sudo", "systemctl", "stop", "strongswan-starter"],
        stdout=subprocess.DEVNULL,
        stderr=subprocess.DEVNULL,
    )
    subprocess.run(
        ["sudo", "systemctl", "disable", "strongswan"],
        stdout=subprocess.DEVNULL,
        stderr=subprocess.DEVNULL,
    )
    subprocess.run(
        ["sudo", "systemctl", "stop", "strongswan"],
        stdout=subprocess.DEVNULL,
        stderr=subprocess.DEVNULL,
    )
    subprocess.run(
        ["sudo", "rm", "/etc/ipsec1.conf"],
        stdout=subprocess.DEVNULL,
        stderr=subprocess.DEVNULL,
    )
    subprocess.run(
        ["sudo", "rm", "/etc/ipsec.secrets"],
        stdout=subprocess.DEVNULL,
        stderr=subprocess.DEVNULL,
    )
    with open("/etc/ipsec1.conf", "a") as f:
        f.write(
            f"""config setup
##azumiisinyourarea
  
conn gretap2
  left=%defaultroute
  leftsubnet=2002:811a::1/64
  leftid=2002:811a::1
  right=2002:811a::2
  rightsubnet=2002:811a::2/64
  ike=aes256gcm16-sha512-ecp384!
  esp=aes256gcm16-sha512-ecp384!
  keyexchange=ikev2
  auto=start
  authby=secret
  keyingtries=%forever
  dpdaction=restart
  dpddelay=30s
  dpdtimeout=120s
  rekeymargin=3m
  rekeyfuzz=100%
  reauth=no\n"""
        )

    with open("/etc/ipsec.secrets", "a") as f:
        f.write(f'2002:811a::2 2002:811a::1 : PSK "{psk}"\n')
    with open("/etc/systemd/system/strong-azumi1.service", "w") as f:
        f.write(
            """[Unit]
Description=strongazumi IPsec IKEv1/IKEv2 daemon using ipsec.conf
After=network-online.target

[Service]
ExecStart=/usr/sbin/ipsec start --nofork --conf /etc/ipsec1.conf
ExecReload=/usr/sbin/ipsec reload
Restart=always
RestartSec=5
LimitNOFILE=1048576

[Install]
WantedBy=multi-user.target\n"""
        )

    permissions1()
    subprocess.run(
        ["sudo", "systemctl", "daemon-reload"],
        stdout=subprocess.DEVNULL,
        stderr=subprocess.DEVNULL,
    )
    subprocess.run(
        ["sudo", "systemctl", "enable", "strong-azumi1"],
        stdout=subprocess.DEVNULL,
        stderr=subprocess.DEVNULL,
    )
    subprocess.run(
        ["sudo", "systemctl", "restart", "strong-azumi1"],
        stdout=subprocess.DEVNULL,
        stderr=subprocess.DEVNULL,
    )


def config_ipsecn_kharej3(psk):
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[93mInstalling IPSEC..\033[0m")
    install_process = subprocess.Popen(["sudo", "apt", "install", "strongswan", "-y"])
    install_process.wait()
    print("IPSEC Installation complete.")
    subprocess.run(
        ["sudo", "systemctl", "disable", "strongswan-starter"],
        stdout=subprocess.DEVNULL,
        stderr=subprocess.DEVNULL,
    )
    subprocess.run(
        ["sudo", "systemctl", "stop", "strongswan-starter"],
        stdout=subprocess.DEVNULL,
        stderr=subprocess.DEVNULL,
    )
    subprocess.run(
        ["sudo", "systemctl", "disable", "strongswan"],
        stdout=subprocess.DEVNULL,
        stderr=subprocess.DEVNULL,
    )
    subprocess.run(
        ["sudo", "systemctl", "stop", "strongswan"],
        stdout=subprocess.DEVNULL,
        stderr=subprocess.DEVNULL,
    )
    subprocess.run(
        ["sudo", "rm", "/etc/ipsec1.conf"],
        stdout=subprocess.DEVNULL,
        stderr=subprocess.DEVNULL,
    )
    subprocess.run(
        ["sudo", "rm", "/etc/ipsec.secrets"],
        stdout=subprocess.DEVNULL,
        stderr=subprocess.DEVNULL,
    )
    with open("/etc/ipsec1.conf", "a") as f:
        f.write(
            f"""config setup
##azumiisinyourarea
  
conn gretap3
  left=%defaultroute
  leftsubnet=2002:821a::1/64
  leftid=2002:821a::1
  right=2002:821a::2
  rightsubnet=2002:821a::2/64
  ike=aes256gcm16-sha512-ecp384!
  esp=aes256gcm16-sha512-ecp384!
  keyexchange=ikev2
  auto=start
  authby=secret
  keyingtries=%forever
  dpdaction=restart
  dpddelay=30s
  dpdtimeout=120s
  rekeymargin=3m
  rekeyfuzz=100%
  reauth=no\n"""
        )

    with open("/etc/ipsec.secrets", "a") as f:
        f.write(f'2002:821a::2 2002:821a::1 : PSK "{psk}"\n')
    with open("/etc/systemd/system/strong-azumi1.service", "w") as f:
        f.write(
            """[Unit]
Description=strongazumi IPsec IKEv1/IKEv2 daemon using ipsec.conf
After=network-online.target

[Service]
ExecStart=/usr/sbin/ipsec start --nofork --conf /etc/ipsec1.conf
ExecReload=/usr/sbin/ipsec reload
Restart=always
RestartSec=5
LimitNOFILE=1048576

[Install]
WantedBy=multi-user.target\n"""
        )

    permissions1()
    subprocess.run(
        ["sudo", "systemctl", "daemon-reload"],
        stdout=subprocess.DEVNULL,
        stderr=subprocess.DEVNULL,
    )
    subprocess.run(
        ["sudo", "systemctl", "enable", "strong-azumi1"],
        stdout=subprocess.DEVNULL,
        stderr=subprocess.DEVNULL,
    )
    subprocess.run(
        ["sudo", "systemctl", "restart", "strong-azumi1"],
        stdout=subprocess.DEVNULL,
        stderr=subprocess.DEVNULL,
    )


def config_ipsecn_kharej4(psk):
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[93mInstalling IPSEC..\033[0m")
    install_process = subprocess.Popen(["sudo", "apt", "install", "strongswan", "-y"])
    install_process.wait()
    print("IPSEC Installation complete.")
    subprocess.run(
        ["sudo", "systemctl", "disable", "strongswan-starter"],
        stdout=subprocess.DEVNULL,
        stderr=subprocess.DEVNULL,
    )
    subprocess.run(
        ["sudo", "systemctl", "stop", "strongswan-starter"],
        stdout=subprocess.DEVNULL,
        stderr=subprocess.DEVNULL,
    )
    subprocess.run(
        ["sudo", "systemctl", "disable", "strongswan"],
        stdout=subprocess.DEVNULL,
        stderr=subprocess.DEVNULL,
    )
    subprocess.run(
        ["sudo", "systemctl", "stop", "strongswan"],
        stdout=subprocess.DEVNULL,
        stderr=subprocess.DEVNULL,
    )
    subprocess.run(
        ["sudo", "rm", "/etc/ipsec1.conf"],
        stdout=subprocess.DEVNULL,
        stderr=subprocess.DEVNULL,
    )
    subprocess.run(
        ["sudo", "rm", "/etc/ipsec.secrets"],
        stdout=subprocess.DEVNULL,
        stderr=subprocess.DEVNULL,
    )
    with open("/etc/ipsec1.conf", "a") as f:
        f.write(
            f"""config setup
##azumiisinyouarea
  
conn gretap4
  left=%defaultroute
  leftsubnet=2002:831a::1/64
  leftid=2002:831a::1
  right=2002:831a::2
  rightsubnet=2002:831a::2/64
  ike=aes256gcm16-sha512-ecp384!
  esp=aes256gcm16-sha512-ecp384!
  keyexchange=ikev2
  auto=start
  authby=secret
  keyingtries=%forever
  dpdaction=restart
  dpddelay=30s
  dpdtimeout=120s
  rekeymargin=3m
  rekeyfuzz=100%
  reauth=no\n"""
        )

    with open("/etc/ipsec.secrets", "a") as f:
        f.write(f'2002:831a::2 2002:831a::1 : PSK "{psk}"\n')
    with open("/etc/systemd/system/strong-azumi1.service", "w") as f:
        f.write(
            """[Unit]
Description=strongazumi IPsec IKEv1/IKEv2 daemon using ipsec.conf
After=network-online.target

[Service]
ExecStart=/usr/sbin/ipsec start --nofork --conf /etc/ipsec1.conf
ExecReload=/usr/sbin/ipsec reload
Restart=always
RestartSec=5
LimitNOFILE=1048576

[Install]
WantedBy=multi-user.target\n"""
        )

    permissions1()
    subprocess.run(
        ["sudo", "systemctl", "daemon-reload"],
        stdout=subprocess.DEVNULL,
        stderr=subprocess.DEVNULL,
    )
    subprocess.run(
        ["sudo", "systemctl", "enable", "strong-azumi1"],
        stdout=subprocess.DEVNULL,
        stderr=subprocess.DEVNULL,
    )
    subprocess.run(
        ["sudo", "systemctl", "restart", "strong-azumi1"],
        stdout=subprocess.DEVNULL,
        stderr=subprocess.DEVNULL,
    )


def config_ipsecn_kharej5(psk):
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[93mInstalling IPSEC..\033[0m")
    install_process = subprocess.Popen(["sudo", "apt", "install", "strongswan", "-y"])
    install_process.wait()
    print("IPSEC Installation complete.")
    subprocess.run(
        ["sudo", "systemctl", "disable", "strongswan-starter"],
        stdout=subprocess.DEVNULL,
        stderr=subprocess.DEVNULL,
    )
    subprocess.run(
        ["sudo", "systemctl", "stop", "strongswan-starter"],
        stdout=subprocess.DEVNULL,
        stderr=subprocess.DEVNULL,
    )
    subprocess.run(
        ["sudo", "systemctl", "disable", "strongswan"],
        stdout=subprocess.DEVNULL,
        stderr=subprocess.DEVNULL,
    )
    subprocess.run(
        ["sudo", "systemctl", "stop", "strongswan"],
        stdout=subprocess.DEVNULL,
        stderr=subprocess.DEVNULL,
    )
    subprocess.run(
        ["sudo", "rm", "/etc/ipsec1.conf"],
        stdout=subprocess.DEVNULL,
        stderr=subprocess.DEVNULL,
    )
    subprocess.run(
        ["sudo", "rm", "/etc/ipsec.secrets"],
        stdout=subprocess.DEVNULL,
        stderr=subprocess.DEVNULL,
    )
    with open("/etc/ipsec1.conf", "a") as f:
        f.write(
            f"""config setup
##azumiisinyourarea
  
conn gretap5
  left=%defaultroute
  leftsubnet=2002:841a::1/64
  leftid=2002:841a::1
  right=2002:841a::2
  rightsubnet=2002:841a::2/64
  ike=aes256gcm16-sha512-ecp384!
  esp=aes256gcm16-sha512-ecp384!
  keyexchange=ikev2
  auto=start
  authby=secret
  keyingtries=%forever
  dpdaction=restart
  dpddelay=30s
  dpdtimeout=120s
  rekeymargin=3m
  rekeyfuzz=100%
  reauth=no\n"""
        )

    with open("/etc/ipsec.secrets", "a") as f:
        f.write(f'2002:841a::2 2002:841a::1 : PSK "{psk}"\n')
    with open("/etc/systemd/system/strong-azumi1.service", "w") as f:
        f.write(
            """[Unit]
Description=strongazumi IPsec IKEv1/IKEv2 daemon using ipsec.conf
After=network-online.target

[Service]
ExecStart=/usr/sbin/ipsec start --nofork --conf /etc/ipsec1.conf
ExecReload=/usr/sbin/ipsec reload
Restart=always
RestartSec=5
LimitNOFILE=1048576

[Install]
WantedBy=multi-user.target\n"""
        )

    permissions1()
    subprocess.run(
        ["sudo", "systemctl", "daemon-reload"],
        stdout=subprocess.DEVNULL,
        stderr=subprocess.DEVNULL,
    )
    subprocess.run(
        ["sudo", "systemctl", "enable", "strong-azumi1"],
        stdout=subprocess.DEVNULL,
        stderr=subprocess.DEVNULL,
    )
    subprocess.run(
        ["sudo", "systemctl", "restart", "strong-azumi1"],
        stdout=subprocess.DEVNULL,
        stderr=subprocess.DEVNULL,
    )


def config_ipsecn_iran1(psk):
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[93mInstalling IPSEC..\033[0m")
    install_process = subprocess.Popen(["sudo", "apt", "install", "strongswan", "-y"])
    install_process.wait()
    print("IPSEC Installation complete.")
    subprocess.run(
        ["sudo", "systemctl", "disable", "strongswan-starter"],
        stdout=subprocess.DEVNULL,
        stderr=subprocess.DEVNULL,
    )
    subprocess.run(
        ["sudo", "systemctl", "stop", "strongswan-starter"],
        stdout=subprocess.DEVNULL,
        stderr=subprocess.DEVNULL,
    )
    subprocess.run(
        ["sudo", "systemctl", "disable", "strongswan"],
        stdout=subprocess.DEVNULL,
        stderr=subprocess.DEVNULL,
    )
    subprocess.run(
        ["sudo", "systemctl", "stop", "strongswan"],
        stdout=subprocess.DEVNULL,
        stderr=subprocess.DEVNULL,
    )
    subprocess.run(
        ["sudo", "rm", "/etc/ipsec1.conf"],
        stdout=subprocess.DEVNULL,
        stderr=subprocess.DEVNULL,
    )
    subprocess.run(
        ["sudo", "rm", "/etc/ipsec.secrets"],
        stdout=subprocess.DEVNULL,
        stderr=subprocess.DEVNULL,
    )
    with open("/etc/ipsec1.conf", "a") as f:
        f.write(
            f"""config setup
##azumiisinyourarea
  
conn gretap1
  left=%defaultroute
  leftsubnet=2002:801a::2/64
  leftid=2002:801a::2
  right=2002:801a::1
  rightsubnet=2002:801a::1/64
  ike=aes256gcm16-sha512-ecp384!
  esp=aes256gcm16-sha512-ecp384!
  keyexchange=ikev2
  auto=start
  authby=secret
  keyingtries=%forever
  dpdaction=restart
  dpddelay=30s
  dpdtimeout=120s
  rekeymargin=3m
  rekeyfuzz=100%
  reauth=no\n"""
        )

    with open("/etc/ipsec.secrets", "a") as f:
        f.write(f'2002:801a::1 2002:801a::2 : PSK "{psk}"\n')
    with open("/etc/systemd/system/strong-azumi1.service", "w") as f:
        f.write(
            """[Unit]
Description=strongazumi IPsec IKEv1/IKEv2 daemon using ipsec.conf
After=network-online.target

[Service]
ExecStart=/usr/sbin/ipsec start --nofork --conf /etc/ipsec1.conf
ExecReload=/usr/sbin/ipsec reload
Restart=always
RestartSec=5
LimitNOFILE=1048576

[Install]
WantedBy=multi-user.target\n"""
        )

    permissions1()
    subprocess.run(
        ["sudo", "systemctl", "daemon-reload"],
        stdout=subprocess.DEVNULL,
        stderr=subprocess.DEVNULL,
    )
    subprocess.run(
        ["sudo", "systemctl", "enable", "strong-azumi1"],
        stdout=subprocess.DEVNULL,
        stderr=subprocess.DEVNULL,
    )
    subprocess.run(
        ["sudo", "systemctl", "restart", "strong-azumi1"],
        stdout=subprocess.DEVNULL,
        stderr=subprocess.DEVNULL,
    )


def config_ipsecn_iran2(psk):
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[93mInstalling IPSEC..\033[0m")
    install_process = subprocess.Popen(["sudo", "apt", "install", "strongswan", "-y"])
    install_process.wait()
    print("IPSEC Installation complete.")
    subprocess.run(
        ["sudo", "systemctl", "disable", "strongswan-starter"],
        stdout=subprocess.DEVNULL,
        stderr=subprocess.DEVNULL,
    )
    subprocess.run(
        ["sudo", "systemctl", "stop", "strongswan-starter"],
        stdout=subprocess.DEVNULL,
        stderr=subprocess.DEVNULL,
    )
    subprocess.run(
        ["sudo", "systemctl", "disable", "strongswan"],
        stdout=subprocess.DEVNULL,
        stderr=subprocess.DEVNULL,
    )
    subprocess.run(
        ["sudo", "systemctl", "stop", "strongswan"],
        stdout=subprocess.DEVNULL,
        stderr=subprocess.DEVNULL,
    )
    subprocess.run(
        ["sudo", "rm", "/etc/ipsec1.conf"],
        stdout=subprocess.DEVNULL,
        stderr=subprocess.DEVNULL,
    )
    subprocess.run(
        ["sudo", "rm", "/etc/ipsec.secrets"],
        stdout=subprocess.DEVNULL,
        stderr=subprocess.DEVNULL,
    )
    with open("/etc/ipsec1.conf", "a") as f:
        f.write(
            f"""config setup
##azumiisinyourarea
  
conn gretap2
  left=%defaultroute
  leftsubnet=2002:811a::2/64
  leftid=2002:811a::2
  right=2002:811a::1
  rightsubnet=2002:811a::1/64
  ike=aes256gcm16-sha512-ecp384!
  esp=aes256gcm16-sha512-ecp384!
  keyexchange=ikev2
  auto=start
  authby=secret
  keyingtries=%forever
  dpdaction=restart
  dpddelay=30s
  dpdtimeout=120s
  rekeymargin=3m
  rekeyfuzz=100%
  reauth=no\n"""
        )

    with open("/etc/ipsec.secrets", "a") as f:
        f.write(f'2002:811a::1 2002:811a::2 : PSK "{psk}"\n')
    with open("/etc/systemd/system/strong-azumi1.service", "w") as f:
        f.write(
            """[Unit]
Description=strongazumi IPsec IKEv1/IKEv2 daemon using ipsec.conf
After=network-online.target

[Service]
ExecStart=/usr/sbin/ipsec start --nofork --conf /etc/ipsec1.conf
ExecReload=/usr/sbin/ipsec reload
Restart=always
RestartSec=5
LimitNOFILE=1048576

[Install]
WantedBy=multi-user.target\n"""
        )

    permissions1()
    subprocess.run(
        ["sudo", "systemctl", "daemon-reload"],
        stdout=subprocess.DEVNULL,
        stderr=subprocess.DEVNULL,
    )
    subprocess.run(
        ["sudo", "systemctl", "enable", "strong-azumi1"],
        stdout=subprocess.DEVNULL,
        stderr=subprocess.DEVNULL,
    )
    subprocess.run(
        ["sudo", "systemctl", "restart", "strong-azumi1"],
        stdout=subprocess.DEVNULL,
        stderr=subprocess.DEVNULL,
    )


def config_ipsecn_iran3(psk):
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[93mInstalling IPSEC..\033[0m")
    install_process = subprocess.Popen(["sudo", "apt", "install", "strongswan", "-y"])
    install_process.wait()
    print("IPSEC Installation complete.")
    subprocess.run(
        ["sudo", "systemctl", "disable", "strongswan-starter"],
        stdout=subprocess.DEVNULL,
        stderr=subprocess.DEVNULL,
    )
    subprocess.run(
        ["sudo", "systemctl", "stop", "strongswan-starter"],
        stdout=subprocess.DEVNULL,
        stderr=subprocess.DEVNULL,
    )
    subprocess.run(
        ["sudo", "systemctl", "disable", "strongswan"],
        stdout=subprocess.DEVNULL,
        stderr=subprocess.DEVNULL,
    )
    subprocess.run(
        ["sudo", "systemctl", "stop", "strongswan"],
        stdout=subprocess.DEVNULL,
        stderr=subprocess.DEVNULL,
    )
    subprocess.run(
        ["sudo", "rm", "/etc/ipsec1.conf"],
        stdout=subprocess.DEVNULL,
        stderr=subprocess.DEVNULL,
    )
    subprocess.run(
        ["sudo", "rm", "/etc/ipsec.secrets"],
        stdout=subprocess.DEVNULL,
        stderr=subprocess.DEVNULL,
    )
    with open("/etc/ipsec1.conf", "w") as f:
        f.write(
            f"""config setup
##azumiisinyourarea
  
conn gretap3
  left=%defaultroute
  leftsubnet=2002:821a::2/64
  leftid=2002:821a::2
  right=2002:821a::1
  rightsubnet=2002:821a::1/64
  ike=aes256gcm16-sha512-ecp384!
  esp=aes256gcm16-sha512-ecp384!
  keyexchange=ikev2
  auto=start
  authby=secret
  keyingtries=%forever
  dpdaction=restart
  dpddelay=30s
  dpdtimeout=120s
  rekeymargin=3m
  rekeyfuzz=100%
  reauth=no\n"""
        )

    with open("/etc/ipsec.secrets", "w") as f:
        f.write(f'2002:821a::1 2002:821a::2 : PSK "{psk}"\n')
    with open("/etc/systemd/system/strong-azumi1.service", "w") as f:
        f.write(
            """[Unit]
Description=strongazumi IPsec IKEv1/IKEv2 daemon using ipsec.conf
After=network-online.target

[Service]
ExecStart=/usr/sbin/ipsec start --nofork --conf /etc/ipsec1.conf
ExecReload=/usr/sbin/ipsec reload
Restart=always
RestartSec=5
LimitNOFILE=1048576

[Install]
WantedBy=multi-user.target\n"""
        )

    permissions1()
    subprocess.run(
        ["sudo", "systemctl", "daemon-reload"],
        stdout=subprocess.DEVNULL,
        stderr=subprocess.DEVNULL,
    )
    subprocess.run(
        ["sudo", "systemctl", "enable", "strong-azumi1"],
        stdout=subprocess.DEVNULL,
        stderr=subprocess.DEVNULL,
    )
    subprocess.run(
        ["sudo", "systemctl", "restart", "strong-azumi1"],
        stdout=subprocess.DEVNULL,
        stderr=subprocess.DEVNULL,
    )


def config_ipsecn_iran4(psk):
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[93mInstalling IPSEC..\033[0m")
    install_process = subprocess.Popen(["sudo", "apt", "install", "strongswan", "-y"])
    install_process.wait()
    print("IPSEC Installation complete.")
    subprocess.run(
        ["sudo", "systemctl", "disable", "strongswan-starter"],
        stdout=subprocess.DEVNULL,
        stderr=subprocess.DEVNULL,
    )
    subprocess.run(
        ["sudo", "systemctl", "stop", "strongswan-starter"],
        stdout=subprocess.DEVNULL,
        stderr=subprocess.DEVNULL,
    )
    subprocess.run(
        ["sudo", "systemctl", "disable", "strongswan"],
        stdout=subprocess.DEVNULL,
        stderr=subprocess.DEVNULL,
    )
    subprocess.run(
        ["sudo", "systemctl", "stop", "strongswan"],
        stdout=subprocess.DEVNULL,
        stderr=subprocess.DEVNULL,
    )
    subprocess.run(
        ["sudo", "rm", "/etc/ipsec1.conf"],
        stdout=subprocess.DEVNULL,
        stderr=subprocess.DEVNULL,
    )
    subprocess.run(
        ["sudo", "rm", "/etc/ipsec.secrets"],
        stdout=subprocess.DEVNULL,
        stderr=subprocess.DEVNULL,
    )
    with open("/etc/ipsec1.conf", "w") as f:
        f.write(
            f"""config setup
##azumiisinyourarea
  
conn gretap4
  left=%defaultroute
  leftsubnet=2002:831a::2/64
  leftid=2002:831a::2
  right=2002:831a::1
  rightsubnet=2002:831a::1/64
  ike=aes256gcm16-sha512-ecp384!
  esp=aes256gcm16-sha512-ecp384!
  keyexchange=ikev2
  auto=start
  authby=secret
  keyingtries=%forever
  dpdaction=restart
  dpddelay=30s
  dpdtimeout=120s
  rekeymargin=3m
  rekeyfuzz=100%
  reauth=no\n"""
        )

    with open("/etc/ipsec.secrets", "w") as f:
        f.write(f'2002:831a::1 2002:831a::2 : PSK "{psk}"\n')
    with open("/etc/systemd/system/strong-azumi1.service", "w") as f:
        f.write(
            """[Unit]
Description=strongazumi IPsec IKEv1/IKEv2 daemon using ipsec.conf
After=network-online.target

[Service]
ExecStart=/usr/sbin/ipsec start --nofork --conf /etc/ipsec1.conf
ExecReload=/usr/sbin/ipsec reload
Restart=always
RestartSec=5
LimitNOFILE=1048576

[Install]
WantedBy=multi-user.target\n"""
        )

    permissions1()
    subprocess.run(
        ["sudo", "systemctl", "daemon-reload"],
        stdout=subprocess.DEVNULL,
        stderr=subprocess.DEVNULL,
    )
    subprocess.run(
        ["sudo", "systemctl", "enable", "strong-azumi1"],
        stdout=subprocess.DEVNULL,
        stderr=subprocess.DEVNULL,
    )
    subprocess.run(
        ["sudo", "systemctl", "restart", "strong-azumi1"],
        stdout=subprocess.DEVNULL,
        stderr=subprocess.DEVNULL,
    )


def config_ipsecn_iran5(psk):
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[93mInstalling IPSEC..\033[0m")
    install_process = subprocess.Popen(["sudo", "apt", "install", "strongswan", "-y"])
    install_process.wait()
    print("IPSEC Installation complete.")
    subprocess.run(
        ["sudo", "systemctl", "disable", "strongswan-starter"],
        stdout=subprocess.DEVNULL,
        stderr=subprocess.DEVNULL,
    )
    subprocess.run(
        ["sudo", "systemctl", "stop", "strongswan-starter"],
        stdout=subprocess.DEVNULL,
        stderr=subprocess.DEVNULL,
    )
    subprocess.run(
        ["sudo", "systemctl", "disable", "strongswan"],
        stdout=subprocess.DEVNULL,
        stderr=subprocess.DEVNULL,
    )
    subprocess.run(
        ["sudo", "systemctl", "stop", "strongswan"],
        stdout=subprocess.DEVNULL,
        stderr=subprocess.DEVNULL,
    )
    subprocess.run(
        ["sudo", "rm", "/etc/ipsec1.conf"],
        stdout=subprocess.DEVNULL,
        stderr=subprocess.DEVNULL,
    )
    subprocess.run(
        ["sudo", "rm", "/etc/ipsec.secrets"],
        stdout=subprocess.DEVNULL,
        stderr=subprocess.DEVNULL,
    )
    with open("/etc/ipsec1.conf", "w") as f:
        f.write(
            f"""config setup
##azumiisinyourarea
  
conn gretap5
  left=%defaultroute
  leftsubnet=2002:841a::2/64
  leftid=2002:841a::2
  right=2002:841a::1
  rightsubnet=2002:841a::1/64
  ike=aes256gcm16-sha512-ecp384!
  esp=aes256gcm16-sha512-ecp384!
  keyexchange=ikev2
  auto=start
  authby=secret
  keyingtries=%forever
  dpdaction=restart
  dpddelay=30s
  dpdtimeout=120s
  rekeymargin=3m
  rekeyfuzz=100%
  reauth=no\n"""
        )

    with open("/etc/ipsec.secrets", "w") as f:
        f.write(f'2002:841a::1 2002:841a::2 : PSK "{psk}"\n')

    with open("/etc/systemd/system/strong-azumi1.service", "w") as f:
        f.write(
            """[Unit]
Description=strongazumi IPsec IKEv1/IKEv2 daemon using ipsec.conf
After=network-online.target

[Service]
ExecStart=/usr/sbin/ipsec start --nofork --conf /etc/ipsec1.conf
ExecReload=/usr/sbin/ipsec reload
Restart=always
RestartSec=5
LimitNOFILE=1048576

[Install]
WantedBy=multi-user.target\n"""
        )

    permissions1()
    subprocess.run(
        ["sudo", "systemctl", "daemon-reload"],
        stdout=subprocess.DEVNULL,
        stderr=subprocess.DEVNULL,
    )
    subprocess.run(
        ["sudo", "systemctl", "enable", "strong-azumi1"],
        stdout=subprocess.DEVNULL,
        stderr=subprocess.DEVNULL,
    )
    subprocess.run(
        ["sudo", "systemctl", "restart", "strong-azumi1"],
        stdout=subprocess.DEVNULL,
        stderr=subprocess.DEVNULL,
    )


# menu kharej 1
def gre6tap_kharej1_wireguard(local_ip, remote_ip):
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print("\033[92m(   ) \033[92mGRE6tap\033[93m Configuration\033[0m")
    print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[92mSERVER 1\033[0m")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    kharej_gre6tapwire_tunnel1(local_ip, remote_ip)
    ufw("2002:801a::2")
    ufw("2002:801a::1")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    ipsec_choice = (
        input(
            "\033[93mDo you want to configure IPsec? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m"
        )
        .strip()
        .lower()
    )
    if ipsec_choice in ["yes", "y"]:
        psk = input("\033[93mEnter the \033[92mSecret key\033[93m: \033[0m")
        config_ipsecn_kharej1(psk)
    ip_address = "2002:801a::2"  # iranip
    print("\033[92m(\033[96mPlease wait,Azumi is pinging again...\033[0m")
    ping_result = subprocess.run(
        ["ping6", "-c", "2", ip_address], capture_output=True, text=True
    ).stdout.strip()
    print(ping_result)
    display_checkmark("\033[92mConfiguration is done!\033[0m")


def gre6tap2_kharej1_wireguard(local_ip, remote_ip):
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print("\033[92m(   ) \033[92mGRE6tap\033[93m Configuration\033[0m")
    print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[92mSERVER 1\033[0m")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    kharej_gre6tapwire_tunnel1(local_ip, remote_ip)
    ufw("2002:801a::2")
    ufw("2002:801a::1")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    ip_address = "2002:801a::2"  # iranip
    print("\033[92m(\033[96mPlease wait,Azumi is pinging again...\033[0m")
    ping_result = subprocess.run(
        ["ping6", "-c", "2", ip_address], capture_output=True, text=True
    ).stdout.strip()
    print(ping_result)
    display_checkmark("\033[92mConfiguration is done!\033[0m")


def gre6tap_kharej2_wireguard(local_ip, remote_ip):
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print("\033[92m(   ) \033[92mGRE6tap\033[93m Configuration\033[0m")
    print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[92mSERVER 2\033[0m")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    kharej_gre6tapwire_tunnel2(local_ip, remote_ip)
    ufw("2002:811a::2")
    ufw("2002:811a::1")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    ipsec_choice = (
        input(
            "\033[93mDo you want to configure IPsec? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m"
        )
        .strip()
        .lower()
    )
    if ipsec_choice in ["yes", "y"]:
        psk = input("\033[93mEnter the \033[92mSecret key\033[93m: \033[0m")
        config_ipsecn_kharej2(psk)
    ip_address = "2002:811a::2"  # iranip
    print("\033[92m(\033[96mPlease wait,Azumi is pinging again...\033[0m")
    ping_result = subprocess.run(
        ["ping6", "-c", "2", ip_address], capture_output=True, text=True
    ).stdout.strip()
    print(ping_result)
    display_checkmark("\033[92mConfiguration is done!\033[0m")


def gre6tap2_kharej2_wireguard(local_ip, remote_ip):
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print("\033[92m(   ) \033[92mGRE6tap\033[93m Configuration\033[0m")
    print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[92mSERVER 2\033[0m")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    kharej_gre6tapwire_tunnel2(local_ip, remote_ip)
    ufw("2002:811a::2")
    ufw("2002:811a::1")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")

    ip_address = "2002:811a::2"  # iranip
    print("\033[92m(\033[96mPlease wait,Azumi is pinging again...\033[0m")
    ping_result = subprocess.run(
        ["ping6", "-c", "2", ip_address], capture_output=True, text=True
    ).stdout.strip()
    print(ping_result)
    display_checkmark("\033[92mConfiguration is done!\033[0m")


def gre6tap_kharej3_wireguard(local_ip, remote_ip):
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print("\033[92m(   ) \033[92mGRE6tap\033[93m Configuration\033[0m")
    print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[92mSERVER 3\033[0m")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    kharej_gre6tapwire_tunnel3(local_ip, remote_ip)
    ufw("2002:821a::2")
    ufw("2002:821a::1")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    ipsec_choice = (
        input(
            "\033[93mDo you want to configure IPsec? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m"
        )
        .strip()
        .lower()
    )
    if ipsec_choice in ["yes", "y"]:
        psk = input("\033[93mEnter the \033[92mSecret key\033[93m: \033[0m")
        config_ipsecn_kharej3(psk)
    ip_address = "2002:821a::2"  # iranip
    print("\033[92m(\033[96mPlease wait,Azumi is pinging again...\033[0m")
    ping_result = subprocess.run(
        ["ping6", "-c", "2", ip_address], capture_output=True, text=True
    ).stdout.strip()
    print(ping_result)
    display_checkmark("\033[92mConfiguration is done!\033[0m")


def gre6tap2_kharej3_wireguard(local_ip, remote_ip):
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print("\033[92m(   ) \033[92mGRE6tap\033[93m Configuration\033[0m")
    print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[92mSERVER 3\033[0m")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    kharej_gre6tapwire_tunnel3(local_ip, remote_ip)
    ufw("2002:821a::2")
    ufw("2002:821a::1")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    ip_address = "2002:821a::2"  # iranip
    print("\033[92m(\033[96mPlease wait,Azumi is pinging again...\033[0m")
    ping_result = subprocess.run(
        ["ping6", "-c", "2", ip_address], capture_output=True, text=True
    ).stdout.strip()
    print(ping_result)
    display_checkmark("\033[92mConfiguration is done!\033[0m")


def gre6tap_kharej4_wireguard(local_ip, remote_ip):
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print("\033[92m(   ) \033[92mGRE6tap\033[93m Configuration\033[0m")
    print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[92mSERVER 4\033[0m")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    kharej_gre6tapwire_tunnel4(local_ip, remote_ip)
    ufw("2002:831a::2")
    ufw("2002:831a::1")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    ipsec_choice = (
        input(
            "\033[93mDo you want to configure IPsec? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m"
        )
        .strip()
        .lower()
    )
    if ipsec_choice in ["yes", "y"]:
        psk = input("\033[93mEnter the \033[92mSecret key\033[93m: \033[0m")
        config_ipsecn_kharej4(psk)
    ip_address = "2002:831a::2"  # iranip
    print("\033[92m(\033[96mPlease wait,Azumi is pinging again...\033[0m")
    ping_result = subprocess.run(
        ["ping6", "-c", "2", ip_address], capture_output=True, text=True
    ).stdout.strip()
    print(ping_result)
    display_checkmark("\033[92mConfiguration is done!\033[0m")


def gre6tap2_kharej4_wireguard(local_ip, remote_ip):
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print("\033[92m(   ) \033[92mGRE6tap\033[93m Configuration\033[0m")
    print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[92mSERVER 4\033[0m")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    kharej_gre6tapwire_tunnel4(local_ip, remote_ip)
    ufw("2002:831a::2")
    ufw("2002:831a::1")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    ip_address = "2002:831a::2"  # iranip
    print("\033[92m(\033[96mPlease wait,Azumi is pinging again...\033[0m")
    ping_result = subprocess.run(
        ["ping6", "-c", "2", ip_address], capture_output=True, text=True
    ).stdout.strip()
    print(ping_result)
    display_checkmark("\033[92mConfiguration is done!\033[0m")


def gre6tap_kharej5_wireguard(local_ip, remote_ip):
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print("\033[92m(   ) \033[92mGRE6tap\033[93m Configuration\033[0m")
    print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[92mSERVER 5\033[0m")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    kharej_gre6tapwire_tunnel5(local_ip, remote_ip)
    ufw("2002:841a::2")
    ufw("2002:841a::1")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    ipsec_choice = (
        input(
            "\033[93mDo you want to configure IPsec? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m"
        )
        .strip()
        .lower()
    )
    if ipsec_choice in ["yes", "y"]:
        psk = input("\033[93mEnter the \033[92mSecret key\033[93m: \033[0m")
        config_ipsecn_kharej5(psk)
    ip_address = "2002:841a::2"  # iranip
    print("\033[92m(\033[96mPlease wait,Azumi is pinging again...\033[0m")
    ping_result = subprocess.run(
        ["ping6", "-c", "2", ip_address], capture_output=True, text=True
    ).stdout.strip()
    print(ping_result)
    display_checkmark("\033[92mConfiguration is done!\033[0m")


def gre6tap2_kharej5_wireguard(local_ip, remote_ip):
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print("\033[92m(   ) \033[92mGRE6tap\033[93m Configuration\033[0m")
    print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[92mSERVER 5\033[0m")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    kharej_gre6tapwire_tunnel5(local_ip, remote_ip)
    ufw("2002:841a::2")
    ufw("2002:841a::1")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    ip_address = "2002:841a::2"  # iranip
    print("\033[92m(\033[96mPlease wait,Azumi is pinging again...\033[0m")
    ping_result = subprocess.run(
        ["ping6", "-c", "2", ip_address], capture_output=True, text=True
    ).stdout.strip()
    print(ping_result)
    display_checkmark("\033[92mConfiguration is done!\033[0m")


# menu iran side
def gre6tap_iran1_wireguard(local_ip, remote_ip):
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print("\033[92m(   ) \033[92mGRE6tap\033[93m Configuration\033[0m")
    print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[92mSERVER 1\033[0m")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    iran_gre6tapwire_tunnel1(local_ip, remote_ip)
    ufw("2002:801a::2")
    ufw("2002:801a::1")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    ipsec_choice = (
        input(
            "\033[93mDo you want to configure IPsec? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m"
        )
        .strip()
        .lower()
    )
    if ipsec_choice in ["yes", "y"]:
        psk = input("\033[93mEnter the \033[92mSecret key\033[93m: \033[0m")
        config_ipsecn_iran1(psk)
    ip_address = "2002:801a::1"  # iranip
    print("\033[92m(\033[96mPlease wait,Azumi is pinging again...\033[0m")
    ping_result = subprocess.run(
        ["ping6", "-c", "2", ip_address], capture_output=True, text=True
    ).stdout.strip()
    print(ping_result)
    display_checkmark("\033[92mConfiguration is done!\033[0m")


def gre6tap2_iran1_wireguard(local_ip, remote_ip):
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print("\033[92m(   ) \033[92mGRE6tap\033[93m Configuration\033[0m")
    print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[92mSERVER 1\033[0m")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    iran_gre6tapwire_tunnel1(local_ip, remote_ip)
    ufw("2002:801a::2")
    ufw("2002:801a::1")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")

    ip_address = "2002:801a::1"  # iranip
    print("\033[92m(\033[96mPlease wait,Azumi is pinging again...\033[0m")
    ping_result = subprocess.run(
        ["ping6", "-c", "2", ip_address], capture_output=True, text=True
    ).stdout.strip()
    print(ping_result)
    display_checkmark("\033[92mConfiguration is done!\033[0m")


def gre6tap_iran2_wireguard(local_ip, remote_ip):
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print("\033[92m(   ) \033[92mGRE6tap\033[93m Configuration\033[0m")
    print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[92mSERVER 2\033[0m")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    iran_gre6tapwire_tunnel2(local_ip, remote_ip)
    ufw("2002:811a::2")
    ufw("2002:811a::1")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    ipsec_choice = (
        input(
            "\033[93mDo you want to configure IPsec? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m"
        )
        .strip()
        .lower()
    )
    if ipsec_choice in ["yes", "y"]:
        psk = input("\033[93mEnter the \033[92mSecret key\033[93m: \033[0m")
        config_ipsecn_iran2(psk)
    ip_address = "2002:811a::1"  # iranip
    print("\033[92m(\033[96mPlease wait,Azumi is pinging again...\033[0m")
    ping_result = subprocess.run(
        ["ping6", "-c", "2", ip_address], capture_output=True, text=True
    ).stdout.strip()
    print(ping_result)
    display_checkmark("\033[92mConfiguration is done!\033[0m")


def gre6tap2_iran2_wireguard(local_ip, remote_ip):
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print("\033[92m(   ) \033[92mGRE6tap\033[93m Configuration\033[0m")
    print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[92mSERVER 2\033[0m")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    iran_gre6tapwire_tunnel2(local_ip, remote_ip)
    ufw("2002:811a::2")
    ufw("2002:811a::1")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")

    ip_address = "2002:811a::1"  # iranip
    print("\033[92m(\033[96mPlease wait,Azumi is pinging again...\033[0m")
    ping_result = subprocess.run(
        ["ping6", "-c", "2", ip_address], capture_output=True, text=True
    ).stdout.strip()
    print(ping_result)
    display_checkmark("\033[92mConfiguration is done!\033[0m")


def gre6tap_iran3_wireguard(local_ip, remote_ip):
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print("\033[92m(   ) \033[92mGRE6tap\033[93m Configuration\033[0m")
    print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[92mSERVER 3\033[0m")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    iran_gre6tapwire_tunnel3(local_ip, remote_ip)
    ufw("2002:821a::2")
    ufw("2002:821a::1")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    ipsec_choice = (
        input(
            "\033[93mDo you want to configure IPsec? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m"
        )
        .strip()
        .lower()
    )
    if ipsec_choice in ["yes", "y"]:
        psk = input("\033[93mEnter the \033[92mSecret key\033[93m: \033[0m")
        config_ipsecn_iran3(psk)
    ip_address = "2002:821a::1"  # iranip
    print("\033[92m(\033[96mPlease wait,Azumi is pinging again...\033[0m")
    ping_result = subprocess.run(
        ["ping6", "-c", "2", ip_address], capture_output=True, text=True
    ).stdout.strip()
    print(ping_result)
    display_checkmark("\033[92mConfiguration is done!\033[0m")


def gre6tap2_iran3_wireguard(local_ip, remote_ip):
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print("\033[92m(   ) \033[92mGRE6tap\033[93m Configuration\033[0m")
    print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[92mSERVER 3\033[0m")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    iran_gre6tapwire_tunnel3(local_ip, remote_ip)
    ufw("2002:821a::2")
    ufw("2002:821a::1")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")

    ip_address = "2002:821a::1"  # iranip
    print("\033[92m(\033[96mPlease wait,Azumi is pinging again...\033[0m")
    ping_result = subprocess.run(
        ["ping6", "-c", "2", ip_address], capture_output=True, text=True
    ).stdout.strip()
    print(ping_result)
    display_checkmark("\033[92mConfiguration is done!\033[0m")


def gre6tap_iran4_wireguard(local_ip, remote_ip):
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print("\033[92m(   ) \033[92mGRE6tap\033[93m Configuration\033[0m")
    print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[92mSERVER 4\033[0m")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    iran_gre6tapwire_tunnel4(local_ip, remote_ip)
    ufw("2002:831a::2")
    ufw("2002:831a::1")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    ipsec_choice = (
        input(
            "\033[93mDo you want to configure IPsec? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m"
        )
        .strip()
        .lower()
    )
    if ipsec_choice in ["yes", "y"]:
        psk = input("\033[93mEnter the \033[92mSecret key\033[93m: \033[0m")
        config_ipsecn_iran4(psk)
    ip_address = "2002:831a::1"  # iranip
    print("\033[92m(\033[96mPlease wait,Azumi is pinging again...\033[0m")
    ping_result = subprocess.run(
        ["ping6", "-c", "2", ip_address], capture_output=True, text=True
    ).stdout.strip()
    print(ping_result)
    display_checkmark("\033[92mConfiguration is done!\033[0m")


def gre6tap2_iran4_wireguard(local_ip, remote_ip):
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print("\033[92m(   ) \033[92mGRE6tap\033[93m Configuration\033[0m")
    print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[92mSERVER 4\033[0m")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    iran_gre6tapwire_tunnel4(local_ip, remote_ip)
    ufw("2002:831a::2")
    ufw("2002:831a::1")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")

    ip_address = "2002:831a::1"  # iranip
    print("\033[92m(\033[96mPlease wait,Azumi is pinging again...\033[0m")
    ping_result = subprocess.run(
        ["ping6", "-c", "2", ip_address], capture_output=True, text=True
    ).stdout.strip()
    print(ping_result)
    display_checkmark("\033[92mConfiguration is done!\033[0m")


def gre6tap_iran5_wireguard(local_ip, remote_ip):
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print("\033[92m(   ) \033[92mGRE6tap\033[93m Configuration\033[0m")
    print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[92mSERVER 5\033[0m")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    iran_gre6tapwire_tunnel5(local_ip, remote_ip)
    ufw("2002:841a::2")
    ufw("2002:841a::1")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    ipsec_choice = (
        input(
            "\033[93mDo you want to configure IPsec? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m"
        )
        .strip()
        .lower()
    )
    if ipsec_choice in ["yes", "y"]:
        psk = input("\033[93mEnter the \033[92mSecret key\033[93m: \033[0m")
        config_ipsecn_iran5(psk)
    ip_address = "2002:841a::1"  # iranip
    print("\033[92m(\033[96mPlease wait,Azumi is pinging again...\033[0m")
    ping_result = subprocess.run(
        ["ping6", "-c", "2", ip_address], capture_output=True, text=True
    ).stdout.strip()
    print(ping_result)
    display_checkmark("\033[92mConfiguration is done!\033[0m")


def gre6tap2_iran5_wireguard(local_ip, remote_ip):
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print("\033[92m(   ) \033[92mGRE6tap\033[93m Configuration\033[0m")
    print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[92mSERVER 5\033[0m")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    iran_gre6tapwire_tunnel5(local_ip, remote_ip)
    ufw("2002:841a::2")
    ufw("2002:841a::1")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")

    ip_address = "2002:841a::1"  # iranip
    print("\033[92m(\033[96mPlease wait,Azumi is pinging again...\033[0m")
    ping_result = subprocess.run(
        ["ping6", "-c", "2", ip_address], capture_output=True, text=True
    ).stdout.strip()
    print(ping_result)
    display_checkmark("\033[92mConfiguration is done!\033[0m")


def gre6tapiran_wireguard_menu():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print(
        "\033[92m(   ) \033[93mWireguard + GRE6tap + IPSEC \033[92m[1]IRAN Server\033[96m [5]Kharej Client\033[93mMenu\033[0m"
    )
    print(
        '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
    )
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[92mKharej Client [1] Config\033[0m")
    print("2. \033[92mKharej Client [2] Config\033[0m")
    print("3. \033[92mKharej Client [3] Config\033[0m")
    print("4. \033[93mKharej Client [4] Config\033[0m")
    print("5. \033[92mKharej Client [5] Config\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    print("6. \033[96mIRAN Server Config\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    print("0.\033[97mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")
    while True:
        server_type = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if server_type == "1":
            wireguardgre6tap_kharej_client1()
            break
        elif server_type == "2":
            wireguardgre6tap_kharej_client2()
            break
        elif server_type == "3":
            wireguardgre6tap_kharej_client3()
            break
        elif server_type == "4":
            wireguardgre6tap_kharej_client4()
            break
        elif server_type == "5":
            wireguardgre6tap_kharej_client5()
            break
        elif server_type == "6":
            wireguardgre6tap_iran_server()
            break
        elif server_type == "0":
            os.system("clear")
            wireguardgre6tap_mnu()
            break
        else:
            print("Invalid choice.")


def wireguardgre6tap_iran_server():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print("\033[92m(   ) \033[93mWireguard + GRE6tap \033[92mIRAN Server\033[0m")
    print('\033[92m "-"\033[93m═════════════════════════════════════════\033[0m')
    check_wireguard_installed()
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    ip_versions = set()
    server_ips = []
    client_ips = []

    num_clients = int(
        input("\033[93mEnter the number of \033[92mKharej\033[93m Clients: \033[0m")
    )
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")

    for i in range(1, num_clients + 1):
        server_ip, client_ip, ip_version = servernclient2_ipv6(i)
        server_ips.append(server_ip)
        client_ips.append(client_ip)
        ip_versions.add(ip_version)
        create_wireguardping_server(client_ip, i)
        wireguardping_server_service(i)
        ufw(server_ip)
        ufw(client_ip)
    selected_server_num = num_clients

    for i in range(num_clients):
        menu_name = f"gre6tap2_iran{i+1}_wireguard"
        if menu_name in globals():
            globals()[menu_name](server_ips[i], client_ips[i])
        else:
            print(f"\033[91merror: {menu_name} function not found!\033[0m")

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    ipsec_choice = (
        input(
            "\033[93mDo you want to configure IPsec? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m"
        )
        .strip()
        .lower()
    )
    if ipsec_choice in ["yes", "y"]:
        psk = input("\033[93mEnter the \033[92mSecret key\033[93m: \033[0m")
        config_ipsecn1i(psk, selected_server_num)

    restart_forced_strongazumi()


# kharej client 1
def wireguardgre6tap_kharej_client1():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print("\033[92m(   ) \033[93mWireguard + Gre6tap \033[92mKharej Client [1]\033[0m")
    print('\033[92m "-"\033[93m═════════════════════════════════════════\033[0m')
    check_wireguard_installed()
    print("\033[93m───────────────────────────────────────\033[0m")
    display_notification("\033[93mConfiguring WireGuard Client\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    server_public_key = user_input(
        "\033[93mEnter \033[92mIRAN Server\033[93m's config \033[96m[1] \033[96mpublic key:\033[0m "
    )
    client_private_key = user_input(
        "\033[93mEnter \033[92mKharej Client\033[96m [1]\033[93m private key:\033[0m "
    )
    server_public_ip = user_input(
        "\033[93mEnter \033[92mIRAN Server\033[93m IPV4 address:\033[0m "
    )
    client_port = user_input(
        "\033[93mEnter the \033[92mConfig \033[96m[1] Tunnel \033[93mport:\033[0m "
    )

    print("\033[93m───────────────────────────────────────\033[0m")
    client_ip, client_subnet, ip_version = ipversion_n_address_gre6tapwire1(
        "\033[92mKharej\033[93m Client \033[96m[1]\033[0m"
    )
    print("\033[93m───────────────────────────────────────\033[0m")
    server_private_ip, server_subnet = ipversion_n_address_gre6tapwire1(
        "\033[92mIRAN Server\033[93m Config \033[96m[1]\033[0m"
    )[:2]
    ufwportudp(client_port)
    ufw(client_ip)
    ufw(server_private_ip)
    print("\033[93m───────────────────────────────────────\033[0m")
    find_interface = input(
        "\033[93mDo you want meh to find the \033[92mmain interface\033[96m automatically\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m"
    )
    if find_interface.lower() == "yes" or find_interface.lower() == "y":
        interface = main_interface()
        if interface is None:
            print("\033[91merror: Couldn't find your network interface.\033[0m")
            return
    else:
        interface = input(
            "\033[93mWhat is your \033[92mmain interface\033[93m? \033[0m"
        )
    print("\033[93m───────────────────────────────────────\033[0m")
    mtu_config = ""
    mtu_choice = input(
        f"\033[93mDo you want to set \033[92mWireguard MTU\033[93m for \033[92mClient\033[96m [1] \033[93m(\033[92myes\033[93m/\033[91mno\033[93m): \033[0m"
    ).lower()
    if mtu_choice in ["yes", "y"]:
        mtu_value = input(
            f"\033[93mEnter MTU value for \033[92mClient\033[96m [1] \033[93m: \033[0m"
        )
        mtu_config = f"MTU = {mtu_value}\n"

    client_config = f"""
[Interface]
PrivateKey = {client_private_key}
Address = {client_ip}/{client_subnet}
ListenPort = {client_port}
{mtu_config}
PostUp = iptables -I INPUT -p udp --dport {client_port} -j ACCEPT
PostUp = iptables -I FORWARD -i {interface} -o wireclient -j ACCEPT
PostUp = iptables -I FORWARD -i wireclient -j ACCEPT
PostUp = iptables -t nat -A POSTROUTING -o {interface} -j MASQUERADE
PostUp = ip6tables -I FORWARD -i wireclient -j ACCEPT
PostUp = ip6tables -t nat -A POSTROUTING -o {interface} -j MASQUERADE
PostDown = iptables -D INPUT -p udp --dport {client_port} -j ACCEPT
PostDown = iptables -D FORWARD -i {interface} -o wireclient -j ACCEPT
PostDown = iptables -D FORWARD -i wireclient -j ACCEPT
PostDown = iptables -t nat -D POSTROUTING -o {interface} -j MASQUERADE
PostDown = ip6tables -D FORWARD -i wireclient -j ACCEPT
PostDown = ip6tables -t nat -D POSTROUTING -o {interface} -j MASQUERADE

[Peer]
PublicKey = {server_public_key}
AllowedIPs = {server_private_ip}/{server_subnet}
Endpoint = {server_public_ip}:{client_port}
"""

    client_config_path = "/etc/wireguard/wireclient.conf"
    write_config(client_config_path, client_config)
    wgclient()
    print("\033[93m───────────────────────────────────────\033[0m")
    display_checkmark(
        f"\033[92mClient configuration saved to \033[97m{client_config_path}\033[0m"
    )
    gre6tap_kharej1_wireguard(client_ip, server_private_ip)


# kharej client 2
def wireguardgre6tap_kharej_client2():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print("\033[92m(   ) \033[93mWireguard + Gre6tap \033[92mKharej Client [2]\033[0m")
    print('\033[92m "-"\033[93m═════════════════════════════════════════\033[0m')
    check_wireguard_installed()
    print("\033[93m───────────────────────────────────────\033[0m")
    display_notification("\033[93mConfiguring WireGuard Client\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    server_public_key = user_input(
        "\033[93mEnter \033[92mIRAN Server\033[93m's config \033[96m[2] \033[96mpublic key:\033[0m "
    )
    client_private_key = user_input(
        "\033[93mEnter \033[92mKharej Client\033[96m [2]\033[93m private key:\033[0m "
    )
    server_public_ip = user_input(
        "\033[93mEnter \033[92mIRAN Server\033[93m IPV4 address:\033[0m "
    )
    client_port = user_input(
        "\033[93mEnter the \033[92mConfig \033[96m[2] Tunnel \033[93mport:\033[0m "
    )
    print("\033[93m───────────────────────────────────────\033[0m")
    client_ip, client_subnet, ip_version = ipversion_n_address_gre6tapwire2(
        "\033[92mKharej\033[93m Client \033[96m[2]\033[0m"
    )
    print("\033[93m───────────────────────────────────────\033[0m")
    server_private_ip, server_subnet = ipversion_n_address_gre6tapwire2(
        "\033[92mIRAN Server\033[93m Config \033[96m[2]\033[0m"
    )[:2]
    ufwportudp(client_port)
    ufw(client_ip)
    ufw(server_private_ip)
    print("\033[93m───────────────────────────────────────\033[0m")
    find_interface = input(
        "\033[93mDo you want meh to find the \033[92mmain interface\033[96m automatically\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m"
    )
    if find_interface.lower() == "yes" or find_interface.lower() == "y":
        interface = main_interface()
        if interface is None:
            print("\033[91merror: Couldn't find your network interface.\033[0m")
            return
    else:
        interface = input(
            "\033[93mWhat is your \033[92mmain interface\033[93m? \033[0m"
        )
    print("\033[93m───────────────────────────────────────\033[0m")
    mtu_config = ""
    mtu_choice = input(
        f"\033[93mDo you want to set \033[92mWireguard MTU\033[93m for \033[92mClient\033[96m [2] \033[93m(\033[92myes\033[93m/\033[91mno\033[93m): \033[0m"
    ).lower()
    if mtu_choice in ["yes", "y"]:
        mtu_value = input(
            f"\033[93mEnter MTU value for \033[92mClient\033[96m [2] \033[93m: \033[0m"
        )
        mtu_config = f"MTU = {mtu_value}\n"

    client_config = f"""
[Interface]
PrivateKey = {client_private_key}
Address = {client_ip}/{client_subnet}
ListenPort = {client_port}
{mtu_config}
PostUp = iptables -I INPUT -p udp --dport {client_port} -j ACCEPT
PostUp = iptables -I FORWARD -i {interface} -o wireclient -j ACCEPT
PostUp = iptables -I FORWARD -i wireclient -j ACCEPT
PostUp = iptables -t nat -A POSTROUTING -o {interface} -j MASQUERADE
PostUp = ip6tables -I FORWARD -i wireclient -j ACCEPT
PostUp = ip6tables -t nat -A POSTROUTING -o {interface} -j MASQUERADE
PostDown = iptables -D INPUT -p udp --dport {client_port} -j ACCEPT
PostDown = iptables -D FORWARD -i {interface} -o wireclient -j ACCEPT
PostDown = iptables -D FORWARD -i wireclient -j ACCEPT
PostDown = iptables -t nat -D POSTROUTING -o {interface} -j MASQUERADE
PostDown = ip6tables -D FORWARD -i wireclient -j ACCEPT
PostDown = ip6tables -t nat -D POSTROUTING -o {interface} -j MASQUERADE

[Peer]
PublicKey = {server_public_key}
AllowedIPs = {server_private_ip}/{server_subnet}
Endpoint = {server_public_ip}:{client_port}
"""

    client_config_path = "/etc/wireguard/wireclient.conf"
    write_config(client_config_path, client_config)
    wgclient()
    print("\033[93m───────────────────────────────────────\033[0m")
    display_checkmark(
        f"\033[92mClient configuration saved to \033[97m{client_config_path}\033[0m"
    )
    gre6tap_kharej2_wireguard(client_ip, server_private_ip)


# kharej client 3
def wireguardgre6tap_kharej_client3():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print("\033[92m(   ) \033[93mWireguard + Gre6tap \033[92mKharej Client [3]\033[0m")
    print('\033[92m "-"\033[93m═════════════════════════════════════════\033[0m')
    check_wireguard_installed()
    print("\033[93m───────────────────────────────────────\033[0m")
    display_notification("\033[93mConfiguring WireGuard Client\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    server_public_key = user_input(
        "\033[93mEnter \033[92mIRAN Server\033[93m's config \033[96m[3] \033[96mpublic key:\033[0m "
    )
    client_private_key = user_input(
        "\033[93mEnter \033[92mKharej Client\033[96m [3]\033[93m private key:\033[0m "
    )
    server_public_ip = user_input(
        "\033[93mEnter \033[92mIRAN Server\033[93m IPV4 address:\033[0m "
    )
    client_port = user_input(
        "\033[93mEnter the \033[92mConfig \033[96m[3] Tunnel \033[93mport:\033[0m "
    )
    print("\033[93m───────────────────────────────────────\033[0m")
    client_ip, client_subnet, ip_version = ipversion_n_address_gre6tapwire3(
        "\033[92mKharej\033[93m Client \033[96m[3]\033[0m"
    )
    print("\033[93m───────────────────────────────────────\033[0m")
    server_private_ip, server_subnet = ipversion_n_address_gre6tapwire3(
        "\033[92mIRAN Server\033[93m Config \033[96m[3]\033[0m"
    )[:2]
    ufwportudp(client_port)
    ufw(client_ip)
    ufw(server_private_ip)
    print("\033[93m───────────────────────────────────────\033[0m")
    find_interface = input(
        "\033[93mDo you want meh to find the \033[92mmain interface\033[96m automatically\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m"
    )
    if find_interface.lower() == "yes" or find_interface.lower() == "y":
        interface = main_interface()
        if interface is None:
            print("\033[91merror: Couldn't find your network interface.\033[0m")
            return
    else:
        interface = input(
            "\033[93mWhat is your \033[92mmain interface\033[93m? \033[0m"
        )
    print("\033[93m───────────────────────────────────────\033[0m")
    mtu_config = ""
    mtu_choice = input(
        f"\033[93mDo you want to set \033[92mWireguard MTU\033[93m for \033[92mClient\033[96m [3] \033[93m(\033[92myes\033[93m/\033[91mno\033[93m): \033[0m"
    ).lower()
    if mtu_choice in ["yes", "y"]:
        mtu_value = input(
            f"\033[93mEnter MTU value for \033[92mClient\033[96m [3] \033[93m: \033[0m"
        )
        mtu_config = f"MTU = {mtu_value}\n"

    client_config = f"""
[Interface]
PrivateKey = {client_private_key}
Address = {client_ip}/{client_subnet}
ListenPort = {client_port}
{mtu_config}
PostUp = iptables -I INPUT -p udp --dport {client_port} -j ACCEPT
PostUp = iptables -I FORWARD -i {interface} -o wireclient -j ACCEPT
PostUp = iptables -I FORWARD -i wireclient -j ACCEPT
PostUp = iptables -t nat -A POSTROUTING -o {interface} -j MASQUERADE
PostUp = ip6tables -I FORWARD -i wireclient -j ACCEPT
PostUp = ip6tables -t nat -A POSTROUTING -o {interface} -j MASQUERADE
PostDown = iptables -D INPUT -p udp --dport {client_port} -j ACCEPT
PostDown = iptables -D FORWARD -i {interface} -o wireclient -j ACCEPT
PostDown = iptables -D FORWARD -i wireclient -j ACCEPT
PostDown = iptables -t nat -D POSTROUTING -o {interface} -j MASQUERADE
PostDown = ip6tables -D FORWARD -i wireclient -j ACCEPT
PostDown = ip6tables -t nat -D POSTROUTING -o {interface} -j MASQUERADE

[Peer]
PublicKey = {server_public_key}
AllowedIPs = {server_private_ip}/{server_subnet}
Endpoint = {server_public_ip}:{client_port}
"""

    client_config_path = "/etc/wireguard/wireclient.conf"
    write_config(client_config_path, client_config)
    wgclient()
    print("\033[93m───────────────────────────────────────\033[0m")
    display_checkmark(
        f"\033[92mClient configuration saved to \033[97m{client_config_path}\033[0m"
    )
    gre6tap_kharej3_wireguard(client_ip, server_private_ip)


# kharej client 4
def wireguardgre6tap_kharej_client4():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print("\033[92m(   ) \033[93mWireguard + Gre6tap \033[92mKharej Client [4]\033[0m")
    print('\033[92m "-"\033[93m═════════════════════════════════════════\033[0m')
    check_wireguard_installed()
    print("\033[93m───────────────────────────────────────\033[0m")
    display_notification("\033[93mConfiguring WireGuard Client\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    server_public_key = user_input(
        "\033[93mEnter \033[92mIRAN Server\033[93m's config \033[96m[4] \033[96mpublic key:\033[0m "
    )
    client_private_key = user_input(
        "\033[93mEnter \033[92mKharej Client\033[96m [4]\033[93m private key:\033[0m "
    )
    server_public_ip = user_input(
        "\033[93mEnter \033[92mIRAN Server\033[93m IPV4 address:\033[0m "
    )
    client_port = user_input(
        "\033[93mEnter the \033[92mConfig \033[96m[4] \033[93mTunnel port:\033[0m "
    )
    print("\033[93m───────────────────────────────────────\033[0m")
    client_ip, client_subnet, ip_version = ipversion_n_address_gre6tapwire4(
        "\033[92mKharej\033[93m Client \033[96m[4]\033[0m"
    )
    print("\033[93m───────────────────────────────────────\033[0m")
    server_private_ip, server_subnet = ipversion_n_address_gre6tapwire4(
        "\033[92mIRAN Server\033[93m Config \033[96m[4]\033[0m"
    )[:2]
    ufwportudp(client_port)
    ufw(client_ip)
    ufw(server_private_ip)
    print("\033[93m───────────────────────────────────────\033[0m")
    find_interface = input(
        "\033[93mDo you want meh to find the \033[92mmain interface\033[96m automatically\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m"
    )
    if find_interface.lower() == "yes" or find_interface.lower() == "y":
        interface = main_interface()
        if interface is None:
            print("\033[91merror: Couldn't find your network interface.\033[0m")
            return
    else:
        interface = input(
            "\033[93mWhat is your \033[92mmain interface\033[93m? \033[0m"
        )
    print("\033[93m───────────────────────────────────────\033[0m")
    mtu_config = ""
    mtu_choice = input(
        f"\033[93mDo you want to set \033[92mWireguard MTU\033[93m for \033[92mClient\033[96m [4] \033[93m(\033[92myes\033[93m/\033[91mno\033[93m): \033[0m"
    ).lower()
    if mtu_choice in ["yes", "y"]:
        mtu_value = input(
            f"\033[93mEnter MTU value for \033[92mClient\033[96m [4] \033[93m: \033[0m"
        )
        mtu_config = f"MTU = {mtu_value}\n"

    client_config = f"""
[Interface]
PrivateKey = {client_private_key}
Address = {client_ip}/{client_subnet}
ListenPort = {client_port}
{mtu_config}
PostUp = iptables -I INPUT -p udp --dport {client_port} -j ACCEPT
PostUp = iptables -I FORWARD -i {interface} -o wireclient -j ACCEPT
PostUp = iptables -I FORWARD -i wireclient -j ACCEPT
PostUp = iptables -t nat -A POSTROUTING -o {interface} -j MASQUERADE
PostUp = ip6tables -I FORWARD -i wireclient -j ACCEPT
PostUp = ip6tables -t nat -A POSTROUTING -o {interface} -j MASQUERADE
PostDown = iptables -D INPUT -p udp --dport {client_port} -j ACCEPT
PostDown = iptables -D FORWARD -i {interface} -o wireclient -j ACCEPT
PostDown = iptables -D FORWARD -i wireclient -j ACCEPT
PostDown = iptables -t nat -D POSTROUTING -o {interface} -j MASQUERADE
PostDown = ip6tables -D FORWARD -i wireclient -j ACCEPT
PostDown = ip6tables -t nat -D POSTROUTING -o {interface} -j MASQUERADE

[Peer]
PublicKey = {server_public_key}
AllowedIPs = {server_private_ip}/{server_subnet}
Endpoint = {server_public_ip}:{client_port}
"""

    client_config_path = "/etc/wireguard/wireclient.conf"
    write_config(client_config_path, client_config)
    wgclient()
    print("\033[93m───────────────────────────────────────\033[0m")
    display_checkmark(
        f"\033[92mClient configuration saved to \033[97m{client_config_path}\033[0m"
    )
    gre6tap_kharej4_wireguard(client_ip, server_private_ip)


# kharej client 5
def wireguardgre6tap_kharej_client5():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print("\033[92m(   ) \033[93mWireguard + Gre6tap \033[92mKharej Client [5]\033[0m")
    print('\033[92m "-"\033[93m═════════════════════════════════════════\033[0m')
    check_wireguard_installed()
    print("\033[93m───────────────────────────────────────\033[0m")
    display_notification("\033[93mConfiguring WireGuard Client\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    server_public_key = user_input(
        "\033[93mEnter \033[92mIRAN Server\033[93m's config \033[96m[5] \033[96mpublic key:\033[0m "
    )
    client_private_key = user_input(
        "\033[93mEnter \033[92mKharej Client\033[96m [5]\033[93m private key:\033[0m "
    )
    server_public_ip = user_input(
        "\033[93mEnter \033[92mIRAN Server\033[93m IPV4 address:\033[0m "
    )
    client_port = user_input(
        "\033[93mEnter the \033[92mConfig \033[96m[5] \033[93mTunnel port:\033[0m "
    )
    print("\033[93m───────────────────────────────────────\033[0m")
    client_ip, client_subnet, ip_version = ipversion_n_address_gre6tapwire5(
        "\033[92mKharej\033[93m Client \033[96m[5]\033[0m"
    )
    print("\033[93m───────────────────────────────────────\033[0m")
    server_private_ip, server_subnet = ipversion_n_address_gre6tapwire5(
        "\033[92mIRAN Server\033[93m Config \033[96m[5]\033[0m"
    )[:2]
    ufwportudp(client_port)
    ufw(client_ip)
    ufw(server_private_ip)
    print("\033[93m───────────────────────────────────────\033[0m")
    find_interface = input(
        "\033[93mDo you want meh to find the \033[92mmain interface\033[96m automatically\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m"
    )
    if find_interface.lower() == "yes" or find_interface.lower() == "y":
        interface = main_interface()
        if interface is None:
            print("\033[91merror: Couldn't find your network interface.\033[0m")
            return
    else:
        interface = input(
            "\033[93mWhat is your \033[92mmain interface\033[93m? \033[0m"
        )
    print("\033[93m───────────────────────────────────────\033[0m")
    mtu_config = ""
    mtu_choice = input(
        f"\033[93mDo you want to set \033[92mWireguard MTU\033[93m for \033[92mClient\033[96m [5] \033[93m(\033[92myes\033[93m/\033[91mno\033[93m): \033[0m"
    ).lower()
    if mtu_choice in ["yes", "y"]:
        mtu_value = input(
            f"\033[93mEnter MTU value for \033[92mClient\033[96m [5] \033[93m: \033[0m"
        )
        mtu_config = f"MTU = {mtu_value}\n"

    client_config = f"""
[Interface]
PrivateKey = {client_private_key}
Address = {client_ip}/{client_subnet}
ListenPort = {client_port}
{mtu_config}
PostUp = iptables -I INPUT -p udp --dport {client_port} -j ACCEPT
PostUp = iptables -I FORWARD -i {interface} -o wireclient -j ACCEPT
PostUp = iptables -I FORWARD -i wireclient -j ACCEPT
PostUp = iptables -t nat -A POSTROUTING -o {interface} -j MASQUERADE
PostUp = ip6tables -I FORWARD -i wireclient -j ACCEPT
PostUp = ip6tables -t nat -A POSTROUTING -o {interface} -j MASQUERADE
PostDown = iptables -D INPUT -p udp --dport {client_port} -j ACCEPT
PostDown = iptables -D FORWARD -i {interface} -o wireclient -j ACCEPT
PostDown = iptables -D FORWARD -i wireclient -j ACCEPT
PostDown = iptables -t nat -D POSTROUTING -o {interface} -j MASQUERADE
PostDown = ip6tables -D FORWARD -i wireclient -j ACCEPT
PostDown = ip6tables -t nat -D POSTROUTING -o {interface} -j MASQUERADE

[Peer]
PublicKey = {server_public_key}
AllowedIPs = {server_private_ip}/{server_subnet}
Endpoint = {server_public_ip}:{client_port}
"""

    client_config_path = "/etc/wireguard/wireclient.conf"
    write_config(client_config_path, client_config)
    wgclient()
    print("\033[93m───────────────────────────────────────\033[0m")
    display_checkmark(
        f"\033[92mClient configuration saved to \033[97m{client_config_path}\033[0m"
    )
    gre6tap_kharej5_wireguard(client_ip, server_private_ip)


##end
def wireguardgre6tapnative_mnu():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print(
        "\033[92m(   ) \033[93mWireguard + GRE6tap Native + IPSEC \033[93mMenu\033[0m"
    )
    print(
        '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
    )
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print(
        "1. \033[92mWireguard + GRE6tap Native - [1]Kharej Server [5]IRAN Clients\033[0m"
    )
    print(
        "2. \033[93mWireguard + GRE6tap Native - [1]IRAN   Server [5]Kharej Clients\033[0m"
    )
    print("\033[93m───────────────────────────────────────\033[0m")
    print("0.\033[97mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")
    while True:
        server_type = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if server_type == "1":
            gre6tapnativekharej_wireguard_menu()
            break
        elif server_type == "2":
            gre6tapnativeiran_wireguard_menu()
            break
        elif server_type == "0":
            os.system("clear")
            wireguard_allinone_mnu()
            break
        else:
            print("Invalid choice.")


def gre6tapnativekharej_wireguard_menu():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print(
        "\033[92m(   ) \033[93mGRE6tap Native + Wireguard + IPSEC \033[92m[1]Kharej Server\033[96m [5]IRAN Client\033[93mMenu\033[0m"
    )
    print(
        '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
    )
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[92mIRAN Client [1] Config\033[0m")
    print("2. \033[92mIRAN Client [2] Config\033[0m")
    print("3. \033[92mIRAN Client [3] Config\033[0m")
    print("4. \033[93mIRAN Client [4] Config\033[0m")
    print("5. \033[92mIRAN Client [5] Config\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    print("6. \033[96mKharej Server Config\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    print("0.\033[97mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")
    while True:
        server_type = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if server_type == "1":
            wireguardgre6tap_nativeiran_client1()
            break
        elif server_type == "2":
            wireguardgre6tap_nativeiran_client2()
            break
        elif server_type == "3":
            wireguardgre6tap_nativeiran_client3()
            break
        elif server_type == "4":
            wireguardgre6tap_nativeiran_client4()
            break
        elif server_type == "5":
            wireguardgre6tap_nativeiran_client5()
            break
        elif server_type == "6":
            wireguardgre6tapnative_kharej_server()
            break
        elif server_type == "0":
            os.system("clear")
            wireguardgre6tapnative_mnu()
            break
        else:
            print("Invalid choice.")


def servernclient_gre6tap(client_num):
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification(
        f"\033[93mConfiguring \033[96mWireguard \033[92mServer & Client \033[96m{client_num}\033[0m"
    )

    server_private_key, server_public_key = generate_keys()
    client_private_key, client_public_key = generate_keys()

    print(f"\033[93m───────────────────────────────────────\033[0m")
    print(
        f"\033[92mKharej\033[93m Server\033[96m Config\033[97m {client_num}\033[93m Keys:\033[0m"
    )
    print(f"\033[93m───────────────────────────────────────\033[0m")
    print(
        f"\033[93m╭──────────────────────────────────────────────────────────╮\033[0m"
    )
    print(f"  Private Key:\033[96m {server_private_key}\033[0m")
    print(f"  Public  Key:\033[96m {server_public_key}\033[0m")
    print(
        f"\033[93m╰──────────────────────────────────────────────────────────╯\033[0m"
    )

    print(f"\033[93m───────────────────────────────────────\033[0m")
    print(f"\033[92mIRAN\033[93m Client\033[96m {client_num}\033[93m Keys:\033[0m")
    print(f"\033[93m───────────────────────────────────────\033[0m")
    print(
        f"\033[93m╭──────────────────────────────────────────────────────────╮\033[0m"
    )
    print(f"  Private Key:\033[96m {client_private_key}\033[0m")
    print(f"  Public  Key:\033[96m {client_public_key}\033[0m")
    print(
        f"\033[93m╰──────────────────────────────────────────────────────────╯\033[0m"
    )

    ipversion = ipver(
        f"\033[92mKharej \033[93mServer Config \033[96m{client_num}\033[0m"
    )

    if ipversion == 1:
        ipoptions = {
            1: ["60.2.0.1", "172.168.0.1", "manual"],
            2: ["60.3.0.1", "172.168.1.1", "manual"],
            3: ["60.4.0.1", "172.168.2.1", "manual"],
            4: ["60.5.0.1", "172.168.3.1", "manual"],
            5: ["60.6.0.1", "172.168.4.1", "manual"],
        }
        subnet = "24"
    else:
        ipoptions = {
            1: ["2001:dc5::1", "fd1d:cd1::1", "manual"],
            2: ["2001:de5::1", "fd1d:ed1::1", "manual"],
            3: ["2001:df5::1", "fd1d:fd1::1", "manual"],
            4: ["2001:da5::1", "fd1d:ad1::1", "manual"],
            5: ["2001:db5::1", "fd1d:bd1::1", "manual"],
        }
        subnet = "64"

    server_ip = ipaddr(
        ipversion, ipoptions[client_num], f"\033[93mServer Config {client_num}\033[0m"
    )
    print(f"\033[93m───────────────────────────────────────\033[0m")
    server_port = input(
        f"\033[93mEnter \033[92mConfig \033[96m{client_num}\033[93m Tunnel Port: \033[0m"
    )

    iran_client_ips_v6 = [
        "2002:801a::2",
        "2002:811a::2",
        "2002:821a::2",
        "2002:831a::2",
        "2002:841a::2",
    ]

    ipversion = ipver(f"\033[92mIRAN \033[93mClient \033[96m{client_num} Config\033[0m")

    if ipversion == 1:
        ipoptions = {
            1: ["60.2.0.2", "172.168.0.2", "manual"],
            2: ["60.3.0.2", "172.168.1.2", "manual"],
            3: ["60.4.0.2", "172.168.2.2", "manual"],
            4: ["60.5.0.2", "172.168.3.2", "manual"],
            5: ["60.6.0.2", "172.168.4.2", "manual"],
        }
        client_subnet = "32"
    else:
        ipoptions = {
            1: ["2001:dc5::2", "fd1d:cd1::2", "manual"],
            2: ["2001:de5::2", "fd1d:ed1::2", "manual"],
            3: ["2001:df5::2", "fd1d:fd1::2", "manual"],
            4: ["2001:da5::2", "fd1d:ad1::2", "manual"],
            5: ["2001:db5::2", "fd1d:bd1::2", "manual"],
        }
        client_subnet = "128"
    client_privateip = iran_client_ips_v6[client_num - 1]
    client_ip = ipaddr(ipversion, ipoptions[client_num], f"Client {client_num}")
    print("\033[93m───────────────────────────────────────\033[0m")
    find_interface = input(
        "\033[93mDo you want meh to find the \033[92mmain interface\033[96m automatically\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m"
    )
    if find_interface.lower() == "yes" or find_interface.lower() == "y":
        interface = main_interface()
        if interface is None:
            print("\033[91merror: Couldn't find your network interface.\033[0m")
            return
    else:
        interface = input(
            "\033[93mWhat is your \033[92mmain interface\033[93m? \033[0m"
        )
    print("\033[93m───────────────────────────────────────\033[0m")
    mtu_config = ""
    mtu_choice = input(
        f"\033[93mDo you want to set \033[92mWireguard MTU\033[93m for \033[92mKharej Server\033[96m Config [1] \033[93m(\033[92myes\033[93m/\033[91mno\033[93m): \033[0m"
    ).lower()
    if mtu_choice in ["yes", "y"]:
        mtu_value = input(
            f"\033[93mEnter MTU value for \033[92mKharej Server\033[96m Config [1] \033[93m: \033[0m"
        )
        mtu_config = f"MTU = {mtu_value}\n"

    if ipversion == 1:
        server_config = f"""
[Interface]
PrivateKey = {server_private_key}
Address = {server_ip}/{subnet}  
ListenPort = {server_port}
{mtu_config}
PostUp = iptables -I INPUT -p udp --dport {server_port} -j ACCEPT
PostUp = iptables -I FORWARD -i {interface} -o wireserver{client_num} -j ACCEPT
PostUp = iptables -I FORWARD -i wireserver{client_num} -j ACCEPT
PostUp = iptables -t nat -A POSTROUTING -o {interface} -j MASQUERADE
PostUp = ip6tables -I FORWARD -i wireserver{client_num} -j ACCEPT
PostUp = ip6tables -t nat -A POSTROUTING -o {interface} -j MASQUERADE
PostDown = iptables -D INPUT -p udp --dport {server_port} -j ACCEPT
PostDown = iptables -D FORWARD -i {interface} -o wireserver{client_num} -j ACCEPT
PostDown = iptables -D FORWARD -i wireserver{client_num} -j ACCEPT
PostDown = iptables -t nat -D POSTROUTING -o {interface} -j MASQUERADE
PostDown = ip6tables -D FORWARD -i wireserver{client_num} -j ACCEPT
PostDown = ip6tables -t nat -D POSTROUTING -o {interface} -j MASQUERADE

[Peer]
PublicKey = {client_public_key}
AllowedIPs = {client_ip}/{client_subnet}  
Endpoint = {client_privateip}:{server_port}
"""
    else:
        server_config = f"""
[Interface]
PrivateKey = {server_private_key}
Address = {server_ip}/{subnet}  
ListenPort = {server_port}
{mtu_config}
PostUp = iptables -I INPUT -p udp --dport {server_port} -j ACCEPT
PostUp = iptables -I FORWARD -i {interface} -o wireserver{client_num} -j ACCEPT
PostUp = iptables -I FORWARD -i wireserver{client_num} -j ACCEPT
PostUp = iptables -t nat -A POSTROUTING -o {interface} -j MASQUERADE
PostUp = ip6tables -I FORWARD -i wireserver{client_num} -j ACCEPT
PostUp = ip6tables -t nat -A POSTROUTING -o {interface} -j MASQUERADE
PostDown = iptables -D INPUT -p udp --dport {server_port} -j ACCEPT
PostDown = iptables -D FORWARD -i {interface} -o wireserver{client_num} -j ACCEPT
PostDown = iptables -D FORWARD -i wireserver{client_num} -j ACCEPT
PostDown = iptables -t nat -D POSTROUTING -o {interface} -j MASQUERADE
PostDown = ip6tables -D FORWARD -i wireserver{client_num} -j ACCEPT
PostDown = ip6tables -t nat -D POSTROUTING -o {interface} -j MASQUERADE

[Peer]
PublicKey = {client_public_key}
AllowedIPs = {client_ip}/{client_subnet}  
Endpoint = {client_privateip}:{server_port}
"""

    server_confpath = f"/etc/wireguard/wireserver{client_num}.conf"
    keynconfig(server_confpath, server_config)
    ufwportudp(server_port)
    wg(client_num)

    return server_ip, client_ip, "ipv4" if ipversion == 1 else "ipv6"


def servernclient_gre6tap2(client_num):
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification(
        f"\033[93mConfiguring \033[96mWireguard \033[92mServer & Client \033[96m{client_num}\033[0m"
    )

    server_private_key, server_public_key = generate_keys()
    client_private_key, client_public_key = generate_keys()

    print(f"\033[93m───────────────────────────────────────\033[0m")
    print(
        f"\033[92mIRAN\033[93m Server\033[96m Config \033[97m{client_num}\033[93m Keys:\033[0m"
    )
    print(f"\033[93m───────────────────────────────────────\033[0m")
    print(
        f"\033[93m╭──────────────────────────────────────────────────────────╮\033[0m"
    )
    print(f"  Private Key:\033[96m {server_private_key}\033[0m")
    print(f"  Public  Key:\033[96m {server_public_key}\033[0m")
    print(
        f"\033[93m╰──────────────────────────────────────────────────────────╯\033[0m"
    )

    print(f"\033[93m───────────────────────────────────────\033[0m")
    print(f"\033[92mKharej\033[93m Client \033[96m{client_num}\033[93m Keys:\033[0m")
    print(f"\033[93m───────────────────────────────────────\033[0m")
    print(
        f"\033[93m╭──────────────────────────────────────────────────────────╮\033[0m"
    )
    print(f"  Private Key:\033[96m {client_private_key}\033[0m")
    print(f"  Public  Key:\033[96m {client_public_key}\033[0m")
    print(
        f"\033[93m╰──────────────────────────────────────────────────────────╯\033[0m"
    )

    ipversion = ipver(f"\033[92mIRAN \033[93mServer Config \033[96m{client_num}\033[0m")

    if ipversion == 1:
        ipoptions = {
            1: ["60.2.0.1", "172.168.0.1", "manual"],
            2: ["60.3.0.1", "172.168.1.1", "manual"],
            3: ["60.4.0.1", "172.168.2.1", "manual"],
            4: ["60.5.0.1", "172.168.3.1", "manual"],
            5: ["60.6.0.1", "172.168.4.1", "manual"],
        }
        subnet = "24"
    else:
        ipoptions = {
            1: ["2001:dc5::1", "fd1d:cd1::1", "manual"],
            2: ["2001:de5::1", "fd1d:ed1::1", "manual"],
            3: ["2001:df5::1", "fd1d:fd1::1", "manual"],
            4: ["2001:da5::1", "fd1d:ad1::1", "manual"],
            5: ["2001:db5::1", "fd1d:bd1::1", "manual"],
        }
        subnet = "64"

    server_ip = ipaddr(
        ipversion, ipoptions[client_num], f"\033[93mServer Config {client_num}\033[0m"
    )
    print(f"\033[93m───────────────────────────────────────\033[0m")
    server_port = input(
        f"\033[93mEnter \033[92mConfig \033[96m{client_num}\033[93m Tunnel Port: \033[0m"
    )
    iran_client_ips_v6 = [
        "2002:801a::1",
        "2002:811a::1",
        "2002:821a::1",
        "2002:831a::1",
        "2002:841a::1",
    ]

    ipversion = ipver(
        f"\033[92mKharej \033[93mClient \033[96m{client_num} Config\033[0m"
    )

    if ipversion == 1:
        ipoptions = {
            1: ["60.2.0.2", "172.168.0.2", "manual"],
            2: ["60.3.0.2", "172.168.1.2", "manual"],
            3: ["60.4.0.2", "172.168.2.2", "manual"],
            4: ["60.5.0.2", "172.168.3.2", "manual"],
            5: ["60.6.0.2", "172.168.4.2", "manual"],
        }
        client_subnet = "32"
    else:
        ipoptions = {
            1: ["2001:dc5::2", "fd1d:cd1::2", "manual"],
            2: ["2001:de5::2", "fd1d:ed1::2", "manual"],
            3: ["2001:df5::2", "fd1d:fd1::2", "manual"],
            4: ["2001:da5::2", "fd1d:ad1::2", "manual"],
            5: ["2001:db5::2", "fd1d:bd1::2", "manual"],
        }
        client_subnet = "128"
    client_privateip = iran_client_ips_v6[client_num - 1]
    client_ip = ipaddr(ipversion, ipoptions[client_num], f"Client {client_num}")
    print("\033[93m───────────────────────────────────────\033[0m")
    find_interface = input(
        "\033[93mDo you want meh to find the \033[92mmain interface\033[96m automatically\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m"
    )
    if find_interface.lower() == "yes" or find_interface.lower() == "y":
        interface = main_interface()
        if interface is None:
            print("\033[91merror: Couldn't find your network interface.\033[0m")
            return
    else:
        interface = input(
            "\033[93mWhat is your \033[92mmain interface\033[93m? \033[0m"
        )
    print("\033[93m───────────────────────────────────────\033[0m")
    mtu_config = ""
    mtu_choice = input(
        f"\033[93mDo you want to set \033[92mWireguard MTU\033[93m for \033[92mIRAN Server\033[96m Config [1] \033[93m(\033[92myes\033[93m/\033[91mno\033[93m): \033[0m"
    ).lower()
    if mtu_choice in ["yes", "y"]:
        mtu_value = input(
            f"\033[93mEnter MTU value for \033[92mIRAN Server\033[96m Config [1] \033[93m: \033[0m"
        )
        mtu_config = f"MTU = {mtu_value}\n"

    if ipversion == 1:
        server_config = f"""
[Interface]
PrivateKey = {server_private_key}
Address = {server_ip}/{subnet}  
ListenPort = {server_port}
{mtu_config}
PostUp = iptables -I INPUT -p udp --dport {server_port} -j ACCEPT
PostUp = iptables -I FORWARD -i {interface} -o wireserver{client_num} -j ACCEPT
PostUp = iptables -I FORWARD -i wireserver{client_num} -j ACCEPT
PostUp = iptables -t nat -A POSTROUTING -o {interface} -j MASQUERADE
PostUp = ip6tables -I FORWARD -i wireserver{client_num} -j ACCEPT
PostUp = ip6tables -t nat -A POSTROUTING -o {interface} -j MASQUERADE
PostDown = iptables -D INPUT -p udp --dport {server_port} -j ACCEPT
PostDown = iptables -D FORWARD -i {interface} -o wireserver{client_num} -j ACCEPT
PostDown = iptables -D FORWARD -i wireserver{client_num} -j ACCEPT
PostDown = iptables -t nat -D POSTROUTING -o {interface} -j MASQUERADE
PostDown = ip6tables -D FORWARD -i wireserver{client_num} -j ACCEPT
PostDown = ip6tables -t nat -D POSTROUTING -o {interface} -j MASQUERADE

[Peer]
PublicKey = {client_public_key}
AllowedIPs = {client_ip}/{client_subnet}  
Endpoint = {client_privateip}:{server_port}
"""
    else:
        server_config = f"""
[Interface]
PrivateKey = {server_private_key}
Address = {server_ip}/{subnet}  
ListenPort = {server_port}
{mtu_config}
PostUp = iptables -I INPUT -p udp --dport {server_port} -j ACCEPT
PostUp = iptables -I FORWARD -i {interface} -o wireserver{client_num} -j ACCEPT
PostUp = iptables -I FORWARD -i wireserver{client_num} -j ACCEPT
PostUp = iptables -t nat -A POSTROUTING -o {interface} -j MASQUERADE
PostUp = ip6tables -I FORWARD -i wireserver{client_num} -j ACCEPT
PostUp = ip6tables -t nat -A POSTROUTING -o {interface} -j MASQUERADE
PostDown = iptables -D INPUT -p udp --dport {server_port} -j ACCEPT
PostDown = iptables -D FORWARD -i {interface} -o wireserver{client_num} -j ACCEPT
PostDown = iptables -D FORWARD -i wireserver{client_num} -j ACCEPT
PostDown = iptables -t nat -D POSTROUTING -o {interface} -j MASQUERADE
PostDown = ip6tables -D FORWARD -i wireserver{client_num} -j ACCEPT
PostDown = ip6tables -t nat -D POSTROUTING -o {interface} -j MASQUERADE

[Peer]
PublicKey = {client_public_key}
AllowedIPs = {client_ip}/{client_subnet}  
Endpoint = {client_privateip}:{server_port}
"""

    server_confpath = f"/etc/wireguard/wireserver{client_num}.conf"
    keynconfig(server_confpath, server_config)
    ufwportudp(server_port)
    wg(client_num)

    return server_ip, client_ip, "ipv4" if ipversion == 1 else "ipv6"

def service_exists(service_name):
    result = subprocess.run(
        ["systemctl", "list-units", "--full", "--all", service_name],
        stdout=subprocess.PIPE,
        stderr=subprocess.PIPE,
    )
    return service_name in result.stdout.decode()

def cmd(command):
    subprocess.run(command, shell=True, check=True)

def config_server(psk, server_ipv6, iran_servers):
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    animate("\033[93mInstalling IPSEC..\033[0m")
    hide("sudo apt install strongswan -y")
    animate("\033[92mIPSEC Installation is completed!\033[0m")

    if service_exists("strongswan-starter.service"):
        cmd("sudo systemctl disable strongswan-starter")
        cmd("sudo systemctl stop strongswan-starter")

    if service_exists("strongswan.service"):
        cmd("sudo systemctl disable strongswan")
        cmd("sudo systemctl stop strongswan")

    cmd("sudo rm -f /etc/ipsec1.conf /etc/ipsec.secrets")

    ipsec_conf = """config setup
##azumiisinyourarea
 charondebug="all"
 uniqueids=no
"""
    secrets_conf = ""

    for i, (client_ip, _) in enumerate(iran_servers, start=1):
        unique_server_ipv6 = f"{server_ipv6[:-2]}{i:02x}/64"
        ipsec_conf += f"""
conn ISATAP_server{i}
  left=%defaultroute
  leftsubnet={unique_server_ipv6}
  leftid={unique_server_ipv6[:-3]}
  right={client_ip}
  rightsubnet={client_ip}/64
  ike=aes256gcm16-sha512-ecp384!
  esp=aes256gcm16-sha512-ecp384!
  keyexchange=ikev2
  auto=start
  authby=secret
  keyingtries=%forever
  dpdaction=restart
  dpddelay=30s
  dpdtimeout=120s
  rekeymargin=3m
  rekeyfuzz=100%
  reauth=no
"""
        secrets_conf += f'{client_ip} {unique_server_ipv6[:-3]} : PSK "{psk}"\n'

    with open("/etc/ipsec1.conf", "w") as f:
        f.write(ipsec_conf)

    with open("/etc/ipsec.secrets", "w") as f:
        f.write(secrets_conf)

    service_content = """[Unit]
Description=strongazumi IPsec IKEv1/IKEv2 daemon using ipsec.conf
After=network-online.target

[Service]
ExecStart=/usr/sbin/ipsec start --nofork --conf /etc/ipsec1.conf
ExecReload=/usr/sbin/ipsec reload
Restart=always
RestartSec=5
LimitNOFILE=1048576

[Install]
WantedBy=multi-user.target
"""

    with open("/etc/systemd/system/strong-azumi1.service", "w") as f:
        f.write(service_content)

    cmd("sudo systemctl daemon-reload")
    cmd("sudo systemctl enable strong-azumi1")
    cmd("sudo systemctl restart strong-azumi1")


def config_client(psk, server_ipv6, client_ipv6):
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    animate("\033[93mInstalling IPSEC..\033[0m")
    hide("sudo apt install strongswan -y")
    animate("\033[92mIPSEC Installation is completed!\033[0m")

    if service_exists("strongswan-starter.service"):
        cmd("sudo systemctl disable strongswan-starter")
        cmd("sudo systemctl stop strongswan-starter")

    if service_exists("strongswan.service"):
        cmd("sudo systemctl disable strongswan")
        cmd("sudo systemctl stop strongswan")

    cmd("sudo rm -f /etc/ipsec1.conf /etc/ipsec.secrets")

    ipsec_conf = f"""config setup
##azumiisinyourarea
  
conn localtun_server
  left=%defaultroute
  leftsubnet={client_ipv6}/64
  leftid={client_ipv6}
  right={server_ipv6}
  rightsubnet={server_ipv6}/64
  ike=aes256gcm16-sha512-ecp384!
  esp=aes256gcm16-sha512-ecp384!
  keyexchange=ikev2
  auto=start
  authby=secret
  keyingtries=%forever
  dpdaction=restart
  dpddelay=30s
  dpdtimeout=120s
  rekeymargin=3m
  rekeyfuzz=100%
  reauth=no
"""

    with open("/etc/ipsec1.conf", "w") as f:
        f.write(ipsec_conf)

    with open("/etc/ipsec.secrets", "w") as f:
        f.write(f'{server_ipv6} {client_ipv6} : PSK "{psk}"\n')

    service_content = """[Unit]
Description=strongazumi IPsec IKEv1/IKEv2 daemon using ipsec.conf
After=network-online.target

[Service]
ExecStart=/usr/sbin/ipsec start --nofork --conf /etc/ipsec1.conf
ExecReload=/usr/sbin/ipsec reload
Restart=always
RestartSec=5
LimitNOFILE=1048576

[Install]
WantedBy=multi-user.target
"""

    with open("/etc/systemd/system/strong-azumi1.service", "w") as f:
        f.write(service_content)

    cmd("sudo systemctl daemon-reload")
    cmd("sudo systemctl enable strong-azumi1")
    cmd("sudo systemctl restart strong-azumi1")


def wireguardgre6tapnative_kharej_server():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print(
        "\033[92m(   ) \033[93mWireguard + GRE6tap Native \033[92mKharej Server\033[0m"
    )
    print('\033[92m "-"\033[93m═════════════════════════════════════════\033[0m')
    check_wireguard_installed()
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    num_clients = int(
        input("\033[93mEnter the number of \033[92mIRAN\033[93m Clients: \033[0m")
    )

    for i in range(1, num_clients + 1):
        menu_name = f"gre6tap_nativekharej{i}_wireguard"
        if menu_name in globals():
            globals()[menu_name]()
        else:
            print(f"Function {menu_name} does not exist.")

    server_ips = []
    client_ips = []
    ip_versions = set()

    for i in range(1, num_clients + 1):
        server_ip, client_ip, ip_version = servernclient_gre6tap(i)
        server_ips.append(server_ip)
        client_ips.append(client_ip)
        ip_versions.add(ip_version)
        create_wireguardping_server(client_ip, i)
        wireguardping_server_service(i)
        ufw(server_ip)
        ufw(client_ip)

    print(f"\033[93m───────────────────────────────────────\033[0m")
    ipsec_choice = (
        input(
            "\033[93mDo you want to configure IPsec? (\033[92myes\033[93m or \033[91mno): \033[0m"
        )
        .strip()
        .lower()
    )

    if ipsec_choice in ["yes", "y"]:
        psk = input("\033[93mEnter IPSEC \033[92mSecret Key\033[93m: \033[0m")
        ip_ver = ip_versions.pop()
        config_server(psk, server_ips, client_ips, ip_ver)


def wireguardgre6tap_nativeiran_client1():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print(
        "\033[92m(   ) \033[93mGre6tap Native + Wireguard \033[92mIRAN Client [1]\033[0m"
    )
    print('\033[92m "-"\033[93m═════════════════════════════════════════\033[0m')
    gre6tap2_nativeiran1_wireguard()
    check_wireguard_installed()
    print("\033[93m───────────────────────────────────────\033[0m")
    display_notification("\033[93mConfiguring WireGuard Client\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    server_public_key = user_input(
        "\033[93mEnter \033[92mKharej Server\033[93m's config \033[96m[1] \033[96mpublic key:\033[0m "
    )
    client_private_key = user_input(
        "\033[93mEnter \033[92mIRAN Client\033[96m [1]\033[93m private key:\033[0m "
    )
    client_port = user_input(
        "\033[93mEnter \033[92mConfig \033[96m[1]\033[93m Tunnel port:\033[0m "
    )

    client_ip, client_subnet, ip_version = ipversion_n_address(
        "\033[93mIRAN Client \033[92m[1]\033[0m"
    )
    server_private_ip, server_subnet = ipversion_n_address(
        "\033[93mKharej Server Config \033[92m[1]\033[0m"
    )[:2]
    ufwportudp(client_port)
    ufw(client_ip)
    ufw(server_private_ip)
    print("\033[93m───────────────────────────────────────\033[0m")
    find_interface = input(
        "\033[93mDo you want meh to find the \033[92mmain interface\033[96m automatically\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m"
    )
    if find_interface.lower() == "yes" or find_interface.lower() == "y":
        interface = main_interface()
        if interface is None:
            print("\033[91merror: Couldn't find your network interface.\033[0m")
            return
    else:
        interface = input(
            "\033[93mWhat is your \033[92mmain interface\033[93m? \033[0m"
        )
    print("\033[93m───────────────────────────────────────\033[0m")
    mtu_config = ""
    mtu_choice = input(
        f"\033[93mDo you want to set \033[92mWireguard MTU\033[93m for \033[92mClient\033[96m [1] \033[93m(\033[92myes\033[93m/\033[91mno\033[93m): \033[0m"
    ).lower()
    if mtu_choice in ["yes", "y"]:
        mtu_value = input(
            f"\033[93mEnter MTU value for \033[92mClient\033[96m [1] \033[93m: \033[0m"
        )
        mtu_config = f"MTU = {mtu_value}\n"

    client_config = f"""
[Interface]
PrivateKey = {client_private_key}
Address = {client_ip}/{client_subnet}
ListenPort = {client_port}
{mtu_config}
PostUp = iptables -I INPUT -p udp --dport {client_port} -j ACCEPT
PostUp = iptables -I FORWARD -i {interface} -o wireclient -j ACCEPT
PostUp = iptables -I FORWARD -i wireclient -j ACCEPT
PostUp = iptables -t nat -A POSTROUTING -o {interface} -j MASQUERADE
PostUp = ip6tables -I FORWARD -i wireclient -j ACCEPT
PostUp = ip6tables -t nat -A POSTROUTING -o {interface} -j MASQUERADE
PostDown = iptables -D INPUT -p udp --dport {client_port} -j ACCEPT
PostDown = iptables -D FORWARD -i {interface} -o wireclient -j ACCEPT
PostDown = iptables -D FORWARD -i wireclient -j ACCEPT
PostDown = iptables -t nat -D POSTROUTING -o {interface} -j MASQUERADE
PostDown = ip6tables -D FORWARD -i wireclient -j ACCEPT
PostDown = ip6tables -t nat -D POSTROUTING -o {interface} -j MASQUERADE

[Peer]
PublicKey = {server_public_key}
AllowedIPs = {server_private_ip}/{server_subnet}
Endpoint = 2002:801a::1:{client_port}
"""

    client_config_path = "/etc/wireguard/wireclient.conf"
    write_config(client_config_path, client_config)
    wgclient()
    create_wireguardping_client(server_private_ip)
    wireguardping_client_service()
    print("\033[93m───────────────────────────────────────\033[0m")
    display_checkmark(
        f"\033[92mClient configuration saved to \033[97m{client_config_path}\033[0m"
    )
    print(f"\033[93m───────────────────────────────────────\033[0m")
    ipsec_choice = (
        input(
            "\033[93mDo you want to configure IPsec? (\033[92myes\033[93m or \033[91mno): \033[0m"
        )
        .strip()
        .lower()
    )

    if ipsec_choice in ["yes", "y"]:
        psk = input("\033[93mEnter IPSEC \033[92mSecret Key\033[93m: \033[0m")
        config_client(psk, [server_private_ip], [client_ip], ip_version)


def wireguardgre6tap_nativeiran_client2():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print(
        "\033[92m(   ) \033[93mGre6tap Native + Wireguard \033[92mIRAN Client [2]\033[0m"
    )
    print('\033[92m "-"\033[93m═════════════════════════════════════════\033[0m')
    gre6tap2_nativeiran2_wireguard()
    check_wireguard_installed()
    print("\033[93m───────────────────────────────────────\033[0m")
    display_notification("\033[93mConfiguring WireGuard Client\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    server_public_key = user_input(
        "\033[93mEnter \033[92mKharej Server\033[93m's config \033[96m[2] \033[96mpublic key:\033[0m "
    )
    client_private_key = user_input(
        "\033[93mEnter \033[92mIRAN Client\033[96m [2]\033[93m private key:\033[0m "
    )
    client_port = user_input(
        "\033[93mEnter \033[92mConfig \033[96m[2]\033[93m Tunnel port:\033[0m "
    )

    client_ip, client_subnet, ip_version = ipversion_n_address2(
        "\033[93mIRAN Client \033[92m[2]\033[0m"
    )
    server_private_ip, server_subnet = ipversion_n_address2(
        "\033[93mKharej Server Config \033[92m[2]\033[0m"
    )[:2]
    ufwportudp(client_port)
    ufw(client_ip)
    ufw(server_private_ip)
    print("\033[93m───────────────────────────────────────\033[0m")
    find_interface = input(
        "\033[93mDo you want meh to find the \033[92mmain interface\033[96m automatically\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m"
    )
    if find_interface.lower() == "yes" or find_interface.lower() == "y":
        interface = main_interface()
        if interface is None:
            print("\033[91merror: Couldn't find your network interface.\033[0m")
            return
    else:
        interface = input(
            "\033[93mWhat is your \033[92mmain interface\033[93m? \033[0m"
        )
    print("\033[93m───────────────────────────────────────\033[0m")
    mtu_config = ""
    mtu_choice = input(
        f"\033[93mDo you want to set \033[92mWireguard MTU\033[93m for \033[92mClient\033[96m [2] \033[93m(\033[92myes\033[93m/\033[91mno\033[93m): \033[0m"
    ).lower()
    if mtu_choice in ["yes", "y"]:
        mtu_value = input(
            f"\033[93mEnter MTU value for \033[92mClient\033[96m [2] \033[93m: \033[0m"
        )
        mtu_config = f"MTU = {mtu_value}\n"

    client_config = f"""
[Interface]
PrivateKey = {client_private_key}
Address = {client_ip}/{client_subnet}
ListenPort = {client_port}
{mtu_config}
PostUp = iptables -I INPUT -p udp --dport {client_port} -j ACCEPT
PostUp = iptables -I FORWARD -i {interface} -o wireclient -j ACCEPT
PostUp = iptables -I FORWARD -i wireclient -j ACCEPT
PostUp = iptables -t nat -A POSTROUTING -o {interface} -j MASQUERADE
PostUp = ip6tables -I FORWARD -i wireclient -j ACCEPT
PostUp = ip6tables -t nat -A POSTROUTING -o {interface} -j MASQUERADE
PostDown = iptables -D INPUT -p udp --dport {client_port} -j ACCEPT
PostDown = iptables -D FORWARD -i {interface} -o wireclient -j ACCEPT
PostDown = iptables -D FORWARD -i wireclient -j ACCEPT
PostDown = iptables -t nat -D POSTROUTING -o {interface} -j MASQUERADE
PostDown = ip6tables -D FORWARD -i wireclient -j ACCEPT
PostDown = ip6tables -t nat -D POSTROUTING -o {interface} -j MASQUERADE

[Peer]
PublicKey = {server_public_key}
AllowedIPs = {server_private_ip}/{server_subnet}
Endpoint = 2002:811a::1:{client_port}
"""

    client_config_path = "/etc/wireguard/wireclient.conf"
    write_config(client_config_path, client_config)
    wgclient()
    create_wireguardping_client(server_private_ip)
    wireguardping_client_service()
    print("\033[93m───────────────────────────────────────\033[0m")
    display_checkmark(
        f"\033[92mClient configuration saved to \033[97m{client_config_path}\033[0m"
    )
    print(f"\033[93m───────────────────────────────────────\033[0m")
    ipsec_choice = (
        input(
            "\033[93mDo you want to configure IPsec? (\033[92myes\033[93m or \033[91mno): \033[0m"
        )
        .strip()
        .lower()
    )

    if ipsec_choice in ["yes", "y"]:
        psk = input("\033[93mEnter IPSEC \033[92mSecret Key\033[93m: \033[0m")
        config_client(psk, [server_private_ip], [client_ip], ip_version)


def wireguardgre6tap_nativeiran_client3():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print(
        "\033[92m(   ) \033[93mGre6tap Native + Wireguard \033[92mIRAN Client [3]\033[0m"
    )
    print('\033[92m "-"\033[93m═════════════════════════════════════════\033[0m')
    gre6tap2_nativeiran3_wireguard()
    check_wireguard_installed()
    print("\033[93m───────────────────────────────────────\033[0m")
    display_notification("\033[93mConfiguring WireGuard Client\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    server_public_key = user_input(
        "\033[93mEnter \033[92mKharej Server\033[93m's config \033[96m[3] \033[96mpublic key:\033[0m "
    )
    client_private_key = user_input(
        "\033[93mEnter \033[92mIRAN Client\033[96m [3]\033[93m private key:\033[0m "
    )
    client_port = user_input(
        "\033[93mEnter \033[92mConfig \033[96m[3]\033[93m Tunnel port:\033[0m "
    )

    client_ip, client_subnet, ip_version = ipversion_n_address3(
        "\033[93mIRAN Client \033[92m[3]\033[0m"
    )
    server_private_ip, server_subnet = ipversion_n_address3(
        "\033[93mKharej Server Config \033[92m[3]\033[0m"
    )[:2]
    ufwportudp(client_port)
    ufw(client_ip)
    ufw(server_private_ip)
    print("\033[93m───────────────────────────────────────\033[0m")
    find_interface = input(
        "\033[93mDo you want meh to find the \033[92mmain interface\033[96m automatically\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m"
    )
    if find_interface.lower() == "yes" or find_interface.lower() == "y":
        interface = main_interface()
        if interface is None:
            print("\033[91merror: Couldn't find your network interface.\033[0m")
            return
    else:
        interface = input(
            "\033[93mWhat is your \033[92mmain interface\033[93m? \033[0m"
        )
    print("\033[93m───────────────────────────────────────\033[0m")
    mtu_config = ""
    mtu_choice = input(
        f"\033[93mDo you want to set \033[92mWireguard MTU\033[93m for \033[92mClient\033[96m [3] \033[93m(\033[92myes\033[93m/\033[91mno\033[93m): \033[0m"
    ).lower()
    if mtu_choice in ["yes", "y"]:
        mtu_value = input(
            f"\033[93mEnter MTU value for \033[92mClient\033[96m [3] \033[93m: \033[0m"
        )
        mtu_config = f"MTU = {mtu_value}\n"

    client_config = f"""
[Interface]
PrivateKey = {client_private_key}
Address = {client_ip}/{client_subnet}
ListenPort = {client_port}
{mtu_config}
PostUp = iptables -I INPUT -p udp --dport {client_port} -j ACCEPT
PostUp = iptables -I FORWARD -i {interface} -o wireclient -j ACCEPT
PostUp = iptables -I FORWARD -i wireclient -j ACCEPT
PostUp = iptables -t nat -A POSTROUTING -o {interface} -j MASQUERADE
PostUp = ip6tables -I FORWARD -i wireclient -j ACCEPT
PostUp = ip6tables -t nat -A POSTROUTING -o {interface} -j MASQUERADE
PostDown = iptables -D INPUT -p udp --dport {client_port} -j ACCEPT
PostDown = iptables -D FORWARD -i {interface} -o wireclient -j ACCEPT
PostDown = iptables -D FORWARD -i wireclient -j ACCEPT
PostDown = iptables -t nat -D POSTROUTING -o {interface} -j MASQUERADE
PostDown = ip6tables -D FORWARD -i wireclient -j ACCEPT
PostDown = ip6tables -t nat -D POSTROUTING -o {interface} -j MASQUERADE

[Peer]
PublicKey = {server_public_key}
AllowedIPs = {server_private_ip}/{server_subnet}
Endpoint = 2002:821a::1:{client_port}
"""

    client_config_path = "/etc/wireguard/wireclient.conf"
    write_config(client_config_path, client_config)
    wgclient()
    create_wireguardping_client(server_private_ip)
    wireguardping_client_service()
    print("\033[93m───────────────────────────────────────\033[0m")
    display_checkmark(
        f"\033[92mClient configuration saved to \033[97m{client_config_path}\033[0m"
    )
    print(f"\033[93m───────────────────────────────────────\033[0m")
    ipsec_choice = (
        input(
            "\033[93mDo you want to configure IPsec? (\033[92myes\033[93m or \033[91mno): \033[0m"
        )
        .strip()
        .lower()
    )

    if ipsec_choice in ["yes", "y"]:
        psk = input("\033[93mEnter IPSEC \033[92mSecret Key\033[93m: \033[0m")
        config_client(psk, [server_private_ip], [client_ip], ip_version)


def wireguardgre6tap_nativeiran_client4():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print(
        "\033[92m(   ) \033[93mGre6tap Native + Wireguard \033[92mIRAN Client [4]\033[0m"
    )
    print('\033[92m "-"\033[93m═════════════════════════════════════════\033[0m')
    gre6tap2_nativeiran4_wireguard()
    check_wireguard_installed()
    print("\033[93m───────────────────────────────────────\033[0m")
    display_notification("\033[93mConfiguring WireGuard Client\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    server_public_key = user_input(
        "\033[93mEnter \033[92mKharej Server\033[93m's config \033[96m[4] \033[96mpublic key:\033[0m "
    )
    client_private_key = user_input(
        "\033[93mEnter \033[92mIRAN Client\033[96m [4]\033[93m private key:\033[0m "
    )
    client_port = user_input(
        "\033[93mEnter \033[92mConfig \033[96m[4]\033[93m Tunnel port:\033[0m "
    )

    client_ip, client_subnet, ip_version = ipversion_n_address4(
        "\033[93mIRAN Client \033[92m[4]\033[0m"
    )
    server_private_ip, server_subnet = ipversion_n_address4(
        "\033[93mKharej Server Config \033[92m[4]\033[0m"
    )[:2]
    ufwportudp(client_port)
    ufw(client_ip)
    ufw(server_private_ip)
    print("\033[93m───────────────────────────────────────\033[0m")
    find_interface = input(
        "\033[93mDo you want meh to find the \033[92mmain interface\033[96m automatically\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m"
    )
    if find_interface.lower() == "yes" or find_interface.lower() == "y":
        interface = main_interface()
        if interface is None:
            print("\033[91merror: Couldn't find your network interface.\033[0m")
            return
    else:
        interface = input(
            "\033[93mWhat is your \033[92mmain interface\033[93m? \033[0m"
        )
    print("\033[93m───────────────────────────────────────\033[0m")
    mtu_config = ""
    mtu_choice = input(
        f"\033[93mDo you want to set \033[92mWireguard MTU\033[93m for \033[92mClient\033[96m [4] \033[93m(\033[92myes\033[93m/\033[91mno\033[93m): \033[0m"
    ).lower()
    if mtu_choice in ["yes", "y"]:
        mtu_value = input(
            f"\033[93mEnter MTU value for \033[92mClient\033[96m [4] \033[93m: \033[0m"
        )
        mtu_config = f"MTU = {mtu_value}\n"

    client_config = f"""
[Interface]
PrivateKey = {client_private_key}
Address = {client_ip}/{client_subnet}
ListenPort = {client_port}
{mtu_config}
PostUp = iptables -I INPUT -p udp --dport {client_port} -j ACCEPT
PostUp = iptables -I FORWARD -i {interface} -o wireclient -j ACCEPT
PostUp = iptables -I FORWARD -i wireclient -j ACCEPT
PostUp = iptables -t nat -A POSTROUTING -o {interface} -j MASQUERADE
PostUp = ip6tables -I FORWARD -i wireclient -j ACCEPT
PostUp = ip6tables -t nat -A POSTROUTING -o {interface} -j MASQUERADE
PostDown = iptables -D INPUT -p udp --dport {client_port} -j ACCEPT
PostDown = iptables -D FORWARD -i {interface} -o wireclient -j ACCEPT
PostDown = iptables -D FORWARD -i wireclient -j ACCEPT
PostDown = iptables -t nat -D POSTROUTING -o {interface} -j MASQUERADE
PostDown = ip6tables -D FORWARD -i wireclient -j ACCEPT
PostDown = ip6tables -t nat -D POSTROUTING -o {interface} -j MASQUERADE

[Peer]
PublicKey = {server_public_key}
AllowedIPs = {server_private_ip}/{server_subnet}
Endpoint = 2002:831a::1:{client_port}
"""

    client_config_path = "/etc/wireguard/wireclient.conf"
    write_config(client_config_path, client_config)
    wgclient()
    create_wireguardping_client(server_private_ip)
    wireguardping_client_service()
    print("\033[93m───────────────────────────────────────\033[0m")
    display_checkmark(
        f"\033[92mClient configuration saved to \033[97m{client_config_path}\033[0m"
    )

    print("\033[93m───────────────────────────────────────\033[0m")
    ipsec_choice = (
        input(
            "\033[93mDo you want to configure IPsec? (\033[92myes\033[93m or \033[91mno): \033[0m"
        )
        .strip()
        .lower()
    )

    if ipsec_choice in ["yes", "y"]:
        psk = input("\033[93mEnter IPSEC \033[92mSecret Key\033[93m: \033[0m")
        config_client(psk, [server_private_ip], [client_ip], ip_version)


def wireguardgre6tap_nativeiran_client5():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print(
        "\033[92m(   ) \033[93mGre6tap Native + Wireguard \033[92mIRAN Client [5]\033[0m"
    )
    print('\033[92m "-"\033[93m═════════════════════════════════════════\033[0m')
    gre6tap2_nativeiran5_wireguard()
    check_wireguard_installed()
    print("\033[93m───────────────────────────────────────\033[0m")
    display_notification("\033[93mConfiguring WireGuard Client\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    server_public_key = user_input(
        "\033[93mEnter \033[92mKharej Server\033[93m's config \033[96m[5] \033[96mpublic key:\033[0m "
    )
    client_private_key = user_input(
        "\033[93mEnter \033[92mIRAN Client\033[96m [5]\033[93m private key:\033[0m "
    )
    client_port = user_input(
        "\033[93mEnter \033[92mConfig \033[96m[5]\033[93m Tunnel port:\033[0m "
    )

    client_ip, client_subnet, ip_version = ipversion_n_address5(
        "\033[93mIRAN Client \033[92m[5]\033[0m"
    )
    server_private_ip, server_subnet = ipversion_n_address5(
        "\033[93mKharej Server Config \033[92m[5]\033[0m"
    )[:2]
    ufwportudp(client_port)
    ufw(client_ip)
    ufw(server_private_ip)
    print("\033[93m───────────────────────────────────────\033[0m")
    find_interface = input(
        "\033[93mDo you want meh to find the \033[92mmain interface\033[96m automatically\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m"
    )
    if find_interface.lower() == "yes" or find_interface.lower() == "y":
        interface = main_interface()
        if interface is None:
            print("\033[91merror: Couldn't find your network interface.\033[0m")
            return
    else:
        interface = input(
            "\033[93mWhat is your \033[92mmain interface\033[93m? \033[0m"
        )
    print("\033[93m───────────────────────────────────────\033[0m")
    mtu_config = ""
    mtu_choice = input(
        f"\033[93mDo you want to set \033[92mWireguard MTU\033[93m for \033[92mClient\033[96m [5] \033[93m(\033[92myes\033[93m/\033[91mno\033[93m): \033[0m"
    ).lower()
    if mtu_choice in ["yes", "y"]:
        mtu_value = input(
            f"\033[93mEnter MTU value for \033[92mClient\033[96m [5] \033[93m: \033[0m"
        )
        mtu_config = f"MTU = {mtu_value}\n"

    client_config = f"""
[Interface]
PrivateKey = {client_private_key}
Address = {client_ip}/{client_subnet}
ListenPort = {client_port}
{mtu_config}
PostUp = iptables -I INPUT -p udp --dport {client_port} -j ACCEPT
PostUp = iptables -I FORWARD -i {interface} -o wireclient -j ACCEPT
PostUp = iptables -I FORWARD -i wireclient -j ACCEPT
PostUp = iptables -t nat -A POSTROUTING -o {interface} -j MASQUERADE
PostUp = ip6tables -I FORWARD -i wireclient -j ACCEPT
PostUp = ip6tables -t nat -A POSTROUTING -o {interface} -j MASQUERADE
PostDown = iptables -D INPUT -p udp --dport {client_port} -j ACCEPT
PostDown = iptables -D FORWARD -i {interface} -o wireclient -j ACCEPT
PostDown = iptables -D FORWARD -i wireclient -j ACCEPT
PostDown = iptables -t nat -D POSTROUTING -o {interface} -j MASQUERADE
PostDown = ip6tables -D FORWARD -i wireclient -j ACCEPT
PostDown = ip6tables -t nat -D POSTROUTING -o {interface} -j MASQUERADE

[Peer]
PublicKey = {server_public_key}
AllowedIPs = {server_private_ip}/{server_subnet}
Endpoint = 2002:841a::1:{client_port}
"""

    client_config_path = "/etc/wireguard/wireclient.conf"
    write_config(client_config_path, client_config)
    wgclient()
    create_wireguardping_client(server_private_ip)
    wireguardping_client_service()
    print("\033[93m───────────────────────────────────────\033[0m")
    display_checkmark(
        f"\033[92mClient configuration saved to \033[97m{client_config_path}\033[0m"
    )
    print("\033[93m───────────────────────────────────────\033[0m")
    ipsec_choice = (
        input(
            "\033[93mDo you want to configure IPsec? (\033[92myes\033[93m or \033[91mno): \033[0m"
        )
        .strip()
        .lower()
    )

    if ipsec_choice in ["yes", "y"]:
        psk = input("\033[93mEnter IPSEC \033[92mSecret Key\033[93m: \033[0m")
        config_client(psk, [server_private_ip], [client_ip], ip_version)


def gre6tapnativeiran_wireguard_menu():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print(
        "\033[92m(   ) \033[93mGRE6tap Native + Wireguard + IPSEC \033[92m[1]IRAN Server\033[96m [5]Kharej Client\033[93mMenu\033[0m"
    )
    print(
        '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
    )
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[92mKharej Client [1] Config\033[0m")
    print("2. \033[92mKharej Client [2] Config\033[0m")
    print("3. \033[92mKharej Client [3] Config\033[0m")
    print("4. \033[93mKharej Client [4] Config\033[0m")
    print("5. \033[92mKharej Client [5] Config\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    print("6. \033[96mIRAN Server Config\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    print("0.\033[97mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")
    while True:
        server_type = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if server_type == "1":
            wireguardgre6tap_nativekharej_client1()
            break
        elif server_type == "2":
            wireguardgre6tap_nativekharej_client2()
            break
        elif server_type == "3":
            wireguardgre6tap_nativekharej_client3()
            break
        elif server_type == "4":
            wireguardgre6tap_nativekharej_client4()
            break
        elif server_type == "5":
            wireguardgre6tap_nativekharej_client5()
            break
        elif server_type == "6":
            wireguardgre6tapnative_iran_server()
            break
        elif server_type == "0":
            os.system("clear")
            wireguardgre6tapnative_mnu()
            break
        else:
            print("Invalid choice.")


def wireguardgre6tapnative_iran_server():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print("\033[92m(   ) \033[93mWireguard + GRE6tap Native \033[92mIRAN Server\033[0m")
    print('\033[92m "-"\033[93m═════════════════════════════════════════\033[0m')
    check_wireguard_installed()
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    num_clients = int(
        input("\033[93mEnter the number of \033[92mKharej\033[93m Clients: \033[0m")
    )

    for i in range(1, num_clients + 1):
        menu_name = f"gre6tap_nativeiran{i}_wireguard"
        if menu_name in globals():
            globals()[menu_name]()
        else:
            print(f"Function {menu_name} does not exist.")

    server_ips = []
    client_ips = []
    ip_versions = set()

    for i in range(1, num_clients + 1):
        server_ip, client_ip, ip_version = servernclient_gre6tap2(i)
        server_ips.append(server_ip)
        client_ips.append(client_ip)
        ip_versions.add(ip_version)
        create_wireguardping_server(client_ip, i)
        wireguardping_server_service(i)
        ufw(server_ip)
        ufw(client_ip)

    print(f"\033[93m───────────────────────────────────────\033[0m")
    ipsec_choice = (
        input(
            "\033[93mDo you want to configure IPsec? (\033[92myes\033[93m or \033[91mno): \033[0m"
        )
        .strip()
        .lower()
    )

    if ipsec_choice in ["yes", "y"]:
        psk = input("\033[93mEnter IPSEC \033[92mSecret Key\033[93m: \033[0m")
        ip_ver = ip_versions.pop()
        config_server(psk, server_ips, client_ips, ip_ver)


def wireguardgre6tap_nativekharej_client1():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print(
        "\033[92m(   ) \033[93mGre6tap Native + Wireguard\033[92mKharej Client [1]\033[0m"
    )
    print('\033[92m "-"\033[93m═════════════════════════════════════════\033[0m')
    gre6tap2_nativekharej1_wireguard()
    check_wireguard_installed()
    print("\033[93m───────────────────────────────────────\033[0m")
    display_notification("\033[93mConfiguring WireGuard Client\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    server_public_key = user_input(
        "\033[93mEnter \033[92mIRAN Server\033[93m's config \033[96m[1] \033[96mpublic key:\033[0m "
    )
    client_private_key = user_input(
        "\033[93mEnter \033[92mKharej Client\033[96m [1]\033[93m private key:\033[0m "
    )
    client_port = user_input(
        "\033[93mEnter \033[92mConfig \033[96m[1]\033[93m Tunnel port:\033[0m "
    )

    client_ip, client_subnet, ip_version = ipversion_n_address(
        "\033[93mKharej Client \033[92m[1]\033[0m"
    )
    server_private_ip, server_subnet = ipversion_n_address(
        "\033[93mIRAN Server Config \033[92m[1]\033[0m"
    )[:2]
    ufwportudp(client_port)
    ufw(client_ip)
    ufw(server_private_ip)
    print("\033[93m───────────────────────────────────────\033[0m")
    find_interface = input(
        "\033[93mDo you want meh to find the \033[92mmain interface\033[96m automatically\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m"
    )
    if find_interface.lower() == "yes" or find_interface.lower() == "y":
        interface = main_interface()
        if interface is None:
            print("\033[91merror: Couldn't find your network interface.\033[0m")
            return
    else:
        interface = input(
            "\033[93mWhat is your \033[92mmain interface\033[93m? \033[0m"
        )
    print("\033[93m───────────────────────────────────────\033[0m")
    mtu_config = ""
    mtu_choice = input(
        f"\033[93mDo you want to set \033[92mWireguard MTU\033[93m for \033[92mClient\033[96m [1] \033[93m(\033[92myes\033[93m/\033[91mno\033[93m): \033[0m"
    ).lower()
    if mtu_choice in ["yes", "y"]:
        mtu_value = input(
            f"\033[93mEnter MTU value for \033[92mClient\033[96m [1] \033[93m: \033[0m"
        )
        mtu_config = f"MTU = {mtu_value}\n"

    client_config = f"""
[Interface]
PrivateKey = {client_private_key}
Address = {client_ip}/{client_subnet}
ListenPort = {client_port}
{mtu_config}
PostUp = iptables -I INPUT -p udp --dport {client_port} -j ACCEPT
PostUp = iptables -I FORWARD -i {interface} -o wireclient -j ACCEPT
PostUp = iptables -I FORWARD -i wireclient -j ACCEPT
PostUp = iptables -t nat -A POSTROUTING -o {interface} -j MASQUERADE
PostUp = ip6tables -I FORWARD -i wireclient -j ACCEPT
PostUp = ip6tables -t nat -A POSTROUTING -o {interface} -j MASQUERADE
PostDown = iptables -D INPUT -p udp --dport {client_port} -j ACCEPT
PostDown = iptables -D FORWARD -i {interface} -o wireclient -j ACCEPT
PostDown = iptables -D FORWARD -i wireclient -j ACCEPT
PostDown = iptables -t nat -D POSTROUTING -o {interface} -j MASQUERADE
PostDown = ip6tables -D FORWARD -i wireclient -j ACCEPT
PostDown = ip6tables -t nat -D POSTROUTING -o {interface} -j MASQUERADE

[Peer]
PublicKey = {server_public_key}
AllowedIPs = {server_private_ip}/{server_subnet}
Endpoint = 2002:801a::2:{client_port}
"""

    client_config_path = "/etc/wireguard/wireclient.conf"
    write_config(client_config_path, client_config)
    wgclient()
    create_wireguardping_client(server_private_ip)
    wireguardping_client_service()
    print("\033[93m───────────────────────────────────────\033[0m")
    display_checkmark(
        f"\033[92mClient configuration saved to \033[97m{client_config_path}\033[0m"
    )
    print(f"\033[93m───────────────────────────────────────\033[0m")
    ipsec_choice = (
        input(
            "\033[93mDo you want to configure IPsec? (\033[92myes\033[93m or \033[91mno): \033[0m"
        )
        .strip()
        .lower()
    )

    if ipsec_choice in ["yes", "y"]:
        psk = input("\033[93mEnter IPSEC \033[92mSecret Key\033[93m: \033[0m")
        config_client(psk, [server_private_ip], [client_ip], ip_version)


def wireguardgre6tap_nativekharej_client2():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print(
        "\033[92m(   ) \033[93mGre6tap Native + Wireguard\033[92mKharej Client [2]\033[0m"
    )
    print('\033[92m "-"\033[93m═════════════════════════════════════════\033[0m')
    gre6tap2_nativekharej2_wireguard()
    check_wireguard_installed()
    print("\033[93m───────────────────────────────────────\033[0m")
    display_notification("\033[93mConfiguring WireGuard Client\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    server_public_key = user_input(
        "\033[93mEnter \033[92mIRAN Server\033[93m's config \033[96m[2] \033[96mpublic key:\033[0m "
    )
    client_private_key = user_input(
        "\033[93mEnter \033[92mKharej Client\033[96m [2]\033[93m private key:\033[0m "
    )
    client_port = user_input(
        "\033[93mEnter \033[92mConfig \033[96m[2]\033[93m Tunnel port:\033[0m "
    )

    client_ip, client_subnet, ip_version = ipversion_n_address2(
        "\033[93mKharej Client \033[92m[2]\033[0m"
    )
    server_private_ip, server_subnet = ipversion_n_address2(
        "\033[93mIRAN Server Config \033[92m[2]\033[0m"
    )[:2]
    ufwportudp(client_port)
    ufw(client_ip)
    ufw(server_private_ip)
    print("\033[93m───────────────────────────────────────\033[0m")
    find_interface = input(
        "\033[93mDo you want meh to find the \033[92mmain interface\033[96m automatically\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m"
    )
    if find_interface.lower() == "yes" or find_interface.lower() == "y":
        interface = main_interface()
        if interface is None:
            print("\033[91merror: Couldn't find your network interface.\033[0m")
            return
    else:
        interface = input(
            "\033[93mWhat is your \033[92mmain interface\033[93m? \033[0m"
        )
    print("\033[93m───────────────────────────────────────\033[0m")
    mtu_config = ""
    mtu_choice = input(
        f"\033[93mDo you want to set \033[92mWireguard MTU\033[93m for \033[92mClient\033[96m [2] \033[93m(\033[92myes\033[93m/\033[91mno\033[93m): \033[0m"
    ).lower()
    if mtu_choice in ["yes", "y"]:
        mtu_value = input(
            f"\033[93mEnter MTU value for \033[92mClient\033[96m [2] \033[93m: \033[0m"
        )
        mtu_config = f"MTU = {mtu_value}\n"

    client_config = f"""
[Interface]
PrivateKey = {client_private_key}
Address = {client_ip}/{client_subnet}
ListenPort = {client_port}
{mtu_config}
PostUp = iptables -I INPUT -p udp --dport {client_port} -j ACCEPT
PostUp = iptables -I FORWARD -i {interface} -o wireclient -j ACCEPT
PostUp = iptables -I FORWARD -i wireclient -j ACCEPT
PostUp = iptables -t nat -A POSTROUTING -o {interface} -j MASQUERADE
PostUp = ip6tables -I FORWARD -i wireclient -j ACCEPT
PostUp = ip6tables -t nat -A POSTROUTING -o {interface} -j MASQUERADE
PostDown = iptables -D INPUT -p udp --dport {client_port} -j ACCEPT
PostDown = iptables -D FORWARD -i {interface} -o wireclient -j ACCEPT
PostDown = iptables -D FORWARD -i wireclient -j ACCEPT
PostDown = iptables -t nat -D POSTROUTING -o {interface} -j MASQUERADE
PostDown = ip6tables -D FORWARD -i wireclient -j ACCEPT
PostDown = ip6tables -t nat -D POSTROUTING -o {interface} -j MASQUERADE

[Peer]
PublicKey = {server_public_key}
AllowedIPs = {server_private_ip}/{server_subnet}
Endpoint = 2002:811a::2:{client_port}
"""

    client_config_path = "/etc/wireguard/wireclient.conf"
    write_config(client_config_path, client_config)
    wgclient()
    create_wireguardping_client(server_private_ip)
    wireguardping_client_service()
    print("\033[93m───────────────────────────────────────\033[0m")
    display_checkmark(
        f"\033[92mClient configuration saved to \033[97m{client_config_path}\033[0m"
    )
    print(f"\033[93m───────────────────────────────────────\033[0m")
    ipsec_choice = (
        input(
            "\033[93mDo you want to configure IPsec? (\033[92myes\033[93m or \033[91mno): \033[0m"
        )
        .strip()
        .lower()
    )

    if ipsec_choice in ["yes", "y"]:
        psk = input("\033[93mEnter IPSEC \033[92mSecret Key\033[93m: \033[0m")
        config_client(psk, [server_private_ip], [client_ip], ip_version)


def wireguardgre6tap_nativekharej_client3():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print(
        "\033[92m(   ) \033[93mGre6tap Native + Wireguard\033[92mKharej Client [3]\033[0m"
    )
    print('\033[92m "-"\033[93m═════════════════════════════════════════\033[0m')
    gre6tap2_nativekharej3_wireguard()
    check_wireguard_installed()
    print("\033[93m───────────────────────────────────────\033[0m")
    display_notification("\033[93mConfiguring WireGuard Client\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    server_public_key = user_input(
        "\033[93mEnter \033[92mIRAN Server\033[93m's config \033[96m[3] \033[96mpublic key:\033[0m "
    )
    client_private_key = user_input(
        "\033[93mEnter \033[92mKharej Client\033[96m [3]\033[93m private key:\033[0m "
    )
    client_port = user_input(
        "\033[93mEnter \033[92mConfig \033[96m[3]\033[93m Tunnel port:\033[0m "
    )

    client_ip, client_subnet, ip_version = ipversion_n_address3(
        "\033[93mKharej Client \033[92m[3]\033[0m"
    )
    server_private_ip, server_subnet = ipversion_n_address3(
        "\033[93mIRAN Server Config \033[92m[3]\033[0m"
    )[:2]
    ufwportudp(client_port)
    ufw(client_ip)
    ufw(server_private_ip)
    print("\033[93m───────────────────────────────────────\033[0m")
    find_interface = input(
        "\033[93mDo you want meh to find the \033[92mmain interface\033[96m automatically\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m"
    )
    if find_interface.lower() == "yes" or find_interface.lower() == "y":
        interface = main_interface()
        if interface is None:
            print("\033[91merror: Couldn't find your network interface.\033[0m")
            return
    else:
        interface = input(
            "\033[93mWhat is your \033[92mmain interface\033[93m? \033[0m"
        )
    print("\033[93m───────────────────────────────────────\033[0m")
    mtu_config = ""
    mtu_choice = input(
        f"\033[93mDo you want to set \033[92mWireguard MTU\033[93m for \033[92mClient\033[96m [3] \033[93m(\033[92myes\033[93m/\033[91mno\033[93m): \033[0m"
    ).lower()
    if mtu_choice in ["yes", "y"]:
        mtu_value = input(
            f"\033[93mEnter MTU value for \033[92mClient\033[96m [3] \033[93m: \033[0m"
        )
        mtu_config = f"MTU = {mtu_value}\n"

    client_config = f"""
[Interface]
PrivateKey = {client_private_key}
Address = {client_ip}/{client_subnet}
ListenPort = {client_port}
{mtu_config}
PostUp = iptables -I INPUT -p udp --dport {client_port} -j ACCEPT
PostUp = iptables -I FORWARD -i {interface} -o wireclient -j ACCEPT
PostUp = iptables -I FORWARD -i wireclient -j ACCEPT
PostUp = iptables -t nat -A POSTROUTING -o {interface} -j MASQUERADE
PostUp = ip6tables -I FORWARD -i wireclient -j ACCEPT
PostUp = ip6tables -t nat -A POSTROUTING -o {interface} -j MASQUERADE
PostDown = iptables -D INPUT -p udp --dport {client_port} -j ACCEPT
PostDown = iptables -D FORWARD -i {interface} -o wireclient -j ACCEPT
PostDown = iptables -D FORWARD -i wireclient -j ACCEPT
PostDown = iptables -t nat -D POSTROUTING -o {interface} -j MASQUERADE
PostDown = ip6tables -D FORWARD -i wireclient -j ACCEPT
PostDown = ip6tables -t nat -D POSTROUTING -o {interface} -j MASQUERADE

[Peer]
PublicKey = {server_public_key}
AllowedIPs = {server_private_ip}/{server_subnet}
Endpoint = 2002:821a::2:{client_port}
"""

    client_config_path = "/etc/wireguard/wireclient.conf"
    write_config(client_config_path, client_config)
    wgclient()
    create_wireguardping_client(server_private_ip)
    wireguardping_client_service()
    print("\033[93m───────────────────────────────────────\033[0m")
    display_checkmark(
        f"\033[92mClient configuration saved to \033[97m{client_config_path}\033[0m"
    )
    print(f"\033[93m───────────────────────────────────────\033[0m")
    ipsec_choice = (
        input(
            "\033[93mDo you want to configure IPsec? (\033[92myes\033[93m or \033[91mno): \033[0m"
        )
        .strip()
        .lower()
    )

    if ipsec_choice in ["yes", "y"]:
        psk = input("\033[93mEnter IPSEC \033[92mSecret Key\033[93m: \033[0m")
        config_client(psk, [server_private_ip], [client_ip], ip_version)


def wireguardgre6tap_nativekharej_client4():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print(
        "\033[92m(   ) \033[93mGre6tap Native + Wireguard\033[92mKharej Client [4]\033[0m"
    )
    print('\033[92m "-"\033[93m═════════════════════════════════════════\033[0m')
    gre6tap2_nativekharej4_wireguard()
    check_wireguard_installed()
    print("\033[93m───────────────────────────────────────\033[0m")
    display_notification("\033[93mConfiguring WireGuard Client\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    server_public_key = user_input(
        "\033[93mEnter \033[92mIRAN Server\033[93m's config \033[96m[4] \033[96mpublic key:\033[0m "
    )
    client_private_key = user_input(
        "\033[93mEnter \033[92mKharej Client\033[96m [4]\033[93m private key:\033[0m "
    )
    client_port = user_input(
        "\033[93mEnter \033[92mConfig \033[96m[4]\033[93m Tunnel port:\033[0m "
    )

    client_ip, client_subnet, ip_version = ipversion_n_address4(
        "\033[93mKharej Client \033[92m[4]\033[0m"
    )
    server_private_ip, server_subnet = ipversion_n_address4(
        "\033[93mIRAN Server Config \033[92m[4]\033[0m"
    )[:2]
    ufwportudp(client_port)
    ufw(client_ip)
    ufw(server_private_ip)
    print("\033[93m───────────────────────────────────────\033[0m")
    find_interface = input(
        "\033[93mDo you want meh to find the \033[92mmain interface\033[96m automatically\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m"
    )
    if find_interface.lower() == "yes" or find_interface.lower() == "y":
        interface = main_interface()
        if interface is None:
            print("\033[91merror: Couldn't find your network interface.\033[0m")
            return
    else:
        interface = input(
            "\033[93mWhat is your \033[92mmain interface\033[93m? \033[0m"
        )
    print("\033[93m───────────────────────────────────────\033[0m")
    mtu_config = ""
    mtu_choice = input(
        f"\033[93mDo you want to set \033[92mWireguard MTU\033[93m for \033[92mClient\033[96m [4] \033[93m(\033[92myes\033[93m/\033[91mno\033[93m): \033[0m"
    ).lower()
    if mtu_choice in ["yes", "y"]:
        mtu_value = input(
            f"\033[93mEnter MTU value for \033[92mClient\033[96m [4] \033[93m: \033[0m"
        )
        mtu_config = f"MTU = {mtu_value}\n"

    client_config = f"""
[Interface]
PrivateKey = {client_private_key}
Address = {client_ip}/{client_subnet}
ListenPort = {client_port}
{mtu_config}
PostUp = iptables -I INPUT -p udp --dport {client_port} -j ACCEPT
PostUp = iptables -I FORWARD -i {interface} -o wireclient -j ACCEPT
PostUp = iptables -I FORWARD -i wireclient -j ACCEPT
PostUp = iptables -t nat -A POSTROUTING -o {interface} -j MASQUERADE
PostUp = ip6tables -I FORWARD -i wireclient -j ACCEPT
PostUp = ip6tables -t nat -A POSTROUTING -o {interface} -j MASQUERADE
PostDown = iptables -D INPUT -p udp --dport {client_port} -j ACCEPT
PostDown = iptables -D FORWARD -i {interface} -o wireclient -j ACCEPT
PostDown = iptables -D FORWARD -i wireclient -j ACCEPT
PostDown = iptables -t nat -D POSTROUTING -o {interface} -j MASQUERADE
PostDown = ip6tables -D FORWARD -i wireclient -j ACCEPT
PostDown = ip6tables -t nat -D POSTROUTING -o {interface} -j MASQUERADE

[Peer]
PublicKey = {server_public_key}
AllowedIPs = {server_private_ip}/{server_subnet}
Endpoint = 2002:831a::2:{client_port}
"""

    client_config_path = "/etc/wireguard/wireclient.conf"
    write_config(client_config_path, client_config)
    wgclient()
    create_wireguardping_client(server_private_ip)
    wireguardping_client_service()
    print("\033[93m───────────────────────────────────────\033[0m")
    display_checkmark(
        f"\033[92mClient configuration saved to \033[97m{client_config_path}\033[0m"
    )

    print("\033[93m───────────────────────────────────────\033[0m")
    ipsec_choice = (
        input(
            "\033[93mDo you want to configure IPsec? (\033[92myes\033[93m or \033[91mno): \033[0m"
        )
        .strip()
        .lower()
    )

    if ipsec_choice in ["yes", "y"]:
        psk = input("\033[93mEnter IPSEC \033[92mSecret Key\033[93m: \033[0m")
        config_client(psk, [server_private_ip], [client_ip], ip_version)


def wireguardgre6tap_nativekharej_client5():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print(
        "\033[92m(   ) \033[93mGre6tap Native + Wireguard\033[92mKharej Client [5]\033[0m"
    )
    print('\033[92m "-"\033[93m═════════════════════════════════════════\033[0m')
    gre6tap2_nativekharej5_wireguard()
    check_wireguard_installed()
    print("\033[93m───────────────────────────────────────\033[0m")
    display_notification("\033[93mConfiguring WireGuard Client\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    server_public_key = user_input(
        "\033[93mEnter \033[92mIRAN Server\033[93m's config \033[96m[5] \033[96mpublic key:\033[0m "
    )
    client_private_key = user_input(
        "\033[93mEnter \033[92mKharej Client\033[96m [5]\033[93m private key:\033[0m "
    )
    client_port = user_input(
        "\033[93mEnter \033[92mConfig \033[96m[5]\033[93m Tunnel port:\033[0m "
    )

    client_ip, client_subnet, ip_version = ipversion_n_address5(
        "\033[93mKharej Client \033[92m[5]\033[0m"
    )
    server_private_ip, server_subnet = ipversion_n_address5(
        "\033[93mIRAN Server Config \033[92m[5]\033[0m"
    )[:2]
    ufwportudp(client_port)
    ufw(client_ip)
    ufw(server_private_ip)
    print("\033[93m───────────────────────────────────────\033[0m")
    find_interface = input(
        "\033[93mDo you want meh to find the \033[92mmain interface\033[96m automatically\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m"
    )
    if find_interface.lower() == "yes" or find_interface.lower() == "y":
        interface = main_interface()
        if interface is None:
            print("\033[91merror: Couldn't find your network interface.\033[0m")
            return
    else:
        interface = input(
            "\033[93mWhat is your \033[92mmain interface\033[93m? \033[0m"
        )
    print("\033[93m───────────────────────────────────────\033[0m")
    mtu_config = ""
    mtu_choice = input(
        f"\033[93mDo you want to set \033[92mWireguard MTU\033[93m for \033[92mClient\033[96m [5] \033[93m(\033[92myes\033[93m/\033[91mno\033[93m): \033[0m"
    ).lower()
    if mtu_choice in ["yes", "y"]:
        mtu_value = input(
            f"\033[93mEnter MTU value for \033[92mClient\033[96m [5] \033[93m: \033[0m"
        )
        mtu_config = f"MTU = {mtu_value}\n"

    client_config = f"""
[Interface]
PrivateKey = {client_private_key}
Address = {client_ip}/{client_subnet}
ListenPort = {client_port}
{mtu_config}
PostUp = iptables -I INPUT -p udp --dport {client_port} -j ACCEPT
PostUp = iptables -I FORWARD -i {interface} -o wireclient -j ACCEPT
PostUp = iptables -I FORWARD -i wireclient -j ACCEPT
PostUp = iptables -t nat -A POSTROUTING -o {interface} -j MASQUERADE
PostUp = ip6tables -I FORWARD -i wireclient -j ACCEPT
PostUp = ip6tables -t nat -A POSTROUTING -o {interface} -j MASQUERADE
PostDown = iptables -D INPUT -p udp --dport {client_port} -j ACCEPT
PostDown = iptables -D FORWARD -i {interface} -o wireclient -j ACCEPT
PostDown = iptables -D FORWARD -i wireclient -j ACCEPT
PostDown = iptables -t nat -D POSTROUTING -o {interface} -j MASQUERADE
PostDown = ip6tables -D FORWARD -i wireclient -j ACCEPT
PostDown = ip6tables -t nat -D POSTROUTING -o {interface} -j MASQUERADE

[Peer]
PublicKey = {server_public_key}
AllowedIPs = {server_private_ip}/{server_subnet}
Endpoint = 2002:841a::2:{client_port}
"""

    client_config_path = "/etc/wireguard/wireclient.conf"
    write_config(client_config_path, client_config)
    wgclient()
    create_wireguardping_client(server_private_ip)
    wireguardping_client_service()
    print("\033[93m───────────────────────────────────────\033[0m")
    display_checkmark(
        f"\033[92mClient configuration saved to \033[97m{client_config_path}\033[0m"
    )
    print("\033[93m───────────────────────────────────────\033[0m")
    ipsec_choice = (
        input(
            "\033[93mDo you want to configure IPsec? (\033[92myes\033[93m or \033[91mno): \033[0m"
        )
        .strip()
        .lower()
    )

    if ipsec_choice in ["yes", "y"]:
        psk = input("\033[93mEnter IPSEC \033[92mSecret Key\033[93m: \033[0m")
        config_client(psk, [server_private_ip], [client_ip], ip_version)


def gre6tap_nativekharej1_wireguard():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print("\033[92m(   ) \033[92mGRE6tap + Native\033[93m Configuration\033[0m")
    print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[92mSERVER 1\033[0m")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    local_ip = input(
        "\033[93mEnter \033[92mkharej Server\033[93m IPV6 address: \033[0m"
    )
    remote_ip = input(
        "\033[93mEnter \033[92mIRAN Client \033[96m[1]\033[93m IPV6 address: \033[0m"
    )
    kharej_gre6tapwire_tunnel1(local_ip, remote_ip)
    ufw("2002:801a::2")
    ufw("2002:801a::1")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    ip_address = "2002:801a::2"  # iranip
    print("\033[92m(\033[96mPlease wait,Azumi is pinging again...\033[0m")
    ping_result = subprocess.run(
        ["ping6", "-c", "2", ip_address], capture_output=True, text=True
    ).stdout.strip()
    print(ping_result)
    display_checkmark("\033[92mConfiguration is done!\033[0m")


def gre6tap2_nativekharej1_wireguard():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print("\033[92m(   ) \033[92mGRE6tap + Native\033[93m Configuration\033[0m")
    print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[92mSERVER 1\033[0m")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    local_ip = input(
        "\033[93mEnter \033[92mkharej Client \033[96m[1]\033[93m IPV6 address: \033[0m"
    )
    remote_ip = input("\033[93mEnter \033[92mIRAN Server\033[93m IPV6 address: \033[0m")
    kharej_gre6tapwire_tunnel1(local_ip, remote_ip)
    ufw("2002:801a::2")
    ufw("2002:801a::1")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    ip_address = "2002:801a::2"  # iranip
    print("\033[92m(\033[96mPlease wait,Azumi is pinging again...\033[0m")
    ping_result = subprocess.run(
        ["ping6", "-c", "2", ip_address], capture_output=True, text=True
    ).stdout.strip()
    print(ping_result)
    display_checkmark("\033[92mConfiguration is done!\033[0m")


def gre6tap_nativekharej2_wireguard():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print("\033[92m(   ) \033[92mGRE6tap + Native\033[93m Configuration\033[0m")
    print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[92mSERVER 2\033[0m")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    local_ip = input(
        "\033[93mEnter \033[92mkharej Server\033[93m IPV6 address: \033[0m"
    )
    remote_ip = input(
        "\033[93mEnter \033[92mIRAN Client \033[96m[2]\033[93m IPV6 address: \033[0m"
    )
    kharej_gre6tapwire_tunnel2(local_ip, remote_ip)
    ufw("2002:811a::2")
    ufw("2002:811a::1")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    ip_address = "2002:811a::2"  # iranip
    print("\033[92m(\033[96mPlease wait,Azumi is pinging again...\033[0m")
    ping_result = subprocess.run(
        ["ping6", "-c", "2", ip_address], capture_output=True, text=True
    ).stdout.strip()
    print(ping_result)
    display_checkmark("\033[92mConfiguration is done!\033[0m")


def gre6tap2_nativekharej2_wireguard():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print("\033[92m(   ) \033[92mGRE6tap + Native\033[93m Configuration\033[0m")
    print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[92mSERVER 2\033[0m")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    local_ip = input(
        "\033[93mEnter \033[92mkharej Client \033[96m[2]\033[93m IPV6 address: \033[0m"
    )
    remote_ip = input("\033[93mEnter \033[92mIRAN Server\033[93m IPV6 address: \033[0m")
    kharej_gre6tapwire_tunnel2(local_ip, remote_ip)
    ufw("2002:811a::2")
    ufw("2002:811a::1")
    print("\033[93m──────────────────────────────────────────────────\033[0m")

    ip_address = "2002:811a::2"  # iranip
    print("\033[92m(\033[96mPlease wait,Azumi is pinging again...\033[0m")
    ping_result = subprocess.run(
        ["ping6", "-c", "2", ip_address], capture_output=True, text=True
    ).stdout.strip()
    print(ping_result)
    display_checkmark("\033[92mConfiguration is done!\033[0m")


def gre6tap_nativekharej3_wireguard():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print("\033[92m(   ) \033[92mGRE6tap + Native\033[93m Configuration\033[0m")
    print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[92mSERVER 3\033[0m")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    local_ip = input(
        "\033[93mEnter \033[92mkharej Server\033[93m IPV6 address: \033[0m"
    )
    remote_ip = input(
        "\033[93mEnter \033[92mIRAN Client \033[96m[3]\033[93m IPV6 address: \033[0m"
    )
    kharej_gre6tapwire_tunnel3(local_ip, remote_ip)
    ufw("2002:821a::2")
    ufw("2002:821a::1")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    ip_address = "2002:821a::2"  # iranip
    print("\033[92m(\033[96mPlease wait,Azumi is pinging again...\033[0m")
    ping_result = subprocess.run(
        ["ping6", "-c", "2", ip_address], capture_output=True, text=True
    ).stdout.strip()
    print(ping_result)
    display_checkmark("\033[92mConfiguration is done!\033[0m")


def gre6tap2_nativekharej3_wireguard():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print("\033[92m(   ) \033[92mGRE6tap + Native\033[93m Configuration\033[0m")
    print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[92mSERVER 3\033[0m")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    local_ip = input(
        "\033[93mEnter \033[92mkharej Client \033[96m[3]\033[93m IPV6 address: \033[0m"
    )
    remote_ip = input("\033[93mEnter \033[92mIRAN Server\033[93m IPV6 address: \033[0m")
    kharej_gre6tapwire_tunnel3(local_ip, remote_ip)
    ufw("2002:821a::2")
    ufw("2002:821a::1")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    ip_address = "2002:821a::2"  # iranip
    print("\033[92m(\033[96mPlease wait,Azumi is pinging again...\033[0m")
    ping_result = subprocess.run(
        ["ping6", "-c", "2", ip_address], capture_output=True, text=True
    ).stdout.strip()
    print(ping_result)
    display_checkmark("\033[92mConfiguration is done!\033[0m")


def gre6tap_nativekharej4_wireguard():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print("\033[92m(   ) \033[92mGRE6tap + Native\033[93m Configuration\033[0m")
    print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[92mSERVER 4\033[0m")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    local_ip = input(
        "\033[93mEnter \033[92mkharej Server\033[93m IPV6 address: \033[0m"
    )
    remote_ip = input(
        "\033[93mEnter \033[92mIRAN Client \033[96m[4]\033[93m IPV6 address: \033[0m"
    )
    kharej_gre6tapwire_tunnel4(local_ip, remote_ip)
    ufw("2002:831a::2")
    ufw("2002:831a::1")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    ip_address = "2002:831a::2"  # iranip
    print("\033[92m(\033[96mPlease wait,Azumi is pinging again...\033[0m")
    ping_result = subprocess.run(
        ["ping6", "-c", "2", ip_address], capture_output=True, text=True
    ).stdout.strip()
    print(ping_result)
    display_checkmark("\033[92mConfiguration is done!\033[0m")


def gre6tap2_nativekharej4_wireguard():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print("\033[92m(   ) \033[92mGRE6tap + Native\033[93m Configuration\033[0m")
    print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[92mSERVER 4\033[0m")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    local_ip = input(
        "\033[93mEnter \033[92mkharej Client \033[96m[4]\033[93m IPV6 address: \033[0m"
    )
    remote_ip = input("\033[93mEnter \033[92mIRAN Server\033[93m IPV6 address: \033[0m")
    kharej_gre6tapwire_tunnel4(local_ip, remote_ip)
    ufw("2002:831a::2")
    ufw("2002:831a::1")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    ip_address = "2002:831a::2"  # iranip
    print("\033[92m(\033[96mPlease wait,Azumi is pinging again...\033[0m")
    ping_result = subprocess.run(
        ["ping6", "-c", "2", ip_address], capture_output=True, text=True
    ).stdout.strip()
    print(ping_result)
    display_checkmark("\033[92mConfiguration is done!\033[0m")


def gre6tap_nativekharej5_wireguard():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print("\033[92m(   ) \033[92mGRE6tap + Native\033[93m Configuration\033[0m")
    print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[92mSERVER 5\033[0m")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    local_ip = input(
        "\033[93mEnter \033[92mkharej Server\033[93m IPV6 address: \033[0m"
    )
    remote_ip = input(
        "\033[93mEnter \033[92mIRAN Client \033[96m[5]\033[93m IPV6 address: \033[0m"
    )
    kharej_gre6tapwire_tunnel5(local_ip, remote_ip)
    ufw("2002:841a::2")
    ufw("2002:841a::1")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    ip_address = "2002:841a::2"  # iranip
    print("\033[92m(\033[96mPlease wait,Azumi is pinging again...\033[0m")
    ping_result = subprocess.run(
        ["ping6", "-c", "2", ip_address], capture_output=True, text=True
    ).stdout.strip()
    print(ping_result)
    display_checkmark("\033[92mConfiguration is done!\033[0m")


def gre6tap2_nativekharej5_wireguard():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print("\033[92m(   ) \033[92mGRE6tap + Native\033[93m Configuration\033[0m")
    print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[92mSERVER 5\033[0m")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    local_ip = input(
        "\033[93mEnter \033[92mkharej Client \033[96m[5]\033[93m IPV6 address: \033[0m"
    )
    remote_ip = input("\033[93mEnter \033[92mIRAN Server\033[93m IPV6 address: \033[0m")
    kharej_gre6tapwire_tunnel5(local_ip, remote_ip)
    ufw("2002:841a::2")
    ufw("2002:841a::1")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    ip_address = "2002:841a::2"  # iranip
    print("\033[92m(\033[96mPlease wait,Azumi is pinging again...\033[0m")
    ping_result = subprocess.run(
        ["ping6", "-c", "2", ip_address], capture_output=True, text=True
    ).stdout.strip()
    print(ping_result)
    display_checkmark("\033[92mConfiguration is done!\033[0m")


# iran side gre6tap native
def gre6tap_nativeiran1_wireguard():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print("\033[92m(   ) \033[92mGRE6tap + Native\033[93m Configuration\033[0m")
    print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[92mSERVER 1\033[0m")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    local_ip = input("\033[93mEnter \033[92mIRAN Server\033[93m IPV6 address: \033[0m")
    remote_ip = input(
        "\033[93mEnter \033[92mKharej Client\033[96m [1]\033[93m IPV6 address: \033[0m"
    )
    iran_gre6tapwire_tunnel1(local_ip, remote_ip)
    ufw("2002:801a::2")
    ufw("2002:801a::1")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")

    ip_address = "2002:801a::1"  # iranip
    print("\033[92m(\033[96mPlease wait,Azumi is pinging again...\033[0m")
    ping_result = subprocess.run(
        ["ping6", "-c", "2", ip_address], capture_output=True, text=True
    ).stdout.strip()
    print(ping_result)
    display_checkmark("\033[92mConfiguration is done!\033[0m")


def gre6tap2_nativeiran1_wireguard():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print("\033[92m(   ) \033[92mGRE6tap + Native\033[93m Configuration\033[0m")
    print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[92mSERVER 1\033[0m")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    local_ip = input(
        "\033[93mEnter \033[92mIRAN Client \033[96m[1] \033[93m IPV6 address: \033[0m"
    )
    remote_ip = input(
        "\033[93mEnter \033[92mKharej Server\033[93m IPV6 address: \033[0m"
    )
    iran_gre6tapwire_tunnel1(local_ip, remote_ip)
    ufw("2002:801a::2")
    ufw("2002:801a::1")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")

    ip_address = "2002:801a::1"  # iranip
    print("\033[92m(\033[96mPlease wait,Azumi is pinging again...\033[0m")
    ping_result = subprocess.run(
        ["ping6", "-c", "2", ip_address], capture_output=True, text=True
    ).stdout.strip()
    print(ping_result)
    display_checkmark("\033[92mConfiguration is done!\033[0m")


def gre6tap_nativeiran2_wireguard():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print("\033[92m(   ) \033[92mGRE6tap + native\033[93m Configuration\033[0m")
    print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[92mSERVER 2\033[0m")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    local_ip = input("\033[93mEnter \033[92mIRAN Server\033[93m IPV6 address: \033[0m")
    remote_ip = input(
        "\033[93mEnter \033[92mKharej Client\033[96m [2]\033[93m IPV6 address: \033[0m"
    )
    iran_gre6tapwire_tunnel2(local_ip, remote_ip)
    ufw("2002:811a::2")
    ufw("2002:811a::1")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")

    ip_address = "2002:811a::1"  # iranip
    print("\033[92m(\033[96mPlease wait,Azumi is pinging again...\033[0m")
    ping_result = subprocess.run(
        ["ping6", "-c", "2", ip_address], capture_output=True, text=True
    ).stdout.strip()
    print(ping_result)
    display_checkmark("\033[92mConfiguration is done!\033[0m")


def gre6tap2_nativeiran2_wireguard():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print("\033[92m(   ) \033[92mGRE6tap + Native\033[93m Configuration\033[0m")
    print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[92mSERVER 2\033[0m")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    local_ip = input(
        "\033[93mEnter \033[92mIRAN Client \033[96m[2] \033[93m IPV6 address: \033[0m"
    )
    remote_ip = input(
        "\033[93mEnter \033[92mKharej Server\033[93m IPV6 address: \033[0m"
    )
    iran_gre6tapwire_tunnel2(local_ip, remote_ip)
    ufw("2002:811a::2")
    ufw("2002:811a::1")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")

    ip_address = "2002:811a::1"  # iranip
    print("\033[92m(\033[96mPlease wait,Azumi is pinging again...\033[0m")
    ping_result = subprocess.run(
        ["ping6", "-c", "2", ip_address], capture_output=True, text=True
    ).stdout.strip()
    print(ping_result)
    display_checkmark("\033[92mConfiguration is done!\033[0m")


def gre6tap_nativeiran3_wireguard():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print("\033[92m(   ) \033[92mGRE6tap + Native\033[93m Configuration\033[0m")
    print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[92mSERVER 3\033[0m")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    local_ip = input("\033[93mEnter \033[92mIRAN Server\033[93m IPV6 address: \033[0m")
    remote_ip = input(
        "\033[93mEnter \033[92mKharej Client\033[96m [3]\033[93m IPV6 address: \033[0m"
    )
    iran_gre6tapwire_tunnel3(local_ip, remote_ip)
    ufw("2002:821a::2")
    ufw("2002:821a::1")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    ip_address = "2002:821a::1"  # iranip
    print("\033[92m(\033[96mPlease wait,Azumi is pinging again...\033[0m")
    ping_result = subprocess.run(
        ["ping6", "-c", "2", ip_address], capture_output=True, text=True
    ).stdout.strip()
    print(ping_result)
    display_checkmark("\033[92mConfiguration is done!\033[0m")


def gre6tap2_nativeiran3_wireguard():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print("\033[92m(   ) \033[92mGRE6tap + Native\033[93m Configuration\033[0m")
    print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[92mSERVER 3\033[0m")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    local_ip = input(
        "\033[93mEnter \033[92mIRAN Client \033[96m[3] \033[93m IPV6 address: \033[0m"
    )
    remote_ip = input(
        "\033[93mEnter \033[92mKharej Server\033[93m IPV6 address: \033[0m"
    )
    iran_gre6tapwire_tunnel3(local_ip, remote_ip)
    ufw("2002:821a::2")
    ufw("2002:821a::1")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")

    ip_address = "2002:821a::1"  # iranip
    print("\033[92m(\033[96mPlease wait,Azumi is pinging again...\033[0m")
    ping_result = subprocess.run(
        ["ping6", "-c", "2", ip_address], capture_output=True, text=True
    ).stdout.strip()
    print(ping_result)
    display_checkmark("\033[92mConfiguration is done!\033[0m")


def gre6tap_nativeiran4_wireguard():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print("\033[92m(   ) \033[92mGRE6tap + Native\033[93m Configuration\033[0m")
    print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[92mSERVER 4\033[0m")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    local_ip = input("\033[93mEnter \033[92mIRAN Server\033[93m IPV6 address: \033[0m")
    remote_ip = input(
        "\033[93mEnter \033[92mKharej Client\033[96m [4]\033[93m IPV6 address: \033[0m"
    )
    iran_gre6tapwire_tunnel4(local_ip, remote_ip)
    ufw("2002:831a::2")
    ufw("2002:831a::1")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    ip_address = "2002:831a::1"  # iranip
    print("\033[92m(\033[96mPlease wait,Azumi is pinging again...\033[0m")
    ping_result = subprocess.run(
        ["ping6", "-c", "2", ip_address], capture_output=True, text=True
    ).stdout.strip()
    print(ping_result)
    display_checkmark("\033[92mConfiguration is done!\033[0m")


def gre6tap2_nativeiran4_wireguard():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print("\033[92m(   ) \033[92mGRE6tap + Native\033[93m Configuration\033[0m")
    print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[92mSERVER 4\033[0m")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    local_ip = input(
        "\033[93mEnter \033[92mIRAN Client \033[96m[4] \033[93m IPV6 address: \033[0m"
    )
    remote_ip = input(
        "\033[93mEnter \033[92mKharej Server\033[93m IPV6 address: \033[0m"
    )
    iran_gre6tapwire_tunnel4(local_ip, remote_ip)
    ufw("2002:831a::2")
    ufw("2002:831a::1")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")

    ip_address = "2002:831a::1"  # iranip
    print("\033[92m(\033[96mPlease wait,Azumi is pinging again...\033[0m")
    ping_result = subprocess.run(
        ["ping6", "-c", "2", ip_address], capture_output=True, text=True
    ).stdout.strip()
    print(ping_result)
    display_checkmark("\033[92mConfiguration is done!\033[0m")


def gre6tap_nativeiran5_wireguard():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print("\033[92m(   ) \033[92mGRE6tap + Native\033[93m Configuration\033[0m")
    print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[92mSERVER 5\033[0m")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    local_ip = input("\033[93mEnter \033[92mIRAN Server\033[93m IPV6 address: \033[0m")
    remote_ip = input(
        "\033[93mEnter \033[92mKharej Client\033[96m [5]\033[93m IPV6 address: \033[0m"
    )
    iran_gre6tapwire_tunnel5(local_ip, remote_ip)
    ufw("2002:841a::2")
    ufw("2002:841a::1")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    ip_address = "2002:841a::1"  # iranip
    print("\033[92m(\033[96mPlease wait,Azumi is pinging again...\033[0m")
    ping_result = subprocess.run(
        ["ping6", "-c", "2", ip_address], capture_output=True, text=True
    ).stdout.strip()
    print(ping_result)
    display_checkmark("\033[92mConfiguration is done!\033[0m")


def gre6tap2_nativeiran5_wireguard():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print("\033[92m(   ) \033[92mGRE6tap + Native\033[93m Configuration\033[0m")
    print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[92mSERVER 5\033[0m")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    local_ip = input(
        "\033[93mEnter \033[92mIRAN Client \033[96m[5] \033[93m IPV6 address: \033[0m"
    )
    remote_ip = input(
        "\033[93mEnter \033[92mKharej Server\033[93m IPV6 address: \033[0m"
    )
    iran_gre6tapwire_tunnel5(local_ip, remote_ip)
    ufw("2002:841a::2")
    ufw("2002:841a::1")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")

    ip_address = "2002:841a::1"  # iranip
    print("\033[92m(\033[96mPlease wait,Azumi is pinging again...\033[0m")
    ping_result = subprocess.run(
        ["ping6", "-c", "2", ip_address], capture_output=True, text=True
    ).stdout.strip()
    print(ping_result)
    display_checkmark("\033[92mConfiguration is done!\033[0m")


## Kharej 1
def run_ping1_iran():
    try:
        print("\033[96mPlease Wait, Azumi is pinging...")
        subprocess.run(["ping", "-c", "2", "2002:801b::1"], check=True)
    except subprocess.CalledProcessError as e:
        print(Fore.LIGHTRED_EX + "Pinging failed:", e, Style.RESET_ALL)


def add_cron1_job():
    try:

        subprocess.run(
            "crontab -l | grep -v '/etc/private1.sh' | crontab -",
            shell=True,
            capture_output=True,
            text=True,
        )

        subprocess.run(
            "(crontab -l ; echo '@reboot /bin/bash /etc/private1.sh') | crontab -",
            shell=True,
            capture_output=True,
            text=True,
        )

        display_checkmark("\033[92mCronjob added successfully!\033[0m")
    except subprocess.CalledProcessError as e:
        print("\033[91mFailed to add cronjob:\033[0m", e)


def run_ping1():
    try:
        print("\033[96mPlease Wait, Azumi is pinging...")
        subprocess.run(["ping", "-c", "2", "2002:801b::2"], check=True)
    except subprocess.CalledProcessError as e:
        print(Fore.LIGHTRED_EX + "Pinging failed:", e, Style.RESET_ALL)

def ping_v61_service():
    service_content = """[Unit]
Description=keepalive
After=network.target

[Service]
ExecStart=/bin/bash /etc/ping_v61.sh
Restart=always

[Install]
WantedBy=multi-user.target
"""

    service_file_path = "/etc/systemd/system/ping_v61.service"
    with open(service_file_path, "w") as service_file:
        service_file.write(service_content)

    subprocess.run(["systemctl", "daemon-reload"])
    subprocess.run(["systemctl", "enable", "ping_v61.service"])
    subprocess.run(["systemctl", "start", "ping_v61.service"])
    sleep(1)
    subprocess.run(["systemctl", "restart", "ping_v61.service"])


## Kharej 2
def run_ping2_iran():
    try:
        print("\033[96mPlease Wait, Azumi is pinging...")
        subprocess.run(["ping", "-c", "2", "2002:811b::1"], check=True)
    except subprocess.CalledProcessError as e:
        print(Fore.LIGHTRED_EX + "Pinging failed:", e, Style.RESET_ALL)


def add_cron2_job():
    try:

        subprocess.run(
            "crontab -l | grep -v '/etc/private2.sh' | crontab -",
            shell=True,
            capture_output=True,
            text=True,
        )

        subprocess.run(
            "(crontab -l ; echo '@reboot /bin/bash /etc/private2.sh') | crontab -",
            shell=True,
            capture_output=True,
            text=True,
        )

        display_checkmark("\033[92mCronjob added successfully!\033[0m")
    except subprocess.CalledProcessError as e:
        print("\033[91mFailed to add cronjob:\033[0m", e)


def run_ping2():
    try:
        print("\033[96mPlease Wait, Azumi is pinging...")
        subprocess.run(["ping", "-c", "2", "2002:811b::2"], check=True)
    except subprocess.CalledProcessError as e:
        print(Fore.LIGHTRED_EX + "Pinging failed:", e, Style.RESET_ALL)


def ping_v62_service():
    service_content = """[Unit]
Description=keepalive
After=network.target

[Service]
ExecStart=/bin/bash /etc/ping_v62.sh
Restart=always

[Install]
WantedBy=multi-user.target
"""

    service_file_path = "/etc/systemd/system/ping_v62.service"
    with open(service_file_path, "w") as service_file:
        service_file.write(service_content)

    subprocess.run(["systemctl", "daemon-reload"])
    subprocess.run(["systemctl", "enable", "ping_v62.service"])
    subprocess.run(["systemctl", "start", "ping_v62.service"])
    sleep(1)
    subprocess.run(["systemctl", "restart", "ping_v62.service"])


def servernclient_sit(client_num):
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification(
        f"\033[93mConfiguring \033[96mWireguard \033[92mServer & Client \033[96m{client_num}\033[0m"
    )

    server_private_key, server_public_key = generate_keys()
    client_private_key, client_public_key = generate_keys()

    print(f"\033[93m───────────────────────────────────────\033[0m")
    print(
        f"\033[92mKharej\033[93m Server\033[96m Config\033[97m {client_num}\033[93m Keys:\033[0m"
    )
    print(f"\033[93m───────────────────────────────────────\033[0m")
    print(
        f"\033[93m╭──────────────────────────────────────────────────────────╮\033[0m"
    )
    print(f"  Private Key:\033[96m {server_private_key}\033[0m")
    print(f"  Public  Key:\033[96m {server_public_key}\033[0m")
    print(
        f"\033[93m╰──────────────────────────────────────────────────────────╯\033[0m"
    )

    print(f"\033[93m───────────────────────────────────────\033[0m")
    print(f"\033[92mIRAN\033[93m Client\033[96m {client_num}\033[93m Keys:\033[0m")
    print(f"\033[93m───────────────────────────────────────\033[0m")
    print(
        f"\033[93m╭──────────────────────────────────────────────────────────╮\033[0m"
    )
    print(f"  Private Key:\033[96m {client_private_key}\033[0m")
    print(f"  Public  Key:\033[96m {client_public_key}\033[0m")
    print(
        f"\033[93m╰──────────────────────────────────────────────────────────╯\033[0m"
    )

    ipversion = ipver(
        f"\033[92mKharej \033[93mServer Config \033[96m{client_num}\033[0m"
    )

    if ipversion == 1:
        ipoptions = {
            1: ["60.2.0.1", "172.168.0.1", "manual"],
            2: ["60.3.0.1", "172.168.1.1", "manual"],
            3: ["60.4.0.1", "172.168.2.1", "manual"],
            4: ["60.5.0.1", "172.168.3.1", "manual"],
            5: ["60.6.0.1", "172.168.4.1", "manual"],
        }
        subnet = "24"
    else:
        ipoptions = {
            1: ["2001:dc5::1", "fd1d:cd1::1", "manual"],
            2: ["2001:de5::1", "fd1d:ed1::1", "manual"],
            3: ["2001:df5::1", "fd1d:fd1::1", "manual"],
            4: ["2001:da5::1", "fd1d:ad1::1", "manual"],
            5: ["2001:db5::1", "fd1d:bd1::1", "manual"],
        }
        subnet = "64"

    server_ip = ipaddr(
        ipversion,
        ipoptions[client_num],
        f"\033[92mServer\033[93m Config\033[96m {client_num}\033[0m",
    )
    print(f"\033[93m───────────────────────────────────────\033[0m")
    server_port = input(
        f"\033[93mEnter \033[92mConfig \033[96m{client_num}\033[93m Tunnel Port: \033[0m"
    )

    iran_client_ips_v6 = [
        "2002:801b::2",
        "2002:811b::2",
        "2002:821b::2",
        "2002:831b::2",
        "2002:841b::2",
    ]

    ipversion = ipver(f"\033[92mIRAN\033[93m Client \033[96m{client_num} Config\033[0m")

    if ipversion == 1:
        ipoptions = {
            1: ["60.2.0.2", "172.168.0.2", "manual"],
            2: ["60.3.0.2", "172.168.1.2", "manual"],
            3: ["60.4.0.2", "172.168.2.2", "manual"],
            4: ["60.5.0.2", "172.168.3.2", "manual"],
            5: ["60.6.0.2", "172.168.4.2", "manual"],
        }
        client_subnet = "32"
    else:
        ipoptions = {
            1: ["2001:dc5::2", "fd1d:cd1::2", "manual"],
            2: ["2001:de5::2", "fd1d:ed1::2", "manual"],
            3: ["2001:df5::2", "fd1d:fd1::2", "manual"],
            4: ["2001:da5::2", "fd1d:ad1::2", "manual"],
            5: ["2001:db5::2", "fd1d:bd1::2", "manual"],
        }
        client_subnet = "128"
    client_privateip = iran_client_ips_v6[client_num - 1]
    client_ip = ipaddr(ipversion, ipoptions[client_num], f"Client {client_num}")
    print("\033[93m───────────────────────────────────────\033[0m")
    find_interface = input(
        "\033[93mDo you want meh to find the \033[92mmain interface\033[96m automatically\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m"
    )
    if find_interface.lower() == "yes" or find_interface.lower() == "y":
        interface = main_interface()
        if interface is None:
            print("\033[91merror: Couldn't find your network interface.\033[0m")
            return
    else:
        interface = input(
            "\033[93mWhat is your \033[92mmain interface\033[93m? \033[0m"
        )
    print("\033[93m───────────────────────────────────────\033[0m")
    mtu_config = ""
    mtu_choice = input(
        f"\033[93mDo you want to set \033[92mWireguard MTU\033[93m for \033[92mKharej Server\033[96m Config [1] \033[93m(\033[92myes\033[93m/\033[91mno\033[93m): \033[0m"
    ).lower()
    if mtu_choice in ["yes", "y"]:
        mtu_value = input(
            f"\033[93mEnter MTU value for \033[92mKharej Server\033[96m Config [1] \033[93m: \033[0m"
        )
        mtu_config = f"MTU = {mtu_value}\n"

    if ipversion == 1:
        server_config = f"""
[Interface]
PrivateKey = {server_private_key}
Address = {server_ip}/{subnet}  
ListenPort = {server_port}
{mtu_config}
PostUp = iptables -I INPUT -p udp --dport {server_port} -j ACCEPT
PostUp = iptables -I FORWARD -i {interface} -o wireserver{client_num} -j ACCEPT
PostUp = iptables -I FORWARD -i wireserver{client_num} -j ACCEPT
PostUp = iptables -t nat -A POSTROUTING -o {interface} -j MASQUERADE
PostUp = ip6tables -I FORWARD -i wireserver{client_num} -j ACCEPT
PostUp = ip6tables -t nat -A POSTROUTING -o {interface} -j MASQUERADE
PostDown = iptables -D INPUT -p udp --dport {server_port} -j ACCEPT
PostDown = iptables -D FORWARD -i {interface} -o wireserver{client_num} -j ACCEPT
PostDown = iptables -D FORWARD -i wireserver{client_num} -j ACCEPT
PostDown = iptables -t nat -D POSTROUTING -o {interface} -j MASQUERADE
PostDown = ip6tables -D FORWARD -i wireserver{client_num} -j ACCEPT
PostDown = ip6tables -t nat -D POSTROUTING -o {interface} -j MASQUERADE

[Peer]
PublicKey = {client_public_key}
AllowedIPs = {client_ip}/{client_subnet}  
Endpoint = {client_privateip}:{server_port}
"""
    else:
        server_config = f"""
[Interface]
PrivateKey = {server_private_key}
Address = {server_ip}/{subnet}  
ListenPort = {server_port}
{mtu_config}
PostUp = iptables -I INPUT -p udp --dport {server_port} -j ACCEPT
PostUp = iptables -I FORWARD -i {interface} -o wireserver{client_num} -j ACCEPT
PostUp = iptables -I FORWARD -i wireserver{client_num} -j ACCEPT
PostUp = iptables -t nat -A POSTROUTING -o {interface} -j MASQUERADE
PostUp = ip6tables -I FORWARD -i wireserver{client_num} -j ACCEPT
PostUp = ip6tables -t nat -A POSTROUTING -o {interface} -j MASQUERADE
PostDown = iptables -D INPUT -p udp --dport {server_port} -j ACCEPT
PostDown = iptables -D FORWARD -i {interface} -o wireserver{client_num} -j ACCEPT
PostDown = iptables -D FORWARD -i wireserver{client_num} -j ACCEPT
PostDown = iptables -t nat -D POSTROUTING -o {interface} -j MASQUERADE
PostDown = ip6tables -D FORWARD -i wireserver{client_num} -j ACCEPT
PostDown = ip6tables -t nat -D POSTROUTING -o {interface} -j MASQUERADE

[Peer]
PublicKey = {client_public_key}
AllowedIPs = {client_ip}/{client_subnet}  
Endpoint = {client_privateip}:{server_port}
"""

    server_confpath = f"/etc/wireguard/wireserver{client_num}.conf"
    keynconfig(server_confpath, server_config)
    ufwportudp(server_port)
    wg(client_num)

    return server_ip, client_ip, "ipv4" if ipversion == 1 else "ipv6"


def servernclient_sit2(client_num):
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification(
        f"\033[93mConfiguring \033[96mWireguard \033[92mServer & Client \033[96m{client_num}\033[0m"
    )

    server_private_key, server_public_key = generate_keys()
    client_private_key, client_public_key = generate_keys()

    print(f"\033[93m───────────────────────────────────────\033[0m")
    print(
        f"\033[92mIRAN\033[93m Server\033[96m Config \033[97m{client_num}\033[93m Keys:\033[0m"
    )
    print(f"\033[93m───────────────────────────────────────\033[0m")
    print(
        f"\033[93m╭──────────────────────────────────────────────────────────╮\033[0m"
    )
    print(f"  Private Key:\033[96m {server_private_key}\033[0m")
    print(f"  Public  Key:\033[96m {server_public_key}\033[0m")
    print(
        f"\033[93m╰──────────────────────────────────────────────────────────╯\033[0m"
    )

    print(f"\033[93m───────────────────────────────────────\033[0m")
    print(f"\033[92mKharej\033[93m Client \033[96m{client_num}\033[93m Keys:\033[0m")
    print(f"\033[93m───────────────────────────────────────\033[0m")
    print(
        f"\033[93m╭──────────────────────────────────────────────────────────╮\033[0m"
    )
    print(f"  Private Key:\033[96m {client_private_key}\033[0m")
    print(f"  Public  Key:\033[96m {client_public_key}\033[0m")
    print(
        f"\033[93m╰──────────────────────────────────────────────────────────╯\033[0m"
    )

    ipversion = ipver(f"\033[92mIRAN \033[93mServer Config \033[96m{client_num}\033[0m")

    if ipversion == 1:
        ipoptions = {
            1: ["60.2.0.1", "172.168.0.1", "manual"],
            2: ["60.3.0.1", "172.168.1.1", "manual"],
            3: ["60.4.0.1", "172.168.2.1", "manual"],
            4: ["60.5.0.1", "172.168.3.1", "manual"],
            5: ["60.6.0.1", "172.168.4.1", "manual"],
        }
        subnet = "24"
    else:
        ipoptions = {
            1: ["2001:dc5::1", "fd1d:cd1::1", "manual"],
            2: ["2001:de5::1", "fd1d:ed1::1", "manual"],
            3: ["2001:df5::1", "fd1d:fd1::1", "manual"],
            4: ["2001:da5::1", "fd1d:ad1::1", "manual"],
            5: ["2001:db5::1", "fd1d:bd1::1", "manual"],
        }
        subnet = "64"

    server_ip = ipaddr(
        ipversion,
        ipoptions[client_num],
        f"\033[92mServer \033[93mConfig {client_num}\033[0m",
    )
    print(f"\033[93m───────────────────────────────────────\033[0m")
    server_port = input(
        f"\033[93mEnter \033[92mConfig \033[96m{client_num}\033[93m Tunnel Port: \033[0m"
    )
    iran_client_ips_v6 = [
        "2002:801b::1",
        "2002:811b::1",
        "2002:821b::1",
        "2002:831b::1",
        "2002:841b::1",
    ]

    ipversion = ipver(
        f"\033[92mKharej\033[93m Client \033[96m{client_num} Config\033[0m"
    )

    if ipversion == 1:
        ipoptions = {
            1: ["60.2.0.2", "172.168.0.2", "manual"],
            2: ["60.3.0.2", "172.168.1.2", "manual"],
            3: ["60.4.0.2", "172.168.2.2", "manual"],
            4: ["60.5.0.2", "172.168.3.2", "manual"],
            5: ["60.6.0.2", "172.168.4.2", "manual"],
        }
        client_subnet = "32"
    else:
        ipoptions = {
            1: ["2001:dc5::2", "fd1d:cd1::2", "manual"],
            2: ["2001:de5::2", "fd1d:ed1::2", "manual"],
            3: ["2001:df5::2", "fd1d:fd1::2", "manual"],
            4: ["2001:da5::2", "fd1d:ad1::2", "manual"],
            5: ["2001:db5::2", "fd1d:bd1::2", "manual"],
        }
        client_subnet = "128"
    client_privateip = iran_client_ips_v6[client_num - 1]
    client_ip = ipaddr(ipversion, ipoptions[client_num], f"Client {client_num}")
    print("\033[93m───────────────────────────────────────\033[0m")
    find_interface = input(
        "\033[93mDo you want meh to find the \033[92mmain interface\033[96m automatically\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m"
    )
    if find_interface.lower() == "yes" or find_interface.lower() == "y":
        interface = main_interface()
        if interface is None:
            print("\033[91merror: Couldn't find your network interface.\033[0m")
            return
    else:
        interface = input(
            "\033[93mWhat is your \033[92mmain interface\033[93m? \033[0m"
        )
    print("\033[93m───────────────────────────────────────\033[0m")
    mtu_config = ""
    mtu_choice = input(
        f"\033[93mDo you want to set \033[92mWireguard MTU\033[93m for \033[92mIRAN Server\033[96m Config [1] \033[93m(\033[92myes\033[93m/\033[91mno\033[93m): \033[0m"
    ).lower()
    if mtu_choice in ["yes", "y"]:
        mtu_value = input(
            f"\033[93mEnter MTU value for \033[92mIRAN Server\033[96m Config [1] \033[93m: \033[0m"
        )
        mtu_config = f"MTU = {mtu_value}\n"

    if ipversion == 1:
        server_config = f"""
[Interface]
PrivateKey = {server_private_key}
Address = {server_ip}/{subnet}  
ListenPort = {server_port}
{mtu_config}
PostUp = iptables -I INPUT -p udp --dport {server_port} -j ACCEPT
PostUp = iptables -I FORWARD -i {interface} -o wireserver{client_num} -j ACCEPT
PostUp = iptables -I FORWARD -i wireserver{client_num} -j ACCEPT
PostUp = iptables -t nat -A POSTROUTING -o {interface} -j MASQUERADE
PostUp = ip6tables -I FORWARD -i wireserver{client_num} -j ACCEPT
PostUp = ip6tables -t nat -A POSTROUTING -o {interface} -j MASQUERADE
PostDown = iptables -D INPUT -p udp --dport {server_port} -j ACCEPT
PostDown = iptables -D FORWARD -i {interface} -o wireserver{client_num} -j ACCEPT
PostDown = iptables -D FORWARD -i wireserver{client_num} -j ACCEPT
PostDown = iptables -t nat -D POSTROUTING -o {interface} -j MASQUERADE
PostDown = ip6tables -D FORWARD -i wireserver{client_num} -j ACCEPT
PostDown = ip6tables -t nat -D POSTROUTING -o {interface} -j MASQUERADE

[Peer]
PublicKey = {client_public_key}
AllowedIPs = {client_ip}/{client_subnet}  
Endpoint = {client_privateip}:{server_port}
"""
    else:
        server_config = f"""
[Interface]
PrivateKey = {server_private_key}
Address = {server_ip}/{subnet}  
ListenPort = {server_port}
{mtu_config}
PostUp = iptables -I INPUT -p udp --dport {server_port} -j ACCEPT
PostUp = iptables -I FORWARD -i {interface} -o wireserver{client_num} -j ACCEPT
PostUp = iptables -I FORWARD -i wireserver{client_num} -j ACCEPT
PostUp = iptables -t nat -A POSTROUTING -o {interface} -j MASQUERADE
PostUp = ip6tables -I FORWARD -i wireserver{client_num} -j ACCEPT
PostUp = ip6tables -t nat -A POSTROUTING -o {interface} -j MASQUERADE
PostDown = iptables -D INPUT -p udp --dport {server_port} -j ACCEPT
PostDown = iptables -D FORWARD -i {interface} -o wireserver{client_num} -j ACCEPT
PostDown = iptables -D FORWARD -i wireserver{client_num} -j ACCEPT
PostDown = iptables -t nat -D POSTROUTING -o {interface} -j MASQUERADE
PostDown = ip6tables -D FORWARD -i wireserver{client_num} -j ACCEPT
PostDown = ip6tables -t nat -D POSTROUTING -o {interface} -j MASQUERADE

[Peer]
PublicKey = {client_public_key}
AllowedIPs = {client_ip}/{client_subnet}  
Endpoint = {client_privateip}:{server_port}
"""

    server_confpath = f"/etc/wireguard/wireserver{client_num}.conf"
    keynconfig(server_confpath, server_config)
    ufwportudp(server_port)
    wg(client_num)

    return server_ip, client_ip, "ipv4" if ipversion == 1 else "ipv6"


def wireguardsit_menu():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print("\033[92m(   ) \033[93mWireguard + SIT + IPSEC \033[93mMenu\033[0m")
    print(
        '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
    )
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[92mWireguard + SIT - [1]Kharej Server [5]IRAN Clients\033[0m")
    print("2. \033[93mWireguard + SIT - [1]IRAN   Server [5]Kharej Clients\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    print("0.\033[97mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")
    while True:
        server_type = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if server_type == "1":
            wireguard_sit_kharej1_5iran()
            break
        elif server_type == "2":
            wireguard_sit_1iran_5kharej()
            break
        elif server_type == "0":
            os.system("clear")
            wireguard_allinone_mnu()
            break
        else:
            print("Invalid choice.")


def wireguard_sit_kharej1_5iran():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print(
        "\033[92m(   ) \033[93mWireguard + SIT \033[92m[1]Kharej Server\033[96m [5]IRAN Client\033[93mMenu\033[0m"
    )
    print(
        '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
    )
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[92mIRAN Client [1] Config\033[0m")
    print("2. \033[92mIRAN Client [2] Config\033[0m")
    print("3. \033[92mIRAN Client [3] Config\033[0m")
    print("4. \033[93mIRAN Client [4] Config\033[0m")
    print("5. \033[92mIRAN Client [5] Config\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    print("6. \033[96mKharej Server Config\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    print("0.\033[97mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")
    while True:
        server_type = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if server_type == "1":
            wireguardsit_iran_client1()
            break
        elif server_type == "2":
            wireguardsit_iran_client2()
            break
        elif server_type == "3":
            wireguardsit_iran_client3()
            break
        elif server_type == "4":
            wireguardsit_iran_client4()
            break
        elif server_type == "5":
            wireguardsit_iran_client5()
            break
        elif server_type == "6":
            wireguardsit_kharej_server()
            break
        elif server_type == "0":
            os.system("clear")
            wireguardsit_menu()
            break
        else:
            print("Invalid choice.")


def wireguardsit_kharej_server():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print("\033[92m(   ) \033[93mWireguard + SIT \033[92mKharej Server\033[0m")
    print('\033[92m "-"\033[93m═════════════════════════════════════════\033[0m')
    check_wireguard_installed()
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    num_clients = int(
        input("\033[93mEnter the number of \033[92mIRAN\033[93m Clients: \033[0m")
    )

    for i in range(1, num_clients + 1):
        menu_name = f"kharejserver{i}_wireguardsit_menu"
        if menu_name in globals():
            globals()[menu_name]()
        else:
            print(f"Function {menu_name} does not exist.")

    server_ips = []
    client_ips = []
    ip_versions = set()

    for i in range(1, num_clients + 1):
        server_ip, client_ip, ip_version = servernclient_sit(i)
        server_ips.append(server_ip)
        client_ips.append(client_ip)
        ip_versions.add(ip_version)
        create_wireguardping_server(client_ip, i)
        wireguardping_server_service(i)
        ufw(server_ip)
        ufw(client_ip)

    print(f"\033[93m───────────────────────────────────────\033[0m")
    ipsec_choice = (
        input(
            "\033[93mDo you want to configure IPsec? (\033[92myes\033[93m or \033[91mno): \033[0m"
        )
        .strip()
        .lower()
    )

    if ipsec_choice in ["yes", "y"]:
        psk = input("\033[93mEnter IPSEC \033[92mSecret Key\033[93m: \033[0m")
        ip_ver = ip_versions.pop()
        config_server(psk, server_ips, client_ips, ip_ver)


def wireguardsit_iran_client1():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print("\033[92m(   ) \033[93mWireguard + SIT \033[92mIRAN Client [1]\033[0m")
    print('\033[92m "-"\033[93m═════════════════════════════════════════\033[0m')
    iranclient1_wireguardsit_menu()
    check_wireguard_installed()
    print("\033[93m───────────────────────────────────────\033[0m")
    display_notification("\033[93mConfiguring WireGuard Client\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    server_public_key = user_input(
        "\033[93mEnter \033[92mKharej Server\033[93m's config \033[96m[1] \033[96mpublic key:\033[0m "
    )
    client_private_key = user_input(
        "\033[93mEnter \033[92mIRAN Client\033[96m [1]\033[93m private key:\033[0m "
    )
    client_port = user_input(
        "\033[93mEnter \033[92mConfig \033[96m[1]\033[93m Tunnel port:\033[0m "
    )

    client_ip, client_subnet, ip_version = ipversion_n_address(
        "\033[93mIRAN Client \033[92m[1]\033[0m"
    )
    server_private_ip, server_subnet = ipversion_n_address(
        "\033[93mKharej Server Config \033[92m[1]\033[0m"
    )[:2]
    ufwportudp(client_port)
    ufw(client_ip)
    ufw(server_private_ip)
    print("\033[93m───────────────────────────────────────\033[0m")
    find_interface = input(
        "\033[93mDo you want meh to find the \033[92mmain interface\033[96m automatically\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m"
    )
    if find_interface.lower() == "yes" or find_interface.lower() == "y":
        interface = main_interface()
        if interface is None:
            print("\033[91merror: Couldn't find your network interface.\033[0m")
            return
    else:
        interface = input(
            "\033[93mWhat is your \033[92mmain interface\033[93m? \033[0m"
        )
    print("\033[93m───────────────────────────────────────\033[0m")
    mtu_config = ""
    mtu_choice = input(
        f"\033[93mDo you want to set \033[92mWireguard MTU\033[93m for \033[92mClient\033[96m [1] \033[93m(\033[92myes\033[93m/\033[91mno\033[93m): \033[0m"
    ).lower()
    if mtu_choice in ["yes", "y"]:
        mtu_value = input(
            f"\033[93mEnter MTU value for \033[92mClient\033[96m [1] \033[93m: \033[0m"
        )
        mtu_config = f"MTU = {mtu_value}\n"

    client_config = f"""
[Interface]
PrivateKey = {client_private_key}
Address = {client_ip}/{client_subnet}
ListenPort = {client_port}
{mtu_config}
PostUp = iptables -I INPUT -p udp --dport {client_port} -j ACCEPT
PostUp = iptables -I FORWARD -i {interface} -o wireclient -j ACCEPT
PostUp = iptables -I FORWARD -i wireclient -j ACCEPT
PostUp = iptables -t nat -A POSTROUTING -o {interface} -j MASQUERADE
PostUp = ip6tables -I FORWARD -i wireclient -j ACCEPT
PostUp = ip6tables -t nat -A POSTROUTING -o {interface} -j MASQUERADE
PostDown = iptables -D INPUT -p udp --dport {client_port} -j ACCEPT
PostDown = iptables -D FORWARD -i {interface} -o wireclient -j ACCEPT
PostDown = iptables -D FORWARD -i wireclient -j ACCEPT
PostDown = iptables -t nat -D POSTROUTING -o {interface} -j MASQUERADE
PostDown = ip6tables -D FORWARD -i wireclient -j ACCEPT
PostDown = ip6tables -t nat -D POSTROUTING -o {interface} -j MASQUERADE

[Peer]
PublicKey = {server_public_key}
AllowedIPs = {server_private_ip}/{server_subnet}
Endpoint = 2002:801b::1:{client_port}
"""

    client_config_path = "/etc/wireguard/wireclient.conf"
    write_config(client_config_path, client_config)
    wgclient()
    create_wireguardping_client(server_private_ip)
    wireguardping_client_service()
    print("\033[93m───────────────────────────────────────\033[0m")
    display_checkmark(
        f"\033[92mClient configuration saved to \033[97m{client_config_path}\033[0m"
    )
    print(f"\033[93m───────────────────────────────────────\033[0m")
    ipsec_choice = (
        input(
            "\033[93mDo you want to configure IPsec? (\033[92myes\033[93m or \033[91mno): \033[0m"
        )
        .strip()
        .lower()
    )

    if ipsec_choice in ["yes", "y"]:
        psk = input("\033[93mEnter IPSEC \033[92mSecret Key\033[93m: \033[0m")
        config_client(psk, [server_private_ip], [client_ip], ip_version)


def wireguardsit_iran_client2():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print("\033[92m(   ) \033[93mWireguard + SIT \033[92mIRAN Client [2]\033[0m")
    print('\033[92m "-"\033[93m═════════════════════════════════════════\033[0m')
    iranclient2_wireguardsit_menu()
    check_wireguard_installed()
    print("\033[93m───────────────────────────────────────\033[0m")
    display_notification("\033[93mConfiguring WireGuard Client\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    server_public_key = user_input(
        "\033[93mEnter \033[92mKharej Server\033[93m's config \033[96m[2] \033[96mpublic key:\033[0m "
    )
    client_private_key = user_input(
        "\033[93mEnter \033[92mIRAN Client\033[96m [2]\033[93m private key:\033[0m "
    )
    client_port = user_input(
        "\033[93mEnter \033[92mConfig \033[96m[2]\033[93m Tunnel port:\033[0m "
    )

    client_ip, client_subnet, ip_version = ipversion_n_address2(
        "\033[93mIRAN Client \033[92m[2]\033[0m"
    )
    server_private_ip, server_subnet = ipversion_n_address2(
        "\033[93mKharej Server Config \033[92m[2]\033[0m"
    )[:2]
    ufwportudp(client_port)
    ufw(client_ip)
    ufw(server_private_ip)
    print("\033[93m───────────────────────────────────────\033[0m")
    find_interface = input(
        "\033[93mDo you want meh to find the \033[92mmain interface\033[96m automatically\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m"
    )
    if find_interface.lower() == "yes" or find_interface.lower() == "y":
        interface = main_interface()
        if interface is None:
            print("\033[91merror: Couldn't find your network interface.\033[0m")
            return
    else:
        interface = input(
            "\033[93mWhat is your \033[92mmain interface\033[93m? \033[0m"
        )
    print("\033[93m───────────────────────────────────────\033[0m")
    mtu_config = ""
    mtu_choice = input(
        f"\033[93mDo you want to set \033[92mWireguard MTU\033[93m for \033[92mClient\033[96m [2] \033[93m(\033[92myes\033[93m/\033[91mno\033[93m): \033[0m"
    ).lower()
    if mtu_choice in ["yes", "y"]:
        mtu_value = input(
            f"\033[93mEnter MTU value for \033[92mClient\033[96m [2] \033[93m: \033[0m"
        )
        mtu_config = f"MTU = {mtu_value}\n"

    client_config = f"""
[Interface]
PrivateKey = {client_private_key}
Address = {client_ip}/{client_subnet}
ListenPort = {client_port}
{mtu_config}
PostUp = iptables -I INPUT -p udp --dport {client_port} -j ACCEPT
PostUp = iptables -I FORWARD -i {interface} -o wireclient -j ACCEPT
PostUp = iptables -I FORWARD -i wireclient -j ACCEPT
PostUp = iptables -t nat -A POSTROUTING -o {interface} -j MASQUERADE
PostUp = ip6tables -I FORWARD -i wireclient -j ACCEPT
PostUp = ip6tables -t nat -A POSTROUTING -o {interface} -j MASQUERADE
PostDown = iptables -D INPUT -p udp --dport {client_port} -j ACCEPT
PostDown = iptables -D FORWARD -i {interface} -o wireclient -j ACCEPT
PostDown = iptables -D FORWARD -i wireclient -j ACCEPT
PostDown = iptables -t nat -D POSTROUTING -o {interface} -j MASQUERADE
PostDown = ip6tables -D FORWARD -i wireclient -j ACCEPT
PostDown = ip6tables -t nat -D POSTROUTING -o {interface} -j MASQUERADE

[Peer]
PublicKey = {server_public_key}
AllowedIPs = {server_private_ip}/{server_subnet}
Endpoint = 2002:811b::1:{client_port}
"""

    client_config_path = "/etc/wireguard/wireclient.conf"
    write_config(client_config_path, client_config)
    wgclient()
    create_wireguardping_client(server_private_ip)
    wireguardping_client_service()
    print("\033[93m───────────────────────────────────────\033[0m")
    display_checkmark(
        f"\033[92mClient configuration saved to \033[97m{client_config_path}\033[0m"
    )
    print(f"\033[93m───────────────────────────────────────\033[0m")
    ipsec_choice = (
        input(
            "\033[93mDo you want to configure IPsec? (\033[92myes\033[93m or \033[91mno): \033[0m"
        )
        .strip()
        .lower()
    )

    if ipsec_choice in ["yes", "y"]:
        psk = input("\033[93mEnter IPSEC \033[92mSecret Key\033[93m: \033[0m")
        config_client(psk, [server_private_ip], [client_ip], ip_version)


def wireguardsit_iran_client3():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print("\033[92m(   ) \033[93mWireguard + SIT \033[92mIRAN Client [3]\033[0m")
    print('\033[92m "-"\033[93m═════════════════════════════════════════\033[0m')
    iranclient3_wireguardsit_menu()
    check_wireguard_installed()
    print("\033[93m───────────────────────────────────────\033[0m")
    display_notification("\033[93mConfiguring WireGuard Client\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    server_public_key = user_input(
        "\033[93mEnter \033[92mKharej Server\033[93m's config \033[96m[3] \033[96mpublic key:\033[0m "
    )
    client_private_key = user_input(
        "\033[93mEnter \033[92mIRAN Client\033[96m [3]\033[93m private key:\033[0m "
    )
    client_port = user_input(
        "\033[93mEnter \033[92mConfig \033[96m[3]\033[93m Tunnel port:\033[0m "
    )

    client_ip, client_subnet, ip_version = ipversion_n_address3(
        "\033[93mIRAN Client \033[92m[3]\033[0m"
    )
    server_private_ip, server_subnet = ipversion_n_address3(
        "\033[93mKharej Server Config \033[92m[3]\033[0m"
    )[:2]
    ufwportudp(client_port)
    ufw(client_ip)
    ufw(server_private_ip)
    print("\033[93m───────────────────────────────────────\033[0m")
    find_interface = input(
        "\033[93mDo you want meh to find the \033[92mmain interface\033[96m automatically\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m"
    )
    if find_interface.lower() == "yes" or find_interface.lower() == "y":
        interface = main_interface()
        if interface is None:
            print("\033[91merror: Couldn't find your network interface.\033[0m")
            return
    else:
        interface = input(
            "\033[93mWhat is your \033[92mmain interface\033[93m? \033[0m"
        )
    print("\033[93m───────────────────────────────────────\033[0m")
    mtu_config = ""
    mtu_choice = input(
        f"\033[93mDo you want to set \033[92mWireguard MTU\033[93m for \033[92mClient\033[96m [3] \033[93m(\033[92myes\033[93m/\033[91mno\033[93m): \033[0m"
    ).lower()
    if mtu_choice in ["yes", "y"]:
        mtu_value = input(
            f"\033[93mEnter MTU value for \033[92mClient\033[96m [3] \033[93m: \033[0m"
        )
        mtu_config = f"MTU = {mtu_value}\n"

    client_config = f"""
[Interface]
PrivateKey = {client_private_key}
Address = {client_ip}/{client_subnet}
ListenPort = {client_port}
{mtu_config}
PostUp = iptables -I INPUT -p udp --dport {client_port} -j ACCEPT
PostUp = iptables -I FORWARD -i {interface} -o wireclient -j ACCEPT
PostUp = iptables -I FORWARD -i wireclient -j ACCEPT
PostUp = iptables -t nat -A POSTROUTING -o {interface} -j MASQUERADE
PostUp = ip6tables -I FORWARD -i wireclient -j ACCEPT
PostUp = ip6tables -t nat -A POSTROUTING -o {interface} -j MASQUERADE
PostDown = iptables -D INPUT -p udp --dport {client_port} -j ACCEPT
PostDown = iptables -D FORWARD -i {interface} -o wireclient -j ACCEPT
PostDown = iptables -D FORWARD -i wireclient -j ACCEPT
PostDown = iptables -t nat -D POSTROUTING -o {interface} -j MASQUERADE
PostDown = ip6tables -D FORWARD -i wireclient -j ACCEPT
PostDown = ip6tables -t nat -D POSTROUTING -o {interface} -j MASQUERADE

[Peer]
PublicKey = {server_public_key}
AllowedIPs = {server_private_ip}/{server_subnet}
Endpoint = 2002:821b::1:{client_port}
"""

    client_config_path = "/etc/wireguard/wireclient.conf"
    write_config(client_config_path, client_config)
    wgclient()
    create_wireguardping_client(server_private_ip)
    wireguardping_client_service()
    print("\033[93m───────────────────────────────────────\033[0m")
    display_checkmark(
        f"\033[92mClient configuration saved to \033[97m{client_config_path}\033[0m"
    )
    print(f"\033[93m───────────────────────────────────────\033[0m")
    ipsec_choice = (
        input(
            "\033[93mDo you want to configure IPsec? (\033[92myes\033[93m or \033[91mno): \033[0m"
        )
        .strip()
        .lower()
    )

    if ipsec_choice in ["yes", "y"]:
        psk = input("\033[93mEnter IPSEC \033[92mSecret Key\033[93m: \033[0m")
        config_client(psk, [server_private_ip], [client_ip], ip_version)


def wireguardsit_iran_client4():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print("\033[92m(   ) \033[93mWireguard + SIT \033[92mIRAN Client [4]\033[0m")
    print('\033[92m "-"\033[93m═════════════════════════════════════════\033[0m')
    iranclient4_wireguardsit_menu()
    check_wireguard_installed()
    print("\033[93m───────────────────────────────────────\033[0m")
    display_notification("\033[93mConfiguring WireGuard Client\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    server_public_key = user_input(
        "\033[93mEnter \033[92mKharej Server\033[93m's config \033[96m[4] \033[96mpublic key:\033[0m "
    )
    client_private_key = user_input(
        "\033[93mEnter \033[92mIRAN Client\033[96m [4]\033[93m private key:\033[0m "
    )
    client_port = user_input(
        "\033[93mEnter \033[92mConfig \033[96m[4]\033[93m Tunnel port:\033[0m "
    )

    client_ip, client_subnet, ip_version = ipversion_n_address4(
        "\033[93mIRAN Client \033[92m[4]\033[0m"
    )
    server_private_ip, server_subnet = ipversion_n_address4(
        "\033[93mKharej Server Config \033[92m[4]\033[0m"
    )[:2]
    ufwportudp(client_port)
    ufw(client_ip)
    ufw(server_private_ip)
    print("\033[93m───────────────────────────────────────\033[0m")
    find_interface = input(
        "\033[93mDo you want meh to find the \033[92mmain interface\033[96m automatically\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m"
    )
    if find_interface.lower() == "yes" or find_interface.lower() == "y":
        interface = main_interface()
        if interface is None:
            print("\033[91merror: Couldn't find your network interface.\033[0m")
            return
    else:
        interface = input(
            "\033[93mWhat is your \033[92mmain interface\033[93m? \033[0m"
        )
    print("\033[93m───────────────────────────────────────\033[0m")
    mtu_config = ""
    mtu_choice = input(
        f"\033[93mDo you want to set \033[92mWireguard MTU\033[93m for \033[92mClient\033[96m [4] \033[93m(\033[92myes\033[93m/\033[91mno\033[93m): \033[0m"
    ).lower()
    if mtu_choice in ["yes", "y"]:
        mtu_value = input(
            f"\033[93mEnter MTU value for \033[92mClient\033[96m [4] \033[93m: \033[0m"
        )
        mtu_config = f"MTU = {mtu_value}\n"

    client_config = f"""
[Interface]
PrivateKey = {client_private_key}
Address = {client_ip}/{client_subnet}
ListenPort = {client_port}
{mtu_config}
PostUp = iptables -I INPUT -p udp --dport {client_port} -j ACCEPT
PostUp = iptables -I FORWARD -i {interface} -o wireclient -j ACCEPT
PostUp = iptables -I FORWARD -i wireclient -j ACCEPT
PostUp = iptables -t nat -A POSTROUTING -o {interface} -j MASQUERADE
PostUp = ip6tables -I FORWARD -i wireclient -j ACCEPT
PostUp = ip6tables -t nat -A POSTROUTING -o {interface} -j MASQUERADE
PostDown = iptables -D INPUT -p udp --dport {client_port} -j ACCEPT
PostDown = iptables -D FORWARD -i {interface} -o wireclient -j ACCEPT
PostDown = iptables -D FORWARD -i wireclient -j ACCEPT
PostDown = iptables -t nat -D POSTROUTING -o {interface} -j MASQUERADE
PostDown = ip6tables -D FORWARD -i wireclient -j ACCEPT
PostDown = ip6tables -t nat -D POSTROUTING -o {interface} -j MASQUERADE

[Peer]
PublicKey = {server_public_key}
AllowedIPs = {server_private_ip}/{server_subnet}
Endpoint = 2002:831b::1:{client_port}
"""

    client_config_path = "/etc/wireguard/wireclient.conf"
    write_config(client_config_path, client_config)
    wgclient()
    create_wireguardping_client(server_private_ip)
    wireguardping_client_service()
    print("\033[93m───────────────────────────────────────\033[0m")
    display_checkmark(
        f"\033[92mClient configuration saved to \033[97m{client_config_path}\033[0m"
    )

    print("\033[93m───────────────────────────────────────\033[0m")
    ipsec_choice = (
        input(
            "\033[93mDo you want to configure IPsec? (\033[92myes\033[93m or \033[91mno): \033[0m"
        )
        .strip()
        .lower()
    )

    if ipsec_choice in ["yes", "y"]:
        psk = input("\033[93mEnter IPSEC \033[92mSecret Key\033[93m: \033[0m")
        config_client(psk, [server_private_ip], [client_ip], ip_version)


def wireguardsit_iran_client5():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print("\033[92m(   ) \033[93mWireguard + SIT \033[92mIRAN Client [5]\033[0m")
    print('\033[92m "-"\033[93m═════════════════════════════════════════\033[0m')
    iranclient5_wireguardsit_menu()
    check_wireguard_installed()
    print("\033[93m───────────────────────────────────────\033[0m")
    display_notification("\033[93mConfiguring WireGuard Client\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    server_public_key = user_input(
        "\033[93mEnter \033[92mKharej Server\033[93m's config \033[96m[5] \033[96mpublic key:\033[0m "
    )
    client_private_key = user_input(
        "\033[93mEnter \033[92mIRAN Client\033[96m [5]\033[93m private key:\033[0m "
    )
    client_port = user_input(
        "\033[93mEnter \033[92mConfig \033[96m[5]\033[93m Tunnel port:\033[0m "
    )

    client_ip, client_subnet, ip_version = ipversion_n_address5(
        "\033[93mIRAN Client \033[92m[5]\033[0m"
    )
    server_private_ip, server_subnet = ipversion_n_address5(
        "\033[93mKharej Server Config \033[92m[5]\033[0m"
    )[:2]
    ufwportudp(client_port)
    ufw(client_ip)
    ufw(server_private_ip)
    print("\033[93m───────────────────────────────────────\033[0m")
    find_interface = input(
        "\033[93mDo you want meh to find the \033[92mmain interface\033[96m automatically\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m"
    )
    if find_interface.lower() == "yes" or find_interface.lower() == "y":
        interface = main_interface()
        if interface is None:
            print("\033[91merror: Couldn't find your network interface.\033[0m")
            return
    else:
        interface = input(
            "\033[93mWhat is your \033[92mmain interface\033[93m? \033[0m"
        )
    print("\033[93m───────────────────────────────────────\033[0m")
    mtu_config = ""
    mtu_choice = input(
        f"\033[93mDo you want to set \033[92mWireguard MTU\033[93m for \033[92mClient\033[96m [5] \033[93m(\033[92myes\033[93m/\033[91mno\033[93m): \033[0m"
    ).lower()
    if mtu_choice in ["yes", "y"]:
        mtu_value = input(
            f"\033[93mEnter MTU value for \033[92mClient\033[96m [5] \033[93m: \033[0m"
        )
        mtu_config = f"MTU = {mtu_value}\n"

    client_config = f"""
[Interface]
PrivateKey = {client_private_key}
Address = {client_ip}/{client_subnet}
ListenPort = {client_port}
{mtu_config}
PostUp = iptables -I INPUT -p udp --dport {client_port} -j ACCEPT
PostUp = iptables -I FORWARD -i {interface} -o wireclient -j ACCEPT
PostUp = iptables -I FORWARD -i wireclient -j ACCEPT
PostUp = iptables -t nat -A POSTROUTING -o {interface} -j MASQUERADE
PostUp = ip6tables -I FORWARD -i wireclient -j ACCEPT
PostUp = ip6tables -t nat -A POSTROUTING -o {interface} -j MASQUERADE
PostDown = iptables -D INPUT -p udp --dport {client_port} -j ACCEPT
PostDown = iptables -D FORWARD -i {interface} -o wireclient -j ACCEPT
PostDown = iptables -D FORWARD -i wireclient -j ACCEPT
PostDown = iptables -t nat -D POSTROUTING -o {interface} -j MASQUERADE
PostDown = ip6tables -D FORWARD -i wireclient -j ACCEPT
PostDown = ip6tables -t nat -D POSTROUTING -o {interface} -j MASQUERADE

[Peer]
PublicKey = {server_public_key}
AllowedIPs = {server_private_ip}/{server_subnet}
Endpoint = 2002:841b::1:{client_port}
"""

    client_config_path = "/etc/wireguard/wireclient.conf"
    write_config(client_config_path, client_config)
    wgclient()
    create_wireguardping_client(server_private_ip)
    wireguardping_client_service()
    print("\033[93m───────────────────────────────────────\033[0m")
    display_checkmark(
        f"\033[92mClient configuration saved to \033[97m{client_config_path}\033[0m"
    )
    print("\033[93m───────────────────────────────────────\033[0m")
    ipsec_choice = (
        input(
            "\033[93mDo you want to configure IPsec? (\033[92myes\033[93m or \033[91mno): \033[0m"
        )
        .strip()
        .lower()
    )

    if ipsec_choice in ["yes", "y"]:
        psk = input("\033[93mEnter IPSEC \033[92mSecret Key\033[93m: \033[0m")
        config_client(psk, [server_private_ip], [client_ip], ip_version)


def kharejserver1_wireguardsit_menu():
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification(
        "\033[93mConfiguring \033[97mSIT\033[93m Kharej server\033[96m Config \033[92m[1]\033[0m"
    )

    if os.path.isfile("/etc/private1.sh"):
        os.remove("/etc/private1.sh")

    print("\033[93m─────────────────────────────────────────────────────────╮\033[0m")
    local_ip = input(
        "\033[93mEnter \033[92mKharej Server \033[93m IPV4 address: \033[0m"
    )
    remote_ip = input(
        "\033[93mEnter \033[92mIRAN Client \033[96m[1]\033[93m IPV4 address: \033[0m"
    )

    subprocess.run(
        [
            "ip",
            "tunnel",
            "add",
            "azumi1",
            "mode",
            "sit",
            "remote",
            remote_ip,
            "local",
            local_ip,
            "ttl",
            "255",
        ],
        stdout=subprocess.DEVNULL,
    )
    subprocess.run(
        ["ip", "link", "set", "dev", "azumi1", "up"], stdout=subprocess.DEVNULL
    )

    initial_ip = "2002:801b::1/64"
    subprocess.run(
        ["ip", "addr", "add", initial_ip, "dev", "azumi1"], stdout=subprocess.DEVNULL
    )

    subprocess.run(
        ["ip", "-6", "route", "add", "2002:801b::2/64", "dev", "azumi1"],
        stdout=subprocess.DEVNULL,
    )
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[93mAdding commands...\033[0m")
    with open("/etc/private1.sh", "w") as f:
        f.write("/sbin/modprobe sit\n")
        f.write(
            f"ip tunnel add azumi1 mode sit remote {remote_ip} local {local_ip} ttl 255\n"
        )
        f.write("ip link set dev azumi1 up\n")
        f.write("ip addr add 2002:801b::1/64 dev azumi1\n")
        f.write("ip -6 route add 2002:801b::2/64 dev azumi1\n")

    set_mtu = input(
        "\033[93mDo you want to set the \033[92mMTU\033[96m [SIT]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m"
    )
    if set_mtu.lower() == "yes" or set_mtu.lower() == "y":
        mtu_value = input(
            "\033[93mEnter the desired\033[92m MTU value\033[93m: \033[0m"
        )
        mtu_command = f"ip link set dev azumi1 mtu {mtu_value}\n"
        with open("/etc/private1.sh", "a") as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)
    display_checkmark("\033[92mPrivate ip added successfully!\033[0m")

    add_cron1_job()

    display_checkmark("\033[92mkeepalive service Configured!\033[0m")
    run_ping1()
    ufw("2002:801b::2")
    ufw("2002:801b::1")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    print("\033[93mCreated Private IP Addresses (Kharej):\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")
    print("\033[92m" + " 2002:801b::1    " + "\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")

    script_content1 = """#!/bin/bash


ip_address="2002:801b::2"


max_pings=5


interval=2


while true
do
   
    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{print $2}" | awk -F " " "{print $1}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done

    echo "Waiting for $interval seconds..."
    sleep $interval
done
"""

    with open("/etc/ping_v61.sh", "w") as script_file:
        script_file.write(script_content1)

    os.chmod("/etc/ping_v61.sh", 0o755)
    ping_v61_service()

    print("\033[92mKharej Server Configuration Completed!\033[0m")


def kharejserver2_wireguardsit_menu():
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification(
        "\033[93mConfiguring \033[97mSIT\033[93m Kharej server\033[96m Config \033[92m[2]\033[0m"
    )

    if os.path.isfile("/etc/private2.sh"):
        os.remove("/etc/private2.sh")

    print("\033[93m─────────────────────────────────────────────────────────╮\033[0m")
    local_ip = input(
        "\033[93mEnter \033[92mKharej Server \033[93m IPV4 address: \033[0m"
    )
    remote_ip = input(
        "\033[93mEnter \033[92mIRAN Client \033[96m[2]\033[93m IPV4 address: \033[0m"
    )

    subprocess.run(
        [
            "ip",
            "tunnel",
            "add",
            "azumi2",
            "mode",
            "sit",
            "remote",
            remote_ip,
            "local",
            local_ip,
            "ttl",
            "255",
        ],
        stdout=subprocess.DEVNULL,
    )
    subprocess.run(
        ["ip", "link", "set", "dev", "azumi2", "up"], stdout=subprocess.DEVNULL
    )

    initial_ip = "2002:811b::1/64"
    subprocess.run(
        ["ip", "addr", "add", initial_ip, "dev", "azumi2"], stdout=subprocess.DEVNULL
    )

    subprocess.run(
        ["ip", "-6", "route", "add", "2002:811b::2/64", "dev", "azumi2"],
        stdout=subprocess.DEVNULL,
    )
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[93mAdding commands...\033[0m")
    with open("/etc/private2.sh", "w") as f:
        f.write("/sbin/modprobe sit\n")
        f.write(
            f"ip tunnel add azumi2 mode sit remote {remote_ip} local {local_ip} ttl 255\n"
        )
        f.write("ip link set dev azumi2 up\n")
        f.write("ip addr add 2002:811b::1/64 dev azumi2\n")
        f.write("ip -6 route add 2002:811b::2/64 dev azumi2\n")

    set_mtu = input(
        "\033[93mDo you want to set the \033[92mMTU\033[96m [SIT]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m"
    )
    if set_mtu.lower() == "yes" or set_mtu.lower() == "y":
        mtu_value = input(
            "\033[93mEnter the desired\033[92m MTU value\033[93m: \033[0m"
        )
        mtu_command = f"ip link set dev azumi2 mtu {mtu_value}\n"
        with open("/etc/private2.sh", "a") as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)
    display_checkmark("\033[92mPrivate ip added successfully!\033[0m")

    add_cron2_job()
    ufw("2002:811b::2")
    ufw("2002:811b::1")
    display_checkmark("\033[92mkeepalive service Configured!\033[0m")
    run_ping2()
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    print("\033[93mCreated Private IP Addresses (Kharej):\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")
    print("\033[92m" + " 2002:811b::1    " + "\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")

    script_content1 = """#!/bin/bash


ip_address="2002:811b::2"


max_pings=5


interval=2


while true
do
   
    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{print $2}" | awk -F " " "{print $1}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done

    echo "Waiting for $interval seconds..."
    sleep $interval
done
"""

    with open("/etc/ping_v62.sh", "w") as script_file:
        script_file.write(script_content1)

    os.chmod("/etc/ping_v62.sh", 0o755)
    ping_v62_service()

    print("\033[92mKharej Server Configuration Completed!\033[0m")

def add_cron3_job():
    file_path = "/etc/private3.sh"

    try:

        subprocess.run(
            f"(crontab -l | grep -v '{file_path}') | crontab -",
            shell=True,
            capture_output=True,
            text=True,
        )

        subprocess.run(
            f"(crontab -l ; echo '@reboot /bin/bash {file_path}') | crontab -",
            shell=True,
            capture_output=True,
            text=True,
        )

        display_checkmark("\033[92mCronjob added successfully!\033[0m")
    except subprocess.CalledProcessError as e:
        print("\033[91mFailed to add cronjob:\033[0m", e)

def run_ping3():
    try:
        print("\033[96mPlease Wait, Azumi is pinging...")
        subprocess.run(["ping", "-c", "2", "2002:821b::2"], check=True)
    except subprocess.CalledProcessError as e:
        print(Fore.LIGHTRED_EX + "Pinging failed:", e, Style.RESET_ALL)


def ping_v63_service():
    service_content = """[Unit]
Description=keepalive
After=network.target

[Service]
ExecStart=/bin/bash /etc/ping_v63.sh
Restart=always

[Install]
WantedBy=multi-user.target
"""

    service_file_path = "/etc/systemd/system/ping_v63.service"
    with open(service_file_path, "w") as service_file:
        service_file.write(service_content)

    subprocess.run(["systemctl", "daemon-reload"])
    subprocess.run(["systemctl", "enable", "ping_v63.service"])
    subprocess.run(["systemctl", "start", "ping_v63.service"])
    sleep(1)
    subprocess.run(["systemctl", "restart", "ping_v63.service"])

def kharejserver3_wireguardsit_menu():
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification(
        "\033[93mConfiguring \033[97mSIT\033[93m Kharej server\033[96m Config \033[92m[3]\033[0m"
    )

    if os.path.isfile("/etc/private3.sh"):
        os.remove("/etc/private3.sh")

    print("\033[93m─────────────────────────────────────────────────────────╮\033[0m")
    local_ip = input(
        "\033[93mEnter \033[92mKharej Server \033[93m IPV4 address: \033[0m"
    )
    remote_ip = input(
        "\033[93mEnter \033[92mIRAN Client \033[96m[3]\033[93m IPV4 address: \033[0m"
    )

    subprocess.run(
        [
            "ip",
            "tunnel",
            "add",
            "azumi3",
            "mode",
            "sit",
            "remote",
            remote_ip,
            "local",
            local_ip,
            "ttl",
            "255",
        ],
        stdout=subprocess.DEVNULL,
    )
    subprocess.run(
        ["ip", "link", "set", "dev", "azumi3", "up"], stdout=subprocess.DEVNULL
    )

    initial_ip = "2002:821b::1/64"
    subprocess.run(
        ["ip", "addr", "add", initial_ip, "dev", "azumi3"], stdout=subprocess.DEVNULL
    )

    subprocess.run(
        ["ip", "-6", "route", "add", "2002:821b::2/64", "dev", "azumi3"],
        stdout=subprocess.DEVNULL,
    )
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[93mAdding commands...\033[0m")
    with open("/etc/private3.sh", "w") as f:
        f.write("/sbin/modprobe sit\n")
        f.write(
            f"ip tunnel add azumi3 mode sit remote {remote_ip} local {local_ip} ttl 255\n"
        )
        f.write("ip link set dev azumi3 up\n")
        f.write("ip addr add 2002:821b::1/64 dev azumi3\n")
        f.write("ip -6 route add 2002:821b::2/64 dev azumi3\n")

    set_mtu = input(
        "\033[93mDo you want to set the \033[92mMTU\033[96m [SIT]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m"
    )
    if set_mtu.lower() == "yes" or set_mtu.lower() == "y":
        mtu_value = input(
            "\033[93mEnter the desired\033[92m MTU value\033[93m: \033[0m"
        )
        mtu_command = f"ip link set dev azumi3 mtu {mtu_value}\n"
        with open("/etc/private3.sh", "a") as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)
    display_checkmark("\033[92mPrivate ip added successfully!\033[0m")

    add_cron3_job()
    ufw("2002:821b::2")
    ufw("2002:821b::1")
    display_checkmark("\033[92mkeepalive service Configured!\033[0m")
    run_ping3()
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    print("\033[93mCreated Private IP Addresses (Kharej):\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")
    print("\033[92m" + " 2002:821b::1    " + "\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")

    script_content1 = """#!/bin/bash


ip_address="2002:821b::2"


max_pings=5


interval=2


while true
do
   
    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{print $2}" | awk -F " " "{print $1}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done

    echo "Waiting for $interval seconds..."
    sleep $interval
done
"""

    with open("/etc/ping_v63.sh", "w") as script_file:
        script_file.write(script_content1)

    os.chmod("/etc/ping_v63.sh", 0o755)
    ping_v63_service()

    print("\033[92mKharej Server Configuration Completed!\033[0m")


def add_cron4_job():
    file_path = "/etc/private4.sh"

    try:

        subprocess.run(
            f"(crontab -l | grep -v '{file_path}') | crontab -",
            shell=True,
            capture_output=True,
            text=True,
        )

        subprocess.run(
            f"(crontab -l ; echo '@reboot /bin/bash {file_path}') | crontab -",
            shell=True,
            capture_output=True,
            text=True,
        )

        display_checkmark("\033[92mCronjob added successfully!\033[0m")
    except subprocess.CalledProcessError as e:
        print("\033[91mFailed to add cronjob:\033[0m", e)

def run_ping4():
    try:
        print("\033[96mPlease Wait, Azumi is pinging...")
        subprocess.run(["ping", "-c", "2", "2002:831b::2"], check=True)
    except subprocess.CalledProcessError as e:
        print(Fore.LIGHTRED_EX + "Pinging failed:", e, Style.RESET_ALL)

def ping_v64_service():
    service_content = """[Unit]
Description=keepalive
After=network.target

[Service]
ExecStart=/bin/bash /etc/ping_v64.sh
Restart=always

[Install]
WantedBy=multi-user.target
"""

    service_file_path = "/etc/systemd/system/ping_v64.service"
    with open(service_file_path, "w") as service_file:
        service_file.write(service_content)

    subprocess.run(["systemctl", "daemon-reload"])
    subprocess.run(["systemctl", "enable", "ping_v64.service"])
    subprocess.run(["systemctl", "start", "ping_v64.service"])
    sleep(1)
    subprocess.run(["systemctl", "restart", "ping_v64.service"])

def kharejserver4_wireguardsit_menu():
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification(
        "\033[93mConfiguring \033[97mSIT\033[93m Kharej server\033[96m Config \033[92m[4]\033[0m"
    )

    if os.path.isfile("/etc/private4.sh"):
        os.remove("/etc/private4.sh")

    print("\033[93m─────────────────────────────────────────────────────────╮\033[0m")
    local_ip = input(
        "\033[93mEnter \033[92mKharej Server \033[93m IPV4 address: \033[0m"
    )
    remote_ip = input(
        "\033[93mEnter \033[92mIRAN Client \033[96m[4]\033[93m IPV4 address: \033[0m"
    )

    subprocess.run(
        [
            "ip",
            "tunnel",
            "add",
            "azumi4",
            "mode",
            "sit",
            "remote",
            remote_ip,
            "local",
            local_ip,
            "ttl",
            "255",
        ],
        stdout=subprocess.DEVNULL,
    )
    subprocess.run(
        ["ip", "link", "set", "dev", "azumi4", "up"], stdout=subprocess.DEVNULL
    )

    initial_ip = "2002:831b::1/64"
    subprocess.run(
        ["ip", "addr", "add", initial_ip, "dev", "azumi4"], stdout=subprocess.DEVNULL
    )

    subprocess.run(
        ["ip", "-6", "route", "add", "2002:831b::2/64", "dev", "azumi4"],
        stdout=subprocess.DEVNULL,
    )
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[93mAdding commands...\033[0m")
    with open("/etc/private4.sh", "w") as f:
        f.write("/sbin/modprobe sit\n")
        f.write(
            f"ip tunnel add azumi4 mode sit remote {remote_ip} local {local_ip} ttl 255\n"
        )
        f.write("ip link set dev azumi4 up\n")
        f.write("ip addr add 2002:831b::1/64 dev azumi4\n")
        f.write("ip -6 route add 2002:831b::2/64 dev azumi4\n")

    set_mtu = input(
        "\033[93mDo you want to set the \033[92mMTU\033[96m [SIT]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m"
    )
    if set_mtu.lower() == "yes" or set_mtu.lower() == "y":
        mtu_value = input(
            "\033[93mEnter the desired\033[92m MTU value\033[93m: \033[0m"
        )
        mtu_command = f"ip link set dev azumi4 mtu {mtu_value}\n"
        with open("/etc/private4.sh", "a") as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)
    display_checkmark("\033[92mPrivate ip added successfully!\033[0m")

    add_cron4_job()
    ufw("2002:831b::2")
    ufw("2002:831b::1")
    display_checkmark("\033[92mkeepalive service Configured!\033[0m")
    run_ping4()
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    print("\033[93mCreated Private IP Addresses (Kharej):\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")
    print("\033[92m" + " 2002:831b::1    " + "\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")

    script_content1 = """#!/bin/bash


ip_address="2002:831b::2"


max_pings=5


interval=2


while true
do
   
    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{print $2}" | awk -F " " "{print $1}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done

    echo "Waiting for $interval seconds..."
    sleep $interval
done
"""

    with open("/etc/ping_v64.sh", "w") as script_file:
        script_file.write(script_content1)

    os.chmod("/etc/ping_v64.sh", 0o755)
    ping_v64_service()

    print("\033[92mKharej Server Configuration Completed!\033[0m")

def add_cron5_job():
    file_path = "/etc/private5.sh"

    try:

        subprocess.run(
            f"(crontab -l | grep -v '{file_path}') | crontab -",
            shell=True,
            capture_output=True,
            text=True,
        )

        subprocess.run(
            f"(crontab -l ; echo '@reboot /bin/bash {file_path}') | crontab -",
            shell=True,
            capture_output=True,
            text=True,
        )

        display_checkmark("\033[92mCronjob added successfully!\033[0m")
    except subprocess.CalledProcessError as e:
        print("\033[91mFailed to add cronjob:\033[0m", e)

def run_ping5():
    try:
        print("\033[96mPlease Wait, Azumi is pinging...")
        subprocess.run(["ping", "-c", "2", "2002:841b::2"], check=True)
    except subprocess.CalledProcessError as e:
        print(Fore.LIGHTRED_EX + "Pinging failed:", e, Style.RESET_ALL)

def ping_v65_service():
    service_content = """[Unit]
Description=keepalive
After=network.target

[Service]
ExecStart=/bin/bash /etc/ping_v65.sh
Restart=always

[Install]
WantedBy=multi-user.target
"""

    service_file_path = "/etc/systemd/system/ping_v65.service"
    with open(service_file_path, "w") as service_file:
        service_file.write(service_content)

    subprocess.run(["systemctl", "daemon-reload"])
    subprocess.run(["systemctl", "enable", "ping_v65.service"])
    subprocess.run(["systemctl", "start", "ping_v65.service"])
    sleep(1)
    subprocess.run(["systemctl", "restart", "ping_v65.service"])

def kharejserver5_wireguardsit_menu():
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification(
        "\033[93mConfiguring \033[97mSIT\033[93m Kharej server\033[96m Config \033[92m[5]\033[0m"
    )

    if os.path.isfile("/etc/private5.sh"):
        os.remove("/etc/private5.sh")

    print("\033[93m─────────────────────────────────────────────────────────╮\033[0m")
    local_ip = input(
        "\033[93mEnter \033[92mKharej Server \033[93m IPV4 address: \033[0m"
    )
    remote_ip = input(
        "\033[93mEnter \033[92mIRAN Client \033[96m[5]\033[93m IPV4 address: \033[0m"
    )

    subprocess.run(
        [
            "ip",
            "tunnel",
            "add",
            "azumi5",
            "mode",
            "sit",
            "remote",
            remote_ip,
            "local",
            local_ip,
            "ttl",
            "255",
        ],
        stdout=subprocess.DEVNULL,
    )
    subprocess.run(
        ["ip", "link", "set", "dev", "azumi5", "up"], stdout=subprocess.DEVNULL
    )

    initial_ip = "2002:841b::1/64"
    subprocess.run(
        ["ip", "addr", "add", initial_ip, "dev", "azumi5"], stdout=subprocess.DEVNULL
    )

    subprocess.run(
        ["ip", "-6", "route", "add", "2002:841b::2/64", "dev", "azumi5"],
        stdout=subprocess.DEVNULL,
    )
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[93mAdding commands...\033[0m")
    with open("/etc/private5.sh", "w") as f:
        f.write("/sbin/modprobe sit\n")
        f.write(
            f"ip tunnel add azumi5 mode sit remote {remote_ip} local {local_ip} ttl 255\n"
        )
        f.write("ip link set dev azumi5 up\n")
        f.write("ip addr add 2002:841b::1/64 dev azumi5\n")
        f.write("ip -6 route add 2002:841b::2/64 dev azumi5\n")

    set_mtu = input(
        "\033[93mDo you want to set the \033[92mMTU\033[96m [SIT]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m"
    )
    if set_mtu.lower() == "yes" or set_mtu.lower() == "y":
        mtu_value = input(
            "\033[93mEnter the desired\033[92m MTU value\033[93m: \033[0m"
        )
        mtu_command = f"ip link set dev azumi5 mtu {mtu_value}\n"
        with open("/etc/private5.sh", "a") as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)
    display_checkmark("\033[92mPrivate ip added successfully!\033[0m")

    add_cron5_job()
    ufw("2002:841b::2")
    ufw("2002:841b::1")
    display_checkmark("\033[92mkeepalive service Configured!\033[0m")
    run_ping5()
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    print("\033[93mCreated Private IP Addresses (Kharej):\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")
    print("\033[92m" + " 2002:841b::1    " + "\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")

    script_content1 = """#!/bin/bash


ip_address="2002:841b::2"


max_pings=5


interval=2


while true
do
   
    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{print $2}" | awk -F " " "{print $1}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done

    echo "Waiting for $interval seconds..."
    sleep $interval
done
"""

    with open("/etc/ping_v65.sh", "w") as script_file:
        script_file.write(script_content1)

    os.chmod("/etc/ping_v65.sh", 0o755)
    ping_v65_service()

    print("\033[92mKharej Server Configuration Completed!\033[0m")


# iran client 1 sit
def iranclient1_wireguardsit_menu():
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[93mConfiguring SIT IRAN Client\033[96m[1]\033[0m")

    if os.path.isfile("/etc/private1.sh"):
        os.remove("/etc/private1.sh")

    print("\033[93m─────────────────────────────────────────────────────────╮\033[0m")
    local_ip = input(
        "\033[93mEnter \033[92mIRAN Client \033[96m[1]\033[93m IPV4 address: \033[0m"
    )
    remote_ip = input(
        "\033[93mEnter \033[92mKharej Server\033[93m IPV4 address: \033[0m"
    )

    subprocess.run(
        [
            "ip",
            "tunnel",
            "add",
            "azumi1",
            "mode",
            "sit",
            "remote",
            remote_ip,
            "local",
            local_ip,
            "ttl",
            "255",
        ],
        stdout=subprocess.DEVNULL,
    )
    subprocess.run(
        ["ip", "link", "set", "dev", "azumi1", "up"], stdout=subprocess.DEVNULL
    )

    initial_ip = "2002:801b::2/64"
    subprocess.run(
        ["ip", "addr", "add", initial_ip, "dev", "azumi1"], stdout=subprocess.DEVNULL
    )

    subprocess.run(
        ["ip", "-6", "route", "add", "2002:801b::1/64", "dev", "azumi1"],
        stdout=subprocess.DEVNULL,
    )
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[93mAdding commands...\033[0m")
    with open("/etc/private1.sh", "w") as f:
        f.write("/sbin/modprobe sit\n")
        f.write(
            f"ip tunnel add azumi1 mode sit remote {remote_ip} local {local_ip} ttl 255\n"
        )
        f.write("ip link set dev azumi1 up\n")
        f.write("ip addr add 2002:801b::2/64 dev azumi1\n")
        f.write("ip -6 route add 2002:801b::1/64 dev azumi1\n")

    set_mtu = input(
        "\033[93mDo you want to set the \033[92mMTU\033[96m [SIT]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m"
    )
    if set_mtu.lower() == "yes" or set_mtu.lower() == "y":
        mtu_value = input(
            "\033[93mEnter the desired\033[92m MTU value\033[93m: \033[0m"
        )
        mtu_command = f"ip link set dev azumi1 mtu {mtu_value}\n"
        with open("/etc/private1.sh", "a") as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_checkmark("\033[92mPrivate ip added successfully!\033[0m")

    add_cron1_job()
    display_checkmark("\033[92mkeepalive service Configured!\033[0m")

    run_ping1_iran()
    ufw("2002:801b::2")
    ufw("2002:801b::1")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    print("\033[93mCreated Private IP Addresses (IRAN):\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")
    print("\033[92m" + " 2002:801b::2    " + "\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")

    script_content = """#!/bin/bash


ip_address="2002:801b::1"


max_pings=5


interval=2


while true
do

    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{print $2}" | awk -F " " "{print $1}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done

    echo "Waiting for $interval seconds..."
    sleep $interval
done
"""

    with open("/etc/ping_v61.sh", "w") as script_file:
        script_file.write(script_content)

    os.chmod("/etc/ping_v61.sh", 0o755)
    ping_v61_service()


def iranclient2_wireguardsit_menu():
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[93mConfiguring SIT IRAN Client\033[96m[2]\033[0m")

    if os.path.isfile("/etc/private2.sh"):
        os.remove("/etc/private2.sh")

    print("\033[93m─────────────────────────────────────────────────────────╮\033[0m")
    local_ip = input(
        "\033[93mEnter \033[92mIRAN Client \033[96m[2]\033[93m IPV4 address: \033[0m"
    )
    remote_ip = input(
        "\033[93mEnter \033[92mKharej Server\033[93m IPV4 address: \033[0m"
    )

    subprocess.run(
        [
            "ip",
            "tunnel",
            "add",
            "azumi2",
            "mode",
            "sit",
            "remote",
            remote_ip,
            "local",
            local_ip,
            "ttl",
            "255",
        ],
        stdout=subprocess.DEVNULL,
    )
    subprocess.run(
        ["ip", "link", "set", "dev", "azumi2", "up"], stdout=subprocess.DEVNULL
    )

    initial_ip = "2002:811b::2/64"
    subprocess.run(
        ["ip", "addr", "add", initial_ip, "dev", "azumi2"], stdout=subprocess.DEVNULL
    )

    subprocess.run(
        ["ip", "-6", "route", "add", "2002:811b::1/64", "dev", "azumi2"],
        stdout=subprocess.DEVNULL,
    )
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[93mAdding commands...\033[0m")
    with open("/etc/private2.sh", "w") as f:
        f.write("/sbin/modprobe sit\n")
        f.write(
            f"ip tunnel add azumi2 mode sit remote {remote_ip} local {local_ip} ttl 255\n"
        )
        f.write("ip link set dev azumi2 up\n")
        f.write("ip addr add 2002:811b::2/64 dev azumi2\n")
        f.write("ip -6 route add 2002:811b::1/64 dev azumi2\n")

    set_mtu = input(
        "\033[93mDo you want to set the \033[92mMTU\033[96m [SIT]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m"
    )
    if set_mtu.lower() == "yes" or set_mtu.lower() == "y":
        mtu_value = input(
            "\033[93mEnter the desired\033[92m MTU value\033[93m: \033[0m"
        )
        mtu_command = f"ip link set dev azumi2 mtu {mtu_value}\n"
        with open("/etc/private2.sh", "a") as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_checkmark("\033[92mPrivate ip added successfully!\033[0m")

    add_cron2_job()
    display_checkmark("\033[92mkeepalive service Configured!\033[0m")

    run_ping2_iran()
    ufw("2002:811b::2")
    ufw("2002:811b::1")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    print("\033[93mCreated Private IP Addresses (IRAN):\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")
    print("\033[92m" + " 2002:811b::2    " + "\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")

    script_content = """#!/bin/bash


ip_address="2002:811b::1"


max_pings=5


interval=2


while true
do

    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{print $2}" | awk -F " " "{print $1}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done

    echo "Waiting for $interval seconds..."
    sleep $interval
done
"""

    with open("/etc/ping_v62.sh", "w") as script_file:
        script_file.write(script_content)

    os.chmod("/etc/ping_v62.sh", 0o755)
    ping_v62_service()

def run_ping3_iran():
    try:
        print("\033[96mPlease Wait, Azumi is pinging...")
        subprocess.run(["ping", "-c", "2", "2002:821b::1"], check=True)
    except subprocess.CalledProcessError as e:
        print(Fore.LIGHTRED_EX + "Pinging failed:", e, Style.RESET_ALL)

def run_ping4_iran():
    try:
        print("\033[96mPlease Wait, Azumi is pinging...")
        subprocess.run(["ping", "-c", "2", "2002:831b::1"], check=True)
    except subprocess.CalledProcessError as e:
        print(Fore.LIGHTRED_EX + "Pinging failed:", e, Style.RESET_ALL)

def run_ping5_iran():
    try:
        print("\033[96mPlease Wait, Azumi is pinging...")
        subprocess.run(["ping", "-c", "2", "2002:841b::1"], check=True)
    except subprocess.CalledProcessError as e:
        print(Fore.LIGHTRED_EX + "Pinging failed:", e, Style.RESET_ALL)


def iranclient3_wireguardsit_menu():
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[93mConfiguring SIT IRAN Client\033[96m[3]\033[0m")

    if os.path.isfile("/etc/private3.sh"):
        os.remove("/etc/private3.sh")

    print("\033[93m─────────────────────────────────────────────────────────╮\033[0m")
    local_ip = input(
        "\033[93mEnter \033[92mIRAN Client \033[96m[3]\033[93m IPV4 address: \033[0m"
    )
    remote_ip = input(
        "\033[93mEnter \033[92mKharej Server\033[93m IPV4 address: \033[0m"
    )

    subprocess.run(
        [
            "ip",
            "tunnel",
            "add",
            "azumi3",
            "mode",
            "sit",
            "remote",
            remote_ip,
            "local",
            local_ip,
            "ttl",
            "255",
        ],
        stdout=subprocess.DEVNULL,
    )
    subprocess.run(
        ["ip", "link", "set", "dev", "azumi3", "up"], stdout=subprocess.DEVNULL
    )

    initial_ip = "2002:821b::2/64"
    subprocess.run(
        ["ip", "addr", "add", initial_ip, "dev", "azumi3"], stdout=subprocess.DEVNULL
    )

    subprocess.run(
        ["ip", "-6", "route", "add", "2002:821b::1/64", "dev", "azumi3"],
        stdout=subprocess.DEVNULL,
    )
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[93mAdding commands...\033[0m")
    with open("/etc/private3.sh", "w") as f:
        f.write("/sbin/modprobe sit\n")
        f.write(
            f"ip tunnel add azumi3 mode sit remote {remote_ip} local {local_ip} ttl 255\n"
        )
        f.write("ip link set dev azumi3 up\n")
        f.write("ip addr add 2002:821b::2/64 dev azumi3\n")
        f.write("ip -6 route add 2002:821b::1/64 dev azumi3\n")

    set_mtu = input(
        "\033[93mDo you want to set the \033[92mMTU\033[96m [SIT]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m"
    )
    if set_mtu.lower() == "yes" or set_mtu.lower() == "y":
        mtu_value = input(
            "\033[93mEnter the desired\033[92m MTU value\033[93m: \033[0m"
        )
        mtu_command = f"ip link set dev azumi3 mtu {mtu_value}\n"
        with open("/etc/private3.sh", "a") as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_checkmark("\033[92mPrivate ip added successfully!\033[0m")

    add_cron3_job()
    display_checkmark("\033[92mkeepalive service Configured!\033[0m")

    run_ping3_iran()
    ufw("2002:821b::2")
    ufw("2002:821b::1")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    print("\033[93mCreated Private IP Addresses (IRAN):\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")
    print("\033[92m" + " 2002:821b::2    " + "\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")

    script_content = """#!/bin/bash


ip_address="2002:821b::1"


max_pings=5


interval=2


while true
do

    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{print $2}" | awk -F " " "{print $1}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done

    echo "Waiting for $interval seconds..."
    sleep $interval
done
"""

    with open("/etc/ping_v63.sh", "w") as script_file:
        script_file.write(script_content)

    os.chmod("/etc/ping_v63.sh", 0o755)
    ping_v63_service()


def iranclient4_wireguardsit_menu():

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[93mConfiguring SIT IRAN Client\033[96m[4]\033[0m")

    if os.path.isfile("/etc/private4.sh"):
        os.remove("/etc/private4.sh")

    print("\033[93m─────────────────────────────────────────────────────────╮\033[0m")
    local_ip = input(
        "\033[93mEnter \033[92mIRAN Client \033[96m[4]\033[93m IPV4 address: \033[0m"
    )
    remote_ip = input(
        "\033[93mEnter \033[92mKharej Server\033[93m IPV4 address: \033[0m"
    )

    subprocess.run(
        [
            "ip",
            "tunnel",
            "add",
            "azumi4",
            "mode",
            "sit",
            "remote",
            remote_ip,
            "local",
            local_ip,
            "ttl",
            "255",
        ],
        stdout=subprocess.DEVNULL,
    )
    subprocess.run(
        ["ip", "link", "set", "dev", "azumi4", "up"], stdout=subprocess.DEVNULL
    )

    initial_ip = "2002:831b::2/64"
    subprocess.run(
        ["ip", "addr", "add", initial_ip, "dev", "azumi4"], stdout=subprocess.DEVNULL
    )

    subprocess.run(
        ["ip", "-6", "route", "add", "2002:831b::1/64", "dev", "azumi4"],
        stdout=subprocess.DEVNULL,
    )
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[93mAdding commands...\033[0m")
    with open("/etc/private4.sh", "w") as f:
        f.write("/sbin/modprobe sit\n")
        f.write(
            f"ip tunnel add azumi4 mode sit remote {remote_ip} local {local_ip} ttl 255\n"
        )
        f.write("ip link set dev azumi4 up\n")
        f.write("ip addr add 2002:831b::2/64 dev azumi4\n")
        f.write("ip -6 route add 2002:831b::1/64 dev azumi4\n")

    set_mtu = input(
        "\033[93mDo you want to set the \033[92mMTU\033[96m [SIT]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m"
    )
    if set_mtu.lower() == "yes" or set_mtu.lower() == "y":
        mtu_value = input(
            "\033[93mEnter the desired\033[92m MTU value\033[93m: \033[0m"
        )
        mtu_command = f"ip link set dev azumi4 mtu {mtu_value}\n"
        with open("/etc/private4.sh", "a") as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_checkmark("\033[92mPrivate ip added successfully!\033[0m")

    add_cron4_job()
    display_checkmark("\033[92mkeepalive service Configured!\033[0m")

    run_ping4_iran()
    ufw("2002:831b::2")
    ufw("2002:831b::1")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    print("\033[93mCreated Private IP Addresses (IRAN):\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")
    print("\033[92m" + " 2002:831b::2    " + "\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")

    script_content = """#!/bin/bash


ip_address="2002:831b::1"


max_pings=5


interval=2


while true
do

    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{print $2}" | awk -F " " "{print $1}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done

    echo "Waiting for $interval seconds..."
    sleep $interval
done
"""

    with open("/etc/ping_v64.sh", "w") as script_file:
        script_file.write(script_content)

    os.chmod("/etc/ping_v64.sh", 0o755)
    ping_v64_service()


def iranclient5_wireguardsit_menu():

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[93mConfiguring SIT IRAN Client\033[96m[5]\033[0m")

    if os.path.isfile("/etc/private5.sh"):
        os.remove("/etc/private5.sh")

    print("\033[93m─────────────────────────────────────────────────────────╮\033[0m")
    local_ip = input(
        "\033[93mEnter \033[92mIRAN Client \033[96m[5]\033[93m IPV4 address: \033[0m"
    )
    remote_ip = input(
        "\033[93mEnter \033[92mKharej Server\033[93m IPV4 address: \033[0m"
    )

    subprocess.run(
        [
            "ip",
            "tunnel",
            "add",
            "azumi5",
            "mode",
            "sit",
            "remote",
            remote_ip,
            "local",
            local_ip,
            "ttl",
            "255",
        ],
        stdout=subprocess.DEVNULL,
    )
    subprocess.run(
        ["ip", "link", "set", "dev", "azumi5", "up"], stdout=subprocess.DEVNULL
    )

    initial_ip = "2002:841b::2/64"
    subprocess.run(
        ["ip", "addr", "add", initial_ip, "dev", "azumi5"], stdout=subprocess.DEVNULL
    )

    subprocess.run(
        ["ip", "-6", "route", "add", "2002:841b::1/64", "dev", "azumi5"],
        stdout=subprocess.DEVNULL,
    )
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[93mAdding commands...\033[0m")
    with open("/etc/private5.sh", "w") as f:
        f.write("/sbin/modprobe sit\n")
        f.write(
            f"ip tunnel add azumi5 mode sit remote {remote_ip} local {local_ip} ttl 255\n"
        )
        f.write("ip link set dev azumi5 up\n")
        f.write("ip addr add 2002:841b::2/64 dev azumi5\n")
        f.write("ip -6 route add 2002:841b::1/64 dev azumi5\n")

    set_mtu = input(
        "\033[93mDo you want to set the \033[92mMTU\033[96m [SIT]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m"
    )
    if set_mtu.lower() == "yes" or set_mtu.lower() == "y":
        mtu_value = input(
            "\033[93mEnter the desired\033[92m MTU value\033[93m: \033[0m"
        )
        mtu_command = f"ip link set dev azumi5 mtu {mtu_value}\n"
        with open("/etc/private5.sh", "a") as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_checkmark("\033[92mPrivate ip added successfully!\033[0m")

    add_cron5_job()
    display_checkmark("\033[92mkeepalive service Configured!\033[0m")

    run_ping5_iran()
    ufw("2002:841b::2")
    ufw("2002:841b::1")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    print("\033[93mCreated Private IP Addresses (IRAN):\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")
    print("\033[92m" + " 2002:841b::2    " + "\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")

    script_content = """#!/bin/bash


ip_address="2002:841b::1"


max_pings=5


interval=2


while true
do

    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{print $2}" | awk -F " " "{print $1}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done

    echo "Waiting for $interval seconds..."
    sleep $interval
done
"""

    with open("/etc/ping_v65.sh", "w") as script_file:
        script_file.write(script_content)

    os.chmod("/etc/ping_v65.sh", 0o755)
    ping_v65_service()


# opposite
def wireguard_sit_1iran_5kharej():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print(
        "\033[92m(   ) \033[93mWireguard + SIT \033[92m[1]IRAN Server\033[96m [5]Kharej Client\033[93mMenu\033[0m"
    )
    print(
        '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
    )
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[92mKharej Client [1] Config\033[0m")
    print("2. \033[92mKharej Client [2] Config\033[0m")
    print("3. \033[92mKharej Client [3] Config\033[0m")
    print("4. \033[93mKharej Client [4] Config\033[0m")
    print("5. \033[92mKharej Client [5] Config\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    print("6. \033[96mIRAN Server Config\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    print("0.\033[97mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")
    while True:
        server_type = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if server_type == "1":
            wireguardsit_kharej_client1()
            break
        elif server_type == "2":
            wireguardsit_kharej_client2()
            break
        elif server_type == "3":
            wireguardsit_kharej_client3()
            break
        elif server_type == "4":
            wireguardsit_kharej_client4()
            break
        elif server_type == "5":
            wireguardsit_kharej_client5()
            break
        elif server_type == "6":
            wireguardsit_iran_server()
            break
        elif server_type == "0":
            os.system("clear")
            wireguardsit_menu()
            break
        else:
            print("Invalid choice.")


def wireguardsit_iran_server():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print("\033[92m(   ) \033[93mWireguard + SIT \033[92mIRAN Server\033[0m")
    print('\033[92m "-"\033[93m═════════════════════════════════════════\033[0m')
    check_wireguard_installed()
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    num_clients = int(
        input("\033[93mEnter the number of \033[92mIRAN\033[93m Clients: \033[0m")
    )

    for i in range(1, num_clients + 1):
        menu_name = f"iranserver{i}_wireguardsit_menu"
        if menu_name in globals():
            globals()[menu_name]()
        else:
            print(f"Function {menu_name} does not exist.")

    server_ips = []
    client_ips = []
    ip_versions = set()

    for i in range(1, num_clients + 1):
        server_ip, client_ip, ip_version = servernclient_sit2(i)
        server_ips.append(server_ip)
        client_ips.append(client_ip)
        ip_versions.add(ip_version)
        create_wireguardping_server(client_ip, i)
        wireguardping_server_service(i)
        ufw(server_ip)
        ufw(client_ip)
    print(f"\033[93m───────────────────────────────────────\033[0m")
    ipsec_choice = (
        input(
            "\033[93mDo you want to configure IPsec? (\033[92myes\033[93m or \033[91mno): \033[0m"
        )
        .strip()
        .lower()
    )

    if ipsec_choice in ["yes", "y"]:
        psk = input("\033[93mEnter IPSEC \033[92mSecret Key\033[93m: \033[0m")
        ip_ver = ip_versions.pop()
        config_server(psk, server_ips, client_ips, ip_ver)


def wireguardsit_kharej_client1():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print("\033[92m(   ) \033[93mWireguard + SIT \033[92mKharej Client [1]\033[0m")
    print('\033[92m "-"\033[93m═════════════════════════════════════════\033[0m')
    kharejclient1_wireguardsit_menu()
    check_wireguard_installed()
    print("\033[93m───────────────────────────────────────\033[0m")
    display_notification("\033[93mConfiguring WireGuard Client\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    server_public_key = user_input(
        "\033[93mEnter \033[92mIRAN Server\033[93m's config \033[96m[1] \033[96mpublic key:\033[0m "
    )
    client_private_key = user_input(
        "\033[93mEnter \033[92mKharej Client\033[96m [1]\033[93m private key:\033[0m "
    )
    client_port = user_input(
        "\033[93mEnter \033[92mConfig \033[96m[1]\033[93m Tunnel port:\033[0m "
    )

    client_ip, client_subnet, ip_version = ipversion_n_address(
        "\033[93mKharej Client \033[92m[1]\033[0m"
    )
    server_private_ip, server_subnet = ipversion_n_address(
        "\033[93mIRAN Server Config \033[92m[1]\033[0m"
    )[:2]
    ufwportudp(client_port)
    ufw(client_ip)
    ufw(server_private_ip)
    print("\033[93m───────────────────────────────────────\033[0m")
    find_interface = input(
        "\033[93mDo you want meh to find the \033[92mmain interface\033[96m automatically\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m"
    )
    if find_interface.lower() == "yes" or find_interface.lower() == "y":
        interface = main_interface()
        if interface is None:
            print("\033[91merror: Couldn't find your network interface.\033[0m")
            return
    else:
        interface = input(
            "\033[93mWhat is your \033[92mmain interface\033[93m? \033[0m"
        )
    print("\033[93m───────────────────────────────────────\033[0m")
    mtu_config = ""
    mtu_choice = input(
        f"\033[93mDo you want to set \033[92mWireguard MTU\033[93m for \033[92mClient\033[96m [1] \033[93m(\033[92myes\033[93m/\033[91mno\033[93m): \033[0m"
    ).lower()
    if mtu_choice in ["yes", "y"]:
        mtu_value = input(
            f"\033[93mEnter MTU value for \033[92mClient\033[96m [1] \033[93m: \033[0m"
        )
        mtu_config = f"MTU = {mtu_value}\n"

    client_config = f"""
[Interface]
PrivateKey = {client_private_key}
Address = {client_ip}/{client_subnet}
ListenPort = {client_port}
{mtu_config}
PostUp = iptables -I INPUT -p udp --dport {client_port} -j ACCEPT
PostUp = iptables -I FORWARD -i {interface} -o wireclient -j ACCEPT
PostUp = iptables -I FORWARD -i wireclient -j ACCEPT
PostUp = iptables -t nat -A POSTROUTING -o {interface} -j MASQUERADE
PostUp = ip6tables -I FORWARD -i wireclient -j ACCEPT
PostUp = ip6tables -t nat -A POSTROUTING -o {interface} -j MASQUERADE
PostDown = iptables -D INPUT -p udp --dport {client_port} -j ACCEPT
PostDown = iptables -D FORWARD -i {interface} -o wireclient -j ACCEPT
PostDown = iptables -D FORWARD -i wireclient -j ACCEPT
PostDown = iptables -t nat -D POSTROUTING -o {interface} -j MASQUERADE
PostDown = ip6tables -D FORWARD -i wireclient -j ACCEPT
PostDown = ip6tables -t nat -D POSTROUTING -o {interface} -j MASQUERADE

[Peer]
PublicKey = {server_public_key}
AllowedIPs = {server_private_ip}/{server_subnet}
Endpoint = 2002:801b::1:{client_port}
"""

    client_config_path = "/etc/wireguard/wireclient.conf"
    write_config(client_config_path, client_config)
    wgclient()
    create_wireguardping_client(server_private_ip)
    wireguardping_client_service()
    print("\033[93m───────────────────────────────────────\033[0m")
    display_checkmark(
        f"\033[92mClient configuration saved to \033[97m{client_config_path}\033[0m"
    )
    print(f"\033[93m───────────────────────────────────────\033[0m")
    ipsec_choice = (
        input(
            "\033[93mDo you want to configure IPsec? (\033[92myes\033[93m or \033[91mno): \033[0m"
        )
        .strip()
        .lower()
    )

    if ipsec_choice in ["yes", "y"]:
        psk = input("\033[93mEnter IPSEC \033[92mSecret Key\033[93m: \033[0m")
        config_client(psk, [server_private_ip], [client_ip], ip_version)


def wireguardsit_kharej_client2():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print("\033[92m(   ) \033[93mWireguard + SIT \033[92mKharej Client [2]\033[0m")
    print('\033[92m "-"\033[93m═════════════════════════════════════════\033[0m')
    kharejclient2_wireguardsit_menu()
    check_wireguard_installed()
    print("\033[93m───────────────────────────────────────\033[0m")
    display_notification("\033[93mConfiguring WireGuard Client\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    server_public_key = user_input(
        "\033[93mEnter \033[92mIRAN Server\033[93m's config \033[96m[2] \033[96mpublic key:\033[0m "
    )
    client_private_key = user_input(
        "\033[93mEnter \033[92mKharej Client\033[96m [2]\033[93m private key:\033[0m "
    )
    client_port = user_input(
        "\033[93mEnter \033[92mConfig \033[96m[2]\033[93m Tunnel port:\033[0m "
    )

    client_ip, client_subnet, ip_version = ipversion_n_address2(
        "\033[93mKharej Client \033[92m[2]\033[0m"
    )
    server_private_ip, server_subnet = ipversion_n_address2(
        "\033[93mIRAN Server Config \033[92m[2]\033[0m"
    )[:2]
    ufwportudp(client_port)
    ufw(client_ip)
    ufw(server_private_ip)
    print("\033[93m───────────────────────────────────────\033[0m")
    find_interface = input(
        "\033[93mDo you want meh to find the \033[92mmain interface\033[96m automatically\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m"
    )
    if find_interface.lower() == "yes" or find_interface.lower() == "y":
        interface = main_interface()
        if interface is None:
            print("\033[91merror: Couldn't find your network interface.\033[0m")
            return
    else:
        interface = input(
            "\033[93mWhat is your \033[92mmain interface\033[93m? \033[0m"
        )
    print("\033[93m───────────────────────────────────────\033[0m")
    mtu_config = ""
    mtu_choice = input(
        f"\033[93mDo you want to set \033[92mWireguard MTU\033[93m for \033[92mClient\033[96m [2] \033[93m(\033[92myes\033[93m/\033[91mno\033[93m): \033[0m"
    ).lower()
    if mtu_choice in ["yes", "y"]:
        mtu_value = input(
            f"\033[93mEnter MTU value for \033[92mClient\033[96m [2] \033[93m: \033[0m"
        )
        mtu_config = f"MTU = {mtu_value}\n"

    client_config = f"""
[Interface]
PrivateKey = {client_private_key}
Address = {client_ip}/{client_subnet}
ListenPort = {client_port}
{mtu_config}
PostUp = iptables -I INPUT -p udp --dport {client_port} -j ACCEPT
PostUp = iptables -I FORWARD -i {interface} -o wireclient -j ACCEPT
PostUp = iptables -I FORWARD -i wireclient -j ACCEPT
PostUp = iptables -t nat -A POSTROUTING -o {interface} -j MASQUERADE
PostUp = ip6tables -I FORWARD -i wireclient -j ACCEPT
PostUp = ip6tables -t nat -A POSTROUTING -o {interface} -j MASQUERADE
PostDown = iptables -D INPUT -p udp --dport {client_port} -j ACCEPT
PostDown = iptables -D FORWARD -i {interface} -o wireclient -j ACCEPT
PostDown = iptables -D FORWARD -i wireclient -j ACCEPT
PostDown = iptables -t nat -D POSTROUTING -o {interface} -j MASQUERADE
PostDown = ip6tables -D FORWARD -i wireclient -j ACCEPT
PostDown = ip6tables -t nat -D POSTROUTING -o {interface} -j MASQUERADE

[Peer]
PublicKey = {server_public_key}
AllowedIPs = {server_private_ip}/{server_subnet}
Endpoint = 2002:811b::1:{client_port}
"""

    client_config_path = "/etc/wireguard/wireclient.conf"
    write_config(client_config_path, client_config)
    wgclient()
    create_wireguardping_client(server_private_ip)
    wireguardping_client_service()
    print("\033[93m───────────────────────────────────────\033[0m")
    display_checkmark(
        f"\033[92mClient configuration saved to \033[97m{client_config_path}\033[0m"
    )
    print(f"\033[93m───────────────────────────────────────\033[0m")
    ipsec_choice = (
        input(
            "\033[93mDo you want to configure IPsec? (\033[92myes\033[93m or \033[91mno): \033[0m"
        )
        .strip()
        .lower()
    )

    if ipsec_choice in ["yes", "y"]:
        psk = input("\033[93mEnter IPSEC \033[92mSecret Key\033[93m: \033[0m")
        config_client(psk, [server_private_ip], [client_ip], ip_version)


def wireguardsit_kharej_client3():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print("\033[92m(   ) \033[93mWireguard + SIT \033[92mKharej Client [3]\033[0m")
    print('\033[92m "-"\033[93m═════════════════════════════════════════\033[0m')
    kharejclient3_wireguardsit_menu()
    check_wireguard_installed()
    print("\033[93m───────────────────────────────────────\033[0m")
    display_notification("\033[93mConfiguring WireGuard Client\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    server_public_key = user_input(
        "\033[93mEnter \033[92mIRAN Server\033[93m's config \033[96m[3] \033[96mpublic key:\033[0m "
    )
    client_private_key = user_input(
        "\033[93mEnter \033[92mKharej Client\033[96m [3]\033[93m private key:\033[0m "
    )
    client_port = user_input(
        "\033[93mEnter \033[92mConfig \033[96m[3]\033[93m Tunnel port:\033[0m "
    )

    client_ip, client_subnet, ip_version = ipversion_n_address3(
        "\033[93mKharej Client \033[92m[3]\033[0m"
    )
    server_private_ip, server_subnet = ipversion_n_address3(
        "\033[93mIRAN Server Config \033[92m[3]\033[0m"
    )[:2]
    ufwportudp(client_port)
    ufw(client_ip)
    ufw(server_private_ip)
    print("\033[93m───────────────────────────────────────\033[0m")
    find_interface = input(
        "\033[93mDo you want meh to find the \033[92mmain interface\033[96m automatically\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m"
    )
    if find_interface.lower() == "yes" or find_interface.lower() == "y":
        interface = main_interface()
        if interface is None:
            print("\033[91merror: Couldn't find your network interface.\033[0m")
            return
    else:
        interface = input(
            "\033[93mWhat is your \033[92mmain interface\033[93m? \033[0m"
        )
    print("\033[93m───────────────────────────────────────\033[0m")
    mtu_config = ""
    mtu_choice = input(
        f"\033[93mDo you want to set \033[92mWireguard MTU\033[93m for \033[92mClient\033[96m [3] \033[93m(\033[92myes\033[93m/\033[91mno\033[93m): \033[0m"
    ).lower()
    if mtu_choice in ["yes", "y"]:
        mtu_value = input(
            f"\033[93mEnter MTU value for \033[92mClient\033[96m [3] \033[93m: \033[0m"
        )
        mtu_config = f"MTU = {mtu_value}\n"

    client_config = f"""
[Interface]
PrivateKey = {client_private_key}
Address = {client_ip}/{client_subnet}
ListenPort = {client_port}
{mtu_config}
PostUp = iptables -I INPUT -p udp --dport {client_port} -j ACCEPT
PostUp = iptables -I FORWARD -i {interface} -o wireclient -j ACCEPT
PostUp = iptables -I FORWARD -i wireclient -j ACCEPT
PostUp = iptables -t nat -A POSTROUTING -o {interface} -j MASQUERADE
PostUp = ip6tables -I FORWARD -i wireclient -j ACCEPT
PostUp = ip6tables -t nat -A POSTROUTING -o {interface} -j MASQUERADE
PostDown = iptables -D INPUT -p udp --dport {client_port} -j ACCEPT
PostDown = iptables -D FORWARD -i {interface} -o wireclient -j ACCEPT
PostDown = iptables -D FORWARD -i wireclient -j ACCEPT
PostDown = iptables -t nat -D POSTROUTING -o {interface} -j MASQUERADE
PostDown = ip6tables -D FORWARD -i wireclient -j ACCEPT
PostDown = ip6tables -t nat -D POSTROUTING -o {interface} -j MASQUERADE

[Peer]
PublicKey = {server_public_key}
AllowedIPs = {server_private_ip}/{server_subnet}
Endpoint = 2002:821b::1:{client_port}
"""

    client_config_path = "/etc/wireguard/wireclient.conf"
    write_config(client_config_path, client_config)
    wgclient()
    create_wireguardping_client(server_private_ip)
    wireguardping_client_service()
    print("\033[93m───────────────────────────────────────\033[0m")
    display_checkmark(
        f"\033[92mClient configuration saved to \033[97m{client_config_path}\033[0m"
    )
    print(f"\033[93m───────────────────────────────────────\033[0m")
    ipsec_choice = (
        input(
            "\033[93mDo you want to configure IPsec? (\033[92myes\033[93m or \033[91mno): \033[0m"
        )
        .strip()
        .lower()
    )

    if ipsec_choice in ["yes", "y"]:
        psk = input("\033[93mEnter IPSEC \033[92mSecret Key\033[93m: \033[0m")
        config_client(psk, [server_private_ip], [client_ip], ip_version)


def wireguardsit_kharej_client4():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print("\033[92m(   ) \033[93mWireguard \033[92mKharej Client [4]\033[0m")
    print('\033[92m "-"\033[93m═════════════════════════════════════════\033[0m')
    kharejclient4_wireguardsit_menu()
    check_wireguard_installed()
    print("\033[93m───────────────────────────────────────\033[0m")
    display_notification("\033[93mConfiguring WireGuard Client\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    server_public_key = user_input(
        "\033[93mEnter \033[92mIRAN Server\033[93m's config \033[96m[4] \033[96mpublic key:\033[0m "
    )
    client_private_key = user_input(
        "\033[93mEnter \033[92mKharej Client\033[96m [4]\033[93m private key:\033[0m "
    )
    client_port = user_input(
        "\033[93mEnter \033[92mConfig \033[96m[4]\033[93m Tunnel port:\033[0m "
    )

    client_ip, client_subnet, ip_version = ipversion_n_address4(
        "\033[93mKharej Client \033[92m[4]\033[0m"
    )
    server_private_ip, server_subnet = ipversion_n_address4(
        "\033[93mIRAN Server Config \033[92m[4]\033[0m"
    )[:2]
    ufwportudp(client_port)
    ufw(client_ip)
    ufw(server_private_ip)
    print("\033[93m───────────────────────────────────────\033[0m")
    find_interface = input(
        "\033[93mDo you want meh to find the \033[92mmain interface\033[96m automatically\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m"
    )
    if find_interface.lower() == "yes" or find_interface.lower() == "y":
        interface = main_interface()
        if interface is None:
            print("\033[91merror: Couldn't find your network interface.\033[0m")
            return
    else:
        interface = input(
            "\033[93mWhat is your \033[92mmain interface\033[93m? \033[0m"
        )
    print("\033[93m───────────────────────────────────────\033[0m")
    mtu_config = ""
    mtu_choice = input(
        f"\033[93mDo you want to set \033[92mWireguard MTU\033[93m for \033[92mClient\033[96m [4] \033[93m(\033[92myes\033[93m/\033[91mno\033[93m): \033[0m"
    ).lower()
    if mtu_choice in ["yes", "y"]:
        mtu_value = input(
            f"\033[93mEnter MTU value for \033[92mClient\033[96m [4] \033[93m: \033[0m"
        )
        mtu_config = f"MTU = {mtu_value}\n"

    client_config = f"""
[Interface]
PrivateKey = {client_private_key}
Address = {client_ip}/{client_subnet}
ListenPort = {client_port}
{mtu_config}
PostUp = iptables -I INPUT -p udp --dport {client_port} -j ACCEPT
PostUp = iptables -I FORWARD -i {interface} -o wireclient -j ACCEPT
PostUp = iptables -I FORWARD -i wireclient -j ACCEPT
PostUp = iptables -t nat -A POSTROUTING -o {interface} -j MASQUERADE
PostUp = ip6tables -I FORWARD -i wireclient -j ACCEPT
PostUp = ip6tables -t nat -A POSTROUTING -o {interface} -j MASQUERADE
PostDown = iptables -D INPUT -p udp --dport {client_port} -j ACCEPT
PostDown = iptables -D FORWARD -i {interface} -o wireclient -j ACCEPT
PostDown = iptables -D FORWARD -i wireclient -j ACCEPT
PostDown = iptables -t nat -D POSTROUTING -o {interface} -j MASQUERADE
PostDown = ip6tables -D FORWARD -i wireclient -j ACCEPT
PostDown = ip6tables -t nat -D POSTROUTING -o {interface} -j MASQUERADE

[Peer]
PublicKey = {server_public_key}
AllowedIPs = {server_private_ip}/{server_subnet}
Endpoint = 2002:831b::1:{client_port}
"""

    client_config_path = "/etc/wireguard/wireclient.conf"
    write_config(client_config_path, client_config)
    wgclient()
    create_wireguardping_client(server_private_ip)
    wireguardping_client_service()
    print("\033[93m───────────────────────────────────────\033[0m")
    display_checkmark(
        f"\033[92mClient configuration saved to \033[97m{client_config_path}\033[0m"
    )

    print("\033[93m───────────────────────────────────────\033[0m")
    ipsec_choice = (
        input(
            "\033[93mDo you want to configure IPsec? (\033[92myes\033[93m or \033[91mno): \033[0m"
        )
        .strip()
        .lower()
    )

    if ipsec_choice in ["yes", "y"]:
        psk = input("\033[93mEnter IPSEC \033[92mSecret Key\033[93m: \033[0m")
        config_client(psk, [server_private_ip], [client_ip], ip_version)


def wireguardsit_kharej_client5():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print("\033[92m(   ) \033[93mWireguard \033[92mKharej Client [5]\033[0m")
    print('\033[92m "-"\033[93m═════════════════════════════════════════\033[0m')
    kharejclient5_wireguardsit_menu()
    check_wireguard_installed()
    print("\033[93m───────────────────────────────────────\033[0m")
    display_notification("\033[93mConfiguring WireGuard Client\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    server_public_key = user_input(
        "\033[93mEnter \033[92mIRAN Server\033[93m's config \033[96m[5] \033[96mpublic key:\033[0m "
    )
    client_private_key = user_input(
        "\033[93mEnter \033[92mKharej Client\033[96m [5]\033[93m private key:\033[0m "
    )
    client_port = user_input(
        "\033[93mEnter \033[92mConfig \033[96m[5]\033[93m Tunnel port:\033[0m "
    )

    client_ip, client_subnet, ip_version = ipversion_n_address5(
        "\033[93mKharej Client \033[92m[5]\033[0m"
    )
    server_private_ip, server_subnet = ipversion_n_address5(
        "\033[93mIRAN Server Config \033[92m[5]\033[0m"
    )[:2]
    ufwportudp(client_port)
    ufw(client_ip)
    ufw(server_private_ip)
    print("\033[93m───────────────────────────────────────\033[0m")
    find_interface = input(
        "\033[93mDo you want meh to find the \033[92mmain interface\033[96m automatically\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m"
    )
    if find_interface.lower() == "yes" or find_interface.lower() == "y":
        interface = main_interface()
        if interface is None:
            print("\033[91merror: Couldn't find your network interface.\033[0m")
            return
    else:
        interface = input(
            "\033[93mWhat is your \033[92mmain interface\033[93m? \033[0m"
        )
    print("\033[93m───────────────────────────────────────\033[0m")
    mtu_config = ""
    mtu_choice = input(
        f"\033[93mDo you want to set \033[92mWireguard MTU\033[93m for \033[92mClient\033[96m [5] \033[93m(\033[92myes\033[93m/\033[91mno\033[93m): \033[0m"
    ).lower()
    if mtu_choice in ["yes", "y"]:
        mtu_value = input(
            f"\033[93mEnter MTU value for \033[92mClient\033[96m [5] \033[93m: \033[0m"
        )
        mtu_config = f"MTU = {mtu_value}\n"

    client_config = f"""
[Interface]
PrivateKey = {client_private_key}
Address = {client_ip}/{client_subnet}
ListenPort = {client_port}
{mtu_config}
PostUp = iptables -I INPUT -p udp --dport {client_port} -j ACCEPT
PostUp = iptables -I FORWARD -i {interface} -o wireclient -j ACCEPT
PostUp = iptables -I FORWARD -i wireclient -j ACCEPT
PostUp = iptables -t nat -A POSTROUTING -o {interface} -j MASQUERADE
PostUp = ip6tables -I FORWARD -i wireclient -j ACCEPT
PostUp = ip6tables -t nat -A POSTROUTING -o {interface} -j MASQUERADE
PostDown = iptables -D INPUT -p udp --dport {client_port} -j ACCEPT
PostDown = iptables -D FORWARD -i {interface} -o wireclient -j ACCEPT
PostDown = iptables -D FORWARD -i wireclient -j ACCEPT
PostDown = iptables -t nat -D POSTROUTING -o {interface} -j MASQUERADE
PostDown = ip6tables -D FORWARD -i wireclient -j ACCEPT
PostDown = ip6tables -t nat -D POSTROUTING -o {interface} -j MASQUERADE

[Peer]
PublicKey = {server_public_key}
AllowedIPs = {server_private_ip}/{server_subnet}
Endpoint = 2002:841b::1:{client_port}
"""

    client_config_path = "/etc/wireguard/wireclient.conf"
    write_config(client_config_path, client_config)
    wgclient()
    create_wireguardping_client(server_private_ip)
    wireguardping_client_service()
    print("\033[93m───────────────────────────────────────\033[0m")
    display_checkmark(
        f"\033[92mClient configuration saved to \033[97m{client_config_path}\033[0m"
    )
    print("\033[93m───────────────────────────────────────\033[0m")
    ipsec_choice = (
        input(
            "\033[93mDo you want to configure IPsec? (\033[92myes\033[93m or \033[91mno): \033[0m"
        )
        .strip()
        .lower()
    )

    if ipsec_choice in ["yes", "y"]:
        psk = input("\033[93mEnter IPSEC \033[92mSecret Key\033[93m: \033[0m")
        config_client(psk, [server_private_ip], [client_ip], ip_version)


def iranserver1_wireguardsit_menu():
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification(
        "\033[93mConfiguring \033[97mSIT\033[93m IRAN server\033[96m Config \033[92m[1]\033[0m"
    )

    if os.path.isfile("/etc/private1.sh"):
        os.remove("/etc/private1.sh")

    print("\033[93m─────────────────────────────────────────────────────────╮\033[0m")
    local_ip = input("\033[93mEnter \033[92mIRAN Server \033[93m IPV4 address: \033[0m")
    remote_ip = input(
        "\033[93mEnter \033[92mKharej Client \033[96m[1]\033[93m IPV4 address: \033[0m"
    )

    subprocess.run(
        [
            "ip",
            "tunnel",
            "add",
            "azumi1",
            "mode",
            "sit",
            "remote",
            remote_ip,
            "local",
            local_ip,
            "ttl",
            "255",
        ],
        stdout=subprocess.DEVNULL,
    )
    subprocess.run(
        ["ip", "link", "set", "dev", "azumi1", "up"], stdout=subprocess.DEVNULL
    )

    initial_ip = "2002:801b::1/64"
    subprocess.run(
        ["ip", "addr", "add", initial_ip, "dev", "azumi1"], stdout=subprocess.DEVNULL
    )

    subprocess.run(
        ["ip", "-6", "route", "add", "2002:801b::2/64", "dev", "azumi1"],
        stdout=subprocess.DEVNULL,
    )
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[93mAdding commands...\033[0m")
    with open("/etc/private1.sh", "w") as f:
        f.write("/sbin/modprobe sit\n")
        f.write(
            f"ip tunnel add azumi1 mode sit remote {remote_ip} local {local_ip} ttl 255\n"
        )
        f.write("ip link set dev azumi1 up\n")
        f.write("ip addr add 2002:801b::1/64 dev azumi1\n")
        f.write("ip -6 route add 2002:801b::2/64 dev azumi1\n")

    set_mtu = input(
        "\033[93mDo you want to set the \033[92mMTU\033[96m [SIT]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m"
    )
    if set_mtu.lower() == "yes" or set_mtu.lower() == "y":
        mtu_value = input(
            "\033[93mEnter the desired\033[92m MTU value\033[93m: \033[0m"
        )
        mtu_command = f"ip link set dev azumi1 mtu {mtu_value}\n"
        with open("/etc/private1.sh", "a") as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)
    display_checkmark("\033[92mPrivate ip added successfully!\033[0m")

    add_cron1_job()

    display_checkmark("\033[92mkeepalive service Configured!\033[0m")
    run_ping1()
    ufw("2002:801b::2")
    ufw("2002:801b::1")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    print("\033[93mCreated Private IP Addresses (IRAN):\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")
    print("\033[92m" + " 2002:801b::1    " + "\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")

    script_content1 = """#!/bin/bash


ip_address="2002:801b::2"


max_pings=5


interval=2


while true
do
   
    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{print $2}" | awk -F " " "{print $1}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done

    echo "Waiting for $interval seconds..."
    sleep $interval
done
"""

    with open("/etc/ping_v61.sh", "w") as script_file:
        script_file.write(script_content1)

    os.chmod("/etc/ping_v61.sh", 0o755)
    ping_v61_service()

    print("\033[92mIRAN Server Configuration Completed!\033[0m")


def iranserver2_wireguardsit_menu():
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification(
        "\033[93mConfiguring \033[97mSIT\033[93m IRAN server\033[96m Config \033[92m[2]\033[0m"
    )

    if os.path.isfile("/etc/private2.sh"):
        os.remove("/etc/private2.sh")

    print("\033[93m─────────────────────────────────────────────────────────╮\033[0m")
    local_ip = input("\033[93mEnter \033[92mIRAN Server \033[93m IPV4 address: \033[0m")
    remote_ip = input(
        "\033[93mEnter \033[92mKharej Client \033[96m[2]\033[93m IPV4 address: \033[0m"
    )

    subprocess.run(
        [
            "ip",
            "tunnel",
            "add",
            "azumi2",
            "mode",
            "sit",
            "remote",
            remote_ip,
            "local",
            local_ip,
            "ttl",
            "255",
        ],
        stdout=subprocess.DEVNULL,
    )
    subprocess.run(
        ["ip", "link", "set", "dev", "azumi2", "up"], stdout=subprocess.DEVNULL
    )

    initial_ip = "2002:811b::1/64"
    subprocess.run(
        ["ip", "addr", "add", initial_ip, "dev", "azumi2"], stdout=subprocess.DEVNULL
    )

    subprocess.run(
        ["ip", "-6", "route", "add", "2002:811b::2/64", "dev", "azumi2"],
        stdout=subprocess.DEVNULL,
    )
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[93mAdding commands...\033[0m")
    with open("/etc/private2.sh", "w") as f:
        f.write("/sbin/modprobe sit\n")
        f.write(
            f"ip tunnel add azumi2 mode sit remote {remote_ip} local {local_ip} ttl 255\n"
        )
        f.write("ip link set dev azumi2 up\n")
        f.write("ip addr add 2002:811b::1/64 dev azumi2\n")
        f.write("ip -6 route add 2002:811b::2/64 dev azumi2\n")

    set_mtu = input(
        "\033[93mDo you want to set the \033[92mMTU\033[96m [SIT]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m"
    )
    if set_mtu.lower() == "yes" or set_mtu.lower() == "y":
        mtu_value = input(
            "\033[93mEnter the desired\033[92m MTU value\033[93m: \033[0m"
        )
        mtu_command = f"ip link set dev azumi2 mtu {mtu_value}\n"
        with open("/etc/private2.sh", "a") as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)
    display_checkmark("\033[92mPrivate ip added successfully!\033[0m")

    add_cron2_job()
    ufw("2002:811b::2")
    ufw("2002:811b::1")
    display_checkmark("\033[92mkeepalive service Configured!\033[0m")
    run_ping2()
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    print("\033[93mCreated Private IP Addresses (IRAN):\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")
    print("\033[92m" + " 2002:811b::1    " + "\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")

    script_content1 = """#!/bin/bash


ip_address="2002:811b::2"


max_pings=5


interval=2


while true
do
   
    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{print $2}" | awk -F " " "{print $1}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done

    echo "Waiting for $interval seconds..."
    sleep $interval
done
"""

    with open("/etc/ping_v62.sh", "w") as script_file:
        script_file.write(script_content1)

    os.chmod("/etc/ping_v62.sh", 0o755)
    ping_v62_service()

    print("\033[92mIRAN Server Configuration Completed!\033[0m")


def iranserver3_wireguardsit_menu():
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification(
        "\033[93mConfiguring \033[97mSIT\033[93m IRAN server\033[96m Config \033[92m[3]\033[0m"
    )

    if os.path.isfile("/etc/private3.sh"):
        os.remove("/etc/private3.sh")

    print("\033[93m─────────────────────────────────────────────────────────╮\033[0m")
    local_ip = input("\033[93mEnter \033[92mIRAN Server \033[93m IPV4 address: \033[0m")
    remote_ip = input(
        "\033[93mEnter \033[92mKharej Client \033[96m[3]\033[93m IPV4 address: \033[0m"
    )

    subprocess.run(
        [
            "ip",
            "tunnel",
            "add",
            "azumi3",
            "mode",
            "sit",
            "remote",
            remote_ip,
            "local",
            local_ip,
            "ttl",
            "255",
        ],
        stdout=subprocess.DEVNULL,
    )
    subprocess.run(
        ["ip", "link", "set", "dev", "azumi3", "up"], stdout=subprocess.DEVNULL
    )

    initial_ip = "2002:821b::1/64"
    subprocess.run(
        ["ip", "addr", "add", initial_ip, "dev", "azumi3"], stdout=subprocess.DEVNULL
    )

    subprocess.run(
        ["ip", "-6", "route", "add", "2002:821b::2/64", "dev", "azumi3"],
        stdout=subprocess.DEVNULL,
    )
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[93mAdding commands...\033[0m")
    with open("/etc/private3.sh", "w") as f:
        f.write("/sbin/modprobe sit\n")
        f.write(
            f"ip tunnel add azumi3 mode sit remote {remote_ip} local {local_ip} ttl 255\n"
        )
        f.write("ip link set dev azumi3 up\n")
        f.write("ip addr add 2002:821b::1/64 dev azumi3\n")
        f.write("ip -6 route add 2002:821b::2/64 dev azumi3\n")

    set_mtu = input(
        "\033[93mDo you want to set the \033[92mMTU\033[96m [SIT]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m"
    )
    if set_mtu.lower() == "yes" or set_mtu.lower() == "y":
        mtu_value = input(
            "\033[93mEnter the desired\033[92m MTU value\033[93m: \033[0m"
        )
        mtu_command = f"ip link set dev azumi3 mtu {mtu_value}\n"
        with open("/etc/private3.sh", "a") as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)
    display_checkmark("\033[92mPrivate ip added successfully!\033[0m")

    add_cron3_job()
    ufw("2002:821b::2")
    ufw("2002:821b::1")
    display_checkmark("\033[92mkeepalive service Configured!\033[0m")
    run_ping3()
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    print("\033[93mCreated Private IP Addresses (IRAN):\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")
    print("\033[92m" + " 2002:821b::1    " + "\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")

    script_content1 = """#!/bin/bash


ip_address="2002:821b::2"


max_pings=5


interval=2


while true
do
   
    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{print $2}" | awk -F " " "{print $1}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done

    echo "Waiting for $interval seconds..."
    sleep $interval
done
"""

    with open("/etc/ping_v63.sh", "w") as script_file:
        script_file.write(script_content1)

    os.chmod("/etc/ping_v63.sh", 0o755)
    ping_v63_service()

    print("\033[92mIRAN Server Configuration Completed!\033[0m")


def iranserver4_wireguardsit_menu():
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification(
        "\033[93mConfiguring \033[97mSIT\033[93m IRAN server\033[96m Config \033[92m[4]\033[0m"
    )

    if os.path.isfile("/etc/private4.sh"):
        os.remove("/etc/private4.sh")

    print("\033[93m─────────────────────────────────────────────────────────╮\033[0m")
    local_ip = input("\033[93mEnter \033[92mIRAN Server \033[93m IPV4 address: \033[0m")
    remote_ip = input(
        "\033[93mEnter \033[92mKharej Client \033[96m[4]\033[93m IPV4 address: \033[0m"
    )

    subprocess.run(
        [
            "ip",
            "tunnel",
            "add",
            "azumi4",
            "mode",
            "sit",
            "remote",
            remote_ip,
            "local",
            local_ip,
            "ttl",
            "255",
        ],
        stdout=subprocess.DEVNULL,
    )
    subprocess.run(
        ["ip", "link", "set", "dev", "azumi4", "up"], stdout=subprocess.DEVNULL
    )

    initial_ip = "2002:831b::1/64"
    subprocess.run(
        ["ip", "addr", "add", initial_ip, "dev", "azumi4"], stdout=subprocess.DEVNULL
    )

    subprocess.run(
        ["ip", "-6", "route", "add", "2002:831b::2/64", "dev", "azumi4"],
        stdout=subprocess.DEVNULL,
    )
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[93mAdding commands...\033[0m")
    with open("/etc/private4.sh", "w") as f:
        f.write("/sbin/modprobe sit\n")
        f.write(
            f"ip tunnel add azumi4 mode sit remote {remote_ip} local {local_ip} ttl 255\n"
        )
        f.write("ip link set dev azumi4 up\n")
        f.write("ip addr add 2002:831b::1/64 dev azumi4\n")
        f.write("ip -6 route add 2002:831b::2/64 dev azumi4\n")

    set_mtu = input(
        "\033[93mDo you want to set the \033[92mMTU\033[96m [SIT]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m"
    )
    if set_mtu.lower() == "yes" or set_mtu.lower() == "y":
        mtu_value = input(
            "\033[93mEnter the desired\033[92m MTU value\033[93m: \033[0m"
        )
        mtu_command = f"ip link set dev azumi4 mtu {mtu_value}\n"
        with open("/etc/private4.sh", "a") as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)
    display_checkmark("\033[92mPrivate ip added successfully!\033[0m")

    add_cron4_job()
    ufw("2002:831b::2")
    ufw("2002:831b::1")
    display_checkmark("\033[92mkeepalive service Configured!\033[0m")
    run_ping4()
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    print("\033[93mCreated Private IP Addresses (IRAN):\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")
    print("\033[92m" + " 2002:831b::1    " + "\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")

    script_content1 = """#!/bin/bash


ip_address="2002:831b::2"


max_pings=5


interval=2


while true
do
   
    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{print $2}" | awk -F " " "{print $1}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done

    echo "Waiting for $interval seconds..."
    sleep $interval
done
"""

    with open("/etc/ping_v64.sh", "w") as script_file:
        script_file.write(script_content1)

    os.chmod("/etc/ping_v64.sh", 0o755)
    ping_v64_service()

    print("\033[92mIRAN Server Configuration Completed!\033[0m")


def iranserver5_wireguardsit_menu():
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification(
        "\033[93mConfiguring \033[97mSIT\033[93m IRAN server\033[96m Config \033[92m[5]\033[0m"
    )

    if os.path.isfile("/etc/private5.sh"):
        os.remove("/etc/private5.sh")

    print("\033[93m─────────────────────────────────────────────────────────╮\033[0m")
    local_ip = input("\033[93mEnter \033[92mIRAN Server \033[93m IPV4 address: \033[0m")
    remote_ip = input(
        "\033[93mEnter \033[92mKharej Client \033[96m[5]\033[93m IPV4 address: \033[0m"
    )

    subprocess.run(
        [
            "ip",
            "tunnel",
            "add",
            "azumi5",
            "mode",
            "sit",
            "remote",
            remote_ip,
            "local",
            local_ip,
            "ttl",
            "255",
        ],
        stdout=subprocess.DEVNULL,
    )
    subprocess.run(
        ["ip", "link", "set", "dev", "azumi5", "up"], stdout=subprocess.DEVNULL
    )

    initial_ip = "2002:841b::1/64"
    subprocess.run(
        ["ip", "addr", "add", initial_ip, "dev", "azumi5"], stdout=subprocess.DEVNULL
    )

    subprocess.run(
        ["ip", "-6", "route", "add", "2002:841b::2/64", "dev", "azumi5"],
        stdout=subprocess.DEVNULL,
    )
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[93mAdding commands...\033[0m")
    with open("/etc/private5.sh", "w") as f:
        f.write("/sbin/modprobe sit\n")
        f.write(
            f"ip tunnel add azumi5 mode sit remote {remote_ip} local {local_ip} ttl 255\n"
        )
        f.write("ip link set dev azumi5 up\n")
        f.write("ip addr add 2002:841b::1/64 dev azumi5\n")
        f.write("ip -6 route add 2002:841b::2/64 dev azumi5\n")

    set_mtu = input(
        "\033[93mDo you want to set the \033[92mMTU\033[96m [SIT]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m"
    )
    if set_mtu.lower() == "yes" or set_mtu.lower() == "y":
        mtu_value = input(
            "\033[93mEnter the desired\033[92m MTU value\033[93m: \033[0m"
        )
        mtu_command = f"ip link set dev azumi5 mtu {mtu_value}\n"
        with open("/etc/private5.sh", "a") as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)
    display_checkmark("\033[92mPrivate ip added successfully!\033[0m")

    add_cron5_job()
    ufw("2002:841b::2")
    ufw("2002:841b::1")
    display_checkmark("\033[92mkeepalive service Configured!\033[0m")
    run_ping5()
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    print("\033[93mCreated Private IP Addresses (IRAN):\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")
    print("\033[92m" + " 2002:841b::1    " + "\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")

    script_content1 = """#!/bin/bash


ip_address="2002:841b::2"


max_pings=5


interval=2


while true
do
   
    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{print $2}" | awk -F " " "{print $1}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done

    echo "Waiting for $interval seconds..."
    sleep $interval
done
"""

    with open("/etc/ping_v65.sh", "w") as script_file:
        script_file.write(script_content1)

    os.chmod("/etc/ping_v65.sh", 0o755)
    ping_v65_service()

    print("\033[92mIRAN Server Configuration Completed!\033[0m")


# kharej client 1 sit
def kharejclient1_wireguardsit_menu():
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[93mConfiguring SIT Kharej Client\033[96m[1]\033[0m")

    if os.path.isfile("/etc/private1.sh"):
        os.remove("/etc/private1.sh")

    print("\033[93m─────────────────────────────────────────────────────────╮\033[0m")
    local_ip = input(
        "\033[93mEnter \033[92mKharej Client \033[96m[1]\033[93m IPV4 address: \033[0m"
    )
    remote_ip = input("\033[93mEnter \033[92mIRAN Server\033[93m IPV4 address: \033[0m")

    subprocess.run(
        [
            "ip",
            "tunnel",
            "add",
            "azumi1",
            "mode",
            "sit",
            "remote",
            remote_ip,
            "local",
            local_ip,
            "ttl",
            "255",
        ],
        stdout=subprocess.DEVNULL,
    )
    subprocess.run(
        ["ip", "link", "set", "dev", "azumi1", "up"], stdout=subprocess.DEVNULL
    )

    initial_ip = "2002:801b::2/64"
    subprocess.run(
        ["ip", "addr", "add", initial_ip, "dev", "azumi1"], stdout=subprocess.DEVNULL
    )

    subprocess.run(
        ["ip", "-6", "route", "add", "2002:801b::1/64", "dev", "azumi1"],
        stdout=subprocess.DEVNULL,
    )
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[93mAdding commands...\033[0m")
    with open("/etc/private1.sh", "w") as f:
        f.write("/sbin/modprobe sit\n")
        f.write(
            f"ip tunnel add azumi1 mode sit remote {remote_ip} local {local_ip} ttl 255\n"
        )
        f.write("ip link set dev azumi1 up\n")
        f.write("ip addr add 2002:801b::2/64 dev azumi1\n")
        f.write("ip -6 route add 2002:801b::1/64 dev azumi1\n")

    set_mtu = input(
        "\033[93mDo you want to set the \033[92mMTU\033[96m [SIT]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m"
    )
    if set_mtu.lower() == "yes" or set_mtu.lower() == "y":
        mtu_value = input(
            "\033[93mEnter the desired\033[92m MTU value\033[93m: \033[0m"
        )
        mtu_command = f"ip link set dev azumi1 mtu {mtu_value}\n"
        with open("/etc/private1.sh", "a") as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_checkmark("\033[92mPrivate ip added successfully!\033[0m")

    add_cron1_job()
    display_checkmark("\033[92mkeepalive service Configured!\033[0m")

    run_ping1_iran()
    ufw("2002:801b::2")
    ufw("2002:801b::1")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    print("\033[93mCreated Private IP Addresses (Kharej):\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")
    print("\033[92m" + " 2002:801b::2    " + "\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")

    script_content = """#!/bin/bash


ip_address="2002:801b::1"


max_pings=5


interval=2


while true
do

    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{print $2}" | awk -F " " "{print $1}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done

    echo "Waiting for $interval seconds..."
    sleep $interval
done
"""

    with open("/etc/ping_v61.sh", "w") as script_file:
        script_file.write(script_content)

    os.chmod("/etc/ping_v61.sh", 0o755)
    ping_v61_service()


def kharejclient2_wireguardsit_menu():
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[93mConfiguring SIT Kharej Client\033[96m[2]\033[0m")

    if os.path.isfile("/etc/private2.sh"):
        os.remove("/etc/private2.sh")

    print("\033[93m─────────────────────────────────────────────────────────╮\033[0m")
    local_ip = input(
        "\033[93mEnter \033[92mKharej Client \033[96m[2]\033[93m IPV4 address: \033[0m"
    )
    remote_ip = input("\033[93mEnter \033[92mIRAN Server\033[93m IPV4 address: \033[0m")

    subprocess.run(
        [
            "ip",
            "tunnel",
            "add",
            "azumi2",
            "mode",
            "sit",
            "remote",
            remote_ip,
            "local",
            local_ip,
            "ttl",
            "255",
        ],
        stdout=subprocess.DEVNULL,
    )
    subprocess.run(
        ["ip", "link", "set", "dev", "azumi2", "up"], stdout=subprocess.DEVNULL
    )

    initial_ip = "2002:811b::2/64"
    subprocess.run(
        ["ip", "addr", "add", initial_ip, "dev", "azumi2"], stdout=subprocess.DEVNULL
    )

    subprocess.run(
        ["ip", "-6", "route", "add", "2002:811b::1/64", "dev", "azumi2"],
        stdout=subprocess.DEVNULL,
    )
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[93mAdding commands...\033[0m")
    with open("/etc/private2.sh", "w") as f:
        f.write("/sbin/modprobe sit\n")
        f.write(
            f"ip tunnel add azumi2 mode sit remote {remote_ip} local {local_ip} ttl 255\n"
        )
        f.write("ip link set dev azumi2 up\n")
        f.write("ip addr add 2002:811b::2/64 dev azumi2\n")
        f.write("ip -6 route add 2002:811b::1/64 dev azumi2\n")

    set_mtu = input(
        "\033[93mDo you want to set the \033[92mMTU\033[96m [SIT]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m"
    )
    if set_mtu.lower() == "yes" or set_mtu.lower() == "y":
        mtu_value = input(
            "\033[93mEnter the desired\033[92m MTU value\033[93m: \033[0m"
        )
        mtu_command = f"ip link set dev azumi2 mtu {mtu_value}\n"
        with open("/etc/private2.sh", "a") as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_checkmark("\033[92mPrivate ip added successfully!\033[0m")

    add_cron2_job()
    display_checkmark("\033[92mkeepalive service Configured!\033[0m")

    run_ping2_iran()
    ufw("2002:811b::2")
    ufw("2002:811b::1")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    print("\033[93mCreated Private IP Addresses (Kharej):\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")
    print("\033[92m" + " 2002:811b::2    " + "\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")

    script_content = """#!/bin/bash


ip_address="2002:811b::1"


max_pings=5


interval=2


while true
do

    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{print $2}" | awk -F " " "{print $1}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done

    echo "Waiting for $interval seconds..."
    sleep $interval
done
"""

    with open("/etc/ping_v62.sh", "w") as script_file:
        script_file.write(script_content)

    os.chmod("/etc/ping_v62.sh", 0o755)
    ping_v62_service()


def kharejclient3_wireguardsit_menu():
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[93mConfiguring SIT Kharej Client\033[96m[3]\033[0m")

    if os.path.isfile("/etc/private3.sh"):
        os.remove("/etc/private3.sh")

    print("\033[93m─────────────────────────────────────────────────────────╮\033[0m")
    local_ip = input(
        "\033[93mEnter \033[92mKharej Client \033[96m[3]\033[93m IPV4 address: \033[0m"
    )
    remote_ip = input("\033[93mEnter \033[92mIRAN Server\033[93m IPV4 address: \033[0m")

    subprocess.run(
        [
            "ip",
            "tunnel",
            "add",
            "azumi3",
            "mode",
            "sit",
            "remote",
            remote_ip,
            "local",
            local_ip,
            "ttl",
            "255",
        ],
        stdout=subprocess.DEVNULL,
    )
    subprocess.run(
        ["ip", "link", "set", "dev", "azumi3", "up"], stdout=subprocess.DEVNULL
    )

    initial_ip = "2002:821b::2/64"
    subprocess.run(
        ["ip", "addr", "add", initial_ip, "dev", "azumi3"], stdout=subprocess.DEVNULL
    )

    subprocess.run(
        ["ip", "-6", "route", "add", "2002:821b::1/64", "dev", "azumi3"],
        stdout=subprocess.DEVNULL,
    )
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[93mAdding commands...\033[0m")
    with open("/etc/private3.sh", "w") as f:
        f.write("/sbin/modprobe sit\n")
        f.write(
            f"ip tunnel add azumi3 mode sit remote {remote_ip} local {local_ip} ttl 255\n"
        )
        f.write("ip link set dev azumi3 up\n")
        f.write("ip addr add 2002:821b::2/64 dev azumi3\n")
        f.write("ip -6 route add 2002:821b::1/64 dev azumi3\n")

    set_mtu = input(
        "\033[93mDo you want to set the \033[92mMTU\033[96m [SIT]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m"
    )
    if set_mtu.lower() == "yes" or set_mtu.lower() == "y":
        mtu_value = input(
            "\033[93mEnter the desired\033[92m MTU value\033[93m: \033[0m"
        )
        mtu_command = f"ip link set dev azumi3 mtu {mtu_value}\n"
        with open("/etc/private3.sh", "a") as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_checkmark("\033[92mPrivate ip added successfully!\033[0m")

    add_cron3_job()
    display_checkmark("\033[92mkeepalive service Configured!\033[0m")

    run_ping3_iran()
    ufw("2002:821b::2")
    ufw("2002:821b::1")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    print("\033[93mCreated Private IP Addresses (Kharej):\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")
    print("\033[92m" + " 2002:821b::2    " + "\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")

    script_content = """#!/bin/bash


ip_address="2002:821b::1"


max_pings=5


interval=2


while true
do

    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{print $2}" | awk -F " " "{print $1}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done

    echo "Waiting for $interval seconds..."
    sleep $interval
done
"""

    with open("/etc/ping_v63.sh", "w") as script_file:
        script_file.write(script_content)

    os.chmod("/etc/ping_v63.sh", 0o755)
    ping_v63_service()


def kharejclient4_wireguardsit_menu():

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[93mConfiguring SIT Kharej Client\033[96m[4]\033[0m")

    if os.path.isfile("/etc/private4.sh"):
        os.remove("/etc/private4.sh")

    print("\033[93m─────────────────────────────────────────────────────────╮\033[0m")
    local_ip = input(
        "\033[93mEnter \033[92mKharej Client \033[96m[4]\033[93m IPV4 address: \033[0m"
    )
    remote_ip = input("\033[93mEnter \033[92mIRAN Server\033[93m IPV4 address: \033[0m")

    subprocess.run(
        [
            "ip",
            "tunnel",
            "add",
            "azumi4",
            "mode",
            "sit",
            "remote",
            remote_ip,
            "local",
            local_ip,
            "ttl",
            "255",
        ],
        stdout=subprocess.DEVNULL,
    )
    subprocess.run(
        ["ip", "link", "set", "dev", "azumi4", "up"], stdout=subprocess.DEVNULL
    )

    initial_ip = "2002:831b::2/64"
    subprocess.run(
        ["ip", "addr", "add", initial_ip, "dev", "azumi4"], stdout=subprocess.DEVNULL
    )

    subprocess.run(
        ["ip", "-6", "route", "add", "2002:831b::1/64", "dev", "azumi4"],
        stdout=subprocess.DEVNULL,
    )
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[93mAdding commands...\033[0m")
    with open("/etc/private4.sh", "w") as f:
        f.write("/sbin/modprobe sit\n")
        f.write(
            f"ip tunnel add azumi4 mode sit remote {remote_ip} local {local_ip} ttl 255\n"
        )
        f.write("ip link set dev azumi4 up\n")
        f.write("ip addr add 2002:831b::2/64 dev azumi4\n")
        f.write("ip -6 route add 2002:831b::1/64 dev azumi4\n")

    set_mtu = input(
        "\033[93mDo you want to set the \033[92mMTU\033[96m [SIT]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m"
    )
    if set_mtu.lower() == "yes" or set_mtu.lower() == "y":
        mtu_value = input(
            "\033[93mEnter the desired\033[92m MTU value\033[93m: \033[0m"
        )
        mtu_command = f"ip link set dev azumi4 mtu {mtu_value}\n"
        with open("/etc/private4.sh", "a") as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_checkmark("\033[92mPrivate ip added successfully!\033[0m")

    add_cron4_job()
    display_checkmark("\033[92mkeepalive service Configured!\033[0m")

    run_ping4_iran()
    ufw("2002:831b::2")
    ufw("2002:831b::1")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    print("\033[93mCreated Private IP Addresses (Kharej):\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")
    print("\033[92m" + " 2002:831b::2    " + "\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")

    script_content = """#!/bin/bash


ip_address="2002:831b::1"


max_pings=5


interval=2


while true
do

    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{print $2}" | awk -F " " "{print $1}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done

    echo "Waiting for $interval seconds..."
    sleep $interval
done
"""

    with open("/etc/ping_v64.sh", "w") as script_file:
        script_file.write(script_content)

    os.chmod("/etc/ping_v64.sh", 0o755)
    ping_v64_service()


def kharejclient5_wireguardsit_menu():

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[93mConfiguring SIT Kharej Client\033[96m[5]\033[0m")

    if os.path.isfile("/etc/private5.sh"):
        os.remove("/etc/private5.sh")

    print("\033[93m─────────────────────────────────────────────────────────╮\033[0m")
    local_ip = input(
        "\033[93mEnter \033[92mKharej Client \033[96m[5]\033[93m IPV4 address: \033[0m"
    )
    remote_ip = input("\033[93mEnter \033[92mIRAN Server\033[93m IPV4 address: \033[0m")

    subprocess.run(
        [
            "ip",
            "tunnel",
            "add",
            "azumi5",
            "mode",
            "sit",
            "remote",
            remote_ip,
            "local",
            local_ip,
            "ttl",
            "255",
        ],
        stdout=subprocess.DEVNULL,
    )
    subprocess.run(
        ["ip", "link", "set", "dev", "azumi5", "up"], stdout=subprocess.DEVNULL
    )

    initial_ip = "2002:841b::2/64"
    subprocess.run(
        ["ip", "addr", "add", initial_ip, "dev", "azumi5"], stdout=subprocess.DEVNULL
    )

    subprocess.run(
        ["ip", "-6", "route", "add", "2002:841b::1/64", "dev", "azumi5"],
        stdout=subprocess.DEVNULL,
    )
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[93mAdding commands...\033[0m")
    with open("/etc/private5.sh", "w") as f:
        f.write("/sbin/modprobe sit\n")
        f.write(
            f"ip tunnel add azumi5 mode sit remote {remote_ip} local {local_ip} ttl 255\n"
        )
        f.write("ip link set dev azumi5 up\n")
        f.write("ip addr add 2002:841b::2/64 dev azumi5\n")
        f.write("ip -6 route add 2002:841b::1/64 dev azumi5\n")

    set_mtu = input(
        "\033[93mDo you want to set the \033[92mMTU\033[96m [SIT]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m"
    )
    if set_mtu.lower() == "yes" or set_mtu.lower() == "y":
        mtu_value = input(
            "\033[93mEnter the desired\033[92m MTU value\033[93m: \033[0m"
        )
        mtu_command = f"ip link set dev azumi5 mtu {mtu_value}\n"
        with open("/etc/private5.sh", "a") as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_checkmark("\033[92mPrivate ip added successfully!\033[0m")

    add_cron5_job()
    display_checkmark("\033[92mkeepalive service Configured!\033[0m")

    run_ping5_iran()
    ufw("2002:841b::2")
    ufw("2002:841b::1")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    print("\033[93mCreated Private IP Addresses (Kharej):\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")
    print("\033[92m" + " 2002:841b::2    " + "\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")

    script_content = """#!/bin/bash


ip_address="2002:841b::1"


max_pings=5


interval=2


while true
do

    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{print $2}" | awk -F " " "{print $1}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done

    echo "Waiting for $interval seconds..."
    sleep $interval
done
"""

    with open("/etc/ping_v65.sh", "w") as script_file:
        script_file.write(script_content)

    os.chmod("/etc/ping_v65.sh", 0o755)
    ping_v65_service()


def get_default_interface():
    try:
        output = subprocess.check_output(["ip", "route", "show", "default"]).decode()
        lines = output.strip().split("\n")
        for line in lines:
            if "default via" in line:
                parts = line.split()
                interface = parts[4]
                return interface
    except subprocess.CalledProcessError:
        pass
    return None


def has_ipv4_address(interface):
    addresses = netifaces.ifaddresses(interface)
    return netifaces.AF_INET in addresses


def main_interface():
    default_interface = get_default_interface()
    if default_interface and has_ipv4_address(default_interface):
        return default_interface

    return None


def ask_interface():
    find_interface = input(
        "\033[93mDo you want meh to find the \033[92mmain interface\033[96m automatically\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m"
    )
    if find_interface.lower() == "yes" or find_interface.lower() == "y":
        interface = main_interface()
        if interface is None:
            print("\033[91merror: Couldn't find your network interface.\033[0m")
            return
    else:
        interface = input(
            "\033[93mWhat is your \033[92mmain interface\033[93m? \033[0m"
        )


def wireguardudp_menu():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print("\033[92m(   ) \033[93mWireguard + IPSEC \033[93mMenu\033[0m")
    print(
        '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
    )
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[92mWireguard - [1]Kharej Server [5]IRAN Clients\033[0m")
    print("2. \033[93mWireguard - [1]IRAN   Server [5]Kharej Clients\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    print("0.\033[97mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")
    while True:
        server_type = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if server_type == "1":
            wireguard_noconjuction_kharej1_5iran()
            break
        elif server_type == "2":
            wireguard_noconjuction_1iran_5kharej()
            break
        elif server_type == "0":
            os.system("clear")
            wireguard_allinone_mnu()
            break
        else:
            print("Invalid choice.")


def display_checkmark(message):
    print("\u2714 " + message)


def check_wireguard_installed():
    try:
        subprocess.check_output(["dpkg", "-s", "wireguard"])
        print("\033[92mWireGuard is already installed\033[0m")
    except subprocess.CalledProcessError:
        print("\033[93mWireGuard is not installed. \033[92mInstalling now...\033[0m")
        install_wireguard()


def update_package_list():
    print("\033[93mUpdating package list...\033[0m")
    wire(["sudo", "apt-get", "update", "-y"])


def sync_system_time():
    print("\033[93mSynchronizing system time...\033[0m")

    try:
        subprocess.run(
            ["ntpdate", "--version"],
            check=True,
            stdout=subprocess.DEVNULL,
            stderr=subprocess.DEVNULL,
        )
    except subprocess.CalledProcessError:
        print("\033[91m'ntpdate' is not installed. installing it now..\033[0m")
        subprocess.run(["sudo", "apt-get", "update", "-y"], check=True)
        subprocess.run(["sudo", "apt-get", "install", "-y", "ntpdate"], check=True)

    subprocess.run(["sudo", "ntpdate", "pool.ntp.org"], check=True)
    print("\033[92mSystem time synchronized successfully.\033[0m")


def add_wireguard_repository():
    print("\033[93mAdding WireGuard repository...\033[0m")
    command = ["sudo", "tee", "/etc/apt/sources.list.d/wireguard.list"]
    process = subprocess.Popen(command, stdin=subprocess.PIPE)
    process.communicate(input=b"deb http://deb.debian.org/debian/ bullseye main\n")
    if process.returncode != 0:
        print("\033[91mFailed to add WireGuard repository\033[0m")
    else:
        print("\033[92mWireGuard repository added\033[0m")
    wire(["sudo", "apt-get", "update"])


def install_wireguard():
    update_package_list()
    command = ["sudo", "apt-get", "install", "wireguard", "-y"]
    result = wire(command)
    if "Unable to locate package wireguard" in result:
        sync_system_time()
        add_wireguard_repository()
        sync_system_time()
        update_package_list()
        wire(command)
    print("\033[92mWireGuard is installed\033[0m")


def wire(command):
    process = subprocess.Popen(
        command, stdout=subprocess.DEVNULL, stderr=subprocess.PIPE
    )
    _, stderr = process.communicate()
    if process.returncode != 0:
        print(f"\033[91mError: {stderr.decode()}\033[0m")
    return stderr.decode()


def hide(command):
    process = subprocess.Popen(
        command, shell=True, stdout=subprocess.DEVNULL, stderr=subprocess.PIPE
    )
    while process.poll() is None:
        anime()
    _, stderr = process.communicate()
    if process.returncode != 0:
        print(f"\033[91merror: {stderr.decode()}\033[0m")


def generate_keys():
    private_key = (
        subprocess.check_output("wg genkey", shell=True).strip().decode("utf-8")
    )
    public_key = (
        subprocess.check_output(f"echo {private_key} | wg pubkey", shell=True)
        .strip()
        .decode("utf-8")
    )
    return private_key, public_key


def keynconfig(keypath, content):
    with open(keypath, "w") as file:
        file.write(content)


def display_notification(message):
    print("\u2728 " + message)


def ipver(iptype):
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    print(f"\033[93mChoose IP version for {iptype}:\033[0m")
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("1)\033[93m IPv4\033[0m")
    print("2) \033[93mIPv6\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")
    choice = int(
        input("\033[93mChoose \033[96m1\033[93m or\033[96m 2\033[93m: \033[0m")
    )
    return choice


def ipaddr(ipversion, options, iptype):
    version = "IPv4" if ipversion == 1 else "IPv6"
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    print(f"\033[93mChoose a {version} address for {iptype}:\033[0m")
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    for i, option in enumerate(options, 1):
        print(f"{i}) {option}")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")
    choice = int(input("\033[93mPlease choose: \033[0m"))
    if choice == len(options):
        print(
            "\033[93m─────────────────────────────────────────────────────────\033[0m"
        )
        return input(
            f"\033[93mEnter the Manual {version} address for {iptype}: \033[0m"
        )
    return options[choice - 1]


def animate(message):
    for char in message:
        print(char, end="", flush=True)
        time.sleep(0.05)
    print()


def anime():
    animation = [
        "[=     ]",
        "[==    ]",
        "[===   ]",
        "[====  ]",
        "[===== ]",
        "[======]",
        "[===== ]",
        "[====  ]",
        "[===   ]",
        "[==    ]",
        "[=     ]",
    ]
    for i in range(20):
        time.sleep(0.1)
        sys.stdout.write(f"\r{animation[i % len(animation)]}")
        sys.stdout.flush()
    sys.stdout.write("\r")
    sys.stdout.flush()


def config_server_wireguard(psk, server_ips, client_ips, ip_ver):
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    print("\033[93mInstalling IPSEC..\033[0m")
    os.system("sudo apt install strongswan -y")
    print("\033[92mIPSEC Installation is completed!\033[0m")

    os.system("sudo systemctl disable strongswan-starter > /dev/null 2>&1")
    os.system("sudo systemctl stop strongswan-starter > /dev/null 2>&1")
    os.system("sudo systemctl disable strongswan > /dev/null 2>&1")
    os.system("sudo systemctl stop strongswan > /dev/null 2>&1")
    os.system("sudo rm -f /etc/ipsec1.conf /etc/ipsec.secrets > /dev/null 2>&1")

    subnet = "32" if ip_ver == "ipv4" else "64"

    ipsec_conf = """config setup
  charondebug=all
  uniqueids=no
##azumiisinyourarea\n\n"""

    for i, (server_ip, client_ip) in enumerate(zip(server_ips, client_ips), 1):
        ipsec_conf += f"""conn wireguard_server{i}
  left=%defaultroute
  leftsubnet={server_ip}/{subnet}
  leftid={server_ip}
  right={client_ip}
  rightsubnet={client_ip}/{subnet}
  ike=aes256gcm16-sha512-ecp384!
  esp=aes256gcm16-sha512-ecp384!
  keyexchange=ikev2
  auto=start
  authby=secret
  keyingtries=%forever
  dpdaction=restart
  dpddelay=30s
  dpdtimeout=120s
  rekeymargin=3m
  rekeyfuzz=100%
  reauth=no\n\n"""

    with open("/etc/ipsec1.conf", "w") as f:
        f.write(ipsec_conf)

    with open("/etc/ipsec.secrets", "w") as f:
        for server_ip, client_ip in zip(server_ips, client_ips):
            f.write(f'{client_ip} {server_ip} : PSK "{psk}"\n')

    service_content = """[Unit]
Description=strongazumi IPsec IKEv1/IKEv2 daemon using ipsec.conf
After=network-online.target

[Service]
ExecStart=/usr/sbin/ipsec start --nofork --conf /etc/ipsec1.conf
ExecReload=/usr/sbin/ipsec reload
Restart=always
RestartSec=5
LimitNOFILE=1048576

[Install]
WantedBy=multi-user.target
"""

    with open("/etc/systemd/system/strong-azumi1.service", "w") as f:
        f.write(service_content)

    os.system("sudo systemctl daemon-reload")
    os.system("sudo systemctl enable strong-azumi1")
    os.system("sudo systemctl restart strong-azumi1")


def servernclient(client_num):
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification(
        f"\033[93mConfiguring \033[96mWireguard \033[92mServer & Client \033[96m{client_num}\033[0m"
    )

    server_private_key, server_public_key = generate_keys()
    client_private_key, client_public_key = generate_keys()

    print(f"\033[93m───────────────────────────────────────\033[0m")
    print(
        f"\033[92mKharej\033[93m Server\033[96m Config\033[97m {client_num}\033[93m Keys:\033[0m"
    )
    print(f"\033[93m───────────────────────────────────────\033[0m")
    print(
        f"\033[93m╭──────────────────────────────────────────────────────────╮\033[0m"
    )
    print(f"  Private Key:\033[96m {server_private_key}\033[0m")
    print(f"  Public  Key:\033[96m {server_public_key}\033[0m")
    print(
        f"\033[93m╰──────────────────────────────────────────────────────────╯\033[0m"
    )

    print(f"\033[93m───────────────────────────────────────\033[0m")
    print(f"\033[92mIRAN\033[93m Client\033[96m {client_num}\033[93m Keys:\033[0m")
    print(f"\033[93m───────────────────────────────────────\033[0m")
    print(
        f"\033[93m╭──────────────────────────────────────────────────────────╮\033[0m"
    )
    print(f"  Private Key:\033[96m {client_private_key}\033[0m")
    print(f"  Public  Key:\033[96m {client_public_key}\033[0m")
    print(
        f"\033[93m╰──────────────────────────────────────────────────────────╯\033[0m"
    )

    ipversion = ipver(
        f"\033[92mKharej \033[93mServer Config \033[96m{client_num}\033[0m"
    )

    if ipversion == 1:
        ipoptions = {
            1: ["60.2.0.1", "172.168.0.1", "manual"],
            2: ["60.3.0.1", "172.168.1.1", "manual"],
            3: ["60.4.0.1", "172.168.2.1", "manual"],
            4: ["60.5.0.1", "172.168.3.1", "manual"],
            5: ["60.6.0.1", "172.168.4.1", "manual"],
        }
        subnet = "24"
    else:
        ipoptions = {
            1: ["2001:dc5::1", "fd1d:cd1::1", "manual"],
            2: ["2001:de5::1", "fd1d:ed1::1", "manual"],
            3: ["2001:df5::1", "fd1d:fd1::1", "manual"],
            4: ["2001:da5::1", "fd1d:ad1::1", "manual"],
            5: ["2001:db5::1", "fd1d:bd1::1", "manual"],
        }
        subnet = "64"

    server_ip = ipaddr(
        ipversion,
        ipoptions[client_num],
        f"\033[92mKharej \033[93mServer Config \033[96m{client_num}\033[0m",
    )
    print(f"\033[93m───────────────────────────────────────\033[0m")
    server_port = input(
        f"\033[93mEnter \033[92mConfig \033[96m{client_num}\033[93m Tunnel Port: \033[0m"
    )

    client_public_ip = input(
        f"\033[93mEnter \033[92mIRAN \033[96m{client_num} \033[93mIPV4: \033[0m"
    )

    ipversion = ipver(f"\033[92mIRAN \033[93mClient \033[96m{client_num} Config\033[0m")

    if ipversion == 1:
        ipoptions = {
            1: ["60.2.0.2", "172.168.0.2", "manual"],
            2: ["60.3.0.2", "172.168.1.2", "manual"],
            3: ["60.4.0.2", "172.168.2.2", "manual"],
            4: ["60.5.0.2", "172.168.3.2", "manual"],
            5: ["60.6.0.2", "172.168.4.2", "manual"],
        }
        client_subnet = "32"
    else:
        ipoptions = {
            1: ["2001:dc5::2", "fd1d:cd1::2", "manual"],
            2: ["2001:de5::2", "fd1d:ed1::2", "manual"],
            3: ["2001:df5::2", "fd1d:fd1::2", "manual"],
            4: ["2001:da5::2", "fd1d:ad1::2", "manual"],
            5: ["2001:db5::2", "fd1d:bd1::2", "manual"],
        }
        client_subnet = "128"

    client_ip = ipaddr(ipversion, ipoptions[client_num], f"Client {client_num}")
    print("\033[93m───────────────────────────────────────\033[0m")
    find_interface = input(
        "\033[93mDo you want meh to find the \033[92mmain interface\033[96m automatically\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m"
    )
    if find_interface.lower() == "yes" or find_interface.lower() == "y":
        interface = main_interface()
        if interface is None:
            print("\033[91merror: Couldn't find your network interface.\033[0m")
            return
    else:
        interface = input(
            "\033[93mWhat is your \033[92mmain interface\033[93m? \033[0m"
        )
    print("\033[93m───────────────────────────────────────\033[0m")
    mtu_config = ""
    mtu_choice = input(
        f"\033[93mDo you want to set \033[92mWireguard MTU\033[93m for \033[92mKharej Server\033[96m Config [{client_num}] \033[93m(\033[92myes\033[93m/\033[91mno\033[93m): \033[0m"
    ).lower()
    if mtu_choice in ["yes", "y"]:
        mtu_value = input(
            f"\033[93mEnter MTU value for \033[92mKharej Server\033[96m Config [{client_num}] \033[93m: \033[0m"
        )
        mtu_config = f"MTU = {mtu_value}\n"

    if ipversion == 1:
        server_config = f"""
[Interface]
PrivateKey = {server_private_key}
Address = {server_ip}/{subnet}  
ListenPort = {server_port}
{mtu_config}
PostUp = iptables -I INPUT -p udp --dport {server_port} -j ACCEPT
PostUp = iptables -I FORWARD -i {interface} -o wireserver{client_num} -j ACCEPT
PostUp = iptables -I FORWARD -i wireserver{client_num} -j ACCEPT
PostUp = iptables -t nat -A POSTROUTING -o {interface} -j MASQUERADE
PostUp = ip6tables -I FORWARD -i wireserver{client_num} -j ACCEPT
PostUp = ip6tables -t nat -A POSTROUTING -o {interface} -j MASQUERADE
PostDown = iptables -D INPUT -p udp --dport {server_port} -j ACCEPT
PostDown = iptables -D FORWARD -i {interface} -o wireserver{client_num} -j ACCEPT
PostDown = iptables -D FORWARD -i wireserver{client_num} -j ACCEPT
PostDown = iptables -t nat -D POSTROUTING -o {interface} -j MASQUERADE
PostDown = ip6tables -D FORWARD -i wireserver{client_num} -j ACCEPT
PostDown = ip6tables -t nat -D POSTROUTING -o {interface} -j MASQUERADE

[Peer]
PublicKey = {client_public_key}
AllowedIPs = {client_ip}/{client_subnet}  
Endpoint = {client_public_ip}:{server_port}
"""
    else:
        server_config = f"""
[Interface]
PrivateKey = {server_private_key}
Address = {server_ip}/{subnet}  
ListenPort = {server_port}
{mtu_config}
PostUp = iptables -I INPUT -p udp --dport {server_port} -j ACCEPT
PostUp = iptables -I FORWARD -i {interface} -o wireserver{client_num} -j ACCEPT
PostUp = iptables -I FORWARD -i wireserver{client_num} -j ACCEPT
PostUp = iptables -t nat -A POSTROUTING -o {interface} -j MASQUERADE
PostUp = ip6tables -I FORWARD -i wireserver{client_num} -j ACCEPT
PostUp = ip6tables -t nat -A POSTROUTING -o {interface} -j MASQUERADE
PostDown = iptables -D INPUT -p udp --dport {server_port} -j ACCEPT
PostDown = iptables -D FORWARD -i {interface} -o wireserver{client_num} -j ACCEPT
PostDown = iptables -D FORWARD -i wireserver{client_num} -j ACCEPT
PostDown = iptables -t nat -D POSTROUTING -o {interface} -j MASQUERADE
PostDown = ip6tables -D FORWARD -i wireserver{client_num} -j ACCEPT
PostDown = ip6tables -t nat -D POSTROUTING -o {interface} -j MASQUERADE

[Peer]
PublicKey = {client_public_key}
AllowedIPs = {client_ip}/{client_subnet}  
Endpoint = {client_public_ip}:{server_port}
"""

    server_confpath = f"/etc/wireguard/wireserver{client_num}.conf"
    keynconfig(server_confpath, server_config)
    ufwportudp(server_port)
    wg(client_num)

    return server_ip, client_ip, "ipv4" if ipversion == 1 else "ipv6"


def servernclient2(client_num):
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification(
        f"\033[93mConfiguring \033[96mWireguard \033[92mServer & Client \033[96m{client_num}\033[0m"
    )

    server_private_key, server_public_key = generate_keys()
    client_private_key, client_public_key = generate_keys()

    print(f"\033[93m───────────────────────────────────────\033[0m")
    print(
        f"\033[92mIRAN\033[93m Server\033[96m Config \033[97m{client_num}\033[93m Keys:\033[0m"
    )
    print(f"\033[93m───────────────────────────────────────\033[0m")
    print(
        f"\033[93m╭──────────────────────────────────────────────────────────╮\033[0m"
    )
    print(f"  Private Key:\033[96m {server_private_key}\033[0m")
    print(f"  Public  Key:\033[96m {server_public_key}\033[0m")
    print(
        f"\033[93m╰──────────────────────────────────────────────────────────╯\033[0m"
    )

    print(f"\033[93m───────────────────────────────────────\033[0m")
    print(f"\033[92mKharej\033[93m Client \033[96m{client_num}\033[93m Keys:\033[0m")
    print(f"\033[93m───────────────────────────────────────\033[0m")
    print(
        f"\033[93m╭──────────────────────────────────────────────────────────╮\033[0m"
    )
    print(f"  Private Key:\033[96m {client_private_key}\033[0m")
    print(f"  Public  Key:\033[96m {client_public_key}\033[0m")
    print(
        f"\033[93m╰──────────────────────────────────────────────────────────╯\033[0m"
    )

    ipversion = ipver(
        f"\033[92mKharej\033[93m Server Config \033[96m{client_num}\033[0m"
    )

    if ipversion == 1:
        ipoptions = {
            1: ["60.2.0.1", "172.168.0.1", "manual"],
            2: ["60.3.0.1", "172.168.1.1", "manual"],
            3: ["60.4.0.1", "172.168.2.1", "manual"],
            4: ["60.5.0.1", "172.168.3.1", "manual"],
            5: ["60.6.0.1", "172.168.4.1", "manual"],
        }
        subnet = "24"
    else:
        ipoptions = {
            1: ["2001:dc5::1", "fd1d:cd1::1", "manual"],
            2: ["2001:de5::1", "fd1d:ed1::1", "manual"],
            3: ["2001:df5::1", "fd1d:fd1::1", "manual"],
            4: ["2001:da5::1", "fd1d:ad1::1", "manual"],
            5: ["2001:db5::1", "fd1d:bd1::1", "manual"],
        }
        subnet = "64"

    server_ip = ipaddr(
        ipversion,
        ipoptions[client_num],
        f"\033[92mIRAN Server Config \033[96m{client_num}\033[0m",
    )
    print(f"\033[93m───────────────────────────────────────\033[0m")
    server_port = input(
        f"\033[93mEnter \033[92mConfig \033[96m{client_num}\033[93m Tunnel Port: \033[0m"
    )

    client_public_ip = input(
        f"\033[93mEnter \033[92mKharej \033[96m{client_num} \033[93mIPV4: \033[0m"
    )

    ipversion = ipver(
        f"\033[92mKharej \033[93mClient \033[96m{client_num} Config\033[0m"
    )

    if ipversion == 1:
        ipoptions = {
            1: ["60.2.0.2", "172.168.0.2", "manual"],
            2: ["60.3.0.2", "172.168.1.2", "manual"],
            3: ["60.4.0.2", "172.168.2.2", "manual"],
            4: ["60.5.0.2", "172.168.3.2", "manual"],
            5: ["60.6.0.2", "172.168.4.2", "manual"],
        }
        client_subnet = "32"
    else:
        ipoptions = {
            1: ["2001:dc5::2", "fd1d:cd1::2", "manual"],
            2: ["2001:de5::2", "fd1d:ed1::2", "manual"],
            3: ["2001:df5::2", "fd1d:fd1::2", "manual"],
            4: ["2001:da5::2", "fd1d:ad1::2", "manual"],
            5: ["2001:db5::2", "fd1d:bd1::2", "manual"],
        }
        client_subnet = "128"

    client_ip = ipaddr(ipversion, ipoptions[client_num], f"Client {client_num}")
    print("\033[93m───────────────────────────────────────\033[0m")
    find_interface = input(
        "\033[93mDo you want meh to find the \033[92mmain interface\033[96m automatically\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m"
    )
    if find_interface.lower() == "yes" or find_interface.lower() == "y":
        interface = main_interface()
        if interface is None:
            print("\033[91merror: Couldn't find your network interface.\033[0m")
            return
    else:
        interface = input(
            "\033[93mWhat is your \033[92mmain interface\033[93m? \033[0m"
        )
    print("\033[93m───────────────────────────────────────\033[0m")
    mtu_config = ""
    mtu_choice = input(
        f"\033[93mDo you want to set \033[92mWireguard MTU\033[93m for \033[92mIRAN Server\033[96m Config [{client_num}] \033[93m(\033[92myes\033[93m/\033[91mno\033[93m): \033[0m"
    ).lower()
    if mtu_choice in ["yes", "y"]:
        mtu_value = input(
            f"\033[93mEnter MTU value for \033[92mIRAN Server\033[96m Config [{client_num}] \033[93m: \033[0m"
        )
        mtu_config = f"MTU = {mtu_value}\n"

    if ipversion == 1:
        server_config = f"""
[Interface]
PrivateKey = {server_private_key}
Address = {server_ip}/{subnet}  
ListenPort = {server_port}
{mtu_config}
PostUp = iptables -I INPUT -p udp --dport {server_port} -j ACCEPT
PostUp = iptables -I FORWARD -i {interface} -o wireserver{client_num} -j ACCEPT
PostUp = iptables -I FORWARD -i wireserver{client_num} -j ACCEPT
PostUp = iptables -t nat -A POSTROUTING -o {interface} -j MASQUERADE
PostUp = ip6tables -I FORWARD -i wireserver{client_num} -j ACCEPT
PostUp = ip6tables -t nat -A POSTROUTING -o {interface} -j MASQUERADE
PostDown = iptables -D INPUT -p udp --dport {server_port} -j ACCEPT
PostDown = iptables -D FORWARD -i {interface} -o wireserver{client_num} -j ACCEPT
PostDown = iptables -D FORWARD -i wireserver{client_num} -j ACCEPT
PostDown = iptables -t nat -D POSTROUTING -o {interface} -j MASQUERADE
PostDown = ip6tables -D FORWARD -i wireserver{client_num} -j ACCEPT
PostDown = ip6tables -t nat -D POSTROUTING -o {interface} -j MASQUERADE

[Peer]
PublicKey = {client_public_key}
AllowedIPs = {client_ip}/{client_subnet}  
Endpoint = {client_public_ip}:{server_port}
"""
    else:
        server_config = f"""
[Interface]
PrivateKey = {server_private_key}
Address = {server_ip}/{subnet}  
ListenPort = {server_port}
{mtu_config}
PostUp = iptables -I INPUT -p udp --dport {server_port} -j ACCEPT
PostUp = iptables -I FORWARD -i {interface} -o wireserver{client_num} -j ACCEPT
PostUp = iptables -I FORWARD -i wireserver{client_num} -j ACCEPT
PostUp = iptables -t nat -A POSTROUTING -o {interface} -j MASQUERADE
PostUp = ip6tables -I FORWARD -i wireserver{client_num} -j ACCEPT
PostUp = ip6tables -t nat -A POSTROUTING -o {interface} -j MASQUERADE
PostDown = iptables -D INPUT -p udp --dport {server_port} -j ACCEPT
PostDown = iptables -D FORWARD -i {interface} -o wireserver{client_num} -j ACCEPT
PostDown = iptables -D FORWARD -i wireserver{client_num} -j ACCEPT
PostDown = iptables -t nat -D POSTROUTING -o {interface} -j MASQUERADE
PostDown = ip6tables -D FORWARD -i wireserver{client_num} -j ACCEPT
PostDown = ip6tables -t nat -D POSTROUTING -o {interface} -j MASQUERADE

[Peer]
PublicKey = {client_public_key}
AllowedIPs = {client_ip}/{client_subnet}  
Endpoint = {client_public_ip}:{server_port}
"""

    server_confpath = f"/etc/wireguard/wireserver{client_num}.conf"
    keynconfig(server_confpath, server_config)
    ufwportudp(server_port)
    wg(client_num)

    return server_ip, client_ip, "ipv4" if ipversion == 1 else "ipv6"


def wireguard_noconjuction_kharej1_5iran():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print(
        "\033[92m(   ) \033[93mWireguard \033[92m[1]Kharej Server\033[96m [5]IRAN Client\033[93mMenu\033[0m"
    )
    print(
        '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
    )
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[92mIRAN Client [1] Config\033[0m")
    print("2. \033[92mIRAN Client [2] Config\033[0m")
    print("3. \033[92mIRAN Client [3] Config\033[0m")
    print("4. \033[93mIRAN Client [4] Config\033[0m")
    print("5. \033[92mIRAN Client [5] Config\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    print("6. \033[96mKharej Server Config\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    print("0.\033[97mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")
    while True:
        server_type = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if server_type == "1":
            wireguard_iran_client1()
            break
        elif server_type == "2":
            wireguard_iran_client2()
            break
        elif server_type == "3":
            wireguard_iran_client3()
            break
        elif server_type == "4":
            wireguard_iran_client4()
            break
        elif server_type == "5":
            wireguard_iran_client5()
            break
        elif server_type == "6":
            wireguard_kharej_server()
            break
        elif server_type == "0":
            os.system("clear")
            wireguardudp_menu()
            break
        else:
            print("Invalid choice.")


# ping and service for wireguard
def create_wireguardping_server(ip_address, client_number):
    file_path = f"/etc/ping_wireguard_{client_number}.sh"

    if os.path.exists(file_path):
        os.remove(file_path)

    script_content = f"""#!/bin/bash

ip_address="{ip_address}"

max_pings=2

interval=10

while true
do
    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{{print $2}}" | awk -F " " "{{print $1}}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done

    echo "Waiting for $interval seconds..."
    sleep $interval
done
"""

    with open(file_path, "w") as file:
        file.write(script_content)

    command = f"chmod +x {file_path}"
    subprocess.run(command, shell=True, check=True)


def wireguardping_server_service(client_number):
    service_content = f"""[Unit]
Description=keepalive for client {client_number}
After=network.target

[Service]
ExecStart=/bin/bash /etc/ping_wireguard_{client_number}.sh
Restart=always

[Install]
WantedBy=multi-user.target
"""

    service_file_path = f"/etc/systemd/system/wireguardping_{client_number}.service"
    with open(service_file_path, "w") as service_file:
        service_file.write(service_content)

    subprocess.run(["systemctl", "daemon-reload"])
    subprocess.run(["systemctl", "enable", f"wireguardping_{client_number}.service"])
    subprocess.run(["systemctl", "start", f"wireguardping_{client_number}.service"])
    subprocess.run(["systemctl", "restart", f"wireguardping_{client_number}.service"])


def ufw(ip_address):
    subprocess.run(["sudo", "ufw", "allow", "from", ip_address])


def enable_reset_ipsec():
    ipsec_service_remove()
    delete_cron3()
    delete_cron4()
    print("\033[93m───────────────────────────────────────\033[0m")
    display_notification("\033[93mQuestion time !\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    enable_reset = input(
        "\033[93mDo you want to enable \033[96mIPSEC \033[92mreset time\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m"
    ).lower()
    if enable_reset in ["yes", "y"]:
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[92mHour\033[0m")
        print("2. \033[93mMinute\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")

        time_unit_choice = input("\033[93mEnter your choice :\033[0m ").strip()
        if time_unit_choice == "1":
            time_unit = "hour"
        elif time_unit_choice == "2":
            time_unit = "minute"
        else:
            print("\033[91mWrong choice\033[0m")
            return

        time_value = input(
            "\033[93mEnter the \033[92mdesired input\033[93m:\033[0m "
        ).strip()
        interval_seconds = (
            int(time_value) * 3600 if time_unit == "hour" else int(time_value) * 60
        )
        reset_ipsec(interval_seconds)
        print("\033[93m────────────────────────────────────────\033[0m")

def wireguard_kharej_server():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print("\033[92m(   ) \033[93mWireguard \033[92mKharej Server\033[0m")
    print('\033[92m "-"\033[93m═════════════════════════════════════════\033[0m')
    check_wireguard_installed()
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")

    ip_versions = set()
    server_ips = []
    client_ips = []

    num_clients = int(
        input("\033[93mEnter the number of \033[92mIRAN Clients\033[93m: \033[0m")
    )

    for i in range(1, num_clients + 1):
        server_ip, client_ip, ip_version = servernclient(i)
        server_ips.append(server_ip)
        client_ips.append(client_ip)
        ip_versions.add(ip_version)
        create_wireguardping_server(client_ip, i)
        wireguardping_server_service(i)
        ufw(server_ip)
        ufw(client_ip)
        server_confpath = f"/etc/wireguard/wireserver{num_clients}.conf"
        display_checkmark(
            f"\033[92mServer configuration saved to \033[97m{server_confpath}\033[0m"
        )

    print(f"\033[93m───────────────────────────────────────\033[0m")
    ipsec_choice = (
        input(
            "\033[93mDo you want to configure IPsec? (\033[92myes\033[93m or \033[91mno): \033[0m"
        )
        .strip()
        .lower()
    )

    if ipsec_choice in ["yes", "y"]:
        psk = input("\033[93mEnter IPSEC \033[92mSecret Key\033[93m: \033[0m")
        ip_ver = ip_versions.pop() if ip_versions else "ipv4"
        config_server_wireguard(psk, server_ips, client_ips, ip_ver)
        enable_reset_ipsec()


def user_input(prompt):
    return input(prompt).strip()


def ip_choice(entity, ip_version, options):
    print(f"\033[93mChoose an IP address for {entity} ({ip_version}):\033[0m")
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    for i, option in enumerate(options, 1):
        print(f"{i}) {option}")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")
    choice = int(user_input("\033[93mEnter the number: \033[0m"))
    if choice == len(options):
        print("\033[93m───────────────────────────────────────\033[0m")
        return user_input(
            f"\033[93mEnter the custom \033[92m{ip_version} \033[93maddress for {entity}: \033[0m"
        )
    return options[choice - 1]


def config_client_wireguard(psk, server_ips, client_ips, ip_ver):
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    print("\033[93mInstalling IPSEC..\033[0m")
    os.system("sudo apt install strongswan -y")
    print("\033[92mIPSEC Installation is completed!\033[0m")

    os.system("sudo systemctl disable strongswan-starter > /dev/null 2>&1")
    os.system("sudo systemctl stop strongswan-starter > /dev/null 2>&1")
    os.system("sudo systemctl disable strongswan > /dev/null 2>&1")
    os.system("sudo systemctl stop strongswan > /dev/null 2>&1")
    os.system("sudo rm -f /etc/ipsec1.conf /etc/ipsec.secrets > /dev/null 2>&1")

    subnet = "32" if ip_ver == "ipv4" else "64"

    ipsec_conf = """config setup
  charondebug=all
  uniqueids=no
##azumiisinyourarea\n\n"""

    for server_ip, client_ip in zip(server_ips, client_ips):
        ipsec_conf += f"""conn wireguard_client
  left=%defaultroute
  leftsubnet={client_ip}/{subnet}
  leftid={client_ip}
  right={server_ip}
  rightsubnet={server_ip}/{subnet}
  ike=aes256gcm16-sha512-ecp384!
  esp=aes256gcm16-sha512-ecp384!
  keyexchange=ikev2
  auto=start
  authby=secret
  keyingtries=%forever
  dpdaction=restart
  dpddelay=30s
  dpdtimeout=120s
  rekeymargin=3m
  rekeyfuzz=100%
  reauth=no\n\n"""

    with open("/etc/ipsec1.conf", "w") as f:
        f.write(ipsec_conf)

    with open("/etc/ipsec.secrets", "w") as f:
        for server_ip, client_ip in zip(server_ips, client_ips):
            f.write(f'{server_ip} {client_ip} : PSK "{psk}"\n')

    service_content = """[Unit]
Description=strongazumi IPsec IKEv1/IKEv2 daemon using ipsec.conf
After=network-online.target

[Service]
ExecStart=/usr/sbin/ipsec start --nofork --conf /etc/ipsec1.conf
ExecReload=/usr/sbin/ipsec reload
Restart=always
RestartSec=5
LimitNOFILE=1048576

[Install]
WantedBy=multi-user.target
"""

    with open("/etc/systemd/system/strong-azumi1.service", "w") as f:
        f.write(service_content)

    os.system("sudo systemctl daemon-reload")
    os.system("sudo systemctl enable strong-azumi1")
    os.system("sudo systemctl restart strong-azumi1")


def ipversion_n_address(entity):
    print("\033[93m───────────────────────────────────────\033[0m")
    print(f"\033[93m{entity} IP Version:\033[0m")
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("1) \033[93mIPv4\033[0m")
    print("2) \033[93mIPv6\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")
    ip_version_choice = user_input(
        "\033[93mChoose IP version (\033[92m1\033[93m or\033[96m 2\033[93m):\033[0m "
    ).strip()
    if ip_version_choice == "1":
        ip_version = "ipv4"
        ip_options = (
            ["60.2.0.2", "172.168.0.2", "manual"]
            if "Client" in entity
            else ["60.2.0.1", "172.168.0.1", "manual"]
        )
        subnet = "24" if "Client" in entity else "32"
    else:
        ip_version = "ipv6"
        ip_options = (
            ["2001:dc5::2", "fd1d:cd1::2", "manual"]
            if "Client" in entity
            else ["2001:dc5::1", "fd1d:cd1::1", "manual"]
        )
        subnet = "64" if "Client" in entity else "128"

    ip_address = ip_choice(entity, ip_version, ip_options)
    return ip_address, subnet, ip_version


def create_wireguardping_client(ip_address):
    file_path = "/etc/ping_wireguard.sh"

    if os.path.exists(file_path):
        os.remove(file_path)

    script_content = f"""#!/bin/bash

ip_address="{ip_address}"

max_pings=2

interval=10

while true
do
    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{{print $2}}" | awk -F " " "{{print $1}}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done

    echo "Waiting for $interval seconds..."
    sleep $interval
done
"""

    with open(file_path, "w") as file:
        file.write(script_content)

    command = f"chmod +x {file_path}"
    subprocess.run(command, shell=True, check=True)


def wireguardping_client_service():
    service_content = """[Unit]
Description=keepalive
After=network.target

[Service]
ExecStart=/bin/bash /etc/ping_wireguard.sh
Restart=always

[Install]
WantedBy=multi-user.target
"""

    service_file_path = "/etc/systemd/system/wireguardping.service"
    with open(service_file_path, "w") as service_file:
        service_file.write(service_content)

    subprocess.run(["systemctl", "daemon-reload"])
    subprocess.run(["systemctl", "enable", "wireguardping.service"])
    subprocess.run(["systemctl", "start", "wireguardping.service"])
    subprocess.run(["systemctl", "restart", "wireguardping.service"])


def ufwportudp(port):
    try:
        subprocess.run(["sudo", "ufw", "allow", f"{port}/udp"], check=True)
    except subprocess.CalledProcessError as e:
        print(f"Warning: prolly ufw prog is not installed, Continuing script...")


def wireguard_iran_client1():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print("\033[92m(   ) \033[93mWireguard \033[92mIRAN Client [1]\033[0m")
    print('\033[92m "-"\033[93m═════════════════════════════════════════\033[0m')
    check_wireguard_installed()
    print("\033[93m───────────────────────────────────────\033[0m")
    display_notification("\033[93mConfiguring WireGuard Client\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    server_public_key = user_input(
        "\033[93mEnter \033[92mKharej Server\033[93m's config \033[96m[1] \033[96mpublic key:\033[0m "
    )
    client_private_key = user_input(
        "\033[93mEnter \033[92mIRAN Client\033[96m [1]\033[93m private key:\033[0m "
    )
    server_public_ip = user_input(
        "\033[93mEnter \033[92mKharej Server\033[93m IPV4 address:\033[0m "
    )
    client_port = user_input(
        "\033[93mEnter the \033[92mTunnel config \033[96m[1] \033[93mport:\033[0m "
    )
    ufwportudp(client_port)

    client_ip, client_subnet, ip_version = ipversion_n_address(
        "\033[93mIRAN Client \033[92m[1]\033[0m"
    )
    ufw(client_ip)
    server_private_ip, server_subnet = ipversion_n_address(
        "\033[93mKharej Server Config \033[92m[1]\033[0m"
    )[:2]
    ufw(server_private_ip)
    print("\033[93m───────────────────────────────────────\033[0m")
    find_interface = input(
        "\033[93mDo you want meh to find the \033[92mmain interface\033[96m automatically\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m"
    )
    if find_interface.lower() == "yes" or find_interface.lower() == "y":
        interface = main_interface()
        if interface is None:
            print("\033[91merror: Couldn't find your network interface.\033[0m")
            return
    else:
        interface = input(
            "\033[93mWhat is your \033[92mmain interface\033[93m? \033[0m"
        )
    print("\033[93m───────────────────────────────────────\033[0m")
    mtu_config = ""
    mtu_choice = input(
        f"\033[93mDo you want to set \033[92mWireguard MTU\033[93m for \033[92mClient\033[96m [1] \033[93m(\033[92myes\033[93m/\033[91mno\033[93m): \033[0m"
    ).lower()
    if mtu_choice in ["yes", "y"]:
        mtu_value = input(
            f"\033[93mEnter MTU value for \033[92mClient\033[96m [1] \033[93m: \033[0m"
        )
        mtu_config = f"MTU = {mtu_value}\n"

    client_config = f"""
[Interface]
PrivateKey = {client_private_key}
Address = {client_ip}/{client_subnet}
ListenPort = {client_port}
{mtu_config}
PostUp = iptables -I INPUT -p udp --dport {client_port} -j ACCEPT
PostUp = iptables -I FORWARD -i {interface} -o wireclient -j ACCEPT
PostUp = iptables -I FORWARD -i wireclient -j ACCEPT
PostUp = iptables -t nat -A POSTROUTING -o {interface} -j MASQUERADE
PostUp = ip6tables -I FORWARD -i wireclient -j ACCEPT
PostUp = ip6tables -t nat -A POSTROUTING -o {interface} -j MASQUERADE
PostDown = iptables -D INPUT -p udp --dport {client_port} -j ACCEPT
PostDown = iptables -D FORWARD -i {interface} -o wireclient -j ACCEPT
PostDown = iptables -D FORWARD -i wireclient -j ACCEPT
PostDown = iptables -t nat -D POSTROUTING -o {interface} -j MASQUERADE
PostDown = ip6tables -D FORWARD -i wireclient -j ACCEPT
PostDown = ip6tables -t nat -D POSTROUTING -o {interface} -j MASQUERADE

[Peer]
PublicKey = {server_public_key}
AllowedIPs = {server_private_ip}/{server_subnet}
Endpoint = {server_public_ip}:{client_port}
"""

    client_config_path = "/etc/wireguard/wireclient.conf"
    write_config(client_config_path, client_config)
    wgclient()
    create_wireguardping_client(server_private_ip)
    wireguardping_client_service()
    print("\033[93m───────────────────────────────────────\033[0m")
    display_checkmark(
        f"\033[92mClient configuration saved to \033[97m{client_config_path}\033[0m"
    )
    print(f"\033[93m───────────────────────────────────────\033[0m")
    ipsec_choice = (
        input(
            "\033[93mDo you want to configure IPsec? (\033[92myes\033[93m or \033[91mno): \033[0m"
        )
        .strip()
        .lower()
    )

    if ipsec_choice in ["yes", "y"]:
        psk = input("\033[93mEnter IPSEC \033[92mSecret Key\033[93m: \033[0m")
        config_client_wireguard(psk, [server_private_ip], [client_ip], ip_version)
        enable_reset_ipsec()


# iran client 2
def ipversion_n_address2(entity):
    print("\033[93m───────────────────────────────────────\033[0m")
    print(f"\033[93m{entity} IP Version:\033[0m")
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("1) \033[93mIPv4\033[0m")
    print("2) \033[93mIPv6\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")
    ip_version_choice = user_input(
        "\033[93mChoose IP version (\033[92m1\033[93m or\033[96m 2\033[93m):\033[0m "
    ).strip()
    if ip_version_choice == "1":
        ip_version = "ipv4"
        ip_options = (
            ["60.3.0.2", "172.168.1.2", "manual"]
            if "Client" in entity
            else ["60.3.0.1", "172.168.1.1", "manual"]
        )
        subnet = "24" if "Client" in entity else "32"
    else:
        ip_version = "ipv6"
        ip_options = (
            ["2001:de5::2", "fd1d:ed1::2", "manual"]
            if "Client" in entity
            else ["2001:de5::1", "fd1d:ed1::1", "manual"]
        )
        subnet = "64" if "Client" in entity else "128"

    ip_address = ip_choice(entity, ip_version, ip_options)
    return ip_address, subnet, ip_version


def wireguard_iran_client2():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print("\033[92m(   ) \033[93mWireguard \033[92mIRAN Client [2]\033[0m")
    print('\033[92m "-"\033[93m═════════════════════════════════════════\033[0m')
    check_wireguard_installed()
    print("\033[93m───────────────────────────────────────\033[0m")
    display_notification("\033[93mConfiguring WireGuard Client\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    server_public_key = user_input(
        "\033[93mEnter \033[92mKharej Server\033[93m's config \033[96m[2] \033[96mpublic key:\033[0m "
    )
    client_private_key = user_input(
        "\033[93mEnter \033[92mIRAN Client\033[96m [2]\033[93m private key:\033[0m "
    )
    server_public_ip = user_input(
        "\033[93mEnter \033[92mKharej Server\033[93m IPV4 address:\033[0m "
    )
    client_port = user_input(
        "\033[93mEnter the \033[92mTunnel config \033[96m[2] \033[93mport:\033[0m "
    )
    ufwportudp(client_port)
    client_ip, client_subnet, ip_version = ipversion_n_address2(
        "\033[93mIRAN Client \033[92m[2]\033[0m"
    )
    ufw(client_ip)
    server_private_ip, server_subnet = ipversion_n_address2(
        "\033[93mKharej Server Config \033[92m[2]\033[0m"
    )[:2]
    ufw(server_private_ip)
    print("\033[93m───────────────────────────────────────\033[0m")
    find_interface = input(
        "\033[93mDo you want meh to find the \033[92mmain interface\033[96m automatically\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m"
    )
    if find_interface.lower() == "yes" or find_interface.lower() == "y":
        interface = main_interface()
        if interface is None:
            print("\033[91merror: Couldn't find your network interface.\033[0m")
            return
    else:
        interface = input(
            "\033[93mWhat is your \033[92mmain interface\033[93m? \033[0m"
        )
    print("\033[93m───────────────────────────────────────\033[0m")
    mtu_config = ""
    mtu_choice = input(
        f"\033[93mDo you want to set \033[92mWireguard MTU\033[93m for \033[92mClient\033[96m [2] \033[93m(\033[92myes\033[93m/\033[91mno\033[93m): \033[0m"
    ).lower()
    if mtu_choice in ["yes", "y"]:
        mtu_value = input(
            f"\033[93mEnter MTU value for \033[92mClient\033[96m [2] \033[93m: \033[0m"
        )
        mtu_config = f"MTU = {mtu_value}\n"

    client_config = f"""
[Interface]
PrivateKey = {client_private_key}
Address = {client_ip}/{client_subnet}
ListenPort = {client_port}
{mtu_config}
PostUp = iptables -I INPUT -p udp --dport {client_port} -j ACCEPT
PostUp = iptables -I FORWARD -i {interface} -o wireclient -j ACCEPT
PostUp = iptables -I FORWARD -i wireclient -j ACCEPT
PostUp = iptables -t nat -A POSTROUTING -o {interface} -j MASQUERADE
PostUp = ip6tables -I FORWARD -i wireclient -j ACCEPT
PostUp = ip6tables -t nat -A POSTROUTING -o {interface} -j MASQUERADE
PostDown = iptables -D INPUT -p udp --dport {client_port} -j ACCEPT
PostDown = iptables -D FORWARD -i {interface} -o wireclient -j ACCEPT
PostDown = iptables -D FORWARD -i wireclient -j ACCEPT
PostDown = iptables -t nat -D POSTROUTING -o {interface} -j MASQUERADE
PostDown = ip6tables -D FORWARD -i wireclient -j ACCEPT
PostDown = ip6tables -t nat -D POSTROUTING -o {interface} -j MASQUERADE

[Peer]
PublicKey = {server_public_key}
AllowedIPs = {server_private_ip}/{server_subnet}
Endpoint = {server_public_ip}:{client_port}
"""

    client_config_path = "/etc/wireguard/wireclient.conf"
    write_config(client_config_path, client_config)
    wgclient()
    create_wireguardping_client(server_private_ip)
    wireguardping_client_service()
    print("\033[93m───────────────────────────────────────\033[0m")
    display_checkmark(
        f"\033[92mClient configuration saved to \033[97m{client_config_path}\033[0m"
    )
    print(f"\033[93m───────────────────────────────────────\033[0m")
    ipsec_choice = (
        input(
            "\033[93mDo you want to configure IPsec? (\033[92myes\033[93m or \033[91mno): \033[0m"
        )
        .strip()
        .lower()
    )

    if ipsec_choice in ["yes", "y"]:
        psk = input("\033[93mEnter IPSEC \033[92mSecret Key\033[93m: \033[0m")
        config_client_wireguard(psk, [server_private_ip], [client_ip], ip_version)
        enable_reset_ipsec()


# iran client 3
def ipversion_n_address3(entity):
    print("\033[93m───────────────────────────────────────\033[0m")
    print(f"\033[93m{entity} IP Version:\033[0m")
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("1) \033[93mIPv4\033[0m")
    print("2) \033[93mIPv6\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")
    ip_version_choice = user_input(
        "\033[93mChoose IP version (\033[92m1\033[93m or\033[96m 2\033[93m):\033[0m "
    ).strip()
    if ip_version_choice == "1":
        ip_version = "ipv4"
        ip_options = (
            ["60.4.0.2", "172.168.2.2", "manual"]
            if "Client" in entity
            else ["60.4.0.1", "172.168.2.1", "manual"]
        )
        subnet = "24" if "Client" in entity else "32"
    else:
        ip_version = "ipv6"
        ip_options = (
            ["2001:df5::2", "fd1d:fd1::2", "manual"]
            if "Client" in entity
            else ["2001:df5::1", "fd1d:fd1::1", "manual"]
        )
        subnet = "64" if "Client" in entity else "128"

    ip_address = ip_choice(entity, ip_version, ip_options)
    return ip_address, subnet, ip_version


def wireguard_iran_client3():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print("\033[92m(   ) \033[93mWireguard \033[92mIRAN Client [3]\033[0m")
    print('\033[92m "-"\033[93m═════════════════════════════════════════\033[0m')
    check_wireguard_installed()
    print("\033[93m───────────────────────────────────────\033[0m")
    display_notification("\033[93mConfiguring WireGuard Client\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    server_public_key = user_input(
        "\033[93mEnter \033[92mKharej Server\033[93m's config \033[96m[3] \033[96mpublic key:\033[0m "
    )
    client_private_key = user_input(
        "\033[93mEnter \033[92mIRAN Client\033[96m [3]\033[93m private key:\033[0m "
    )
    server_public_ip = user_input(
        "\033[93mEnter \033[92mKharej Server\033[93m IPV4 address:\033[0m "
    )
    client_port = user_input(
        "\033[93mEnter the \033[92mTunnel config \033[96m[3] \033[93mport:\033[0m "
    )
    ufwportudp(client_port)
    client_ip, client_subnet, ip_version = ipversion_n_address3(
        "\033[93mIRAN Client \033[92m[3]\033[0m"
    )
    ufw(client_ip)
    server_private_ip, server_subnet = ipversion_n_address3(
        "\033[93mKharej Server Config \033[92m[3]\033[0m"
    )[:2]
    ufw(server_private_ip)
    print("\033[93m───────────────────────────────────────\033[0m")
    find_interface = input(
        "\033[93mDo you want meh to find the \033[92mmain interface\033[96m automatically\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m"
    )
    if find_interface.lower() == "yes" or find_interface.lower() == "y":
        interface = main_interface()
        if interface is None:
            print("\033[91merror: Couldn't find your network interface.\033[0m")
            return
    else:
        interface = input(
            "\033[93mWhat is your \033[92mmain interface\033[93m? \033[0m"
        )
    print("\033[93m───────────────────────────────────────\033[0m")
    mtu_config = ""
    mtu_choice = input(
        f"\033[93mDo you want to set \033[92mWireguard MTU\033[93m for \033[92mClient\033[96m [3] \033[93m(\033[92myes\033[93m/\033[91mno\033[93m): \033[0m"
    ).lower()
    if mtu_choice in ["yes", "y"]:
        mtu_value = input(
            f"\033[93mEnter MTU value for \033[92mClient\033[96m [3] \033[93m: \033[0m"
        )
        mtu_config = f"MTU = {mtu_value}\n"

    client_config = f"""
[Interface]
PrivateKey = {client_private_key}
Address = {client_ip}/{client_subnet}
ListenPort = {client_port}
{mtu_config}
PostUp = iptables -I INPUT -p udp --dport {client_port} -j ACCEPT
PostUp = iptables -I FORWARD -i {interface} -o wireclient -j ACCEPT
PostUp = iptables -I FORWARD -i wireclient -j ACCEPT
PostUp = iptables -t nat -A POSTROUTING -o {interface} -j MASQUERADE
PostUp = ip6tables -I FORWARD -i wireclient -j ACCEPT
PostUp = ip6tables -t nat -A POSTROUTING -o {interface} -j MASQUERADE
PostDown = iptables -D INPUT -p udp --dport {client_port} -j ACCEPT
PostDown = iptables -D FORWARD -i {interface} -o wireclient -j ACCEPT
PostDown = iptables -D FORWARD -i wireclient -j ACCEPT
PostDown = iptables -t nat -D POSTROUTING -o {interface} -j MASQUERADE
PostDown = ip6tables -D FORWARD -i wireclient -j ACCEPT
PostDown = ip6tables -t nat -D POSTROUTING -o {interface} -j MASQUERADE

[Peer]
PublicKey = {server_public_key}
AllowedIPs = {server_private_ip}/{server_subnet}
Endpoint = {server_public_ip}:{client_port}
"""

    client_config_path = "/etc/wireguard/wireclient.conf"
    write_config(client_config_path, client_config)
    wgclient()
    create_wireguardping_client(server_private_ip)
    wireguardping_client_service()
    print("\033[93m───────────────────────────────────────\033[0m")
    display_checkmark(
        f"\033[92mClient configuration saved to \033[97m{client_config_path}\033[0m"
    )
    print(f"\033[93m───────────────────────────────────────\033[0m")
    ipsec_choice = (
        input(
            "\033[93mDo you want to configure IPsec? (\033[92myes\033[93m or \033[91mno): \033[0m"
        )
        .strip()
        .lower()
    )

    if ipsec_choice in ["yes", "y"]:
        psk = input("\033[93mEnter IPSEC \033[92mSecret Key\033[93m: \033[0m")
        config_client_wireguard(psk, [server_private_ip], [client_ip], ip_version)
        enable_reset_ipsec()


# iran client 4
def ipversion_n_address4(entity):
    print("\033[93m───────────────────────────────────────\033[0m")
    print(f"\033[93m{entity} IP Version:\033[0m")
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("1) \033[93mIPv4\033[0m")
    print("2) \033[93mIPv6\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")
    ip_version_choice = user_input(
        "\033[93mChoose IP version (\033[92m1\033[93m or\033[96m 2\033[93m):\033[0m "
    ).strip()
    if ip_version_choice == "1":
        ip_version = "ipv4"
        ip_options = (
            ["60.5.0.2", "172.168.3.2", "manual"]
            if "Client" in entity
            else ["60.5.0.1", "172.168.3.1", "manual"]
        )
        subnet = "24" if "Client" in entity else "32"
    else:
        ip_version = "ipv6"
        ip_options = (
            ["2001:da5::2", "fd1d:ad1::2", "manual"]
            if "Client" in entity
            else ["2001:da5::1", "fd1d:ad1::1", "manual"]
        )
        subnet = "64" if "Client" in entity else "128"

    ip_address = ip_choice(entity, ip_version, ip_options)
    return ip_address, subnet, ip_version


def wireguard_iran_client4():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print("\033[92m(   ) \033[93mWireguard \033[92mIRAN Client [4]\033[0m")
    print('\033[92m "-"\033[93m═════════════════════════════════════════\033[0m')
    check_wireguard_installed()
    print("\033[93m───────────────────────────────────────\033[0m")
    display_notification("\033[93mConfiguring WireGuard Client\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    server_public_key = user_input(
        "\033[93mEnter \033[92mKharej Server\033[93m's config \033[96m[4] \033[96mpublic key:\033[0m "
    )
    client_private_key = user_input(
        "\033[93mEnter \033[92mIRAN Client\033[96m [4]\033[93m private key:\033[0m "
    )
    server_public_ip = user_input(
        "\033[93mEnter \033[92mKharej Server\033[93m IPV4 address:\033[0m "
    )
    client_port = user_input(
        "\033[93mEnter the \033[92mTunnel config \033[96m[4] \033[93mport:\033[0m "
    )
    ufwportudp(client_port)
    client_ip, client_subnet, ip_version = ipversion_n_address4(
        "\033[93mIRAN Client \033[92m[4]\033[0m"
    )
    ufw(client_ip)
    server_private_ip, server_subnet = ipversion_n_address4(
        "\033[93mKharej Server Config \033[92m[4]\033[0m"
    )[:2]
    ufw(server_private_ip)
    print("\033[93m───────────────────────────────────────\033[0m")
    find_interface = input(
        "\033[93mDo you want meh to find the \033[92mmain interface\033[96m automatically\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m"
    )
    if find_interface.lower() == "yes" or find_interface.lower() == "y":
        interface = main_interface()
        if interface is None:
            print("\033[91merror: Couldn't find your network interface.\033[0m")
            return
    else:
        interface = input(
            "\033[93mWhat is your \033[92mmain interface\033[93m? \033[0m"
        )
    print("\033[93m───────────────────────────────────────\033[0m")
    mtu_config = ""
    mtu_choice = input(
        f"\033[93mDo you want to set \033[92mWireguard MTU\033[93m for \033[92mClient\033[96m [4] \033[93m(\033[92myes\033[93m/\033[91mno\033[93m): \033[0m"
    ).lower()
    if mtu_choice in ["yes", "y"]:
        mtu_value = input(
            f"\033[93mEnter MTU value for \033[92mClient\033[96m [4] \033[93m: \033[0m"
        )
        mtu_config = f"MTU = {mtu_value}\n"

    client_config = f"""
[Interface]
PrivateKey = {client_private_key}
Address = {client_ip}/{client_subnet}
ListenPort = {client_port}
{mtu_config}
PostUp = iptables -I INPUT -p udp --dport {client_port} -j ACCEPT
PostUp = iptables -I FORWARD -i {interface} -o wireclient -j ACCEPT
PostUp = iptables -I FORWARD -i wireclient -j ACCEPT
PostUp = iptables -t nat -A POSTROUTING -o {interface} -j MASQUERADE
PostUp = ip6tables -I FORWARD -i wireclient -j ACCEPT
PostUp = ip6tables -t nat -A POSTROUTING -o {interface} -j MASQUERADE
PostDown = iptables -D INPUT -p udp --dport {client_port} -j ACCEPT
PostDown = iptables -D FORWARD -i {interface} -o wireclient -j ACCEPT
PostDown = iptables -D FORWARD -i wireclient -j ACCEPT
PostDown = iptables -t nat -D POSTROUTING -o {interface} -j MASQUERADE
PostDown = ip6tables -D FORWARD -i wireclient -j ACCEPT
PostDown = ip6tables -t nat -D POSTROUTING -o {interface} -j MASQUERADE

[Peer]
PublicKey = {server_public_key}
AllowedIPs = {server_private_ip}/{server_subnet}
Endpoint = {server_public_ip}:{client_port}
"""

    client_config_path = "/etc/wireguard/wireclient.conf"
    write_config(client_config_path, client_config)
    wgclient()
    create_wireguardping_client(server_private_ip)
    wireguardping_client_service()
    print("\033[93m───────────────────────────────────────\033[0m")
    display_checkmark(
        f"\033[92mClient configuration saved to \033[97m{client_config_path}\033[0m"
    )

    print("\033[93m───────────────────────────────────────\033[0m")
    ipsec_choice = (
        input(
            "\033[93mDo you want to configure IPsec? (\033[92myes\033[93m or \033[91mno): \033[0m"
        )
        .strip()
        .lower()
    )

    if ipsec_choice in ["yes", "y"]:
        psk = input("\033[93mEnter IPSEC \033[92mSecret Key\033[93m: \033[0m")
        config_client_wireguard(psk, [server_private_ip], [client_ip], ip_version)
        enable_reset_ipsec()


# iran client 5
def ipversion_n_address5(entity):
    print("\033[93m───────────────────────────────────────\033[0m")
    print(f"\033[93m{entity} IP Version:\033[0m")
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("1) \033[93mIPv4\033[0m")
    print("2) \033[93mIPv6\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")
    ip_version_choice = user_input(
        "\033[93mChoose IP version (\033[92m1\033[93m or\033[96m 2\033[93m):\033[0m "
    ).strip()
    if ip_version_choice == "1":
        ip_version = "ipv4"
        ip_options = (
            ["60.6.0.2", "172.168.4.2", "manual"]
            if "Client" in entity
            else ["60.6.0.1", "172.168.4.1", "manual"]
        )
        subnet = "24" if "Client" in entity else "32"
    else:
        ip_version = "ipv6"
        ip_options = (
            ["2001:db5::2", "fd1d:bd1::2", "manual"]
            if "Client" in entity
            else ["2001:db5::1", "fd1d:bd1::1", "manual"]
        )
        subnet = "64" if "Client" in entity else "128"

    ip_address = ip_choice(entity, ip_version, ip_options)
    return ip_address, subnet, ip_version


def wireguard_iran_client5():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print("\033[92m(   ) \033[93mWireguard \033[92mIRAN Client [5]\033[0m")
    print('\033[92m "-"\033[93m═════════════════════════════════════════\033[0m')
    check_wireguard_installed()
    print("\033[93m───────────────────────────────────────\033[0m")
    display_notification("\033[93mConfiguring WireGuard Client\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    server_public_key = user_input(
        "\033[93mEnter \033[92mKharej Server\033[93m's config \033[96m[5] \033[96mpublic key:\033[0m "
    )
    client_private_key = user_input(
        "\033[93mEnter \033[92mIRAN Client\033[96m [5]\033[93m private key:\033[0m "
    )
    server_public_ip = user_input(
        "\033[93mEnter \033[92mKharej Server\033[93m IPV4 address:\033[0m "
    )
    client_port = user_input(
        "\033[93mEnter the \033[92mTunnel config \033[96m[5] \033[93mport:\033[0m "
    )
    ufwportudp(client_port)
    client_ip, client_subnet, ip_version = ipversion_n_address5(
        "\033[93mIRAN Client \033[92m[5]\033[0m"
    )
    ufw(client_ip)
    server_private_ip, server_subnet = ipversion_n_address5(
        "\033[93mKharej Server Config \033[92m[5]\033[0m"
    )[:2]
    ufw(server_private_ip)
    print("\033[93m───────────────────────────────────────\033[0m")
    find_interface = input(
        "\033[93mDo you want meh to find the \033[92mmain interface\033[96m automatically\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m"
    )
    if find_interface.lower() == "yes" or find_interface.lower() == "y":
        interface = main_interface()
        if interface is None:
            print("\033[91merror: Couldn't find your network interface.\033[0m")
            return
    else:
        interface = input(
            "\033[93mWhat is your \033[92mmain interface\033[93m? \033[0m"
        )
    print("\033[93m───────────────────────────────────────\033[0m")
    mtu_config = ""
    mtu_choice = input(
        f"\033[93mDo you want to set \033[92mWireguard MTU\033[93m for \033[92mClient\033[96m [5] \033[93m(\033[92myes\033[93m/\033[91mno\033[93m): \033[0m"
    ).lower()
    if mtu_choice in ["yes", "y"]:
        mtu_value = input(
            f"\033[93mEnter MTU value for \033[92mClient\033[96m [5] \033[93m: \033[0m"
        )
        mtu_config = f"MTU = {mtu_value}\n"

    client_config = f"""
[Interface]
PrivateKey = {client_private_key}
Address = {client_ip}/{client_subnet}
ListenPort = {client_port}
{mtu_config}
PostUp = iptables -I INPUT -p udp --dport {client_port} -j ACCEPT
PostUp = iptables -I FORWARD -i {interface} -o wireclient -j ACCEPT
PostUp = iptables -I FORWARD -i wireclient -j ACCEPT
PostUp = iptables -t nat -A POSTROUTING -o {interface} -j MASQUERADE
PostUp = ip6tables -I FORWARD -i wireclient -j ACCEPT
PostUp = ip6tables -t nat -A POSTROUTING -o {interface} -j MASQUERADE
PostDown = iptables -D INPUT -p udp --dport {client_port} -j ACCEPT
PostDown = iptables -D FORWARD -i {interface} -o wireclient -j ACCEPT
PostDown = iptables -D FORWARD -i wireclient -j ACCEPT
PostDown = iptables -t nat -D POSTROUTING -o {interface} -j MASQUERADE
PostDown = ip6tables -D FORWARD -i wireclient -j ACCEPT
PostDown = ip6tables -t nat -D POSTROUTING -o {interface} -j MASQUERADE

[Peer]
PublicKey = {server_public_key}
AllowedIPs = {server_private_ip}/{server_subnet}
Endpoint = {server_public_ip}:{client_port}
"""

    client_config_path = "/etc/wireguard/wireclient.conf"
    write_config(client_config_path, client_config)
    wgclient()
    create_wireguardping_client(server_private_ip)
    wireguardping_client_service()
    print("\033[93m───────────────────────────────────────\033[0m")
    display_checkmark(
        f"\033[92mClient configuration saved to \033[97m{client_config_path}\033[0m"
    )
    print("\033[93m───────────────────────────────────────\033[0m")
    ipsec_choice = (
        input(
            "\033[93mDo you want to configure IPsec? (\033[92myes\033[93m or \033[91mno): \033[0m"
        )
        .strip()
        .lower()
    )

    if ipsec_choice in ["yes", "y"]:
        psk = input("\033[93mEnter IPSEC \033[92mSecret Key\033[93m: \033[0m")
        config_client_wireguard(psk, [server_private_ip], [client_ip], ip_version)
        enable_reset_ipsec()


def wireguard_noconjuction_1iran_5kharej():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print(
        "\033[92m(   ) \033[93mWireguard \033[92m[1]IRAN Server\033[96m [5]Kharej Client\033[93mMenu\033[0m"
    )
    print(
        '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
    )
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[92mKharej Client [1] Config\033[0m")
    print("2. \033[92mKharej Client [2] Config\033[0m")
    print("3. \033[92mKharej Client [3] Config\033[0m")
    print("4. \033[93mKharej Client [4] Config\033[0m")
    print("5. \033[92mKharej Client [5] Config\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    print("6. \033[96mIRAN Server Config\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    print("0.\033[97mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")
    while True:
        server_type = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if server_type == "1":
            wireguard_kharej_client1()
            break
        elif server_type == "2":
            wireguard_kharej_client2()
            break
        elif server_type == "3":
            wireguard_kharej_client3()
            break
        elif server_type == "4":
            wireguard_kharej_client4()
            break
        elif server_type == "5":
            wireguard_kharej_client5()
            break
        elif server_type == "6":
            wireguard_iran_server()
            break
        elif server_type == "0":
            os.system("clear")
            wireguardudp_menu()
            break
        else:
            print("Invalid choice.")


def wireguard_iran_server():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print("\033[92m(   ) \033[93mWireguard \033[92mIRAN Server\033[0m")
    print('\033[92m "-"\033[93m═════════════════════════════════════════\033[0m')
    check_wireguard_installed()
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")

    ip_versions = set()
    server_ips = []
    client_ips = []

    num_clients = int(
        input("\033[93mEnter the number of \033[92mKharej Clients\033[93m: \033[0m")
    )

    for i in range(1, num_clients + 1):
        server_ip, client_ip, ip_version = servernclient2(i)
        server_ips.append(server_ip)
        client_ips.append(client_ip)
        ip_versions.add(ip_version)
        create_wireguardping_server(client_ip, i)
        wireguardping_server_service(i)
        ufw(server_ip)
        ufw(client_ip)
        server_confpath = f"/etc/wireguard/wireserver{num_clients}.conf"
        display_checkmark(
            f"\033[92mServer configuration saved to \033[97m{server_confpath}\033[0m"
        )

    print(f"\033[93m───────────────────────────────────────\033[0m")
    ipsec_choice = (
        input(
            "\033[93mDo you want to configure IPsec? (\033[92myes\033[93m or \033[91mno): \033[0m"
        )
        .strip()
        .lower()
    )

    if ipsec_choice in ["yes", "y"]:
        psk = input("\033[93mEnter IPSEC \033[92mSecret Key\033[93m: \033[0m")
        ip_ver = ip_versions.pop() if ip_versions else "ipv4"
        config_server_wireguard(psk, server_ips, client_ips, ip_ver)
        enable_reset_ipsec()


def wireguard_kharej_client1():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print("\033[92m(   ) \033[93mWireguard \033[92mKharej Client [1]\033[0m")
    print('\033[92m "-"\033[93m═════════════════════════════════════════\033[0m')
    check_wireguard_installed()
    print("\033[93m───────────────────────────────────────\033[0m")
    display_notification("\033[93mConfiguring WireGuard Client\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    server_public_key = user_input(
        "\033[93mEnter \033[92mIRAN Server\033[93m's config \033[96m[1] \033[96mpublic key:\033[0m "
    )
    client_private_key = user_input(
        "\033[93mEnter \033[92mKharej Client\033[96m [1]\033[93m private key:\033[0m "
    )
    server_public_ip = user_input(
        "\033[93mEnter \033[92mIRAN Server\033[93m IPV4 address:\033[0m "
    )
    client_port = user_input(
        "\033[93mEnter the \033[92mTunnel config \033[96m[1] \033[93mport:\033[0m "
    )
    ufwportudp(client_port)
    client_ip, client_subnet, ip_version = ipversion_n_address(
        "\033[93mKharej Client \033[92m[1]\033[0m"
    )
    ufw(client_ip)
    server_private_ip, server_subnet = ipversion_n_address(
        "\033[93mIRAN Server Config \033[92m[1]\033[0m"
    )[:2]
    ufw(server_private_ip)
    print("\033[93m───────────────────────────────────────\033[0m")
    find_interface = input(
        "\033[93mDo you want meh to find the \033[92mmain interface\033[96m automatically\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m"
    )
    if find_interface.lower() == "yes" or find_interface.lower() == "y":
        interface = main_interface()
        if interface is None:
            print("\033[91merror: Couldn't find your network interface.\033[0m")
            return
    else:
        interface = input(
            "\033[93mWhat is your \033[92mmain interface\033[93m? \033[0m"
        )
    print("\033[93m───────────────────────────────────────\033[0m")
    mtu_config = ""
    mtu_choice = input(
        f"\033[93mDo you want to set \033[92mWireguard MTU\033[93m for \033[92mClient\033[96m [1] \033[93m(\033[92myes\033[93m/\033[91mno\033[93m): \033[0m"
    ).lower()
    if mtu_choice in ["yes", "y"]:
        mtu_value = input(
            f"\033[93mEnter MTU value for \033[92mClient\033[96m [1] \033[93m: \033[0m"
        )
        mtu_config = f"MTU = {mtu_value}\n"

    client_config = f"""
[Interface]
PrivateKey = {client_private_key}
Address = {client_ip}/{client_subnet}
ListenPort = {client_port}
{mtu_config}
PostUp = iptables -I INPUT -p udp --dport {client_port} -j ACCEPT
PostUp = iptables -I FORWARD -i {interface} -o wireclient -j ACCEPT
PostUp = iptables -I FORWARD -i wireclient -j ACCEPT
PostUp = iptables -t nat -A POSTROUTING -o {interface} -j MASQUERADE
PostUp = ip6tables -I FORWARD -i wireclient -j ACCEPT
PostUp = ip6tables -t nat -A POSTROUTING -o {interface} -j MASQUERADE
PostDown = iptables -D INPUT -p udp --dport {client_port} -j ACCEPT
PostDown = iptables -D FORWARD -i {interface} -o wireclient -j ACCEPT
PostDown = iptables -D FORWARD -i wireclient -j ACCEPT
PostDown = iptables -t nat -D POSTROUTING -o {interface} -j MASQUERADE
PostDown = ip6tables -D FORWARD -i wireclient -j ACCEPT
PostDown = ip6tables -t nat -D POSTROUTING -o {interface} -j MASQUERADE

[Peer]
PublicKey = {server_public_key}
AllowedIPs = {server_private_ip}/{server_subnet}
Endpoint = {server_public_ip}:{client_port}
"""

    client_config_path = "/etc/wireguard/wireclient.conf"
    write_config(client_config_path, client_config)
    wgclient()
    create_wireguardping_client(server_private_ip)
    wireguardping_client_service()
    print("\033[93m───────────────────────────────────────\033[0m")
    display_checkmark(
        f"\033[92mClient configuration saved to \033[97m{client_config_path}\033[0m"
    )
    print("\033[93m───────────────────────────────────────\033[0m")
    ipsec_choice = (
        input(
            "\033[93mDo you want to configure IPsec? (\033[92myes\033[93m or \033[91mno): \033[0m"
        )
        .strip()
        .lower()
    )

    if ipsec_choice in ["yes", "y"]:
        psk = input("\033[93mEnter IPSEC \033[92mSecret Key\033[93m: \033[0m")
        config_client_wireguard(psk, [server_private_ip], [client_ip], ip_version)
        enable_reset_ipsec()


# kharej client 2


def wireguard_kharej_client2():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print("\033[92m(   ) \033[93mWireguard \033[92mKharej Client [2]\033[0m")
    print('\033[92m "-"\033[93m═════════════════════════════════════════\033[0m')
    check_wireguard_installed()
    print("\033[93m───────────────────────────────────────\033[0m")
    display_notification("\033[93mConfiguring WireGuard Client\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    server_public_key = user_input(
        "\033[93mEnter \033[92mIRAN Server\033[93m's config \033[96m[2] \033[96mpublic key:\033[0m "
    )
    client_private_key = user_input(
        "\033[93mEnter \033[92mKharej Client\033[96m [2]\033[93m private key:\033[0m "
    )
    server_public_ip = user_input(
        "\033[93mEnter \033[92mIRAN Server\033[93m IPV4 address:\033[0m "
    )
    client_port = user_input(
        "\033[93mEnter the \033[92mTunnel config \033[96m[2] \033[93mport:\033[0m "
    )
    ufwportudp(client_port)
    client_ip, client_subnet, ip_version = ipversion_n_address2(
        "\033[93mKharej Client \033[92m[2]\033[0m"
    )
    ufw(client_ip)
    server_private_ip, server_subnet = ipversion_n_address2(
        "\033[93mIRAN Server Config \033[92m[2]\033[0m"
    )[:2]
    ufw(server_private_ip)
    print("\033[93m───────────────────────────────────────\033[0m")
    find_interface = input(
        "\033[93mDo you want meh to find the \033[92mmain interface\033[96m automatically\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m"
    )
    if find_interface.lower() == "yes" or find_interface.lower() == "y":
        interface = main_interface()
        if interface is None:
            print("\033[91merror: Couldn't find your network interface.\033[0m")
            return
    else:
        interface = input(
            "\033[93mWhat is your \033[92mmain interface\033[93m? \033[0m"
        )
    print("\033[93m───────────────────────────────────────\033[0m")
    mtu_config = ""
    mtu_choice = input(
        f"\033[93mDo you want to set \033[92mWireguard MTU\033[93m for \033[92mClient\033[96m [2] \033[93m(\033[92myes\033[93m/\033[91mno\033[93m): \033[0m"
    ).lower()
    if mtu_choice in ["yes", "y"]:
        mtu_value = input(
            f"\033[93mEnter MTU value for \033[92mClient\033[96m [2] \033[93m: \033[0m"
        )
        mtu_config = f"MTU = {mtu_value}\n"

    client_config = f"""
[Interface]
PrivateKey = {client_private_key}
Address = {client_ip}/{client_subnet}
ListenPort = {client_port}
{mtu_config}
PostUp = iptables -I INPUT -p udp --dport {client_port} -j ACCEPT
PostUp = iptables -I FORWARD -i {interface} -o wireclient -j ACCEPT
PostUp = iptables -I FORWARD -i wireclient -j ACCEPT
PostUp = iptables -t nat -A POSTROUTING -o {interface} -j MASQUERADE
PostUp = ip6tables -I FORWARD -i wireclient -j ACCEPT
PostUp = ip6tables -t nat -A POSTROUTING -o {interface} -j MASQUERADE
PostDown = iptables -D INPUT -p udp --dport {client_port} -j ACCEPT
PostDown = iptables -D FORWARD -i {interface} -o wireclient -j ACCEPT
PostDown = iptables -D FORWARD -i wireclient -j ACCEPT
PostDown = iptables -t nat -D POSTROUTING -o {interface} -j MASQUERADE
PostDown = ip6tables -D FORWARD -i wireclient -j ACCEPT
PostDown = ip6tables -t nat -D POSTROUTING -o {interface} -j MASQUERADE

[Peer]
PublicKey = {server_public_key}
AllowedIPs = {server_private_ip}/{server_subnet}
Endpoint = {server_public_ip}:{client_port}
"""

    client_config_path = "/etc/wireguard/wireclient.conf"
    write_config(client_config_path, client_config)
    wgclient()
    create_wireguardping_client(server_private_ip)
    wireguardping_client_service()
    print("\033[93m───────────────────────────────────────\033[0m")
    display_checkmark(
        f"\033[92mClient configuration saved to \033[97m{client_config_path}\033[0m"
    )
    print("\033[93m───────────────────────────────────────\033[0m")
    ipsec_choice = (
        input(
            "\033[93mDo you want to configure IPsec? (\033[92myes\033[93m or \033[91mno): \033[0m"
        )
        .strip()
        .lower()
    )

    if ipsec_choice in ["yes", "y"]:
        psk = input("\033[93mEnter IPSEC \033[92mSecret Key\033[93m: \033[0m")
        config_client_wireguard(psk, [server_private_ip], [client_ip], ip_version)
        enable_reset_ipsec()


# kharej client 3


def wireguard_kharej_client3():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print("\033[92m(   ) \033[93mWireguard \033[92mKharej Client [3]\033[0m")
    print('\033[92m "-"\033[93m═════════════════════════════════════════\033[0m')
    check_wireguard_installed()
    print("\033[93m───────────────────────────────────────\033[0m")
    display_notification("\033[93mConfiguring WireGuard Client\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    server_public_key = user_input(
        "\033[93mEnter \033[92mIRAN Server\033[93m's config \033[96m[3] \033[96mpublic key:\033[0m "
    )
    client_private_key = user_input(
        "\033[93mEnter \033[92mKharej Client\033[96m [3]\033[93m private key:\033[0m "
    )
    server_public_ip = user_input(
        "\033[93mEnter \033[92mIRAN Server\033[93m IPV4 address:\033[0m "
    )
    client_port = user_input(
        "\033[93mEnter the \033[92mTunnel config \033[96m[3] \033[93mport:\033[0m "
    )
    ufwportudp(client_port)
    client_ip, client_subnet, ip_version = ipversion_n_address3(
        "\033[93mKharej Client \033[92m[3]\033[0m"
    )
    ufw(client_ip)
    server_private_ip, server_subnet = ipversion_n_address3(
        "\033[93mIRAN Server Config \033[92m[3]\033[0m"
    )[:2]
    ufw(server_private_ip)
    print("\033[93m───────────────────────────────────────\033[0m")
    find_interface = input(
        "\033[93mDo you want meh to find the \033[92mmain interface\033[96m automatically\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m"
    )
    if find_interface.lower() == "yes" or find_interface.lower() == "y":
        interface = main_interface()
        if interface is None:
            print("\033[91merror: Couldn't find your network interface.\033[0m")
            return
    else:
        interface = input(
            "\033[93mWhat is your \033[92mmain interface\033[93m? \033[0m"
        )
    print("\033[93m───────────────────────────────────────\033[0m")
    mtu_config = ""
    mtu_choice = input(
        f"\033[93mDo you want to set \033[92mWireguard MTU\033[93m for \033[92mClient\033[96m [3] \033[93m(\033[92myes\033[93m/\033[91mno\033[93m): \033[0m"
    ).lower()
    if mtu_choice in ["yes", "y"]:
        mtu_value = input(
            f"\033[93mEnter MTU value for \033[92mClient\033[96m [3] \033[93m: \033[0m"
        )
        mtu_config = f"MTU = {mtu_value}\n"

    client_config = f"""
[Interface]
PrivateKey = {client_private_key}
Address = {client_ip}/{client_subnet}
ListenPort = {client_port}
{mtu_config}
PostUp = iptables -I INPUT -p udp --dport {client_port} -j ACCEPT
PostUp = iptables -I FORWARD -i {interface} -o wireclient -j ACCEPT
PostUp = iptables -I FORWARD -i wireclient -j ACCEPT
PostUp = iptables -t nat -A POSTROUTING -o {interface} -j MASQUERADE
PostUp = ip6tables -I FORWARD -i wireclient -j ACCEPT
PostUp = ip6tables -t nat -A POSTROUTING -o {interface} -j MASQUERADE
PostDown = iptables -D INPUT -p udp --dport {client_port} -j ACCEPT
PostDown = iptables -D FORWARD -i {interface} -o wireclient -j ACCEPT
PostDown = iptables -D FORWARD -i wireclient -j ACCEPT
PostDown = iptables -t nat -D POSTROUTING -o {interface} -j MASQUERADE
PostDown = ip6tables -D FORWARD -i wireclient -j ACCEPT
PostDown = ip6tables -t nat -D POSTROUTING -o {interface} -j MASQUERADE

[Peer]
PublicKey = {server_public_key}
AllowedIPs = {server_private_ip}/{server_subnet}
Endpoint = {server_public_ip}:{client_port}
"""

    client_config_path = "/etc/wireguard/wireclient.conf"
    write_config(client_config_path, client_config)
    wgclient()
    create_wireguardping_client(server_private_ip)
    wireguardping_client_service()
    print("\033[93m───────────────────────────────────────\033[0m")
    display_checkmark(
        f"\033[92mClient configuration saved to \033[97m{client_config_path}\033[0m"
    )
    print("\033[93m───────────────────────────────────────\033[0m")
    ipsec_choice = (
        input(
            "\033[93mDo you want to configure IPsec? (\033[92myes\033[93m or \033[91mno): \033[0m"
        )
        .strip()
        .lower()
    )

    if ipsec_choice in ["yes", "y"]:
        psk = input("\033[93mEnter IPSEC \033[92mSecret Key\033[93m: \033[0m")
        config_client_wireguard(psk, [server_private_ip], [client_ip], ip_version)
        enable_reset_ipsec()


# kharej client 4
def wireguard_kharej_client4():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print("\033[92m(   ) \033[93mWireguard \033[92mKharej Client [4]\033[0m")
    print('\033[92m "-"\033[93m═════════════════════════════════════════\033[0m')
    check_wireguard_installed()
    print("\033[93m───────────────────────────────────────\033[0m")
    display_notification("\033[93mConfiguring WireGuard Client\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    server_public_key = user_input(
        "\033[93mEnter \033[92mIRAN Server\033[93m's config \033[96m[4] \033[96mpublic key:\033[0m "
    )
    client_private_key = user_input(
        "\033[93mEnter \033[92mKharej Client\033[96m [4]\033[93m private key:\033[0m "
    )
    server_public_ip = user_input(
        "\033[93mEnter \033[92mIRAN Server\033[93m IPV4 address:\033[0m "
    )
    client_port = user_input(
        "\033[93mEnter the \033[92mTunnel config \033[96m[4] \033[93mport:\033[0m "
    )
    ufwportudp(client_port)
    client_ip, client_subnet, ip_version = ipversion_n_address4(
        "\033[93mKharej Client \033[92m[4]\033[0m"
    )
    ufw(client_ip)
    server_private_ip, server_subnet = ipversion_n_address4(
        "\033[93mIRAN Server Config \033[92m[4]\033[0m"
    )[:2]
    ufw(server_private_ip)
    print("\033[93m───────────────────────────────────────\033[0m")
    find_interface = input(
        "\033[93mDo you want meh to find the \033[92mmain interface\033[96m automatically\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m"
    )
    if find_interface.lower() == "yes" or find_interface.lower() == "y":
        interface = main_interface()
        if interface is None:
            print("\033[91merror: Couldn't find your network interface.\033[0m")
            return
    else:
        interface = input(
            "\033[93mWhat is your \033[92mmain interface\033[93m? \033[0m"
        )
    print("\033[93m───────────────────────────────────────\033[0m")
    mtu_config = ""
    mtu_choice = input(
        f"\033[93mDo you want to set \033[92mWireguard MTU\033[93m for \033[92mClient\033[96m [4] \033[93m(\033[92myes\033[93m/\033[91mno\033[93m): \033[0m"
    ).lower()
    if mtu_choice in ["yes", "y"]:
        mtu_value = input(
            f"\033[93mEnter MTU value for \033[92mClient\033[96m [4] \033[93m: \033[0m"
        )
        mtu_config = f"MTU = {mtu_value}\n"

    client_config = f"""
[Interface]
PrivateKey = {client_private_key}
Address = {client_ip}/{client_subnet}
ListenPort = {client_port}
{mtu_config}
PostUp = iptables -I INPUT -p udp --dport {client_port} -j ACCEPT
PostUp = iptables -I FORWARD -i {interface} -o wireclient -j ACCEPT
PostUp = iptables -I FORWARD -i wireclient -j ACCEPT
PostUp = iptables -t nat -A POSTROUTING -o {interface} -j MASQUERADE
PostUp = ip6tables -I FORWARD -i wireclient -j ACCEPT
PostUp = ip6tables -t nat -A POSTROUTING -o {interface} -j MASQUERADE
PostDown = iptables -D INPUT -p udp --dport {client_port} -j ACCEPT
PostDown = iptables -D FORWARD -i {interface} -o wireclient -j ACCEPT
PostDown = iptables -D FORWARD -i wireclient -j ACCEPT
PostDown = iptables -t nat -D POSTROUTING -o {interface} -j MASQUERADE
PostDown = ip6tables -D FORWARD -i wireclient -j ACCEPT
PostDown = ip6tables -t nat -D POSTROUTING -o {interface} -j MASQUERADE

[Peer]
PublicKey = {server_public_key}
AllowedIPs = {server_private_ip}/{server_subnet}
Endpoint = {server_public_ip}:{client_port}
"""

    client_config_path = "/etc/wireguard/wireclient.conf"
    write_config(client_config_path, client_config)
    wgclient()
    create_wireguardping_client(server_private_ip)
    wireguardping_client_service()
    print("\033[93m───────────────────────────────────────\033[0m")
    display_checkmark(
        f"\033[92mClient configuration saved to \033[97m{client_config_path}\033[0m"
    )
    print("\033[93m───────────────────────────────────────\033[0m")
    ipsec_choice = (
        input(
            "\033[93mDo you want to configure IPsec? (\033[92myes\033[93m or \033[91mno): \033[0m"
        )
        .strip()
        .lower()
    )

    if ipsec_choice in ["yes", "y"]:
        psk = input("\033[93mEnter IPSEC \033[92mSecret Key\033[93m: \033[0m")
        config_client_wireguard(psk, [server_private_ip], [client_ip], ip_version)
        enable_reset_ipsec()


# kharej client 5


def wireguard_kharej_client5():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print("\033[92m(   ) \033[93mWireguard \033[92mKharej Client [5]\033[0m")
    print('\033[92m "-"\033[93m═════════════════════════════════════════\033[0m')
    check_wireguard_installed()
    print("\033[93m───────────────────────────────────────\033[0m")
    display_notification("\033[93mConfiguring WireGuard Client\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    server_public_key = user_input(
        "\033[93mEnter \033[92mIRAN Server\033[93m's config \033[96m[5] \033[96mpublic key:\033[0m "
    )
    client_private_key = user_input(
        "\033[93mEnter \033[92mKharej Client\033[96m [5]\033[93m private key:\033[0m "
    )
    server_public_ip = user_input(
        "\033[93mEnter \033[92mIRAN Server\033[93m IPV4 address:\033[0m "
    )
    client_port = user_input(
        "\033[93mEnter the \033[92mTunnel config \033[96m[5] \033[93mport:\033[0m "
    )
    ufwportudp(client_port)
    client_ip, client_subnet, ip_version = ipversion_n_address5(
        "\033[93mKharej Client \033[92m[5]\033[0m"
    )
    ufw(client_ip)
    server_private_ip, server_subnet = ipversion_n_address5(
        "\033[93mIRAN Server Config \033[92m[5]\033[0m"
    )[:2]
    ufw(server_private_ip)
    print("\033[93m───────────────────────────────────────\033[0m")
    find_interface = input(
        "\033[93mDo you want meh to find the \033[92mmain interface\033[96m automatically\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m"
    )
    if find_interface.lower() == "yes" or find_interface.lower() == "y":
        interface = main_interface()
        if interface is None:
            print("\033[91merror: Couldn't find your network interface.\033[0m")
            return
    else:
        interface = input(
            "\033[93mWhat is your \033[92mmain interface\033[93m? \033[0m"
        )
    print("\033[93m───────────────────────────────────────\033[0m")
    mtu_config = ""
    mtu_choice = input(
        f"\033[93mDo you want to set \033[92mWireguard MTU\033[93m for \033[92mClient\033[96m [5] \033[93m(\033[92myes\033[93m/\033[91mno\033[93m): \033[0m"
    ).lower()
    if mtu_choice in ["yes", "y"]:
        mtu_value = input(
            f"\033[93mEnter MTU value for \033[92mClient\033[96m [5] \033[93m: \033[0m"
        )
        mtu_config = f"MTU = {mtu_value}\n"

    client_config = f"""
[Interface]
PrivateKey = {client_private_key}
Address = {client_ip}/{client_subnet}
ListenPort = {client_port}
{mtu_config}
PostUp = iptables -I INPUT -p udp --dport {client_port} -j ACCEPT
PostUp = iptables -I FORWARD -i {interface} -o wireclient -j ACCEPT
PostUp = iptables -I FORWARD -i wireclient -j ACCEPT
PostUp = iptables -t nat -A POSTROUTING -o {interface} -j MASQUERADE
PostUp = ip6tables -I FORWARD -i wireclient -j ACCEPT
PostUp = ip6tables -t nat -A POSTROUTING -o {interface} -j MASQUERADE
PostDown = iptables -D INPUT -p udp --dport {client_port} -j ACCEPT
PostDown = iptables -D FORWARD -i {interface} -o wireclient -j ACCEPT
PostDown = iptables -D FORWARD -i wireclient -j ACCEPT
PostDown = iptables -t nat -D POSTROUTING -o {interface} -j MASQUERADE
PostDown = ip6tables -D FORWARD -i wireclient -j ACCEPT
PostDown = ip6tables -t nat -D POSTROUTING -o {interface} -j MASQUERADE

[Peer]
PublicKey = {server_public_key}
AllowedIPs = {server_private_ip}/{server_subnet}
Endpoint = {server_public_ip}:{client_port}
"""

    client_config_path = "/etc/wireguard/wireclient.conf"
    write_config(client_config_path, client_config)
    wgclient()
    create_wireguardping_client(server_private_ip)
    wireguardping_client_service()
    print("\033[93m───────────────────────────────────────\033[0m")
    display_checkmark(
        f"\033[92mClient configuration saved to \033[97m{client_config_path}\033[0m"
    )
    print("\033[93m───────────────────────────────────────\033[0m")
    ipsec_choice = (
        input(
            "\033[93mDo you want to configure IPsec? (\033[92myes\033[93m or \033[91mno): \033[0m"
        )
        .strip()
        .lower()
    )

    if ipsec_choice in ["yes", "y"]:
        psk = input("\033[93mEnter IPSEC \033[92mSecret Key\033[93m: \033[0m")
        config_client_wireguard(psk, [server_private_ip], [client_ip], ip_version)
        enable_reset_ipsec()


def write_config(file_path, content):
    with open(file_path, "w") as file:
        file.write(content)


##wireguard end
wireguard_allinone_mnu()
