####Edit
import sys
import re
import os
import shutil
import time
import colorama
from colorama import Fore, Style
import subprocess
from time import sleep
import readline
import netifaces
import netifaces as ni
import io
import ipaddress


sys.stdout = io.TextIOWrapper(sys.stdout.detach(), encoding="utf-8", errors="replace")

if os.geteuid() != 0:
    print("\033[91mThis script must be run as root. Please use sudo -i.\033[0m")
    sys.exit(1)


def logo():
    logo_path = "/etc/logo2.sh"
    try:
        subprocess.run(["bash", "-c", logo_path], check=True)
    except subprocess.CalledProcessError as e:
        return e

    return None

def edit_local():
    os.system("clear")
    logo()
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print("\033[92m(   ) \033[92mEdit local\033[93m Menu\033[0m")
    print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[92mSingle\033[0m")
    print("2. \033[93mMulti\033[0m")
    print("3. \033[94mback to the main script\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        choice = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if choice == "1":
            single_edit_local()
            break
        elif choice == "2":
            multi_edit_local()
            break
        elif choice == "3":
            clear()
            os._exit(0)
            break
        else:
            print("Invalid choice.")


def clear():
    subprocess.run(["clear"])


def single_edit_local():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print("\033[92m(   ) \033[92mEdit local\033[93m Single Menu\033[0m")
    print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[92mPrivate\033[93m[Sit]\033[0m")
    print("2. \033[93mIP6IP6\033[0m")
    print("3. \033[92mGRE6\033[0m")
    print("4. \033[93mGRE6TAP IPV4\033[0m")
    print("5. \033[93mGRE6TAP Native\033[0m")
    print("6. \033[92mGeneve UDP \033[0m")
    print("7. \033[93mIPV4 + Geneve + GRE6 [Private IPV6]\033[0m")
    print("8. \033[92mVxlan FDB\033[0m")
    print("9. \033[93mVxlan P2P\033[0m")
    print("0. \033[94mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        choice = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if choice == "1":
            private_edit_local()
            break
        elif choice == "2":
            ip6ip6_edit_local()
            break
        elif choice == "3":
            gre6_edit_local()
            break
        elif choice == "4":
            gre6tap_edit_local()
            break
        elif choice == "5":
            gre6tapn_edit_local()
            break
        elif choice == "6":
            gen_edit_localmenu()
            break
        elif choice == "7":
            gengre_edit_local()
            break
        elif choice == "8":
            vxfdb_edit_local()
            break
        elif choice == "9":
            vxp2p_edit_local()
            break
        elif choice == "0":
            clear()
            edit_local()
            break
        else:
            print("Invalid choice.")


def private_edit_local():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print("\033[92m(   ) \033[92mEdit local\033[93m Private Menu\033[0m")
    print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[92mNo IPSEC\033[0m")
    print("2. \033[93mWith IPSEC\033[0m")
    print("3. \033[94mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        choice = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if choice == "1":
            privatenosec_edit_local()
            break
        elif choice == "2":
            privatesec_edit_local()
            break
        elif choice == "3":
            clear()
            single_edit_local()
            break
        else:
            print("Invalid choice.")


def privatenosec_edit_local():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print("\033[92m(   ) \033[92mEdit local\033[93m Private Menu\033[0m")
    print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[92mKharej\033[0m")
    print("2. \033[93mIRAN\033[0m")
    print("3. \033[94mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        choice = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if choice == "1":
            privatenosec_edit_localkharej()
            break
        elif choice == "2":
            privatenosec_edit_localiran()
            break
        elif choice == "3":
            clear()
            private_edit_local()
            break
        else:
            print("Invalid choice.")


def privatesec_edit_local():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print("\033[92m(   ) \033[92mEdit local\033[93m Private + IPSEC Menu\033[0m")
    print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[92mKharej\033[0m")
    print("2. \033[93mIRAN\033[0m")
    print("3. \033[94mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        choice = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if choice == "1":
            privatesec_edit_localkharej()
            break
        elif choice == "2":
            privatesec_edit_localiran()
            break
        elif choice == "3":
            clear()
            private_edit_local()
            break
        else:
            print("Invalid choice.")


def wtb_opposite_ip(ip):
    if ":" in ip:  # IPv6
        ip_parts = ip.split(":")
        ip_parts[-1] = "1" if ip_parts[-1] == "2" else "2"
        return ":".join(ip_parts)
    else:  # IPv4
        ip_parts = ip.split(".")
        ip_parts[-1] = "1" if ip_parts[-1] == "2" else "2"
        return ".".join(ip_parts)


def local_ip(name):
    try:
        with open(name, "r") as f:
            content = f.read()
        match = re.search(r"local (\S+)", content)
        if match:
            return match.group(1)
        else:
            print(f"\033[91mno local IP found\033[0m")
    except FileNotFoundError:
        print(f"file {name} doesn't exist")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")
    return None


def private_ip(name):
    try:
        with open(name, "r") as f:
            content = f.read()
        match = re.search(r"ip (-6 )?addr add (\S+)/64 dev azumi?", content)
        if match:
            return match.group(2)
        else:
            print(f"\033[91mno private IP found\033[0m")
    except FileNotFoundError:
        print(f"file {name} doesn't exist")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")
    return None


def remote_ip(name):
    try:
        with open(name, "r") as f:
            content = f.read()
        match = re.search(r"remote (\S+)", content)
        if match:
            return match.group(1)
        else:
            print("\033[91mno remote IP found \033[0m")
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")
    return None


def get_current_private_ips():
    private_ip_private = private_ip("/etc/private.sh")

    return {
        "private": private_ip_private,
    }


def delete_ufw_rules(ip):
    counterpart_ip = wtb_opposite_ip(ip)
    try:
        subprocess.run(["sudo", "ufw", "delete", "allow", "from", ip], check=False)
        subprocess.run(
            ["sudo", "ufw", "delete", "allow", "from", counterpart_ip], check=False
        )
    except subprocess.CalledProcessError as e:
        print(f"\033[91merror deleting UFW rules: {e}\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def add_ufw_rules(ip):
    counterpart_ip = wtb_opposite_ip(ip)
    try:
        subprocess.run(["sudo", "ufw", "allow", "from", ip], check=True)
        subprocess.run(["sudo", "ufw", "allow", "from", counterpart_ip], check=True)
    except subprocess.CalledProcessError as e:
        print(f"\033[91merror adding UFW rules: {e}\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def update_ipfile_sit(name, new_ip, update_type):
    try:
        with open(name, "r") as f:
            content = f.read()

        if update_type == "private":
            new_content = re.sub(
                r"ip (-6 )?addr add [^ ]+/64 dev azumi?",
                f"ip -6 addr add {new_ip}/64 dev azumi",
                content,
            )
            ip_parts = new_ip.split(":")
            if new_ip.endswith(":2"):
                ip_parts[-1] = "1"
            else:
                ip_parts[-1] = "2"
            counterpart_ip = ":".join(ip_parts)
            new_content = re.sub(
                r"ip (-6 )?route add [^ ]+/64 dev azumi?",
                f"ip -6 route add {counterpart_ip}/64 dev azumi",
                new_content,
            )
        elif update_type == "local":
            new_content = re.sub(r"local \S+", f"local {new_ip}", content)
        elif update_type == "remote":
            new_content = re.sub(r"remote \S+", f"remote {new_ip}", content)

        with open(name, "w") as f:
            f.write(new_content)
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def update_pingfile_sit(name, new_ip):
    try:
        with open(name, "r") as f:
            content = f.read()

        new_content = re.sub(r'ip_address="[^"]+"', f'ip_address="{new_ip}"', content)

        with open(name, "w") as f:
            f.write(new_content)
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def display_stuff_privateiran(local_ip, remote_ip, private_ip):
    lines = [
        f"\033[93mTitle:         SIT Configuration\033[0m",
        f"\033[97m──────────────────────────────────────\033[0m",
        f"\033[92mIRAN Public IP:     \033[97m{local_ip}\033[0m",
        f"\033[92mKHAREJ Public IP:   \033[97m{remote_ip}\033[0m",
        f"\033[93mSIT Private IP:     \033[97m{private_ip}\033[0m",
    ]
    box_width = 50

    print("\033[93m╭" + "─" * (box_width - 2) + "╮\033[0m")

    for line in lines:
        print(f"\033[93m {line:<{box_width - 4}} \033[0m")

    print("\033[93m╰" + "─" * (box_width - 2) + "╯\033[0m")


def display_stuff_privatekharej(local_ip, remote_ip, private_ip):
    lines = [
        f"\033[93mTitle:         SIT Configuration\033[0m",
        f"\033[97m──────────────────────────────────────\033[0m",
        f"\033[92mKharej Public IP:   \033[97m{local_ip}\033[0m",
        f"\033[92mIRAN Public IP:     \033[97m{remote_ip}\033[0m",
        f"\033[93mSIT Private IP:     \033[97m{private_ip}\033[0m",
    ]
    box_width = 50

    print("\033[93m╭" + "─" * (box_width - 2) + "╮\033[0m")

    for line in lines:
        print(f"\033[93m {line:<{box_width - 4}} \033[0m")

    print("\033[93m╰" + "─" * (box_width - 2) + "╯\033[0m")


def display_checkmark(message):
    print("\u2714 " + message)


def animate(message):
    for char in message:
        print(char, end="", flush=True)
        time.sleep(0.05)
    print()


def save_stuff_sit(private_ip, local_ip, remote_ip):
    current_ips = get_current_private_ips()
    current_ip = current_ips["private"]

    if current_ip:
        delete_ufw_rules(current_ip)

    add_ufw_rules(private_ip)

    counterpart_ip = wtb_opposite_ip(private_ip)
    try:
        update_pingfile_sit("/etc/ping_v6.sh", counterpart_ip)
        update_ipfile_sit("/etc/private.sh", private_ip, update_type="private")
        update_ipfile_sit("/etc/private.sh", local_ip, update_type="local")
        update_ipfile_sit("/etc/private.sh", remote_ip, update_type="remote")

        interface = "azumi"
        try:
            subprocess.run(["ip", "link", "set", "dev", interface, "down"], check=True)
            subprocess.run(["ip", "link", "delete", interface], check=True)
        except subprocess.CalledProcessError as e:
            print("\033[91merror bringing interface down or deleting it\033[0m")

        script = "/etc/private.sh"
        result = subprocess.run(["/bin/bash", script], capture_output=True, text=True)
        if "RTNETLINK answers: File exists" in result.stderr:
            print("interface already exists, don't mind this")
        else:
            result.check_returncode()
        subprocess.run(["sudo", "systemctl", "daemon-reload"], check=True)
        subprocess.run(["systemctl", "restart", "ping_v6"], check=True)
        display_checkmark(
            f"\033[92mChanges saved and {interface} interface updated successfully!\033[0m"
        )
    except subprocess.CalledProcessError as e:
        print(f"\033[91merror applying network stuff\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def privatenosec_edit_localiran():
    local_ip_private = local_ip("/etc/private.sh")
    remote_ip_private = remote_ip("/etc/private.sh")
    private_ip_private = private_ip("/etc/private.sh")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    while True:
        os.system("clear")
        display_stuff_privateiran(
            local_ip_private, remote_ip_private, private_ip_private
        )

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mPrivate[SIT]\033[93m IRAN Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN \033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mKHAREJ \033[92m Public IP\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IP \033[0m")
        print("4. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local single menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mIRAN\033[93m Public IP :\033[0m ")
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input("\033[93mEnter \033[92mKHAREJ\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            save_stuff_sit(private_ip_private, local_ip_private, remote_ip_private)
            break
        elif choice == "0":
            clear()
            single_edit_local()
            break
        else:
            print("Please select a valid option.")


def privatenosec_edit_localkharej():
    local_ip_private = local_ip("/etc/private.sh")
    remote_ip_private = remote_ip("/etc/private.sh")
    private_ip_private = private_ip("/etc/private.sh")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    while True:
        os.system("clear")
        display_stuff_privatekharej(
            local_ip_private, remote_ip_private, private_ip_private
        )

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mPrivate[SIT]\033[93m Kharej Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej \033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mIRAN \033[92m Public IP\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IP \033[0m")
        print("4. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local single menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mKharej\033[93m Public IP :\033[0m ")
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input("\033[93mEnter \033[92mIRAN\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            save_stuff_sit(private_ip_private, local_ip_private, remote_ip_private)
            break
        elif choice == "0":
            clear()
            single_edit_local()
            break
        else:
            print("Please select a valid option.")


# ipsec sit menu
def ipsecsecret_key(name):
    try:
        with open(name, "r") as f:
            content = f.read()
        match = re.search(r'PSK "(\S+)"', content)
        if match:
            return match.group(1)
        else:
            print("\033[91mno IPsec key found\033[0m")
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")
    return None


def update_ipsecsecret(name, new_secret):
    try:
        with open(name, "r") as f:
            content = f.read()

        new_content = re.sub(r'PSK "\S+"', f'PSK "{new_secret}"', content)

        with open(name, "w") as f:
            f.write(new_content)
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def update_ipsec_conf_sitv6(name, new_private_ip):
    try:
        with open(name, "r") as f:
            content = f.read()

        ip_parts = new_private_ip.split(":")
        if new_private_ip.endswith(":2"):
            ip_parts[-1] = "1"
        else:
            ip_parts[-1] = "2"
        counterpart_ip = ":".join(ip_parts)

        new_content = re.sub(
            r"leftsubnet=\S+", f"leftsubnet={new_private_ip}/64", content
        )
        new_content = re.sub(r"leftid=\S+", f"leftid={new_private_ip}", new_content)
        new_content = re.sub(r"right=\S+", f"right={counterpart_ip}", new_content)
        new_content = re.sub(
            r"rightsubnet=\S+", f"rightsubnet={counterpart_ip}/64", new_content
        )

        with open(name, "w") as f:
            f.write(new_content)
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def save_stuff_sitsec(private_ip, local_ip, remote_ip, ipsecsecret):
    current_ips = get_current_private_ips()
    current_ip = current_ips["private"]

    if current_ip:
        delete_ufw_rules(current_ip)

    add_ufw_rules(private_ip)

    counterpart_ip = wtb_opposite_ip(private_ip)
    try:
        update_pingfile_sit("/etc/ping_v6.sh", counterpart_ip)
        update_ipfile_sit("/etc/private.sh", private_ip, update_type="private")
        update_ipfile_sit("/etc/private.sh", local_ip, update_type="local")
        update_ipfile_sit("/etc/private.sh", remote_ip, update_type="remote")
        update_ipsecsecret("/etc/ipsec.secrets", ipsecsecret)
        update_ipsec_conf_sitv6("/etc/ipsec.conf", private_ip)

        interface = "azumi"
        subprocess.run(["ip", "link", "set", "dev", interface, "down"], check=True)
        subprocess.run(["ip", "link", "delete", interface], check=True)
    except subprocess.CalledProcessError as e:
        print("\033[91merror bringing interface down or deleting it\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")

    try:
        script = "/etc/private.sh"
        result = subprocess.run(["/bin/bash", script], capture_output=True, text=True)
        if "RTNETLINK answers: File exists" in result.stderr:
            print("Network interface already exists, don't mind this")
        else:
            result.check_returncode()
        subprocess.run(["sudo", "systemctl", "daemon-reload"], check=True)
        subprocess.run(["systemctl", "restart", "ping_v6"], check=True)
        subprocess.run(["systemctl", "restart", "strongswan-starter"], check=True)

        result = subprocess.run(
            ["systemctl", "list-units", "--full", "--all", "strongswan.service"],
            capture_output=True,
            text=True,
        )
        if "strongswan.service" in result.stdout:
            subprocess.run(["systemctl", "restart", "strongswan"], check=True)
        else:
            print("\033[91mstrongswan service not found. don't mind this error\033[0m")

        display_checkmark(
            f"\033[92mChanges saved and {interface} interface & IPSEC updated successfully!\033[0m"
        )
    except subprocess.CalledProcessError as e:
        print(
            f"error applying network stuff: {e.stderr.strip() if e.stderr else str(e)}"
        )
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def display_ipsecsecret(secret_key):
    box_width = 50
    print("\033[93m╭" + "─" * (box_width - 2) + "╮\033[0m")
    print(f"\033[93m Title:        \033[93m IPsec Secret Key\033[0m")
    print(f"\033[97m──────────────────────────────────────\033[0m")
    print(f"\033[93m IPsec Key:  \033[97m{secret_key}\033[0m")
    print("\033[93m╰" + "─" * (box_width - 2) + "╯\033[0m")


def privatesec_edit_localiran():
    local_ip_private = local_ip("/etc/private.sh")
    remote_ip_private = remote_ip("/etc/private.sh")
    private_ip_private = private_ip("/etc/private.sh")
    ipsecsecret_key_private = ipsecsecret_key("/etc/ipsec.secrets")

    if (
        not local_ip_private
        or not remote_ip_private
        or not private_ip_private
        or not ipsecsecret_key_private
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_privateiran(
            local_ip_private, remote_ip_private, private_ip_private
        )

        display_ipsecsecret(ipsecsecret_key_private)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mPrivate + IPSEC\033[93m IRAN Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN \033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mKHAREJ \033[92m Public IP\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IP \033[0m")
        print("4. \033[93mChange IPsec \033[92mSecret Key\033[0m")
        print("5. \033[96mSave Stuff\033[0m")
        print("0. \033[96mback to local single menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter new private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip

            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mIRAN\033[93m Public IP:\033[0m ")
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input("\033[93mEnter \033[92mKHAREJ\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_secret = input(
                "\033[93mEnter new \033[92mIPsec \033[93mSecret Key: \033[0m"
            )
            if new_secret:
                ipsecsecret_key_private = new_secret
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "5":
            save_stuff_sitsec(
                private_ip_private,
                local_ip_private,
                remote_ip_private,
                ipsecsecret_key_private,
            )
            update_ipsec_ip(private_ip_private)
            break
        elif choice == "0":
            clear()
            single_edit_local()
            break
        else:
            print("Please select a valid option.")


def privatesec_edit_localkharej():
    local_ip_private = local_ip("/etc/private.sh")
    remote_ip_private = remote_ip("/etc/private.sh")
    private_ip_private = private_ip("/etc/private.sh")
    ipsecsecret_key_private = ipsecsecret_key("/etc/ipsec.secrets")

    if (
        not local_ip_private
        or not remote_ip_private
        or not private_ip_private
        or not ipsecsecret_key_private
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_privatekharej(
            local_ip_private, remote_ip_private, private_ip_private
        )

        display_ipsecsecret(ipsecsecret_key_private)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mPrivate + IPSEC\033[93m Kharej Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej \033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mIRAN \033[92m Public IP\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IP \033[0m")
        print("4. \033[93mChange IPsec \033[92mSecret Key\033[0m")
        print("5. \033[96mSave Stuff\033[0m")
        print("0. \033[96mback to local single menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter new private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip

            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mKharej\033[93m Public IP:\033[0m ")
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input("\033[93mEnter \033[92mIRAN\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_secret = input(
                "\033[93mEnter new \033[92mIPsec \033[93mSecret Key: \033[0m"
            )
            if new_secret:
                ipsecsecret_key_private = new_secret
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "5":
            save_stuff_sitsec(
                private_ip_private,
                local_ip_private,
                remote_ip_private,
                ipsecsecret_key_private,
            )
            update_ipsec_ip(private_ip_private)
            break
        elif choice == "0":
            clear()
            single_edit_local()
            break
        else:
            print("Please select a valid option.")


# ipip


def ip6ip6_edit_local():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print("\033[92m(   ) \033[92mEdit local\033[93m IP6IP6 Menu\033[0m")
    print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[92mNo IPSEC\033[0m")
    print("2. \033[93mWith IPSEC\033[0m")
    print("3. \033[94mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        choice = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if choice == "1":
            ipipnosec_edit_local()
            break
        elif choice == "2":
            ipipsec_edit_local()
            break
        elif choice == "3":
            clear()
            single_edit_local()
            break
        else:
            print("Invalid choice.")


def ipipsec_edit_local():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print("\033[92m(   ) \033[92mEdit local\033[93m IP6IP6 Menu\033[0m")
    print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[92mKharej\033[0m")
    print("2. \033[93mIRAN\033[0m")
    print("3. \033[94mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        choice = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if choice == "1":
            ipipsec_edit_localkharej()
            break
        elif choice == "2":
            ipipsec_edit_localiran()
            break
        elif choice == "3":
            clear()
            ip6ip6_edit_local()
            break
        else:
            print("Invalid choice.")


def private_ipip(name):
    try:
        with open(name, "r") as f:
            content = f.read()
        match = re.search(r"ip (-6 )?addr add (\S+)/64 dev azumip?", content)
        if match:
            return match.group(2)
        else:
            print(f"\033[91mno private IP found\033[0m")
    except FileNotFoundError:
        print(f"\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")
    return None


def update_ipfile_ipip(name, new_ip, update_type):
    try:
        with open(name, "r") as f:
            content = f.read()

        if update_type == "private":
            new_content = re.sub(
                r"ip (-6 )?addr add [^ ]+/64 dev azumi?",
                f"ip -6 addr add {new_ip}/64 dev azumi",
                content,
            )
            ip_parts = new_ip.split(":")
            if new_ip.endswith(":2"):
                ip_parts[-1] = "1"
            else:
                ip_parts[-1] = "2"
            counterpart_ip = ":".join(ip_parts)
            new_content = re.sub(
                r"ip (-6 )?route add [^ ]+/64 dev azumi?",
                f"ip -6 route add {counterpart_ip}/64 dev azumi",
                new_content,
            )
            update_ipfile_ipip("/etc/ipip.sh", new_ip, update_type="ipip_local")
            update_ipfile_ipip(
                "/etc/ipip.sh", counterpart_ip, update_type="ipip_remote"
            )
        elif update_type == "local":
            new_content = re.sub(r"local \S+", f"local {new_ip}", content)
        elif update_type == "remote":
            new_content = re.sub(r"remote \S+", f"remote {new_ip}", content)
        elif update_type == "ipip_local":
            new_content = re.sub(r"local \S+", f"local {new_ip}", content)
        elif update_type == "ipip_remote":
            new_content = re.sub(r"remote \S+", f"remote {new_ip}", content)
        elif update_type == "ipsec":
            new_content = re.sub(r"leftsubnet=\S+", f"leftsubnet={new_ip}/64", content)
            new_content = re.sub(r"leftid=\S+", f"leftid={new_ip}", new_content)

            ip_parts = new_ip.split(":")
            if new_ip.endswith(":1"):
                ip_parts[-1] = "2"
            else:
                ip_parts[-1] = "1"
            counterpart_ip = ":".join(ip_parts)
            new_content = re.sub(r"right=\S+", f"right={counterpart_ip}", new_content)
            new_content = re.sub(
                r"rightsubnet=\S+", f"rightsubnet={counterpart_ip}/64", new_content
            )

        with open(name, "w") as f:
            f.write(new_content)
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def get_current_private_ipsipip():
    private_ip_private = private_ipip("/etc/private.sh")
    private_ip_ipip = private_ipip("/etc/ipip.sh")
    return {
        "private": private_ip_private,
        "ipip": private_ip_ipip,
    }


def save_stuff_ipipsec(private_ip, local_ip, remote_ip, is_ipip):
    current_ips = get_current_private_ipsipip()
    current_ip = current_ips["ipip"] if is_ipip else current_ips["private"]

    if current_ip:
        delete_ufw_rules(current_ip)

    add_ufw_rules(private_ip)

    counterpart_ip = wtb_opposite_ip(private_ip)
    try:
        if is_ipip:
            update_pingfile_sit("/etc/ping_ip.sh", counterpart_ip)
            update_ipfile_ipip("/etc/ipip.sh", private_ip, update_type="private")
            update_ipfile_ipip("/etc/ipip.sh", remote_ip, update_type="remote")
            update_ipfile_ipip("/etc/ipsec.conf", private_ip, update_type="ipsec")
        else:
            update_pingfile_sit("/etc/ping_v6.sh", counterpart_ip)
            update_ipfile_ipip("/etc/private.sh", private_ip, update_type="private")
            update_ipfile_ipip("/etc/private.sh", local_ip, update_type="local")
            update_ipfile_ipip("/etc/private.sh", remote_ip, update_type="remote")

        interface = "azumip" if is_ipip else "azumi"
        subprocess.run(["ip", "link", "set", "dev", interface, "down"], check=True)
        subprocess.run(["ip", "link", "delete", interface], check=True)
    except subprocess.CalledProcessError as e:
        print("\033[91merror bringing interface down or deleting it\033[0m")

    try:
        script = "/etc/ipip.sh" if is_ipip else "/etc/private.sh"
        result = subprocess.run(["/bin/bash", script], capture_output=True, text=True)
        if "RTNETLINK answers: File exists" in result.stderr:
            print("\033[91madditional ip already exists. Ignoring this error\033[0m")
        else:
            result.check_returncode()
        display_checkmark(
            f"\033[92mChanges saved and {interface} interface updated successfully!\033[0m"
        )

        subprocess.run(["sudo", "systemctl", "daemon-reload"], check=True)
        subprocess.run(["sudo", "systemctl", "restart", "ping_v6"], check=True)
        subprocess.run(["sudo", "systemctl", "restart", "ping_ip"], check=True)
        subprocess.run(
            ["sudo", "systemctl", "restart", "strongswan-starter"], check=True
        )

        result = subprocess.run(
            ["systemctl", "list-units", "--full", "--all", "strongswan.service"],
            capture_output=True,
            text=True,
        )
        if "strongswan.service" in result.stdout:
            subprocess.run(["sudo", "systemctl", "restart", "strongswan"], check=True)
        else:
            print("\033[91mstrongswan service not found, don't mind this error.\033[0m")

    except subprocess.CalledProcessError as e:
        print(
            f"\033[91merror applying network changes: {e.stderr.strip() if e.stderr else str(e)}\033[0m"
        )
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")
    # animate("\033[92mSystem services reloaded and restarted successfully!\033[0m")


def display_stuff_ip6ip6(local_ip, remote_ip, private_ip):
    lines = [
        f"\033[93mTitle:         IP6IP6 Configuration\033[0m",
        f"\033[97m──────────────────────────────────────\033[0m",
        f"\033[92mLocal IP:       \033[97m{local_ip}\033[0m",
        f"\033[92mRemote IP:      \033[97m{remote_ip}\033[0m",
        f"\033[93mPrivate IP:     \033[97m{private_ip}\033[0m",
    ]
    box_width = 50

    print("\033[93m╭" + "─" * (box_width - 2) + "╮\033[0m")

    for line in lines:
        print(f"\033[93m {line:<{box_width - 4}} \033[0m")

    print("\033[93m╰" + "─" * (box_width - 2) + "╯\033[0m")


def get_ipsecsecret(name):
    try:
        with open(name, "r") as f:
            content = f.read()
        match = re.search(r'PSK "(.*)"', content)
        if match:
            return match.group(1)
        else:
            print("\033[91mno IPsec key found\033[0m")
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")
    return None


def ipipsec_edit_localkharej():
    local_ip_private = local_ip("/etc/private.sh")
    remote_ip_private = remote_ip("/etc/private.sh")
    private_ip_private = private_ip("/etc/private.sh")

    local_ip_ipip = local_ip("/etc/ipip.sh")
    remote_ip_ipip = remote_ip("/etc/ipip.sh")
    private_ip_ipip = private_ipip("/etc/ipip.sh")

    ipsecsecret = get_ipsecsecret("/etc/ipsec.secrets")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("couldn't retrieve IP addresses from private file")
    if not local_ip_ipip or not remote_ip_ipip or not private_ip_ipip:
        print("couldn't retrieve IP addresses from ipip file")
    if not ipsecsecret:
        print("couldn't retrieve IPsec secret key from ipsec file")

    if (
        not local_ip_private
        or not remote_ip_private
        or not private_ip_private
        or not local_ip_ipip
        or not remote_ip_ipip
        or not private_ip_ipip
        or not ipsecsecret
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_privatekharej(
            local_ip_private, remote_ip_private, private_ip_private
        )
        display_stuff_ip6ip6(local_ip_ipip, remote_ip_ipip, private_ip_ipip)

        display_ipsecsecret(ipsecsecret)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mIP6IP6 + IPSEC\033[93m Kharej Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej \033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mIRAN \033[92m Public IP\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[93mChange \033[97mIP6IP6 \033[93mPrivate IPV6\033[0m")
        print("5. \033[93mChange IPSEC \033[92mSecret Key\033[0m")
        print("6. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local single menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_private = new_ip
                ip_parts = new_ip.split(":")
                if new_ip.endswith(":2"):
                    ip_parts[-1] = "1"
                else:
                    ip_parts[-1] = "2"
                counterpart_ip = ":".join(ip_parts)
                local_ip_ipip = new_ip
                remote_ip_ipip = counterpart_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[IP6IP6]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_ipip
                private_ip_ipip = new_ip

                update_ipfile_ipip("/etc/ipsec.conf", new_ip, update_type="ipsec")
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mKharej\033[93m Public IP :\033[0m ")
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input("\033[93mEnter \033[92mIRAN\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "5":
            new_key = input(
                "\033[93mEnter new \033[92mIPsec \033[93mSecret Key: \033[0m"
            )
            if new_key:
                update_ipsecsecret("/etc/ipsec.secrets", new_key)
                ipsecsecret = new_key
            else:
                print("\033[91mCrazy Secret Key\033[0m")
        elif choice == "6":
            save_stuff_ipipsec(
                private_ip_private, local_ip_private, remote_ip_private, is_ipip=False
            )
            save_stuff_ipipsec(
                private_ip_ipip, local_ip_ipip, remote_ip_ipip, is_ipip=True
            )
            update_ipsec_ip(private_ip_ipip)
            break
        elif choice == "0":
            clear()
            single_edit_local()
            break
        else:
            print("Please select a valid option.")


def ipipsec_edit_localiran():
    local_ip_private = local_ip("/etc/private.sh")
    remote_ip_private = remote_ip("/etc/private.sh")
    private_ip_private = private_ip("/etc/private.sh")

    local_ip_ipip = local_ip("/etc/ipip.sh")
    remote_ip_ipip = remote_ip("/etc/ipip.sh")
    private_ip_ipip = private_ipip("/etc/ipip.sh")

    ipsecsecret = get_ipsecsecret("/etc/ipsec.secrets")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("couldn't retrieve IP addresses from private file")
    if not local_ip_ipip or not remote_ip_ipip or not private_ip_ipip:
        print("couldn't retrieve IP addresses from ipip file")
    if not ipsecsecret:
        print("couldn't retrieve IPsec secret key from ipsec file")

    if (
        not local_ip_private
        or not remote_ip_private
        or not private_ip_private
        or not local_ip_ipip
        or not remote_ip_ipip
        or not private_ip_ipip
        or not ipsecsecret
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_privateiran(
            local_ip_private, remote_ip_private, private_ip_private
        )
        display_stuff_ip6ip6(local_ip_ipip, remote_ip_ipip, private_ip_ipip)

        display_ipsecsecret(ipsecsecret)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mIP6IP6 + IPSEC\033[93m IRAN Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN \033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mKHAREJ \033[92m Public IP\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[93mChange \033[97mIP6IP6 \033[93mPrivate IPV6\033[0m")
        print("5. \033[93mChange IPSEC \033[92mSecret Key\033[0m")
        print("6. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local single menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter new private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_private = new_ip
                ip_parts = new_ip.split(":")
                if new_ip.endswith(":2"):
                    ip_parts[-1] = "1"
                else:
                    ip_parts[-1] = "2"
                counterpart_ip = ":".join(ip_parts)
                local_ip_ipip = new_ip
                remote_ip_ipip = counterpart_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter new private IPv6 address \033[96m[IP6IP6]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_ipip
                private_ip_ipip = new_ip

                update_ipfile_ipip("/etc/ipsec.conf", new_ip, update_type="ipsec")
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mIRAN\033[93m Public IP :\033[0m ")
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input("\033[93mEnter \033[92mKHAREJ\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "5":
            new_key = input(
                "\033[93mEnter new \033[92mIPsec \033[93mSecret Key: \033[0m"
            )
            if new_key:
                update_ipsecsecret("/etc/ipsec.secrets", new_key)
                ipsecsecret = new_key
            else:
                print("\033[91mCrazy Secret Key\033[0m")
        elif choice == "6":
            save_stuff_ipipsec(
                private_ip_private, local_ip_private, remote_ip_private, is_ipip=False
            )
            save_stuff_ipipsec(
                private_ip_ipip, local_ip_ipip, remote_ip_ipip, is_ipip=True
            )
            update_ipsec_ip(private_ip_ipip)
            break
        elif choice == "0":
            clear()
            single_edit_local()
            break
        else:
            print("Please select a valid option.")


def ipipnosec_edit_local():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print("\033[92m(   ) \033[92mEdit local\033[93m IP6IP6 Menu\033[0m")
    print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[92mKharej\033[0m")
    print("2. \033[93mIRAN\033[0m")
    print("3. \033[94mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        choice = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if choice == "1":
            ipipnosec_edit_localkharej()
            break
        elif choice == "2":
            ipipnosec_edit_localiran()
            break
        elif choice == "3":
            clear()
            ip6ip6_edit_local()
            break
        else:
            print("Invalid choice.")


def save_stuff_ipip(private_ip, local_ip, remote_ip, is_ipip):
    current_ips = get_current_private_ipsipip()
    current_ip = current_ips["ipip"] if is_ipip else current_ips["private"]

    if current_ip:
        delete_ufw_rules(current_ip)

    add_ufw_rules(private_ip)

    counterpart_ip = wtb_opposite_ip(private_ip)
    try:
        if is_ipip:
            update_pingfile_sit("/etc/ping_ip.sh", counterpart_ip)
            update_ipfile_ipip("/etc/ipip.sh", private_ip, update_type="private")
            update_ipfile_ipip("/etc/ipip.sh", remote_ip, update_type="remote")
        else:
            update_pingfile_sit("/etc/ping_v6.sh", counterpart_ip)
            update_ipfile_ipip("/etc/private.sh", private_ip, update_type="private")
            update_ipfile_ipip("/etc/private.sh", local_ip, update_type="local")
            update_ipfile_ipip("/etc/private.sh", remote_ip, update_type="remote")

        interface = "azumip" if is_ipip else "azumi"
        subprocess.run(["ip", "link", "set", "dev", interface, "down"], check=True)
        subprocess.run(["ip", "link", "delete", interface], check=True)
    except subprocess.CalledProcessError as e:
        print(f"\033[91merror bringing interface down or deleting it: {e}\033[0m")

    try:
        script = "/etc/ipip.sh" if is_ipip else "/etc/private.sh"
        result = subprocess.run(["/bin/bash", script], capture_output=True, text=True)
        if "RTNETLINK answers: File exists" in result.stderr:
            print("\033[91madditional ip already exists. Ignoring this error\033[0m")
        else:
            result.check_returncode()
        display_checkmark(
            f"\033[92mChanges saved and {interface} interface updated successfully!\033[0m"
        )
        subprocess.run(["sudo", "systemctl", "daemon-reload"], check=True)
        subprocess.run(["sudo", "systemctl", "restart", "ping_v6"], check=True)
        subprocess.run(["sudo", "systemctl", "restart", "ping_ip"], check=True)

        # display_checkmark("\033[92mSystem services reloaded and restarted successfully!\033[0m")
    except subprocess.CalledProcessError as e:
        print(
            f"\033[91merror applying network changes: {e.stderr.strip() if e.stderr else str(e)}\033[0m"
        )
    except FileNotFoundError:
        print(f"\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def ipipnosec_edit_localkharej():
    local_ip_private = local_ip("/etc/private.sh")
    remote_ip_private = remote_ip("/etc/private.sh")
    private_ip_private = private_ip("/etc/private.sh")

    local_ip_ipip = local_ip("/etc/ipip.sh")
    remote_ip_ipip = remote_ip("/etc/ipip.sh")
    private_ip_ipip = private_ipip("/etc/ipip.sh")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("couldn't retrieve IP addresses from private file")
    if not local_ip_ipip or not remote_ip_ipip or not private_ip_ipip:
        print("couldn't retrieve IP addresses from ipip file")

    if (
        not local_ip_private
        or not remote_ip_private
        or not private_ip_private
        or not local_ip_ipip
        or not remote_ip_ipip
        or not private_ip_ipip
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_privatekharej(
            local_ip_private, remote_ip_private, private_ip_private
        )
        display_stuff_ip6ip6(local_ip_ipip, remote_ip_ipip, private_ip_ipip)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mIP6IP6\033[93m Kharej Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej \033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mIRAN \033[92m Public IP\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[93mChange \033[97mIP6IP6 \033[93mPrivate IPV6\033[0m")
        print("5. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local single menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_private = new_ip
                ip_parts = new_ip.split(":")
                if new_ip.endswith(":2"):
                    ip_parts[-1] = "1"
                else:
                    ip_parts[-1] = "2"
                counterpart_ip = ":".join(ip_parts)
                local_ip_ipip = new_ip
                remote_ip_ipip = counterpart_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[IP6IP6]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_ipip = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mKharej\033[93m Public IP :\033[0m ")
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input("\033[93mEnter \033[92mIRAN\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "5":
            save_stuff_ipip(
                private_ip_private, local_ip_private, remote_ip_private, is_ipip=False
            )
            save_stuff_ipip(
                private_ip_ipip, local_ip_ipip, remote_ip_ipip, is_ipip=True
            )
            break
        elif choice == "0":
            clear()
            single_edit_local()
            break
        else:
            print("Invalid choice. Please select a valid option.")


def ipipnosec_edit_localiran():
    local_ip_private = local_ip("/etc/private.sh")
    remote_ip_private = remote_ip("/etc/private.sh")
    private_ip_private = private_ip("/etc/private.sh")

    local_ip_ipip = local_ip("/etc/ipip.sh")
    remote_ip_ipip = remote_ip("/etc/ipip.sh")
    private_ip_ipip = private_ipip("/etc/ipip.sh")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("couldn't retrieve IP addresses from private file")
    if not local_ip_ipip or not remote_ip_ipip or not private_ip_ipip:
        print("couldn't retrieve IP addresses from ipip file")

    if (
        not local_ip_private
        or not remote_ip_private
        or not private_ip_private
        or not local_ip_ipip
        or not remote_ip_ipip
        or not private_ip_ipip
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_privateiran(
            local_ip_private, remote_ip_private, private_ip_private
        )
        display_stuff_ip6ip6(local_ip_ipip, remote_ip_ipip, private_ip_ipip)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mIP6IP6\033[93m IRAN Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN \033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mKHAREJ \033[92m Public IP\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[93mChange \033[97mIP6IP6 \033[93mPrivate IPV6\033[0m")
        print("5. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local single menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_private = new_ip
                ip_parts = new_ip.split(":")
                if new_ip.endswith(":2"):
                    ip_parts[-1] = "1"
                else:
                    ip_parts[-1] = "2"
                counterpart_ip = ":".join(ip_parts)
                local_ip_ipip = new_ip
                remote_ip_ipip = counterpart_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[IP6IP6]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_ipip = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mIRAN\033[93m Public IP :\033[0m ")
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input("\033[93mEnter \033[92mKHAREJ\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "5":
            save_stuff_ipip(
                private_ip_private, local_ip_private, remote_ip_private, is_ipip=False
            )
            save_stuff_ipip(
                private_ip_ipip, local_ip_ipip, remote_ip_ipip, is_ipip=True
            )
            break
        elif choice == "0":
            clear()
            single_edit_local()
            break
        else:
            print("Invalid choice. Please select a valid option.")


def gre6_edit_local():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print("\033[92m(   ) \033[92mEdit local\033[93m GRE6 Menu\033[0m")
    print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[92mNo IPSEC\033[0m")
    print("2. \033[93mWith IPSEC\033[0m")
    print("3. \033[94mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        choice = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if choice == "1":
            gre6nosec_edit_local()
            break
        elif choice == "2":
            gre6sec_edit_local()
            break
        elif choice == "3":
            clear()
            single_edit_local()
            break
        else:
            print("Invalid choice.")


def gre6sec_edit_local():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print("\033[92m(   ) \033[92mEdit local\033[93m GRE6 Menu\033[0m")
    print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[92mKharej\033[0m")
    print("2. \033[93mIRAN\033[0m")
    print("3. \033[94mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        choice = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if choice == "1":
            gre6sec_edit_localkharej()
            break
        elif choice == "2":
            gre6sec_edit_localiran()
            break
        elif choice == "3":
            clear()
            gre6_edit_local()
            break
        else:
            print("Invalid choice.")


def private_gre6(name):
    try:
        with open(name, "r") as f:
            content = f.read()
        match = re.search(r"ip -6 addr add (\S+)/64 dev azumig6", content)
        if match:
            return match.group(1)
        else:
            print(f"\033[91mno private IP found\033[0m")
    except FileNotFoundError:
        print("\033[91mPrivate file not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")
    return None


def private(name):
    try:
        with open(name, "r") as f:
            content = f.read()
        match = re.search(r"ip -6 addr add (\S+)/64 dev azumi", content)
        if match:
            return match.group(1)
        else:
            print("\033[91mno private IP found\033[0m")
    except FileNotFoundError:
        print("\033[91mPrivate file not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")
    return None


def update_ipfile_gre6(name, new_ip, update_type):
    try:
        with open(name, "r") as f:
            content = f.read()

        if update_type == "private":
            new_content = re.sub(
                r"ip (-6 )?addr add [^ ]+/64 dev azumi?",
                f"ip -6 addr add {new_ip}/64 dev azumi",
                content,
            )
            ip_parts = new_ip.split(":")
            if new_ip.endswith(":2"):
                ip_parts[-1] = "1"
            else:
                ip_parts[-1] = "2"
            counterpart_ip = ":".join(ip_parts)
            new_content = re.sub(
                r"ip (-6 )?route add [^ ]+/64 dev azumi?",
                f"ip -6 route add {counterpart_ip}/64 dev azumi",
                new_content,
            )
            update_ipfile_gre6("/etc/gre6.sh", new_ip, update_type="gre6_local")
            update_ipfile_gre6(
                "/etc/gre6.sh", counterpart_ip, update_type="gre6_remote"
            )
        elif update_type == "local":
            new_content = re.sub(r"local \S+", f"local {new_ip}", content)
        elif update_type == "remote":
            new_content = re.sub(r"remote \S+", f"remote {new_ip}", content)
        elif update_type == "gre6_local":
            new_content = re.sub(r"local \S+", f"local {new_ip}", content)
        elif update_type == "gre6_remote":
            new_content = re.sub(r"remote \S+", f"remote {new_ip}", content)
        elif update_type == "ipsec":
            new_content = re.sub(r"leftsubnet=\S+", f"leftsubnet={new_ip}/64", content)
            new_content = re.sub(r"leftid=\S+", f"leftid={new_ip}", new_content)

            ip_parts = new_ip.split(":")
            if new_ip.endswith(":1"):
                ip_parts[-1] = "2"
            else:
                ip_parts[-1] = "1"
            counterpart_ip = ":".join(ip_parts)
            new_content = re.sub(r"right=\S+", f"right={counterpart_ip}", new_content)
            new_content = re.sub(
                r"rightsubnet=\S+", f"rightsubnet={counterpart_ip}/64", new_content
            )

        with open(name, "w") as f:
            f.write(new_content)
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def get_current_private_ipsgre6():
    private_ip_private = private("/etc/private.sh")
    private_ip_gre6 = private_gre6("/etc/gre6.sh")
    return {
        "private": private_ip_private,
        "gre6": private_ip_gre6,
    }


def save_stuff_gre6sec(private_ip, local_ip, remote_ip, is_gre6):
    current_ips = get_current_private_ipsgre6()
    current_ip = current_ips["gre6"] if is_gre6 else current_ips["private"]

    if current_ip:
        delete_ufw_rules(current_ip)

    add_ufw_rules(private_ip)

    counterpart_ip = wtb_opposite_ip(private_ip)
    try:
        if is_gre6:
            update_pingfile_sit("/etc/ping_ip.sh", counterpart_ip)
            update_ipfile_gre6("/etc/gre6.sh", private_ip, update_type="private")
            update_ipfile_gre6("/etc/gre6.sh", remote_ip, update_type="remote")
            update_ipfile_gre6("/etc/ipsec.conf", private_ip, update_type="ipsec")
        else:
            update_pingfile_sit("/etc/ping_v6.sh", counterpart_ip)
            update_ipfile_gre6("/etc/private.sh", private_ip, update_type="private")
            update_ipfile_gre6("/etc/private.sh", local_ip, update_type="local")
            update_ipfile_gre6("/etc/private.sh", remote_ip, update_type="remote")

        interface = "azumig6" if is_gre6 else "azumi"
        subprocess.run(["ip", "link", "set", "dev", interface, "down"], check=True)
        subprocess.run(["ip", "link", "delete", interface], check=True)
    except subprocess.CalledProcessError as e:
        print("\033[91merror bringing interface down or deleting it\033[0m")

    try:
        script = "/etc/gre6.sh" if is_gre6 else "/etc/private.sh"
        result = subprocess.run(["/bin/bash", script], capture_output=True, text=True)
        if "RTNETLINK answers: File exists" in result.stderr:
            print("\033[91madditional ip already exists. Ignoring this error\033[0m")
        else:
            result.check_returncode()
        display_checkmark(
            f"\033[92mChanges saved and {interface} interface updated successfully!\033[0m"
        )

        subprocess.run(["sudo", "systemctl", "daemon-reload"], check=True)
        subprocess.run(["sudo", "systemctl", "restart", "ping_v6"], check=True)
        subprocess.run(["sudo", "systemctl", "restart", "ping_ip"], check=True)
        subprocess.run(
            ["sudo", "systemctl", "restart", "strongswan-starter"], check=True
        )

        result = subprocess.run(
            ["systemctl", "list-units", "--full", "--all", "strongswan.service"],
            capture_output=True,
            text=True,
        )
        if "strongswan.service" in result.stdout:
            subprocess.run(["sudo", "systemctl", "restart", "strongswan"], check=True)
        else:
            print("\033[91mstrongswan service not found, don't mind this error.\033[0m")

    except subprocess.CalledProcessError as e:
        print(
            f"\033[91merror applying network changes: {e.stderr.strip() if e.stderr else str(e)}\033[0m"
        )
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")
    # animate("\033[92mSystem services reloaded and restarted successfully!\033[0m")


def display_stuff_gre6(local_ip, remote_ip, private_ip):
    lines = [
        f"\033[93mTitle:         GRE6 Configuration\033[0m",
        f"\033[97m──────────────────────────────────────\033[0m",
        f"\033[92mLocal IP:       \033[97m{local_ip}\033[0m",
        f"\033[92mRemote IP:      \033[97m{remote_ip}\033[0m",
        f"\033[93mPrivate IP:     \033[97m{private_ip}\033[0m",
    ]
    box_width = 50

    print("\033[93m╭" + "─" * (box_width - 2) + "╮\033[0m")

    for line in lines:
        print(f"\033[93m {line:<{box_width - 4}} \033[0m")

    print("\033[93m╰" + "─" * (box_width - 2) + "╯\033[0m")


def get_ipsecsecret(name):
    try:
        with open(name, "r") as f:
            content = f.read()
        match = re.search(r'PSK "(.*)"', content)
        if match:
            return match.group(1)
        else:
            print("\033[91mno IPsec key found\033[0m")
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")
    return None


def gre6sec_edit_localkharej():
    local_ip_private = local_ip("/etc/private.sh")
    remote_ip_private = remote_ip("/etc/private.sh")
    private_ip_private = private_ip("/etc/private.sh")

    local_ip_gre6 = local_ip("/etc/gre6.sh")
    remote_ip_gre6 = remote_ip("/etc/gre6.sh")
    private_ip_gre6 = private_gre6("/etc/gre6.sh")

    ipsecsecret = get_ipsecsecret("/etc/ipsec.secrets")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("couldn't retrieve IP addresses from private file")
    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("couldn't retrieve IP addresses from gre6 file")
    if not ipsecsecret:
        print("couldn't retrieve IPsec secret key from ipsec file")

    if (
        not local_ip_private
        or not remote_ip_private
        or not private_ip_private
        or not local_ip_gre6
        or not remote_ip_gre6
        or not private_ip_gre6
        or not ipsecsecret
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_privatekharej(
            local_ip_private, remote_ip_private, private_ip_private
        )
        display_stuff_gre6(local_ip_gre6, remote_ip_gre6, private_ip_gre6)

        display_ipsecsecret(ipsecsecret)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mGRE6 + IPSEC\033[93m Kharej Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej \033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mIRAN \033[92m Public IP\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[93mChange \033[97mGRE6 \033[93mPrivate IPV6\033[0m")
        print("5. \033[93mChange IPSEC \033[92mSecret Key\033[0m")
        print("6. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local single menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_private = new_ip
                ip_parts = new_ip.split(":")
                if new_ip.endswith(":2"):
                    ip_parts[-1] = "1"
                else:
                    ip_parts[-1] = "2"
                counterpart_ip = ":".join(ip_parts)
                local_ip_gre6 = new_ip
                remote_ip_gre6 = counterpart_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[GRE6]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_gre6
                private_ip_gre6 = new_ip

                update_ipfile_gre6("/etc/ipsec.conf", new_ip, update_type="ipsec")
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mKharej\033[93m Public IP :\033[0m ")
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input("\033[93mEnter \033[92mIRAN\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "5":
            new_key = input(
                "\033[93mEnter new \033[92mIPsec \033[93mSecret Key: \033[0m"
            )
            if new_key:
                update_ipsecsecret("/etc/ipsec.secrets", new_key)
                ipsecsecret = new_key
            else:
                print("\033[91mCrazy Secret Key\033[0m")
        elif choice == "6":
            save_stuff_gre6sec(
                private_ip_private, local_ip_private, remote_ip_private, is_gre6=False
            )
            save_stuff_gre6sec(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            update_ipsec_ip(private_ip_gre6)
            break
        elif choice == "0":
            clear()
            single_edit_local()
            break
        else:
            print("Please select a valid option.")


def gre6sec_edit_localiran():
    local_ip_private = local_ip("/etc/private.sh")
    remote_ip_private = remote_ip("/etc/private.sh")
    private_ip_private = private_ip("/etc/private.sh")

    local_ip_gre6 = local_ip("/etc/gre6.sh")
    remote_ip_gre6 = remote_ip("/etc/gre6.sh")
    private_ip_gre6 = private_gre6("/etc/gre6.sh")

    ipsecsecret = get_ipsecsecret("/etc/ipsec.secrets")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("couldn't retrieve IP addresses from private file")
    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("couldn't retrieve IP addresses from gre6 file")
    if not ipsecsecret:
        print("couldn't retrieve IPsec secret key from ipsec file")

    if (
        not local_ip_private
        or not remote_ip_private
        or not private_ip_private
        or not local_ip_gre6
        or not remote_ip_gre6
        or not private_ip_gre6
        or not ipsecsecret
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_privateiran(
            local_ip_private, remote_ip_private, private_ip_private
        )
        display_stuff_gre6(local_ip_gre6, remote_ip_gre6, private_ip_gre6)

        display_ipsecsecret(ipsecsecret)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mGRE6 + IPSEC\033[93m IRAN Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN \033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mKHAREJ \033[92m Public IP\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[93mChange \033[97mGRE6 \033[93mPrivate IPV6\033[0m")
        print("5. \033[93mChange IPSEC \033[92mSecret Key\033[0m")
        print("6. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local single menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter new private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_private = new_ip
                ip_parts = new_ip.split(":")
                if new_ip.endswith(":2"):
                    ip_parts[-1] = "1"
                else:
                    ip_parts[-1] = "2"
                counterpart_ip = ":".join(ip_parts)
                local_ip_gre6 = new_ip
                remote_ip_gre6 = counterpart_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter new private IPv6 address \033[96m[GRE6]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_gre6
                private_ip_gre6 = new_ip

                update_ipfile_gre6("/etc/ipsec.conf", new_ip, update_type="ipsec")
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mIRAN\033[93m Public IP :\033[0m ")
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input("\033[93mEnter \033[92mKHAREJ\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "5":
            new_key = input(
                "\033[93mEnter new \033[92mIPsec \033[93mSecret Key: \033[0m"
            )
            if new_key:
                update_ipsecsecret("/etc/ipsec.secrets", new_key)
                ipsecsecret = new_key
            else:
                print("\033[91mCrazy Secret Key\033[0m")
        elif choice == "6":
            save_stuff_gre6sec(
                private_ip_private, local_ip_private, remote_ip_private, is_gre6=False
            )
            save_stuff_gre6sec(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            update_ipsec_ip(private_ip_gre6)
            break
        elif choice == "0":
            clear()
            single_edit_local()
            break
        else:
            print("Please select a valid option.")


def gre6nosec_edit_local():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print("\033[92m(   ) \033[92mEdit local\033[93m GRE6 Menu\033[0m")
    print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[92mKharej\033[0m")
    print("2. \033[93mIRAN\033[0m")
    print("3. \033[94mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        choice = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if choice == "1":
            gre6nosec_edit_localkharej()
            break
        elif choice == "2":
            gre6nosec_edit_localiran()
            break
        elif choice == "3":
            clear()
            gre6_edit_local()
            break
        else:
            print("Invalid choice.")


def save_stuff_gre6(private_ip, local_ip, remote_ip, is_gre6):
    current_ips = get_current_private_ipsgre6()
    current_ip = current_ips["gre6"] if is_gre6 else current_ips["private"]

    if current_ip:
        delete_ufw_rules(current_ip)

    add_ufw_rules(private_ip)

    counterpart_ip = wtb_opposite_ip(private_ip)
    try:
        if is_gre6:
            update_pingfile_sit("/etc/ping_ip.sh", counterpart_ip)
            update_ipfile_gre6("/etc/gre6.sh", private_ip, update_type="private")
            update_ipfile_gre6("/etc/gre6.sh", remote_ip, update_type="remote")
        else:
            update_pingfile_sit("/etc/ping_v6.sh", counterpart_ip)
            update_ipfile_gre6("/etc/private.sh", private_ip, update_type="private")
            update_ipfile_gre6("/etc/private.sh", local_ip, update_type="local")
            update_ipfile_gre6("/etc/private.sh", remote_ip, update_type="remote")

        interface = "azumig6" if is_gre6 else "azumi"
        subprocess.run(["ip", "link", "set", "dev", interface, "down"], check=True)
        subprocess.run(["ip", "link", "delete", interface], check=True)
    except subprocess.CalledProcessError as e:
        print(f"\033[91merror bringing interface down or deleting it: {e}\033[0m")

    try:
        script = "/etc/gre6.sh" if is_gre6 else "/etc/private.sh"
        result = subprocess.run(["/bin/bash", script], capture_output=True, text=True)
        if "RTNETLINK answers: File exists" in result.stderr:
            print("\033[91madditional ip already exists. Ignoring this error\033[0m")
        else:
            result.check_returncode()
        display_checkmark(
            f"\033[92mChanges saved and {interface} interface updated successfully!\033[0m"
        )
        subprocess.run(["sudo", "systemctl", "daemon-reload"], check=True)
        subprocess.run(["sudo", "systemctl", "restart", "ping_v6"], check=True)
        subprocess.run(["sudo", "systemctl", "restart", "ping_ip"], check=True)

        # display_checkmark("\033[92mSystem services reloaded and restarted successfully!\033[0m")
    except subprocess.CalledProcessError as e:
        print(
            f"\033[91merror applying network changes: {e.stderr.strip() if e.stderr else str(e)}\033[0m"
        )
    except FileNotFoundError:
        print(f"\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def gre6nosec_edit_localkharej():
    local_ip_private = local_ip("/etc/private.sh")
    remote_ip_private = remote_ip("/etc/private.sh")
    private_ip_private = private_ip("/etc/private.sh")

    local_ip_gre6 = local_ip("/etc/gre6.sh")
    remote_ip_gre6 = remote_ip("/etc/gre6.sh")
    private_ip_gre6 = private_gre6("/etc/gre6.sh")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("couldn't retrieve IP addresses from private file")
    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("couldn't retrieve IP addresses from gre6 file")

    if (
        not local_ip_private
        or not remote_ip_private
        or not private_ip_private
        or not local_ip_gre6
        or not remote_ip_gre6
        or not private_ip_gre6
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_privatekharej(
            local_ip_private, remote_ip_private, private_ip_private
        )
        display_stuff_gre6(local_ip_gre6, remote_ip_gre6, private_ip_gre6)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mGRE6\033[93m Kharej Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej \033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mIRAN \033[92m Public IP\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[93mChange \033[97mGRE6 \033[93mPrivate IPV6\033[0m")
        print("5. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local single menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_private = new_ip
                ip_parts = new_ip.split(":")
                if new_ip.endswith(":2"):
                    ip_parts[-1] = "1"
                else:
                    ip_parts[-1] = "2"
                counterpart_ip = ":".join(ip_parts)
                local_ip_gre6 = new_ip
                remote_ip_gre6 = counterpart_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[GRE6]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_gre6 = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mKharej\033[93m Public IP :\033[0m ")
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input("\033[93mEnter \033[92mIRAN\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "5":
            save_stuff_gre6(
                private_ip_private, local_ip_private, remote_ip_private, is_gre6=False
            )
            save_stuff_gre6(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            break
        elif choice == "0":
            clear()
            single_edit_local()
            break
        else:
            print("Invalid choice. Please select a valid option.")


def gre6nosec_edit_localiran():
    local_ip_private = local_ip("/etc/private.sh")
    remote_ip_private = remote_ip("/etc/private.sh")
    private_ip_private = private_ip("/etc/private.sh")

    local_ip_gre6 = local_ip("/etc/gre6.sh")
    remote_ip_gre6 = remote_ip("/etc/gre6.sh")
    private_ip_gre6 = private_gre6("/etc/gre6.sh")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("couldn't retrieve IP addresses from private file")
    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("couldn't retrieve IP addresses from gre6 file")

    if (
        not local_ip_private
        or not remote_ip_private
        or not private_ip_private
        or not local_ip_gre6
        or not remote_ip_gre6
        or not private_ip_gre6
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_privateiran(
            local_ip_private, remote_ip_private, private_ip_private
        )
        display_stuff_gre6(local_ip_gre6, remote_ip_gre6, private_ip_gre6)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mGRE6\033[93m IRAN Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN \033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mKHAREJ \033[92m Public IP\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[93mChange \033[97mGRE6 \033[93mPrivate IPV6\033[0m")
        print("5. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local single menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_private = new_ip
                ip_parts = new_ip.split(":")
                if new_ip.endswith(":2"):
                    ip_parts[-1] = "1"
                else:
                    ip_parts[-1] = "2"
                counterpart_ip = ":".join(ip_parts)
                local_ip_gre6 = new_ip
                remote_ip_gre6 = counterpart_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[GRE6]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_gre6 = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mIRAN\033[93m Public IP :\033[0m ")
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input("\033[93mEnter \033[92mKHAREJ\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "5":
            save_stuff_gre6(
                private_ip_private, local_ip_private, remote_ip_private, is_gre6=False
            )
            save_stuff_gre6(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            break
        elif choice == "0":
            clear()
            single_edit_local()
            break
        else:
            print("Invalid choice. Please select a valid option.")


def gre6tap_edit_local():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print("\033[92m(   ) \033[92mEdit local\033[93m GRE6TAP Menu\033[0m")
    print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[92mNo IPSEC\033[0m")
    print("2. \033[93mWith IPSEC\033[0m")
    print("3. \033[94mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        choice = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if choice == "1":
            gre6tapnosec_edit_local()
            break
        elif choice == "2":
            gre6tapsec_edit_local()
            break
        elif choice == "3":
            clear()
            single_edit_local()
            break
        else:
            print("Invalid choice.")


def gre6tapsec_edit_local():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print("\033[92m(   ) \033[92mEdit local\033[93m GRE6TAP Menu\033[0m")
    print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[92mKharej\033[0m")
    print("2. \033[93mIRAN\033[0m")
    print("3. \033[94mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        choice = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if choice == "1":
            gre6tapsec_edit_localkharej()
            break
        elif choice == "2":
            gre6tapsec_edit_localiran()
            break
        elif choice == "3":
            clear()
            gre6tap_edit_local()
            break
        else:
            print("Invalid choice.")


def private_gre6(name):
    try:
        with open(name, "r") as f:
            content = f.read()
        match = re.search(r"ip -6 addr add (\S+)/64 dev azumig6", content)
        if match:
            return match.group(1)
        else:
            print(f"\033[91mno private IP found\033[0m")
    except FileNotFoundError:
        print("\033[91mPrivate file not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")
    return None


def private(name):
    try:
        with open(name, "r") as f:
            content = f.read()
        match = re.search(r"ip -6 addr add (\S+)/64 dev azumi", content)
        if match:
            return match.group(1)
        else:
            print("\033[91mno private IP found\033[0m")
    except FileNotFoundError:
        print("\033[91mPrivate file not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")
    return None


def update_ipfile_gre6(name, new_ip, update_type):
    try:
        with open(name, "r") as f:
            content = f.read()

        if update_type == "private":
            new_content = re.sub(
                r"ip (-6 )?addr add [^ ]+/64 dev azumi?",
                f"ip -6 addr add {new_ip}/64 dev azumi",
                content,
            )
            ip_parts = new_ip.split(":")
            if new_ip.endswith(":2"):
                ip_parts[-1] = "1"
            else:
                ip_parts[-1] = "2"
            counterpart_ip = ":".join(ip_parts)
            new_content = re.sub(
                r"ip (-6 )?route add [^ ]+/64 dev azumi?",
                f"ip -6 route add {counterpart_ip}/64 dev azumi",
                new_content,
            )
            update_ipfile_gre6("/etc/gre6.sh", new_ip, update_type="gre6_local")
            update_ipfile_gre6(
                "/etc/gre6.sh", counterpart_ip, update_type="gre6_remote"
            )
        elif update_type == "local":
            new_content = re.sub(r"local \S+", f"local {new_ip}", content)
        elif update_type == "remote":
            new_content = re.sub(r"remote \S+", f"remote {new_ip}", content)
        elif update_type == "gre6_local":
            new_content = re.sub(r"local \S+", f"local {new_ip}", content)
        elif update_type == "gre6_remote":
            new_content = re.sub(r"remote \S+", f"remote {new_ip}", content)
        elif update_type == "ipsec":
            new_content = re.sub(r"leftsubnet=\S+", f"leftsubnet={new_ip}/64", content)
            new_content = re.sub(r"leftid=\S+", f"leftid={new_ip}", new_content)

            ip_parts = new_ip.split(":")
            if new_ip.endswith(":1"):
                ip_parts[-1] = "2"
            else:
                ip_parts[-1] = "1"
            counterpart_ip = ":".join(ip_parts)
            new_content = re.sub(r"right=\S+", f"right={counterpart_ip}", new_content)
            new_content = re.sub(
                r"rightsubnet=\S+", f"rightsubnet={counterpart_ip}/64", new_content
            )

        with open(name, "w") as f:
            f.write(new_content)
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def get_current_private_ipsgre6():
    private_ip_private = private("/etc/private.sh")
    private_ip_gre6 = private_gre6("/etc/gre6.sh")
    return {
        "private": private_ip_private,
        "gre6": private_ip_gre6,
    }


def save_stuff_gre6sec(private_ip, local_ip, remote_ip, is_gre6):
    current_ips = get_current_private_ipsgre6()
    current_ip = current_ips["gre6"] if is_gre6 else current_ips["private"]

    if current_ip:
        delete_ufw_rules(current_ip)

    add_ufw_rules(private_ip)

    counterpart_ip = wtb_opposite_ip(private_ip)
    try:
        if is_gre6:
            update_pingfile_sit("/etc/ping_ip.sh", counterpart_ip)
            update_ipfile_gre6("/etc/gre6.sh", private_ip, update_type="private")
            update_ipfile_gre6("/etc/gre6.sh", remote_ip, update_type="remote")
            update_ipfile_gre6("/etc/ipsec.conf", private_ip, update_type="ipsec")
        else:
            update_pingfile_sit("/etc/ping_v6.sh", counterpart_ip)
            update_ipfile_gre6("/etc/private.sh", private_ip, update_type="private")
            update_ipfile_gre6("/etc/private.sh", local_ip, update_type="local")
            update_ipfile_gre6("/etc/private.sh", remote_ip, update_type="remote")

        interface = "azumig6" if is_gre6 else "azumi"
        subprocess.run(["ip", "link", "set", "dev", interface, "down"], check=True)
        subprocess.run(["ip", "link", "delete", interface], check=True)
    except subprocess.CalledProcessError as e:
        print("\033[91merror bringing interface down or deleting it\033[0m")

    try:
        script = "/etc/gre6.sh" if is_gre6 else "/etc/private.sh"
        result = subprocess.run(["/bin/bash", script], capture_output=True, text=True)
        if "RTNETLINK answers: File exists" in result.stderr:
            print("\033[91madditional ip already exists. Ignoring this error\033[0m")
        else:
            result.check_returncode()
        display_checkmark(
            f"Changes saved and {interface} interface updated successfully!"
        )

        subprocess.run(["sudo", "systemctl", "daemon-reload"], check=True)
        subprocess.run(["sudo", "systemctl", "restart", "ping_v6"], check=True)
        subprocess.run(["sudo", "systemctl", "restart", "ping_ip"], check=True)
        subprocess.run(
            ["sudo", "systemctl", "restart", "strongswan-starter"], check=True
        )

        result = subprocess.run(
            ["systemctl", "list-units", "--full", "--all", "strongswan.service"],
            capture_output=True,
            text=True,
        )
        if "strongswan.service" in result.stdout:
            subprocess.run(["sudo", "systemctl", "restart", "strongswan"], check=True)
        else:
            print("\033[91mstrongswan service not found, don't mind this error.\033[0m")

    except subprocess.CalledProcessError as e:
        print(
            f"\033[91merror applying network changes: {e.stderr.strip() if e.stderr else str(e)}\033[0m"
        )
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")
    # animate("\033[92mSystem services reloaded and restarted successfully!\033[0m")


def display_stuff_gre6tap(local_ip, remote_ip, private_ip):
    lines = [
        f"\033[93mTitle:         GRE6TAP Configuration\033[0m",
        f"\033[97m──────────────────────────────────────\033[0m",
        f"\033[92mLocal IP:       \033[97m{local_ip}\033[0m",
        f"\033[92mRemote IP:      \033[97m{remote_ip}\033[0m",
        f"\033[93mPrivate IP:     \033[97m{private_ip}\033[0m",
    ]
    box_width = 50

    print("\033[93m╭" + "─" * (box_width - 2) + "╮\033[0m")

    for line in lines:
        print(f"\033[93m {line:<{box_width - 4}} \033[0m")

    print("\033[93m╰" + "─" * (box_width - 2) + "╯\033[0m")


def get_ipsecsecret(name):
    try:
        with open(name, "r") as f:
            content = f.read()
        match = re.search(r'PSK "(.*)"', content)
        if match:
            return match.group(1)
        else:
            print("\033[91mno IPsec key found\033[0m")
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")
    return None


def gre6tapsec_edit_localkharej():
    local_ip_private = local_ip("/etc/private.sh")
    remote_ip_private = remote_ip("/etc/private.sh")
    private_ip_private = private_ip("/etc/private.sh")

    local_ip_gre6 = local_ip("/etc/gre6.sh")
    remote_ip_gre6 = remote_ip("/etc/gre6.sh")
    private_ip_gre6 = private_gre6("/etc/gre6.sh")

    ipsecsecret = get_ipsecsecret("/etc/ipsec.secrets")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("couldn't retrieve IP addresses from private file")
    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("couldn't retrieve IP addresses from gre6 file")
    if not ipsecsecret:
        print("couldn't retrieve IPsec secret key from ipsec file")

    if (
        not local_ip_private
        or not remote_ip_private
        or not private_ip_private
        or not local_ip_gre6
        or not remote_ip_gre6
        or not private_ip_gre6
        or not ipsecsecret
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_privatekharej(
            local_ip_private, remote_ip_private, private_ip_private
        )
        display_stuff_gre6tap(local_ip_gre6, remote_ip_gre6, private_ip_gre6)

        display_ipsecsecret(ipsecsecret)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mGRE6TAP + IPSEC\033[93m Kharej Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej \033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mIRAN \033[92m Public IP\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[93mChange \033[97mGRE6TAP \033[93mPrivate IPV6\033[0m")
        print("5. \033[93mChange IPSEC \033[92mSecret Key\033[0m")
        print("6. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local single menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_private = new_ip
                ip_parts = new_ip.split(":")
                if new_ip.endswith(":2"):
                    ip_parts[-1] = "1"
                else:
                    ip_parts[-1] = "2"
                counterpart_ip = ":".join(ip_parts)
                local_ip_gre6 = new_ip
                remote_ip_gre6 = counterpart_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[GRE6TAP]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_gre6
                private_ip_gre6 = new_ip

                update_ipfile_gre6("/etc/ipsec.conf", new_ip, update_type="ipsec")
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mKharej\033[93m Public IP :\033[0m ")
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input("\033[93mEnter \033[92mIRAN\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "5":
            new_key = input(
                "\033[93mEnter new \033[92mIPsec \033[93mSecret Key: \033[0m"
            )
            if new_key:
                update_ipsecsecret("/etc/ipsec.secrets", new_key)
                ipsecsecret = new_key
            else:
                print("\033[91mCrazy Secret Key\033[0m")
        elif choice == "6":
            save_stuff_gre6sec(
                private_ip_private, local_ip_private, remote_ip_private, is_gre6=False
            )
            save_stuff_gre6sec(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            update_ipsec_ip(private_ip_gre6)
            break
        elif choice == "0":
            clear()
            single_edit_local()
            break
        else:
            print("Please select a valid option.")


def gre6tapsec_edit_localiran():
    local_ip_private = local_ip("/etc/private.sh")
    remote_ip_private = remote_ip("/etc/private.sh")
    private_ip_private = private_ip("/etc/private.sh")

    local_ip_gre6 = local_ip("/etc/gre6.sh")
    remote_ip_gre6 = remote_ip("/etc/gre6.sh")
    private_ip_gre6 = private_gre6("/etc/gre6.sh")

    ipsecsecret = get_ipsecsecret("/etc/ipsec.secrets")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("couldn't retrieve IP addresses from private file")
    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("couldn't retrieve IP addresses from gre6 file")
    if not ipsecsecret:
        print("couldn't retrieve IPsec secret key from ipsec file")

    if (
        not local_ip_private
        or not remote_ip_private
        or not private_ip_private
        or not local_ip_gre6
        or not remote_ip_gre6
        or not private_ip_gre6
        or not ipsecsecret
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_privateiran(
            local_ip_private, remote_ip_private, private_ip_private
        )
        display_stuff_gre6tap(local_ip_gre6, remote_ip_gre6, private_ip_gre6)

        display_ipsecsecret(ipsecsecret)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mGRE6TAP + IPSEC\033[93m IRAN Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN \033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mKHAREJ \033[92m Public IP\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[93mChange \033[97mGRE6TAP \033[93mPrivate IPV6\033[0m")
        print("5. \033[93mChange IPSEC \033[92mSecret Key\033[0m")
        print("6. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local single menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter new private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_private = new_ip
                ip_parts = new_ip.split(":")
                if new_ip.endswith(":2"):
                    ip_parts[-1] = "1"
                else:
                    ip_parts[-1] = "2"
                counterpart_ip = ":".join(ip_parts)
                local_ip_gre6 = new_ip
                remote_ip_gre6 = counterpart_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter new private IPv6 address \033[96m[GRE6TAP]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_gre6
                private_ip_gre6 = new_ip

                update_ipfile_gre6("/etc/ipsec.conf", new_ip, update_type="ipsec")
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mIRAN\033[93m Public IP :\033[0m ")
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input("\033[93mEnter \033[92mKHAREJ\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "5":
            new_key = input(
                "\033[93mEnter new \033[92mIPsec \033[93mSecret Key: \033[0m"
            )
            if new_key:
                update_ipsecsecret("/etc/ipsec.secrets", new_key)
                ipsecsecret = new_key
            else:
                print("\033[91mCrazy Secret Key\033[0m")
        elif choice == "6":
            save_stuff_gre6sec(
                private_ip_private, local_ip_private, remote_ip_private, is_gre6=False
            )
            save_stuff_gre6sec(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            update_ipsec_ip(private_ip_gre6)
            break
        elif choice == "0":
            clear()
            single_edit_local()
            break
        else:
            print("Please select a valid option.")


def gre6tapnosec_edit_local():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print("\033[92m(   ) \033[92mEdit local\033[93m GRE6TAP Menu\033[0m")
    print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[92mKharej\033[0m")
    print("2. \033[93mIRAN\033[0m")
    print("3. \033[94mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        choice = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if choice == "1":
            gre6tapnosec_edit_localkharej()
            break
        elif choice == "2":
            gre6tapnosec_edit_localiran()
            break
        elif choice == "3":
            clear()
            gre6tap_edit_local()
            break
        else:
            print("Invalid choice.")


def save_stuff_gre6tap(private_ip, local_ip, remote_ip, is_gre6):
    current_ips = get_current_private_ipsgre6()
    current_ip = current_ips["gre6"] if is_gre6 else current_ips["private"]

    if current_ip:
        delete_ufw_rules(current_ip)

    add_ufw_rules(private_ip)

    counterpart_ip = wtb_opposite_ip(private_ip)
    try:
        if is_gre6:
            update_pingfile_sit("/etc/ping_ip.sh", counterpart_ip)
            update_ipfile_gre6("/etc/gre6.sh", private_ip, update_type="private")
            update_ipfile_gre6("/etc/gre6.sh", remote_ip, update_type="remote")
        else:
            update_pingfile_sit("/etc/ping_v6.sh", counterpart_ip)
            update_ipfile_gre6("/etc/private.sh", private_ip, update_type="private")
            update_ipfile_gre6("/etc/private.sh", local_ip, update_type="local")
            update_ipfile_gre6("/etc/private.sh", remote_ip, update_type="remote")

        interface = "azumig6" if is_gre6 else "azumi"
        subprocess.run(["ip", "link", "set", "dev", interface, "down"], check=True)
        subprocess.run(["ip", "link", "delete", interface], check=True)
    except subprocess.CalledProcessError as e:
        print(f"\033[91merror bringing interface down or deleting it: {e}\033[0m")

    try:
        script = "/etc/gre6.sh" if is_gre6 else "/etc/private.sh"
        result = subprocess.run(["/bin/bash", script], capture_output=True, text=True)
        if "RTNETLINK answers: File exists" in result.stderr:
            print("\033[91madditional ip already exists. Ignoring this error\033[0m")
        else:
            result.check_returncode()
        display_checkmark(
            f"Changes saved and {interface} interface updated successfully!"
        )
        subprocess.run(["sudo", "systemctl", "daemon-reload"], check=True)
        subprocess.run(["sudo", "systemctl", "restart", "ping_v6"], check=True)
        subprocess.run(["sudo", "systemctl", "restart", "ping_ip"], check=True)

        # display_checkmark("\033[92mSystem services reloaded and restarted successfully!\033[0m")
    except subprocess.CalledProcessError as e:
        print(
            f"\033[91merror applying network changes: {e.stderr.strip() if e.stderr else str(e)}\033[0m"
        )
    except FileNotFoundError:
        print(f"\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def gre6tapnosec_edit_localkharej():
    local_ip_private = local_ip("/etc/private.sh")
    remote_ip_private = remote_ip("/etc/private.sh")
    private_ip_private = private_ip("/etc/private.sh")

    local_ip_gre6 = local_ip("/etc/gre6.sh")
    remote_ip_gre6 = remote_ip("/etc/gre6.sh")
    private_ip_gre6 = private_gre6("/etc/gre6.sh")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("couldn't retrieve IP addresses from private file")
    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("couldn't retrieve IP addresses from gre6 file")

    if (
        not local_ip_private
        or not remote_ip_private
        or not private_ip_private
        or not local_ip_gre6
        or not remote_ip_gre6
        or not private_ip_gre6
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_privatekharej(
            local_ip_private, remote_ip_private, private_ip_private
        )
        display_stuff_gre6tap(local_ip_gre6, remote_ip_gre6, private_ip_gre6)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mGRE6TAP\033[93m Kharej Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej \033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mIRAN \033[92m Public IP\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[93mChange \033[97mGRE6TAP \033[93mPrivate IPV6\033[0m")
        print("5. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local single menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_private = new_ip
                ip_parts = new_ip.split(":")
                if new_ip.endswith(":2"):
                    ip_parts[-1] = "1"
                else:
                    ip_parts[-1] = "2"
                counterpart_ip = ":".join(ip_parts)
                local_ip_gre6 = new_ip
                remote_ip_gre6 = counterpart_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[GRE6TAP]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_gre6 = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mKharej\033[93m Public IP :\033[0m ")
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input("\033[93mEnter \033[92mIRAN\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "5":
            save_stuff_gre6(
                private_ip_private, local_ip_private, remote_ip_private, is_gre6=False
            )
            save_stuff_gre6(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            break
        elif choice == "0":
            clear()
            single_edit_local()
            break
        else:
            print("Invalid choice. Please select a valid option.")


def gre6tapnosec_edit_localiran():
    local_ip_private = local_ip("/etc/private.sh")
    remote_ip_private = remote_ip("/etc/private.sh")
    private_ip_private = private_ip("/etc/private.sh")

    local_ip_gre6 = local_ip("/etc/gre6.sh")
    remote_ip_gre6 = remote_ip("/etc/gre6.sh")
    private_ip_gre6 = private_gre6("/etc/gre6.sh")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("couldn't retrieve IP addresses from private file")
    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("couldn't retrieve IP addresses from gre6 file")

    if (
        not local_ip_private
        or not remote_ip_private
        or not private_ip_private
        or not local_ip_gre6
        or not remote_ip_gre6
        or not private_ip_gre6
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_privateiran(
            local_ip_private, remote_ip_private, private_ip_private
        )
        display_stuff_ip6ip6(local_ip_gre6, remote_ip_gre6, private_ip_gre6)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mGRE6TAP\033[93m IRAN Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN \033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mKHAREJ \033[92m Public IP\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[93mChange \033[97mGRE6TAP \033[93mPrivate IPV6\033[0m")
        print("5. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local single menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_private = new_ip
                ip_parts = new_ip.split(":")
                if new_ip.endswith(":2"):
                    ip_parts[-1] = "1"
                else:
                    ip_parts[-1] = "2"
                counterpart_ip = ":".join(ip_parts)
                local_ip_gre6 = new_ip
                remote_ip_gre6 = counterpart_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[GRE6TAP]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_gre6 = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mIRAN\033[93m Public IP :\033[0m ")
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input("\033[93mEnter \033[92mKHAREJ\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "5":
            save_stuff_gre6(
                private_ip_private, local_ip_private, remote_ip_private, is_gre6=False
            )
            save_stuff_gre6(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            break
        elif choice == "0":
            clear()
            single_edit_local()
            break
        else:
            print("Invalid choice. Please select a valid option.")


def gre6tapn_edit_local():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print("\033[92m(   ) \033[92mEdit local\033[93m GRE6TAP Native Menu\033[0m")
    print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[92mNo IPSEC\033[0m")
    print("2. \033[93mWith IPSEC\033[0m")
    print("3. \033[94mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        choice = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if choice == "1":
            gre6tapnosecn_edit_local()
            break
        elif choice == "2":
            gre6tapsecn_edit_local()
            break
        elif choice == "3":
            clear()
            single_edit_local()
            break
        else:
            print("Invalid choice.")


def gre6tapnosecn_edit_local():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print("\033[92m(   ) \033[92mEdit local\033[93m GRE6TAP Native Menu\033[0m")
    print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[92mKharej\033[0m")
    print("2. \033[93mIRAN\033[0m")
    print("3. \033[94mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        choice = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if choice == "1":
            gre6tapnosecn_edit_localkharej()
            break
        elif choice == "2":
            gre6tapnosecn_edit_localiran()
            break
        elif choice == "3":
            clear()
            gre6tapn_edit_local()
            break
        else:
            print("Invalid choice.")


def gre6tapnosecn_edit_localkharej():

    local_ip_gre6 = local_ip("/etc/gre6.sh")
    remote_ip_gre6 = remote_ip("/etc/gre6.sh")
    private_ip_gre6 = private_gre6("/etc/gre6.sh")

    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("couldn't retrieve IP addresses from gre6 file")

    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_gre6tapn_kh(local_ip_gre6, remote_ip_gre6, private_ip_gre6)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mGRE6TAP Native\033[93m Kharej Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej \033[92m Public IPV6\033[0m")
        print("2. \033[93mChange \033[97mIRAN \033[92m Public IPV6\033[0m")
        print("3. \033[93mChange \033[97mGRE6TAP \033[93mPrivate IPV6\033[0m")
        print("4. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local single menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[GRE6TAP]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_gre6
                private_ip_gre6 = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mKharej\033[93m Public IPV6 :\033[0m ")
            if new_ip:
                local_ip_gre6 = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input("\033[93mEnter \033[92mIRAN\033[93m Public IPV6 :\033[0m ")
            if new_ip:
                remote_ip_gre6 = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            save_stuff_gre6(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            break
        elif choice == "0":
            clear()
            single_edit_local()
            break
        else:
            print("Please select a valid option.")


def gre6tapnosecn_edit_localiran():

    local_ip_gre6 = local_ip("/etc/gre6.sh")
    remote_ip_gre6 = remote_ip("/etc/gre6.sh")
    private_ip_gre6 = private_gre6("/etc/gre6.sh")

    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("couldn't retrieve IP addresses from gre6 file")

    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_gre6tapn_ir(local_ip_gre6, remote_ip_gre6, private_ip_gre6)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mGRE6TAP Native\033[93m IRAN Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN \033[92m Public IPV6\033[0m")
        print("2. \033[93mChange \033[97mKHAREJ \033[92m Public IPV6\033[0m")
        print("3. \033[93mChange \033[97mGRE6TAP \033[93mPrivate IPV6\033[0m")
        print("4. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local single menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter new private IPv6 address \033[96m[GRE6TAP]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_gre6
                private_ip_gre6 = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mIRAN\033[93m Public IP :\033[0m ")
            if new_ip:
                local_ip_gre6 = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input("\033[93mEnter \033[92mKHAREJ\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_gre6 = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            save_stuff_gre6(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            break
        elif choice == "0":
            clear()
            single_edit_local()
            break
        else:
            print("Please select a valid option.")


def gre6tapsecn_edit_local():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print("\033[92m(   ) \033[92mEdit local\033[93m GRE6TAP Native IPSEC Menu\033[0m")
    print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[92mKharej\033[0m")
    print("2. \033[93mIRAN\033[0m")
    print("3. \033[94mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        choice = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if choice == "1":
            gre6tapsecn_edit_localkharej()
            break
        elif choice == "2":
            gre6tapsecn_edit_localiran()
            break
        elif choice == "3":
            clear()
            gre6tapn_edit_local()
            break
        else:
            print("Invalid choice.")


def display_stuff_gre6tapn_ir(local_ip, remote_ip, private_ip):
    lines = [
        f"\033[93mTitle:         GRE6TAP Configuration\033[0m",
        f"\033[97m──────────────────────────────────────\033[0m",
        f"\033[92mIRAN IPV6:       \033[97m{local_ip}\033[0m",
        f"\033[92mKharej IPV6:     \033[97m{remote_ip}\033[0m",
        f"\033[93mPrivate IP:      \033[97m{private_ip}\033[0m",
    ]
    box_width = 50

    print("\033[93m╭" + "─" * (box_width - 2) + "╮\033[0m")

    for line in lines:
        print(f"\033[93m {line:<{box_width - 4}} \033[0m")

    print("\033[93m╰" + "─" * (box_width - 2) + "╯\033[0m")


def display_stuff_gre6tapn_kh(local_ip, remote_ip, private_ip):
    lines = [
        f"\033[93mTitle:         GRE6TAP Configuration\033[0m",
        f"\033[97m──────────────────────────────────────\033[0m",
        f"\033[92mKharej IPV6:       \033[97m{local_ip}\033[0m",
        f"\033[92mIRAN IPV6:         \033[97m{remote_ip}\033[0m",
        f"\033[93mPrivate IP:        \033[97m{private_ip}\033[0m",
    ]
    box_width = 50

    print("\033[93m╭" + "─" * (box_width - 2) + "╮\033[0m")

    for line in lines:
        print(f"\033[93m {line:<{box_width - 4}} \033[0m")

    print("\033[93m╰" + "─" * (box_width - 2) + "╯\033[0m")


def gre6tapsecn_edit_localkharej():

    local_ip_gre6 = local_ip("/etc/gre6.sh")
    remote_ip_gre6 = remote_ip("/etc/gre6.sh")
    private_ip_gre6 = private_gre6("/etc/gre6.sh")

    ipsecsecret = get_ipsecsecret("/etc/ipsec.secrets")

    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("couldn't retrieve IP addresses from gre6 file")
    if not ipsecsecret:
        print("couldn't retrieve IPsec secret key from ipsec file")

    if (
        not local_ip_gre6
        or not remote_ip_gre6
        or not private_ip_gre6
        or not ipsecsecret
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_gre6tapn_kh(local_ip_gre6, remote_ip_gre6, private_ip_gre6)

        display_ipsecsecret(ipsecsecret)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mGRE6TAP Native + IPSEC\033[93m Kharej Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej \033[92m Public IPV6\033[0m")
        print("2. \033[93mChange \033[97mIRAN \033[92m Public IPV6\033[0m")
        print("3. \033[93mChange \033[97mGRE6TAP \033[93mPrivate IPV6\033[0m")
        print("4. \033[93mChange IPSEC \033[92mSecret Key\033[0m")
        print("5. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local single menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[GRE6TAP]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_gre6
                private_ip_gre6 = new_ip

                update_ipfile_gre6("/etc/ipsec.conf", new_ip, update_type="ipsec")
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mKharej\033[93m Public IPV6 :\033[0m ")
            if new_ip:
                local_ip_gre6 = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input("\033[93mEnter \033[92mIRAN\033[93m Public IPV6 :\033[0m ")
            if new_ip:
                remote_ip_gre6 = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_key = input(
                "\033[93mEnter new \033[92mIPsec \033[93mSecret Key: \033[0m"
            )
            if new_key:
                update_ipsecsecret("/etc/ipsec.secrets", new_key)
                ipsecsecret = new_key
            else:
                print("\033[91mCrazy Secret Key\033[0m")
        elif choice == "5":

            save_stuff_gre6sec(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            update_ipsec_ip(private_ip_gre6)
            break
        elif choice == "0":
            clear()
            single_edit_local()
            break
        else:
            print("Please select a valid option.")


def gre6tapsecn_edit_localiran():

    local_ip_gre6 = local_ip("/etc/gre6.sh")
    remote_ip_gre6 = remote_ip("/etc/gre6.sh")
    private_ip_gre6 = private_gre6("/etc/gre6.sh")

    ipsecsecret = get_ipsecsecret("/etc/ipsec.secrets")

    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("couldn't retrieve IP addresses from gre6 file")
    if not ipsecsecret:
        print("couldn't retrieve IPsec secret key from ipsec file")

    if (
        not local_ip_gre6
        or not remote_ip_gre6
        or not private_ip_gre6
        or not ipsecsecret
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_gre6tapn_ir(local_ip_gre6, remote_ip_gre6, private_ip_gre6)

        display_ipsecsecret(ipsecsecret)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mGRE6TAP Native + IPSEC\033[93m IRAN Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN \033[92m Public IPV6\033[0m")
        print("2. \033[93mChange \033[97mKHAREJ \033[92m Public IPV6\033[0m")
        print("3. \033[93mChange \033[97mGRE6TAP \033[93mPrivate IPV6\033[0m")
        print("4. \033[93mChange IPSEC \033[92mSecret Key\033[0m")
        print("5. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local single menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter new private IPv6 address \033[96m[GRE6TAP]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_gre6
                private_ip_gre6 = new_ip

                update_ipfile_gre6("/etc/ipsec.conf", new_ip, update_type="ipsec")
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mIRAN\033[93m Public IP :\033[0m ")
            if new_ip:
                local_ip_gre6 = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input("\033[93mEnter \033[92mKHAREJ\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_gre6 = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_key = input(
                "\033[93mEnter new \033[92mIPsec \033[93mSecret Key: \033[0m"
            )
            if new_key:
                update_ipsecsecret("/etc/ipsec.secrets", new_key)
                ipsecsecret = new_key
            else:
                print("\033[91mCrazy Secret Key\033[0m")
        elif choice == "5":
            save_stuff_gre6sec(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            update_ipsec_ip(private_ip_gre6)
            break
        elif choice == "0":
            clear()
            single_edit_local()
            break
        else:
            print("Please select a valid option.")


def gre6tapnosec_edit_local():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print("\033[92m(   ) \033[92mEdit local\033[93m GRE6TAP Native Menu\033[0m")
    print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[92mKharej\033[0m")
    print("2. \033[93mIRAN\033[0m")
    print("3. \033[94mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        choice = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if choice == "1":
            gre6tapnosecn_edit_localkharej()
            break
        elif choice == "2":
            gre6tapnosecn_edit_localiran()
            break
        elif choice == "3":
            clear()
            gre6tapn_edit_local()
            break
        else:
            print("Invalid choice.")


def gre6tapnosec_edit_localkharej():

    local_ip_gre6 = local_ip("/etc/gre6.sh")
    remote_ip_gre6 = remote_ip("/etc/gre6.sh")
    private_ip_gre6 = private_gre6("/etc/gre6.sh")

    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("couldn't retrieve IP addresses from gre6 file")

    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_gre6tapn_kh(local_ip_gre6, remote_ip_gre6, private_ip_gre6)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mGRE6TAP\033[93m Kharej Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej \033[92m Public IPV6\033[0m")
        print("2. \033[93mChange \033[97mIRAN \033[92m Public IPV6\033[0m")
        print("3. \033[93mChange \033[97mGRE6TAP \033[93mPrivate IPV6\033[0m")
        print("4. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local single menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[GRE6TAP]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_gre6 = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mKharej\033[93m Public IP :\033[0m ")
            if new_ip:
                local_ip_gre6 = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input("\033[93mEnter \033[92mIRAN\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_gre6 = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            save_stuff_gre6(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            break
        elif choice == "0":
            clear()
            single_edit_local()
            break
        else:
            print("Invalid choice. Please select a valid option.")


def gre6tapnosec_edit_localiran():

    local_ip_gre6 = local_ip("/etc/gre6.sh")
    remote_ip_gre6 = remote_ip("/etc/gre6.sh")
    private_ip_gre6 = private_gre6("/etc/gre6.sh")

    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("couldn't retrieve IP addresses from gre6 file")

    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_gre6tapn_ir(local_ip_gre6, remote_ip_gre6, private_ip_gre6)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mGRE6TAP\033[93m IRAN Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN \033[92m Public IPV6\033[0m")
        print("2. \033[93mChange \033[97mKHAREJ \033[92m Public IPV6\033[0m")
        print("3. \033[93mChange \033[97mGRE6TAP \033[93mPrivate IPV6\033[0m")
        print("4. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local single menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[GRE6TAP]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_gre6 = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mIRAN\033[93m Public IP :\033[0m ")
            if new_ip:
                local_ip_gre6 = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input("\033[93mEnter \033[92mKHAREJ\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_gre6 = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            save_stuff_gre6(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            break
        elif choice == "0":
            clear()
            single_edit_local()
            break
        else:
            print("Invalid choice. Please select a valid option.")


def gen_edit_localmenu():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print("\033[92m(   ) \033[92mEdit local\033[93m Geneve UDP Menu\033[0m")
    print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[92mGeneve Private IPV4 \033[96m[Point IP]\033[0m")
    print("2. \033[93mGeneve Private IPV6 \033[96m[Point IP]\033[0m")
    print("3. \033[94mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        choice = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if choice == "1":
            gen_edit_local()
            break
        elif choice == "2":
            gen_edit_localv6()
            break
        elif choice == "3":
            clear()
            single_edit_local()
            break
        else:
            print("Invalid choice.")


def gen_edit_local():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print("\033[92m(   ) \033[92mEdit local\033[93m Geneve UDP V4 Menu\033[0m")
    print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[92mNo IPSEC\033[0m")
    print("2. \033[93mWith IPSEC\033[0m")
    print("3. \033[94mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        choice = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if choice == "1":
            genudpnosec_edit_local()
            break
        elif choice == "2":
            genudpsec_edit_local()
            break
        elif choice == "3":
            clear()
            gen_edit_localmenu()
            break
        else:
            print("Invalid choice.")


def genudpnosec_edit_local():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print("\033[92m(   ) \033[92mEdit local\033[93m Geneve UDP V4 Menu\033[0m")
    print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[92mKharej\033[0m")
    print("2. \033[93mIRAN\033[0m")
    print("3. \033[94mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        choice = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if choice == "1":
            genudpnosec_edit_localkharej()
            break
        elif choice == "2":
            genudpnosec_edit_localiran()
            break
        elif choice == "3":
            clear()
            gen_edit_local()
            break
        else:
            print("Invalid choice.")


def private_gen(name):
    try:
        with open(name, "r") as f:
            content = f.read()
        match_v4 = re.search(
            r"ip addr add (\d+\.\d+\.\d+\.\d+)/32 dev azumigen", content
        )
        match_v6 = re.search(r"ip addr add (\S+::\d+)/64 dev azumigen", content)
        if match_v4:
            return match_v4.group(1)
        elif match_v6:
            return match_v6.group(1)
        else:
            print(f"\033[91mno private IP found\033[0m")
    except FileNotFoundError:
        print(f"file {name} doesn't exist")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")
    return None


def private_gen_nosec(name):
    try:
        with open(name, "r") as f:
            content = f.read()
        match_v4 = re.search(
            r"ip addr add (\d+\.\d+\.\d+\.\d+)/32 dev azumigen", content
        )
        match_v6 = re.search(r"ip addr add (\S+::\d+)/16 dev azumigen", content)
        if match_v4:
            return match_v4.group(1)
        elif match_v6:
            return match_v6.group(1)
        else:
            print(f"\033[91mno private IP found\033[0m")
    except FileNotFoundError:
        print(f"file {name} doesn't exist")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")
    return None


def update_ipfile_gen(name, new_ip, update_type):
    try:
        with open(name, "r") as f:
            content = f.read()

        if update_type == "private":
            if ":" in new_ip:
                new_content = re.sub(
                    r"ip addr add \S+/64 dev azumigen",
                    f"ip addr add {new_ip}/64 dev azumigen",
                    content,
                )
                ip_parts = new_ip.split(":")
                ip_parts[-1] = "1" if ip_parts[-1] == "2" else "2"
                counterpart_ip = ":".join(ip_parts)
                new_content = re.sub(
                    r"ip route add \S+/64 dev azumigen",
                    f"ip route add {counterpart_ip}/64 dev azumigen",
                    new_content,
                )
            else:
                new_content = re.sub(
                    r"ip addr add \d+\.\d+\.\d+\.\d+/32 dev azumigen",
                    f"ip addr add {new_ip}/32 dev azumigen",
                    content,
                )
                ip_parts = new_ip.split(".")
                ip_parts[-1] = "1" if ip_parts[-1] == "2" else "2"
                counterpart_ip = ".".join(ip_parts)
                new_content = re.sub(
                    r"ip route add \d+\.\d+\.\d+\.\d+/32 dev azumigen",
                    f"ip route add {counterpart_ip}/32 dev azumigen",
                    new_content,
                )
        elif update_type == "remote":
            new_content = re.sub(r"remote \S+", f"remote {new_ip}", content)

        with open(name, "w") as f:
            f.write(new_content)
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def get_current_private_ipsgen():
    private_ip_geneve = private_gen("/etc/sys.sh")
    return {
        "geneve": private_ip_geneve,
    }


def display_stuff_genk(remote_ip, private_ip):
    lines = [
        f"\033[93mTitle:         Geneve Configuration\033[0m",
        f"\033[97m──────────────────────────────────────\033[0m",
        f"\033[92mKharej Public IP:      \033[97m{remote_ip}\033[0m",
        f"\033[93mGeneve Private IP:     \033[97m{private_ip}\033[0m",
    ]
    box_width = 50

    print("\033[93m╭" + "─" * (box_width - 2) + "╮\033[0m")

    for line in lines:
        print(f"\033[93m {line:<{box_width - 4}} \033[0m")

    print("\033[93m╰" + "─" * (box_width - 2) + "╯\033[0m")


def display_stuff_geni(remote_ip, private_ip):
    lines = [
        f"\033[93mTitle:         Geneve Configuration\033[0m",
        f"\033[97m──────────────────────────────────────\033[0m",
        f"\033[92mIRAN Public IP:      \033[97m{remote_ip}\033[0m",
        f"\033[93mGeneve Private IP:     \033[97m{private_ip}\033[0m",
    ]
    box_width = 50

    print("\033[93m╭" + "─" * (box_width - 2) + "╮\033[0m")

    for line in lines:
        print(f"\033[93m {line:<{box_width - 4}} \033[0m")

    print("\033[93m╰" + "─" * (box_width - 2) + "╯\033[0m")


def save_stuff_gen(private_ip, remote_ip):
    current_ips = get_current_private_ipsgen()
    current_ip = current_ips.get("geneve")

    if current_ip:
        delete_ufw_rules(current_ip)

    add_ufw_rules(private_ip)

    opposite_private_ip = wtb_opposite_ipgen(private_ip)

    try:
        update_pingfilegen("/etc/ping_sys.sh", opposite_private_ip)
        update_ipfile_gen("/etc/sys.sh", private_ip, update_type="private")
        update_ipfile_gen("/etc/sys.sh", remote_ip, update_type="remote")

        interface = "azumigen"
        try:
            subprocess.run(["ip", "link", "set", "dev", interface, "down"], check=True)
            subprocess.run(["ip", "link", "delete", interface], check=True)
        except subprocess.CalledProcessError:
            print("\033[91merror bringing interface down or deleting it\033[0m")

        script = "/etc/sys.sh"
        result = subprocess.run(["/bin/bash", script], capture_output=True, text=True)
        if "RTNETLINK answers: File exists" in (result.stderr or ""):
            print("interface already exists, don't mind this")
        else:
            result.check_returncode()
        print(
            f"\033[92mChanges saved and {interface} interface updated successfully!\033[0m"
        )

        subprocess.run(["sudo", "systemctl", "daemon-reload"], check=True)
        try:
            subprocess.run(
                ["sudo", "systemctl", "restart", "ping_gen.service"], check=True
            )
            display_checkmark(
                "\033[92mSystem services reloaded and restarted successfully!\033[0m"
            )
        except subprocess.CalledProcessError as e:
            if "Unit ping_gen.service not found" in (e.stderr or ""):
                print(
                    "\033[91mFailed to restart ping_gen.service: Unit ping_gen.service not found.\033[0m"
                )
            else:
                raise

    except subprocess.CalledProcessError as e:
        print(
            f"\033[91merror applying network stuff: {e.stderr.strip() if e.stderr else e}\033[0m"
        )
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def genudpnosec_edit_localiran():
    remote_ip_private = remote_ip("/etc/sys.sh")
    private_ip_private = private_gen("/etc/sys.sh")

    if not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    while True:
        os.system("clear")
        display_stuff_genk(remote_ip_private, private_ip_private)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mGeneve\033[93m IRAN Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej \033[92m Public IP\033[0m")
        print("2.\033[93m Change \033[97mGeneve \033[93mPrivate IPV4 \033[0m")
        print("3. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local single menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "2":
            new_ip = input(
                "\033[93mEnter New Private IPV4 address \033[96m[Geneve]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mKharej\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "3":
            save_stuff_gen(private_ip_private, remote_ip_private)
            break
        elif choice == "0":
            clear()
            single_edit_local()
            break
        else:
            print("Please select a valid option.")


def genudpnosec_edit_localkharej():
    remote_ip_private = remote_ip("/etc/sys.sh")
    private_ip_private = private_gen("/etc/sys.sh")

    if not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    while True:
        os.system("clear")
        display_stuff_geni(remote_ip_private, private_ip_private)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mGeneve\033[93m Kharej Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN \033[92m Public IP\033[0m")
        print("2.\033[93m Change \033[97mGeneve \033[93mPrivate IPV4 \033[0m")
        print("3. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local single menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "2":
            new_ip = input(
                "\033[93mEnter New Private IPV4 address \033[96m[Geneve]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mIRAN\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "3":
            save_stuff_gen(private_ip_private, remote_ip_private)
            break
        elif choice == "0":
            clear()
            single_edit_local()
            break
        else:
            print("Please select a valid option.")


def ipsec_secret(name):
    try:
        with open(name, "r") as f:
            content = f.read()
        match = re.search(r'PSK "([^"]+)"', content)
        if match:
            return match.group(1)
        else:
            print("\033[91mno IPSec secret found\033[0m")
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")
    return None


def update_ipfile_gensec(name, new_ip, update_type):
    try:
        with open(name, "r") as f:
            content = f.read()

        if update_type == "private":
            if ":" in new_ip:
                new_content = re.sub(
                    r"ip addr add \S+/64 dev azumigen",
                    f"ip addr add {new_ip}/64 dev azumigen",
                    content,
                )
                ip_parts = new_ip.split(":")
                ip_parts[-1] = "1" if ip_parts[-1] == "2" else "2"
                counterpart_ip = ":".join(ip_parts)
                new_content = re.sub(
                    r"ip route add \S+/64 dev azumigen",
                    f"ip route add {counterpart_ip}/64 dev azumigen",
                    new_content,
                )
            else:
                new_content = re.sub(
                    r"ip addr add \d+\.\d+\.\d+\.\d+/32 dev azumigen",
                    f"ip addr add {new_ip}/32 dev azumigen",
                    content,
                )
                ip_parts = new_ip.split(".")
                ip_parts[-1] = "1" if ip_parts[-1] == "2" else "2"
                counterpart_ip = ".".join(ip_parts)
                new_content = re.sub(
                    r"ip route add \d+\.\d+\.\d+\.\d+/32 dev azumigen",
                    f"ip route add {counterpart_ip}/32 dev azumigen",
                    new_content,
                )
        elif update_type == "remote":
            new_content = re.sub(r"remote \S+", f"remote {new_ip}", content)
        elif update_type == "ipsec":
            if ":" in new_ip:
                ip_parts = new_ip.split(":")
                ip_parts[-1] = "1" if ip_parts[-1] == "2" else "2"
                counterpart_ip = ":".join(ip_parts)
                new_content = re.sub(
                    r"leftsubnet=\S+", f"leftsubnet={new_ip}/64", content
                )
                new_content = re.sub(r"leftid=\S+", f"leftid={new_ip}", new_content)
                new_content = re.sub(
                    r"right=\S+", f"right={counterpart_ip}", new_content
                )
                new_content = re.sub(
                    r"rightsubnet=\S+", f"rightsubnet={counterpart_ip}/64", new_content
                )
            else:
                ip_parts = new_ip.split(".")
                ip_parts[-1] = "1" if ip_parts[-1] == "2" else "2"
                counterpart_ip = ".".join(ip_parts)
                new_content = re.sub(
                    r"leftsubnet=\S+", f"leftsubnet={new_ip}/32", content
                )
                new_content = re.sub(r"leftid=\S+", f"leftid={new_ip}", new_content)
                new_content = re.sub(
                    r"right=\S+", f"right={counterpart_ip}", new_content
                )
                new_content = re.sub(
                    r"rightsubnet=\S+", f"rightsubnet={counterpart_ip}/32", new_content
                )

        with open(name, "w") as f:
            f.write(new_content)
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def update_ipsec_secret(name, new_secret):
    try:
        with open(name, "r") as f:
            content = f.read()

        new_content = re.sub(r'PSK "[^"]+"', f'PSK "{new_secret}"', content)

        with open(name, "w") as f:
            f.write(new_content)
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def save_stuff_gensec(private_ip, remote_ip, ipsec_secret):
    try:
        current_ips = get_current_private_ipsgen()
        current_ip = current_ips.get("geneve")

        if current_ip:
            delete_ufw_rules(current_ip)

        add_ufw_rules(private_ip)

        opposite_private_ip = wtb_opposite_ipgen(private_ip)

        update_pingfilegen("/etc/ping_sys.sh", opposite_private_ip)
        update_ipfile_gensec("/etc/sys.sh", private_ip, update_type="private")
        update_ipfile_gensec("/etc/sys.sh", remote_ip, update_type="remote")
        update_ipfile_gensec("/etc/ipsec.conf", private_ip, update_type="ipsec")
        update_ipsec_secret("/etc/ipsec.secrets", ipsec_secret)

        try:
            interface = "azumigen"
            subprocess.run(["ip", "link", "set", "dev", interface, "down"], check=True)
            subprocess.run(["ip", "link", "delete", interface], check=True)
        except subprocess.CalledProcessError:
            print("\033[91merror bringing interface down or deleting it\033[0m")

        script = "/etc/sys.sh"
        result = subprocess.run(["/bin/bash", script], capture_output=True, text=True)
        if "RTNETLINK answers: File exists" in result.stderr:
            print("interface already exists, don't mind this")
        else:
            result.check_returncode()
        display_checkmark(
            f"\033[92mChanges saved and {interface} interface updated successfully!\033[0m"
        )

        subprocess.run(["sudo", "systemctl", "daemon-reload"], check=True)
        try:
            subprocess.run(
                ["sudo", "systemctl", "restart", "ping_gen.service"], check=True
            )
        except subprocess.CalledProcessError as e:
            if "Unit ping_gen.service not found" in (e.stderr or ""):
                print(
                    "\033[91mFailed to restart ping_gen.service: Unit ping_gen.service not found.\033[0m"
                )
            else:
                raise

        subprocess.run(
            ["sudo", "systemctl", "restart", "strongswan-starter"], check=True
        )

        result = subprocess.run(
            ["systemctl", "list-units", "--full", "--all", "strongswan.service"],
            capture_output=True,
            text=True,
        )
        if "strongswan.service" in (result.stdout or ""):
            subprocess.run(["sudo", "systemctl", "restart", "strongswan"], check=True)
        else:
            print("\033[91mstrongswan service not found, don't mind this error.\033[0m")
    except subprocess.CalledProcessError as e:
        print(
            f"\033[91merror applying network stuff: {e.stderr.strip() if e.stderr else e}\033[0m"
        )
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def display_stuff_k(remote_ip, private_ip, ipsec_secret):
    lines = [
        f"\033[93mTitle:         Geneve Configuration\033[0m",
        f"\033[97m──────────────────────────────────────\033[0m",
        f"\033[92mKharej Public IP:      \033[97m{remote_ip}\033[0m",
        f"\033[93mGeneve Private IP:     \033[97m{private_ip}\033[0m",
        f"\033[94mIPSec key:             \033[97m{ipsec_secret}\033[0m",
    ]
    box_width = 50

    print("\033[93m╭" + "─" * (box_width - 2) + "╮\033[0m")

    for line in lines:
        print(f"\033[93m {line:<{box_width - 4}} \033[0m")

    print("\033[93m╰" + "─" * (box_width - 2) + "╯\033[0m")


def display_stuff_i(remote_ip, private_ip, ipsec_secret):
    lines = [
        f"\033[93mTitle:         Geneve Configuration\033[0m",
        f"\033[97m──────────────────────────────────────\033[0m",
        f"\033[92mIRAN Public IP:      \033[97m{remote_ip}\033[0m",
        f"\033[93mGeneve Private IP:   \033[97m{private_ip}\033[0m",
        f"\033[94mIPSec key:           \033[97m{ipsec_secret}\033[0m",
    ]
    box_width = 50

    print("\033[93m╭" + "─" * (box_width - 2) + "╮\033[0m")

    for line in lines:
        print(f"\033[93m {line:<{box_width - 4}} \033[0m")

    print("\033[93m╰" + "─" * (box_width - 2) + "╯\033[0m")


def genudpsec_edit_local():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print("\033[92m(   ) \033[92mEdit local\033[93m Geneve UDP V4 IPSEC Menu\033[0m")
    print('\033[92m "-"\033[93m════════════════════════════════════════════\033[0m')
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[92mKharej\033[0m")
    print("2. \033[93mIRAN\033[0m")
    print("3. \033[94mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        choice = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if choice == "1":
            genudpsec_edit_localkharej()
            break
        elif choice == "2":
            genudpsec_edit_localiran()
            break
        elif choice == "3":
            clear()
            gen_edit_local()
            break
        else:
            print("Invalid choice.")


def genudpsec_edit_localiran():
    remote_ip_private = remote_ip("/etc/sys.sh")
    private_ip_private = private_gen("/etc/sys.sh")
    ipsec_secret_private = ipsec_secret("/etc/ipsec.secrets")

    if not remote_ip_private or not private_ip_private or not ipsec_secret_private:
        print("Couldn't retrieve IP addresses or IPSec secret from files")
        return

    while True:
        os.system("clear")
        display_stuff_k(remote_ip_private, private_ip_private, ipsec_secret_private)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mGeneve\033[93m IRAN Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej \033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mGeneve \033[93mPrivate IPV4 \033[0m")
        print("3. \033[93mChange IPSec Secret Key\033[0m")
        print("4. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local single menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "2":
            new_ip = input(
                "\033[93mEnter New Private IPV4 address \033[96m[Geneve]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mKharej\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "3":
            new_secret = input("\033[93mEnter new IPSec Secret Key :\033[0m ")
            if new_secret:
                ipsec_secret_private = new_secret
            else:
                print("\033[91mCrazy Secret Key\033[0m")
        elif choice == "4":
            save_stuff_gensec(
                private_ip_private, remote_ip_private, ipsec_secret_private
            )
            update_ipsec_ip(private_ip_private)
            break
        elif choice == "0":
            clear()
            single_edit_local()
            break
        else:
            print("Please select a valid option.")


def genudpsec_edit_localkharej():
    remote_ip_private = remote_ip("/etc/sys.sh")
    private_ip_private = private_gen("/etc/sys.sh")
    ipsec_secret_private = ipsec_secret("/etc/ipsec.secrets")

    if not remote_ip_private or not private_ip_private or not ipsec_secret_private:
        print("Couldn't retrieve IP addresses or IPSec secret from files")
        return

    while True:
        os.system("clear")
        display_stuff_i(remote_ip_private, private_ip_private, ipsec_secret_private)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mGeneve\033[93m Kharej Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN \033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mGeneve \033[93mPrivate IPV4 \033[0m")
        print("3. \033[93mChange IPSec Secret Key\033[0m")
        print("4. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local single menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "2":
            new_ip = input(
                "\033[93mEnter New Private IPV4 address \033[96m[Geneve]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mIRAN\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "3":
            new_secret = input("\033[93mEnter new IPSec Secret Key :\033[0m ")
            if new_secret:
                ipsec_secret_private = new_secret
            else:
                print("\033[91mCrazy Secret Key\033[0m")
        elif choice == "4":
            save_stuff_gensec(
                private_ip_private, remote_ip_private, ipsec_secret_private
            )
            update_ipsec_ip(private_ip_private)
            break
        elif choice == "0":
            clear()
            single_edit_local()
            break
        else:
            print("Please select a valid option.")


def gen_edit_localv6():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print("\033[92m(   ) \033[92mEdit local\033[93m Geneve UDP V6 Menu\033[0m")
    print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[92mNo IPSEC\033[0m")
    print("2. \033[93mWith IPSEC\033[0m")
    print("3. \033[94mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        choice = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if choice == "1":
            genudpnosec_edit_localv6()
            break
        elif choice == "2":
            genudpsec_edit_localv6()
            break
        elif choice == "3":
            clear()
            gen_edit_localmenu()
            break
        else:
            print("Invalid choice.")


def genudpnosec_edit_localv6():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print("\033[92m(   ) \033[92mEdit local\033[93m Geneve UDP V6 Menu\033[0m")
    print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[92mKharej\033[0m")
    print("2. \033[93mIRAN\033[0m")
    print("3. \033[94mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        choice = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if choice == "1":
            genudpnosec_edit_localkharejv6()
            break
        elif choice == "2":
            genudpnosec_edit_localiranv6()
            break
        elif choice == "3":
            clear()
            gen_edit_localv6()
            break
        else:
            print("Invalid choice.")


def genudpnosec_edit_localiranv6():
    remote_ip_private = remote_ip("/etc/sys.sh")
    private_ip_private = private_gen("/etc/sys.sh")

    if not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    while True:
        os.system("clear")
        display_stuff_genk(remote_ip_private, private_ip_private)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mGeneve\033[93m IRAN Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej \033[92m Public IP\033[0m")
        print("2.\033[93m Change \033[97mGeneve \033[93mPrivate IPV6 \033[0m")
        print("3. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local single menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "2":
            new_ip = input(
                "\033[93mEnter New Private IPV6 address \033[96m[Geneve]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mKharej\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "3":
            save_stuff_gen(private_ip_private, remote_ip_private)
            break
        elif choice == "0":
            clear()
            single_edit_local()
            break
        else:
            print("Please select a valid option.")


def genudpnosec_edit_localkharejv6():
    remote_ip_private = remote_ip("/etc/sys.sh")
    private_ip_private = private_gen("/etc/sys.sh")

    if not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    while True:
        os.system("clear")
        display_stuff_geni(remote_ip_private, private_ip_private)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mGeneve\033[93m Kharej Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN \033[92m Public IP\033[0m")
        print("2.\033[93m Change \033[97mGeneve \033[93mPrivate IPV6 \033[0m")
        print("3. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local single menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "2":
            new_ip = input(
                "\033[93mEnter New Private IPV6 address \033[96m[Geneve]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mKharej\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "3":
            save_stuff_gen(private_ip_private, remote_ip_private)
            break
        elif choice == "0":
            clear()
            single_edit_local()
            break
        else:
            print("Please select a valid option.")


def genudpsec_edit_localv6():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print("\033[92m(   ) \033[92mEdit local\033[93m Geneve UDP V6 IPSEC Menu\033[0m")
    print('\033[92m "-"\033[93m════════════════════════════════════════════\033[0m')
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[92mKharej\033[0m")
    print("2. \033[93mIRAN\033[0m")
    print("3. \033[94mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        choice = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if choice == "1":
            genudpsec_edit_localkharejv6()
            break
        elif choice == "2":
            genudpsec_edit_localiranv6()
            break
        elif choice == "3":
            clear()
            gen_edit_localv6()
            break
        else:
            print("Invalid choice.")


def genudpsec_edit_localiranv6():
    remote_ip_private = remote_ip("/etc/sys.sh")
    private_ip_private = private_gen("/etc/sys.sh")
    ipsec_secret_private = ipsec_secret("/etc/ipsec.secrets")

    if not remote_ip_private or not private_ip_private or not ipsec_secret_private:
        print("Couldn't retrieve IP addresses or IPSec secret from files")
        return

    while True:
        os.system("clear")
        display_stuff_k(remote_ip_private, private_ip_private, ipsec_secret_private)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mGeneve\033[93m IRAN Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej \033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mGeneve \033[93mPrivate IPV6 \033[0m")
        print("3. \033[93mChange IPSec Secret Key\033[0m")
        print("4. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local single menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "2":
            new_ip = input(
                "\033[93mEnter New Private IPV6 address \033[96m[Geneve]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mKharej\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "3":
            new_secret = input("\033[93mEnter new IPSec Secret Key :\033[0m ")
            if new_secret:
                ipsec_secret_private = new_secret
            else:
                print("\033[91mCrazy Secret Key\033[0m")
        elif choice == "4":
            save_stuff_gensec(
                private_ip_private, remote_ip_private, ipsec_secret_private
            )
            update_ipsec_ip(private_ip_private)
            break
        elif choice == "0":
            clear()
            single_edit_local()
            break
        else:
            print("Please select a valid option.")


def wtb_opposite_ipgen(ip):
    if ":" in ip:  # IPv6
        ip_parts = ip.split(":")
        ip_parts[-1] = "1" if ip_parts[-1] == "2" else "2"
        return ":".join(ip_parts)
    else:  # IPv4
        ip_parts = ip.split(".")
        ip_parts[-1] = "1" if ip_parts[-1] == "2" else "2"
        return ".".join(ip_parts)


def update_pingfilegen(name, new_ip):
    try:
        with open(name, "r") as f:
            content = f.read()

        new_content = re.sub(r'ip_address="[^"]+"', f'ip_address="{new_ip}"', content)

        with open(name, "w") as f:
            f.write(new_content)
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def genudpsec_edit_localkharejv6():
    remote_ip_private = remote_ip("/etc/sys.sh")
    private_ip_private = private_gen("/etc/sys.sh")
    ipsec_secret_private = ipsec_secret("/etc/ipsec.secrets")

    if not remote_ip_private or not private_ip_private or not ipsec_secret_private:
        print("Couldn't retrieve IP addresses or IPSec secret from files")
        return

    while True:
        os.system("clear")
        display_stuff_i(remote_ip_private, private_ip_private, ipsec_secret_private)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mGeneve\033[93m Kharej Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN \033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mGeneve \033[93mPrivate IPV6 \033[0m")
        print("3. \033[93mChange IPSec Secret Key\033[0m")
        print("4. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local single menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "2":
            new_ip = input(
                "\033[93mEnter New Private IPV6 address \033[96m[Geneve]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mKharej\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "3":
            new_secret = input("\033[93mEnter new IPSec Secret Key :\033[0m ")
            if new_secret:
                ipsec_secret_private = new_secret
            else:
                print("\033[91mCrazy Secret Key\033[0m")
        elif choice == "4":
            save_stuff_gensec(
                private_ip_private, remote_ip_private, ipsec_secret_private
            )
            update_ipsec_ip(private_ip_private)
            break
        elif choice == "0":
            clear()
            single_edit_local()
            break
        else:
            print("Please select a valid option.")


def gengre_edit_local():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print("\033[92m(   ) \033[92mEdit local\033[93m Geneve GRE6 Menu\033[0m")
    print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[92mNo IPSEC\033[0m")
    print("2. \033[93mWith IPSEC\033[0m")
    print("3. \033[94mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        choice = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if choice == "1":
            gengrenosec_edit_local()
            break
        elif choice == "2":
            gengresec_edit_local()
            break
        elif choice == "3":
            clear()
            single_edit_local()
            break
        else:
            print("Invalid choice.")


def gengrenosec_edit_local():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print("\033[92m(   ) \033[92mEdit local\033[93m Geneve GRE6 Menu\033[0m")
    print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[92mKharej\033[0m")
    print("2. \033[93mIRAN\033[0m")
    print("3. \033[94mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        choice = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if choice == "1":
            gengrenosec_edit_localkharej()
            break
        elif choice == "2":
            gengrenosec_edit_localiran()
            break
        elif choice == "3":
            clear()
            gengre_edit_local()
            break
        else:
            print("Invalid choice.")


def gengresec_edit_local():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print("\033[92m(   ) \033[92mEdit local\033[93m Geneve GRE6 + IPSEC Menu\033[0m")
    print('\033[92m "-"\033[93m═════════════════════════════════════════\033[0m')
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[92mKharej\033[0m")
    print("2. \033[93mIRAN\033[0m")
    print("3. \033[94mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        choice = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if choice == "1":
            gengresec_edit_localkharej()
            break
        elif choice == "2":
            gengresec_edit_localiran()
            break
        elif choice == "3":
            clear()
            gengre_edit_local()
            break
        else:
            print("Invalid choice.")


def update_ipfilegengre_nosec(name, new_ip, update_type):
    try:
        with open(name, "r") as f:
            content = f.read()

        if update_type == "private":
            new_content = re.sub(
                r"ip (-6 )?addr add [^ ]+/64 dev azumi",
                f"ip -6 addr add {new_ip}/64 dev azumi",
                content,
            )
            ip_parts = new_ip.split(":")
            if new_ip.endswith(":2"):
                ip_parts[-1] = "1"
            else:
                ip_parts[-1] = "2"
            counterpart_ip = ":".join(ip_parts)
            new_content = re.sub(
                r"ip (-6 )?route add [^ ]+/64 dev azumi",
                f"ip -6 route add {counterpart_ip}/64 dev azumi",
                new_content,
            )

            update_ipfilegengre_nosec("/etc/gre6.sh", new_ip, update_type="gre6_local")
            update_ipfilegengre_nosec(
                "/etc/gre6.sh", counterpart_ip, update_type="gre6_remote"
            )
        elif update_type == "local":
            new_content = re.sub(r"local \S+", f"local {new_ip}", content)
        elif update_type == "remote":
            new_content = re.sub(r"remote \S+", f"remote {new_ip}", content)
        elif update_type == "gre6_local":
            new_content = re.sub(r"local \S+", f"local {new_ip}", content)
        elif update_type == "gre6_remote":
            new_content = re.sub(r"remote \S+", f"remote {new_ip}", content)
        elif update_type == "geneve_remote":
            new_content = re.sub(r"remote \S+", f"remote {new_ip}", content)
        elif update_type == "geneve_private":
            new_content = re.sub(
                r"ip addr add \S+/16 dev azumigen",
                f"ip addr add {new_ip}/16 dev azumigen",
                content,
            )
            counterpart_ip = wtb_opposite_ip_gengrenosec(new_ip)
            new_content = re.sub(
                r"ip route add \S+/16 dev azumigen",
                f"ip route add {counterpart_ip}/16 dev azumigen",
                new_content,
            )

        with open(name, "w") as f:
            f.write(new_content)
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def update_pingfile_gengrenosec(name, ip, update_type):
    try:
        with open(name, "r") as f:
            content = f.read()

        if update_type == "geneve":
            new_content = re.sub(r"remote \S+", f"remote {ip}", content)
        elif update_type == "geneve_opposite":
            opposite_ip = wtb_opposite_ip_gengrenosec(ip)
            new_content = re.sub(r"remote \S+", f"remote {opposite_ip}", content)
        elif update_type == "ping_ip":
            new_content = re.sub(r'ip_address="[^"]+"', f'ip_address="{ip}"', content)
        elif update_type == "ping_v6":
            new_content = re.sub(r'ip_address="[^"]+"', f'ip_address="{ip}"', content)
        elif update_type == "ping_sys_opposite":
            new_content = re.sub(r'ip_address="[^"]+"', f'ip_address="{ip}"', content)
        else:
            print("\033[91mInvalid update type for pingfile\033[0m")
            return

        with open(name, "w") as f:
            f.write(new_content)
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def wtb_opposite_ip_gengrenosec(ip):
    ip_parts = ip.split(":")
    if ip.endswith(":1"):
        ip_parts[-1] = "2"
    else:
        ip_parts[-1] = "1"
    return ":".join(ip_parts)


def save_stuff_gengrenosec(
    new_private_ip, local_ip, remote_ip, is_gre6, is_geneve=False
):
    current_ips = get_current_private_ipsgregennosec()

    if is_gre6:
        current_ip = current_ips["gre6"]
    elif is_geneve:
        current_ip = current_ips["geneve"]
    else:
        current_ip = current_ips["private"]

    if current_ip:
        delete_ufw_rules(current_ip)

    add_ufw_rules(new_private_ip)

    counterpart_ip = wtb_opposite_ip_gengrenosec(new_private_ip)

    try:
        if is_gre6:
            update_pingfile_gengrenosec(
                "/etc/ping_ip.sh", counterpart_ip, update_type="ping_ip"
            )
            update_ipfilegengre_nosec(
                "/etc/gre6.sh", new_private_ip, update_type="private"
            )
            update_ipfilegengre_nosec("/etc/gre6.sh", remote_ip, update_type="remote")
            update_ipfilegengre_nosec(
                "/etc/sys.sh", counterpart_ip, update_type="geneve_remote"
            )
            update_pingfile_gengrenosec(
                "/etc/ping_sys.sh", remote_ip, update_type="geneve"
            )
            update_pingfile_gengrenosec(
                "/etc/ping_sys.sh", counterpart_ip, update_type="geneve_opposite"
            )
        elif is_geneve:
            update_ipfilegengre_nosec(
                "/etc/sys.sh", new_private_ip, update_type="geneve_private"
            )
            update_pingfile_gengrenosec(
                "/etc/ping_sys.sh", counterpart_ip, update_type="ping_sys_opposite"
            )
        else:
            update_pingfile_gengrenosec(
                "/etc/ping_v6.sh", counterpart_ip, update_type="ping_v6"
            )
            update_ipfilegengre_nosec(
                "/etc/private.sh", new_private_ip, update_type="private"
            )
            update_ipfilegengre_nosec("/etc/private.sh", local_ip, update_type="local")
            update_ipfilegengre_nosec(
                "/etc/private.sh", remote_ip, update_type="remote"
            )
            update_ipfilegengre_nosec(
                "/etc/gre6.sh", counterpart_ip, update_type="gre6_remote"
            )
            update_pingfile_gengrenosec(
                "/etc/ping_sys.sh", counterpart_ip, update_type="ping_sys_opposite"
            )

        interface = "azumig6" if is_gre6 else "azumi"
        if is_geneve:
            interface = "azumigen"
        try:
            subprocess.run(["ip", "link", "set", "dev", interface, "down"], check=True)
            subprocess.run(["ip", "link", "delete", interface], check=True)
        except subprocess.CalledProcessError:
            print("\033[91merror bringing interface down or deleting it\033[0m")

        script = "/etc/gre6.sh" if is_gre6 else "/etc/private.sh"
        if is_geneve:
            script = "/etc/sys.sh"
        result = subprocess.run(["/bin/bash", script], capture_output=True, text=True)
        if "RTNETLINK answers: File exists" in result.stderr:
            print("\033[91madditional ip already exists. Ignoring this error\033[0m")
        else:
            result.check_returncode()
        subprocess.run(["sudo", "systemctl", "daemon-reload"], check=True)

        try:
            subprocess.run(["systemctl", "restart", "ping_v6"], check=True)
            display_checkmark("\033[92mping_v6 service restarted successfully!\033[0m")
        except subprocess.CalledProcessError as e:
            if "Unit ping_v6 not found" in (e.stderr or ""):
                print("\033[91mcouldn't restart ping_v6\033[0m")

        try:
            subprocess.run(["sudo", "systemctl", "restart", "ping_gen"], check=True)
            display_checkmark(
                "\033[92mSystem services reloaded and restarted successfully!\033[0m"
            )
        except subprocess.CalledProcessError as e:
            if "Unit ping_gen.service not found" in (e.stderr or ""):
                print("\033[91mcouldn't restart ping_gen\033[0m")

        try:
            subprocess.run(["sudo", "systemctl", "restart", "ping_ip"], check=True)
            display_checkmark("\033[92mping_ip service restarted successfully!\033[0m")
        except subprocess.CalledProcessError as e:
            if "Unit ping_ip not found" in (e.stderr or ""):
                print("\033[91mcouldn't restart ping_ip\033[0m")

        display_checkmark(
            f"\033[92mChanges saved and {interface} interface updated successfully!\033[0m"
        )
    except subprocess.CalledProcessError:
        print("\033[91merror in applying network changes: don't mind this error\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def display_stuff_geneve_greiran(remote_ip, private_ip):
    lines = [
        f"\033[93mTitle:         Geneve Configuration\033[0m",
        f"\033[97m──────────────────────────────────────\033[0m",
        f"\033[92mRemote IP:      \033[97m{remote_ip}\033[0m",
        f"\033[93mPrivate IP:     \033[97m{private_ip}\033[0m",
    ]
    box_width = 50

    print("\033[93m╭" + "─" * (box_width - 2) + "╮\033[0m")

    for line in lines:
        print(f"\033[93m {line:<{box_width - 4}} \033[0m")

    print("\033[93m╰" + "─" * (box_width - 2) + "╯\033[0m")


def display_stuff_geneve_greiran(remote_ip, private_ip):
    lines = [
        f"\033[93mTitle:         Geneve Configuration\033[0m",
        f"\033[97m──────────────────────────────────────\033[0m",
        f"\033[92mRemote IP:      \033[97m{remote_ip}\033[0m",
        f"\033[93mPrivate IP:     \033[97m{private_ip}\033[0m",
    ]
    box_width = 50

    print("\033[93m╭" + "─" * (box_width - 2) + "╮\033[0m")

    for line in lines:
        print(f"\033[93m {line:<{box_width - 4}} \033[0m")

    print("\033[93m╰" + "─" * (box_width - 2) + "╯\033[0m")


def gengrenosec_edit_localiran():
    local_ip_private = local_ip("/etc/private.sh")
    remote_ip_private = remote_ip("/etc/private.sh")
    private_ip_private = private_ip1("/etc/private.sh")

    local_ip_gre6 = local_ip("/etc/gre6.sh")
    remote_ip_gre6 = remote_ip("/etc/gre6.sh")
    private_ip_gre6 = private_gre6("/etc/gre6.sh")

    remote_ip_geneve = remote_ip("/etc/sys.sh")
    private_ip_geneve = private_gen_nosec("/etc/sys.sh")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("couldn't retrieve IP addresses from private file")
    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("couldn't retrieve IP addresses from gre6 file")
    if not remote_ip_geneve or not private_ip_geneve:
        print("couldn't retrieve IP addresses from geneve file")

    if (
        not local_ip_private
        or not remote_ip_private
        or not private_ip_private
        or not local_ip_gre6
        or not remote_ip_gre6
        or not private_ip_gre6
        or not remote_ip_geneve
        or not private_ip_geneve
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_privateiran(
            local_ip_private, remote_ip_private, private_ip_private
        )
        display_stuff_gre6(local_ip_gre6, remote_ip_gre6, private_ip_gre6)
        display_stuff_geneve_greiran(remote_ip_geneve, private_ip_geneve)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mGeneve GRE6\033[93m IRAN Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN \033[92m IPV4\033[0m")
        print("2. \033[93mChange \033[97mKHAREJ \033[92m IPV4\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[93mChange \033[97mGRE6 \033[93mPrivate IPV6\033[0m")
        print("5. \033[93mChange \033[97mGeneve \033[93mPrivate IPV6\033[0m")
        print("6. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local single menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_private = new_ip
                ip_parts = new_ip.split(":")
                if new_ip.endswith(":2"):
                    ip_parts[-1] = "1"
                else:
                    ip_parts[-1] = "2"
                counterpart_ip = ":".join(ip_parts)
                local_ip_gre6 = new_ip
                remote_ip_gre6 = counterpart_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[GRE6]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_gre6 = new_ip
                remote_ip_geneve = wtb_opposite_ip_gengrenosec(new_ip)
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "5":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[Geneve]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_geneve = new_ip
                save_stuff_gengrenosec(
                    private_ip_geneve,
                    None,
                    remote_ip_geneve,
                    is_gre6=False,
                    is_geneve=True,
                )
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mIRAN\033[93m Public IP :\033[0m ")
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input("\033[93mEnter \033[92mKHAREJ\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "6":
            save_stuff_gengrenosec(
                private_ip_private, local_ip_private, remote_ip_private, is_gre6=False
            )
            save_stuff_gengrenosec(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            save_stuff_gengrenosec(
                private_ip_geneve, None, remote_ip_geneve, is_gre6=False, is_geneve=True
            )
            break
        elif choice == "0":
            clear()
            single_edit_local()
            break
        else:
            print("Invalid choice. Please select a valid option.")


def gengrenosec_edit_localkharej():
    local_ip_private = local_ip("/etc/private.sh")
    remote_ip_private = remote_ip("/etc/private.sh")
    private_ip_private = private_ip1("/etc/private.sh")

    local_ip_gre6 = local_ip("/etc/gre6.sh")
    remote_ip_gre6 = remote_ip("/etc/gre6.sh")
    private_ip_gre6 = private_gre6("/etc/gre6.sh")

    remote_ip_geneve = remote_ip("/etc/sys.sh")
    private_ip_geneve = private_gen_nosec("/etc/sys.sh")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("couldn't retrieve IP addresses from private file")
    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("couldn't retrieve IP addresses from gre6 file")
    if not remote_ip_geneve or not private_ip_geneve:
        print("couldn't retrieve IP addresses from geneve file")

    if (
        not local_ip_private
        or not remote_ip_private
        or not private_ip_private
        or not local_ip_gre6
        or not remote_ip_gre6
        or not private_ip_gre6
        or not remote_ip_geneve
        or not private_ip_geneve
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_privatekharej(
            local_ip_private, remote_ip_private, private_ip_private
        )
        display_stuff_gre6(local_ip_gre6, remote_ip_gre6, private_ip_gre6)
        display_stuff_geneve_greiran(remote_ip_geneve, private_ip_geneve)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mGeneve GRE6\033[93m Kharej Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej \033[92m IPV4\033[0m")
        print("2. \033[93mChange \033[97mIRAN \033[92m IPV4\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[93mChange \033[97mGRE6 \033[93mPrivate IPV6\033[0m")
        print("5. \033[93mChange \033[97mGeneve \033[93mPrivate IPV6\033[0m")
        print("6. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local single menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_private = new_ip
                ip_parts = new_ip.split(":")
                if new_ip.endswith(":2"):
                    ip_parts[-1] = "1"
                else:
                    ip_parts[-1] = "2"
                counterpart_ip = ":".join(ip_parts)
                local_ip_gre6 = new_ip
                remote_ip_gre6 = counterpart_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[GRE6]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_gre6 = new_ip
                remote_ip_geneve = wtb_opposite_ip_gengrenosec(new_ip)
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "5":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[Geneve]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_geneve = new_ip
                save_stuff_gengrenosec(
                    private_ip_geneve,
                    None,
                    remote_ip_geneve,
                    is_gre6=False,
                    is_geneve=True,
                )
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mIRAN\033[93m Public IP :\033[0m ")
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input("\033[93mEnter \033[92mKHAREJ\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "6":
            save_stuff_gengrenosec(
                private_ip_private, local_ip_private, remote_ip_private, is_gre6=False
            )
            save_stuff_gengrenosec(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            save_stuff_gengrenosec(
                private_ip_geneve, None, remote_ip_geneve, is_gre6=False, is_geneve=True
            )
            break
        elif choice == "0":
            clear()
            single_edit_local()
            break
        else:
            print("Invalid choice. Please select a valid option.")


def get_current_private_ipsgregennosec():
    private_ip_private = private_ip1("/etc/private.sh")
    private_ip_gre6 = private_gre6("/etc/gre6.sh")
    private_ip_geneve = private_gen_nosec("/etc/sys.sh")
    return {
        "private": private_ip_private,
        "gre6": private_ip_gre6,
        "geneve": private_ip_geneve,
    }


def get_current_private_ipsgregen():
    private_ip_private = private_ip1("/etc/private.sh")
    private_ip_gre6 = private_gre6("/etc/gre6.sh")
    private_ip_geneve = private_gen("/etc/spn.sh")
    return {
        "private": private_ip_private,
        "gre6": private_ip_gre6,
        "geneve": private_ip_geneve,
    }


def update_ipfilegregen(name, new_ip, update_type):
    try:
        with open(name, "r") as f:
            content = f.read()

        if update_type == "private":
            new_content = re.sub(
                r"ip (-6 )?addr add [^ ]+/64 dev azumi",
                f"ip -6 addr add {new_ip}/64 dev azumi",
                content,
            )
            ip_parts = new_ip.split(":")
            if new_ip.endswith(":2"):
                ip_parts[-1] = "1"
            else:
                ip_parts[-1] = "2"
            counterpart_ip = ":".join(ip_parts)
            new_content = re.sub(
                r"ip (-6 )?route add [^ ]+/64 dev azumi",
                f"ip -6 route add {counterpart_ip}/64 dev azumi",
                new_content,
            )

            update_ipfilegregen("/etc/gre6.sh", new_ip, update_type="gre6_local")
            update_ipfilegregen(
                "/etc/gre6.sh", counterpart_ip, update_type="gre6_remote"
            )
        elif update_type == "local":
            new_content = re.sub(r"local \S+", f"local {new_ip}", content)
        elif update_type == "remote":
            new_content = re.sub(r"remote \S+", f"remote {new_ip}", content)
        elif update_type == "gre6_local":
            new_content = re.sub(r"local \S+", f"local {new_ip}", content)
        elif update_type == "gre6_remote":
            new_content = re.sub(r"remote \S+", f"remote {new_ip}", content)
        elif update_type == "geneve_remote":
            new_content = re.sub(r"remote \S+", f"remote {new_ip}", content)
        elif update_type == "geneve_private":
            new_content = re.sub(
                r"ip addr add \S+/64 dev azumigen",
                f"ip addr add {new_ip}/64 dev azumigen",
                content,
            )
            counterpart_ip = wtb_opposite_ipgregen(new_ip)
            new_content = re.sub(
                r"ip route add \S+/64 dev azumigen",
                f"ip route add {counterpart_ip}/64 dev azumigen",
                new_content,
            )

        with open(name, "w") as f:
            f.write(new_content)
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def update_pingfilegregen(name, ip, update_type):
    try:
        with open(name, "r") as f:
            content = f.read()

        if update_type == "geneve":
            new_content = re.sub(r"remote \S+", f"remote {ip}", content)
        elif update_type == "geneve_opposite":
            opposite_ip = wtb_opposite_ipgregen(ip)
            new_content = re.sub(r"remote \S+", f"remote {opposite_ip}", content)
        elif update_type == "ping_ip":
            new_content = re.sub(r'ip_address="[^"]+"', f'ip_address="{ip}"', content)
        elif update_type == "ping_v6":
            new_content = re.sub(r'ip_address="[^"]+"', f'ip_address="{ip}"', content)
        elif update_type == "ping_sys_opposite":
            new_content = re.sub(r'ip_address="[^"]+"', f'ip_address="{ip}"', content)
        else:
            print("\033[91mInvalid update type for pingfile\033[0m")
            return

        with open(name, "w") as f:
            f.write(new_content)
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def wtb_opposite_ipgregen(ip):
    ip_parts = ip.split(":")
    if ip.endswith(":1"):
        ip_parts[-1] = "2"
    else:
        ip_parts[-1] = "1"
    return ":".join(ip_parts)


def save_stuff_gregen(new_private_ip, local_ip, remote_ip, is_gre6, is_geneve=False):
    current_ips = get_current_private_ipsgregen()

    if is_gre6:
        current_ip = current_ips["gre6"]
    elif is_geneve:
        current_ip = current_ips["geneve"]
    else:
        current_ip = current_ips["private"]

    if current_ip:
        delete_ufw_rules(current_ip)

    add_ufw_rules(new_private_ip)

    counterpart_ip = wtb_opposite_ipgregen(new_private_ip)

    try:
        if is_gre6:
            update_pingfilegregen(
                "/etc/ping_ip.sh", counterpart_ip, update_type="ping_ip"
            )
            update_ipfilegregen("/etc/gre6.sh", new_private_ip, update_type="private")
            update_ipfilegregen("/etc/gre6.sh", remote_ip, update_type="remote")
            update_ipfilegregen(
                "/etc/spn.sh", counterpart_ip, update_type="geneve_remote"
            )
            update_pingfilegregen("/etc/ping_espan.sh", remote_ip, update_type="geneve")
            update_pingfilegregen(
                "/etc/ping_espan.sh", counterpart_ip, update_type="geneve_opposite"
            )
        elif is_geneve:
            update_ipfilegregen(
                "/etc/spn.sh", new_private_ip, update_type="geneve_private"
            )
            update_pingfilegregen(
                "/etc/ping_espan.sh", counterpart_ip, update_type="ping_sys_opposite"
            )
            update_ipsec_confgengre("/etc/ipsec.conf", new_private_ip)
        else:
            update_pingfilegregen(
                "/etc/ping_v6.sh", counterpart_ip, update_type="ping_v6"
            )
            update_ipfilegregen(
                "/etc/private.sh", new_private_ip, update_type="private"
            )
            update_ipfilegregen("/etc/private.sh", local_ip, update_type="local")
            update_ipfilegregen("/etc/private.sh", remote_ip, update_type="remote")
            update_ipfilegregen(
                "/etc/gre6.sh", counterpart_ip, update_type="gre6_remote"
            )
            update_pingfilegregen(
                "/etc/ping_espan.sh", counterpart_ip, update_type="ping_sys_opposite"
            )

        interface = "azumig6" if is_gre6 else "azumi"
        if is_geneve:
            interface = "azumigen"

        try:
            subprocess.run(["ip", "link", "set", "dev", interface, "down"], check=True)
            subprocess.run(["ip", "link", "delete", interface], check=True)
        except subprocess.CalledProcessError:
            print("\033[91merror bringing interface down or deleting it\033[0m")

        script = "/etc/gre6.sh" if is_gre6 else "/etc/private.sh"
        if is_geneve:
            script = "/etc/spn.sh"
        result = subprocess.run(["/bin/bash", script], capture_output=True, text=True)
        if "RTNETLINK answers: File exists" in result.stderr:
            print("\033[91madditional ip already exists. Ignoring this error\033[0m")
        else:
            result.check_returncode()

        subprocess.run(["sudo", "systemctl", "daemon-reload"], check=True)

        try:
            subprocess.run(["systemctl", "restart", "ping_v6"], check=True)
            print("\033[92m✔ ping_v6 service restarted successfully!\033[0m")
        except subprocess.CalledProcessError as e:
            if "Unit ping_v6 not found" in (e.stderr or ""):
                print("\033[91mcouldn't restart ping_v6\033[0m")

        try:
            subprocess.run(["sudo", "systemctl", "restart", "ping_espan"], check=True)
            print("\033[92m✔ ping_espan service restarted successfully!\033[0m")
        except subprocess.CalledProcessError as e:
            if "Unit ping_espan not found" in (e.stderr or ""):
                print("\033[91mcouldn't restart ping_espan\033[0m")

        try:
            subprocess.run(["sudo", "systemctl", "restart", "ping_ip"], check=True)
            print("\033[92m✔ ping_ip service restarted successfully!\033[0m")
        except subprocess.CalledProcessError as e:
            if "Unit ping_ip not found" in (e.stderr or ""):
                print("\033[91mcouldn't restart ping_ip\033[0m")

        subprocess.run(["systemctl", "restart", "strongswan-starter"], check=True)

        result = subprocess.run(
            ["systemctl", "list-units", "--full", "--all", "strongswan.service"],
            capture_output=True,
            text=True,
        )
        if "strongswan.service" in result.stdout:
            subprocess.run(["systemctl", "restart", "strongswan"], check=True)
        else:
            print("\033[91mstrongswan service not found. don't mind this error\033[0m")

    except subprocess.CalledProcessError:
        print("\033[91merror in applying network changes: don't mind this error\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")
    print(
        f"\033[92m✔ Changes saved and {interface} interface updated successfully!\033[0m"
    )


def update_ipsec_confgengre(name, new_private_ip):
    try:
        with open(name, "r") as f:
            content = f.readlines()

        start_idx, end_idx = None, None
        for i, line in enumerate(content):
            if line.strip() == "conn ipsecsit":
                start_idx = i
            elif start_idx is not None and line.strip().startswith("conn "):
                end_idx = i
                break

        if start_idx is None:
            print("\033[91m'conn ipsecsit' section not found\033[0m")
            return

        if end_idx is None:
            end_idx = len(content)

        section = content[start_idx:end_idx]
        ip_parts = new_private_ip.split(":")
        if new_private_ip.endswith(":2"):
            ip_parts[-1] = "1"
        else:
            ip_parts[-1] = "2"
        counterpart_ip = ":".join(ip_parts)

        new_section = []
        for line in section:
            line = re.sub(r"leftsubnet=\S+", f"leftsubnet={new_private_ip}/64", line)
            line = re.sub(r"leftid=\S+", f"leftid={new_private_ip}", line)
            line = re.sub(r"right=\S+", f"right={counterpart_ip}", line)
            line = re.sub(r"rightsubnet=\S+", f"rightsubnet={counterpart_ip}/64", line)
            new_section.append(line)

        new_content = content[:start_idx] + new_section + content[end_idx:]

        with open(name, "w") as f:
            f.writelines(new_content)

        print(f"\033[92m'conn ipsecsit' section updated successfully\033[0m")
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def display_ipsecsecretgengre(secret_key):
    print(f"\033[97m──────────────────────────────────────\033[0m")
    print(f"\033[93m IPsec Key:  \033[97m{secret_key}\033[0m")
    print(f"\033[97m──────────────────────────────────────\033[0m")


def update_ipsecsecret(name, new_key):
    try:
        with open(name, "r") as f:
            content = f.read()

        new_content = re.sub(r'PSK ".*"', f'PSK "{new_key}"', content)

        with open(name, "w") as f:
            f.write(new_content)
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def gengresec_edit_localiran():
    local_ip_private = local_ip("/etc/private.sh")
    remote_ip_private = remote_ip("/etc/private.sh")
    private_ip_private = private_ip1("/etc/private.sh")

    local_ip_gre6 = local_ip("/etc/gre6.sh")
    remote_ip_gre6 = remote_ip("/etc/gre6.sh")
    private_ip_gre6 = private_gre6("/etc/gre6.sh")

    remote_ip_geneve = remote_ip("/etc/spn.sh")
    private_ip_geneve = private_gen("/etc/spn.sh")
    ipsecsecret = get_ipsecsecret("/etc/ipsec.secrets")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("couldn't retrieve IP addresses from private file")
    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("couldn't retrieve IP addresses from gre6 file")
    if not remote_ip_geneve or not private_ip_geneve:
        print("couldn't retrieve IP addresses from geneve file")

    if (
        not local_ip_private
        or not remote_ip_private
        or not private_ip_private
        or not local_ip_gre6
        or not remote_ip_gre6
        or not private_ip_gre6
        or not remote_ip_geneve
        or not private_ip_geneve
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_privateiran(
            local_ip_private, remote_ip_private, private_ip_private
        )
        display_stuff_gre6(local_ip_gre6, remote_ip_gre6, private_ip_gre6)
        display_stuff_geneve_greiran(remote_ip_geneve, private_ip_geneve)
        display_ipsecsecretgengre(ipsecsecret)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mGeneve GRE6 + IPSEC\033[93m IRAN Menu\033[0m")
        print('\033[92m "-"\033[93m═══════════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN \033[92m IPV4\033[0m")
        print("2. \033[93mChange \033[97mKharej \033[92m IPV4\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[93mChange \033[97mGRE6 \033[93mPrivate IPV6\033[0m")
        print("5. \033[93mChange \033[97mGeneve \033[93mPrivate IPV6\033[0m")
        print("6. \033[93mChange IPsec \033[92mSecret Key\033[0m")
        print("7. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to edit local single menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_private = new_ip
                ip_parts = new_ip.split(":")
                if new_ip.endswith(":2"):
                    ip_parts[-1] = "1"
                else:
                    ip_parts[-1] = "2"
                counterpart_ip = ":".join(ip_parts)
                local_ip_gre6 = new_ip
                remote_ip_gre6 = counterpart_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[GRE6]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_gre6 = new_ip
                remote_ip_geneve = wtb_opposite_ipgregen(new_ip)
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "5":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[Geneve]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_geneve = new_ip
                save_stuff_gregen(
                    private_ip_geneve,
                    None,
                    remote_ip_geneve,
                    ipsec_secret,
                    is_geneve=True,
                )
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mIRAN\033[93m Public IP :\033[0m ")
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input("\033[93mEnter \033[92mKharej\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "6":
            new_key = input(
                "\033[93mEnter new \033[92mIPsec \033[93mSecret Key: \033[0m"
            )
            if new_key:
                update_ipsecsecret("/etc/ipsec.secrets", new_key)
                ipsecsecret = new_key
            else:
                print("\033[91mCrazy Secret Key\033[0m")
        elif choice == "7":
            save_stuff_gregen(
                private_ip_private, local_ip_private, remote_ip_private, is_gre6=False
            )
            save_stuff_gregen(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            save_stuff_gregen(
                private_ip_geneve, None, remote_ip_geneve, is_gre6=False, is_geneve=True
            )
            update_ipsec_ip(private_ip_geneve)
            break
        elif choice == "0":
            clear()
            single_edit_local()
            break
        else:
            print("Invalid choice. Please select a valid option.")


def gengresec_edit_localkharej():
    local_ip_private = local_ip("/etc/private.sh")
    remote_ip_private = remote_ip("/etc/private.sh")
    private_ip_private = private_ip1("/etc/private.sh")

    local_ip_gre6 = local_ip("/etc/gre6.sh")
    remote_ip_gre6 = remote_ip("/etc/gre6.sh")
    private_ip_gre6 = private_gre6("/etc/gre6.sh")

    remote_ip_geneve = remote_ip("/etc/spn.sh")
    private_ip_geneve = private_gen("/etc/spn.sh")
    ipsecsecret = get_ipsecsecret("/etc/ipsec.secrets")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("couldn't retrieve IP addresses from private file")
    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("couldn't retrieve IP addresses from gre6 file")
    if not remote_ip_geneve or not private_ip_geneve:
        print("couldn't retrieve IP addresses from geneve file")

    if (
        not local_ip_private
        or not remote_ip_private
        or not private_ip_private
        or not local_ip_gre6
        or not remote_ip_gre6
        or not private_ip_gre6
        or not remote_ip_geneve
        or not private_ip_geneve
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_privatekharej(
            local_ip_private, remote_ip_private, private_ip_private
        )
        display_stuff_gre6(local_ip_gre6, remote_ip_gre6, private_ip_gre6)
        display_stuff_geneve_greiran(remote_ip_geneve, private_ip_geneve)
        display_ipsecsecretgengre(ipsecsecret)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mGeneve GRE6 + IPSEC\033[93m Kharej Menu\033[0m")
        print('\033[92m "-"\033[93m═══════════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej \033[92m IPV4\033[0m")
        print("2. \033[93mChange \033[97mIRAN \033[92m IPV4\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[93mChange \033[97mGRE6 \033[93mPrivate IPV6\033[0m")
        print("5. \033[93mChange \033[97mGeneve \033[93mPrivate IPV6\033[0m")
        print("6. \033[93mChange IPsec \033[92mSecret Key\033[0m")
        print("7. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to edit local single menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_private = new_ip
                ip_parts = new_ip.split(":")
                if new_ip.endswith(":2"):
                    ip_parts[-1] = "1"
                else:
                    ip_parts[-1] = "2"
                counterpart_ip = ":".join(ip_parts)
                local_ip_gre6 = new_ip
                remote_ip_gre6 = counterpart_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[GRE6]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_gre6 = new_ip
                remote_ip_geneve = wtb_opposite_ipgregen(new_ip)
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "5":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[Geneve]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_geneve = new_ip
                save_stuff_gregen(
                    private_ip_geneve,
                    None,
                    remote_ip_geneve,
                    ipsec_secret,
                    is_geneve=True,
                )
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mKharej\033[93m Public IP :\033[0m ")
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input("\033[93mEnter \033[92mIRAN\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "6":
            new_key = input(
                "\033[93mEnter new \033[92mIPsec \033[93mSecret Key: \033[0m"
            )
            if new_key:
                update_ipsecsecret("/etc/ipsec.secrets", new_key)
                ipsecsecret = new_key
            else:
                print("\033[91mCrazy Secret Key\033[0m")
        elif choice == "7":
            save_stuff_gregen(
                private_ip_private, local_ip_private, remote_ip_private, is_gre6=False
            )
            save_stuff_gregen(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            save_stuff_gregen(
                private_ip_geneve, None, remote_ip_geneve, is_gre6=False, is_geneve=True
            )
            update_ipsec_ip(private_ip_geneve)
            break
        elif choice == "0":
            clear()
            single_edit_local()
            break
        else:
            print("Invalid choice. Please select a valid option.")


def vxp2p_edit_local():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print("\033[92m(   ) \033[92mEdit local\033[93m Vxlan P2P Menu\033[0m")
    print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[92mVxlan \033[96m[Private IPV4]\033[0m")
    print("2. \033[93mVxlan \033[96m[Private IPV6]\033[0m")
    print("3. \033[94mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        choice = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if choice == "1":
            vxp2p_edit_localv4()
            break
        elif choice == "2":
            vxp2p_edit_localv6()
            break
        elif choice == "3":
            clear()
            single_edit_local()
            break
        else:
            print("Invalid choice.")


def vxp2p_edit_localv4():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print("\033[92m(   ) \033[92mEdit local\033[93m Vxlan V4 Menu\033[0m")
    print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[92mNo IPSEC\033[0m")
    print("2. \033[93mWith IPSEC\033[0m")
    print("3. \033[94mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        choice = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if choice == "1":
            vxlannosec_edit_local()
            break
        elif choice == "2":
            vxlansec_edit_local()
            break
        elif choice == "3":
            clear()
            vxp2p_edit_local()
            break
        else:
            print("Invalid choice.")


def vxlannosec_edit_local():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print("\033[92m(   ) \033[92mEdit local\033[93m Vxlan V4 Menu\033[0m")
    print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[92mKharej\033[0m")
    print("2. \033[93mIRAN\033[0m")
    print("3. \033[94mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        choice = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if choice == "1":
            vxlannosec_edit_localkharej()
            break
        elif choice == "2":
            vxlannosec_edit_localiran()
            break
        elif choice == "3":
            clear()
            vxp2p_edit_localv4()
            break
        else:
            print("Invalid choice.")


def vxlan_ip(name):
    try:
        with open(name, "r") as f:
            content = f.read()
        match = re.search(r"ip addr add (\S+)/24 dev vxlan", content)
        if match:
            return match.group(1)
        else:
            print(f"\033[91mno VXLAN IP found\033[0m")
    except FileNotFoundError:
        print(f"file {name} doesn't exist")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")
    return None


def get_dev_dstport(name):
    try:
        with open(name, "r") as f:
            content = f.read()
        match = re.search(r"dev (\S+) dstport (\d+)", content)
        if match:
            return match.group(1), match.group(2)
        else:
            print(f"\033[91mno device or destination port found\033[0m")
    except FileNotFoundError:
        print(f"file {name} doesn't exist")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")
    return None, None


def get_current_vxlan_ips():
    vxlan_ip_bridge = vxlan_ip("/usr/local/bin/bridge.sh")
    return {
        "vxlan": vxlan_ip_bridge,
    }


def delete_ufw_rulesvx(ip, port):
    counterpart_ip = wtb_opposite_ipvx(ip)
    try:
        subprocess.run(["sudo", "ufw", "delete", "allow", "from", f"{ip}"], check=False)
        subprocess.run(
            ["sudo", "ufw", "delete", "allow", "from", f"{counterpart_ip}"], check=False
        )
        subprocess.run(["sudo", "ufw", "delete", "allow", f"{port}"], check=False)
    except subprocess.CalledProcessError as e:
        print(f"\033[91merror deleting UFW rules: {e}\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def add_ufw_rulesvx(ip, port):
    counterpart_ip = wtb_opposite_ipvx(ip)
    try:
        subprocess.run(["sudo", "ufw", "allow", "from", f"{ip}"], check=True)
        subprocess.run(
            ["sudo", "ufw", "allow", "from", f"{counterpart_ip}"], check=True
        )
        subprocess.run(["sudo", "ufw", "allow", f"{port}"], check=True)
    except subprocess.CalledProcessError as e:
        print(f"\033[91merror adding UFW rules: {e}\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def update_ipfile_vx(name, new_ip, update_type):
    try:
        with open(name, "r") as f:
            content = f.read()

        if update_type == "vxlan":
            new_content = re.sub(
                r"ip addr add [^ ]+/24 dev vxlan",
                f"ip addr add {new_ip}/24 dev vxlan",
                content,
            )
        elif update_type == "local":
            new_content = re.sub(r"local \S+", f"local {new_ip}", content)
        elif update_type == "remote":
            new_content = re.sub(r"remote \S+", f"remote {new_ip}", content)

        with open(name, "w") as f:
            f.write(new_content)
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def update_pingfile_vx(name, new_ip):
    try:
        with open(name, "r") as f:
            content = f.read()

        new_content = re.sub(r'ip_address="[^"]+"', f'ip_address="{new_ip}"', content)

        with open(name, "w") as f:
            f.write(new_content)
    except FileNotFoundError:
        print("\033[91mfile not found\033{0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def display_stuff_vxlaniran(local_ip, remote_ip, vxlan_ip, dev, dstport):
    lines = [
        f"\033[93mTitle:         Vxlan Configuration\033[0m",
        f"\033[97m──────────────────────────────────────\033[0m",
        f"\033[92mIRAN IP:          \033[97m{local_ip}\033[0m",
        f"\033[92mKharej IP:        \033[97m{remote_ip}\033[0m",
        f"\033[93mPrivate IP:       \033[97m{vxlan_ip}\033[0m",
        f"\033[93mDevice:           \033[97m{dev}\033[0m",
        f"\033[93mDestination Port  \033[97m{dstport}\033[0m",
    ]
    box_width = 50

    print("\033[93m╭" + "─" * (box_width - 2) + "╮\033[0m")

    for line in lines:
        print(f"\033[93m {line:<{box_width - 4}} \033[0m")

    print("\033[93m╰" + "─" * (box_width - 2) + "╯\033[0m")


def display_stuff_vxlankharej(local_ip, remote_ip, vxlan_ip, dev, dstport):
    lines = [
        f"\033[93mTitle:         Vxlan Configuration\033[0m",
        f"\033[97m──────────────────────────────────────\033[0m",
        f"\033[92mKharej IP:        \033[97m{local_ip}\033[0m",
        f"\033[92mIRAN IP:          \033[97m{remote_ip}\033[0m",
        f"\033[93mPrivate IP:       \033[97m{vxlan_ip}\033[0m",
        f"\033[93mDevice:           \033[97m{dev}\033[0m",
        f"\033[93mDestination Port  \033[97m{dstport}\033[0m",
    ]
    box_width = 50

    print("\033[93m╭" + "─" * (box_width - 2) + "╮\033[0m")

    for line in lines:
        print(f"\033[93m {line:<{box_width - 4}} \033[0m")

    print("\033[93m╰" + "─" * (box_width - 2) + "╯\033[0m")


def save_stuff_vx6(vxlan_ip, local_ip, remote_ip, dev, dstport, current_dstport):
    current_ips = get_current_vxlan_ips6()
    current_ip = current_ips.get("vxlan")

    if current_ip:
        delete_ufw_rulesvx(current_ip, current_dstport)

    add_ufw_rulesvx(vxlan_ip, dstport)

    counterpart_ip = wtb_opposite_ipvx(vxlan_ip)

    try:
        update_pingfile_vx("/etc/ping_vxlan.sh", counterpart_ip)
        update_ipfile_vx6("/usr/local/bin/bridge.sh", vxlan_ip, update_type="vxlan")
        update_ipfile_vx6("/usr/local/bin/bridge.sh", local_ip, update_type="local")
        update_ipfile_vx6("/usr/local/bin/bridge.sh", remote_ip, update_type="remote")

        with open("/usr/local/bin/bridge.sh", "r") as f:
            content = f.read()

        new_content = re.sub(
            r"dev \S+ dstport \d+", f"dev {dev} dstport {dstport}", content
        )

        with open("/usr/local/bin/bridge.sh", "w") as f:
            f.write(new_content)

        interface = "vxlan"
        try:
            subprocess.run(["ip", "link", "set", "dev", interface, "down"], check=True)
            subprocess.run(["ip", "link", "delete", interface], check=True)
        except subprocess.CalledProcessError:
            print("\033[91mError bringing interface down or deleting it\033[0m")

        script = "/usr/local/bin/bridge.sh"
        result = subprocess.run(["/bin/bash", script], capture_output=True, text=True)
        if "RTNETLINK answers: File exists" in result.stderr:
            print("Interface already exists, don't mind this")
        else:
            result.check_returncode()

        subprocess.run(["sudo", "systemctl", "daemon-reload"], check=True)

        try:
            subprocess.run(["systemctl", "restart", "ping_vxlan"], check=True)
            display_checkmark("\033[92mping_v6 service restarted successfully!\033[0m")
        except subprocess.CalledProcessError as e:
            if "Unit ping_v6 not found" in (e.stderr or ""):
                print("\033[91mCouldn't restart ping_vxlan\033[0m")

        print(
            f"\033[92mChanges saved and {interface} interface updated successfully!\033[0m"
        )

    except subprocess.CalledProcessError as e:
        print(f"\033[91mError applying network stuff\033[0m: {e}")
    except Exception as e:
        print(f"\033[91mOut of ordinary error: {e}\033[0m")


def save_stuff_vx(vxlan_ip, local_ip, remote_ip, dev, dstport, current_dstport):
    current_ips = get_current_vxlan_ips()
    current_ip = current_ips.get("vxlan")

    if current_ip:
        delete_ufw_rulesvx(current_ip, current_dstport)

    add_ufw_rulesvx(vxlan_ip, dstport)

    counterpart_ip = wtb_opposite_ipvx(vxlan_ip)

    try:
        update_pingfile_vx("/etc/ping_vxlan.sh", counterpart_ip)
        update_ipfile_vx("/usr/local/bin/bridge.sh", vxlan_ip, update_type="vxlan")
        update_ipfile_vx("/usr/local/bin/bridge.sh", local_ip, update_type="local")
        update_ipfile_vx("/usr/local/bin/bridge.sh", remote_ip, update_type="remote")

        with open("/usr/local/bin/bridge.sh", "r") as f:
            content = f.read()

        new_content = re.sub(
            r"dev \S+ dstport \d+", f"dev {dev} dstport {dstport}", content
        )

        with open("/usr/local/bin/bridge.sh", "w") as f:
            f.write(new_content)

        interface = "vxlan"
        try:
            subprocess.run(["ip", "link", "set", "dev", interface, "down"], check=True)
            subprocess.run(["ip", "link", "delete", interface], check=True)
        except subprocess.CalledProcessError:
            print("\033[91mError bringing interface down or deleting it\033[0m")

        script = "/usr/local/bin/bridge.sh"
        result = subprocess.run(["/bin/bash", script], capture_output=True, text=True)
        if "RTNETLINK answers: File exists" in result.stderr:
            print("Interface already exists, don't mind this")
        else:
            result.check_returncode()

        subprocess.run(["sudo", "systemctl", "daemon-reload"], check=True)

        try:
            subprocess.run(["systemctl", "restart", "ping_vxlan"], check=True)
            display_checkmark("\033[92mping_v6 service restarted successfully!\033[0m")
        except subprocess.CalledProcessError as e:
            if "Unit ping_v6 not found" in (e.stderr or ""):
                print("\033[91mCouldn't restart ping_vxlan\033[0m")

        print(
            f"\033[92mChanges saved and {interface} interface updated successfully!\033[0m"
        )

    except subprocess.CalledProcessError as e:
        print(f"\033[91mError applying network stuff\033[0m: {e}")
    except Exception as e:
        print(f"\033[91mOut of ordinary error: {e}\033[0m")


def vxlannosec_edit_localiran():
    local_ip_vxlan = local_ip("/usr/local/bin/bridge.sh")
    remote_ip_vxlan = remote_ip("/usr/local/bin/bridge.sh")
    vxlan_ip_vxlan = vxlan_ip("/usr/local/bin/bridge.sh")
    dev, dstport = get_dev_dstport("/usr/local/bin/bridge.sh")

    if (
        not local_ip_vxlan
        or not remote_ip_vxlan
        or not vxlan_ip_vxlan
        or not dev
        or not dstport
    ):
        print(
            "Couldn't retrieve IP addresses or device or destination port from VXLAN file"
        )
        return

    current_dstport = dstport

    while True:
        os.system("clear")
        display_stuff_vxlaniran(
            local_ip_vxlan, remote_ip_vxlan, vxlan_ip_vxlan, dev, dstport
        )

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mVXLAN P2P V4\033[93m IRAN Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN \033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mKHAREJ \033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mVxlan \033[93mPrivate IPV6\033[0m")
        print("4. \033[93mChange \033[97mDevice name\033[0m")
        print("5. \033[93mChange \033[97mDestination Port\033[0m")
        print("6. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to edit local single menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter New IPv4 address \033[96m[VXLAN]\033[93m :\033[0m "
            )
            if new_ip:
                vxlan_ip_vxlan = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mIRAN\033[93m Public IP :\033[0m ")
            if new_ip:
                local_ip_vxlan = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input("\033[93mEnter \033[92mKHAREJ\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_vxlan = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            dev = input("\033[93mEnter new device name (example: eth0) :\033[0m ")
        elif choice == "5":
            new_dstport = input("\033[93mEnter new destination port :\033[0m ")
            if new_dstport:
                dstport = new_dstport
            else:
                print("\033[91mWrong port number\033[0m")
        elif choice == "6":
            save_stuff_vx(
                vxlan_ip_vxlan,
                local_ip_vxlan,
                remote_ip_vxlan,
                dev,
                dstport,
                current_dstport,
            )
            break
        elif choice == "0":
            clear()
            single_edit_local()
            break
        else:
            print("Please select a valid option.")


def vxlannosec_edit_localkharej():
    local_ip_vxlan = local_ip("/usr/local/bin/bridge.sh")
    remote_ip_vxlan = remote_ip("/usr/local/bin/bridge.sh")
    vxlan_ip_vxlan = vxlan_ip("/usr/local/bin/bridge.sh")
    dev, dstport = get_dev_dstport("/usr/local/bin/bridge.sh")

    if (
        not local_ip_vxlan
        or not remote_ip_vxlan
        or not vxlan_ip_vxlan
        or not dev
        or not dstport
    ):
        print(
            "Couldn't retrieve IP addresses or device or destination port from VXLAN file"
        )
        return

    current_dstport = dstport

    while True:
        os.system("clear")
        display_stuff_vxlankharej(
            local_ip_vxlan, remote_ip_vxlan, vxlan_ip_vxlan, dev, dstport
        )

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mVXLAN P2P V4\033[93m Kharej Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej \033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mIRAN \033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mVxlan \033[93mPrivate IPV6\033[0m")
        print("4. \033[93mChange \033[97mDevice name\033[0m")
        print("5. \033[93mChange \033[97mDestination Port\033[0m")
        print("6. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to edit local single menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter New IPv4 address \033[96m[VXLAN]\033[93m :\033[0m "
            )
            if new_ip:
                vxlan_ip_vxlan = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mKharej\033[93m Public IP :\033[0m ")
            if new_ip:
                local_ip_vxlan = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input("\033[93mEnter \033[92mIRAN\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_vxlan = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            dev = input("\033[93mEnter new device name (example: eth0) :\033[0m ")
        elif choice == "5":
            new_dstport = input("\033[93mEnter new destination port :\033[0m ")
            if new_dstport:
                dstport = new_dstport
            else:
                print("\033[91mWrong port number\033[0m")
        elif choice == "6":
            save_stuff_vx(
                vxlan_ip_vxlan,
                local_ip_vxlan,
                remote_ip_vxlan,
                dev,
                dstport,
                current_dstport,
            )
            break
        elif choice == "0":
            clear()
            single_edit_local()
            break
        else:
            print("Please select a valid option.")


def wtb_opposite_ipvx(ip):
    if ":" in ip:
        ip_parts = ip.split(":")
        ip_parts[-1] = "1" if ip_parts[-1] == "2" else "2"
        return ":".join(ip_parts)
    else:
        ip_parts = ip.split(".")
        ip_parts[-1] = "1" if ip_parts[-1] == "2" else "2"
        return ".".join(ip_parts)


def vxp2p_edit_localv6():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print("\033[92m(   ) \033[92mEdit local\033[93m Vxlan V6 Menu\033[0m")
    print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[92mNo IPSEC\033[0m")
    print("2. \033[93mWith IPSEC\033[0m")
    print("3. \033[94mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        choice = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if choice == "1":
            vxlannosec_edit_localv6()
            break
        elif choice == "2":
            vxlansec_edit_localv6()
            break
        elif choice == "3":
            clear()
            vxp2p_edit_local()
            break
        else:
            print("Invalid choice.")


def vxlannosec_edit_localv6():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print("\033[92m(   ) \033[92mEdit local\033[93m Vxlan V6 Menu\033[0m")
    print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[92mKharej\033[0m")
    print("2. \033[93mIRAN\033[0m")
    print("3. \033[94mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        choice = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if choice == "1":
            vxlannosec_edit_localkharejv6()
            break
        elif choice == "2":
            vxlannosec_edit_localiranv6()
            break
        elif choice == "3":
            clear()
            vxp2p_edit_localv6()
            break
        else:
            print("Invalid choice.")


def vxlan_ipv6(name):
    try:
        with open(name, "r") as f:
            content = f.read()
        match = re.search(r"ip addr add (\S+)/64 dev vxlan", content)
        if match:
            return match.group(1)
        else:
            print(f"\033[91mno VXLAN IP found\033[0m")
    except FileNotFoundError:
        print(f"file {name} doesn't exist")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")
    return None


def get_current_vxlan_ips6():
    vxlan_ip_bridge = vxlan_ipv6("/usr/local/bin/bridge.sh")
    return {
        "vxlan": vxlan_ip_bridge,
    }


def update_ipfile_vx6(name, new_ip, update_type):
    try:
        with open(name, "r") as f:
            content = f.read()

        if update_type == "vxlan":
            new_content = re.sub(
                r"ip addr add [^ ]+/64 dev vxlan",
                f"ip addr add {new_ip}/64 dev vxlan",
                content,
            )
        elif update_type == "local":
            new_content = re.sub(r"local \S+", f"local {new_ip}", content)
        elif update_type == "remote":
            new_content = re.sub(r"remote \S+", f"remote {new_ip}", content)

        with open(name, "w") as f:
            f.write(new_content)
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def vxlannosec_edit_localiranv6():
    local_ip_vxlan = local_ip("/usr/local/bin/bridge.sh")
    remote_ip_vxlan = remote_ip("/usr/local/bin/bridge.sh")
    vxlan_ip_vxlan = vxlan_ipv6("/usr/local/bin/bridge.sh")
    dev, dstport = get_dev_dstport("/usr/local/bin/bridge.sh")

    if (
        not local_ip_vxlan
        or not remote_ip_vxlan
        or not vxlan_ip_vxlan
        or not dev
        or not dstport
    ):
        print(
            "Couldn't retrieve IP addresses or device or destination port from Vxlan file"
        )
        return

    current_dstport = dstport

    while True:
        os.system("clear")
        display_stuff_vxlaniran(
            local_ip_vxlan, remote_ip_vxlan, vxlan_ip_vxlan, dev, dstport
        )

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mVXLAN P2P V6\033[93m IRAN Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN \033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mKHAREJ \033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mVxlan \033[93mPrivate IPV6\033[0m")
        print("4. \033[93mChange \033[97mDevice name\033[0m")
        print("5. \033[93mChange \033[97mDestination Port\033[0m")
        print("6. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to edit local single menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter New IPv6 address \033[96m[VXLAN]\033[93m :\033[0m "
            )
            if new_ip:
                vxlan_ip_vxlan = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mIRAN\033[93m Public IP :\033[0m ")
            if new_ip:
                local_ip_vxlan = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input("\033[93mEnter \033[92mKHAREJ\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_vxlan = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            dev = input("\033[93mEnter new device name (example: eth0) :\033[0m ")
        elif choice == "5":
            new_dstport = input("\033[93mEnter new destination port :\033[0m ")
            if new_dstport:
                dstport = new_dstport
            else:
                print("\033[91mWrong port number\033[0m")
        elif choice == "6":
            save_stuff_vx6(
                vxlan_ip_vxlan,
                local_ip_vxlan,
                remote_ip_vxlan,
                dev,
                dstport,
                current_dstport,
            )
            break
        elif choice == "0":
            clear()
            single_edit_local()
            break
        else:
            print("Please select a valid option.")


def vxlannosec_edit_localkharejv6():
    local_ip_vxlan = local_ip("/usr/local/bin/bridge.sh")
    remote_ip_vxlan = remote_ip("/usr/local/bin/bridge.sh")
    vxlan_ip_vxlan = vxlan_ipv6("/usr/local/bin/bridge.sh")
    dev, dstport = get_dev_dstport("/usr/local/bin/bridge.sh")

    if (
        not local_ip_vxlan
        or not remote_ip_vxlan
        or not vxlan_ip_vxlan
        or not dev
        or not dstport
    ):
        print(
            "Couldn't retrieve IP addresses or device or destination port from Vxlan file"
        )
        return

    current_dstport = dstport

    while True:
        os.system("clear")
        display_stuff_vxlankharej(
            local_ip_vxlan, remote_ip_vxlan, vxlan_ip_vxlan, dev, dstport
        )

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mVXLAN P2P V6\033[93m Kharej Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej \033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mIRAN \033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mVxlan \033[93mPrivate IPV6\033[0m")
        print("4. \033[93mChange \033[97mDevice name\033[0m")
        print("5. \033[93mChange \033[97mDestination Port\033[0m")
        print("6. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to edit local single menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter New IPv6 address \033[96m[VXLAN]\033[93m :\033[0m "
            )
            if new_ip:
                vxlan_ip_vxlan = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mKharej\033[93m Public IP :\033[0m ")
            if new_ip:
                local_ip_vxlan = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input("\033[93mEnter \033[92mIRAN\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_vxlan = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            dev = input("\033[93mEnter new device name (example: eth0) :\033[0m ")
        elif choice == "5":
            new_dstport = input("\033[93mEnter new destination port :\033[0m ")
            if new_dstport:
                dstport = new_dstport
            else:
                print("\033[91mWrong port number\033[0m")
        elif choice == "6":
            save_stuff_vx6(
                vxlan_ip_vxlan,
                local_ip_vxlan,
                remote_ip_vxlan,
                dev,
                dstport,
                current_dstport,
            )
            break
        elif choice == "0":
            clear()
            single_edit_local()
            break
        else:
            print("Please select a valid option.")


def vxlansec_edit_local():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print("\033[92m(   ) \033[92mEdit local\033[93m Vxlan + IPSEC V4 Menu\033[0m")
    print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[92mKharej\033[0m")
    print("2. \033[93mIRAN\033[0m")
    print("3. \033[94mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        choice = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if choice == "1":
            vxlansec_edit_localkharej()
            break
        elif choice == "2":
            vxlansec_edit_localiran()
            break
        elif choice == "3":
            clear()
            vxp2p_edit_localv4()
            break
        else:
            print("Invalid choice.")


def ipsecsecret_key(name):
    try:
        with open(name, "r") as f:
            content = f.read()
        match = re.search(r'PSK "(\S+)"', content)
        if match:
            return match.group(1)
        else:
            print("\033[91mno IPsec key found\033{0m")
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")
    return None


def update_ipsecsecret_vxsec(name, new_secret):
    try:
        with open(name, "r") as f:
            content = f.read()

        new_content = re.sub(r'PSK "\S+"', f'PSK "{new_secret}"', content)

        with open(name, "w") as f:
            f.write(new_content)
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def update_ipsec_conf_vxsec(name, new_private_ip):
    try:
        with open(name, "r") as f:
            content = f.read()

        ip_parts = new_private_ip.split(".")
        if new_private_ip.endswith(".2"):
            ip_parts[-1] = "1"
        else:
            ip_parts[-1] = "2"
        counterpart_ip = ".".join(ip_parts)

        new_content = re.sub(
            r"leftsubnet=\S+", f"leftsubnet={new_private_ip}/32", content
        )
        new_content = re.sub(r"leftid=\S+", f"leftid={new_private_ip}", new_content)
        new_content = re.sub(r"right=\S+", f"right={counterpart_ip}", new_content)
        new_content = re.sub(
            r"rightsubnet=\S+", f"rightsubnet={counterpart_ip}/32", new_content
        )

        with open(name, "w") as f:
            f.write(new_content)
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def wtb_opposite_ipvxsec(ip):
    if ":" in ip:  # IPv6
        ip_parts = ip.split(":")
        ip_parts[-1] = "1" if ip_parts[-1] == "2" else "2"
        return ":".join(ip_parts)
    else:  # IPv4
        ip_parts = ip.split(".")
        ip_parts[-1] = "1" if ip_parts[-1] == "2" else "2"
        return ".".join(ip_parts)


def save_stuff_vxsec4(
    vxlan_ip, local_ip, remote_ip, dev, dstport, current_dstport, ipsecsecret
):
    current_ips = get_current_vxlan_ips()
    current_ip = current_ips["vxlan"]

    if current_ip:
        delete_ufw_rulesvx(current_ip, current_dstport)

    add_ufw_rulesvx(vxlan_ip, dstport)

    counterpart_ip = wtb_opposite_ip(vxlan_ip)
    try:
        update_pingfile_vx("/etc/ping_vxlan.sh", counterpart_ip)
        update_ipfile_vx("/usr/local/bin/bridge.sh", vxlan_ip, update_type="vxlan")
        update_ipfile_vx("/usr/local/bin/bridge.sh", local_ip, update_type="local")
        update_ipfile_vx("/usr/local/bin/bridge.sh", remote_ip, update_type="remote")
        update_ipsecsecret_vxsec("/etc/ipsec.secrets", ipsecsecret)
        update_ipsec_conf_vxsec("/etc/ipsec.conf", vxlan_ip)

        with open("/usr/local/bin/bridge.sh", "r") as f:
            content = f.read()

        new_content = re.sub(
            r"dev \S+ dstport \d+", f"dev {dev} dstport {dstport}", content
        )

        with open("/usr/local/bin/bridge.sh", "w") as f:
            f.write(new_content)

        interface = "vxlan"
        try:
            subprocess.run(["ip", "link", "set", "dev", interface, "down"], check=True)
            subprocess.run(["ip", "link", "delete", interface], check=True)
        except subprocess.CalledProcessError:
            print("\033[91mError bringing interface down or deleting it\033[0m")

        script = "/usr/local/bin/bridge.sh"
        result = subprocess.run(["/bin/bash", script], capture_output=True, text=True)
        if "RTNETLINK answers: File exists" in result.stderr:
            print("Interface already exists, don't mind this")
        else:
            result.check_returncode()

        subprocess.run(["sudo", "systemctl", "daemon-reload"], check=True)
        subprocess.run(["systemctl", "restart", "strongswan-starter"], check=True)

        result = subprocess.run(
            ["systemctl", "list-units", "--full", "--all", "strongswan.service"],
            capture_output=True,
            text=True,
        )
        if "strongswan.service" in result.stdout:
            subprocess.run(["systemctl", "restart", "strongswan"], check=True)
        else:
            print("\033[91mstrongswan service not found. don't mind this error\033[0m")
        try:
            subprocess.run(["systemctl", "restart", "ping_vxlan"], check=True)
            display_checkmark(
                "\033[92mping_vxlan service restarted successfully!\033[0m"
            )
        except subprocess.CalledProcessError as e:
            if "Service ping_vxlan not found" in (e.stderr or ""):
                print("\033[91mCouldn't restart ping_vxlan\033[0m")

        print(
            f"\033[92mChanges saved and {interface} interface updated successfully!\033[0m"
        )

    except subprocess.CalledProcessError as e:
        print(f"\033[91mError applying network stuff\033[0m: {e}")
    except Exception as e:
        print(f"\033[91mOut of ordinary error: {e}\033[0m")


def vxlansec_edit_localiran():
    local_ip_vxlan = local_ip("/usr/local/bin/bridge.sh")
    remote_ip_vxlan = remote_ip("/usr/local/bin/bridge.sh")
    vxlan_ip_vxlan = vxlan_ip("/usr/local/bin/bridge.sh")
    dev, dstport = get_dev_dstport("/usr/local/bin/bridge.sh")
    ipsecsecret_key_private = ipsecsecret_key("/etc/ipsec.secrets")

    if (
        not local_ip_vxlan
        or not remote_ip_vxlan
        or not vxlan_ip_vxlan
        or not dev
        or not dstport
        or not ipsecsecret_key_private
    ):
        print(
            "Couldn't retrieve IP addresses or device or destination port from VXLAN file"
        )
        return

    current_dstport = dstport

    while True:
        os.system("clear")
        display_stuff_vxlaniran(
            local_ip_vxlan, remote_ip_vxlan, vxlan_ip_vxlan, dev, dstport
        )
        display_ipsecsecret(ipsecsecret_key_private)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mVXLAN + IPSEc\033[93m IRAN Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN \033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mKHAREJ \033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mVxlan \033[93mPrivate IPV4\033[0m")
        print("4. \033[93mChange \033[97mDevice name\033[0m")
        print("5. \033[93mChange \033[97mDestination Port\033[0m")
        print("6. \033[93mChange IPsec \033[92mSecret Key\033[0m")
        print("7. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to edit local single menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter New Private IPV4 \033[96m[Vxlan]\033[93m :\033[0m "
            )
            if new_ip:
                vxlan_ip_vxlan = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mIRAN\033[93m Public IP :\033{0m ")
            if new_ip:
                local_ip_vxlan = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input("\033[93mEnter \033[92mKHAREJ\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_vxlan = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            dev = input("\033[93mEnter New device name (example: eth0) :\033[0m ")
        elif choice == "5":
            new_dstport = input("\033[93mEnter New destination port :\033[0m ")
            if new_dstport:
                dstport = new_dstport
            else:
                print("\033[91mWrong port number\033[0m")
        elif choice == "6":
            new_secret = input(
                "\033[93mEnter new \033[92mIPsec \033[93mSecret Key: \033[0m"
            )
            if new_secret:
                ipsecsecret_key_private = new_secret
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "7":
            save_stuff_vxsec4(
                vxlan_ip_vxlan,
                local_ip_vxlan,
                remote_ip_vxlan,
                dev,
                dstport,
                current_dstport,
                ipsecsecret_key_private,
            )
            update_ipsec_ip(vxlan_ip_vxlan)
            break
        elif choice == "0":
            clear()
            single_edit_local()
            break
        else:
            print("Please select a valid option.")


def vxlansec_edit_localkharej():
    local_ip_vxlan = local_ip("/usr/local/bin/bridge.sh")
    remote_ip_vxlan = remote_ip("/usr/local/bin/bridge.sh")
    vxlan_ip_vxlan = vxlan_ip("/usr/local/bin/bridge.sh")
    dev, dstport = get_dev_dstport("/usr/local/bin/bridge.sh")
    ipsecsecret_key_private = ipsecsecret_key("/etc/ipsec.secrets")

    if (
        not local_ip_vxlan
        or not remote_ip_vxlan
        or not vxlan_ip_vxlan
        or not dev
        or not dstport
        or not ipsecsecret_key_private
    ):
        print(
            "Couldn't retrieve IP addresses or device or destination port from VXLAN file"
        )
        return

    current_dstport = dstport

    while True:
        os.system("clear")
        display_stuff_vxlaniran(
            local_ip_vxlan, remote_ip_vxlan, vxlan_ip_vxlan, dev, dstport
        )
        display_ipsecsecret(ipsecsecret_key_private)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mVXLAN + IPSEc\033[93m Kharej Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej \033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mIRAN \033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mVxlan \033[93mPrivate IPV4\033[0m")
        print("4. \033[93mChange \033[97mDevice name\033[0m")
        print("5. \033[93mChange \033[97mDestination Port\033[0m")
        print("6. \033[93mChange IPsec \033[92mSecret Key\033[0m")
        print("7. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to edit local single menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter New Private IPV4 \033[96m[Vxlan]\033[93m :\033[0m "
            )
            if new_ip:
                vxlan_ip_vxlan = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mKharej\033[93m Public IP :\033{0m ")
            if new_ip:
                local_ip_vxlan = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input("\033[93mEnter \033[92mIRAN\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_vxlan = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            dev = input("\033[93mEnter New device name (example: eth0) :\033[0m ")
        elif choice == "5":
            new_dstport = input("\033[93mEnter New destination port :\033[0m ")
            if new_dstport:
                dstport = new_dstport
            else:
                print("\033[91mWrong port number\033[0m")
        elif choice == "6":
            new_secret = input(
                "\033[93mEnter new \033[92mIPsec \033[93mSecret Key: \033[0m"
            )
            if new_secret:
                ipsecsecret_key_private = new_secret
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "7":
            save_stuff_vxsec4(
                vxlan_ip_vxlan,
                local_ip_vxlan,
                remote_ip_vxlan,
                dev,
                dstport,
                current_dstport,
                ipsecsecret_key_private,
            )
            update_ipsec_ip(vxlan_ip_vxlan)
            break
        elif choice == "0":
            clear()
            single_edit_local()
            break
        else:
            print("Please select a valid option.")


def vxlansec_edit_localv6():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print("\033[92m(   ) \033[92mEdit local\033[93m Vxlan + IPSEC V6 Menu\033[0m")
    print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[92mKharej\033[0m")
    print("2. \033[93mIRAN\033[0m")
    print("3. \033[94mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        choice = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if choice == "1":
            vxlansec_edit_localkharejv6()
            break
        elif choice == "2":
            vxlansec_edit_localiranv6()
            break
        elif choice == "3":
            clear()
            vxp2p_edit_localv6()
            break
        else:
            print("Invalid choice.")


def save_stuff_vxsec6(
    vxlan_ip, local_ip, remote_ip, dev, dstport, current_dstport, ipsecsecret
):
    current_ips = get_current_vxlan_ips6()
    current_ip = current_ips["vxlan"]

    if current_ip:
        delete_ufw_rulesvx(current_ip, current_dstport)

    add_ufw_rulesvx(vxlan_ip, dstport)

    counterpart_ip = wtb_opposite_ip(vxlan_ip)
    try:
        update_pingfile_vx("/etc/ping_vxlan.sh", counterpart_ip)
        update_ipfile_vx6("/usr/local/bin/bridge.sh", vxlan_ip, update_type="vxlan")
        update_ipfile_vx6("/usr/local/bin/bridge.sh", local_ip, update_type="local")
        update_ipfile_vx6("/usr/local/bin/bridge.sh", remote_ip, update_type="remote")
        update_ipsecsecret_vxsec("/etc/ipsec.secrets", ipsecsecret)
        update_ipsec_conf_vxsec6("/etc/ipsec.conf", vxlan_ip)

        with open("/usr/local/bin/bridge.sh", "r") as f:
            content = f.read()

        new_content = re.sub(
            r"dev \S+ dstport \d+", f"dev {dev} dstport {dstport}", content
        )

        with open("/usr/local/bin/bridge.sh", "w") as f:
            f.write(new_content)

        interface = "vxlan"
        try:
            subprocess.run(["ip", "link", "set", "dev", interface, "down"], check=True)
            subprocess.run(["ip", "link", "delete", interface], check=True)
        except subprocess.CalledProcessError:
            print("\033[91mError bringing interface down or deleting it\033[0m")

        script = "/usr/local/bin/bridge.sh"
        result = subprocess.run(["/bin/bash", script], capture_output=True, text=True)
        if "RTNETLINK answers: File exists" in result.stderr:
            print("Interface already exists, don't mind this")
        else:
            result.check_returncode()

        subprocess.run(["sudo", "systemctl", "daemon-reload"], check=True)
        subprocess.run(["systemctl", "restart", "strongswan-starter"], check=True)

        result = subprocess.run(
            ["systemctl", "list-units", "--full", "--all", "strongswan.service"],
            capture_output=True,
            text=True,
        )
        if "strongswan.service" in result.stdout:
            subprocess.run(["systemctl", "restart", "strongswan"], check=True)
        else:
            print("\033[91mstrongswan service not found. don't mind this error\033[0m")
        try:
            subprocess.run(["systemctl", "restart", "ping_vxlan"], check=True)
            display_checkmark(
                "\033[92mping_vxlan service restarted successfully!\033[0m"
            )
        except subprocess.CalledProcessError as e:
            if "Service ping_vxlan not found" in (e.stderr or ""):
                print("\033[91mCouldn't restart ping_vxlan\033[0m")

        print(
            f"\033[92mChanges saved and {interface} interface updated successfully!\033[0m"
        )

    except subprocess.CalledProcessError as e:
        print(f"\033[91mError applying network stuff\033[0m: {e}")
    except Exception as e:
        print(f"\033[91mOut of ordinary error: {e}\033[0m")


def update_ipsec_conf_vxsec6(name, new_private_ip):
    try:
        with open(name, "r") as f:
            content = f.read()

        ip_parts = new_private_ip.split(":")
        if new_private_ip.endswith("::2"):
            ip_parts[-1] = "1"
        else:
            ip_parts[-1] = "2"
        counterpart_ip = ":".join(ip_parts)

        new_content = re.sub(
            r"leftsubnet=\S+", f"leftsubnet={new_private_ip}/64", content
        )
        new_content = re.sub(r"leftid=\S+", f"leftid={new_private_ip}", new_content)
        new_content = re.sub(r"right=\S+", f"right={counterpart_ip}", new_content)
        new_content = re.sub(
            r"rightsubnet=\S+", f"rightsubnet={counterpart_ip}/64", new_content
        )

        with open(name, "w") as f:
            f.write(new_content)
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def update_ipsecip_vxsec(path, new_private_ip, remote_ip):
    try:
        with open(path, "r") as f:
            content = f.read()

        new_content = re.sub(
            r'\S+ \S+ : PSK "azumi"',
            f'{new_private_ip} {remote_ip} : PSK "azumi"',
            content,
        )

        with open(path, "w") as f:
            f.write(new_content)

        return new_content
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def vxlansec_edit_localiranv6():
    local_ip_vxlan = local_ip("/usr/local/bin/bridge.sh")
    remote_ip_vxlan = remote_ip("/usr/local/bin/bridge.sh")
    vxlan_ip_vxlan = vxlan_ipv6("/usr/local/bin/bridge.sh")
    dev, dstport = get_dev_dstport("/usr/local/bin/bridge.sh")
    ipsecsecret_key_private = ipsecsecret_key("/etc/ipsec.secrets")

    if (
        not local_ip_vxlan
        or not remote_ip_vxlan
        or not vxlan_ip_vxlan
        or not dev
        or not dstport
        or not ipsecsecret_key_private
    ):
        print(
            "Couldn't retrieve IP addresses or device or destination port from VXLAN file"
        )
        return

    current_dstport = dstport

    while True:
        os.system("clear")
        display_stuff_vxlaniran(
            local_ip_vxlan, remote_ip_vxlan, vxlan_ip_vxlan, dev, dstport
        )
        display_ipsecsecret(ipsecsecret_key_private)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mVXLAN + IPSEC V6\033[93m IRAN Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN \033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mKHAREJ \033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mVxlan \033[93mPrivate IPV6\033[0m")
        print("4. \033[93mChange \033[97mDevice name\033[0m")
        print("5. \033[93mChange \033[97mDestination Port\033[0m")
        print("6. \033[93mChange IPsec \033[92mSecret Key\033[0m")
        print("7. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to edit local single menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter New Private IPV6 \033[96m[Vxlan]\033[93m :\033[0m "
            )
            if new_ip:
                vxlan_ip_vxlan = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mIRAN\033[93m Public IP :\033{0m ")
            if new_ip:
                local_ip_vxlan = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input("\033[93mEnter \033[92mKHAREJ\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_vxlan = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            dev = input("\033[93mEnter New device name (example: eth0) :\033[0m ")
        elif choice == "5":
            new_dstport = input("\033[93mEnter New destination port :\033[0m ")
            if new_dstport:
                dstport = new_dstport
            else:
                print("\033[91mWrong port number\033[0m")
        elif choice == "6":
            new_secret = input(
                "\033[93mEnter new \033[92mIPsec \033[93mSecret Key: \033[0m"
            )
            if new_secret:
                ipsecsecret_key_private = new_secret
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "7":
            save_stuff_vxsec6(
                vxlan_ip_vxlan,
                local_ip_vxlan,
                remote_ip_vxlan,
                dev,
                dstport,
                current_dstport,
                ipsecsecret_key_private,
            )
            update_ipsec_ip(vxlan_ip_vxlan)
            break
        elif choice == "0":
            clear()
            single_edit_local()
            break
        else:
            print("Please select a valid option.")


def update_ipsec_ip(new_vxlan_ip):
    def opposite_ip(ip):
        if ":" in ip:
            parts = ip.split(":")
            if parts[-1].endswith("1"):
                parts[-1] = parts[-1][:-1] + "2"
            else:
                parts[-1] = parts[-1][:-1] + "1"
            return ":".join(parts)
        else:
            octets = ip.split(".")
            if octets[-1] == "1":
                octets[-1] = "2"
            else:
                octets[-1] = "1"
            return ".".join(octets)

    secrets_file = "/etc/ipsec.secrets"
    opposite_ip_addr = opposite_ip(new_vxlan_ip)

    with open(secrets_file, "r") as file:
        lines = file.readlines()

    new_lines = []
    for line in lines:
        if ": PSK" in line:
            parts = line.split()
            if len(parts) > 2:
                new_line = (
                    f'{opposite_ip_addr} {new_vxlan_ip} : PSK "{parts[-1][1:-1]}"'
                )
                new_lines.append(new_line + "\n")
            else:
                new_lines.append(line)
        else:
            new_lines.append(line)

    with open(secrets_file, "w") as file:
        file.writelines(new_lines)


def vxlansec_edit_localkharejv6():
    local_ip_vxlan = local_ip("/usr/local/bin/bridge.sh")
    remote_ip_vxlan = remote_ip("/usr/local/bin/bridge.sh")
    vxlan_ip_vxlan = vxlan_ipv6("/usr/local/bin/bridge.sh")
    dev, dstport = get_dev_dstport("/usr/local/bin/bridge.sh")
    ipsecsecret_key_private = ipsecsecret_key("/etc/ipsec.secrets")

    if (
        not local_ip_vxlan
        or not remote_ip_vxlan
        or not vxlan_ip_vxlan
        or not dev
        or not dstport
        or not ipsecsecret_key_private
    ):
        print(
            "Couldn't retrieve IP addresses or device or destination port from VXLAN file"
        )
        return

    current_dstport = dstport

    while True:
        os.system("clear")
        display_stuff_vxlaniran(
            local_ip_vxlan, remote_ip_vxlan, vxlan_ip_vxlan, dev, dstport
        )
        display_ipsecsecret(ipsecsecret_key_private)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mVXLAN + IPSEC V6\033[93m Kharej Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej \033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mIRAN \033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mVxlan \033[93mPrivate IPV6\033[0m")
        print("4. \033[93mChange \033[97mDevice name\033[0m")
        print("5. \033[93mChange \033[97mDestination Port\033[0m")
        print("6. \033[93mChange IPsec \033[92mSecret Key\033[0m")
        print("7. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to edit local single menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter New Private IPV6 \033[96m[Vxlan]\033[93m :\033[0m "
            )
            if new_ip:
                vxlan_ip_vxlan = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mKharej\033[93m Public IP :\033{0m ")
            if new_ip:
                local_ip_vxlan = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input("\033[93mEnter \033[92mIRAN\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_vxlan = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            dev = input("\033[93mEnter New device name (example: eth0) :\033[0m ")
        elif choice == "5":
            new_dstport = input("\033[93mEnter New destination port :\033[0m ")
            if new_dstport:
                dstport = new_dstport
            else:
                print("\033[91mWrong port number\033[0m")
        elif choice == "6":
            new_secret = input(
                "\033[93mEnter new \033[92mIPsec \033[93mSecret Key: \033[0m"
            )
            if new_secret:
                ipsecsecret_key_private = new_secret
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "7":
            save_stuff_vxsec4(
                vxlan_ip_vxlan,
                local_ip_vxlan,
                remote_ip_vxlan,
                dev,
                dstport,
                current_dstport,
                ipsecsecret_key_private,
            )
            update_ipsec_ip(vxlan_ip_vxlan)
            break
        elif choice == "0":
            clear()
            single_edit_local()
            break
        else:
            print("Please select a valid option.")


def vxfdb_edit_local():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print("\033[92m(   ) \033[92mEdit local\033[93m Vxlan FDB Menu\033[0m")
    print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[92mVxlan \033[96m[Private IPV4]\033[0m")
    print("2. \033[93mVxlan \033[96m[Private IPV6]\033[0m")
    print("3. \033[94mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        choice = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if choice == "1":
            vxfdb_edit_localv4()
            break
        elif choice == "2":
            vxfdb_edit_localv6()
            break
        elif choice == "3":
            clear()
            single_edit_local()
            break
        else:
            print("Invalid choice.")


def vxfdb_edit_localv4():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print("\033[92m(   ) \033[92mEdit local\033[93m Vxlan FDB V4 Menu\033[0m")
    print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[92mNo IPSEC\033[0m")
    print("2. \033[93mWith IPSEC\033[0m")
    print("3. \033[94mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        choice = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if choice == "1":
            fdbnosec_edit_local()
            break
        elif choice == "2":
            fdbsec_edit_local()
            break
        elif choice == "3":
            clear()
            vxfdb_edit_local()
            break
        else:
            print("Invalid choice.")


def fdbnosec_edit_local():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print("\033[92m(   ) \033[92mEdit local\033[93m Vxlan FDB V4 Menu\033[0m")
    print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[92mKharej\033[0m")
    print("2. \033[93mIRAN\033[0m")
    print("3. \033[94mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        choice = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if choice == "1":
            fdbnosec_edit_localkharej()
            break
        elif choice == "2":
            fdbnosec_edit_localiran()
            break
        elif choice == "3":
            clear()
            vxfdb_edit_localv4()
            break
        else:
            print("Invalid choice.")


def vxfdb_edit_localv6():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print("\033[92m(   ) \033[92mEdit local\033[93m Vxlan FDB V6 Menu\033[0m")
    print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[92mNo IPSEC\033[0m")
    print("2. \033[93mWith IPSEC\033[0m")
    print("3. \033[94mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        choice = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if choice == "1":
            fdbnosec_edit_localv6()
            break
        elif choice == "2":
            fdbsec_edit_localv6()
            break
        elif choice == "3":
            clear()
            vxfdb_edit_local()
            break
        else:
            print("Invalid choice.")


def fdbnosec_edit_localv6():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print("\033[92m(   ) \033[92mEdit local\033[93m Vxlan FDB V6 Menu\033[0m")
    print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[92mKharej\033[0m")
    print("2. \033[93mIRAN\033[0m")
    print("3. \033[94mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        choice = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if choice == "1":
            fdbnosec_edit_localkharejv6()
            break
        elif choice == "2":
            fdbnosec_edit_localiranv6()
            break
        elif choice == "3":
            clear()
            vxfdb_edit_localv6()
            break
        else:
            print("Invalid choice.")


def wtb_opposite_ipfdb(ip):
    if ":" in ip:  # IPv6
        ip_parts = ip.split(":")
        ip_parts[-1] = "1" if ip_parts[-1] == "2" else "2"
        return ":".join(ip_parts)
    else:  # IPv4
        ip_parts = ip.split(".")
        ip_parts[-1] = "1" if ip_parts[-1] == "2" else "2"
        return ".".join(ip_parts)


def remote_ip_fdb(name):
    try:
        with open(name, "r") as f:
            content = f.read()
        match = re.search(r"dst (\S+) dev vxlan", content)
        if match:
            return match.group(1)
        else:
            print("\033[91mno remote IP found\033[0m")
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")
    return None


def vxlan_ip_fdb(name):
    try:
        with open(name, "r") as f:
            content = f.read()
        match = re.search(r"ip addr add (\S+)/24 dev vxlan", content)
        if match:
            return match.group(1)
        else:
            print(f"\033[91mno VXLAN IP found\033[0m")
    except FileNotFoundError:
        print(f"file {name} doesn't exist")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")
    return None


def vxlan_ip_fdb6(name):
    try:
        with open(name, "r") as f:
            content = f.read()
        match = re.search(r"ip addr add (\S+)/64 dev vxlan", content)
        if match:
            return match.group(1)
        else:
            print(f"\033[91mno VXLAN IP found\033[0m")
    except FileNotFoundError:
        print(f"file {name} doesn't exist")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")
    return None


def get_dev_vxlan_dstport(name):
    try:
        with open(name, "r") as f:
            content = f.read()
        dev_match = re.search(r"dev (\S+)", content)
        dstport_match = re.search(r"dstport (\d+)", content)
        dev = dev_match.group(1) if dev_match else None
        dstport = dstport_match.group(1) if dstport_match else None
        return dev, dstport
    except FileNotFoundError:
        print(f"file {name} doesn't exist")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")
    return None, None


def get_current_vxlan_ips_fdb():
    vxlan_ip_bridge = vxlan_ip_fdb("/usr/local/bin/bridge.sh")
    return {
        "vxlan": vxlan_ip_bridge,
    }


def get_current_vxlan_ips_fdb6():
    vxlan_ip_bridge = vxlan_ip_fdb6("/usr/local/bin/bridge.sh")
    return {
        "vxlan": vxlan_ip_bridge,
    }


def delete_ufw_rules_fdb(ip):
    counterpart_ip = wtb_opposite_ipfdb(ip)
    try:
        subprocess.run(["sudo", "ufw", "delete", "allow", "from", ip], check=False)
        subprocess.run(
            ["sudo", "ufw", "delete", "allow", "from", counterpart_ip], check=False
        )
    except subprocess.CalledProcessError as e:
        print(f"\033[91merror deleting UFW rules: {e}\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def add_ufw_rules_fdb(ip):
    counterpart_ip = wtb_opposite_ip(ip)
    try:
        subprocess.run(["sudo", "ufw", "allow", "from", ip], check=True)
        subprocess.run(["sudo", "ufw", "allow", "from", counterpart_ip], check=True)
    except subprocess.CalledProcessError as e:
        print(f"\033[91merror adding UFW rules: {e}\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def update_ipfile_fdb(name, new_ip, update_type, dev=None, dstport=None):
    try:
        with open(name, "r") as f:
            content = f.read()

        if update_type == "vxlan":
            new_content = re.sub(
                r"ip addr add [^ ]+/24 dev vxlan",
                f"ip addr add {new_ip}/24 dev vxlan",
                content,
            )
        elif update_type == "remote":
            new_content = re.sub(
                r"dst \S+ dev vxlan", f"dst {new_ip} dev vxlan", content
            )
        elif update_type == "dev_dstport":
            new_content = re.sub(
                r"dstport \d+ dev \S+", f"dstport {dstport} dev {dev}", content
            )

        with open(name, "w") as f:
            f.write(new_content)
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def update_ipfile_fdb6(name, new_ip, update_type, dev=None, dstport=None):
    try:
        with open(name, "r") as f:
            content = f.read()

        if update_type == "vxlan":
            new_content = re.sub(
                r"ip addr add [^ ]+/64 dev vxlan",
                f"ip addr add {new_ip}/64 dev vxlan",
                content,
            )
        elif update_type == "remote":
            new_content = re.sub(
                r"dst \S+ dev vxlan", f"dst {new_ip} dev vxlan", content
            )
        elif update_type == "dev_dstport":
            new_content = re.sub(
                r"dstport \d+ dev \S+", f"dstport {dstport} dev {dev}", content
            )

        with open(name, "w") as f:
            f.write(new_content)
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def update_pingfile_fdb(name, new_ip):
    try:
        with open(name, "r") as f:
            content = f.read()

        new_content = re.sub(r'ip_address="[^"]+"', f'ip_address="{new_ip}"', content)

        with open(name, "w") as f:
            f.write(new_content)
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def display_stuff_vxlanfdb_iran(remote_ip, vxlan_ip, dev, dstport):
    lines = [
        f"\033[93mTitle:         Vxlan Configuration\033[0m",
        f"\033[97m──────────────────────────────────────\033[0m",
        f"\033[92mKharej IP:         \033[97m{remote_ip}\033[0m",
        f"\033[93mPrivate IP:        \033[97m{vxlan_ip}\033[0m",
        f"\033[93mDevice:            \033[97m{dev}\033[0m",
        f"\033[93mDestination Port:  \033[97m{dstport}\033[0m",
    ]
    box_width = 50

    print("\033[93m╭" + "─" * (box_width - 2) + "╮\033[0m")

    for line in lines:
        print(f"\033[93m {line:<{box_width - 4}} \033[0m")

    print("\033[93m╰" + "─" * (box_width - 2) + "╯\033[0m")


def display_stuff_vxlanfdb_kharej(remote_ip, vxlan_ip, dev, dstport):
    lines = [
        f"\033[93mTitle:         Vxlan Configuration\033[0m",
        f"\033[97m──────────────────────────────────────\033[0m",
        f"\033[92mIRAN IP:           \033[97m{remote_ip}\033[0m",
        f"\033[93mPrivate IP:        \033[97m{vxlan_ip}\033[0m",
        f"\033[93mDevice:            \033[97m{dev}\033[0m",
        f"\033[93mDestination Port:  \033[97m{dstport}\033[0m",
    ]
    box_width = 50

    print("\033[93m╭" + "─" * (box_width - 2) + "╮\033[0m")

    for line in lines:
        print(f"\033[93m {line:<{box_width - 4}} \033[0m")

    print("\033[93m╰" + "─" * (box_width - 2) + "╯\033[0m")


def save_stuff_vxlanfdb(vxlan_ip, remote_ip, dev, dstport):
    current_ips = get_current_vxlan_ips_fdb()
    current_ip = current_ips["vxlan"]

    if current_ip:
        delete_ufw_rules_fdb(current_ip)

    if dstport:
        current_dev, current_dstport = get_dev_vxlan_dstport("/usr/local/bin/bridge.sh")
        if current_dstport:
            try:
                subprocess.run(
                    ["sudo", "ufw", "delete", "allow", current_dstport], check=False
                )
            except subprocess.CalledProcessError as e:
                print(f"\033[91merror deleting UFW rule for current port: {e}\033[0m")

        try:
            subprocess.run(["sudo", "ufw", "allow", dstport], check=True)
        except subprocess.CalledProcessError as e:
            print(f"\033[91merror adding UFW rule for new port: {e}\033[0m")

    add_ufw_rules_fdb(vxlan_ip)

    counterpart_ip = wtb_opposite_ipfdb(vxlan_ip)
    try:
        update_pingfile_fdb("/etc/ping_vxlan.sh", counterpart_ip)
        update_ipfile_fdb("/usr/local/bin/bridge.sh", vxlan_ip, update_type="vxlan")
        update_ipfile_fdb("/usr/local/bin/bridge.sh", remote_ip, update_type="remote")
        update_ipfile_fdb(
            "/usr/local/bin/bridge.sh",
            None,
            update_type="dev_dstport",
            dev=dev,
            dstport=dstport,
        )

        interface = "vxlan"
        try:
            subprocess.run(["ip", "link", "set", "dev", interface, "down"], check=True)
            subprocess.run(["ip", "link", "delete", interface], check=True)
        except subprocess.CalledProcessError:
            print("\033[91mCannot find device 'vxlan'. Proceeding...\033[0m")

        script = "/usr/local/bin/bridge.sh"
        result = subprocess.run(["/bin/bash", script], capture_output=True, text=True)
        if "RTNETLINK answers: File exists" in result.stderr:
            print("interface already exists, don't mind this")
        else:
            result.check_returncode()
        subprocess.run(["sudo", "systemctl", "daemon-reload"], check=True)
        try:
            subprocess.run(["systemctl", "restart", "ping_vxlan"], check=True)
            display_checkmark("\033[92mping_v6 service restarted successfully!\033[0m")
        except subprocess.CalledProcessError as e:
            if "Unit ping_v6 not found" in (e.stderr or ""):
                print("\033[91mCouldn't restart ping_vxlan\033[0m")

        print(
            f"\033[92mChanges saved and {interface} interface updated successfully!\033[0m"
        )

    except subprocess.CalledProcessError as e:
        print(f"\033[91mError applying network stuff\033[0m: {e}")
    except Exception as e:
        print(f"\033[91mOut of ordinary error: {e}\033[0m")


def save_stuff_vxlanfdb6(vxlan_ip, remote_ip, dev, dstport):
    current_ips = get_current_vxlan_ips_fdb6()
    current_ip = current_ips["vxlan"]

    if current_ip:
        delete_ufw_rules_fdb(current_ip)

    if dstport:
        current_dev, current_dstport = get_dev_vxlan_dstport("/usr/local/bin/bridge.sh")
        if current_dstport:
            try:
                subprocess.run(
                    ["sudo", "ufw", "delete", "allow", current_dstport], check=False
                )
            except subprocess.CalledProcessError as e:
                print(f"\033[91merror deleting UFW rule for current port: {e}\033[0m")

        try:
            subprocess.run(["sudo", "ufw", "allow", dstport], check=True)
        except subprocess.CalledProcessError as e:
            print(f"\033[91merror adding UFW rule for new port: {e}\033[0m")

    add_ufw_rules_fdb(vxlan_ip)

    counterpart_ip = wtb_opposite_ipfdb(vxlan_ip)
    try:
        update_pingfile_fdb("/etc/ping_vxlan.sh", counterpart_ip)
        update_ipfile_fdb6("/usr/local/bin/bridge.sh", vxlan_ip, update_type="vxlan")
        update_ipfile_fdb6("/usr/local/bin/bridge.sh", remote_ip, update_type="remote")
        update_ipfile_fdb6(
            "/usr/local/bin/bridge.sh",
            None,
            update_type="dev_dstport",
            dev=dev,
            dstport=dstport,
        )

        interface = "vxlan"
        try:
            subprocess.run(["ip", "link", "set", "dev", interface, "down"], check=True)
        except subprocess.CalledProcessError:
            print("\033[91mCannot find device 'vxlan'. Proceeding...\033[0m")

        subprocess.run(["ip", "link", "delete", interface], check=True)
        script = "/usr/local/bin/bridge.sh"
        result = subprocess.run(["/bin/bash", script], capture_output=True, text=True)
        if "RTNETLINK answers: File exists" in result.stderr:
            print("interface already exists, don't mind this")
        else:
            result.check_returncode()
        subprocess.run(["sudo", "systemctl", "daemon-reload"], check=True)
        try:
            subprocess.run(["systemctl", "restart", "ping_vxlan"], check=True)
            display_checkmark("\033[92mping_v6 service restarted successfully!\033[0m")
        except subprocess.CalledProcessError as e:
            if "Unit ping_v6 not found" in (e.stderr or ""):
                print("\033[91mCouldn't restart ping_vxlan\033[0m")

        print(
            f"\033[92mChanges saved and {interface} interface updated successfully!\033[0m"
        )

    except subprocess.CalledProcessError as e:
        print(f"\033[91mError applying network stuff\033[0m: {e}")
    except Exception as e:
        print(f"\033[91mOut of ordinary error: {e}\033[0m")


def fdbnosec_edit_localiran():
    remote_ip_vxlan = remote_ip_fdb("/usr/local/bin/bridge.sh")
    vxlan_ip_vxlan = vxlan_ip_fdb("/usr/local/bin/bridge.sh")
    dev, dstport = get_dev_vxlan_dstport("/usr/local/bin/bridge.sh")

    if not remote_ip_vxlan or not vxlan_ip_vxlan or not dev or not dstport:
        print("Couldn't retrieve IP addresses or device/port from VXLAN file")
        return

    while True:
        os.system("clear")
        display_stuff_vxlanfdb_iran(remote_ip_vxlan, vxlan_ip_vxlan, dev, dstport)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mVXLAN FDB V4\033[93m IRAN Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKHAREJ\033[93m Public IP\033[0m")
        print("2. \033[93mChange \033[97mVxlan\033[93m Private IPV4\033[0m")
        print("3. \033[93mChange \033[97mDevice name\033[0m")
        print("4. \033[93mChange \033[97mDestination Port\033[0m")
        print("5. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to edit local single menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "2":
            new_ip = input(
                "\033[93mEnter new Private IPV4 address \033[96m[VXLAN]\033[93m :\033[0m "
            )
            if new_ip:
                vxlan_ip_vxlan = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mKharej\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_vxlan = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "3":
            dev = input("\033[93mEnter new device (e.g: eth0) :\033[0m ")
        elif choice == "4":
            dstport = input("\033[93mEnter new destination port :\033[0m ")
        elif choice == "5":
            save_stuff_vxlanfdb(vxlan_ip_vxlan, remote_ip_vxlan, dev, dstport)
            break
        elif choice == "0":
            clear()
            single_edit_local()
            break
        else:
            print("Please select a valid option.")


def fdbnosec_edit_localkharej():
    remote_ip_vxlan = remote_ip_fdb("/usr/local/bin/bridge.sh")
    vxlan_ip_vxlan = vxlan_ip_fdb("/usr/local/bin/bridge.sh")
    dev, dstport = get_dev_vxlan_dstport("/usr/local/bin/bridge.sh")

    if not remote_ip_vxlan or not vxlan_ip_vxlan or not dev or not dstport:
        print("Couldn't retrieve IP addresses or device/port from VXLAN file")
        return

    while True:
        os.system("clear")
        display_stuff_vxlanfdb_kharej(remote_ip_vxlan, vxlan_ip_vxlan, dev, dstport)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mVXLAN FDB V4\033[93m Kharej Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN\033[93m Public IP\033[0m")
        print("2. \033[93mChange \033[97mVxlan\033[93m Private IPV4\033[0m")
        print("3. \033[93mChange \033[97mDevice name\033[0m")
        print("4. \033[93mChange \033[97mDestination Port\033[0m")
        print("5. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to edit local single menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "2":
            new_ip = input(
                "\033[93mEnter new Private IPV4 address \033[96m[VXLAN]\033[93m :\033[0m "
            )
            if new_ip:
                vxlan_ip_vxlan = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mIRAN\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_vxlan = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "3":
            dev = input("\033[93mEnter new device (e.g: eth0) :\033[0m ")
        elif choice == "4":
            dstport = input("\033[93mEnter new destination port :\033[0m ")
        elif choice == "5":
            save_stuff_vxlanfdb(vxlan_ip_vxlan, remote_ip_vxlan, dev, dstport)
            break
        elif choice == "0":
            clear()
            single_edit_local()
            break
        else:
            print("Please select a valid option.")


def fdbnosec_edit_localiranv6():
    remote_ip_vxlan = remote_ip_fdb("/usr/local/bin/bridge.sh")
    vxlan_ip_vxlan = vxlan_ip_fdb6("/usr/local/bin/bridge.sh")
    dev, dstport = get_dev_vxlan_dstport("/usr/local/bin/bridge.sh")

    if not remote_ip_vxlan or not vxlan_ip_vxlan or not dev or not dstport:
        print("Couldn't retrieve IP addresses or device/port from VXLAN file")
        return

    while True:
        os.system("clear")
        display_stuff_vxlanfdb_iran(remote_ip_vxlan, vxlan_ip_vxlan, dev, dstport)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mVXLAN FDB V6\033[93m IRAN Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKHAREJ\033[93m Public IP\033[0m")
        print("2. \033[93mChange \033[97mVxlan\033[93m Private IPV6\033[0m")
        print("3. \033[93mChange \033[97mDevice name\033[0m")
        print("4. \033[93mChange \033[97mDestination Port\033[0m")
        print("5. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to edit local single menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "2":
            new_ip = input(
                "\033[93mEnter new Private IPV6 address \033[96m[VXLAN]\033[93m :\033[0m "
            )
            if new_ip:
                vxlan_ip_vxlan = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mKharej\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_vxlan = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "3":
            dev = input("\033[93mEnter new device (e.g: eth0) :\033[0m ")
        elif choice == "4":
            dstport = input("\033[93mEnter new destination port :\033[0m ")
        elif choice == "5":
            save_stuff_vxlanfdb6(vxlan_ip_vxlan, remote_ip_vxlan, dev, dstport)
            break
        elif choice == "0":
            clear()
            single_edit_local()
            break
        else:
            print("Please select a valid option.")


def fdbnosec_edit_localkharejv6():
    remote_ip_vxlan = remote_ip_fdb("/usr/local/bin/bridge.sh")
    vxlan_ip_vxlan = vxlan_ip_fdb6("/usr/local/bin/bridge.sh")
    dev, dstport = get_dev_vxlan_dstport("/usr/local/bin/bridge.sh")

    if not remote_ip_vxlan or not vxlan_ip_vxlan or not dev or not dstport:
        print("Couldn't retrieve IP addresses or device/port from VXLAN file")
        return

    while True:
        os.system("clear")
        display_stuff_vxlanfdb_kharej(remote_ip_vxlan, vxlan_ip_vxlan, dev, dstport)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mVXLAN FDB V6\033[93m Kharej Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN\033[93m Public IP\033[0m")
        print("2. \033[93mChange \033[97mVxlan\033[93m Private IPV6\033[0m")
        print("3. \033[93mChange \033[97mDevice name\033[0m")
        print("4. \033[93mChange \033[97mDestination Port\033[0m")
        print("5. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to edit local single menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "2":
            new_ip = input(
                "\033[93mEnter new Private IPV6 address \033[96m[VXLAN]\033[93m :\033[0m "
            )
            if new_ip:
                vxlan_ip_vxlan = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mIRAN\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_vxlan = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "3":
            dev = input("\033[93mEnter new device (e.g: eth0) :\033[0m ")
        elif choice == "4":
            dstport = input("\033[93mEnter new destination port :\033[0m ")
        elif choice == "5":
            save_stuff_vxlanfdb6(vxlan_ip_vxlan, remote_ip_vxlan, dev, dstport)
            break
        elif choice == "0":
            clear()
            single_edit_local()
            break
        else:
            print("Please select a valid option.")


def vxfdb_edit_local():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print("\033[92m(   ) \033[92mEdit local\033[93m Vxlan FDB Menu\033[0m")
    print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[92mVxlan \033[96m[Private IPV4]\033[0m")
    print("2. \033[93mVxlan \033[96m[Private IPV6]\033[0m")
    print("3. \033[94mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        choice = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if choice == "1":
            vxfdb_edit_localv4()
            break
        elif choice == "2":
            vxfdb_edit_localv6()
            break
        elif choice == "3":
            clear()
            single_edit_local()
            break
        else:
            print("Invalid choice.")


def vxfdb_edit_localv4():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print("\033[92m(   ) \033[92mEdit local\033[93m Vxlan FDB V4 Menu\033[0m")
    print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[92mNo IPSEC\033[0m")
    print("2. \033[93mWith IPSEC\033[0m")
    print("3. \033[94mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        choice = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if choice == "1":
            fdbnosec_edit_local()
            break
        elif choice == "2":
            fdbsec_edit_local()
            break
        elif choice == "3":
            clear()
            vxfdb_edit_local()
            break
        else:
            print("Invalid choice.")


def fdbnosec_edit_local():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print("\033[92m(   ) \033[92mEdit local\033[93m Vxlan FDB V4 Menu\033[0m")
    print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[92mKharej\033[0m")
    print("2. \033[93mIRAN\033[0m")
    print("3. \033[94mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        choice = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if choice == "1":
            fdbnosec_edit_localkharej()
            break
        elif choice == "2":
            fdbnosec_edit_localiran()
            break
        elif choice == "3":
            clear()
            vxfdb_edit_localv4()
            break
        else:
            print("Invalid choice.")


def vxfdb_edit_localv6():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print("\033[92m(   ) \033[92mEdit local\033[93m Vxlan FDB V6 Menu\033[0m")
    print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[92mNo IPSEC\033[0m")
    print("2. \033[93mWith IPSEC\033[0m")
    print("3. \033[94mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        choice = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if choice == "1":
            fdbnosec_edit_localv6()
            break
        elif choice == "2":
            fdbsec_edit_localv6()
            break
        elif choice == "3":
            clear()
            vxfdb_edit_local()
            break
        else:
            print("Invalid choice.")


def fdbnosec_edit_localv6():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print("\033[92m(   ) \033[92mEdit local\033[93m Vxlan FDB V6 Menu\033[0m")
    print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[92mKharej\033[0m")
    print("2. \033[93mIRAN\033[0m")
    print("3. \033[94mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        choice = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if choice == "1":
            fdbnosec_edit_localkharejv6()
            break
        elif choice == "2":
            fdbnosec_edit_localiranv6()
            break
        elif choice == "3":
            clear()
            vxfdb_edit_localv6()
            break
        else:
            print("Invalid choice.")


def wtb_opposite_ipfdb(ip):
    if ":" in ip:  # IPv6
        ip_parts = ip.split(":")
        ip_parts[-1] = "1" if ip_parts[-1] == "2" else "2"
        return ":".join(ip_parts)
    else:  # IPv4
        ip_parts = ip.split(".")
        ip_parts[-1] = "1" if ip_parts[-1] == "2" else "2"
        return ".".join(ip_parts)


def remote_ip_fdb(name):
    try:
        with open(name, "r") as f:
            content = f.read()
        match = re.search(r"dst (\S+) dev vxlan", content)
        if match:
            return match.group(1)
        else:
            print("\033[91mno remote IP found\033[0m")
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")
    return None


def vxlan_ip_fdb(name):
    try:
        with open(name, "r") as f:
            content = f.read()
        match = re.search(r"ip addr add (\S+)/24 dev vxlan", content)
        if match:
            return match.group(1)
        else:
            print(f"\033[91mno VXLAN IP found\033[0m")
    except FileNotFoundError:
        print(f"file {name} doesn't exist")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")
    return None


def vxlan_ip_fdb6(name):
    try:
        with open(name, "r") as f:
            content = f.read()
        match = re.search(r"ip addr add (\S+)/64 dev vxlan", content)
        if match:
            return match.group(1)
        else:
            print(f"\033[91mno VXLAN IP found\033[0m")
    except FileNotFoundError:
        print(f"file {name} doesn't exist")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")
    return None


def get_dev_vxlan_dstport(name):
    try:
        with open(name, "r") as f:
            content = f.read()
        dev_match = re.search(r"dev (\S+)", content)
        dstport_match = re.search(r"dstport (\d+)", content)
        dev = dev_match.group(1) if dev_match else None
        dstport = dstport_match.group(1) if dstport_match else None
        return dev, dstport
    except FileNotFoundError:
        print(f"file {name} doesn't exist")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")
    return None, None


def get_current_vxlan_ips_fdb():
    vxlan_ip_bridge = vxlan_ip_fdb("/usr/local/bin/bridge.sh")
    return {
        "vxlan": vxlan_ip_bridge,
    }


def get_current_vxlan_ips_fdb6():
    vxlan_ip_bridge = vxlan_ip_fdb6("/usr/local/bin/bridge.sh")
    return {
        "vxlan": vxlan_ip_bridge,
    }


def delete_ufw_rules_fdb(ip):
    counterpart_ip = wtb_opposite_ipfdb(ip)
    try:
        subprocess.run(["sudo", "ufw", "delete", "allow", "from", ip], check=False)
        subprocess.run(
            ["sudo", "ufw", "delete", "allow", "from", counterpart_ip], check=False
        )
    except subprocess.CalledProcessError as e:
        print(f"\033[91merror deleting UFW rules: {e}\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def add_ufw_rules_fdb(ip):
    counterpart_ip = wtb_opposite_ip(ip)
    try:
        subprocess.run(["sudo", "ufw", "allow", "from", ip], check=True)
        subprocess.run(["sudo", "ufw", "allow", "from", counterpart_ip], check=True)
    except subprocess.CalledProcessError as e:
        print(f"\033[91merror adding UFW rules: {e}\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def update_ipfile_fdb(name, new_ip, update_type, dev=None, dstport=None):
    try:
        with open(name, "r") as f:
            content = f.read()

        if update_type == "vxlan":
            new_content = re.sub(
                r"ip addr add [^ ]+/24 dev vxlan",
                f"ip addr add {new_ip}/24 dev vxlan",
                content,
            )
        elif update_type == "remote":
            new_content = re.sub(
                r"dst \S+ dev vxlan", f"dst {new_ip} dev vxlan", content
            )
        elif update_type == "dev_dstport":
            new_content = re.sub(
                r"dstport \d+ dev \S+", f"dstport {dstport} dev {dev}", content
            )

        with open(name, "w") as f:
            f.write(new_content)
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def update_ipfile_fdb6(name, new_ip, update_type, dev=None, dstport=None):
    try:
        with open(name, "r") as f:
            content = f.read()

        if update_type == "vxlan":
            new_content = re.sub(
                r"ip addr add [^ ]+/64 dev vxlan",
                f"ip addr add {new_ip}/64 dev vxlan",
                content,
            )
        elif update_type == "remote":
            new_content = re.sub(
                r"dst \S+ dev vxlan", f"dst {new_ip} dev vxlan", content
            )
        elif update_type == "dev_dstport":
            new_content = re.sub(
                r"dstport \d+ dev \S+", f"dstport {dstport} dev {dev}", content
            )

        with open(name, "w") as f:
            f.write(new_content)
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def update_pingfile_fdb(name, new_ip):
    try:
        with open(name, "r") as f:
            content = f.read()

        new_content = re.sub(r'ip_address="[^"]+"', f'ip_address="{new_ip}"', content)

        with open(name, "w") as f:
            f.write(new_content)
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def save_stuff_vxlanfdb(vxlan_ip, remote_ip, dev, dstport):
    current_ips = get_current_vxlan_ips_fdb()
    current_ip = current_ips["vxlan"]

    if current_ip:
        delete_ufw_rules_fdb(current_ip)

    if dstport:
        current_dev, current_dstport = get_dev_vxlan_dstport("/usr/local/bin/bridge.sh")
        if current_dstport:
            try:
                subprocess.run(
                    ["sudo", "ufw", "delete", "allow", "port", current_dstport],
                    check=False,
                )
            except subprocess.CalledProcessError as e:
                print(f"\033[91merror deleting UFW rule for current port: {e}\033[0m")

        try:
            subprocess.run(["sudo", "ufw", "allow", dstport], check=True)
        except subprocess.CalledProcessError as e:
            print(f"\033[91merror adding UFW rule for new port: {e}\033[0m")

    add_ufw_rules_fdb(vxlan_ip)

    counterpart_ip = wtb_opposite_ipfdb(vxlan_ip)
    try:
        update_pingfile_fdb("/etc/ping_vxlan.sh", counterpart_ip)
        update_ipfile_fdb("/usr/local/bin/bridge.sh", vxlan_ip, update_type="vxlan")
        update_ipfile_fdb("/usr/local/bin/bridge.sh", remote_ip, update_type="remote")
        update_ipfile_fdb(
            "/usr/local/bin/bridge.sh",
            None,
            update_type="dev_dstport",
            dev=dev,
            dstport=dstport,
        )

        interface = "vxlan"
        try:
            subprocess.run(["ip", "link", "set", "dev", interface, "down"], check=True)
            subprocess.run(["ip", "link", "delete", interface], check=True)
        except subprocess.CalledProcessError:
            print("\033[91mCannot find device 'vxlan'. Proceeding...\033[0m")

        script = "/usr/local/bin/bridge.sh"
        result = subprocess.run(["/bin/bash", script], capture_output=True, text=True)
        if "RTNETLINK answers: File exists" in result.stderr:
            print("interface already exists, don't mind this")
        else:
            result.check_returncode()
        subprocess.run(["sudo", "systemctl", "daemon-reload"], check=True)
        try:
            subprocess.run(["systemctl", "restart", "ping_vxlan"], check=True)
            display_checkmark("\033[92mping_v6 service restarted successfully!\033[0m")
        except subprocess.CalledProcessError as e:
            if "Unit ping_v6 not found" in (e.stderr or ""):
                print("\033[91mCouldn't restart ping_vxlan\033[0m")

        print(
            f"\033[92mChanges saved and {interface} interface updated successfully!\033[0m"
        )

    except subprocess.CalledProcessError as e:
        print(f"\033[91mError applying network stuff\033[0m: {e}")
    except Exception as e:
        print(f"\033[91mOut of ordinary error: {e}\033[0m")


def save_stuff_vxlanfdb6(vxlan_ip, remote_ip, dev, dstport):
    current_ips = get_current_vxlan_ips_fdb6()
    current_ip = current_ips["vxlan"]

    if current_ip:
        delete_ufw_rules_fdb(current_ip)

    if dstport:
        current_dev, current_dstport = get_dev_vxlan_dstport("/usr/local/bin/bridge.sh")
        if current_dstport:
            try:
                subprocess.run(
                    ["sudo", "ufw", "delete", "allow", "port", current_dstport],
                    check=False,
                )
            except subprocess.CalledProcessError as e:
                print(f"\033[91merror deleting UFW rule for current port: {e}\033[0m")

        try:
            subprocess.run(["sudo", "ufw", "allow", dstport], check=True)
        except subprocess.CalledProcessError as e:
            print(f"\033[91merror adding UFW rule for new port: {e}\033[0m")

    add_ufw_rules_fdb(vxlan_ip)

    counterpart_ip = wtb_opposite_ipfdb(vxlan_ip)
    try:
        update_pingfile_fdb("/etc/ping_vxlan.sh", counterpart_ip)
        update_ipfile_fdb6("/usr/local/bin/bridge.sh", vxlan_ip, update_type="vxlan")
        update_ipfile_fdb6("/usr/local/bin/bridge.sh", remote_ip, update_type="remote")
        update_ipfile_fdb6(
            "/usr/local/bin/bridge.sh",
            None,
            update_type="dev_dstport",
            dev=dev,
            dstport=dstport,
        )

        interface = "vxlan"
        try:
            subprocess.run(["ip", "link", "set", "dev", interface, "down"], check=True)
        except subprocess.CalledProcessError:
            print("\033[91mCannot find device 'vxlan'. Proceeding...\033[0m")

        subprocess.run(["ip", "link", "delete", interface], check=True)
        script = "/usr/local/bin/bridge.sh"
        result = subprocess.run(["/bin/bash", script], capture_output=True, text=True)
        if "RTNETLINK answers: File exists" in result.stderr:
            print("interface already exists, don't mind this")
        else:
            result.check_returncode()
        subprocess.run(["sudo", "systemctl", "daemon-reload"], check=True)
        try:
            subprocess.run(["systemctl", "restart", "ping_vxlan"], check=True)
            display_checkmark("\033[92mping_v6 service restarted successfully!\033[0m")
        except subprocess.CalledProcessError as e:
            if "Unit ping_v6 not found" in (e.stderr or ""):
                print("\033[91mCouldn't restart ping_vxlan\033[0m")

        print(
            f"\033[92mChanges saved and {interface} interface updated successfully!\033[0m"
        )

    except subprocess.CalledProcessError as e:
        print(f"\033[91mError applying network stuff\033[0m: {e}")
    except Exception as e:
        print(f"\033[91mOut of ordinary error: {e}\033[0m")


def fdbnosec_edit_localiran():
    remote_ip_vxlan = remote_ip_fdb("/usr/local/bin/bridge.sh")
    vxlan_ip_vxlan = vxlan_ip_fdb("/usr/local/bin/bridge.sh")
    dev, dstport = get_dev_vxlan_dstport("/usr/local/bin/bridge.sh")

    if not remote_ip_vxlan or not vxlan_ip_vxlan or not dev or not dstport:
        print("Couldn't retrieve IP addresses or device/port from VXLAN file")
        return

    while True:
        os.system("clear")
        display_stuff_vxlanfdb_iran(remote_ip_vxlan, vxlan_ip_vxlan, dev, dstport)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mVXLAN FDB V4\033[93m IRAN Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKHAREJ\033[93m Public IP\033[0m")
        print("2. \033[93mChange \033[97mVxlan\033[93m Private IPV4\033[0m")
        print("3. \033[93mChange \033[97mDevice name\033[0m")
        print("4. \033[93mChange \033[97mDestination Port\033[0m")
        print("5. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to edit local single menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "2":
            new_ip = input(
                "\033[93mEnter new Private IPV4 address \033[96m[VXLAN]\033[93m :\033[0m "
            )
            if new_ip:
                vxlan_ip_vxlan = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mKharej\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_vxlan = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "3":
            dev = input("\033[93mEnter new device (e.g: eth0) :\033[0m ")
        elif choice == "4":
            dstport = input("\033[93mEnter new destination port :\033[0m ")
        elif choice == "5":
            save_stuff_vxlanfdb(vxlan_ip_vxlan, remote_ip_vxlan, dev, dstport)
            break
        elif choice == "0":
            clear()
            single_edit_local()
            break
        else:
            print("Please select a valid option.")


def fdbnosec_edit_localkharej():
    remote_ip_vxlan = remote_ip_fdb("/usr/local/bin/bridge.sh")
    vxlan_ip_vxlan = vxlan_ip_fdb("/usr/local/bin/bridge.sh")
    dev, dstport = get_dev_vxlan_dstport("/usr/local/bin/bridge.sh")

    if not remote_ip_vxlan or not vxlan_ip_vxlan or not dev or not dstport:
        print("Couldn't retrieve IP addresses or device/port from VXLAN file")
        return

    while True:
        os.system("clear")
        display_stuff_vxlanfdb_kharej(remote_ip_vxlan, vxlan_ip_vxlan, dev, dstport)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mVXLAN FDB V4\033[93m Kharej Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN\033[93m Public IP\033[0m")
        print("2. \033[93mChange \033[97mVxlan\033[93m Private IPV4\033[0m")
        print("3. \033[93mChange \033[97mDevice name\033[0m")
        print("4. \033[93mChange \033[97mDestination Port\033[0m")
        print("5. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to edit local single menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "2":
            new_ip = input(
                "\033[93mEnter new Private IPV4 address \033[96m[VXLAN]\033[93m :\033[0m "
            )
            if new_ip:
                vxlan_ip_vxlan = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mIRAN\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_vxlan = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "3":
            dev = input("\033[93mEnter new device (e.g: eth0) :\033[0m ")
        elif choice == "4":
            dstport = input("\033[93mEnter new destination port :\033[0m ")
        elif choice == "5":
            save_stuff_vxlanfdb(vxlan_ip_vxlan, remote_ip_vxlan, dev, dstport)
            break
        elif choice == "0":
            clear()
            single_edit_local()
            break
        else:
            print("Please select a valid option.")


def fdbnosec_edit_localiranv6():
    remote_ip_vxlan = remote_ip_fdb("/usr/local/bin/bridge.sh")
    vxlan_ip_vxlan = vxlan_ip_fdb6("/usr/local/bin/bridge.sh")
    dev, dstport = get_dev_vxlan_dstport("/usr/local/bin/bridge.sh")

    if not remote_ip_vxlan or not vxlan_ip_vxlan or not dev or not dstport:
        print("Couldn't retrieve IP addresses or device/port from VXLAN file")
        return

    while True:
        os.system("clear")
        display_stuff_vxlanfdb_iran(remote_ip_vxlan, vxlan_ip_vxlan, dev, dstport)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mVXLAN FDB V6\033[93m IRAN Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKHAREJ\033[93m Public IP\033[0m")
        print("2. \033[93mChange \033[97mVxlan\033[93m Private IPV6\033[0m")
        print("3. \033[93mChange \033[97mDevice name\033[0m")
        print("4. \033[93mChange \033[97mDestination Port\033[0m")
        print("5. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to edit local single menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "2":
            new_ip = input(
                "\033[93mEnter new Private IPV6 address \033[96m[VXLAN]\033[93m :\033[0m "
            )
            if new_ip:
                vxlan_ip_vxlan = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mKharej\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_vxlan = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "3":
            dev = input("\033[93mEnter new device (e.g: eth0) :\033[0m ")
        elif choice == "4":
            dstport = input("\033[93mEnter new destination port :\033[0m ")
        elif choice == "5":
            save_stuff_vxlanfdb6(vxlan_ip_vxlan, remote_ip_vxlan, dev, dstport)
            break
        elif choice == "0":
            clear()
            single_edit_local()
            break
        else:
            print("Please select a valid option.")


def fdbnosec_edit_localkharejv6():
    remote_ip_vxlan = remote_ip_fdb("/usr/local/bin/bridge.sh")
    vxlan_ip_vxlan = vxlan_ip_fdb6("/usr/local/bin/bridge.sh")
    dev, dstport = get_dev_vxlan_dstport("/usr/local/bin/bridge.sh")

    if not remote_ip_vxlan or not vxlan_ip_vxlan or not dev or not dstport:
        print("Couldn't retrieve IP addresses or device/port from VXLAN file")
        return

    while True:
        os.system("clear")
        display_stuff_vxlanfdb_kharej(remote_ip_vxlan, vxlan_ip_vxlan, dev, dstport)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mVXLAN FDB V6\033[93m Kharej Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN\033[93m Public IP\033[0m")
        print("2. \033[93mChange \033[97mVxlan\033[93m Private IPV6\033[0m")
        print("3. \033[93mChange \033[97mDevice name\033[0m")
        print("4. \033[93mChange \033[97mDestination Port\033[0m")
        print("5. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to edit local single menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "2":
            new_ip = input(
                "\033[93mEnter new Private IPV6 address \033[96m[VXLAN]\033[93m :\033[0m "
            )
            if new_ip:
                vxlan_ip_vxlan = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mIRAN\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_vxlan = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "3":
            dev = input("\033[93mEnter new device (e.g: eth0) :\033[0m ")
        elif choice == "4":
            dstport = input("\033[93mEnter new destination port :\033[0m ")
        elif choice == "5":
            save_stuff_vxlanfdb6(vxlan_ip_vxlan, remote_ip_vxlan, dev, dstport)
            break
        elif choice == "0":
            clear()
            single_edit_local()
            break
        else:
            print("Please select a valid option.")


# ipsec
def fdbsec_edit_local():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print("\033[92m(   ) \033[92mEdit local\033[93m Vxlan FDB + IPSEC V4 Menu\033[0m")
    print('\033[92m "-"\033[93m══════════════════════════════════════════\033[0m')
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[92mKharej\033[0m")
    print("2. \033[93mIRAN\033[0m")
    print("3. \033[94mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        choice = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if choice == "1":
            fdbsec_edit_localkharej()
            break
        elif choice == "2":
            fdbsec_edit_localiran()
            break
        elif choice == "3":
            clear()
            vxfdb_edit_localv4()
            break
        else:
            print("Invalid choice.")


def fdbsec_edit_localv6():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print("\033[92m(   ) \033[92mEdit local\033[93m Vxlan FDB + IPSEC V6 Menu\033[0m")
    print('\033[92m "-"\033[93m══════════════════════════════════════════\033[0m')
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[92mKharej\033[0m")
    print("2. \033[93mIRAN\033[0m")
    print("3. \033[94mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        choice = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if choice == "1":
            fdbsec_edit_localkharejv6()
            break
        elif choice == "2":
            fdbsec_edit_localiranv6()
            break
        elif choice == "3":
            clear()
            vxfdb_edit_localv6()
            break
        else:
            print("Invalid choice.")


def update_ipsec_conf_fdb6(name, new_private_ip):
    try:
        with open(name, "r") as f:
            content = f.read()

        ip_parts = new_private_ip.split(":")
        if new_private_ip.endswith("::2"):
            ip_parts[-1] = "1"
        else:
            ip_parts[-1] = "2"
        counterpart_ip = ":".join(ip_parts)

        new_content = re.sub(
            r"leftsubnet=\S+", f"leftsubnet={new_private_ip}/64", content
        )
        new_content = re.sub(r"leftid=\S+", f"leftid={new_private_ip}", new_content)
        new_content = re.sub(r"right=\S+", f"right={counterpart_ip}", new_content)
        new_content = re.sub(
            r"rightsubnet=\S+", f"rightsubnet={counterpart_ip}/64", new_content
        )

        with open(name, "w") as f:
            f.write(new_content)
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def save_stuff_fdbsec(vxlan_ip, remote_ip, dev, dstport, ipsecsecret):
    current_ips = get_current_vxlan_ips_fdb()
    current_ip = current_ips["vxlan"]

    if current_ip:
        delete_ufw_rules_fdb(current_ip)

    if dstport:
        current_dev, current_dstport = get_dev_vxlan_dstport("/usr/local/bin/bridge.sh")
        if current_dstport:
            try:
                subprocess.run(
                    ["sudo", "ufw", "delete", "allow", current_dstport], check=False
                )
            except subprocess.CalledProcessError as e:
                print(f"\033[91merror deleting UFW rule for current port: {e}\033[0m")

        try:
            subprocess.run(["sudo", "ufw", "allow", dstport], check=True)
        except subprocess.CalledProcessError as e:
            print(f"\033[91merror adding UFW rule for new port: {e}\033[0m")

    add_ufw_rules_fdb(vxlan_ip)

    counterpart_ip = wtb_opposite_ipfdb(vxlan_ip)
    try:
        update_pingfile_fdb("/etc/ping_vxlan.sh", counterpart_ip)
        update_ipfile_fdb("/usr/local/bin/bridge.sh", vxlan_ip, update_type="vxlan")
        update_ipfile_fdb("/usr/local/bin/bridge.sh", remote_ip, update_type="remote")
        update_ipfile_fdb(
            "/usr/local/bin/bridge.sh",
            None,
            update_type="dev_dstport",
            dev=dev,
            dstport=dstport,
        )
        update_ipsecsecret_fdb("/etc/ipsec.secrets", ipsecsecret)

        interface = "vxlan"
        try:
            subprocess.run(["ip", "link", "set", "dev", interface, "down"], check=True)
            subprocess.run(["ip", "link", "delete", interface], check=True)
        except subprocess.CalledProcessError:
            print("\033[91mCannot find device 'vxlan'. Proceeding...\033[0m")

        script = "/usr/local/bin/bridge.sh"
        result = subprocess.run(["/bin/bash", script], capture_output=True, text=True)
        if "RTNETLINK answers: File exists" in result.stderr:
            print("interface already exists, don't mind this")
        else:
            result.check_returncode()
        subprocess.run(["sudo", "systemctl", "daemon-reload"], check=True)
        subprocess.run(["systemctl", "restart", "strongswan-starter"], check=True)

        result = subprocess.run(
            ["systemctl", "list-units", "--full", "--all", "strongswan.service"],
            capture_output=True,
            text=True,
        )
        if "strongswan.service" in result.stdout:
            subprocess.run(["systemctl", "restart", "strongswan"], check=True)
        else:
            print("\033[91mstrongswan service not found. don't mind this error\033[0m")
        try:
            subprocess.run(["systemctl", "restart", "ping_vxlan"], check=True)
            display_checkmark(
                "\033[92mping_vxlan service restarted successfully!\033[0m"
            )
        except subprocess.CalledProcessError as e:
            if "Service ping_vxlan not found" in (e.stderr or ""):
                print("\033[91mCouldn't restart ping_vxlan\033[0m")

        print(
            f"\033[92mChanges saved and {interface} interface updated successfully!\033[0m"
        )

    except subprocess.CalledProcessError as e:
        print(f"\033[91mError applying network stuff\033[0m: {e}")
    except Exception as e:
        print(f"\033[91mOut of ordinary error: {e}\033[0m")


def ipsecsecret_key_fdb(name):
    try:
        with open(name, "r") as f:
            content = f.read()
        match = re.search(r'PSK "(\S+)"', content)
        if match:
            return match.group(1)
        else:
            print("\033[91mno IPsec key found\033{0m")
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")
    return None


def update_ipsecsecret_fdb(name, new_secret):
    try:
        with open(name, "r") as f:
            content = f.read()

        new_content = re.sub(r'PSK "\S+"', f'PSK "{new_secret}"', content)

        with open(name, "w") as f:
            f.write(new_content)
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def display_ipsecsecret_fdb(secret_key):
    box_width = 50
    print("\033[93m╭" + "─" * (box_width - 2) + "╮\033[0m")
    print(f"\033[93m Title:        \033[93m IPsec Secret Key\033[0m")
    print(f"\033[97m──────────────────────────────────────\033[0m")
    print(f"\033[93m IPsec Key:  \033[97m{secret_key}\033[0m")
    print("\033[93m╰" + "─" * (box_width - 2) + "╯\033[0m")


def fdbsec_edit_localiran():
    remote_ip_vxlan = remote_ip_fdb("/usr/local/bin/bridge.sh")
    vxlan_ip_vxlan = vxlan_ip_fdb("/usr/local/bin/bridge.sh")
    dev, dstport = get_dev_vxlan_dstport("/usr/local/bin/bridge.sh")
    ipsecsecret_key_private = ipsecsecret_key_fdb("/etc/ipsec.secrets")

    if not remote_ip_vxlan or not vxlan_ip_vxlan or not dev or not dstport:
        print("Couldn't retrieve IP addresses or device/port from Vxlan file")
        return

    while True:
        os.system("clear")
        display_stuff_vxlanfdb_iran(remote_ip_vxlan, vxlan_ip_vxlan, dev, dstport)
        display_ipsecsecret_fdb(ipsecsecret_key_private)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mVXLAN FDB V4 + IPSEC\033[93m IRAN Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej\033[93m Public IP\033[0m")
        print("2. \033[93mChange \033[97mVxlan\033[93m Private IPV4\033[0m")
        print("3. \033[93mChange \033[97mDevice name\033[0m")
        print("4. \033[93mChange \033[97mDestination Port\033[0m")
        print("5. \033[93mChange IPsec \033[92mSecret Key\033[0m")
        print("6. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to edit local single menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "2":
            new_ip = input(
                "\033[93mEnter New Private IPV4 address \033[96m[VXLAN]\033[93m :\033[0m "
            )
            if new_ip:
                vxlan_ip_vxlan = new_ip
                update_ipsec_conf_vxsec("/etc/ipsec.conf", new_ip)
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mKharej\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_vxlan = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "3":
            dev = input("\033[93mEnter new device (e.g: eth0) :\033[0m ")
        elif choice == "4":
            dstport = input("\033[93mEnter new destination port :\033[0m ")
        elif choice == "5":
            new_secret = input(
                "\033[93mEnter New \033[92mIPsec \033[93mSecret Key: \033[0m"
            )
            if new_secret:
                ipsecsecret_key_private = new_secret
            else:
                print("\033[91mCrazy Secret key\033[0m")
        elif choice == "6":
            save_stuff_fdbsec(
                vxlan_ip_vxlan, remote_ip_vxlan, dev, dstport, ipsecsecret_key_private
            )
            update_ipsec_ip(vxlan_ip_vxlan)
            break
        elif choice == "0":
            clear()
            single_edit_local()
            break
        else:
            print("Please select a valid option.")


def fdbsec_edit_localkharej():
    remote_ip_vxlan = remote_ip_fdb("/usr/local/bin/bridge.sh")
    vxlan_ip_vxlan = vxlan_ip_fdb("/usr/local/bin/bridge.sh")
    dev, dstport = get_dev_vxlan_dstport("/usr/local/bin/bridge.sh")
    ipsecsecret_key_private = ipsecsecret_key_fdb("/etc/ipsec.secrets")

    if not remote_ip_vxlan or not vxlan_ip_vxlan or not dev or not dstport:
        print("Couldn't retrieve IP addresses or device/port from Vxlan file")
        return

    while True:
        os.system("clear")
        display_stuff_vxlanfdb_kharej(remote_ip_vxlan, vxlan_ip_vxlan, dev, dstport)
        display_ipsecsecret_fdb(ipsecsecret_key_private)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mVXLAN FDB V4 + IPSEC\033[93m Kharej Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN\033[93m Public IP\033[0m")
        print("2. \033[93mChange \033[97mVxlan\033[93m Private IPV4\033[0m")
        print("3. \033[93mChange \033[97mDevice name\033[0m")
        print("4. \033[93mChange \033[97mDestination Port\033[0m")
        print("5. \033[93mChange IPsec \033[92mSecret Key\033[0m")
        print("6. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to edit local single menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "2":
            new_ip = input(
                "\033[93mEnter New Private IPV4 address \033[96m[VXLAN]\033[93m :\033[0m "
            )
            if new_ip:
                vxlan_ip_vxlan = new_ip
                update_ipsec_conf_vxsec("/etc/ipsec.conf", new_ip)
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mKharej\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_vxlan = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "3":
            dev = input("\033[93mEnter new device (e.g: eth0) :\033[0m ")
        elif choice == "4":
            dstport = input("\033[93mEnter new destination port :\033[0m ")
        elif choice == "5":
            new_secret = input(
                "\033[93mEnter New \033[92mIPsec \033[93mSecret Key: \033[0m"
            )
            if new_secret:
                ipsecsecret_key_private = new_secret
            else:
                print("\033[91mCrazy Secret key\033[0m")
        elif choice == "6":
            save_stuff_fdbsec(
                vxlan_ip_vxlan, remote_ip_vxlan, dev, dstport, ipsecsecret_key_private
            )
            update_ipsec_ip(vxlan_ip_vxlan)
            break
        elif choice == "0":
            clear()
            single_edit_local()
            break
        else:
            print("Please select a valid option.")


def save_stuff_fdbsec6(vxlan_ip, remote_ip, dev, dstport, ipsecsecret):
    current_ips = get_current_vxlan_ips_fdb6()
    current_ip = current_ips["vxlan"]

    if current_ip:
        delete_ufw_rules_fdb(current_ip)

    if dstport:
        current_dev, current_dstport = get_dev_vxlan_dstport("/usr/local/bin/bridge.sh")
        if current_dstport:
            try:
                subprocess.run(
                    ["sudo", "ufw", "delete", "allow", current_dstport], check=False
                )
            except subprocess.CalledProcessError as e:
                print(f"\033[91merror deleting UFW rule for current port: {e}\033[0m")

        try:
            subprocess.run(["sudo", "ufw", "allow", dstport], check=True)
        except subprocess.CalledProcessError as e:
            print(f"\033[91merror adding UFW rule for new port: {e}\033[0m")

    add_ufw_rules_fdb(vxlan_ip)

    counterpart_ip = wtb_opposite_ipfdb(vxlan_ip)
    try:
        update_pingfile_fdb("/etc/ping_vxlan.sh", counterpart_ip)
        update_ipfile_fdb6("/usr/local/bin/bridge.sh", vxlan_ip, update_type="vxlan")
        update_ipfile_fdb6("/usr/local/bin/bridge.sh", remote_ip, update_type="remote")
        update_ipfile_fdb6(
            "/usr/local/bin/bridge.sh",
            None,
            update_type="dev_dstport",
            dev=dev,
            dstport=dstport,
        )
        update_ipsecsecret_fdb("/etc/ipsec.secrets", ipsecsecret)

        interface = "vxlan"
        try:
            subprocess.run(["ip", "link", "set", "dev", interface, "down"], check=True)
            subprocess.run(["ip", "link", "delete", interface], check=True)
        except subprocess.CalledProcessError:
            print("\033[91mCannot find device 'vxlan'. Proceeding...\033[0m")

        script = "/usr/local/bin/bridge.sh"
        result = subprocess.run(["/bin/bash", script], capture_output=True, text=True)
        if "RTNETLINK answers: File exists" in result.stderr:
            print("interface already exists, don't mind this")
        else:
            result.check_returncode()
        subprocess.run(["sudo", "systemctl", "daemon-reload"], check=True)
        subprocess.run(["systemctl", "restart", "strongswan-starter"], check=True)

        result = subprocess.run(
            ["systemctl", "list-units", "--full", "--all", "strongswan.service"],
            capture_output=True,
            text=True,
        )
        if "strongswan.service" in result.stdout:
            subprocess.run(["systemctl", "restart", "strongswan"], check=True)
        else:
            print("\033[91mstrongswan service not found. don't mind this error\033[0m")
        try:
            subprocess.run(["systemctl", "restart", "ping_vxlan"], check=True)
            display_checkmark(
                "\033[92mping_vxlan service restarted successfully!\033[0m"
            )
        except subprocess.CalledProcessError as e:
            if "Service ping_vxlan not found" in (e.stderr or ""):
                print("\033[91mCouldn't restart ping_vxlan\033[0m")

        print(
            f"\033[92mChanges saved and {interface} interface updated successfully!\033[0m"
        )

    except subprocess.CalledProcessError as e:
        print(f"\033[91mError applying network stuff\033[0m: {e}")
    except Exception as e:
        print(f"\033[91mOut of ordinary error: {e}\033[0m")


def fdbsec_edit_localiranv6():
    remote_ip_vxlan = remote_ip_fdb("/usr/local/bin/bridge.sh")
    vxlan_ip_vxlan = vxlan_ip_fdb6("/usr/local/bin/bridge.sh")
    dev, dstport = get_dev_vxlan_dstport("/usr/local/bin/bridge.sh")
    ipsecsecret_key_private = ipsecsecret_key_fdb("/etc/ipsec.secrets")

    if not remote_ip_vxlan or not vxlan_ip_vxlan or not dev or not dstport:
        print("Couldn't retrieve IP addresses or device/port from Vxlan file")
        return

    while True:
        os.system("clear")
        display_stuff_vxlanfdb_iran(remote_ip_vxlan, vxlan_ip_vxlan, dev, dstport)
        display_ipsecsecret_fdb(ipsecsecret_key_private)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mVXLAN FDB V6 + IPSEC\033[93m IRAN Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej\033[93m Public IP\033[0m")
        print("2. \033[93mChange \033[97mVxlan\033[93m Private IPV6\033[0m")
        print("3. \033[93mChange \033[97mDevice name\033[0m")
        print("4. \033[93mChange \033[97mDestination Port\033[0m")
        print("5. \033[93mChange IPsec \033[92mSecret Key\033[0m")
        print("6. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to edit local single menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "2":
            new_ip = input(
                "\033[93mEnter New Private IPV6 address \033[96m[VXLAN]\033[93m :\033[0m "
            )
            if new_ip:
                vxlan_ip_vxlan = new_ip
                update_ipsec_conf_fdb6("/etc/ipsec.conf", new_ip)
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mKharej\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_vxlan = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "3":
            dev = input("\033[93mEnter new device (e.g: eth0) :\033[0m ")
        elif choice == "4":
            dstport = input("\033[93mEnter new destination port :\033[0m ")
        elif choice == "5":
            new_secret = input(
                "\033[93mEnter New \033[92mIPsec \033[93mSecret Key: \033[0m"
            )
            if new_secret:
                ipsecsecret_key_private = new_secret
            else:
                print("\033[91mCrazy Secret key\033[0m")
        elif choice == "6":
            save_stuff_fdbsec6(
                vxlan_ip_vxlan, remote_ip_vxlan, dev, dstport, ipsecsecret_key_private
            )
            update_ipsec_ip(vxlan_ip_vxlan)
            break
        elif choice == "0":
            clear()
            single_edit_local()
            break
        else:
            print("Please select a valid option.")


def fdbsec_edit_localkharejv6():
    remote_ip_vxlan = remote_ip_fdb("/usr/local/bin/bridge.sh")
    vxlan_ip_vxlan = vxlan_ip_fdb6("/usr/local/bin/bridge.sh")
    dev, dstport = get_dev_vxlan_dstport("/usr/local/bin/bridge.sh")
    ipsecsecret_key_private = ipsecsecret_key_fdb("/etc/ipsec.secrets")

    if not remote_ip_vxlan or not vxlan_ip_vxlan or not dev or not dstport:
        print("Couldn't retrieve IP addresses or device/port from Vxlan file")
        return

    while True:
        os.system("clear")
        display_stuff_vxlanfdb_kharej(remote_ip_vxlan, vxlan_ip_vxlan, dev, dstport)
        display_ipsecsecret_fdb(ipsecsecret_key_private)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mVXLAN FDB V6 + IPSEC\033[93m Kharej Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN\033[93m Public IP\033[0m")
        print("2. \033[93mChange \033[97mVxlan\033[93m Private IPV6\033[0m")
        print("3. \033[93mChange \033[97mDevice name\033[0m")
        print("4. \033[93mChange \033[97mDestination Port\033[0m")
        print("5. \033[93mChange IPsec \033[92mSecret Key\033[0m")
        print("6. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to edit local single menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "2":
            new_ip = input(
                "\033[93mEnter New Private IPV6 address \033[96m[VXLAN]\033[93m :\033[0m "
            )
            if new_ip:
                vxlan_ip_vxlan = new_ip
                update_ipsec_conf_fdb6("/etc/ipsec.conf", new_ip)
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mKharej\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_vxlan = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "3":
            dev = input("\033[93mEnter new device (e.g: eth0) :\033[0m ")
        elif choice == "4":
            dstport = input("\033[93mEnter new destination port :\033[0m ")
        elif choice == "5":
            new_secret = input(
                "\033[93mEnter New \033[92mIPsec \033[93mSecret Key: \033[0m"
            )
            if new_secret:
                ipsecsecret_key_private = new_secret
            else:
                print("\033[91mCrazy Secret key\033[0m")
        elif choice == "6":
            save_stuff_fdbsec6(
                vxlan_ip_vxlan, remote_ip_vxlan, dev, dstport, ipsecsecret_key_private
            )
            update_ipsec_ip(vxlan_ip_vxlan)
            break
        elif choice == "0":
            clear()
            single_edit_local()
            break
        else:
            print("Please select a valid option.")


def multi_edit_local():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print("\033[92m(   ) \033[92mEdit local\033[93m Multi Menu\033[0m")
    print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[92m6TO4\033[93m[Sit]\033[0m")
    print("2. \033[93mIP6IP6\033[0m")
    print("3. \033[92mGRE6\033[0m")
    print("4. \033[93mGRE6TAP IPV4\033[0m")
    print("5. \033[92mGeneve UDP \033[0m")
    print("6. \033[93mGeneve + GRE6 [IPV4]\033[0m")
    print("7. \033[93mWireguard\033[0m")
    print("8. \033[92mEOIP\033[0m")
    print("0. \033[94mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        choice = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if choice == "1":
            private_multiedit_local()
            break
        elif choice == "2":
            ip6ip6_multiedit_local()
            break
        elif choice == "3":
            gre6_multiedit_local()
            break
        elif choice == "4":
            gre6tap_multiedit_local()
            break
        elif choice == "5":
            gen_multiedit_localmenu()
            break
        elif choice == "6":
            gengre_multiedit_local()
            break
        elif choice == "7":
            wireguard_edit_server()
            break
        elif choice == "8":
            eoip_editlocal()
            break
        elif choice == "0":
            clear()
            edit_local()
            break
        else:
            print("Invalid choice.")

SERVICE_FILE_IRAN1 = "/etc/systemd/system/eoip_iran_1.service"
SERVICE_FILE_IRAN2 = "/etc/systemd/system/eoip_iran_2.service"
SERVICE_FILE_IRAN3 = "/etc/systemd/system/eoip_iran_3.service"
SERVICE_FILE_IRAN4 = "/etc/systemd/system/eoip_iran_4.service"
SERVICE_FILE_IRAN5 = "/etc/systemd/system/eoip_iran_5.service"
SERVICE_FILE_KHAREJ1 = "/etc/systemd/system/eoip_kharej_1.service"
SERVICE_FILE_KHAREJ2 = "/etc/systemd/system/eoip_kharej_2.service"
SERVICE_FILE_KHAREJ3 = "/etc/systemd/system/eoip_kharej_3.service"
SERVICE_FILE_KHAREJ4 = "/etc/systemd/system/eoip_kharej_4.service"
SERVICE_FILE_KHAREJ5 = "/etc/systemd/system/eoip_kharej_5.service"
PRIVATE_IP_FILE1 = "/usr/local/bin/cmd/eoip_additional_commands_1.sh"
PRIVATE_IP_FILE2 = "/usr/local/bin/cmd/eoip_additional_commands_2.sh"
PRIVATE_IP_FILE3 = "/usr/local/bin/cmd/eoip_additional_commands_3.sh"
PRIVATE_IP_FILE4 = "/usr/local/bin/cmd/eoip_additional_commands_4.sh"
PRIVATE_IP_FILE5 = "/usr/local/bin/cmd/eoip_additional_commands_5.sh"
IPSEC_CONF_FILE = "/etc/ipsec1.conf"
IPSEC_SECRETS_FILE = "/etc/ipsec.secrets"
PING_SCRIPT_PATH1 = '/etc/ping_eoip_1.sh'
PING_SCRIPT_PATH2 = '/etc/ping_eoip_2.sh'
PING_SCRIPT_PATH3 = '/etc/ping_eoip_3.sh'
PING_SCRIPT_PATH4 = '/etc/ping_eoip_4.sh'
PING_SCRIPT_PATH5 = '/etc/ping_eoip_5.sh'
SERVICE_FILE_PING1 = '/etc/systemd/system/ping_eoip_1.service'
SERVICE_FILE_PING2 = '/etc/systemd/system/ping_eoip_2.service'
SERVICE_FILE_PING3 = '/etc/systemd/system/ping_eoip_3.service'
SERVICE_FILE_PING4 = '/etc/systemd/system/ping_eoip_4.service'
SERVICE_FILE_PING5 = '/etc/systemd/system/ping_eoip_5.service'
ADDITIONAL_SERVICE_IRAN1 = "/etc/systemd/system/additional_irancmd_1.service"
ADDITIONAL_SERVICE_IRAN2 = "/etc/systemd/system/additional_irancmd_2.service"
ADDITIONAL_SERVICE_IRAN3 = "/etc/systemd/system/additional_irancmd_3.service"
ADDITIONAL_SERVICE_IRAN4 = "/etc/systemd/system/additional_irancmd_4.service"
ADDITIONAL_SERVICE_IRAN5 = "/etc/systemd/system/additional_irancmd_5.service"
ADDITIONAL_SERVICE_KHAREJ1 = "/etc/systemd/system/eoip_additional_kharej_1.service"
ADDITIONAL_SERVICE_KHAREJ2 = "/etc/systemd/system/eoip_additional_kharej_2.service"
ADDITIONAL_SERVICE_KHAREJ3 = "/etc/systemd/system/eoip_additional_kharej_3.service"
ADDITIONAL_SERVICE_KHAREJ4 = "/etc/systemd/system/eoip_additional_kharej_4.service"
ADDITIONAL_SERVICE_KHAREJ5 = "/etc/systemd/system/eoip_additional_kharej_5.service"

def eoip_editlocal():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print("\033[92m(   ) \033[92mEOIP\033[93m Edit Menu\033[0m")
    print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("1  \033[93m[1] Kharej [5] IRAN\033[0m")
    print("2  \033[92m[5] Kharej [1] IRAN\033[0m")
    print("0. \033[94mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        choice = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if choice == "1":
            eoip_edit_1kharej_5iran()
            break
        elif choice == "2":
            eoip_edit_5kharej_1iran()
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Invalid choice.")

def eoip_edit_5kharej_1iran():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print("\033[92m(   ) \033[92mEOIP Kharej\033[93m Edit Menu\033[0m")
    print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("1  \033[93mKharej [1]\033[0m")
    print("2  \033[93mKharej [2]\033[0m")
    print("3  \033[93mKharej [3]\033[0m")
    print("4  \033[93mKharej [4]\033[0m")
    print("5  \033[93mKharej [5]\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    print("6  \033[93mIRAN configs\033[0m")
    print("0. \033[94mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        choice = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if choice == "1":
            edit_local_eoip_kharej1()
            break
        elif choice == "2":
            edit_local_eoip_kharej2()
            break
        elif choice == "3":
            edit_local_eoip_kharej3()
            break
        elif choice == "4":
            edit_local_eoip_kharej4()
            break
        elif choice == "5":
            edit_local_eoip_kharej5()
            break
        elif choice == "6":
            edit_local_eoip_iranmenu()
            break
        elif choice == "0":
            clear()
            eoip_editlocal()
            break
        else:
            print("Invalid choice.")

def edit_local_eoip_iranmenu():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print("\033[92m(   ) \033[92mEOIP IRAN\033[93m Edit Menu\033[0m")
    print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("1  \033[93mIRAN config [1]\033[0m")
    print("2  \033[93mIRAN config [2]\033[0m")
    print("3  \033[92mIRAN config [3]\033[0m")
    print("4  \033[93mIRAN config [4]\033[0m")
    print("5  \033[93mIRAN config [5]\033[0m")
    print("0. \033[94mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        choice = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if choice == "1":
            edit_local_eoip_iranconfig1()
            break
        elif choice == "2":
            edit_local_eoip_iranconfig2()
            break
        elif choice == "3":
            edit_local_eoip_iranconfig3()
            break
        elif choice == "4":
            edit_local_eoip_iranconfig4()
            break
        elif choice == "5":
            edit_local_eoip_iranconfig5()
            break
        elif choice == "0":
            clear()
            eoip_edit_5kharej_1iran()
            break
        else:
            print("Invalid choice.")

# 1 kharej 5iran
def eoip_edit_1kharej_5iran():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print("\033[92m(   ) \033[92mEOIP IRAN\033[93m Edit Menu\033[0m")
    print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("1  \033[93mIRAN [1]\033[0m")
    print("2  \033[93mIRAN [2]\033[0m")
    print("3  \033[93mIRAN [3]\033[0m")
    print("4  \033[93mIRAN [4]\033[0m")
    print("5  \033[93mIRAN [5]\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    print("6  \033[93mKharej configs\033[0m")
    print("0. \033[94mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        choice = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if choice == "1":
            edit_local_eoip_iran1()
            break
        elif choice == "2":
            edit_local_eoip_iran2()
            break
        elif choice == "3":
            edit_local_eoip_iran3()
            break
        elif choice == "4":
            edit_local_eoip_iran4()
            break
        elif choice == "5":
            edit_local_eoip_iran5()
            break
        elif choice == "6":
            edit_local_eoip_kharejmenu()
            break
        elif choice == "0":
            clear()
            eoip_editlocal()
            break
        else:
            print("Invalid choice.")

def edit_local_eoip_kharejmenu():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print("\033[92m(   ) \033[92mEOIP Kharej\033[93m Edit Menu\033[0m")
    print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("1  \033[93mKharej config [1]\033[0m")
    print("2  \033[93mKharej config [2]\033[0m")
    print("3  \033[92mKharej config [3]\033[0m")
    print("4  \033[93mKharej config [4]\033[0m")
    print("5  \033[93mKharej config [5]\033[0m")
    print("0. \033[94mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        choice = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if choice == "1":
            edit_local_eoip_kharejconfig1()
            break
        elif choice == "2":
            edit_local_eoip_kharejconfig2()
            break
        elif choice == "3":
            edit_local_eoip_kharejconfig3()
            break
        elif choice == "4":
            edit_local_eoip_kharejconfig4()
            break
        elif choice == "5":
            edit_local_eoip_kharejconfig5()
            break
        elif choice == "0":
            clear()
            eoip_edit_1kharej_5iran()
            break
        else:
            print("Invalid choice.")

def extract_ips(service_file):
    with open(service_file, 'r') as f:
        content = f.read()
    local_ip = re.search(r"local (\S+)", content).group(1)
    remote_ip = re.search(r"remote (\S+)", content).group(1)
    return local_ip, remote_ip


def extract_ipsec_secrets():
    if not os.path.exists(IPSEC_SECRETS_FILE):
        print("\033[91mError:\033[0m PSK not available.")
        return None, None, None

    with open(IPSEC_SECRETS_FILE, 'r') as f:
        content = f.read()
    ip_pair = re.search(r"(\S+) (\S+) : PSK \"(.*?)\"", content)
    if ip_pair:
        left_ip, right_ip, secret_key = ip_pair.groups()
        return left_ip, right_ip, secret_key
    return None, None, None

def calculate_opposite_ip(ip):
    if ':' in ip:  
        return re.sub(r"::(\d+)", lambda m: f"::{int(m.group(1)) + 1}", ip)
    else:  
        parts = ip.split('.')
        parts[-1] = str(int(parts[-1]) + 1)
        return '.'.join(parts)
#1
def extract_private_ip1():
    with open(PRIVATE_IP_FILE1, 'r') as f:
        content = f.read()
    private_ip = re.search(r"ip addr add (\S+)/", content).group(1)
    return private_ip

def extract_private_ip2():
    with open(PRIVATE_IP_FILE2, 'r') as f:
        content = f.read()
    private_ip = re.search(r"ip addr add (\S+)/", content).group(1)
    return private_ip

def extract_private_ip3():
    with open(PRIVATE_IP_FILE3, 'r') as f:
        content = f.read()
    private_ip = re.search(r"ip addr add (\S+)/", content).group(1)
    return private_ip

def extract_private_ip4():
    with open(PRIVATE_IP_FILE4, 'r') as f:
        content = f.read()
    private_ip = re.search(r"ip addr add (\S+)/", content).group(1)
    return private_ip

def extract_private_ip5():
    with open(PRIVATE_IP_FILE5, 'r') as f:
        content = f.read()
    private_ip = re.search(r"ip addr add (\S+)/", content).group(1)
    return private_ip

def update_ipsec_conf_and_secrets_kh1(new_ip):
    opposite_ip = calculate_opposite_ip(new_ip)

    if not os.path.exists(IPSEC_CONF_FILE):
        print("\033[91mError:\033[0m Ipsec not available.")
        return

    with open(IPSEC_CONF_FILE, 'r') as f:
        ipsec_content = f.read()

    conn_block = re.search(r"(conn eoip_eoipkh1.*?)(?=conn|\Z)", ipsec_content, re.DOTALL)
    if conn_block:
        conn_block_content = conn_block.group(1)

        conn_block_content = re.sub(r"leftid=\S+", f"leftid={new_ip}", conn_block_content)
        conn_block_content = re.sub(r"leftsubnet=\S+", f"leftsubnet={new_ip}/64", conn_block_content)

        conn_block_content = re.sub(r"right=\S+", f"right={opposite_ip}", conn_block_content)
        conn_block_content = re.sub(r"rightsubnet=\S+", f"rightsubnet={opposite_ip}/64", conn_block_content)

        ipsec_content = ipsec_content.replace(conn_block.group(1), conn_block_content)

        with open(IPSEC_CONF_FILE, 'w') as f:
            f.write(ipsec_content)

    if not os.path.exists(IPSEC_SECRETS_FILE):
        print("\033[91mError:\033[0m PSK not available.")
        return

    with open(IPSEC_SECRETS_FILE, 'r') as f:
        secrets_content = f.read()

    updated_secrets = re.sub(r"(\S+) (\S+) : PSK ", f"{opposite_ip} {new_ip} : PSK ", secrets_content)

    with open(IPSEC_SECRETS_FILE, 'w') as f:
        f.write(updated_secrets)

def update_ipsec_conf_and_secrets_kh2(new_ip):
    opposite_ip = calculate_opposite_ip(new_ip)

    if not os.path.exists(IPSEC_CONF_FILE):
        print("\033[91mError:\033[0m Ipsec not available.")
        return

    with open(IPSEC_CONF_FILE, 'r') as f:
        ipsec_content = f.read()

    conn_block = re.search(r"(conn eoip_eoipkh2.*?)(?=conn|\Z)", ipsec_content, re.DOTALL)
    if conn_block:
        conn_block_content = conn_block.group(1)

        conn_block_content = re.sub(r"leftid=\S+", f"leftid={new_ip}", conn_block_content)
        conn_block_content = re.sub(r"leftsubnet=\S+", f"leftsubnet={new_ip}/64", conn_block_content)

        conn_block_content = re.sub(r"right=\S+", f"right={opposite_ip}", conn_block_content)
        conn_block_content = re.sub(r"rightsubnet=\S+", f"rightsubnet={opposite_ip}/64", conn_block_content)

        ipsec_content = ipsec_content.replace(conn_block.group(1), conn_block_content)

        with open(IPSEC_CONF_FILE, 'w') as f:
            f.write(ipsec_content)

    if not os.path.exists(IPSEC_SECRETS_FILE):
        print("\033[91mError:\033[0m PSK not available.")
        return

    with open(IPSEC_SECRETS_FILE, 'r') as f:
        secrets_content = f.read()

    updated_secrets = re.sub(r"(\S+) (\S+) : PSK ", f"{opposite_ip} {new_ip} : PSK ", secrets_content)

    with open(IPSEC_SECRETS_FILE, 'w') as f:
        f.write(updated_secrets)

def update_ipsec_conf_and_secrets_kh3(new_ip):
    opposite_ip = calculate_opposite_ip(new_ip)

    if not os.path.exists(IPSEC_CONF_FILE):
        print("\033[91mError:\033[0m Ipsec not available.")
        return

    with open(IPSEC_CONF_FILE, 'r') as f:
        ipsec_content = f.read()

    conn_block = re.search(r"(conn eoip_eoipkh3.*?)(?=conn|\Z)", ipsec_content, re.DOTALL)
    if conn_block:
        conn_block_content = conn_block.group(1)

        conn_block_content = re.sub(r"leftid=\S+", f"leftid={new_ip}", conn_block_content)
        conn_block_content = re.sub(r"leftsubnet=\S+", f"leftsubnet={new_ip}/64", conn_block_content)

        conn_block_content = re.sub(r"right=\S+", f"right={opposite_ip}", conn_block_content)
        conn_block_content = re.sub(r"rightsubnet=\S+", f"rightsubnet={opposite_ip}/64", conn_block_content)

        ipsec_content = ipsec_content.replace(conn_block.group(1), conn_block_content)

        with open(IPSEC_CONF_FILE, 'w') as f:
            f.write(ipsec_content)

    if not os.path.exists(IPSEC_SECRETS_FILE):
        print("\033[91mError:\033[0m PSK not available.")
        return

    with open(IPSEC_SECRETS_FILE, 'r') as f:
        secrets_content = f.read()

    updated_secrets = re.sub(r"(\S+) (\S+) : PSK ", f"{opposite_ip} {new_ip} : PSK ", secrets_content)

    with open(IPSEC_SECRETS_FILE, 'w') as f:
        f.write(updated_secrets)

def update_ipsec_conf_and_secrets_kh4(new_ip):
    opposite_ip = calculate_opposite_ip(new_ip)

    if not os.path.exists(IPSEC_CONF_FILE):
        print("\033[91mError:\033[0m Ipsec not available.")
        return

    with open(IPSEC_CONF_FILE, 'r') as f:
        ipsec_content = f.read()

    conn_block = re.search(r"(conn eoip_eoipkh4.*?)(?=conn|\Z)", ipsec_content, re.DOTALL)
    if conn_block:
        conn_block_content = conn_block.group(1)

        conn_block_content = re.sub(r"leftid=\S+", f"leftid={new_ip}", conn_block_content)
        conn_block_content = re.sub(r"leftsubnet=\S+", f"leftsubnet={new_ip}/64", conn_block_content)

        conn_block_content = re.sub(r"right=\S+", f"right={opposite_ip}", conn_block_content)
        conn_block_content = re.sub(r"rightsubnet=\S+", f"rightsubnet={opposite_ip}/64", conn_block_content)

        ipsec_content = ipsec_content.replace(conn_block.group(1), conn_block_content)

        with open(IPSEC_CONF_FILE, 'w') as f:
            f.write(ipsec_content)

    if not os.path.exists(IPSEC_SECRETS_FILE):
        print("\033[91mError:\033[0m PSK not available.")
        return

    with open(IPSEC_SECRETS_FILE, 'r') as f:
        secrets_content = f.read()

    updated_secrets = re.sub(r"(\S+) (\S+) : PSK ", f"{opposite_ip} {new_ip} : PSK ", secrets_content)

    with open(IPSEC_SECRETS_FILE, 'w') as f:
        f.write(updated_secrets)

def update_ipsec_conf_and_secrets_kh5(new_ip):
    opposite_ip = calculate_opposite_ip(new_ip)

    if not os.path.exists(IPSEC_CONF_FILE):
        print("\033[91mError:\033[0m Ipsec not available.")
        return

    with open(IPSEC_CONF_FILE, 'r') as f:
        ipsec_content = f.read()

    conn_block = re.search(r"(conn eoip_eoipkh5.*?)(?=conn|\Z)", ipsec_content, re.DOTALL)
    if conn_block:
        conn_block_content = conn_block.group(1)

        conn_block_content = re.sub(r"leftid=\S+", f"leftid={new_ip}", conn_block_content)
        conn_block_content = re.sub(r"leftsubnet=\S+", f"leftsubnet={new_ip}/64", conn_block_content)

        conn_block_content = re.sub(r"right=\S+", f"right={opposite_ip}", conn_block_content)
        conn_block_content = re.sub(r"rightsubnet=\S+", f"rightsubnet={opposite_ip}/64", conn_block_content)

        ipsec_content = ipsec_content.replace(conn_block.group(1), conn_block_content)

        with open(IPSEC_CONF_FILE, 'w') as f:
            f.write(ipsec_content)

    if not os.path.exists(IPSEC_SECRETS_FILE):
        print("\033[91mError:\033[0m PSK not available.")
        return

    with open(IPSEC_SECRETS_FILE, 'r') as f:
        secrets_content = f.read()

    updated_secrets = re.sub(r"(\S+) (\S+) : PSK ", f"{opposite_ip} {new_ip} : PSK ", secrets_content)

    with open(IPSEC_SECRETS_FILE, 'w') as f:
        f.write(updated_secrets)

def update_ipsec_conf_and_secrets_ir1(new_ip):
    opposite_ip = calculate_opposite_ip(new_ip)

    if not os.path.exists(IPSEC_CONF_FILE):
        print("\033[91mError:\033[0m Ipsec not available.")
        return

    with open(IPSEC_CONF_FILE, 'r') as f:
        ipsec_content = f.read()

    conn_block = re.search(r"(conn eoip_eoipir1.*?)(?=conn|\Z)", ipsec_content, re.DOTALL)
    if conn_block:
        conn_block_content = conn_block.group(1)

        conn_block_content = re.sub(r"leftid=\S+", f"leftid={new_ip}", conn_block_content)
        conn_block_content = re.sub(r"leftsubnet=\S+", f"leftsubnet={new_ip}/64", conn_block_content)

        conn_block_content = re.sub(r"right=\S+", f"right={opposite_ip}", conn_block_content)
        conn_block_content = re.sub(r"rightsubnet=\S+", f"rightsubnet={opposite_ip}/64", conn_block_content)

        ipsec_content = ipsec_content.replace(conn_block.group(1), conn_block_content)

        with open(IPSEC_CONF_FILE, 'w') as f:
            f.write(ipsec_content)

    if not os.path.exists(IPSEC_SECRETS_FILE):
        print("\033[91mError:\033[0m PSK not available.")
        return

    with open(IPSEC_SECRETS_FILE, 'r') as f:
        secrets_content = f.read()

    updated_secrets = re.sub(r"(\S+) (\S+) : PSK ", f"{opposite_ip} {new_ip} : PSK ", secrets_content)

    with open(IPSEC_SECRETS_FILE, 'w') as f:
        f.write(updated_secrets)

def update_ipsec_conf_and_secrets_ir2(new_ip):
    opposite_ip = calculate_opposite_ip(new_ip)

    if not os.path.exists(IPSEC_CONF_FILE):
        print("\033[91mError:\033[0m Ipsec not available.")
        return

    with open(IPSEC_CONF_FILE, 'r') as f:
        ipsec_content = f.read()

    conn_block = re.search(r"(conn eoip_eoipir2.*?)(?=conn|\Z)", ipsec_content, re.DOTALL)
    if conn_block:
        conn_block_content = conn_block.group(1)

        conn_block_content = re.sub(r"leftid=\S+", f"leftid={new_ip}", conn_block_content)
        conn_block_content = re.sub(r"leftsubnet=\S+", f"leftsubnet={new_ip}/64", conn_block_content)

        conn_block_content = re.sub(r"right=\S+", f"right={opposite_ip}", conn_block_content)
        conn_block_content = re.sub(r"rightsubnet=\S+", f"rightsubnet={opposite_ip}/64", conn_block_content)

        ipsec_content = ipsec_content.replace(conn_block.group(1), conn_block_content)

        with open(IPSEC_CONF_FILE, 'w') as f:
            f.write(ipsec_content)

    if not os.path.exists(IPSEC_SECRETS_FILE):
        print("\033[91mError:\033[0m PSK not available.")
        return

    with open(IPSEC_SECRETS_FILE, 'r') as f:
        secrets_content = f.read()

    updated_secrets = re.sub(r"(\S+) (\S+) : PSK ", f"{opposite_ip} {new_ip} : PSK ", secrets_content)

    with open(IPSEC_SECRETS_FILE, 'w') as f:
        f.write(updated_secrets)

def update_ipsec_conf_and_secrets_ir3(new_ip):
    opposite_ip = calculate_opposite_ip(new_ip)

    if not os.path.exists(IPSEC_CONF_FILE):
        print("\033[91mError:\033[0m Ipsec not available.")
        return

    with open(IPSEC_CONF_FILE, 'r') as f:
        ipsec_content = f.read()

    conn_block = re.search(r"(conn eoip_eoipir3.*?)(?=conn|\Z)", ipsec_content, re.DOTALL)
    if conn_block:
        conn_block_content = conn_block.group(1)

        conn_block_content = re.sub(r"leftid=\S+", f"leftid={new_ip}", conn_block_content)
        conn_block_content = re.sub(r"leftsubnet=\S+", f"leftsubnet={new_ip}/64", conn_block_content)

        conn_block_content = re.sub(r"right=\S+", f"right={opposite_ip}", conn_block_content)
        conn_block_content = re.sub(r"rightsubnet=\S+", f"rightsubnet={opposite_ip}/64", conn_block_content)

        ipsec_content = ipsec_content.replace(conn_block.group(1), conn_block_content)

        with open(IPSEC_CONF_FILE, 'w') as f:
            f.write(ipsec_content)

    if not os.path.exists(IPSEC_SECRETS_FILE):
        print("\033[91mError:\033[0m PSK not available.")
        return

    with open(IPSEC_SECRETS_FILE, 'r') as f:
        secrets_content = f.read()

    updated_secrets = re.sub(r"(\S+) (\S+) : PSK ", f"{opposite_ip} {new_ip} : PSK ", secrets_content)

    with open(IPSEC_SECRETS_FILE, 'w') as f:
        f.write(updated_secrets)

def update_ipsec_conf_and_secrets_ir4(new_ip):
    opposite_ip = calculate_opposite_ip(new_ip)

    if not os.path.exists(IPSEC_CONF_FILE):
        print("\033[91mError:\033[0m Ipsec not available.")
        return

    with open(IPSEC_CONF_FILE, 'r') as f:
        ipsec_content = f.read()

    conn_block = re.search(r"(conn eoip_eoipir4.*?)(?=conn|\Z)", ipsec_content, re.DOTALL)
    if conn_block:
        conn_block_content = conn_block.group(1)

        conn_block_content = re.sub(r"leftid=\S+", f"leftid={new_ip}", conn_block_content)
        conn_block_content = re.sub(r"leftsubnet=\S+", f"leftsubnet={new_ip}/64", conn_block_content)

        conn_block_content = re.sub(r"right=\S+", f"right={opposite_ip}", conn_block_content)
        conn_block_content = re.sub(r"rightsubnet=\S+", f"rightsubnet={opposite_ip}/64", conn_block_content)

        ipsec_content = ipsec_content.replace(conn_block.group(1), conn_block_content)

        with open(IPSEC_CONF_FILE, 'w') as f:
            f.write(ipsec_content)

    if not os.path.exists(IPSEC_SECRETS_FILE):
        print("\033[91mError:\033[0m PSK not available.")
        return

    with open(IPSEC_SECRETS_FILE, 'r') as f:
        secrets_content = f.read()

    updated_secrets = re.sub(r"(\S+) (\S+) : PSK ", f"{opposite_ip} {new_ip} : PSK ", secrets_content)

    with open(IPSEC_SECRETS_FILE, 'w') as f:
        f.write(updated_secrets)

def update_ipsec_conf_and_secrets_ir5(new_ip):
    opposite_ip = calculate_opposite_ip(new_ip)

    if not os.path.exists(IPSEC_CONF_FILE):
        print("\033[91mError:\033[0m Ipsec not available.")
        return

    with open(IPSEC_CONF_FILE, 'r') as f:
        ipsec_content = f.read()

    conn_block = re.search(r"(conn eoip_eoipir5.*?)(?=conn|\Z)", ipsec_content, re.DOTALL)
    if conn_block:
        conn_block_content = conn_block.group(1)

        conn_block_content = re.sub(r"leftid=\S+", f"leftid={new_ip}", conn_block_content)
        conn_block_content = re.sub(r"leftsubnet=\S+", f"leftsubnet={new_ip}/64", conn_block_content)

        conn_block_content = re.sub(r"right=\S+", f"right={opposite_ip}", conn_block_content)
        conn_block_content = re.sub(r"rightsubnet=\S+", f"rightsubnet={opposite_ip}/64", conn_block_content)

        ipsec_content = ipsec_content.replace(conn_block.group(1), conn_block_content)

        with open(IPSEC_CONF_FILE, 'w') as f:
            f.write(ipsec_content)

    if not os.path.exists(IPSEC_SECRETS_FILE):
        print("\033[91mError:\033[0m PSK not available.")
        return

    with open(IPSEC_SECRETS_FILE, 'r') as f:
        secrets_content = f.read()

    updated_secrets = re.sub(r"(\S+) (\S+) : PSK ", f"{opposite_ip} {new_ip} : PSK ", secrets_content)

    with open(IPSEC_SECRETS_FILE, 'w') as f:
        f.write(updated_secrets)

def update_private_ip_kh1(new_ip):
    try:
        ip = ipaddress.ip_address(new_ip)
        if ip.version == 4:
            cidr = 24
        elif ip.version == 6:
            cidr = 64
        else:
            raise ValueError("unsupported IP")
    except ValueError as e:
        print(f"Wrong IP address: {e}")
        return

    with open(PRIVATE_IP_FILE1, 'r') as f:
        content = f.read()

    updated_content = re.sub(r"ip addr add \S+/\d+", f"ip addr add {new_ip}/{cidr}", content)
    
    with open(PRIVATE_IP_FILE1, 'w') as f:
        f.write(updated_content)

    update_ping_script(new_ip, PING_SCRIPT_PATH1)
    restart_ping_service(SERVICE_FILE_PING1)
    update_ipsec_conf_and_secrets_kh1(new_ip)

def update_ping_script(new_ip, ping_script_path):
    opposite_ip = calculate_opposite_ip(new_ip)
    script_content = f"""#!/bin/bash
ip_address="{opposite_ip}"
max_pings=5
interval=2
while true
do
    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" '{{{{print $2}}}}' | awk '{{{{print $1}}}}' | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done
    echo "Waiting for $interval seconds..."
    sleep $interval
done
"""
    with open(ping_script_path, "w") as script_file:
        script_file.write(script_content)

    os.chmod(ping_script_path, 0o755)


def restart_ping_service(service_file):
    if not os.path.exists(service_file):
        print(f"\033[91mError:\033[0m {service_file} does not exist. Exiting...")
        return
    
    subprocess.run(['systemctl', 'daemon-reload'])
    subprocess.run(['systemctl', 'restart', os.path.basename(service_file)])

def update_private_ip_kh2(new_ip):
    try:
        ip = ipaddress.ip_address(new_ip)
        if ip.version == 4:
            cidr = 24
        elif ip.version == 6:
            cidr = 64
        else:
            raise ValueError("unsupported IP")
    except ValueError as e:
        print(f"Wrong IP address: {e}")
        return

    with open(PRIVATE_IP_FILE2, 'r') as f:
        content = f.read()

    updated_content = re.sub(r"ip addr add \S+/\d+", f"ip addr add {new_ip}/{cidr}", content)
    
    with open(PRIVATE_IP_FILE2, 'w') as f:
        f.write(updated_content)

    update_ping_script(new_ip, PING_SCRIPT_PATH2)
    restart_ping_service(SERVICE_FILE_PING2)
    update_ipsec_conf_and_secrets_kh2(new_ip)


def update_private_ip_kh3(new_ip):
    try:
        ip = ipaddress.ip_address(new_ip)
        if ip.version == 4:
            cidr = 24
        elif ip.version == 6:
            cidr = 64
        else:
            raise ValueError("unsupported IP")
    except ValueError as e:
        print(f"Wrong IP address: {e}")
        return
    
    with open(PRIVATE_IP_FILE3, 'r') as f:
        content = f.read()

    updated_content = re.sub(r"ip addr add \S+/\d+", f"ip addr add {new_ip}/{cidr}", content)
    with open(PRIVATE_IP_FILE3, 'w') as f:
        f.write(updated_content)

    update_ping_script(new_ip, PING_SCRIPT_PATH3)

    restart_ping_service(SERVICE_FILE_PING3)

    update_ipsec_conf_and_secrets_kh3(new_ip)

def update_private_ip_kh4(new_ip):
    try:
        ip = ipaddress.ip_address(new_ip)
        if ip.version == 4:
            cidr = 24
        elif ip.version == 6:
            cidr = 64
        else:
            raise ValueError("unsupported IP")
    except ValueError as e:
        print(f"Wrong IP address: {e}")
        return
    
    with open(PRIVATE_IP_FILE4, 'r') as f:
        content = f.read()

    updated_content = re.sub(r"ip addr add \S+/\d+", f"ip addr add {new_ip}/{cidr}", content)
    with open(PRIVATE_IP_FILE4, 'w') as f:
        f.write(updated_content)

    update_ping_script(new_ip, PING_SCRIPT_PATH4)

    restart_ping_service(SERVICE_FILE_PING4)

    update_ipsec_conf_and_secrets_kh4(new_ip)

def update_private_ip_kh5(new_ip):
    try:
        ip = ipaddress.ip_address(new_ip)
        if ip.version == 4:
            cidr = 24
        elif ip.version == 6:
            cidr = 64
        else:
            raise ValueError("unsupported IP")
    except ValueError as e:
        print(f"Wrong IP address: {e}")
        return
    
    with open(PRIVATE_IP_FILE5, 'r') as f:
        content = f.read()

    updated_content = re.sub(r"ip addr add \S+/\d+", f"ip addr add {new_ip}/{cidr}", content)
    with open(PRIVATE_IP_FILE5, 'w') as f:
        f.write(updated_content)

    update_ping_script(new_ip, PING_SCRIPT_PATH5)

    restart_ping_service(SERVICE_FILE_PING5)

    update_ipsec_conf_and_secrets_kh5(new_ip)

def update_private_ip_ir1(new_ip):
    try:
        ip = ipaddress.ip_address(new_ip)
        if ip.version == 4:
            cidr = 24
        elif ip.version == 6:
            cidr = 64
        else:
            raise ValueError("unsupported IP")
    except ValueError as e:
        print(f"Wrong IP address: {e}")
        return
    
    with open(PRIVATE_IP_FILE1, 'r') as f:
        content = f.read()

    updated_content = re.sub(r"ip addr add \S+/\d+", f"ip addr add {new_ip}/{cidr}", content)
    with open(PRIVATE_IP_FILE1, 'w') as f:
        f.write(updated_content)

    update_ping_script(new_ip, PING_SCRIPT_PATH1)

    restart_ping_service(SERVICE_FILE_PING1)

    update_ipsec_conf_and_secrets_ir1(new_ip)

def update_private_ip_ir2(new_ip):
    try:
        ip = ipaddress.ip_address(new_ip)
        if ip.version == 4:
            cidr = 24
        elif ip.version == 6:
            cidr = 64
        else:
            raise ValueError("unsupported IP")
    except ValueError as e:
        print(f"Wrong IP address: {e}")
        return
    
    with open(PRIVATE_IP_FILE2, 'r') as f:
        content = f.read()

    updated_content = re.sub(r"ip addr add \S+/\d+", f"ip addr add {new_ip}/{cidr}", content)
    with open(PRIVATE_IP_FILE2, 'w') as f:
        f.write(updated_content)

    update_ping_script(new_ip, PING_SCRIPT_PATH2)

    restart_ping_service(SERVICE_FILE_PING2)

    update_ipsec_conf_and_secrets_ir2(new_ip)

def update_private_ip_ir3(new_ip):
    try:
        ip = ipaddress.ip_address(new_ip)
        if ip.version == 4:
            cidr = 24
        elif ip.version == 6:
            cidr = 64
        else:
            raise ValueError("unsupported IP")
    except ValueError as e:
        print(f"Wrong IP address: {e}")
        return
    
    with open(PRIVATE_IP_FILE3, 'r') as f:
        content = f.read()

    updated_content = re.sub(r"ip addr add \S+/\d+", f"ip addr add {new_ip}/{cidr}", content)
    with open(PRIVATE_IP_FILE3, 'w') as f:
        f.write(updated_content)

    update_ping_script(new_ip, PING_SCRIPT_PATH3)

    restart_ping_service(SERVICE_FILE_PING3)

    update_ipsec_conf_and_secrets_ir3(new_ip)

def update_private_ip_ir4(new_ip):
    try:
        ip = ipaddress.ip_address(new_ip)
        if ip.version == 4:
            cidr = 24
        elif ip.version == 6:
            cidr = 64
        else:
            raise ValueError("unsupported IP")
    except ValueError as e:
        print(f"Wrong IP address: {e}")
        return
    
    with open(PRIVATE_IP_FILE4, 'r') as f:
        content = f.read()

    updated_content = re.sub(r"ip addr add \S+/\d+", f"ip addr add {new_ip}/{cidr}", content)
    with open(PRIVATE_IP_FILE4, 'w') as f:
        f.write(updated_content)

    update_ping_script(new_ip, PING_SCRIPT_PATH4)

    restart_ping_service(SERVICE_FILE_PING4)

    update_ipsec_conf_and_secrets_ir4(new_ip)


def update_private_ip_ir5(new_ip):
    try:
        ip = ipaddress.ip_address(new_ip)
        if ip.version == 4:
            cidr = 24
        elif ip.version == 6:
            cidr = 64
        else:
            raise ValueError("unsupported IP")
    except ValueError as e:
        print(f"Wrong IP address: {e}")
        return
    
    with open(PRIVATE_IP_FILE5, 'r') as f:
        content = f.read()

    updated_content = re.sub(r"ip addr add \S+/\d+", f"ip addr add {new_ip}/{cidr}", content)
    with open(PRIVATE_IP_FILE5, 'w') as f:
        f.write(updated_content)

    update_ping_script(new_ip, PING_SCRIPT_PATH5)

    restart_ping_service(SERVICE_FILE_PING5)

    update_ipsec_conf_and_secrets_ir5(new_ip)

def save_and_restart_services_kharej1():
    subprocess.run(['systemctl', 'daemon-reload'])
    subprocess.run(['systemctl', 'restart', 'eoip_kharej_1'])
    subprocess.run(['systemctl', 'restart', 'eoip_additional_kharej_1'])
    subprocess.run(['systemctl', 'restart', 'ping_eoip_1'])
    subprocess.run(['systemctl', 'restart', 'strong-azumi1'])

def save_and_restart_services_kharej2():
    subprocess.run(['systemctl', 'daemon-reload'])
    subprocess.run(['systemctl', 'restart', 'eoip_kharej_2'])
    subprocess.run(['systemctl', 'restart', 'eoip_additional_kharej_2'])
    subprocess.run(['systemctl', 'restart', 'ping_eoip_2'])
    subprocess.run(['systemctl', 'restart', 'strong-azumi1'])

def save_and_restart_services_kharej3():
    subprocess.run(['systemctl', 'daemon-reload'])
    subprocess.run(['systemctl', 'restart', 'eoip_kharej_3'])
    subprocess.run(['systemctl', 'restart', 'eoip_additional_kharej_3'])
    subprocess.run(['systemctl', 'restart', 'ping_eoip_3'])
    subprocess.run(['systemctl', 'restart', 'strong-azumi1'])

def save_and_restart_services_kharej4():
    subprocess.run(['systemctl', 'daemon-reload'])
    subprocess.run(['systemctl', 'restart', 'eoip_kharej_4'])
    subprocess.run(['systemctl', 'restart', 'eoip_additional_kharej_4'])
    subprocess.run(['systemctl', 'restart', 'ping_eoip_4'])
    subprocess.run(['systemctl', 'restart', 'strong-azumi1'])

def save_and_restart_services_kharej5():
    subprocess.run(['systemctl', 'daemon-reload'])
    subprocess.run(['systemctl', 'restart', 'eoip_kharej_5'])
    subprocess.run(['systemctl', 'restart', 'eoip_additional_kharej_5'])
    subprocess.run(['systemctl', 'restart', 'ping_eoip_5'])
    subprocess.run(['systemctl', 'restart', 'strong-azumi1'])

def save_and_restart_services_iran1():
    subprocess.run(['systemctl', 'daemon-reload'])
    subprocess.run(['systemctl', 'restart', 'eoip_iran_1'])
    subprocess.run(['systemctl', 'restart', 'additional_irancmd_1'])
    subprocess.run(['systemctl', 'restart', 'ping_eoip_1'])
    subprocess.run(['systemctl', 'restart', 'strong-azumi1'])

def save_and_restart_services_iran2():
    subprocess.run(['systemctl', 'daemon-reload'])
    subprocess.run(['systemctl', 'restart', 'eoip_iran_2'])
    subprocess.run(['systemctl', 'restart', 'additional_irancmd_2'])
    subprocess.run(['systemctl', 'restart', 'ping_eoip_2'])
    subprocess.run(['systemctl', 'restart', 'strong-azumi1'])

def save_and_restart_services_iran3():
    subprocess.run(['systemctl', 'daemon-reload'])
    subprocess.run(['systemctl', 'restart', 'eoip_iran_3'])
    subprocess.run(['systemctl', 'restart', 'additional_irancmd_3'])
    subprocess.run(['systemctl', 'restart', 'ping_eoip_3'])
    subprocess.run(['systemctl', 'restart', 'strong-azumi1'])

def save_and_restart_services_iran4():
    subprocess.run(['systemctl', 'daemon-reload'])
    subprocess.run(['systemctl', 'restart', 'eoip_iran_4'])
    subprocess.run(['systemctl', 'restart', 'additional_irancmd_4'])
    subprocess.run(['systemctl', 'restart', 'ping_eoip_4'])
    subprocess.run(['systemctl', 'restart', 'strong-azumi1'])

def save_and_restart_services_iran5():
    subprocess.run(['systemctl', 'daemon-reload'])
    subprocess.run(['systemctl', 'restart', 'eoip_iran_5'])
    subprocess.run(['systemctl', 'restart', 'additional_irancmd_5'])
    subprocess.run(['systemctl', 'restart', 'ping_eoip_5'])
    subprocess.run(['systemctl', 'restart', 'strong-azumi1'])

def display_status_box_kharej1():
    os.system("clear")
    local_ip, remote_ip = extract_ips(SERVICE_FILE_KHAREJ1)
    private_ip = extract_private_ip1()
    left_ip, right_ip, secret_key = extract_ipsec_secrets()
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print("\033[92m(   ) \033[92mEOIP\033[93m Kharej [1] Menu\033[0m")
    print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
    print("\033[93m╭─────────\033[97mCurrent Config\033[93m──────────────╮\033[0m")
    print(f"\033[93mKharej IP: \033[97m {local_ip}\033[0m")
    print(f"\033[93mIRAN IP:   \033[97m {remote_ip}\033[0m")
    print(f"\033[93mPrivate IP:\033[97m {private_ip}\033[0m")
    if left_ip and right_ip:
        print(f"\033[93mPSK:  \033[97m\"{secret_key}\"\033[0m")
    else:
        print("\033[91mPSK information not available.\033[0m")
    print("\033[93m╰─────────────────────────────────────╯\033[0m")

def display_status_box_kharej2():
    os.system("clear")
    local_ip, remote_ip = extract_ips(SERVICE_FILE_KHAREJ2)
    private_ip = extract_private_ip2()
    left_ip, right_ip, secret_key = extract_ipsec_secrets()
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print("\033[92m(   ) \033[92mEOIP\033[93m Kharej [2] Menu\033[0m")
    print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
    print("\033[93m╭─────────\033[97mCurrent Config\033[93m──────────────╮\033[0m")
    print(f"\033[93mKharej IP: \033[97m {local_ip}\033[0m")
    print(f"\033[93mIRAN IP:   \033[97m {remote_ip}\033[0m")
    print(f"\033[93mPrivate IP:\033[97m {private_ip}\033[0m")
    if left_ip and right_ip:
        print(f"\033[93mPSK:  \033[97m\"{secret_key}\"\033[0m")
    else:
        print("\033[91mPSK information not available.\033[0m")
    print("\033[93m╰─────────────────────────────────────╯\033[0m")

def display_status_box_kharej3():
    os.system("clear")
    local_ip, remote_ip = extract_ips(SERVICE_FILE_KHAREJ3)
    private_ip = extract_private_ip3()
    left_ip, right_ip, secret_key = extract_ipsec_secrets()
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print("\033[92m(   ) \033[92mEOIP\033[93m Kharej [3] Menu\033[0m")
    print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
    print("\033[93m╭─────────\033[97mCurrent Config\033[93m──────────────╮\033[0m")
    print(f"\033[93mKharej IP:   \033[97m {local_ip}\033[0m")
    print(f"\033[93mIRAN IP:     \033[97m {remote_ip}\033[0m")
    print(f"\033[93mPrivate IP:  \033[97m {private_ip}\033[0m")
    if left_ip and right_ip:
        print(f"\033[93mPSK:    \033[97m\"{secret_key}\"\033[0m")
    else:
        print("\033[91mPSK information not available.\033[0m")
    print("\033[93m╰─────────────────────────────────────╯\033[0m")

def display_status_box_kharej4():
    os.system("clear")
    local_ip, remote_ip = extract_ips(SERVICE_FILE_KHAREJ4)
    private_ip = extract_private_ip4()
    left_ip, right_ip, secret_key = extract_ipsec_secrets()
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print("\033[92m(   ) \033[92mEOIP\033[93m Kharej [4] Menu\033[0m")
    print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
    print("\033[93m╭─────────\033[97mCurrent Config\033[93m──────────────╮\033[0m")
    print(f"\033[93mKharej IP:   \033[97m {local_ip}\033[0m")
    print(f"\033[93mIRAN IP:     \033[97m {remote_ip}\033[0m")
    print(f"\033[93mPrivate IP:  \033[97m {private_ip}\033[0m")
    if left_ip and right_ip:
        print(f"\033[93mPSK:    \033[97m\"{secret_key}\"\033[0m")
    else:
        print("\033[91mPSK information not available.\033[0m")
    print("\033[93m╰─────────────────────────────────────╯\033[0m")

def display_status_box_kharej5():
    os.system("clear")
    local_ip, remote_ip = extract_ips(SERVICE_FILE_KHAREJ5)
    private_ip = extract_private_ip5()
    left_ip, right_ip, secret_key = extract_ipsec_secrets()
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print("\033[92m(   ) \033[92mEOIP\033[93m Kharej [5] Menu\033[0m")
    print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
    print("\033[93m╭─────────\033[97mCurrent Config\033[93m──────────────╮\033[0m")
    print(f"\033[93mKharej IP:   \033[97m {local_ip}\033[0m")
    print(f"\033[93mIRAN IP:     \033[97m {remote_ip}\033[0m")
    print(f"\033[93mPrivate IP:  \033[97m {private_ip}\033[0m")
    if left_ip and right_ip:
        print(f"\033[93mPSK:    \033[97m\"{secret_key}\"\033[0m")
    else:
        print("\033[91mPSK information not available.\033[0m")
    print("\033[93m╰─────────────────────────────────────╯\033[0m")

def display_status_box_iran1():
    os.system("clear")
    local_ip, remote_ip = extract_ips(SERVICE_FILE_IRAN1)
    private_ip = extract_private_ip1()
    left_ip, right_ip, secret_key = extract_ipsec_secrets()
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print("\033[92m(   ) \033[92mEOIP\033[93m IRAN [1] Menu\033[0m")
    print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
    print("\033[93m╭─────────\033[97mCurrent Config\033[93m──────────────╮\033[0m")
    print(f"\033[93mIRAN IP:   \033[97m {local_ip}\033[0m")
    print(f"\033[93mKharej IP: \033[97m {remote_ip}\033[0m")
    print(f"\033[93mPrivate IP:\033[97m {private_ip}\033[0m")
    if left_ip and right_ip:
        print(f"\033[93mPSK:  \033[97m\"{secret_key}\"\033[0m")
    else:
        print("\033[91mPSK information not available.\033[0m")
    print("\033[93m╰─────────────────────────────────────╯\033[0m")

def display_status_box_iran2():
    os.system("clear")
    local_ip, remote_ip = extract_ips(SERVICE_FILE_IRAN2)
    private_ip = extract_private_ip2()
    left_ip, right_ip, secret_key = extract_ipsec_secrets()
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print("\033[92m(   ) \033[92mEOIP\033[93m IRAN [2] Menu\033[0m")
    print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
    print("\033[93m╭─────────\033[97mCurrent Config\033[93m──────────────╮\033[0m")
    print(f"\033[93mIRAN IP:   \033[97m   {local_ip}\033[0m")
    print(f"\033[93mKharej IP: \033[97m   {remote_ip}\033[0m")
    print(f"\033[93mPrivate IP:\033[97m   {private_ip}\033[0m")
    if left_ip and right_ip:
        print(f"\033[93mPSK:   \033[97m \"{secret_key}\"\033[0m")
    else:
        print("\033[91mPSK information not available.\033[0m")
    print("\033[93m╰─────────────────────────────────────╯\033[0m")

def display_status_box_iran3():
    os.system("clear")
    local_ip, remote_ip = extract_ips(SERVICE_FILE_IRAN3)
    private_ip = extract_private_ip3()
    left_ip, right_ip, secret_key = extract_ipsec_secrets()
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print("\033[92m(   ) \033[92mEOIP\033[93m IRAN [3] Menu\033[0m")
    print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
    print("\033[93m╭─────────\033[97mCurrent Config\033[93m──────────────╮\033[0m")
    print(f"\033[93mIRAN IP:   \033[97m   {local_ip}\033[0m")
    print(f"\033[93mKharej IP: \033[97m   {remote_ip}\033[0m")
    print(f"\033[93mPrivate IP:\033[97m   {private_ip}\033[0m")
    if left_ip and right_ip:
        print(f"\033[93mPSK:   \033[97m \"{secret_key}\"\033[0m")
    else:
        print("\033[91mPSK information not available.\033[0m")
    print("\033[93m╰─────────────────────────────────────╯\033[0m")

def display_status_box_iran4():
    os.system("clear")
    local_ip, remote_ip = extract_ips(SERVICE_FILE_IRAN4)
    private_ip = extract_private_ip4()
    left_ip, right_ip, secret_key = extract_ipsec_secrets()
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print("\033[92m(   ) \033[92mEOIP\033[93m IRAN [4] Menu\033[0m")
    print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
    print("\033[93m╭─────────\033[97mCurrent Config\033[93m──────────────╮\033[0m")
    print(f"\033[93mIRAN IP:   \033[97m {local_ip}\033[0m")
    print(f"\033[93mKharej IP: \033[97m {remote_ip}\033[0m")
    print(f"\033[93mPrivate IP:\033[97m {private_ip}\033[0m")
    if left_ip and right_ip:
        print(f"\033[93mPSK:  \033[97m\"{secret_key}\"\033[0m")
    else:
        print("\033[91mPSK information not available.\033[0m")
    print("\033[93m╰─────────────────────────────────────╯\033[0m")

def display_status_box_iran5():
    os.system("clear")
    local_ip, remote_ip = extract_ips(SERVICE_FILE_IRAN5)
    private_ip = extract_private_ip5()
    left_ip, right_ip, secret_key = extract_ipsec_secrets()
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print("\033[92m(   ) \033[92mEOIP\033[93m IRAN [5] Menu\033[0m")
    print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
    print("\033[93m╭─────────\033[97mCurrent Config\033[93m──────────────╮\033[0m")
    print(f"\033[93mIRAN IP:   \033[97m {local_ip}\033[0m")
    print(f"\033[93mKharej IP: \033[97m {remote_ip}\033[0m")
    print(f"\033[93mPrivate IP:\033[97m {private_ip}\033[0m")
    if left_ip and right_ip:
        print(f"\033[93mPSK:  \033[97m\"{secret_key}\"\033[0m")
    else:
        print("\033[91mPSK information not available.\033[0m")
    print("\033[93m╰─────────────────────────────────────╯\033[0m")

def update_service_file(service_file, ip_type, new_ip):
    with open(service_file, 'r') as f:
        content = f.read()
    updated_content = re.sub(fr"{ip_type} \S+", f"{ip_type} {new_ip}", content)
    with open(service_file, 'w') as f:
        f.write(updated_content)

def edit_local_eoip_kharej1():
    """Allows the user to edit the Kharej1 EOIP configuration."""
    while True:
        display_status_box_kharej1()
        print("\033[93m───────────────────────────────────────\033[0m")
        print("1.\033[93m Change \033[92mKharej [1]\033[93m IP\033[0m")
        print("2.\033[93m Change \033[92mIRAN IP\033[0m")
        print("3.\033[93m Change Private IP\033[0m")
        print("4.\033[92m Save and Restart Services\033[0m")
        print("5.\033[97m back to the menu\033[0m")
        print("\033[93m───────────────────────────────────────\033[0m")

        choice = input("Enter your choice: ")

        if choice == '1':
            local_ip, _ = extract_ips(SERVICE_FILE_KHAREJ1)
            print(f"\033[93mCurrent Local IP: \033[97m{local_ip}\033[0m")
            new_local_ip = input("\033[92mEnter New \033[97mKharej [1]\033[92m IP: \033[0m")
            update_service_file(SERVICE_FILE_KHAREJ1, "local", new_local_ip)
        elif choice == '2':
            _, remote_ip = extract_ips(SERVICE_FILE_KHAREJ1)
            print(f"\033[93mCurrent Remote IP: \033[97m{remote_ip}\033[0m")
            new_remote_ip = input("\033[92mEnter New \033[97mIRAN \033[92mIP: \033[0m")
            update_service_file(SERVICE_FILE_KHAREJ1, "remote", new_remote_ip)
        elif choice == '3':
            private_ip = extract_private_ip1()
            print(f"\033[93mCurrent Private IP: \033[97m{private_ip}\033[0m")
            new_private_ip = input("\033[92mEnter new \033[97mPrivate IP\033[92m: \033[0m")
            update_private_ip_kh1(new_private_ip)
        elif choice == '4':
            save_and_restart_services_kharej1()
            print("Changes saved and services restarted.")
        elif choice == '5':
            os.system("clear")
            eoip_edit_5kharej_1iran()
        else:
            print("\033[91mWrong choice. Please try again.\033[0m")

def edit_local_eoip_kharej2():
    while True:
        display_status_box_kharej2()
        print("\033[93m───────────────────────────────────────\033[0m")
        print("1.\033[93m Change \033[92mKharej [2]\033[93m IP\033[0m")
        print("2.\033[93m Change \033[92mIRAN IP\033[0m")
        print("3.\033[93m Change Private IP\033[0m")
        print("4.\033[92m Save and Restart Services\033[0m")
        print("5.\033[97m back to the menu\033[0m")
        print("\033[93m───────────────────────────────────────\033[0m")

        choice = input("Enter your choice: ")

        if choice == '1':
            local_ip, _ = extract_ips(SERVICE_FILE_KHAREJ2)
            print(f"\033[93mCurrent Local IP: \033[97m{local_ip}\033[0m")
            new_local_ip = input("\033[92mEnter New \033[97mKharej [2]\033[92m IP: \033[0m")
            update_service_file(SERVICE_FILE_KHAREJ2, "local", new_local_ip)
        elif choice == '2':
            _, remote_ip = extract_ips(SERVICE_FILE_KHAREJ2)
            print(f"\033[93mCurrent Remote IP: \033[97m{remote_ip}\033[0m")
            new_remote_ip = input("\033[92mEnter New \033[97mIRAN \033[92mIP: \033[0m")
            update_service_file(SERVICE_FILE_KHAREJ2, "remote", new_remote_ip)
        elif choice == '3':
            private_ip = extract_private_ip2()
            print(f"\033[93mCurrent Private IP: \033[97m{private_ip}\033[0m")
            new_private_ip = input("\033[92mEnter new \033[97mPrivate IP\033[92m: \033[0m")
            update_private_ip_kh2(new_private_ip)
        elif choice == '4':
            save_and_restart_services_kharej2()
            print("Changes saved and services restarted.")
        elif choice == '5':
            clear()
            eoip_edit_5kharej_1iran()
        else:
            print("\033[91mWrong choice. Plz try again\033[0m")


def edit_local_eoip_kharej3():
    while True:
        display_status_box_kharej3()
        print("\033[93m───────────────────────────────────────\033[0m")
        print("1.\033[93m Change \033[92mKharej [3]\033[93m IP\033[0m")
        print("2.\033[93m Change \033[92mIRAN IP\033[0m")
        print("3.\033[93m Change Private IP\033[0m")
        print("4.\033[92m Save and Restart Services\033[0m")
        print("5.\033[97m back to the menu\033[0m")
        print("\033[93m───────────────────────────────────────\033[0m")

        choice = input("Enter your choice: ")

        if choice == '1':
            local_ip, _ = extract_ips(SERVICE_FILE_KHAREJ3)
            print(f"\033[93mCurrent Local IP: \033[97m{local_ip}\033[0m")
            new_local_ip = input("\033[92mEnter New \033[97mKharej [3]\033[92m IP: \033[0m")
            update_service_file(SERVICE_FILE_KHAREJ3, "local", new_local_ip)
        elif choice == '2':
            _, remote_ip = extract_ips(SERVICE_FILE_KHAREJ3)
            print(f"\033[93mCurrent Remote IP: \033[97m{remote_ip}\033[0m")
            new_remote_ip = input("\033[92mEnter New \033[97mIRAN \033[92mIP: \033[0m")
            update_service_file(SERVICE_FILE_KHAREJ3, "remote", new_remote_ip)
        elif choice == '3':
            private_ip = extract_private_ip3()
            print(f"\033[93mCurrent Private IP: \033[97m{private_ip}\033[0m")
            new_private_ip = input("\033[92mEnter new \033[97mPrivate IP\033[92m: \033[0m")
            update_private_ip_kh3(new_private_ip)
        elif choice == '4':
            save_and_restart_services_kharej3()
            print("Changes saved and services restarted.")
        elif choice == '5':
            clear()
            eoip_edit_5kharej_1iran()
        else:
            print("\033[91mWrong choice. Plz try again\033[0m")

def edit_local_eoip_kharej4():
    while True:
        display_status_box_kharej4()
        print("\033[93m───────────────────────────────────────\033[0m")
        print("1.\033[93m Change \033[92mKharej [4]\033[93m IP\033[0m")
        print("2.\033[93m Change \033[92mIRAN IP\033[0m")
        print("3.\033[93m Change Private IP\033[0m")
        print("4.\033[92m Save and Restart Services\033[0m")
        print("5.\033[97m back to the menu\033[0m")
        print("\033[93m───────────────────────────────────────\033[0m")

        choice = input("Enter your choice: ")

        if choice == '1':
            local_ip, _ = extract_ips(SERVICE_FILE_KHAREJ4)
            print(f"\033[93mCurrent Local IP: \033[97m{local_ip}\033[0m")
            new_local_ip = input("\033[92mEnter New \033[97mKharej [4]\033[92m IP: \033[0m")
            update_service_file(SERVICE_FILE_KHAREJ4, "local", new_local_ip)
        elif choice == '2':
            _, remote_ip = extract_ips(SERVICE_FILE_KHAREJ4)
            print(f"\033[93mCurrent Remote IP: \033[97m{remote_ip}\033[0m")
            new_remote_ip = input("\033[92mEnter New \033[97mIRAN \033[92mIP: \033[0m")
            update_service_file(SERVICE_FILE_KHAREJ4, "remote", new_remote_ip)
        elif choice == '3':
            private_ip = extract_private_ip4()
            print(f"\033[93mCurrent Private IP: \033[97m{private_ip}\033[0m")
            new_private_ip = input("\033[92mEnter new \033[97mPrivate IP\033[92m: \033[0m")
            update_private_ip_kh4(new_private_ip)
        elif choice == '4':
            save_and_restart_services_kharej4()
            print("Changes saved and services restarted.")
        elif choice == '5':
            clear()
            eoip_edit_5kharej_1iran()
        else:
            print("\033[91mWrong choice. Plz try again\033[0m")

def edit_local_eoip_kharej5():
    while True:
        display_status_box_kharej5()
        print("\033[93m───────────────────────────────────────\033[0m")
        print("1.\033[93m Change \033[92mKharej [5]\033[93m IP\033[0m")
        print("2.\033[93m Change \033[92mIRAN IP\033[0m")
        print("3.\033[93m Change Private IP\033[0m")
        print("4.\033[92m Save and Restart Services\033[0m")
        print("5.\033[97m back to the menu\033[0m")
        print("\033[93m───────────────────────────────────────\033[0m")

        choice = input("Enter your choice: ")

        if choice == '1':
            local_ip, _ = extract_ips(SERVICE_FILE_KHAREJ5)
            print(f"\033[93mCurrent Local IP: \033[97m{local_ip}\033[0m")
            new_local_ip = input("\033[92mEnter New \033[97mKharej [5]\033[92m IP: \033[0m")
            update_service_file(SERVICE_FILE_KHAREJ5, "local", new_local_ip)
        elif choice == '2':
            _, remote_ip = extract_ips(SERVICE_FILE_KHAREJ5)
            print(f"\033[93mCurrent Remote IP: \033[97m{remote_ip}\033[0m")
            new_remote_ip = input("\033[92mEnter New \033[97mIRAN \033[92mIP: \033[0m")
            update_service_file(SERVICE_FILE_KHAREJ5, "remote", new_remote_ip)
        elif choice == '3':
            private_ip = extract_private_ip5()
            print(f"\033[93mCurrent Private IP: \033[97m{private_ip}\033[0m")
            new_private_ip = input("\033[92mEnter new \033[97mPrivate IP\033[92m: \033[0m")
            update_private_ip_kh5(new_private_ip)
        elif choice == '4':
            save_and_restart_services_kharej5()
            print("Changes saved and services restarted.")
        elif choice == '5':
            clear()
            eoip_edit_5kharej_1iran()
        else:
            print("\033[91mWrong choice. Plz try again\033[0m")

def edit_local_eoip_iranconfig1():
    while True:
        display_status_box_iran1()
        print("\033[93m───────────────────────────────────────\033[0m")
        print("1.\033[93m Change \033[92mIRAN\033[93m IP\033[0m")
        print("2.\033[93m Change \033[92mKharej [1] IP\033[0m")
        print("3.\033[93m Change Private IP\033[0m")
        print("4.\033[92m Save and Restart Services\033[0m")
        print("5.\033[97m back to the menu\033[0m")
        print("\033[93m───────────────────────────────────────\033[0m")

        choice = input("Enter your choice: ")

        if choice == '1':
            local_ip, _ = extract_ips(SERVICE_FILE_IRAN1)
            print(f"\033[93mCurrent Local IP: \033[97m{local_ip}\033[0m")
            new_local_ip = input("\033[92mEnter New \033[97mIRAN\033[92m IP: \033[0m")
            update_service_file(SERVICE_FILE_IRAN1, "local", new_local_ip)
        elif choice == '2':
            _, remote_ip = extract_ips(SERVICE_FILE_IRAN1)
            print(f"\033[93mCurrent Remote IP: \033[97m{remote_ip}\033[0m")
            new_remote_ip = input("\033[92mEnter New \033[97mKharej [1] \033[92mIP: \033[0m")
            update_service_file(SERVICE_FILE_IRAN1, "remote", new_remote_ip)
        elif choice == '3':
            private_ip = extract_private_ip1()
            print(f"\033[93mCurrent Private IP: \033[97m{private_ip}\033[0m")
            new_private_ip = input("\033[92mEnter new \033[97mPrivate IP\033[92m: \033[0m")
            update_private_ip_ir1(new_private_ip)
        elif choice == '4':
            save_and_restart_services_iran1()
            print("Changes saved and services restarted.")
        elif choice == '5':
            clear()
            eoip_edit_5kharej_1iran()
        else:
            print("\033[91mWrong choice. Plz try again\033[0m")

def edit_local_eoip_iranconfig2():
    while True:
        display_status_box_iran2()
        print("\033[93m───────────────────────────────────────\033[0m")
        print("1.\033[93m Change \033[92mIRAN\033[93m IP\033[0m")
        print("2.\033[93m Change \033[92mKharej [2] IP\033[0m")
        print("3.\033[93m Change Private IP\033[0m")
        print("4.\033[92m Save and Restart Services\033[0m")
        print("5.\033[97m back to the menu\033[0m")
        print("\033[93m───────────────────────────────────────\033[0m")

        choice = input("Enter your choice: ")

        if choice == '1':
            local_ip, _ = extract_ips(SERVICE_FILE_IRAN2)
            print(f"\033[93mCurrent Local IP: \033[97m{local_ip}\033[0m")
            new_local_ip = input("\033[92mEnter New \033[97mIRAN\033[92m IP: \033[0m")
            update_service_file(SERVICE_FILE_IRAN2, "local", new_local_ip)
        elif choice == '2':
            _, remote_ip = extract_ips(SERVICE_FILE_IRAN2)
            print(f"\033[93mCurrent Remote IP: \033[97m{remote_ip}\033[0m")
            new_remote_ip = input("\033[92mEnter New \033[97mKharej [2] \033[92mIP: \033[0m")
            update_service_file(SERVICE_FILE_IRAN2, "remote", new_remote_ip)
        elif choice == '3':
            private_ip = extract_private_ip2()
            print(f"\033[93mCurrent Private IP: \033[97m{private_ip}\033[0m")
            new_private_ip = input("\033[92mEnter new \033[97mPrivate IP\033[92m: \033[0m")
            update_private_ip_ir2(new_private_ip)
        elif choice == '4':
            save_and_restart_services_iran2()
            print("Changes saved and services restarted.")
        elif choice == '5':
            clear()
            eoip_edit_5kharej_1iran()
        else:
            print("\033[91mWrong choice. Plz try again\033[0m")

def edit_local_eoip_iranconfig3():
    while True:
        display_status_box_iran3()
        print("\033[93m───────────────────────────────────────\033[0m")
        print("1.\033[93m Change \033[92mIRAN\033[93m IP\033[0m")
        print("2.\033[93m Change \033[92mKharej [3] IP\033[0m")
        print("3.\033[93m Change Private IP\033[0m")
        print("4.\033[92m Save and Restart Services\033[0m")
        print("5.\033[97m back to the menu\033[0m")
        print("\033[93m───────────────────────────────────────\033[0m")

        choice = input("Enter your choice: ")

        if choice == '1':
            local_ip, _ = extract_ips(SERVICE_FILE_IRAN3)
            print(f"\033[93mCurrent Local IP: \033[97m{local_ip}\033[0m")
            new_local_ip = input("\033[92mEnter New \033[97mIRAN\033[92m IP: \033[0m")
            update_service_file(SERVICE_FILE_IRAN3, "local", new_local_ip)
        elif choice == '2':
            _, remote_ip = extract_ips(SERVICE_FILE_IRAN3)
            print(f"\033[93mCurrent Remote IP: \033[97m{remote_ip}\033[0m")
            new_remote_ip = input("\033[92mEnter New \033[97mKharej [3] \033[92mIP: \033[0m")
            update_service_file(SERVICE_FILE_IRAN3, "remote", new_remote_ip)
        elif choice == '3':
            private_ip = extract_private_ip3()
            print(f"\033[93mCurrent Private IP: \033[97m{private_ip}\033[0m")
            new_private_ip = input("\033[92mEnter new \033[97mPrivate IP\033[92m: \033[0m")
            update_private_ip_ir3(new_private_ip)
        elif choice == '4':
            save_and_restart_services_iran3()
            print("Changes saved and services restarted.")
        elif choice == '5':
            clear()
            eoip_edit_5kharej_1iran()
        else:
            print("\033[91mWrong choice. Plz try again\033[0m")

def edit_local_eoip_iranconfig4():
    while True:
        display_status_box_iran4()
        print("\033[93m───────────────────────────────────────\033[0m")
        print("1.\033[93m Change \033[92mIRAN\033[93m IP\033[0m")
        print("2.\033[93m Change \033[92mKharej [4] IP\033[0m")
        print("3.\033[93m Change Private IP\033[0m")
        print("4.\033[92m Save and Restart Services\033[0m")
        print("5.\033[97m back to the menu\033[0m")
        print("\033[93m───────────────────────────────────────\033[0m")

        choice = input("Enter your choice: ")

        if choice == '1':
            local_ip, _ = extract_ips(SERVICE_FILE_IRAN4)
            print(f"\033[93mCurrent Local IP: \033[97m{local_ip}\033[0m")
            new_local_ip = input("\033[92mEnter New \033[97mIRAN\033[92m IP: \033[0m")
            update_service_file(SERVICE_FILE_IRAN4, "local", new_local_ip)
        elif choice == '2':
            _, remote_ip = extract_ips(SERVICE_FILE_IRAN4)
            print(f"\033[93mCurrent Remote IP: \033[97m{remote_ip}\033[0m")
            new_remote_ip = input("\033[92mEnter New \033[97mKharej [4] \033[92mIP: \033[0m")
            update_service_file(SERVICE_FILE_IRAN4, "remote", new_remote_ip)
        elif choice == '3':
            private_ip = extract_private_ip4()
            print(f"\033[93mCurrent Private IP: \033[97m{private_ip}\033[0m")
            new_private_ip = input("\033[92mEnter new \033[97mPrivate IP\033[92m: \033[0m")
            update_private_ip_ir4(new_private_ip)
        elif choice == '4':
            save_and_restart_services_iran4()
            print("Changes saved and services restarted.")
        elif choice == '5':
            clear()
            eoip_edit_5kharej_1iran()
        else:
            print("\033[91mWrong choice. Plz try again\033[0m")

def edit_local_eoip_iranconfig5():
    while True:
        display_status_box_iran5()
        print("\033[93m───────────────────────────────────────\033[0m")
        print("1.\033[93m Change \033[92mIRAN\033[93m IP\033[0m")
        print("2.\033[93m Change \033[92mKharej [5] IP\033[0m")
        print("3.\033[93m Change Private IP\033[0m")
        print("4.\033[92m Save and Restart Services\033[0m")
        print("5.\033[97m back to the menu\033[0m")
        print("\033[93m───────────────────────────────────────\033[0m")

        choice = input("Enter your choice: ")

        if choice == '1':
            local_ip, _ = extract_ips(SERVICE_FILE_IRAN5)
            print(f"\033[93mCurrent Local IP: \033[97m{local_ip}\033[0m")
            new_local_ip = input("\033[92mEnter New \033[97mIRAN\033[92m IP: \033[0m")
            update_service_file(SERVICE_FILE_IRAN5, "local", new_local_ip)
        elif choice == '2':
            _, remote_ip = extract_ips(SERVICE_FILE_IRAN5)
            print(f"\033[93mCurrent Remote IP: \033[97m{remote_ip}\033[0m")
            new_remote_ip = input("\033[92mEnter New \033[97mKharej [5] \033[92mIP: \033[0m")
            update_service_file(SERVICE_FILE_IRAN5, "remote", new_remote_ip)
        elif choice == '3':
            private_ip = extract_private_ip5()
            print(f"\033[93mCurrent Private IP: \033[97m{private_ip}\033[0m")
            new_private_ip = input("\033[92mEnter new \033[97mPrivate IP\033[92m: \033[0m")
            update_private_ip_ir5(new_private_ip)
        elif choice == '4':
            save_and_restart_services_iran5()
            print("Changes saved and services restarted.")
        elif choice == '5':
            clear()
            eoip_edit_5kharej_1iran()
        else:
            print("\033[91mWrong choice. Plz try again\033[0m")

def edit_local_eoip_kharejconfig1():
    while True:
        display_status_box_kharej1()
        print("\033[93m───────────────────────────────────────\033[0m")
        print("1.\033[93m Change \033[92mKharej\033[93m IP\033[0m")
        print("2.\033[93m Change \033[92mIRAN [1] IP\033[0m")
        print("3.\033[93m Change Private IP\033[0m")
        print("4.\033[92m Save and Restart Services\033[0m")
        print("5.\033[97m back to the menu\033[0m")
        print("\033[93m───────────────────────────────────────\033[0m")

        choice = input("Enter your choice: ")

        if choice == '1':
            local_ip, _ = extract_ips(SERVICE_FILE_KHAREJ1)
            print(f"\033[93mCurrent Local IP: \033[97m{local_ip}\033[0m")
            new_local_ip = input("\033[92mEnter New \033[97mKharej\033[92m IP: \033[0m")
            update_service_file(SERVICE_FILE_KHAREJ1, "local", new_local_ip)
        elif choice == '2':
            _, remote_ip = extract_ips(SERVICE_FILE_KHAREJ1)
            print(f"\033[93mCurrent Remote IP: \033[97m{remote_ip}\033[0m")
            new_remote_ip = input("\033[92mEnter New \033[97mIRAN [1] \033[92mIP: \033[0m")
            update_service_file(SERVICE_FILE_KHAREJ1, "remote", new_remote_ip)
        elif choice == '3':
            private_ip = extract_private_ip1()
            print(f"\033[93mCurrent Private IP: \033[97m{private_ip}\033[0m")
            new_private_ip = input("\033[92mEnter new \033[97mPrivate IP\033[92m: \033[0m")
            update_private_ip_kh1(new_private_ip)
        elif choice == '4':
            save_and_restart_services_kharej1()
            print("Changes saved and services restarted.")
        elif choice == '5':
            clear()
            eoip_edit_1kharej_5iran()
        else:
            print("\033[91mWrong choice. Plz try again\033[0m")

def edit_local_eoip_kharejconfig2():
    while True:
        display_status_box_kharej2()
        print("\033[93m───────────────────────────────────────\033[0m")
        print("1.\033[93m Change \033[92mKharej\033[93m IP\033[0m")
        print("2.\033[93m Change \033[92mIRAN [2] IP\033[0m")
        print("3.\033[93m Change Private IP\033[0m")
        print("4.\033[92m Save and Restart Services\033[0m")
        print("5.\033[97m back to the menu\033[0m")
        print("\033[93m───────────────────────────────────────\033[0m")

        choice = input("Enter your choice: ")

        if choice == '1':
            local_ip, _ = extract_ips(SERVICE_FILE_KHAREJ2)
            print(f"\033[93mCurrent Local IP: \033[97m{local_ip}\033[0m")
            new_local_ip = input("\033[92mEnter New \033[97mKharej\033[92m IP: \033[0m")
            update_service_file(SERVICE_FILE_KHAREJ2, "local", new_local_ip)
        elif choice == '2':
            _, remote_ip = extract_ips(SERVICE_FILE_KHAREJ2)
            print(f"\033[93mCurrent Remote IP: \033[97m{remote_ip}\033[0m")
            new_remote_ip = input("\033[92mEnter New \033[97mIRAN [2] \033[92mIP: \033[0m")
            update_service_file(SERVICE_FILE_KHAREJ2, "remote", new_remote_ip)
        elif choice == '3':
            private_ip = extract_private_ip2()
            print(f"\033[93mCurrent Private IP: \033[97m{private_ip}\033[0m")
            new_private_ip = input("\033[92mEnter new \033[97mPrivate IP\033[92m: \033[0m")
            update_private_ip_kh2(new_private_ip)
        elif choice == '4':
            save_and_restart_services_kharej2()
            print("Changes saved and services restarted.")
        elif choice == '5':
            clear()
            eoip_edit_1kharej_5iran()
        else:
            print("\033[91mWrong choice. Plz try again\033[0m")

def edit_local_eoip_kharejconfig3():
    while True:
        display_status_box_kharej3()
        print("\033[93m───────────────────────────────────────\033[0m")
        print("1.\033[93m Change \033[92mKharej\033[93m IP\033[0m")
        print("2.\033[93m Change \033[92mIRAN [3] IP\033[0m")
        print("3.\033[93m Change Private IP\033[0m")
        print("4.\033[92m Save and Restart Services\033[0m")
        print("5.\033[97m back to the menu\033[0m")
        print("\033[93m───────────────────────────────────────\033[0m")

        choice = input("Enter your choice: ")

        if choice == '1':
            local_ip, _ = extract_ips(SERVICE_FILE_KHAREJ3)
            print(f"\033[93mCurrent Local IP: \033[97m{local_ip}\033[0m")
            new_local_ip = input("\033[92mEnter New \033[97mKharej\033[92m IP: \033[0m")
            update_service_file(SERVICE_FILE_KHAREJ3, "local", new_local_ip)
        elif choice == '2':
            _, remote_ip = extract_ips(SERVICE_FILE_KHAREJ3)
            print(f"\033[93mCurrent Remote IP: \033[97m{remote_ip}\033[0m")
            new_remote_ip = input("\033[92mEnter New \033[97mIRAN [3] \033[92mIP: \033[0m")
            update_service_file(SERVICE_FILE_KHAREJ3, "remote", new_remote_ip)
        elif choice == '3':
            private_ip = extract_private_ip3()
            print(f"\033[93mCurrent Private IP: \033[97m{private_ip}\033[0m")
            new_private_ip = input("\033[92mEnter new \033[97mPrivate IP\033[92m: \033[0m")
            update_private_ip_kh3(new_private_ip)
        elif choice == '4':
            save_and_restart_services_kharej3()
            print("Changes saved and services restarted.")
        elif choice == '5':
            clear()
            eoip_edit_1kharej_5iran()
        else:
            print("\033[91mWrong choice. Plz try again\033[0m")

def edit_local_eoip_kharejconfig4():
    while True:
        display_status_box_kharej4()
        print("\033[93m───────────────────────────────────────\033[0m")
        print("1.\033[93m Change \033[92mKharej\033[93m IP\033[0m")
        print("2.\033[93m Change \033[92mIRAN [4] IP\033[0m")
        print("3.\033[93m Change Private IP\033[0m")
        print("4.\033[92m Save and Restart Services\033[0m")
        print("5.\033[97m back to the menu\033[0m")
        print("\033[93m───────────────────────────────────────\033[0m")

        choice = input("Enter your choice: ")

        if choice == '1':
            local_ip, _ = extract_ips(SERVICE_FILE_KHAREJ4)
            print(f"\033[93mCurrent Local IP: \033[97m{local_ip}\033[0m")
            new_local_ip = input("\033[92mEnter New \033[97mKharej\033[92m IP: \033[0m")
            update_service_file(SERVICE_FILE_KHAREJ4, "local", new_local_ip)
        elif choice == '2':
            _, remote_ip = extract_ips(SERVICE_FILE_KHAREJ4)
            print(f"\033[93mCurrent Remote IP: \033[97m{remote_ip}\033[0m")
            new_remote_ip = input("\033[92mEnter New \033[97mIRAN [4] \033[92mIP: \033[0m")
            update_service_file(SERVICE_FILE_KHAREJ4, "remote", new_remote_ip)
        elif choice == '3':
            private_ip = extract_private_ip4()
            print(f"\033[93mCurrent Private IP: \033[97m{private_ip}\033[0m")
            new_private_ip = input("\033[92mEnter new \033[97mPrivate IP\033[92m: \033[0m")
            update_private_ip_kh4(new_private_ip)
        elif choice == '4':
            save_and_restart_services_kharej4()
            print("Changes saved and services restarted.")
        elif choice == '5':
            clear()
            eoip_edit_1kharej_5iran()
        else:
            print("\033[91mWrong choice. Plz try again\033[0m")

def edit_local_eoip_kharejconfig5():
    while True:
        display_status_box_kharej5()
        print("\033[93m───────────────────────────────────────\033[0m")
        print("1.\033[93m Change \033[92mKharej\033[93m IP\033[0m")
        print("2.\033[93m Change \033[92mIRAN [5] IP\033[0m")
        print("3.\033[93m Change Private IP\033[0m")
        print("4.\033[92m Save and Restart Services\033[0m")
        print("5.\033[97m back to the menu\033[0m")
        print("\033[93m───────────────────────────────────────\033[0m")

        choice = input("Enter your choice: ")

        if choice == '1':
            local_ip, _ = extract_ips(SERVICE_FILE_KHAREJ5)
            print(f"\033[93mCurrent Local IP: \033[97m{local_ip}\033[0m")
            new_local_ip = input("\033[92mEnter New \033[97mKharej\033[92m IP: \033[0m")
            update_service_file(SERVICE_FILE_KHAREJ5, "local", new_local_ip)
        elif choice == '2':
            _, remote_ip = extract_ips(SERVICE_FILE_KHAREJ5)
            print(f"\033[93mCurrent Remote IP: \033[97m{remote_ip}\033[0m")
            new_remote_ip = input("\033[92mEnter New \033[97mIRAN [5] \033[92mIP: \033[0m")
            update_service_file(SERVICE_FILE_KHAREJ5, "remote", new_remote_ip)
        elif choice == '3':
            private_ip = extract_private_ip5()
            print(f"\033[93mCurrent Private IP: \033[97m{private_ip}\033[0m")
            new_private_ip = input("\033[92mEnter new \033[97mPrivate IP\033[92m: \033[0m")
            update_private_ip_kh5(new_private_ip)
        elif choice == '4':
            save_and_restart_services_kharej5()
            print("Changes saved and services restarted.")
        elif choice == '5':
            clear()
            eoip_edit_1kharej_5iran()
        else:
            print("\033[91mWrong choice. Plz try again\033[0m")

def edit_local_eoip_iran1():
    while True:
        display_status_box_iran1()
        print("\033[93m───────────────────────────────────────\033[0m")
        print("1.\033[93m Change \033[92mIRAN [1]\033[93m IP\033[0m")
        print("2.\033[93m Change \033[92mKharej IP\033[0m")
        print("3.\033[93m Change Private IP\033[0m")
        print("4.\033[92m Save and Restart Services\033[0m")
        print("5.\033[97m back to the menu\033[0m")
        print("\033[93m───────────────────────────────────────\033[0m")

        choice = input("Enter your choice: ")

        if choice == '1':
            local_ip, _ = extract_ips(SERVICE_FILE_IRAN1)
            print(f"\033[93mCurrent Local IP: \033[97m{local_ip}\033[0m")
            new_local_ip = input("\033[92mEnter New \033[97mIRAN [1]\033[92m IP: \033[0m")
            update_service_file(SERVICE_FILE_IRAN1, "local", new_local_ip)
        elif choice == '2':
            _, remote_ip = extract_ips(SERVICE_FILE_IRAN1)
            print(f"\033[93mCurrent Remote IP: \033[97m{remote_ip}\033[0m")
            new_remote_ip = input("\033[92mEnter New \033[97mKharej \033[92mIP: \033[0m")
            update_service_file(SERVICE_FILE_IRAN1, "remote", new_remote_ip)
        elif choice == '3':
            private_ip = extract_private_ip1()
            print(f"\033[93mCurrent Private IP: \033[97m{private_ip}\033[0m")
            new_private_ip = input("\033[92mEnter new \033[97mPrivate IP\033[92m: \033[0m")
            update_private_ip_ir1(new_private_ip)
        elif choice == '4':
            save_and_restart_services_iran1()
            print("Changes saved and services restarted.")
        elif choice == '5':
            clear()
            eoip_edit_1kharej_5iran()
        else:
            print("\033[91mWrong choice. Plz try again\033[0m")

def edit_local_eoip_iran2():
    while True:
        display_status_box_iran2()
        print("\033[93m───────────────────────────────────────\033[0m")
        print("1.\033[93m Change \033[92mIRAN [2]\033[93m IP\033[0m")
        print("2.\033[93m Change \033[92mKharej IP\033[0m")
        print("3.\033[93m Change Private IP\033[0m")
        print("4.\033[92m Save and Restart Services\033[0m")
        print("5.\033[97m back to the menu\033[0m")
        print("\033[93m───────────────────────────────────────\033[0m")

        choice = input("Enter your choice: ")

        if choice == '1':
            local_ip, _ = extract_ips(SERVICE_FILE_IRAN2)
            print(f"\033[93mCurrent Local IP: \033[97m{local_ip}\033[0m")
            new_local_ip = input("\033[92mEnter New \033[97mIRAN [2]\033[92m IP: \033[0m")
            update_service_file(SERVICE_FILE_IRAN2, "local", new_local_ip)
        elif choice == '2':
            _, remote_ip = extract_ips(SERVICE_FILE_IRAN2)
            print(f"\033[93mCurrent Remote IP: \033[97m{remote_ip}\033[0m")
            new_remote_ip = input("\033[92mEnter New \033[97mKharej \033[92mIP: \033[0m")
            update_service_file(SERVICE_FILE_IRAN2, "remote", new_remote_ip)
        elif choice == '3':
            private_ip = extract_private_ip2()
            print(f"\033[93mCurrent Private IP: \033[97m{private_ip}\033[0m")
            new_private_ip = input("\033[92mEnter new \033[97mPrivate IP\033[92m: \033[0m")
            update_private_ip_ir2(new_private_ip)
        elif choice == '4':
            save_and_restart_services_iran2()
            print("Changes saved and services restarted.")
        elif choice == '5':
            clear()
            eoip_edit_1kharej_5iran()
        else:
            print("\033[91mWrong choice. Plz try again\033[0m")

def edit_local_eoip_iran3():
    while True:
        display_status_box_iran3()
        print("\033[93m───────────────────────────────────────\033[0m")
        print("1.\033[93m Change \033[92mIRAN [3]\033[93m IP\033[0m")
        print("2.\033[93m Change \033[92mKharej IP\033[0m")
        print("3.\033[93m Change Private IP\033[0m")
        print("4.\033[92m Save and Restart Services\033[0m")
        print("5.\033[97m back to the menu\033[0m")
        print("\033[93m───────────────────────────────────────\033[0m")

        choice = input("Enter your choice: ")

        if choice == '1':
            local_ip, _ = extract_ips(SERVICE_FILE_IRAN3)
            print(f"\033[93mCurrent Local IP: \033[97m{local_ip}\033[0m")
            new_local_ip = input("\033[92mEnter New \033[97mIRAN [3]\033[92m IP: \033[0m")
            update_service_file(SERVICE_FILE_IRAN3, "local", new_local_ip)
        elif choice == '2':
            _, remote_ip = extract_ips(SERVICE_FILE_IRAN3)
            print(f"\033[93mCurrent Remote IP: \033[97m{remote_ip}\033[0m")
            new_remote_ip = input("\033[92mEnter New \033[97mKharej \033[92mIP: \033[0m")
            update_service_file(SERVICE_FILE_IRAN3, "remote", new_remote_ip)
        elif choice == '3':
            private_ip = extract_private_ip3()
            print(f"\033[93mCurrent Private IP: \033[97m{private_ip}\033[0m")
            new_private_ip = input("\033[92mEnter new \033[97mPrivate IP\033[92m: \033[0m")
            update_private_ip_ir3(new_private_ip)
        elif choice == '4':
            save_and_restart_services_iran3()
            print("Changes saved and services restarted.")
        elif choice == '5':
            clear()
            eoip_edit_1kharej_5iran()
        else:
            print("\033[91mWrong choice. Plz try again\033[0m")

def edit_local_eoip_iran4():
    while True:
        display_status_box_iran4()
        print("\033[93m───────────────────────────────────────\033[0m")
        print("1.\033[93m Change \033[92mIRAN [4]\033[93m IP\033[0m")
        print("2.\033[93m Change \033[92mKharej IP\033[0m")
        print("3.\033[93m Change Private IP\033[0m")
        print("4.\033[92m Save and Restart Services\033[0m")
        print("5.\033[97m back to the menu\033[0m")
        print("\033[93m───────────────────────────────────────\033[0m")

        choice = input("Enter your choice: ")

        if choice == '1':
            local_ip, _ = extract_ips(SERVICE_FILE_IRAN4)
            print(f"\033[93mCurrent Local IP: \033[97m{local_ip}\033[0m")
            new_local_ip = input("\033[92mEnter New \033[97mIRAN [4]\033[92m IP: \033[0m")
            update_service_file(SERVICE_FILE_IRAN4, "local", new_local_ip)
        elif choice == '2':
            _, remote_ip = extract_ips(SERVICE_FILE_IRAN4)
            print(f"\033[93mCurrent Remote IP: \033[97m{remote_ip}\033[0m")
            new_remote_ip = input("\033[92mEnter New \033[97mKharej \033[92mIP: \033[0m")
            update_service_file(SERVICE_FILE_IRAN4, "remote", new_remote_ip)
        elif choice == '3':
            private_ip = extract_private_ip4()
            print(f"\033[93mCurrent Private IP: \033[97m{private_ip}\033[0m")
            new_private_ip = input("\033[92mEnter new \033[97mPrivate IP\033[92m: \033[0m")
            update_private_ip_ir4(new_private_ip)
        elif choice == '4':
            save_and_restart_services_iran4()
            print("Changes saved and services restarted.")
        elif choice == '5':
            clear()
            eoip_edit_1kharej_5iran()
        else:
            print("\033[91mWrong choice. Plz try again\033[0m")

def edit_local_eoip_iran5():
    while True:
        display_status_box_iran5()
        print("\033[93m───────────────────────────────────────\033[0m")
        print("1.\033[93m Change \033[92mIRAN [5]\033[93m IP\033[0m")
        print("2.\033[93m Change \033[92mKharej IP\033[0m")
        print("3.\033[93m Change Private IP\033[0m")
        print("4.\033[92m Save and Restart Services\033[0m")
        print("5.\033[97m back to the menu\033[0m")
        print("\033[93m───────────────────────────────────────\033[0m")

        choice = input("Enter your choice: ")

        if choice == '1':
            local_ip, _ = extract_ips(SERVICE_FILE_IRAN5)
            print(f"\033[93mCurrent Local IP: \033[97m{local_ip}\033[0m")
            new_local_ip = input("\033[92mEnter New \033[97mIRAN [5]\033[92m IP: \033[0m")
            update_service_file(SERVICE_FILE_IRAN5, "local", new_local_ip)
        elif choice == '2':
            _, remote_ip = extract_ips(SERVICE_FILE_IRAN5)
            print(f"\033[93mCurrent Remote IP: \033[97m{remote_ip}\033[0m")
            new_remote_ip = input("\033[92mEnter New \033[97mKharej \033[92mIP: \033[0m")
            update_service_file(SERVICE_FILE_IRAN5, "remote", new_remote_ip)
        elif choice == '3':
            private_ip = extract_private_ip5()
            print(f"\033[93mCurrent Private IP: \033[97m{private_ip}\033[0m")
            new_private_ip = input("\033[92mEnter new \033[97mPrivate IP\033[92m: \033[0m")
            update_private_ip_ir5(new_private_ip)
        elif choice == '4':
            save_and_restart_services_iran5()
            print("Changes saved and services restarted.")
        elif choice == '5':
            clear()
            eoip_edit_1kharej_5iran()
        else:
            print("\033[91mWrong choice. Plz try again\033[0m")


def private_multiedit_local():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print("\033[92m(   ) \033[92mEdit local\033[93m Private Menu\033[0m")
    print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[92mNo IPSEC\033[0m")
    print("2. \033[93mWith IPSEC\033[0m")
    print("3. \033[94mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        choice = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if choice == "1":
            privatenosec_multiedit_local()
            break
        elif choice == "2":
            privatesec_multiedit_local()
            break
        elif choice == "3":
            clear()
            multi_edit_local()
            break
        else:
            print("Invalid choice.")


def privatenosec_multiedit_local():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print("\033[92m(   ) \033[92mEdit local\033[93m Private Menu\033[0m")
    print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[96mKharej\033[92m[10] \033[93mIRAN\033[92m[1]\033[0m")
    print("2. \033[96mKharej\033[92m[1] \033[93mIRAN\033[92m[5]  \033[0m")
    print("3. \033[94mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        choice = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if choice == "1":
            privatenosec_edit_localkharej_multi()
            break
        elif choice == "2":
            privatenosec_edit_localiran_multi()
            break
        elif choice == "3":
            clear()
            private_multiedit_local()
            break
        else:
            print("Invalid choice.")


def privatenosec_edit_localiran_multi():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print(
        "\033[92m(   ) \033[93mPrivate IP \033[92m[5]IRAN\033[96m [1]Kharej\033[93m Menu\033[0m"
    )
    print('\033[92m "-"\033[93m══════════════════════════\033[0m')
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[92mIRAN[1]\033[0m")
    print("2. \033[92mIRAN[2]\033[0m")
    print("3. \033[93mIRAN[3]\033[0m")
    print("4. \033[92mIRAN[4]\033[0m")
    print("5. \033[92mIRAN[5]\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    print("6.\033[93mKharej Menu\033[0m")
    print("0. \033[94mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if server_type == "1":
            iranfive1_editmulti_local()
            break
        elif server_type == "2":
            iranfive2_editmulti_local()
            break
        elif server_type == "3":
            iranfive3_editmulti_local()
            break
        elif server_type == "4":
            iranfive4_editmulti_local()
            break
        elif server_type == "5":
            iranfive5_editmulti_local()
            break
        elif server_type == "6":
            kharejone_editmulti_localmenu()
            break
        elif server_type == "0":
            os.system("clear")
            privatenosec_multiedit_local()
            break
        else:
            print("Invalid choice.")


def kharejone_editmulti_localmenu():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print(
        "\033[92m(   ) \033[93mPrivate IP \033[92m[5]IRAN\033[96m [1]Kharej\033[93m Menu\033[0m"
    )
    print('\033[92m "-"\033[93m══════════════════════════\033[0m')
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[92mServer[1]\033[0m")
    print("2. \033[92mServer[2]\033[0m")
    print("3. \033[93mServer[3]\033[0m")
    print("4. \033[92mServer[4]\033[0m")
    print("5. \033[92mServer[5]\033[0m")
    print("0. \033[94mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if server_type == "1":
            kharejone1_editmulti_local()
            break
        elif server_type == "2":
            kharejone2_editmulti_local()
            break
        elif server_type == "3":
            kharejone3_editmulti_local()
            break
        elif server_type == "4":
            kharejone4_editmulti_local()
            break
        elif server_type == "5":
            kharejone5_editmulti_local()
            break
        elif server_type == "0":
            os.system("clear")
            privatenosec_multiedit_local()
            break
        else:
            print("Invalid choice.")


def privatenosec_edit_localkharej_multi():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print(
        "\033[92m(   ) \033[93mPrivate IP \033[92m[10]Kharej\033[96m [1]IRAN\033[93m Menu\033[0m"
    )
    print('\033[92m "-"\033[93m══════════════════════════\033[0m')
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[92mKharej[1]\033[0m")
    print("2. \033[92mKharej[2]\033[0m")
    print("3. \033[93mKharej[3]\033[0m")
    print("4. \033[92mKharej[4]\033[0m")
    print("5. \033[92mKharej[5]\033[0m")
    print("6. \033[92mKharej[6]\033[0m")
    print("7. \033[92mKharej[7]\033[0m")
    print("8. \033[93mKharej[8]\033[0m")
    print("9. \033[92mKharej[9]\033[0m")
    print("10.\033[92mKharej[10]\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    print("11.\033[93mIRAN Menu\033[0m")
    print("0. \033[94mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if server_type == "1":
            kharej1_editmulti_local()
            break
        elif server_type == "2":
            kharej2_editmulti_local()
            break
        elif server_type == "3":
            kharej3_editmulti_local()
            break
        elif server_type == "4":
            kharej4_editmulti_local()
            break
        elif server_type == "5":
            kharej5_editmulti_local()
            break
        elif server_type == "6":
            kharej6_editmulti_local()
            break
        elif server_type == "7":
            kharej7_editmulti_local()
            break
        elif server_type == "8":
            kharej8_editmulti_local()
            break
        elif server_type == "9":
            kharej9_editmulti_local()
            break
        elif server_type == "10":
            kharej10_editmulti_local()
            break
        elif server_type == "11":
            iran_editmulti_local()
            break
        elif server_type == "0":
            os.system("clear")
            privatenosec_multiedit_local()
            break
        else:
            print("Invalid choice.")


def iran_editmulti_local():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print(
        "\033[92m(   ) \033[93mPrivate IP \033[92m[10]Kharej\033[96m [1]IRAN\033[93m Menu\033[0m"
    )
    print('\033[92m "-"\033[93m══════════════════════════\033[0m')
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[92mServer[1]\033[0m")
    print("2. \033[92mServer[2]\033[0m")
    print("3. \033[93mServer[3]\033[0m")
    print("4. \033[92mServer[4]\033[0m")
    print("5. \033[92mServer[5]\033[0m")
    print("6. \033[92mServer[6]\033[0m")
    print("7. \033[92mServer[7]\033[0m")
    print("8. \033[93mServer[8]\033[0m")
    print("9. \033[92mServer[9]\033[0m")
    print("10.\033[92mServer[10]\033[0m")
    print("0. \033[94mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if server_type == "1":
            ir1_editmulti_local()
            break
        elif server_type == "2":
            ir2_editmulti_local()
            break
        elif server_type == "3":
            ir3_editmulti_local()
            break
        elif server_type == "4":
            ir4_editmulti_local()
            break
        elif server_type == "5":
            ir5_editmulti_local()
            break
        elif server_type == "6":
            ir6_editmulti_local()
            break
        elif server_type == "7":
            ir7_editmulti_local()
            break
        elif server_type == "8":
            ir8_editmulti_local()
            break
        elif server_type == "9":
            ir9_editmulti_local()
            break
        elif server_type == "10":
            ir10_editmulti_local()
            break
        elif server_type == "0":
            os.system("clear")
            privatenosec_multiedit_local()
            break
        else:
            print("Invalid choice.")


# private 1
def clear():
    subprocess.run(["clear"])


def delete_ufw_rules(ip):
    counterpart_ip = wtb_opposite_ip(ip)
    try:
        subprocess.run(["sudo", "ufw", "delete", "allow", "from", ip], check=False)
        subprocess.run(
            ["sudo", "ufw", "delete", "allow", "from", counterpart_ip], check=False
        )
    except subprocess.CalledProcessError as e:
        print(f"\033[91merror deleting UFW rules: {e}\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def wtb_opposite_ip(ip):
    if ":" in ip:  # IPv6
        ip_parts = ip.split(":")
        ip_parts[-1] = "1" if ip_parts[-1] == "2" else "2"
        return ":".join(ip_parts)
    else:  # IPv4
        ip_parts = ip.split(".")
        ip_parts[-1] = "1" if ip_parts[-1] == "2" else "2"
        return ".".join(ip_parts)


def local_ip(name):
    try:
        with open(name, "r") as f:
            content = f.read()
        match = re.search(r"local (\S+)", content)
        if match:
            return match.group(1)
        else:
            print(f"\033[91mno local IP found\033[0m")
    except FileNotFoundError:
        print(f"file {name} doesn't exist")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")
    return None


def update_pingfile_sit(name, new_ip):
    try:
        with open(name, "r") as f:
            content = f.read()

        new_content = re.sub(r'ip_address="[^"]+"', f'ip_address="{new_ip}"', content)

        with open(name, "w") as f:
            f.write(new_content)
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def remote_ip(name):
    try:
        with open(name, "r") as f:
            content = f.read()
        match = re.search(r"remote (\S+)", content)
        if match:
            return match.group(1)
        else:
            print("\033[91mno remote IP found \033[0m")
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")
    return None


def add_ufw_rules(ip):
    counterpart_ip = wtb_opposite_ip(ip)
    try:
        subprocess.run(["sudo", "ufw", "allow", "from", ip], check=True)
        subprocess.run(["sudo", "ufw", "allow", "from", counterpart_ip], check=True)
    except subprocess.CalledProcessError as e:
        print(f"\033[91merror adding UFW rules: {e}\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def display_checkmark(message):
    print("\u2714 " + message)


# different stuff


def display_stuff_privateiran1(local_ip, remote_ip, private_ip):
    lines = [
        f"\033[93mTitle:         SIT Configuration\033[0m",
        f"\033[97m──────────────────────────────────────\033[0m",
        f"\033[93mIRAN Public IP:         \033[97m{local_ip}\033[0m",
        f"\033[92mKharej \033[96m[1]\033[92m Public IP:   \033[97m{remote_ip}\033[0m",
        f"\033[93mSIT Private IP:         \033[97m{private_ip}\033[0m",
    ]
    box_width = 50

    print("\033[93m╭" + "─" * (box_width - 2) + "╮\033[0m")

    for line in lines:
        print(f"\033[93m {line:<{box_width - 4}} \033[0m")

    print("\033[93m╰" + "─" * (box_width - 2) + "╯\033[0m")


def display_stuff_privatekharej1(local_ip, remote_ip, private_ip):
    lines = [
        f"\033[93mTitle:         SIT Configuration\033[0m",
        f"\033[97m──────────────────────────────────────\033[0m",
        f"\033[92mKharej \033[96m[1]\033[92m Public IP:   \033[97m{local_ip}\033[0m",
        f"\033[93mIRAN Public IP:         \033[97m{remote_ip}\033[0m",
        f"\033[93mSIT Private IP:         \033[97m{private_ip}\033[0m",
    ]
    box_width = 50

    print("\033[93m╭" + "─" * (box_width - 2) + "╮\033[0m")

    for line in lines:
        print(f"\033[93m {line:<{box_width - 4}} \033[0m")

    print("\033[93m╰" + "─" * (box_width - 2) + "╯\033[0m")


def private_ip1(name):
    try:
        with open(name, "r") as f:
            content = f.read()
        match = re.search(r"ip (-6 )?addr add (\S+)/64 dev azumi?", content)
        if match:
            return match.group(2)
        else:
            print(f"\033[91mno private IP found\033[0m")
    except FileNotFoundError:
        print(f"file {name} doesn't exist")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")
    return None


def get_current_private_ips1():
    private_ip_private = private_ip1("/etc/private1.sh")

    return {
        "private": private_ip_private,
    }


def update_ipfile_sit1(name, new_ip, update_type):
    try:
        with open(name, "r") as f:
            content = f.read()

        if update_type == "private":
            new_content = re.sub(
                r"ip (-6 )?addr add [^ ]+/64 dev azumi1",
                f"ip -6 addr add {new_ip}/64 dev azumi1",
                content,
            )
            ip_parts = new_ip.split(":")
            if new_ip.endswith(":2"):
                ip_parts[-1] = "1"
            else:
                ip_parts[-1] = "2"
            counterpart_ip = ":".join(ip_parts)
            new_content = re.sub(
                r"ip (-6 )?route add [^ ]+/64 dev azumi1",
                f"ip -6 route add {counterpart_ip}/64 dev azumi1",
                new_content,
            )
        elif update_type == "local":
            new_content = re.sub(r"local \S+", f"local {new_ip}", content)
        elif update_type == "remote":
            new_content = re.sub(r"remote \S+", f"remote {new_ip}", content)

        with open(name, "w") as f:
            f.write(new_content)
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def save_stuff_sit1(private_ip, local_ip, remote_ip):
    current_ips = get_current_private_ips1()
    current_ip = current_ips["private"]

    if current_ip:
        delete_ufw_rules(current_ip)

    add_ufw_rules(private_ip)

    counterpart_ip = wtb_opposite_ip(private_ip)
    try:
        update_pingfile_sit("/etc/ping_v61.sh", counterpart_ip)
        update_ipfile_sit1("/etc/private1.sh", private_ip, update_type="private")
        update_ipfile_sit1("/etc/private1.sh", local_ip, update_type="local")
        update_ipfile_sit1("/etc/private1.sh", remote_ip, update_type="remote")

        interface = "azumi1"
        try:
            subprocess.run(["ip", "link", "set", "dev", interface, "down"], check=True)
            subprocess.run(["ip", "link", "delete", interface], check=True)
        except subprocess.CalledProcessError as e:
            print("\033[91merror bringing interface down or deleting it\033[0m")

        script = "/etc/private1.sh"
        result = subprocess.run(["/bin/bash", script], capture_output=True, text=True)
        if "RTNETLINK answers: File exists" in result.stderr:
            print("interface already exists, don't mind this")
        else:
            result.check_returncode()
        subprocess.run(["sudo", "systemctl", "daemon-reload"], check=True)
        subprocess.run(["systemctl", "restart", "ping_v61"], check=True)
        display_checkmark(
            f"\033[92mChanges saved and {interface} interface updated successfully!\033[0m"
        )
    except subprocess.CalledProcessError as e:
        print(f"\033[91merror applying network stuff\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def ir1_editmulti_local():
    local_ip_private = local_ip("/etc/private1.sh")
    remote_ip_private = remote_ip("/etc/private1.sh")
    private_ip_private = private_ip1("/etc/private1.sh")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    while True:
        os.system("clear")
        display_stuff_privateiran1(
            local_ip_private, remote_ip_private, private_ip_private
        )
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mPrivate[SIT]\033[93m IRAN - \033[96mServer[1]\033[93m Menu\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN \033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mKHAREJ [1]\033[92m Public IP\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mIRAN\033[93m Public IP :\033[0m ")
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mKHAREJ [1]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            save_stuff_sit1(private_ip_private, local_ip_private, remote_ip_private)
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Please select a valid option.")


def kharej1_editmulti_local():
    local_ip_private = local_ip("/etc/private1.sh")
    remote_ip_private = remote_ip("/etc/private1.sh")
    private_ip_private = private_ip1("/etc/private1.sh")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    while True:
        os.system("clear")
        display_stuff_privatekharej1(
            local_ip_private, remote_ip_private, private_ip_private
        )
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mPrivate[SIT]\033[93m Kharej [1] Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej [1]\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mIRAN \033[92m Public IP\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mKharej [1]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input("\033[93mEnter \033[92mIRAN\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            save_stuff_sit1(private_ip_private, local_ip_private, remote_ip_private)
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Please select a valid option.")


# privateip 2


def display_stuff_privateiran2(local_ip, remote_ip, private_ip):
    lines = [
        f"\033[93mTitle:         SIT Configuration\033[0m",
        f"\033[97m──────────────────────────────────────\033[0m",
        f"\033[93mIRAN Public IP:         \033[97m{local_ip}\033[0m",
        f"\033[92mKharej \033[96m[2]\033[92m Public IP:   \033[97m{remote_ip}\033[0m",
        f"\033[93mSIT Private IP:         \033[97m{private_ip}\033[0m",
    ]
    box_width = 50

    print("\033[93m╭" + "─" * (box_width - 2) + "╮\033[0m")

    for line in lines:
        print(f"\033[93m {line:<{box_width - 4}} \033[0m")

    print("\033[93m╰" + "─" * (box_width - 2) + "╯\033[0m")


def display_stuff_privatekharej2(local_ip, remote_ip, private_ip):
    lines = [
        f"\033[93mTitle:         SIT Configuration\033[0m",
        f"\033[97m──────────────────────────────────────\033[0m",
        f"\033[92mKharej \033[96m[2]\033[92m Public IP:   \033[97m{local_ip}\033[0m",
        f"\033[93mIRAN Public IP:         \033[97m{remote_ip}\033[0m",
        f"\033[93mSIT Private IP:         \033[97m{private_ip}\033[0m",
    ]
    box_width = 50

    print("\033[93m╭" + "─" * (box_width - 2) + "╮\033[0m")

    for line in lines:
        print(f"\033[93m {line:<{box_width - 4}} \033[0m")

    print("\033[93m╰" + "─" * (box_width - 2) + "╯\033[0m")


def private_ip2(name):
    try:
        with open(name, "r") as f:
            content = f.read()
        match = re.search(r"ip (-6 )?addr add (\S+)/64 dev azumi2", content)
        if match:
            return match.group(2)
        else:
            print(f"\033[91mno private IP found\033[0m")
    except FileNotFoundError:
        print(f"file {name} doesn't exist")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")
    return None


def get_current_private_ips2():
    private_ip_private = private_ip2("/etc/private2.sh")

    return {
        "private": private_ip_private,
    }


def update_ipfile_sit2(name, new_ip, update_type):
    try:
        with open(name, "r") as f:
            content = f.read()

        if update_type == "private":
            new_content = re.sub(
                r"ip (-6 )?addr add [^ ]+/64 dev azumi2",
                f"ip -6 addr add {new_ip}/64 dev azumi2",
                content,
            )
            ip_parts = new_ip.split(":")
            if new_ip.endswith(":2"):
                ip_parts[-1] = "1"
            else:
                ip_parts[-1] = "2"
            counterpart_ip = ":".join(ip_parts)
            new_content = re.sub(
                r"ip (-6 )?route add [^ ]+/64 dev azumi2",
                f"ip -6 route add {counterpart_ip}/64 dev azumi2",
                new_content,
            )
        elif update_type == "local":
            new_content = re.sub(r"local \S+", f"local {new_ip}", content)
        elif update_type == "remote":
            new_content = re.sub(r"remote \S+", f"remote {new_ip}", content)

        with open(name, "w") as f:
            f.write(new_content)
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def save_stuff_sit2(private_ip, local_ip, remote_ip):
    try:
        current_ips = get_current_private_ips2()
        current_ip = current_ips.get("private")

        if current_ip:
            delete_ufw_rules(current_ip)

        add_ufw_rules(private_ip)

        counterpart_ip = wtb_opposite_ip(private_ip)
        update_pingfile_sit("/etc/ping_v62.sh", counterpart_ip)
        update_ipfile_sit2("/etc/private2.sh", private_ip, update_type="private")
        update_ipfile_sit2("/etc/private2.sh", local_ip, update_type="local")
        update_ipfile_sit2("/etc/private2.sh", remote_ip, update_type="remote")

        interface = "azumi2"
        try:
            subprocess.run(["ip", "link", "set", "dev", interface, "down"], check=True)
            subprocess.run(["ip", "link", "delete", interface], check=True)
        except subprocess.CalledProcessError:
            print("\033[91mError bringing interface down or deleting it\033[0m")
            raise

        script = "/etc/private2.sh"
        result = subprocess.run(["/bin/bash", script], capture_output=True, text=True)
        if "RTNETLINK answers: File exists" in result.stderr:
            print("Interface already exists, don't mind this")
        else:
            result.check_returncode()

        subprocess.run(["sudo", "systemctl", "daemon-reload"], check=True)
        subprocess.run(["systemctl", "restart", "ping_v62"], check=True)
        display_checkmark(
            f"\033[92mChanges saved and {interface} interface updated successfully!\033[0m"
        )

    except subprocess.CalledProcessError as e:
        print(f"\033[91mError applying network stuff\033[0m")
    except Exception as e:
        print(f"\033[91mOut of ordinary error: {e}\033[0m")


def ir2_editmulti_local():
    local_ip_private = local_ip("/etc/private2.sh")
    remote_ip_private = remote_ip("/etc/private2.sh")
    private_ip_private = private_ip2("/etc/private2.sh")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    while True:
        os.system("clear")
        display_stuff_privateiran2(
            local_ip_private, remote_ip_private, private_ip_private
        )

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mPrivate[SIT]\033[93m IRAN - \033[96mServer[2]\033[93m Menu\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN \033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mKHAREJ [2]\033[92m Public IP\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mIRAN\033[93m Public IP :\033[0m ")
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mKHAREJ [2]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            save_stuff_sit2(private_ip_private, local_ip_private, remote_ip_private)
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Please select a valid option.")


def kharej2_editmulti_local():
    local_ip_private = local_ip("/etc/private2.sh")
    remote_ip_private = remote_ip("/etc/private2.sh")
    private_ip_private = private_ip2("/etc/private2.sh")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    while True:
        os.system("clear")
        display_stuff_privatekharej2(
            local_ip_private, remote_ip_private, private_ip_private
        )

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mPrivate[SIT]\033[93m Kharej [2] Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej [2]\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mIRAN \033[92m Public IP\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mKharej [2]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input("\033[93mEnter \033[92mIRAN\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            save_stuff_sit2(private_ip_private, local_ip_private, remote_ip_private)
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Please select a valid option.")


# privateip 3


def display_stuff_privateiran3(local_ip, remote_ip, private_ip):
    lines = [
        f"\033[93mTitle:         SIT Configuration\033[0m",
        f"\033[97m──────────────────────────────────────\033[0m",
        f"\033[93mIRAN Public IP:         \033[97m{local_ip}\033[0m",
        f"\033[92mKharej \033[96m[3]\033[92m Public IP:   \033[97m{remote_ip}\033[0m",
        f"\033[93mSIT Private IP:         \033[97m{private_ip}\033[0m",
    ]
    box_width = 50

    print("\033[93m╭" + "─" * (box_width - 2) + "╮\033[0m")

    for line in lines:
        print(f"\033[93m {line:<{box_width - 4}} \033[0m")

    print("\033[93m╰" + "─" * (box_width - 2) + "╯\033[0m")


def display_stuff_privatekharej3(local_ip, remote_ip, private_ip):
    lines = [
        f"\033[93mTitle:         SIT Configuration\033[0m",
        f"\033[97m──────────────────────────────────────\033[0m",
        f"\033[92mKharej \033[96m[3]\033[92m Public IP:   \033[97m{local_ip}\033[0m",
        f"\033[93mIRAN Public IP:         \033[97m{remote_ip}\033[0m",
        f"\033[93mSIT Private IP:         \033[97m{private_ip}\033[0m",
    ]
    box_width = 50

    print("\033[93m╭" + "─" * (box_width - 2) + "╮\033[0m")

    for line in lines:
        print(f"\033[93m {line:<{box_width - 4}} \033[0m")

    print("\033[93m╰" + "─" * (box_width - 2) + "╯\033[0m")


def private_ip3(name):
    try:
        with open(name, "r") as f:
            content = f.read()
        match = re.search(r"ip (-6 )?addr add (\S+)/64 dev azumi3", content)
        if match:
            return match.group(2)
        else:
            print(f"\033[91mno private IP found\033[0m")
    except FileNotFoundError:
        print(f"file {name} doesn't exist")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")
    return None


def get_current_private_ips3():
    private_ip_private = private_ip3("/etc/private3.sh")

    return {
        "private": private_ip_private,
    }


def update_ipfile_sit3(name, new_ip, update_type):
    try:
        with open(name, "r") as f:
            content = f.read()

        if update_type == "private":
            new_content = re.sub(
                r"ip (-6 )?addr add [^ ]+/64 dev azumi3",
                f"ip -6 addr add {new_ip}/64 dev azumi3",
                content,
            )
            ip_parts = new_ip.split(":")
            if new_ip.endswith(":2"):
                ip_parts[-1] = "1"
            else:
                ip_parts[-1] = "2"
            counterpart_ip = ":".join(ip_parts)
            new_content = re.sub(
                r"ip (-6 )?route add [^ ]+/64 dev azumi3",
                f"ip -6 route add {counterpart_ip}/64 dev azumi3",
                new_content,
            )
        elif update_type == "local":
            new_content = re.sub(r"local \S+", f"local {new_ip}", content)
        elif update_type == "remote":
            new_content = re.sub(r"remote \S+", f"remote {new_ip}", content)

        with open(name, "w") as f:
            f.write(new_content)
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def save_stuff_sit3(private_ip, local_ip, remote_ip):
    current_ips = get_current_private_ips3()
    current_ip = current_ips["private"]

    if current_ip:
        delete_ufw_rules(current_ip)

    add_ufw_rules(private_ip)

    counterpart_ip = wtb_opposite_ip(private_ip)
    try:
        update_pingfile_sit("/etc/ping_v63.sh", counterpart_ip)
        update_ipfile_sit3("/etc/private3.sh", private_ip, update_type="private")
        update_ipfile_sit3("/etc/private3.sh", local_ip, update_type="local")
        update_ipfile_sit3("/etc/private3.sh", remote_ip, update_type="remote")

        interface = "azumi3"
        try:
            subprocess.run(["ip", "link", "set", "dev", interface, "down"], check=True)
            subprocess.run(["ip", "link", "delete", interface], check=True)
        except subprocess.CalledProcessError as e:
            print("\033[91merror bringing interface down or deleting it\033[0m")

        script = "/etc/private3.sh"
        result = subprocess.run(["/bin/bash", script], capture_output=True, text=True)
        if "RTNETLINK answers: File exists" in result.stderr:
            print("interface already exists, don't mind this")
        else:
            result.check_returncode()
        subprocess.run(["sudo", "systemctl", "daemon-reload"], check=True)
        subprocess.run(["systemctl", "restart", "ping_v63"], check=True)
        display_checkmark(
            f"\033[92mChanges saved and {interface} interface updated successfully!\033[0m"
        )
    except subprocess.CalledProcessError as e:
        print(f"\033[91merror applying network stuff\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def ir3_editmulti_local():
    local_ip_private = local_ip("/etc/private3.sh")
    remote_ip_private = remote_ip("/etc/private3.sh")
    private_ip_private = private_ip3("/etc/private3.sh")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    while True:
        os.system("clear")
        display_stuff_privateiran3(
            local_ip_private, remote_ip_private, private_ip_private
        )

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mPrivate[SIT]\033[93m IRAN - \033[96mServer[3]\033[93m Menu\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN \033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mKHAREJ [3]\033[92m Public IP\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mIRAN\033[93m Public IP :\033[0m ")
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mKHAREJ [3]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            save_stuff_sit3(private_ip_private, local_ip_private, remote_ip_private)
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Please select a valid option.")


def kharej3_editmulti_local():
    local_ip_private = local_ip("/etc/private3.sh")
    remote_ip_private = remote_ip("/etc/private3.sh")
    private_ip_private = private_ip3("/etc/private3.sh")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    while True:
        os.system("clear")
        display_stuff_privatekharej3(
            local_ip_private, remote_ip_private, private_ip_private
        )

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mPrivate[SIT]\033[93m Kharej [3] Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej [3]\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mIRAN \033[92m Public IP\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mKharej [3]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input("\033[93mEnter \033[92mIRAN\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            save_stuff_sit3(private_ip_private, local_ip_private, remote_ip_private)
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Please select a valid option.")


# privateip 4


def display_stuff_privateiran4(local_ip, remote_ip, private_ip):
    lines = [
        f"\033[93mTitle:         SIT Configuration\033[0m",
        f"\033[97m──────────────────────────────────────\033[0m",
        f"\033[93mIRAN Public IP:         \033[97m{local_ip}\033[0m",
        f"\033[92mKharej \033[96m[4]\033[92m Public IP:   \033[97m{remote_ip}\033[0m",
        f"\033[93mSIT Private IP:         \033[97m{private_ip}\033[0m",
    ]
    box_width = 50

    print("\033[93m╭" + "─" * (box_width - 2) + "╮\033[0m")

    for line in lines:
        print(f"\033[93m {line:<{box_width - 4}} \033[0m")

    print("\033[93m╰" + "─" * (box_width - 2) + "╯\033[0m")


def display_stuff_privatekharej4(local_ip, remote_ip, private_ip):
    lines = [
        f"\033[93mTitle:         SIT Configuration\033[0m",
        f"\033[97m──────────────────────────────────────\033[0m",
        f"\033[92mKharej \033[96m[4]\033[92m Public IP:   \033[97m{local_ip}\033[0m",
        f"\033[93mIRAN Public IP:         \033[97m{remote_ip}\033[0m",
        f"\033[93mSIT Private IP:         \033[97m{private_ip}\033[0m",
    ]
    box_width = 50

    print("\033[93m╭" + "─" * (box_width - 2) + "╮\033[0m")

    for line in lines:
        print(f"\033[93m {line:<{box_width - 4}} \033[0m")

    print("\033[93m╰" + "─" * (box_width - 2) + "╯\033[0m")


def private_ip4(name):
    try:
        with open(name, "r") as f:
            content = f.read()
        match = re.search(r"ip (-6 )?addr add (\S+)/64 dev azumi4", content)
        if match:
            return match.group(2)
        else:
            print(f"\033[91mno private IP found\033[0m")
    except FileNotFoundError:
        print(f"file {name} doesn't exist")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")
    return None


def get_current_private_ips4():
    private_ip_private = private_ip4("/etc/private4.sh")

    return {
        "private": private_ip_private,
    }


def update_ipfile_sit4(name, new_ip, update_type):
    try:
        with open(name, "r") as f:
            content = f.read()

        if update_type == "private":
            new_content = re.sub(
                r"ip (-6 )?addr add [^ ]+/64 dev azumi4",
                f"ip -6 addr add {new_ip}/64 dev azumi4",
                content,
            )
            ip_parts = new_ip.split(":")
            if new_ip.endswith(":2"):
                ip_parts[-1] = "1"
            else:
                ip_parts[-1] = "2"
            counterpart_ip = ":".join(ip_parts)
            new_content = re.sub(
                r"ip (-6 )?route add [^ ]+/64 dev azumi4",
                f"ip -6 route add {counterpart_ip}/64 dev azumi4",
                new_content,
            )
        elif update_type == "local":
            new_content = re.sub(r"local \S+", f"local {new_ip}", content)
        elif update_type == "remote":
            new_content = re.sub(r"remote \S+", f"remote {new_ip}", content)

        with open(name, "w") as f:
            f.write(new_content)
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def save_stuff_sit4(private_ip, local_ip, remote_ip):
    current_ips = get_current_private_ips4()
    current_ip = current_ips["private"]

    if current_ip:
        delete_ufw_rules(current_ip)

    add_ufw_rules(private_ip)

    counterpart_ip = wtb_opposite_ip(private_ip)
    try:
        update_pingfile_sit("/etc/ping_v64.sh", counterpart_ip)
        update_ipfile_sit4("/etc/private4.sh", private_ip, update_type="private")
        update_ipfile_sit4("/etc/private4.sh", local_ip, update_type="local")
        update_ipfile_sit4("/etc/private4.sh", remote_ip, update_type="remote")

        interface = "azumi4"
        try:
            subprocess.run(["ip", "link", "set", "dev", interface, "down"], check=True)
            subprocess.run(["ip", "link", "delete", interface], check=True)
        except subprocess.CalledProcessError as e:
            print("\033[91merror bringing interface down or deleting it\033[0m")

        script = "/etc/private4.sh"
        result = subprocess.run(["/bin/bash", script], capture_output=True, text=True)
        if "RTNETLINK answers: File exists" in result.stderr:
            print("interface already exists, don't mind this")
        else:
            result.check_returncode()
        subprocess.run(["sudo", "systemctl", "daemon-reload"], check=True)
        subprocess.run(["systemctl", "restart", "ping_v64"], check=True)
        display_checkmark(
            f"\033[92mChanges saved and {interface} interface updated successfully!\033[0m"
        )
    except subprocess.CalledProcessError as e:
        print(f"\033[91merror applying network stuff\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def ir4_editmulti_local():
    local_ip_private = local_ip("/etc/private4.sh")
    remote_ip_private = remote_ip("/etc/private4.sh")
    private_ip_private = private_ip4("/etc/private4.sh")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    while True:
        os.system("clear")
        display_stuff_privateiran4(
            local_ip_private, remote_ip_private, private_ip_private
        )

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mPrivate[SIT]\033[93m IRAN - \033[96mServer[4]\033[93m Menu\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN \033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mKHAREJ [4]\033[92m Public IP\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mIRAN\033[93m Public IP :\033[0m ")
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mKHAREJ [4]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            save_stuff_sit4(private_ip_private, local_ip_private, remote_ip_private)
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Please select a valid option.")


def kharej4_editmulti_local():
    local_ip_private = local_ip("/etc/private4.sh")
    remote_ip_private = remote_ip("/etc/private4.sh")
    private_ip_private = private_ip4("/etc/private4.sh")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    while True:
        os.system("clear")
        display_stuff_privatekharej4(
            local_ip_private, remote_ip_private, private_ip_private
        )

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mPrivate[SIT]\033[93m Kharej [4] Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej [4]\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mIRAN \033[92m Public IP\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mKharej [4]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input("\033[93mEnter \033[92mIRAN\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            save_stuff_sit4(private_ip_private, local_ip_private, remote_ip_private)
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Please select a valid option.")


# privateip 5


def display_stuff_privateiran5(local_ip, remote_ip, private_ip):
    lines = [
        f"\033[93mTitle:         SIT Configuration\033[0m",
        f"\033[97m──────────────────────────────────────\033[0m",
        f"\033[93mIRAN Public IP:         \033[97m{local_ip}\033[0m",
        f"\033[92mKharej \033[96m[5]\033[92m Public IP:   \033[97m{remote_ip}\033[0m",
        f"\033[93mSIT Private IP:         \033[97m{private_ip}\033[0m",
    ]
    box_width = 50

    print("\033[93m╭" + "─" * (box_width - 2) + "╮\033[0m")

    for line in lines:
        print(f"\033[93m {line:<{box_width - 4}} \033[0m")

    print("\033[93m╰" + "─" * (box_width - 2) + "╯\033[0m")


def display_stuff_privatekharej5(local_ip, remote_ip, private_ip):
    lines = [
        f"\033[93mTitle:         SIT Configuration\033[0m",
        f"\033[97m──────────────────────────────────────\033[0m",
        f"\033[92mKharej \033[96m[5]\033[92m Public IP:   \033[97m{local_ip}\033[0m",
        f"\033[93mIRAN Public IP:         \033[97m{remote_ip}\033[0m",
        f"\033[93mSIT Private IP:         \033[97m{private_ip}\033[0m",
    ]
    box_width = 50

    print("\033[93m╭" + "─" * (box_width - 2) + "╮\033[0m")

    for line in lines:
        print(f"\033[93m {line:<{box_width - 4}} \033[0m")

    print("\033[93m╰" + "─" * (box_width - 2) + "╯\033[0m")


def private_ip5(name):
    try:
        with open(name, "r") as f:
            content = f.read()
        match = re.search(r"ip (-6 )?addr add (\S+)/64 dev azumi5", content)
        if match:
            return match.group(2)
        else:
            print(f"\033[91mno private IP found\033[0m")
    except FileNotFoundError:
        print(f"file {name} doesn't exist")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")
    return None


def get_current_private_ips5():
    private_ip_private = private_ip5("/etc/private5.sh")

    return {
        "private": private_ip_private,
    }


def update_ipfile_sit5(name, new_ip, update_type):
    try:
        with open(name, "r") as f:
            content = f.read()

        if update_type == "private":
            new_content = re.sub(
                r"ip (-6 )?addr add [^ ]+/64 dev azumi5",
                f"ip -6 addr add {new_ip}/64 dev azumi5",
                content,
            )
            ip_parts = new_ip.split(":")
            if new_ip.endswith(":2"):
                ip_parts[-1] = "1"
            else:
                ip_parts[-1] = "2"
            counterpart_ip = ":".join(ip_parts)
            new_content = re.sub(
                r"ip (-6 )?route add [^ ]+/64 dev azumi5",
                f"ip -6 route add {counterpart_ip}/64 dev azumi5",
                new_content,
            )
        elif update_type == "local":
            new_content = re.sub(r"local \S+", f"local {new_ip}", content)
        elif update_type == "remote":
            new_content = re.sub(r"remote \S+", f"remote {new_ip}", content)

        with open(name, "w") as f:
            f.write(new_content)
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def save_stuff_sit5(private_ip, local_ip, remote_ip):
    current_ips = get_current_private_ips5()
    current_ip = current_ips["private"]

    if current_ip:
        delete_ufw_rules(current_ip)

    add_ufw_rules(private_ip)

    counterpart_ip = wtb_opposite_ip(private_ip)
    try:
        update_pingfile_sit("/etc/ping_v65.sh", counterpart_ip)
        update_ipfile_sit5("/etc/private5.sh", private_ip, update_type="private")
        update_ipfile_sit5("/etc/private5.sh", local_ip, update_type="local")
        update_ipfile_sit5("/etc/private5.sh", remote_ip, update_type="remote")

        interface = "azumi5"
        try:
            subprocess.run(["ip", "link", "set", "dev", interface, "down"], check=True)
            subprocess.run(["ip", "link", "delete", interface], check=True)
        except subprocess.CalledProcessError as e:
            print("\033[91merror bringing interface down or deleting it\033[0m")

        script = "/etc/private5.sh"
        result = subprocess.run(["/bin/bash", script], capture_output=True, text=True)
        if "RTNETLINK answers: File exists" in result.stderr:
            print("interface already exists, don't mind this")
        else:
            result.check_returncode()
        subprocess.run(["sudo", "systemctl", "daemon-reload"], check=True)
        subprocess.run(["systemctl", "restart", "ping_v65"], check=True)
        display_checkmark(
            f"\033[92mChanges saved and {interface} interface updated successfully!\033[0m"
        )
    except subprocess.CalledProcessError as e:
        print(f"\033[91merror applying network stuff\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def ir5_editmulti_local():
    local_ip_private = local_ip("/etc/private5.sh")
    remote_ip_private = remote_ip("/etc/private5.sh")
    private_ip_private = private_ip5("/etc/private5.sh")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    while True:
        os.system("clear")
        display_stuff_privateiran5(
            local_ip_private, remote_ip_private, private_ip_private
        )

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mPrivate[SIT]\033[93m IRAN - \033[96mServer[5]\033[93m Menu\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN \033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mKHAREJ [5]\033[92m Public IP\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mIRAN\033[93m Public IP :\033[0m ")
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mKHAREJ [5]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            save_stuff_sit5(private_ip_private, local_ip_private, remote_ip_private)
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Please select a valid option.")


def kharej5_editmulti_local():
    local_ip_private = local_ip("/etc/private5.sh")
    remote_ip_private = remote_ip("/etc/private5.sh")
    private_ip_private = private_ip5("/etc/private5.sh")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    while True:
        os.system("clear")
        display_stuff_privatekharej5(
            local_ip_private, remote_ip_private, private_ip_private
        )

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mPrivate[SIT]\033[93m Kharej [5] Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej [5]\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mIRAN \033[92m Public IP\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mKharej [5]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input("\033[93mEnter \033[92mIRAN\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            save_stuff_sit5(private_ip_private, local_ip_private, remote_ip_private)
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Please select a valid option.")


# privateip 6


def display_stuff_privateiran6(local_ip, remote_ip, private_ip):
    lines = [
        f"\033[93mTitle:         SIT Configuration\033[0m",
        f"\033[97m──────────────────────────────────────\033[0m",
        f"\033[93mIRAN Public IP:         \033[97m{local_ip}\033[0m",
        f"\033[92mKharej \033[96m[6]\033[92m Public IP:   \033[97m{remote_ip}\033[0m",
        f"\033[93mSIT Private IP:         \033[97m{private_ip}\033[0m",
    ]
    box_width = 50

    print("\033[93m╭" + "─" * (box_width - 2) + "╮\033[0m")

    for line in lines:
        print(f"\033[93m {line:<{box_width - 4}} \033[0m")

    print("\033[93m╰" + "─" * (box_width - 2) + "╯\033[0m")


def display_stuff_privatekharej6(local_ip, remote_ip, private_ip):
    lines = [
        f"\033[93mTitle:         SIT Configuration\033[0m",
        f"\033[97m──────────────────────────────────────\033[0m",
        f"\033[92mKharej \033[96m[6]\033[92m Public IP:   \033[97m{local_ip}\033[0m",
        f"\033[93mIRAN Public IP:         \033[97m{remote_ip}\033[0m",
        f"\033[93mSIT Private IP:         \033[97m{private_ip}\033[0m",
    ]
    box_width = 50

    print("\033[93m╭" + "─" * (box_width - 2) + "╮\033[0m")

    for line in lines:
        print(f"\033[93m {line:<{box_width - 4}} \033[0m")

    print("\033[93m╰" + "─" * (box_width - 2) + "╯\033[0m")


def private_ip6(name):
    try:
        with open(name, "r") as f:
            content = f.read()
        match = re.search(r"ip (-6 )?addr add (\S+)/64 dev azumi6", content)
        if match:
            return match.group(2)
        else:
            print(f"\033[91mno private IP found\033[0m")
    except FileNotFoundError:
        print(f"file {name} doesn't exist")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")
    return None


def get_current_private_ips6():
    private_ip_private = private_ip6("/etc/private6.sh")

    return {
        "private": private_ip_private,
    }


def update_ipfile_sit6(name, new_ip, update_type):
    try:
        with open(name, "r") as f:
            content = f.read()

        if update_type == "private":
            new_content = re.sub(
                r"ip (-6 )?addr add [^ ]+/64 dev azumi6",
                f"ip -6 addr add {new_ip}/64 dev azumi6",
                content,
            )
            ip_parts = new_ip.split(":")
            if new_ip.endswith(":2"):
                ip_parts[-1] = "1"
            else:
                ip_parts[-1] = "2"
            counterpart_ip = ":".join(ip_parts)
            new_content = re.sub(
                r"ip (-6 )?route add [^ ]+/64 dev azumi6",
                f"ip -6 route add {counterpart_ip}/64 dev azumi6",
                new_content,
            )
        elif update_type == "local":
            new_content = re.sub(r"local \S+", f"local {new_ip}", content)
        elif update_type == "remote":
            new_content = re.sub(r"remote \S+", f"remote {new_ip}", content)

        with open(name, "w") as f:
            f.write(new_content)
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def save_stuff_sit6(private_ip, local_ip, remote_ip):
    current_ips = get_current_private_ips6()
    current_ip = current_ips["private"]

    if current_ip:
        delete_ufw_rules(current_ip)

    add_ufw_rules(private_ip)

    counterpart_ip = wtb_opposite_ip(private_ip)
    try:
        update_pingfile_sit("/etc/ping_v66.sh", counterpart_ip)
        update_ipfile_sit6("/etc/private6.sh", private_ip, update_type="private")
        update_ipfile_sit6("/etc/private6.sh", local_ip, update_type="local")
        update_ipfile_sit6("/etc/private6.sh", remote_ip, update_type="remote")

        interface = "azumi6"
        try:
            subprocess.run(["ip", "link", "set", "dev", interface, "down"], check=True)
            subprocess.run(["ip", "link", "delete", interface], check=True)
        except subprocess.CalledProcessError as e:
            print("\033[91merror bringing interface down or deleting it\033[0m")

        script = "/etc/private6.sh"
        result = subprocess.run(["/bin/bash", script], capture_output=True, text=True)
        if "RTNETLINK answers: File exists" in result.stderr:
            print("interface already exists, don't mind this")
        else:
            result.check_returncode()
        subprocess.run(["sudo", "systemctl", "daemon-reload"], check=True)
        subprocess.run(["systemctl", "restart", "ping_v66"], check=True)
        display_checkmark(
            f"\033[92mChanges saved and {interface} interface updated successfully!\033[0m"
        )
    except subprocess.CalledProcessError as e:
        print(f"\033[91merror applying network stuff\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def ir6_editmulti_local():
    local_ip_private = local_ip("/etc/private6.sh")
    remote_ip_private = remote_ip("/etc/private6.sh")
    private_ip_private = private_ip6("/etc/private6.sh")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    while True:
        os.system("clear")
        display_stuff_privateiran6(
            local_ip_private, remote_ip_private, private_ip_private
        )

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mPrivate[SIT]\033[93m IRAN - \033[96mServer[6]\033[93m Menu\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN \033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mKHAREJ [6]\033[92m Public IP\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mIRAN\033[93m Public IP :\033[0m ")
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mKHAREJ [6]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            save_stuff_sit6(private_ip_private, local_ip_private, remote_ip_private)
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Please select a valid option.")


def kharej6_editmulti_local():
    local_ip_private = local_ip("/etc/private6.sh")
    remote_ip_private = remote_ip("/etc/private6.sh")
    private_ip_private = private_ip6("/etc/private6.sh")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    while True:
        os.system("clear")
        display_stuff_privatekharej6(
            local_ip_private, remote_ip_private, private_ip_private
        )

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mPrivate[SIT]\033[93m Kharej [6] Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej [6]\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mIRAN \033[92m Public IP\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mKharej [6]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input("\033[93mEnter \033[92mIRAN\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            save_stuff_sit6(private_ip_private, local_ip_private, remote_ip_private)
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Please select a valid option.")


# privateip 7


def display_stuff_privateiran7(local_ip, remote_ip, private_ip):
    lines = [
        f"\033[93mTitle:         SIT Configuration\033[0m",
        f"\033[97m──────────────────────────────────────\033[0m",
        f"\033[93mIRAN Public IP:         \033[97m{local_ip}\033[0m",
        f"\033[92mKharej \033[96m[7]\033[92m Public IP:   \033[97m{remote_ip}\033[0m",
        f"\033[93mSIT Private IP:         \033[97m{private_ip}\033[0m",
    ]
    box_width = 50

    print("\033[93m╭" + "─" * (box_width - 2) + "╮\033[0m")

    for line in lines:
        print(f"\033[93m {line:<{box_width - 4}} \033[0m")

    print("\033[93m╰" + "─" * (box_width - 2) + "╯\033[0m")


def display_stuff_privatekharej7(local_ip, remote_ip, private_ip):
    lines = [
        f"\033[93mTitle:         SIT Configuration\033[0m",
        f"\033[97m──────────────────────────────────────\033[0m",
        f"\033[92mKharej \033[96m[7]\033[92m Public IP:   \033[97m{local_ip}\033[0m",
        f"\033[93mIRAN Public IP:         \033[97m{remote_ip}\033[0m",
        f"\033[93mSIT Private IP:         \033[97m{private_ip}\033[0m",
    ]
    box_width = 50

    print("\033[93m╭" + "─" * (box_width - 2) + "╮\033[0m")

    for line in lines:
        print(f"\033[93m {line:<{box_width - 4}} \033[0m")

    print("\033[93m╰" + "─" * (box_width - 2) + "╯\033[0m")


def private_ip7(name):
    try:
        with open(name, "r") as f:
            content = f.read()
        match = re.search(r"ip (-6 )?addr add (\S+)/64 dev azumi7", content)
        if match:
            return match.group(2)
        else:
            print(f"\033[91mno private IP found\033[0m")
    except FileNotFoundError:
        print(f"file {name} doesn't exist")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")
    return None


def get_current_private_ips7():
    private_ip_private = private_ip7("/etc/private7.sh")

    return {
        "private": private_ip_private,
    }


def update_ipfile_sit7(name, new_ip, update_type):
    try:
        with open(name, "r") as f:
            content = f.read()

        if update_type == "private":
            new_content = re.sub(
                r"ip (-6 )?addr add [^ ]+/64 dev azumi7",
                f"ip -6 addr add {new_ip}/64 dev azumi7",
                content,
            )
            ip_parts = new_ip.split(":")
            if new_ip.endswith(":2"):
                ip_parts[-1] = "1"
            else:
                ip_parts[-1] = "2"
            counterpart_ip = ":".join(ip_parts)
            new_content = re.sub(
                r"ip (-6 )?route add [^ ]+/64 dev azumi7",
                f"ip -6 route add {counterpart_ip}/64 dev azumi7",
                new_content,
            )
        elif update_type == "local":
            new_content = re.sub(r"local \S+", f"local {new_ip}", content)
        elif update_type == "remote":
            new_content = re.sub(r"remote \S+", f"remote {new_ip}", content)

        with open(name, "w") as f:
            f.write(new_content)
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def save_stuff_sit7(private_ip, local_ip, remote_ip):
    current_ips = get_current_private_ips7()
    current_ip = current_ips["private"]

    if current_ip:
        delete_ufw_rules(current_ip)

    add_ufw_rules(private_ip)

    counterpart_ip = wtb_opposite_ip(private_ip)
    try:
        update_pingfile_sit("/etc/ping_v67.sh", counterpart_ip)
        update_ipfile_sit7("/etc/private7.sh", private_ip, update_type="private")
        update_ipfile_sit7("/etc/private7.sh", local_ip, update_type="local")
        update_ipfile_sit7("/etc/private7.sh", remote_ip, update_type="remote")

        interface = "azumi7"
        try:
            subprocess.run(["ip", "link", "set", "dev", interface, "down"], check=True)
            subprocess.run(["ip", "link", "delete", interface], check=True)
        except subprocess.CalledProcessError as e:
            print("\033[91merror bringing interface down or deleting it\033[0m")

        script = "/etc/private7.sh"
        result = subprocess.run(["/bin/bash", script], capture_output=True, text=True)
        if "RTNETLINK answers: File exists" in result.stderr:
            print("interface already exists, don't mind this")
        else:
            result.check_returncode()
        subprocess.run(["sudo", "systemctl", "daemon-reload"], check=True)
        subprocess.run(["systemctl", "restart", "ping_v67"], check=True)
        display_checkmark(
            f"\033[92mChanges saved and {interface} interface updated successfully!\033[0m"
        )
    except subprocess.CalledProcessError as e:
        print(f"\033[91merror applying network stuff\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def ir7_editmulti_local():
    local_ip_private = local_ip("/etc/private7.sh")
    remote_ip_private = remote_ip("/etc/private7.sh")
    private_ip_private = private_ip7("/etc/private7.sh")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    while True:
        os.system("clear")
        display_stuff_privateiran7(
            local_ip_private, remote_ip_private, private_ip_private
        )

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mPrivate[SIT]\033[93m IRAN - \033[96mServer[7]\033[93m Menu\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN \033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mKHAREJ [7]\033[92m Public IP\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mIRAN\033[93m Public IP :\033[0m ")
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mKHAREJ [7]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            save_stuff_sit7(private_ip_private, local_ip_private, remote_ip_private)
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Please select a valid option.")


def kharej7_editmulti_local():
    local_ip_private = local_ip("/etc/private7.sh")
    remote_ip_private = remote_ip("/etc/private7.sh")
    private_ip_private = private_ip7("/etc/private7.sh")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    while True:
        os.system("clear")
        display_stuff_privatekharej7(
            local_ip_private, remote_ip_private, private_ip_private
        )

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mPrivate[SIT]\033[93m Kharej [7] Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej [7]\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mIRAN \033[92m Public IP\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mKharej [7]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input("\033[93mEnter \033[92mIRAN\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            save_stuff_sit7(private_ip_private, local_ip_private, remote_ip_private)
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Please select a valid option.")


# privateip 8


def display_stuff_privateiran8(local_ip, remote_ip, private_ip):
    lines = [
        f"\033[93mTitle:         SIT Configuration\033[0m",
        f"\033[97m──────────────────────────────────────\033[0m",
        f"\033[93mIRAN Public IP:         \033[97m{local_ip}\033[0m",
        f"\033[92mKharej \033[96m[8]\033[92m Public IP:   \033[97m{remote_ip}\033[0m",
        f"\033[93mSIT Private IP:         \033[97m{private_ip}\033[0m",
    ]
    box_width = 50

    print("\033[93m╭" + "─" * (box_width - 2) + "╮\033[0m")

    for line in lines:
        print(f"\033[93m {line:<{box_width - 4}} \033[0m")

    print("\033[93m╰" + "─" * (box_width - 2) + "╯\033[0m")


def display_stuff_privatekharej8(local_ip, remote_ip, private_ip):
    lines = [
        f"\033[93mTitle:         SIT Configuration\033[0m",
        f"\033[97m──────────────────────────────────────\033[0m",
        f"\033[92mKharej \033[96m[8]\033[92m Public IP:   \033[97m{local_ip}\033[0m",
        f"\033[93mIRAN Public IP:         \033[97m{remote_ip}\033[0m",
        f"\033[93mSIT Private IP:         \033[97m{private_ip}\033[0m",
    ]
    box_width = 50

    print("\033[93m╭" + "─" * (box_width - 2) + "╮\033[0m")

    for line in lines:
        print(f"\033[93m {line:<{box_width - 4}} \033[0m")

    print("\033[93m╰" + "─" * (box_width - 2) + "╯\033[0m")


def private_ip8(name):
    try:
        with open(name, "r") as f:
            content = f.read()
        match = re.search(r"ip (-6 )?addr add (\S+)/64 dev azumi8", content)
        if match:
            return match.group(2)
        else:
            print(f"\033[91mno private IP found\033[0m")
    except FileNotFoundError:
        print(f"file {name} doesn't exist")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")
    return None


def get_current_private_ips8():
    private_ip_private = private_ip8("/etc/private8.sh")

    return {
        "private": private_ip_private,
    }


def update_ipfile_sit8(name, new_ip, update_type):
    try:
        with open(name, "r") as f:
            content = f.read()

        if update_type == "private":
            new_content = re.sub(
                r"ip (-6 )?addr add [^ ]+/64 dev azumi8",
                f"ip -6 addr add {new_ip}/64 dev azumi8",
                content,
            )
            ip_parts = new_ip.split(":")
            if new_ip.endswith(":2"):
                ip_parts[-1] = "1"
            else:
                ip_parts[-1] = "2"
            counterpart_ip = ":".join(ip_parts)
            new_content = re.sub(
                r"ip (-6 )?route add [^ ]+/64 dev azumi8",
                f"ip -6 route add {counterpart_ip}/64 dev azumi8",
                new_content,
            )
        elif update_type == "local":
            new_content = re.sub(r"local \S+", f"local {new_ip}", content)
        elif update_type == "remote":
            new_content = re.sub(r"remote \S+", f"remote {new_ip}", content)

        with open(name, "w") as f:
            f.write(new_content)
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def save_stuff_sit8(private_ip, local_ip, remote_ip):
    current_ips = get_current_private_ips8()
    current_ip = current_ips["private"]

    if current_ip:
        delete_ufw_rules(current_ip)

    add_ufw_rules(private_ip)

    counterpart_ip = wtb_opposite_ip(private_ip)
    try:
        update_pingfile_sit("/etc/ping_v68.sh", counterpart_ip)
        update_ipfile_sit8("/etc/private8.sh", private_ip, update_type="private")
        update_ipfile_sit8("/etc/private8.sh", local_ip, update_type="local")
        update_ipfile_sit8("/etc/private8.sh", remote_ip, update_type="remote")

        interface = "azumi8"
        try:
            subprocess.run(["ip", "link", "set", "dev", interface, "down"], check=True)
            subprocess.run(["ip", "link", "delete", interface], check=True)
        except subprocess.CalledProcessError as e:
            print("\033[91merror bringing interface down or deleting it\033[0m")

        script = "/etc/private8.sh"
        result = subprocess.run(["/bin/bash", script], capture_output=True, text=True)
        if "RTNETLINK answers: File exists" in result.stderr:
            print("interface already exists, don't mind this")
        else:
            result.check_returncode()
        subprocess.run(["sudo", "systemctl", "daemon-reload"], check=True)
        subprocess.run(["systemctl", "restart", "ping_v68"], check=True)
        display_checkmark(
            f"\033[92mChanges saved and {interface} interface updated successfully!\033[0m"
        )
    except subprocess.CalledProcessError as e:
        print(f"\033[91merror applying network stuff\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def ir8_editmulti_local():
    local_ip_private = local_ip("/etc/private8.sh")
    remote_ip_private = remote_ip("/etc/private8.sh")
    private_ip_private = private_ip8("/etc/private8.sh")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    while True:
        os.system("clear")
        display_stuff_privateiran8(
            local_ip_private, remote_ip_private, private_ip_private
        )

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mPrivate[SIT]\033[93m IRAN - \033[96mServer[8]\033[93m Menu\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN \033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mKHAREJ [8]\033[92m Public IP\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mIRAN\033[93m Public IP :\033[0m ")
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mKHAREJ [8]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            save_stuff_sit8(private_ip_private, local_ip_private, remote_ip_private)
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Please select a valid option.")


def kharej8_editmulti_local():
    local_ip_private = local_ip("/etc/private8.sh")
    remote_ip_private = remote_ip("/etc/private8.sh")
    private_ip_private = private_ip8("/etc/private8.sh")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    while True:
        os.system("clear")
        display_stuff_privatekharej8(
            local_ip_private, remote_ip_private, private_ip_private
        )

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mPrivate[SIT]\033[93m Kharej [8] Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej [8]\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mIRAN \033[92m Public IP\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mKharej [8]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input("\033[93mEnter \033[92mIRAN\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            save_stuff_sit8(private_ip_private, local_ip_private, remote_ip_private)
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Please select a valid option.")


# privateip 9


def display_stuff_privateiran9(local_ip, remote_ip, private_ip):
    lines = [
        f"\033[93mTitle:         SIT Configuration\033[0m",
        f"\033[97m──────────────────────────────────────\033[0m",
        f"\033[93mIRAN Public IP:         \033[97m{local_ip}\033[0m",
        f"\033[92mKharej \033[96m[9]\033[92m Public IP:   \033[97m{remote_ip}\033[0m",
        f"\033[93mSIT Private IP:         \033[97m{private_ip}\033[0m",
    ]
    box_width = 50

    print("\033[93m╭" + "─" * (box_width - 2) + "╮\033[0m")

    for line in lines:
        print(f"\033[93m {line:<{box_width - 4}} \033[0m")

    print("\033[93m╰" + "─" * (box_width - 2) + "╯\033[0m")


def display_stuff_privatekharej9(local_ip, remote_ip, private_ip):
    lines = [
        f"\033[93mTitle:         SIT Configuration\033[0m",
        f"\033[97m──────────────────────────────────────\033[0m",
        f"\033[92mKharej \033[96m[9]\033[92m Public IP:   \033[97m{local_ip}\033[0m",
        f"\033[93mIRAN Public IP:         \033[97m{remote_ip}\033[0m",
        f"\033[93mSIT Private IP:         \033[97m{private_ip}\033[0m",
    ]
    box_width = 50

    print("\033[93m╭" + "─" * (box_width - 2) + "╮\033[0m")

    for line in lines:
        print(f"\033[93m {line:<{box_width - 4}} \033[0m")

    print("\033[93m╰" + "─" * (box_width - 2) + "╯\033[0m")


def private_ip9(name):
    try:
        with open(name, "r") as f:
            content = f.read()
        match = re.search(r"ip (-6 )?addr add (\S+)/64 dev azumi9", content)
        if match:
            return match.group(2)
        else:
            print(f"\033[91mno private IP found\033[0m")
    except FileNotFoundError:
        print(f"file {name} doesn't exist")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")
    return None


def get_current_private_ips9():
    private_ip_private = private_ip9("/etc/private9.sh")

    return {
        "private": private_ip_private,
    }


def update_ipfile_sit9(name, new_ip, update_type):
    try:
        with open(name, "r") as f:
            content = f.read()

        if update_type == "private":
            new_content = re.sub(
                r"ip (-6 )?addr add [^ ]+/64 dev azumi9",
                f"ip -6 addr add {new_ip}/64 dev azumi9",
                content,
            )
            ip_parts = new_ip.split(":")
            if new_ip.endswith(":2"):
                ip_parts[-1] = "1"
            else:
                ip_parts[-1] = "2"
            counterpart_ip = ":".join(ip_parts)
            new_content = re.sub(
                r"ip (-6 )?route add [^ ]+/64 dev azumi9",
                f"ip -6 route add {counterpart_ip}/64 dev azumi9",
                new_content,
            )
        elif update_type == "local":
            new_content = re.sub(r"local \S+", f"local {new_ip}", content)
        elif update_type == "remote":
            new_content = re.sub(r"remote \S+", f"remote {new_ip}", content)

        with open(name, "w") as f:
            f.write(new_content)
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def save_stuff_sit9(private_ip, local_ip, remote_ip):
    current_ips = get_current_private_ips9()
    current_ip = current_ips["private"]

    if current_ip:
        delete_ufw_rules(current_ip)

    add_ufw_rules(private_ip)

    counterpart_ip = wtb_opposite_ip(private_ip)
    try:
        update_pingfile_sit("/etc/ping_v69.sh", counterpart_ip)
        update_ipfile_sit9("/etc/private9.sh", private_ip, update_type="private")
        update_ipfile_sit9("/etc/private9.sh", local_ip, update_type="local")
        update_ipfile_sit9("/etc/private9.sh", remote_ip, update_type="remote")

        interface = "azumi9"
        try:
            subprocess.run(["ip", "link", "set", "dev", interface, "down"], check=True)
            subprocess.run(["ip", "link", "delete", interface], check=True)
        except subprocess.CalledProcessError as e:
            print("\033[91merror bringing interface down or deleting it\033[0m")

        script = "/etc/private9.sh"
        result = subprocess.run(["/bin/bash", script], capture_output=True, text=True)
        if "RTNETLINK answers: File exists" in result.stderr:
            print("interface already exists, don't mind this")
        else:
            result.check_returncode()
        subprocess.run(["sudo", "systemctl", "daemon-reload"], check=True)
        subprocess.run(["systemctl", "restart", "ping_v69"], check=True)
        display_checkmark(
            f"\033[92mChanges saved and {interface} interface updated successfully!\033[0m"
        )
    except subprocess.CalledProcessError as e:
        print(f"\033[91merror applying network stuff\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def ir9_editmulti_local():
    local_ip_private = local_ip("/etc/private9.sh")
    remote_ip_private = remote_ip("/etc/private9.sh")
    private_ip_private = private_ip9("/etc/private9.sh")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    while True:
        os.system("clear")
        display_stuff_privateiran9(
            local_ip_private, remote_ip_private, private_ip_private
        )

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mPrivate[SIT]\033[93m IRAN - \033[96mServer[9]\033[93m Menu\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN \033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mKHAREJ [9]\033[92m Public IP\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mIRAN\033[93m Public IP :\033[0m ")
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mKHAREJ [9]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            save_stuff_sit9(private_ip_private, local_ip_private, remote_ip_private)
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Please select a valid option.")


def kharej9_editmulti_local():
    local_ip_private = local_ip("/etc/private9.sh")
    remote_ip_private = remote_ip("/etc/private9.sh")
    private_ip_private = private_ip9("/etc/private9.sh")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    while True:
        os.system("clear")
        display_stuff_privatekharej9(
            local_ip_private, remote_ip_private, private_ip_private
        )

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mPrivate[SIT]\033[93m Kharej [9] Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej [9]\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mIRAN \033[92m Public IP\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mKharej [9]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input("\033[93mEnter \033[92mIRAN\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            save_stuff_sit9(private_ip_private, local_ip_private, remote_ip_private)
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Please select a valid option.")


# privateip 10


def display_stuff_privateiran10(local_ip, remote_ip, private_ip):
    lines = [
        f"\033[93mTitle:         SIT Configuration\033[0m",
        f"\033[97m──────────────────────────────────────\033[0m",
        f"\033[93mIRAN Public IP:         \033[97m{local_ip}\033[0m",
        f"\033[92mKharej \033[96m[10]\033[92m Public IP:   \033[97m{remote_ip}\033[0m",
        f"\033[93mSIT Private IP:         \033[97m{private_ip}\033[0m",
    ]
    box_width = 50

    print("\033[93m╭" + "─" * (box_width - 2) + "╮\033[0m")

    for line in lines:
        print(f"\033[93m {line:<{box_width - 4}} \033[0m")

    print("\033[93m╰" + "─" * (box_width - 2) + "╯\033[0m")


def display_stuff_privatekharej10(local_ip, remote_ip, private_ip):
    lines = [
        f"\033[93mTitle:         SIT Configuration\033[0m",
        f"\033[97m──────────────────────────────────────\033[0m",
        f"\033[92mKharej \033[96m[10]\033[92m Public IP:   \033[97m{local_ip}\033[0m",
        f"\033[93mIRAN Public IP:         \033[97m{remote_ip}\033[0m",
        f"\033[93mSIT Private IP:         \033[97m{private_ip}\033[0m",
    ]
    box_width = 50

    print("\033[93m╭" + "─" * (box_width - 2) + "╮\033[0m")

    for line in lines:
        print(f"\033[93m {line:<{box_width - 4}} \033[0m")

    print("\033[93m╰" + "─" * (box_width - 2) + "╯\033[0m")


def private_ip10(name):
    try:
        with open(name, "r") as f:
            content = f.read()
        match = re.search(r"ip (-6 )?addr add (\S+)/64 dev azumi10", content)
        if match:
            return match.group(2)
        else:
            print(f"\033[91mno private IP found\033[0m")
    except FileNotFoundError:
        print(f"file {name} doesn't exist")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")
    return None


def get_current_private_ips10():
    private_ip_private = private_ip10("/etc/private10.sh")

    return {
        "private": private_ip_private,
    }


def update_ipfile_sit10(name, new_ip, update_type):
    try:
        with open(name, "r") as f:
            content = f.read()

        if update_type == "private":
            new_content = re.sub(
                r"ip (-6 )?addr add [^ ]+/64 dev azumi10",
                f"ip -6 addr add {new_ip}/64 dev azumi10",
                content,
            )
            ip_parts = new_ip.split(":")
            if new_ip.endswith(":2"):
                ip_parts[-1] = "1"
            else:
                ip_parts[-1] = "2"
            counterpart_ip = ":".join(ip_parts)
            new_content = re.sub(
                r"ip (-6 )?route add [^ ]+/64 dev azumi10",
                f"ip -6 route add {counterpart_ip}/64 dev azumi10",
                new_content,
            )
        elif update_type == "local":
            new_content = re.sub(r"local \S+", f"local {new_ip}", content)
        elif update_type == "remote":
            new_content = re.sub(r"remote \S+", f"remote {new_ip}", content)

        with open(name, "w") as f:
            f.write(new_content)
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def save_stuff_sit10(private_ip, local_ip, remote_ip):
    current_ips = get_current_private_ips10()
    current_ip = current_ips["private"]

    if current_ip:
        delete_ufw_rules(current_ip)

    add_ufw_rules(private_ip)

    counterpart_ip = wtb_opposite_ip(private_ip)
    try:
        update_pingfile_sit("/etc/ping_v610.sh", counterpart_ip)
        update_ipfile_sit10("/etc/private10.sh", private_ip, update_type="private")
        update_ipfile_sit10("/etc/private10.sh", local_ip, update_type="local")
        update_ipfile_sit10("/etc/private10.sh", remote_ip, update_type="remote")

        interface = "azumi10"
        try:
            subprocess.run(["ip", "link", "set", "dev", interface, "down"], check=True)
            subprocess.run(["ip", "link", "delete", interface], check=True)
        except subprocess.CalledProcessError as e:
            print("\033[91merror bringing interface down or deleting it\033[0m")

        script = "/etc/private10.sh"
        result = subprocess.run(["/bin/bash", script], capture_output=True, text=True)
        if "RTNETLINK answers: File exists" in result.stderr:
            print("interface already exists, don't mind this")
        else:
            result.check_returncode()
        subprocess.run(["sudo", "systemctl", "daemon-reload"], check=True)
        subprocess.run(["systemctl", "restart", "ping_v610"], check=True)
        display_checkmark(
            f"\033[92mChanges saved and {interface} interface updated successfully!\033[0m"
        )
    except subprocess.CalledProcessError as e:
        print(f"\033[91merror applying network stuff\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def ir10_editmulti_local():
    local_ip_private = local_ip("/etc/private10.sh")
    remote_ip_private = remote_ip("/etc/private10.sh")
    private_ip_private = private_ip10("/etc/private10.sh")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    while True:
        os.system("clear")
        display_stuff_privateiran10(
            local_ip_private, remote_ip_private, private_ip_private
        )

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mPrivate[SIT]\033[93m IRAN - \033[96mServer[10]\033[93m Menu\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN \033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mKHAREJ [10]\033[92m Public IP\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mIRAN\033[93m Public IP :\033[0m ")
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mKHAREJ [10]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            save_stuff_sit10(private_ip_private, local_ip_private, remote_ip_private)
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Please select a valid option.")


def kharej10_editmulti_local():
    local_ip_private = local_ip("/etc/private10.sh")
    remote_ip_private = remote_ip("/etc/private10.sh")
    private_ip_private = private_ip10("/etc/private10.sh")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    while True:
        os.system("clear")
        display_stuff_privatekharej10(
            local_ip_private, remote_ip_private, private_ip_private
        )

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mPrivate[SIT]\033[93m Kharej [10] Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej [10]\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mIRAN \033[92m Public IP\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mKharej [10]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input("\033[93mEnter \033[92mIRAN\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            save_stuff_sit10(private_ip_private, local_ip_private, remote_ip_private)
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Please select a valid option.")


def display_stuff_privateiranfive1(local_ip, remote_ip, private_ip):
    lines = [
        f"\033[93mTitle:         SIT Configuration\033[0m",
        f"\033[97m──────────────────────────────────────\033[0m",
        f"\033[93mIRAN \033[96m[1]\033[93m Public IP:     \033[97m{local_ip}\033[0m",
        f"\033[92mKharej Public IP:       \033[97m{remote_ip}\033[0m",
        f"\033[93mSIT Private IP:         \033[97m{private_ip}\033[0m",
    ]
    box_width = 50

    print("\033[93m╭" + "─" * (box_width - 2) + "╮\033[0m")

    for line in lines:
        print(f"\033[93m {line:<{box_width - 4}} \033[0m")

    print("\033[93m╰" + "─" * (box_width - 2) + "╯\033[0m")


def display_stuff_privatekharejone1(local_ip, remote_ip, private_ip):
    lines = [
        f"\033[93mTitle:         SIT Configuration\033[0m",
        f"\033[97m──────────────────────────────────────\033[0m",
        f"\033[92mKharej Public IP:        \033[97m{local_ip}\033[0m",
        f"\033[93mIRAN \033[96m[1]\033[93m Public IP:      \033[97m{remote_ip}\033[0m",
        f"\033[93mSIT Private IP:          \033[97m{private_ip}\033[0m",
    ]
    box_width = 50

    print("\033[93m╭" + "─" * (box_width - 2) + "╮\033[0m")

    for line in lines:
        print(f"\033[93m {line:<{box_width - 4}} \033[0m")

    print("\033[93m╰" + "─" * (box_width - 2) + "╯\033[0m")


def display_stuff_privateiranfive2(local_ip, remote_ip, private_ip):
    lines = [
        f"\033[93mTitle:         SIT Configuration\033[0m",
        f"\033[97m──────────────────────────────────────\033[0m",
        f"\033[93mIRAN \033[96m[2]\033[93m Public IP:     \033[97m{local_ip}\033[0m",
        f"\033[92mKharej Public IP:       \033[97m{remote_ip}\033[0m",
        f"\033[93mSIT Private IP:         \033[97m{private_ip}\033[0m",
    ]
    box_width = 50

    print("\033[93m╭" + "─" * (box_width - 2) + "╮\033[0m")

    for line in lines:
        print(f"\033[93m {line:<{box_width - 4}} \033[0m")

    print("\033[93m╰" + "─" * (box_width - 2) + "╯\033[0m")


def display_stuff_privatekharejone2(local_ip, remote_ip, private_ip):
    lines = [
        f"\033[93mTitle:         SIT Configuration\033[0m",
        f"\033[97m──────────────────────────────────────\033[0m",
        f"\033[92mKharej Public IP:        \033[97m{local_ip}\033[0m",
        f"\033[93mIRAN \033[96m[2]\033[93m Public IP:      \033[97m{remote_ip}\033[0m",
        f"\033[93mSIT Private IP:          \033[97m{private_ip}\033[0m",
    ]
    box_width = 50

    print("\033[93m╭" + "─" * (box_width - 2) + "╮\033[0m")

    for line in lines:
        print(f"\033[93m {line:<{box_width - 4}} \033[0m")

    print("\033[93m╰" + "─" * (box_width - 2) + "╯\033[0m")


def display_stuff_privateiranfive3(local_ip, remote_ip, private_ip):
    lines = [
        f"\033[93mTitle:         SIT Configuration\033[0m",
        f"\033[97m──────────────────────────────────────\033[0m",
        f"\033[93mIRAN \033[96m[3]\033[93m Public IP:     \033[97m{local_ip}\033[0m",
        f"\033[92mKharej Public IP:       \033[97m{remote_ip}\033[0m",
        f"\033[93mSIT Private IP:         \033[97m{private_ip}\033[0m",
    ]
    box_width = 50

    print("\033[93m╭" + "─" * (box_width - 2) + "╮\033[0m")

    for line in lines:
        print(f"\033[93m {line:<{box_width - 4}} \033[0m")

    print("\033[93m╰" + "─" * (box_width - 2) + "╯\033[0m")


def display_stuff_privatekharejone3(local_ip, remote_ip, private_ip):
    lines = [
        f"\033[93mTitle:         SIT Configuration\033[0m",
        f"\033[97m──────────────────────────────────────\033[0m",
        f"\033[92mKharej Public IP:        \033[97m{local_ip}\033[0m",
        f"\033[93mIRAN \033[96m[3]\033[93m Public IP:      \033[97m{remote_ip}\033[0m",
        f"\033[93mSIT Private IP:          \033[97m{private_ip}\033[0m",
    ]
    box_width = 50

    print("\033[93m╭" + "─" * (box_width - 2) + "╮\033[0m")

    for line in lines:
        print(f"\033[93m {line:<{box_width - 4}} \033[0m")

    print("\033[93m╰" + "─" * (box_width - 2) + "╯\033[0m")


def display_stuff_privateiranfive4(local_ip, remote_ip, private_ip):
    lines = [
        f"\033[93mTitle:         SIT Configuration\033[0m",
        f"\033[97m──────────────────────────────────────\033[0m",
        f"\033[93mIRAN \033[96m[4]\033[93m Public IP:     \033[97m{local_ip}\033[0m",
        f"\033[92mKharej Public IP:       \033[97m{remote_ip}\033[0m",
        f"\033[93mSIT Private IP:         \033[97m{private_ip}\033[0m",
    ]
    box_width = 50

    print("\033[93m╭" + "─" * (box_width - 2) + "╮\033[0m")

    for line in lines:
        print(f"\033[93m {line:<{box_width - 4}} \033[0m")

    print("\033[93m╰" + "─" * (box_width - 2) + "╯\033[0m")


def display_stuff_privatekharejone4(local_ip, remote_ip, private_ip):
    lines = [
        f"\033[93mTitle:         SIT Configuration\033[0m",
        f"\033[97m──────────────────────────────────────\033[0m",
        f"\033[92mKharej Public IP:        \033[97m{local_ip}\033[0m",
        f"\033[93mIRAN \033[96m[4]\033[93m Public IP:      \033[97m{remote_ip}\033[0m",
        f"\033[93mSIT Private IP:          \033[97m{private_ip}\033[0m",
    ]
    box_width = 50

    print("\033[93m╭" + "─" * (box_width - 2) + "╮\033[0m")

    for line in lines:
        print(f"\033[93m {line:<{box_width - 4}} \033[0m")

    print("\033[93m╰" + "─" * (box_width - 2) + "╯\033[0m")


def display_stuff_privateiranfive5(local_ip, remote_ip, private_ip):
    lines = [
        f"\033[93mTitle:         SIT Configuration\033[0m",
        f"\033[97m──────────────────────────────────────\033[0m",
        f"\033[93mIRAN \033[96m[5]\033[93m Public IP:     \033[97m{local_ip}\033[0m",
        f"\033[92mKharej Public IP:       \033[97m{remote_ip}\033[0m",
        f"\033[93mSIT Private IP:         \033[97m{private_ip}\033[0m",
    ]
    box_width = 50

    print("\033[93m╭" + "─" * (box_width - 2) + "╮\033[0m")

    for line in lines:
        print(f"\033[93m {line:<{box_width - 4}} \033[0m")

    print("\033[93m╰" + "─" * (box_width - 2) + "╯\033[0m")


def display_stuff_privatekharejone5(local_ip, remote_ip, private_ip):
    lines = [
        f"\033[93mTitle:         SIT Configuration\033[0m",
        f"\033[97m──────────────────────────────────────\033[0m",
        f"\033[92mKharej Public IP:        \033[97m{local_ip}\033[0m",
        f"\033[93mIRAN \033[96m[5]\033[93m Public IP:      \033[97m{remote_ip}\033[0m",
        f"\033[93mSIT Private IP:          \033[97m{private_ip}\033[0m",
    ]
    box_width = 50

    print("\033[93m╭" + "─" * (box_width - 2) + "╮\033[0m")

    for line in lines:
        print(f"\033[93m {line:<{box_width - 4}} \033[0m")

    print("\033[93m╰" + "─" * (box_width - 2) + "╯\033[0m")


def kharejone1_editmulti_local():
    local_ip_private = local_ip("/etc/private1.sh")
    remote_ip_private = remote_ip("/etc/private1.sh")
    private_ip_private = private_ip1("/etc/private1.sh")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    while True:
        os.system("clear")
        display_stuff_privatekharejone1(
            local_ip_private, remote_ip_private, private_ip_private
        )

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mPrivate[SIT]\033[93m Kharej - \033[96mServer[1]\033[93m Menu\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej \033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mIRAN [1]\033[92m Public IP\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mKharej\033[93m Public IP :\033[0m ")
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input("\033[93mEnter \033[92mIRAN [1]\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            save_stuff_sit1(private_ip_private, local_ip_private, remote_ip_private)
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Please select a valid option.")


def iranfive1_editmulti_local():
    local_ip_private = local_ip("/etc/private1.sh")
    remote_ip_private = remote_ip("/etc/private1.sh")
    private_ip_private = private_ip1("/etc/private1.sh")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    while True:
        os.system("clear")
        display_stuff_privateiranfive1(
            local_ip_private, remote_ip_private, private_ip_private
        )

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mPrivate[SIT]\033[93m IRAN [1] Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN [1]\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mKharej \033[92m Public IP\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mIRAN [1]\033[93m Public IP :\033[0m ")
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input("\033[93mEnter \033[92mKharej\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            save_stuff_sit1(private_ip_private, local_ip_private, remote_ip_private)
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Please select a valid option.")


def kharejone2_editmulti_local():
    local_ip_private = local_ip("/etc/private2.sh")
    remote_ip_private = remote_ip("/etc/private2.sh")
    private_ip_private = private_ip2("/etc/private2.sh")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    while True:
        os.system("clear")
        display_stuff_privatekharejone2(
            local_ip_private, remote_ip_private, private_ip_private
        )

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mPrivate[SIT]\033[93m Kharej - \033[96mServer[2]\033[93m Menu\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej \033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mIRAN [2]\033[92m Public IP\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mKharej\033[93m Public IP :\033[0m ")
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input("\033[93mEnter \033[92mIRAN [2]\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            save_stuff_sit2(private_ip_private, local_ip_private, remote_ip_private)
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Please select a valid option.")


def iranfive2_editmulti_local():
    local_ip_private = local_ip("/etc/private2.sh")
    remote_ip_private = remote_ip("/etc/private2.sh")
    private_ip_private = private_ip2("/etc/private2.sh")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    while True:
        os.system("clear")
        display_stuff_privateiranfive2(
            local_ip_private, remote_ip_private, private_ip_private
        )

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mPrivate[SIT]\033[93m IRAN [2] Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN [2]\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mKharej \033[92m Public IP\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mIRAN [2]\033[93m Public IP :\033[0m ")
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input("\033[93mEnter \033[92mKharej\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            save_stuff_sit2(private_ip_private, local_ip_private, remote_ip_private)
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Please select a valid option.")


def kharejone3_editmulti_local():
    local_ip_private = local_ip("/etc/private3.sh")
    remote_ip_private = remote_ip("/etc/private3.sh")
    private_ip_private = private_ip3("/etc/private3.sh")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    while True:
        os.system("clear")
        display_stuff_privatekharejone3(
            local_ip_private, remote_ip_private, private_ip_private
        )

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mPrivate[SIT]\033[93m Kharej - \033[96mServer[3]\033[93m Menu\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej \033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mIRAN [3]\033[92m Public IP\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mKharej\033[93m Public IP :\033[0m ")
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input("\033[93mEnter \033[92mIRAN [3]\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            save_stuff_sit3(private_ip_private, local_ip_private, remote_ip_private)
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Please select a valid option.")


def iranfive3_editmulti_local():
    local_ip_private = local_ip("/etc/private3.sh")
    remote_ip_private = remote_ip("/etc/private3.sh")
    private_ip_private = private_ip3("/etc/private3.sh")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    while True:
        os.system("clear")
        display_stuff_privateiranfive3(
            local_ip_private, remote_ip_private, private_ip_private
        )

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mPrivate[SIT]\033[93m IRAN [3] Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN [3]\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mKharej \033[92m Public IP\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mIRAN [3]\033[93m Public IP :\033[0m ")
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input("\033[93mEnter \033[92mKharej\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            save_stuff_sit3(private_ip_private, local_ip_private, remote_ip_private)
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Please select a valid option.")


def kharejone4_editmulti_local():
    local_ip_private = local_ip("/etc/private4.sh")
    remote_ip_private = remote_ip("/etc/private4.sh")
    private_ip_private = private_ip4("/etc/private4.sh")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    while True:
        os.system("clear")
        display_stuff_privatekharejone4(
            local_ip_private, remote_ip_private, private_ip_private
        )

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mPrivate[SIT]\033[93m Kharej - \033[96mServer[4]\033[93m Menu\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej \033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mIRAN [4]\033[92m Public IP\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mKharej\033[93m Public IP :\033[0m ")
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input("\033[93mEnter \033[92mIRAN [4]\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            save_stuff_sit4(private_ip_private, local_ip_private, remote_ip_private)
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Please select a valid option.")


def iranfive4_editmulti_local():
    local_ip_private = local_ip("/etc/private4.sh")
    remote_ip_private = remote_ip("/etc/private4.sh")
    private_ip_private = private_ip4("/etc/private4.sh")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    while True:
        os.system("clear")
        display_stuff_privateiranfive4(
            local_ip_private, remote_ip_private, private_ip_private
        )

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mPrivate[SIT]\033[93m IRAN [4] Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN [4]\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mKharej \033[92m Public IP\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mIRAN [4]\033[93m Public IP :\033[0m ")
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input("\033[93mEnter \033[92mKharej\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            save_stuff_sit4(private_ip_private, local_ip_private, remote_ip_private)
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Please select a valid option.")


def kharejone5_editmulti_local():
    local_ip_private = local_ip("/etc/private5.sh")
    remote_ip_private = remote_ip("/etc/private5.sh")
    private_ip_private = private_ip5("/etc/private5.sh")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    while True:
        os.system("clear")
        display_stuff_privatekharejone5(
            local_ip_private, remote_ip_private, private_ip_private
        )

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mPrivate[SIT]\033[93m Kharej - \033[96mServer[5]\033[93m Menu\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej \033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mIRAN [5]\033[92m Public IP\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mKharej\033[93m Public IP :\033[0m ")
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input("\033[93mEnter \033[92mIRAN [5]\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            save_stuff_sit5(private_ip_private, local_ip_private, remote_ip_private)
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Please select a valid option.")


def iranfive5_editmulti_local():
    local_ip_private = local_ip("/etc/private5.sh")
    remote_ip_private = remote_ip("/etc/private5.sh")
    private_ip_private = private_ip5("/etc/private5.sh")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    while True:
        os.system("clear")
        display_stuff_privateiranfive5(
            local_ip_private, remote_ip_private, private_ip_private
        )

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mPrivate[SIT]\033[93m IRAN [5] Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN [5]\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mKharej \033[92m Public IP\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mIRAN [5]\033[93m Public IP :\033[0m ")
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input("\033[93mEnter \033[92mKharej\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            save_stuff_sit5(private_ip_private, local_ip_private, remote_ip_private)
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Please select a valid option.")


# ipsec


def privatesec_multiedit_local():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print("\033[92m(   ) \033[92mEdit local\033[93m Private + IPSEC Menu\033[0m")
    print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[96mKharej\033[92m[5] \033[93mIRAN\033[92m[1]\033[0m")
    print("2. \033[96mKharej\033[92m[1] \033[93mIRAN\033[92m[5]  \033[0m")
    print("3. \033[94mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        choice = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if choice == "1":
            privatesec_edit_localkharej_multi()
            break
        elif choice == "2":
            privatesec_edit_localiran_multi()
            break
        elif choice == "3":
            clear()
            private_multiedit_local()
            break
        else:
            print("Invalid choice.")


def privatesec_edit_localiran_multi():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print(
        "\033[92m(   ) \033[93mPrivate + IPSEC \033[92m[5]IRAN\033[96m [1]Kharej\033[93m Menu\033[0m"
    )
    print(
        '\033[92m "-"\033[93m══════════════════════════════════════════════════════════\033[0m'
    )
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[92mIRAN[1]\033[0m")
    print("2. \033[92mIRAN[2]\033[0m")
    print("3. \033[93mIRAN[3]\033[0m")
    print("4. \033[92mIRAN[4]\033[0m")
    print("5. \033[92mIRAN[5]\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    print("6. \033[93mKharej Menu\033[0m")
    print("0. \033[94mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if server_type == "1":
            iranfive1sec_editmulti_local()
            break
        elif server_type == "2":
            iranfive2sec_editmulti_local()
            break
        elif server_type == "3":
            iranfive3sec_editmulti_local()
            break
        elif server_type == "4":
            iranfive4sec_editmulti_local()
            break
        elif server_type == "5":
            iranfive5sec_editmulti_local()
            break
        elif server_type == "6":
            kharejonesec_editmulti_localmenu()
            break
        elif server_type == "0":
            os.system("clear")
            privatesec_multiedit_local()
            break
        else:
            print("Invalid choice.")


def kharejonesec_editmulti_localmenu():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print(
        "\033[92m(   ) \033[93mPrivate + IPSEC \033[92m[5]IRAN\033[96m [1]Kharej\033[93m Menu\033[0m"
    )
    print(
        '\033[92m "-"\033[93m══════════════════════════════════════════════════════════\033[0m'
    )
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[92mServer[1]\033[0m")
    print("2. \033[92mServer[2]\033[0m")
    print("3. \033[93mServer[3]\033[0m")
    print("4. \033[92mServer[4]\033[0m")
    print("5. \033[92mServer[5]\033[0m")
    print("0. \033[94mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if server_type == "1":
            kharejone1sec_editmulti_local()
            break
        elif server_type == "2":
            kharejone2sec_editmulti_local()
            break
        elif server_type == "3":
            kharejone3sec_editmulti_local()
            break
        elif server_type == "4":
            kharejone4sec_editmulti_local()
            break
        elif server_type == "5":
            kharejone5sec_editmulti_local()
            break
        elif server_type == "0":
            os.system("clear")
            privatesec_multiedit_local()
            break
        else:
            print("Invalid choice.")


def privatesec_edit_localkharej_multi():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print(
        "\033[92m(   ) \033[93mPrivate + IPSEC \033[92m[5]Kharej\033[96m [1]IRAN\033[93m Menu\033[0m"
    )
    print(
        '\033[92m "-"\033[93m══════════════════════════════════════════════════════════\033[0m'
    )
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[92mKharej[1]\033[0m")
    print("2. \033[92mKharej[2]\033[0m")
    print("3. \033[93mKharej[3]\033[0m")
    print("4. \033[92mKharej[4]\033[0m")
    print("5. \033[92mKharej[5]\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    print("6. \033[93mIRAN Menu\033[0m")
    print("0. \033[94mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if server_type == "1":
            kharej1sec_editmulti_local()
            break
        elif server_type == "2":
            kharej2sec_editmulti_local()
            break
        elif server_type == "3":
            kharej3sec_editmulti_local()
            break
        elif server_type == "4":
            kharej4sec_editmulti_local()
            break
        elif server_type == "5":
            kharej5sec_editmulti_local()
            break
        elif server_type == "6":
            iransec_editmulti_local()
            break
        elif server_type == "0":
            os.system("clear")
            privatesec_multiedit_local()
            break
        else:
            print("Invalid choice.")


def iransec_editmulti_local():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print(
        "\033[92m(   ) \033[93mPrivate + IPSEC \033[92m[5]Kharej\033[96m [1]IRAN\033[93m Menu\033[0m"
    )
    print(
        '\033[92m "-"\033[93m══════════════════════════════════════════════════════════\033[0m'
    )
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[92mServer[1]\033[0m")
    print("2. \033[92mServer[2]\033[0m")
    print("3. \033[93mServer[3]\033[0m")
    print("4. \033[92mServer[4]\033[0m")
    print("5. \033[92mServer[5]\033[0m")
    print("0. \033[94mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if server_type == "1":
            ir1sec_editmulti_local()
            break
        elif server_type == "2":
            ir2sec_editmulti_local()
            break
        elif server_type == "3":
            ir3sec_editmulti_local()
            break
        elif server_type == "4":
            ir4sec_editmulti_local()
            break
        elif server_type == "5":
            ir5sec_editmulti_local()
            break
        elif server_type == "0":
            os.system("clear")
            privatesec_multiedit_local()
            break
        else:
            print("Invalid choice.")


# private ipsec predefined
def ipsecsecret_key(name):
    try:
        with open(name, "r") as f:
            content = f.read()
        match = re.search(r'PSK "(\S+)"', content)
        if match:
            return match.group(1)
        else:
            print("\033[91mno IPsec key found\033[0m")
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")
    return None


def update_ipsecsecret(name, new_secret):
    try:
        with open(name, "r") as f:
            content = f.read()

        new_content = re.sub(r'PSK "\S+"', f'PSK "{new_secret}"', content)

        with open(name, "w") as f:
            f.write(new_content)
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def update_ipsec_conf_sitv6(name, new_private_ip):
    try:
        with open(name, "r") as f:
            content = f.read()

        ip_parts = new_private_ip.split(":")
        if new_private_ip.endswith(":2"):
            ip_parts[-1] = "1"
        else:
            ip_parts[-1] = "2"
        counterpart_ip = ":".join(ip_parts)

        new_content = re.sub(
            r"leftsubnet=\S+", f"leftsubnet={new_private_ip}/64", content
        )
        new_content = re.sub(r"leftid=\S+", f"leftid={new_private_ip}", new_content)
        new_content = re.sub(r"right=\S+", f"right={counterpart_ip}", new_content)
        new_content = re.sub(
            r"rightsubnet=\S+", f"rightsubnet={counterpart_ip}/64", new_content
        )

        with open(name, "w") as f:
            f.write(new_content)
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def display_ipsecsecret(secret_key):
    box_width = 50
    print("\033[93m╭" + "─" * (box_width - 2) + "╮\033[0m")
    print(f"\033[93m Title:        \033[93m IPsec Secret Key\033[0m")
    print(f"\033[97m──────────────────────────────────────\033[0m")
    print(f"\033[93m IPsec Key:  \033[97m{secret_key}\033[0m")
    print("\033[93m╰" + "─" * (box_width - 2) + "╯\033[0m")


def update_ipsec_ip(new_vxlan_ip):
    def opposite_ip(ip):
        if ":" in ip:
            parts = ip.split(":")
            if parts[-1].endswith("1"):
                parts[-1] = parts[-1][:-1] + "2"
            else:
                parts[-1] = parts[-1][:-1] + "1"
            return ":".join(parts)
        else:
            octets = ip.split(".")
            if octets[-1] == "1":
                octets[-1] = "2"
            else:
                octets[-1] = "1"
            return ".".join(octets)

    secrets_file = "/etc/ipsec.secrets"
    opposite_ip_addr = opposite_ip(new_vxlan_ip)

    with open(secrets_file, "r") as file:
        lines = file.readlines()

    new_lines = []
    for line in lines:
        if ": PSK" in line:
            parts = line.split()
            if len(parts) > 2:
                new_line = (
                    f'{opposite_ip_addr} {new_vxlan_ip} : PSK "{parts[-1][1:-1]}"'
                )
                new_lines.append(new_line + "\n")
            else:
                new_lines.append(line)
        else:
            new_lines.append(line)

    with open(secrets_file, "w") as file:
        file.writelines(new_lines)


# changes starts from here 1


# iran ipsec conf
def update_ipsec_conf_iran1(name, new_private_ip):
    try:
        with open(name, "r") as f:
            content = f.readlines()

        start_idx, end_idx = None, None
        for i, line in enumerate(content):
            if line.strip() == "conn private1":
                start_idx = i
            elif start_idx is not None and line.strip().startswith("conn "):
                end_idx = i
                break

        if start_idx is None:
            print("\033[91m'conn private1' section not found\033[0m")
            return

        if end_idx is None:
            end_idx = len(content)

        section = content[start_idx:end_idx]
        ip_parts = new_private_ip.split(":")
        if new_private_ip.endswith(":2"):
            ip_parts[-1] = "1"
        else:
            ip_parts[-1] = "2"
        counterpart_ip = ":".join(ip_parts)

        new_section = []
        for line in section:
            line = re.sub(r"leftsubnet=\S+", f"leftsubnet={new_private_ip}/64", line)
            line = re.sub(r"leftid=\S+", f"leftid={new_private_ip}", line)
            line = re.sub(r"right=\S+", f"right={counterpart_ip}", line)
            line = re.sub(r"rightsubnet=\S+", f"rightsubnet={counterpart_ip}/64", line)
            new_section.append(line)

        new_content = content[:start_idx] + new_section + content[end_idx:]

        with open(name, "w") as f:
            f.writelines(new_content)

        print(f"\033[92m'conn private1' section updated successfully\033[0m")
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def save_stuff_sitsec_kharej1(private_ip, local_ip, remote_ip, ipsecsecret):
    current_ips = get_current_private_ips1()
    current_ip = current_ips["private"]

    if current_ip:
        delete_ufw_rules(current_ip)

    add_ufw_rules(private_ip)

    counterpart_ip = wtb_opposite_ip(private_ip)
    try:
        update_pingfile_sit("/etc/ping_v61.sh", counterpart_ip)
        update_ipfile_sit1("/etc/private1.sh", private_ip, update_type="private")
        update_ipfile_sit1("/etc/private1.sh", local_ip, update_type="local")
        update_ipfile_sit1("/etc/private1.sh", remote_ip, update_type="remote")
        update_ipsecsecret("/etc/ipsec.secrets", ipsecsecret)
        update_ipsec_conf_sitv6("/etc/ipsec1.conf", private_ip)

        interface = "azumi1"
        subprocess.run(["ip", "link", "set", "dev", interface, "down"], check=True)
        subprocess.run(["ip", "link", "delete", interface], check=True)
    except subprocess.CalledProcessError as e:
        print("\033[91merror bringing interface down or deleting it\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")

    try:
        script = "/etc/private1.sh"
        result = subprocess.run(["/bin/bash", script], capture_output=True, text=True)
        if "RTNETLINK answers: File exists" in result.stderr:
            print("Network interface already exists, don't mind this")
        else:
            result.check_returncode()
        subprocess.run(["sudo", "systemctl", "daemon-reload"], check=True)
        subprocess.run(["systemctl", "restart", "ping_v61"], check=True)

        result = subprocess.run(
            [
                "systemctl",
                "list-units",
                "--full",
                "--all",
                "strong-azumi1.service",
            ],
            capture_output=True,
            text=True,
        )
        if "strong-azumi1.service" in result.stdout:
            subprocess.run(["systemctl", "restart", "strong-azumi1"], check=True)
        else:
            print(
                "\033[91mstrong-azumi service not found. don't mind this error\033[0m"
            )

        display_checkmark(
            f"\033[92mChanges saved and {interface} interface & IPSEC updated successfully!\033[0m"
        )
    except subprocess.CalledProcessError as e:
        print(f"\033[91merror applying network stuff - privateipsec\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def save_stuff_sitsec_iran1(private_ip, local_ip, remote_ip, ipsecsecret):
    current_ips = get_current_private_ips1()
    current_ip = current_ips["private"]

    if current_ip:
        delete_ufw_rules(current_ip)

    add_ufw_rules(private_ip)

    counterpart_ip = wtb_opposite_ip(private_ip)
    try:
        update_pingfile_sit("/etc/ping_v61.sh", counterpart_ip)
        update_ipfile_sit1("/etc/private1.sh", private_ip, update_type="private")
        update_ipfile_sit1("/etc/private1.sh", local_ip, update_type="local")
        update_ipfile_sit1("/etc/private1.sh", remote_ip, update_type="remote")
        update_ipsecsecret("/etc/ipsec.secrets", ipsecsecret)
        update_ipsec_conf_iran1("/etc/ipsec1.conf", private_ip)

        interface = "azumi1"
        subprocess.run(["ip", "link", "set", "dev", interface, "down"], check=True)
        subprocess.run(["ip", "link", "delete", interface], check=True)
    except subprocess.CalledProcessError as e:
        print("\033[91merror bringing interface down or deleting it\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")

    try:
        script = "/etc/private1.sh"
        result = subprocess.run(["/bin/bash", script], capture_output=True, text=True)
        if "RTNETLINK answers: File exists" in result.stderr:
            print("Network interface already exists, don't mind this")
        else:
            result.check_returncode()
        subprocess.run(["sudo", "systemctl", "daemon-reload"], check=True)
        subprocess.run(["systemctl", "restart", "ping_v61"], check=True)

        result = subprocess.run(
            [
                "systemctl",
                "list-units",
                "--full",
                "--all",
                "strong-azumi1.service",
            ],
            capture_output=True,
            text=True,
        )
        if "strong-azumi1.service" in result.stdout:
            subprocess.run(["systemctl", "restart", "strong-azumi1"], check=True)
        else:
            print(
                "\033[91mstrong-azumi service not found. don't mind this error\033[0m"
            )

        display_checkmark(
            f"\033[92mChanges saved and {interface} interface & IPSEC updated successfully!\033[0m"
        )
    except subprocess.CalledProcessError as e:
        print(f"\033[91merror applying network stuff - privateipsec\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def update_ipsec_ip_multi(new_vxlan_ip):
    def opposite_ip(ip):
        if ":" in ip:
            parts = ip.split(":")
            if parts[-1].endswith("1"):
                parts[-1] = parts[-1][:-1] + "2"
            else:
                parts[-1] = parts[-1][:-1] + "1"
            return ":".join(parts)
        else:
            octets = ip.split(".")
            if octets[-1] == "1":
                octets[-1] = "2"
            else:
                octets[-1] = "1"
            return ".".join(octets)

    secrets_file = "/etc/ipsec.secrets"
    opposite_ip_addr = opposite_ip(new_vxlan_ip)

    with open(secrets_file, "r") as file:
        lines = file.readlines()

    new_lines = []
    modified = False
    for line in lines:
        if not modified and ": PSK" in line:
            parts = line.split()
            if len(parts) > 2:
                new_line = (
                    f'{opposite_ip_addr} {new_vxlan_ip} : PSK "{parts[-1][1:-1]}"'
                )
                new_lines.append(new_line + "\n")
                modified = True
            else:
                new_lines.append(line)
        else:
            new_lines.append(line)

    with open(secrets_file, "w") as file:
        file.writelines(new_lines)


def ir1sec_editmulti_local():
    local_ip_private = local_ip("/etc/private1.sh")
    remote_ip_private = remote_ip("/etc/private1.sh")
    private_ip_private = private_ip1("/etc/private1.sh")
    ipsecsecret_key_private = ipsecsecret_key("/etc/ipsec.secrets")

    if (
        not local_ip_private
        or not remote_ip_private
        or not private_ip_private
        or not ipsecsecret_key_private
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_privateiran1(
            local_ip_private, remote_ip_private, private_ip_private
        )

        display_ipsecsecret(ipsecsecret_key_private)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mPrivate + IPSEC\033[93m IRAN - \033[96mServer [1]\033[93m Menu\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN \033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mKHAREJ [1]\033[92m Public IP\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[93mChange IPsec \033[92mSecret Key\033[0m")
        print("5. \033[96mSave Stuff\033[0m")
        print("0. \033[96mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter new private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip

            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mIRAN\033[93m Public IP:\033[0m ")
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mKHAREJ [1]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_secret = input(
                "\033[93mEnter new \033[92mIPsec \033[93mSecret Key: \033[0m"
            )
            if new_secret:
                ipsecsecret_key_private = new_secret
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "5":
            save_stuff_sitsec_iran1(
                private_ip_private,
                local_ip_private,
                remote_ip_private,
                ipsecsecret_key_private,
            )
            update_ipsec_ip_multi(private_ip_private)
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Please select a valid option.")


def kharej1sec_editmulti_local():
    local_ip_private = local_ip("/etc/private1.sh")
    remote_ip_private = remote_ip("/etc/private1.sh")
    private_ip_private = private_ip1("/etc/private1.sh")
    ipsecsecret_key_private = ipsecsecret_key("/etc/ipsec.secrets")

    if (
        not local_ip_private
        or not remote_ip_private
        or not private_ip_private
        or not ipsecsecret_key_private
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_privatekharej1(
            local_ip_private, remote_ip_private, private_ip_private
        )

        display_ipsecsecret(ipsecsecret_key_private)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mPrivate + IPSEC\033[93m Kharej [1] Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej [1] \033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mIRAN \033[92m Public IP\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IP \033[0m")
        print("4. \033[93mChange IPsec \033[92mSecret Key\033[0m")
        print("5. \033[96mSave Stuff\033[0m")
        print("0. \033[96mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter new private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip

            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mKharej [1]\033[93m Public IP:\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input("\033[93mEnter \033[92mIRAN\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_secret = input(
                "\033[93mEnter new \033[92mIPsec \033[93mSecret Key: \033[0m"
            )
            if new_secret:
                ipsecsecret_key_private = new_secret
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "5":
            save_stuff_sitsec_kharej1(
                private_ip_private,
                local_ip_private,
                remote_ip_private,
                ipsecsecret_key_private,
            )
            update_ipsec_ip(private_ip_private)
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Please select a valid option.")

# changes starts from here 2


# iran ipsec conf
def update_ipsec_conf_iran2(name, new_private_ip):
    try:
        with open(name, "r") as f:
            content = f.readlines()

        start_idx, end_idx = None, None
        for i, line in enumerate(content):
            if line.strip() == "conn private2":
                start_idx = i
            elif start_idx is not None and line.strip().startswith("conn "):
                end_idx = i
                break

        if start_idx is None:
            print("\033[91m'conn private2' section not found\033[0m")
            return

        if end_idx is None:
            end_idx = len(content)

        section = content[start_idx:end_idx]
        ip_parts = new_private_ip.split(":")
        if new_private_ip.endswith(":2"):
            ip_parts[-1] = "1"
        else:
            ip_parts[-1] = "2"
        counterpart_ip = ":".join(ip_parts)

        new_section = []
        for line in section:
            line = re.sub(r"leftsubnet=\S+", f"leftsubnet={new_private_ip}/64", line)
            line = re.sub(r"leftid=\S+", f"leftid={new_private_ip}", line)
            line = re.sub(r"right=\S+", f"right={counterpart_ip}", line)
            line = re.sub(r"rightsubnet=\S+", f"rightsubnet={counterpart_ip}/64", line)
            new_section.append(line)

        new_content = content[:start_idx] + new_section + content[end_idx:]

        with open(name, "w") as f:
            f.writelines(new_content)

        print(f"\033[92m'conn private2' section updated successfully\033[0m")
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def save_stuff_sitsec_kharej2(private_ip, local_ip, remote_ip, ipsecsecret):
    current_ips = get_current_private_ips2()
    current_ip = current_ips["private"]

    if current_ip:
        delete_ufw_rules(current_ip)

    add_ufw_rules(private_ip)

    counterpart_ip = wtb_opposite_ip(private_ip)
    try:
        update_pingfile_sit("/etc/ping_v62.sh", counterpart_ip)
        update_ipfile_sit2("/etc/private2.sh", private_ip, update_type="private")
        update_ipfile_sit2("/etc/private2.sh", local_ip, update_type="local")
        update_ipfile_sit2("/etc/private2.sh", remote_ip, update_type="remote")
        update_ipsecsecret("/etc/ipsec.secrets", ipsecsecret)
        update_ipsec_conf_sitv6("/etc/ipsec1.conf", private_ip)

        interface = "azumi2"
        subprocess.run(["ip", "link", "set", "dev", interface, "down"], check=True)
        subprocess.run(["ip", "link", "delete", interface], check=True)
    except subprocess.CalledProcessError as e:
        print("\033[91merror bringing interface down or deleting it\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")

    try:
        script = "/etc/private2.sh"
        result = subprocess.run(["/bin/bash", script], capture_output=True, text=True)
        if "RTNETLINK answers: File exists" in result.stderr:
            print("Network interface already exists, don't mind this")
        else:
            result.check_returncode()
        subprocess.run(["sudo", "systemctl", "daemon-reload"], check=True)
        subprocess.run(["systemctl", "restart", "ping_v62"], check=True)

        result = subprocess.run(
            [
                "systemctl",
                "list-units",
                "--full",
                "--all",
                "strong-azumi1.service",
            ],
            capture_output=True,
            text=True,
        )
        if "strong-azumi1.service" in result.stdout:
            subprocess.run(["systemctl", "restart", "strong-azumi1"], check=True)
        else:
            print(
                "\033[91mstrong-azumi service not found. don't mind this error\033[0m"
            )

        display_checkmark(
            f"\033[92mChanges saved and {interface} interface & IPSEC updated successfully!\033[0m"
        )
    except subprocess.CalledProcessError as e:
        print(f"\033[91merror applying network stuff - privateipsec\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def save_stuff_sitsec_iran2(private_ip, local_ip, remote_ip, ipsecsecret):
    current_ips = get_current_private_ips2()
    current_ip = current_ips["private"]

    if current_ip:
        delete_ufw_rules(current_ip)

    add_ufw_rules(private_ip)

    counterpart_ip = wtb_opposite_ip(private_ip)
    try:
        update_pingfile_sit("/etc/ping_v62.sh", counterpart_ip)
        update_ipfile_sit2("/etc/private2.sh", private_ip, update_type="private")
        update_ipfile_sit2("/etc/private2.sh", local_ip, update_type="local")
        update_ipfile_sit2("/etc/private2.sh", remote_ip, update_type="remote")
        update_ipsecsecret("/etc/ipsec.secrets", ipsecsecret)
        update_ipsec_conf_iran2("/etc/ipsec1.conf", private_ip)

        interface = "azumi2"
        subprocess.run(["ip", "link", "set", "dev", interface, "down"], check=True)
        subprocess.run(["ip", "link", "delete", interface], check=True)
    except subprocess.CalledProcessError as e:
        print("\033[91merror bringing interface down or deleting it\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")

    try:
        script = "/etc/private2.sh"
        result = subprocess.run(["/bin/bash", script], capture_output=True, text=True)
        if "RTNETLINK answers: File exists" in result.stderr:
            print("Network interface already exists, don't mind this")
        else:
            result.check_returncode()
        subprocess.run(["sudo", "systemctl", "daemon-reload"], check=True)
        subprocess.run(["systemctl", "restart", "ping_v62"], check=True)

        result = subprocess.run(
            [
                "systemctl",
                "list-units",
                "--full",
                "--all",
                "strong-azumi1.service",
            ],
            capture_output=True,
            text=True,
        )
        if "strong-azumi1.service" in result.stdout:
            subprocess.run(["systemctl", "restart", "strong-azumi1"], check=True)
        else:
            print(
                "\033[91mstrong-azumi service not found. don't mind this error\033[0m"
            )

        display_checkmark(
            f"\033[92mChanges saved and {interface} interface & IPSEC updated successfully!\033[0m"
        )
    except subprocess.CalledProcessError as e:
        print(f"\033[91merror applying network stuff - privateipsec\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def update_ipsec_ip_multi2(new_vxlan_ip):
    def opposite_ip(ip):
        if ":" in ip:
            parts = ip.split(":")
            if parts[-1].endswith("1"):
                parts[-1] = parts[-1][:-1] + "2"
            else:
                parts[-1] = parts[-1][:-1] + "1"
            return ":".join(parts)
        else:
            octets = ip.split(".")
            if octets[-1] == "1":
                octets[-1] = "2"
            else:
                octets[-1] = "1"
            return ".".join(octets)

    secrets_file = "/etc/ipsec.secrets"
    opposite_ip_addr = opposite_ip(new_vxlan_ip)

    with open(secrets_file, "r") as file:
        lines = file.readlines()

    if len(lines) < 2:
        raise ValueError("The secrets file doesn't have at least 2 lines")

    new_lines = []
    for index, line in enumerate(lines):
        if index == 1 and ": PSK" in line:
            parts = line.split()
            if len(parts) > 2:
                new_line = (
                    f'{opposite_ip_addr} {new_vxlan_ip} : PSK "{parts[-1][1:-1]}"'
                )
                new_lines.append(new_line + "\n")
            else:
                new_lines.append(line)
        else:
            new_lines.append(line)

    with open(secrets_file, "w") as file:
        file.writelines(new_lines)


def update_ipsec_ip_multi3(new_vxlan_ip):
    def opposite_ip(ip):
        if ":" in ip:
            parts = ip.split(":")
            if parts[-1].endswith("1"):
                parts[-1] = parts[-1][:-1] + "2"
            else:
                parts[-1] = parts[-1][:-1] + "1"
            return ":".join(parts)
        else:
            octets = ip.split(".")
            if octets[-1] == "1":
                octets[-1] = "2"
            else:
                octets[-1] = "1"
            return ".".join(octets)

    secrets_file = "/etc/ipsec.secrets"
    opposite_ip_addr = opposite_ip(new_vxlan_ip)

    with open(secrets_file, "r") as file:
        lines = file.readlines()

    if len(lines) < 3:
        raise ValueError("The secrets file doesn't have at least 3 lines")

    new_lines = []
    for index, line in enumerate(lines):
        if index == 2:
            parts = line.split()
            if len(parts) >= 3 and parts[2] == ":":
                new_line = (
                    f'{opposite_ip_addr} {new_vxlan_ip} : PSK "{parts[-1][1:-1]}"'
                )
                new_lines.append(new_line + "\n")
            else:
                new_lines.append(line)
        else:
            new_lines.append(line)

    with open(secrets_file, "w") as file:
        file.writelines(new_lines)


def update_ipsec_ip_multi4(new_vxlan_ip):
    def opposite_ip(ip):
        if ":" in ip:
            parts = ip.split(":")
            if parts[-1].endswith("1"):
                parts[-1] = parts[-1][:-1] + "2"
            else:
                parts[-1] = parts[-1][:-1] + "1"
            return ":".join(parts)
        else:
            octets = ip.split(".")
            if octets[-1] == "1":
                octets[-1] = "2"
            else:
                octets[-1] = "1"
            return ".".join(octets)

    secrets_file = "/etc/ipsec.secrets"
    opposite_ip_addr = opposite_ip(new_vxlan_ip)

    with open(secrets_file, "r") as file:
        lines = file.readlines()

    if len(lines) < 4:
        raise ValueError("The secrets file doesn't have at least 4 lines")

    new_lines = []
    for index, line in enumerate(lines):
        if index == 3:
            parts = line.split()
            if len(parts) >= 3 and parts[2] == ":":
                new_line = (
                    f'{opposite_ip_addr} {new_vxlan_ip} : PSK "{parts[-1][1:-1]}"'
                )
                new_lines.append(new_line + "\n")
            else:
                new_lines.append(line)
        else:
            new_lines.append(line)

    with open(secrets_file, "w") as file:
        file.writelines(new_lines)


def update_ipsec_ip_multi5(new_vxlan_ip):
    def opposite_ip(ip):
        if ":" in ip:
            parts = ip.split(":")
            if parts[-1].endswith("1"):
                parts[-1] = parts[-1][:-1] + "2"
            else:
                parts[-1] = parts[-1][:-1] + "1"
            return ":".join(parts)
        else:
            octets = ip.split(".")
            if octets[-1] == "1":
                octets[-1] = "2"
            else:
                octets[-1] = "1"
            return ".".join(octets)

    secrets_file = "/etc/ipsec.secrets"
    opposite_ip_addr = opposite_ip(new_vxlan_ip)

    with open(secrets_file, "r") as file:
        lines = file.readlines()

    if len(lines) < 5:
        raise ValueError("The secrets file doesn't have at least 5 lines")

    new_lines = []
    for index, line in enumerate(lines):
        if index == 4:
            parts = line.split()
            if len(parts) >= 3 and parts[2] == ":":
                new_line = (
                    f'{opposite_ip_addr} {new_vxlan_ip} : PSK "{parts[-1][1:-1]}"'
                )
                new_lines.append(new_line + "\n")
            else:
                new_lines.append(line)
        else:
            new_lines.append(line)

    with open(secrets_file, "w") as file:
        file.writelines(new_lines)


def ir2sec_editmulti_local():
    local_ip_private = local_ip("/etc/private2.sh")
    remote_ip_private = remote_ip("/etc/private2.sh")
    private_ip_private = private_ip2("/etc/private2.sh")
    ipsecsecret_key_private = ipsecsecret_key("/etc/ipsec.secrets")

    if (
        not local_ip_private
        or not remote_ip_private
        or not private_ip_private
        or not ipsecsecret_key_private
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_privateiran2(
            local_ip_private, remote_ip_private, private_ip_private
        )

        display_ipsecsecret(ipsecsecret_key_private)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mPrivate + IPSEC\033[93m IRAN - \033[96mServer [2]\033[93m Menu\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN \033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mKHAREJ [2]\033[92m Public IP\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[93mChange IPsec \033[92mSecret Key\033[0m")
        print("5. \033[96mSave Stuff\033[0m")
        print("0. \033[96mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter new private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip

            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mIRAN\033[93m Public IP:\033[0m ")
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mKHAREJ [2]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_secret = input(
                "\033[93mEnter new \033[92mIPsec \033[93mSecret Key: \033[0m"
            )
            if new_secret:
                ipsecsecret_key_private = new_secret
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "5":
            save_stuff_sitsec_iran2(
                private_ip_private,
                local_ip_private,
                remote_ip_private,
                ipsecsecret_key_private,
            )
            update_ipsec_ip_multi2(private_ip_private)
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Please select a valid option.")


def kharej2sec_editmulti_local():
    local_ip_private = local_ip("/etc/private2.sh")
    remote_ip_private = remote_ip("/etc/private2.sh")
    private_ip_private = private_ip2("/etc/private2.sh")
    ipsecsecret_key_private = ipsecsecret_key("/etc/ipsec.secrets")

    if (
        not local_ip_private
        or not remote_ip_private
        or not private_ip_private
        or not ipsecsecret_key_private
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_privatekharej2(
            local_ip_private, remote_ip_private, private_ip_private
        )

        display_ipsecsecret(ipsecsecret_key_private)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mPrivate + IPSEC\033[93m Kharej [2] Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej [2] \033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mIRAN \033[92m Public IP\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IP \033[0m")
        print("4. \033[93mChange IPsec \033[92mSecret Key\033[0m")
        print("5. \033[96mSave Stuff\033[0m")
        print("0. \033[96mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter new private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip

            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mKharej [2]\033[93m Public IP:\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input("\033[93mEnter \033[92mIRAN\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_secret = input(
                "\033[93mEnter new \033[92mIPsec \033[93mSecret Key: \033[0m"
            )
            if new_secret:
                ipsecsecret_key_private = new_secret
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "5":
            save_stuff_sitsec_kharej2(
                private_ip_private,
                local_ip_private,
                remote_ip_private,
                ipsecsecret_key_private,
            )
            update_ipsec_ip(private_ip_private)
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Please select a valid option.")


# changes starts from here 3


# iran ipsec conf
def update_ipsec_conf_iran3(name, new_private_ip):
    try:
        with open(name, "r") as f:
            content = f.readlines()

        start_idx, end_idx = None, None
        for i, line in enumerate(content):
            if line.strip() == "conn private3":
                start_idx = i
            elif start_idx is not None and line.strip().startswith("conn "):
                end_idx = i
                break

        if start_idx is None:
            print("\033[91m'conn private3' section not found\033[0m")
            return

        if end_idx is None:
            end_idx = len(content)

        section = content[start_idx:end_idx]
        ip_parts = new_private_ip.split(":")
        if new_private_ip.endswith(":2"):
            ip_parts[-1] = "1"
        else:
            ip_parts[-1] = "2"
        counterpart_ip = ":".join(ip_parts)

        new_section = []
        for line in section:
            line = re.sub(r"leftsubnet=\S+", f"leftsubnet={new_private_ip}/64", line)
            line = re.sub(r"leftid=\S+", f"leftid={new_private_ip}", line)
            line = re.sub(r"right=\S+", f"right={counterpart_ip}", line)
            line = re.sub(r"rightsubnet=\S+", f"rightsubnet={counterpart_ip}/64", line)
            new_section.append(line)

        new_content = content[:start_idx] + new_section + content[end_idx:]

        with open(name, "w") as f:
            f.writelines(new_content)

        print(f"\033[92m'conn private3' section updated successfully\033[0m")
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def save_stuff_sitsec_kharej3(private_ip, local_ip, remote_ip, ipsecsecret):
    current_ips = get_current_private_ips3()
    current_ip = current_ips["private"]

    if current_ip:
        delete_ufw_rules(current_ip)

    add_ufw_rules(private_ip)

    counterpart_ip = wtb_opposite_ip(private_ip)
    try:
        update_pingfile_sit("/etc/ping_v63.sh", counterpart_ip)
        update_ipfile_sit1("/etc/private3.sh", private_ip, update_type="private")
        update_ipfile_sit1("/etc/private3.sh", local_ip, update_type="local")
        update_ipfile_sit1("/etc/private3.sh", remote_ip, update_type="remote")
        update_ipsecsecret("/etc/ipsec.secrets", ipsecsecret)
        update_ipsec_conf_sitv6("/etc/ipsec1.conf", private_ip)

        interface = "azumi3"
        subprocess.run(["ip", "link", "set", "dev", interface, "down"], check=True)
        subprocess.run(["ip", "link", "delete", interface], check=True)
    except subprocess.CalledProcessError as e:
        print("\033[91merror bringing interface down or deleting it\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")

    try:
        script = "/etc/private3.sh"
        result = subprocess.run(["/bin/bash", script], capture_output=True, text=True)
        if "RTNETLINK answers: File exists" in result.stderr:
            print("Network interface already exists, don't mind this")
        else:
            result.check_returncode()
        subprocess.run(["sudo", "systemctl", "daemon-reload"], check=True)
        subprocess.run(["systemctl", "restart", "ping_v63"], check=True)

        result = subprocess.run(
            [
                "systemctl",
                "list-units",
                "--full",
                "--all",
                "strong-azumi1.service",
            ],
            capture_output=True,
            text=True,
        )
        if "strong-azumi1.service" in result.stdout:
            subprocess.run(["systemctl", "restart", "strong-azumi1"], check=True)
        else:
            print(
                "\033[91mstrong-azumi service not found. don't mind this error\033[0m"
            )

        display_checkmark(
            f"\033[92mChanges saved and {interface} interface & IPSEC updated successfully!\033[0m"
        )
    except subprocess.CalledProcessError as e:
        print(f"\033[91merror applying network stuff - privateipsec\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def save_stuff_sitsec_iran3(private_ip, local_ip, remote_ip, ipsecsecret):
    current_ips = get_current_private_ips3()
    current_ip = current_ips["private"]

    if current_ip:
        delete_ufw_rules(current_ip)

    add_ufw_rules(private_ip)

    counterpart_ip = wtb_opposite_ip(private_ip)
    try:
        update_pingfile_sit("/etc/ping_v63.sh", counterpart_ip)
        update_ipfile_sit3("/etc/private3.sh", private_ip, update_type="private")
        update_ipfile_sit3("/etc/private3.sh", local_ip, update_type="local")
        update_ipfile_sit3("/etc/private3.sh", remote_ip, update_type="remote")
        update_ipsecsecret("/etc/ipsec.secrets", ipsecsecret)
        update_ipsec_conf_iran3("/etc/ipsec1.conf", private_ip)

        interface = "azumi3"
        subprocess.run(["ip", "link", "set", "dev", interface, "down"], check=True)
        subprocess.run(["ip", "link", "delete", interface], check=True)
    except subprocess.CalledProcessError as e:
        print("\033[91merror bringing interface down or deleting it\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")

    try:
        script = "/etc/private3.sh"
        result = subprocess.run(["/bin/bash", script], capture_output=True, text=True)
        if "RTNETLINK answers: File exists" in result.stderr:
            print("Network interface already exists, don't mind this")
        else:
            result.check_returncode()
        subprocess.run(["sudo", "systemctl", "daemon-reload"], check=True)
        subprocess.run(["systemctl", "restart", "ping_v63"], check=True)

        result = subprocess.run(
            [
                "systemctl",
                "list-units",
                "--full",
                "--all",
                "strong-azumi1.service",
            ],
            capture_output=True,
            text=True,
        )
        if "strong-azumi1.service" in result.stdout:
            subprocess.run(["systemctl", "restart", "strong-azumi1"], check=True)
        else:
            print(
                "\033[91mstrong-azumi service not found. don't mind this error\033[0m"
            )

        display_checkmark(
            f"\033[92mChanges saved and {interface} interface & IPSEC updated successfully!\033[0m"
        )
    except subprocess.CalledProcessError as e:
        print(f"\033[91merror applying network stuff - privateipsec\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def ir3sec_editmulti_local():
    local_ip_private = local_ip("/etc/private3.sh")
    remote_ip_private = remote_ip("/etc/private3.sh")
    private_ip_private = private_ip3("/etc/private3.sh")
    ipsecsecret_key_private = ipsecsecret_key("/etc/ipsec.secrets")

    if (
        not local_ip_private
        or not remote_ip_private
        or not private_ip_private
        or not ipsecsecret_key_private
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_privateiran3(
            local_ip_private, remote_ip_private, private_ip_private
        )

        display_ipsecsecret(ipsecsecret_key_private)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mPrivate + IPSEC\033[93m IRAN - \033[96mServer [3]\033[93m Menu\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN \033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mKHAREJ [3]\033[92m Public IP\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[93mChange IPsec \033[92mSecret Key\033[0m")
        print("5. \033[96mSave Stuff\033[0m")
        print("0. \033[96mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter new private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip

            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mIRAN\033[93m Public IP:\033[0m ")
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mKHAREJ [3]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_secret = input(
                "\033[93mEnter new \033[92mIPsec \033[93mSecret Key: \033[0m"
            )
            if new_secret:
                ipsecsecret_key_private = new_secret
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "5":
            save_stuff_sitsec_iran3(
                private_ip_private,
                local_ip_private,
                remote_ip_private,
                ipsecsecret_key_private,
            )
            update_ipsec_ip_multi3(private_ip_private)
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Please select a valid option.")


def kharej3sec_editmulti_local():
    local_ip_private = local_ip("/etc/private3.sh")
    remote_ip_private = remote_ip("/etc/private3.sh")
    private_ip_private = private_ip3("/etc/private3.sh")
    ipsecsecret_key_private = ipsecsecret_key("/etc/ipsec.secrets")

    if (
        not local_ip_private
        or not remote_ip_private
        or not private_ip_private
        or not ipsecsecret_key_private
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_privatekharej3(
            local_ip_private, remote_ip_private, private_ip_private
        )

        display_ipsecsecret(ipsecsecret_key_private)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mPrivate + IPSEC\033[93m Kharej [3] Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej [3] \033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mIRAN \033[92m Public IP\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IP \033[0m")
        print("4. \033[93mChange IPsec \033[92mSecret Key\033[0m")
        print("5. \033[96mSave Stuff\033[0m")
        print("0. \033[96mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter new private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip

            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mKharej [3]\033[93m Public IP:\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input("\033[93mEnter \033[92mIRAN\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_secret = input(
                "\033[93mEnter new \033[92mIPsec \033[93mSecret Key: \033[0m"
            )
            if new_secret:
                ipsecsecret_key_private = new_secret
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "5":
            save_stuff_sitsec_kharej3(
                private_ip_private,
                local_ip_private,
                remote_ip_private,
                ipsecsecret_key_private,
            )
            update_ipsec_ip(private_ip_private)
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Please select a valid option.")


# changes starts from here 4


# iran ipsec conf
def update_ipsec_conf_iran4(name, new_private_ip):
    try:
        with open(name, "r") as f:
            content = f.readlines()

        start_idx, end_idx = None, None
        for i, line in enumerate(content):
            if line.strip() == "conn private4":
                start_idx = i
            elif start_idx is not None and line.strip().startswith("conn "):
                end_idx = i
                break

        if start_idx is None:
            print("\033[91m'conn private4' section not found\033[0m")
            return

        if end_idx is None:
            end_idx = len(content)

        section = content[start_idx:end_idx]
        ip_parts = new_private_ip.split(":")
        if new_private_ip.endswith(":2"):
            ip_parts[-1] = "1"
        else:
            ip_parts[-1] = "2"
        counterpart_ip = ":".join(ip_parts)

        new_section = []
        for line in section:
            line = re.sub(r"leftsubnet=\S+", f"leftsubnet={new_private_ip}/64", line)
            line = re.sub(r"leftid=\S+", f"leftid={new_private_ip}", line)
            line = re.sub(r"right=\S+", f"right={counterpart_ip}", line)
            line = re.sub(r"rightsubnet=\S+", f"rightsubnet={counterpart_ip}/64", line)
            new_section.append(line)

        new_content = content[:start_idx] + new_section + content[end_idx:]

        with open(name, "w") as f:
            f.writelines(new_content)

        print(f"\033[92m'conn private4' section updated successfully\033[0m")
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def save_stuff_sitsec_kharej4(private_ip, local_ip, remote_ip, ipsecsecret):
    current_ips = get_current_private_ips4()
    current_ip = current_ips["private"]

    if current_ip:
        delete_ufw_rules(current_ip)

    add_ufw_rules(private_ip)

    counterpart_ip = wtb_opposite_ip(private_ip)
    try:
        update_pingfile_sit("/etc/ping_v64.sh", counterpart_ip)
        update_ipfile_sit4("/etc/private4.sh", private_ip, update_type="private")
        update_ipfile_sit4("/etc/private4.sh", local_ip, update_type="local")
        update_ipfile_sit4("/etc/private4.sh", remote_ip, update_type="remote")
        update_ipsecsecret("/etc/ipsec.secrets", ipsecsecret)
        update_ipsec_conf_sitv6("/etc/ipsec1.conf", private_ip)

        interface = "azumi4"
        subprocess.run(["ip", "link", "set", "dev", interface, "down"], check=True)
        subprocess.run(["ip", "link", "delete", interface], check=True)
    except subprocess.CalledProcessError as e:
        print("\033[91merror bringing interface down or deleting it\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")

    try:
        script = "/etc/private4.sh"
        result = subprocess.run(["/bin/bash", script], capture_output=True, text=True)
        if "RTNETLINK answers: File exists" in result.stderr:
            print("Network interface already exists, don't mind this")
        else:
            result.check_returncode()
        subprocess.run(["sudo", "systemctl", "daemon-reload"], check=True)
        subprocess.run(["systemctl", "restart", "ping_v64"], check=True)

        result = subprocess.run(
            [
                "systemctl",
                "list-units",
                "--full",
                "--all",
                "strong-azumi1.service",
            ],
            capture_output=True,
            text=True,
        )
        if "strong-azumi1.service" in result.stdout:
            subprocess.run(["systemctl", "restart", "strong-azumi1"], check=True)
        else:
            print(
                "\033[91mstrong-azumi service not found. don't mind this error\033[0m"
            )

        display_checkmark(
            f"\033[92mChanges saved and {interface} interface & IPSEC updated successfully!\033[0m"
        )
    except subprocess.CalledProcessError as e:
        print(f"\033[91merror applying network stuff - privateipsec\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def save_stuff_sitsec_iran4(private_ip, local_ip, remote_ip, ipsecsecret):
    current_ips = get_current_private_ips4()
    current_ip = current_ips["private"]

    if current_ip:
        delete_ufw_rules(current_ip)

    add_ufw_rules(private_ip)

    counterpart_ip = wtb_opposite_ip(private_ip)
    try:
        update_pingfile_sit("/etc/ping_v64.sh", counterpart_ip)
        update_ipfile_sit4("/etc/private4.sh", private_ip, update_type="private")
        update_ipfile_sit4("/etc/private4.sh", local_ip, update_type="local")
        update_ipfile_sit4("/etc/private4.sh", remote_ip, update_type="remote")
        update_ipsecsecret("/etc/ipsec.secrets", ipsecsecret)
        update_ipsec_conf_iran1("/etc/ipsec1.conf", private_ip)

        interface = "azumi4"
        subprocess.run(["ip", "link", "set", "dev", interface, "down"], check=True)
        subprocess.run(["ip", "link", "delete", interface], check=True)
    except subprocess.CalledProcessError as e:
        print("\033[91merror bringing interface down or deleting it\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")

    try:
        script = "/etc/private4.sh"
        result = subprocess.run(["/bin/bash", script], capture_output=True, text=True)
        if "RTNETLINK answers: File exists" in result.stderr:
            print("Network interface already exists, don't mind this")
        else:
            result.check_returncode()
        subprocess.run(["sudo", "systemctl", "daemon-reload"], check=True)
        subprocess.run(["systemctl", "restart", "ping_v64"], check=True)

        result = subprocess.run(
            [
                "systemctl",
                "list-units",
                "--full",
                "--all",
                "strong-azumi1.service",
            ],
            capture_output=True,
            text=True,
        )
        if "strong-azumi1.service" in result.stdout:
            subprocess.run(["systemctl", "restart", "strong-azumi1"], check=True)
        else:
            print(
                "\033[91mstrong-azumi service not found. don't mind this error\033[0m"
            )

        display_checkmark(
            f"\033[92mChanges saved and {interface} interface & IPSEC updated successfully!\033[0m"
        )
    except subprocess.CalledProcessError as e:
        print(f"\033[91merror applying network stuff - privateipsec\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def ir4sec_editmulti_local():
    local_ip_private = local_ip("/etc/private4.sh")
    remote_ip_private = remote_ip("/etc/private4.sh")
    private_ip_private = private_ip4("/etc/private4.sh")
    ipsecsecret_key_private = ipsecsecret_key("/etc/ipsec.secrets")

    if (
        not local_ip_private
        or not remote_ip_private
        or not private_ip_private
        or not ipsecsecret_key_private
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_privateiran4(
            local_ip_private, remote_ip_private, private_ip_private
        )

        display_ipsecsecret(ipsecsecret_key_private)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mPrivate + IPSEC\033[93m IRAN - \033[96mServer [4]\033[93m Menu\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN \033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mKHAREJ [4]\033[92m Public IP\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[93mChange IPsec \033[92mSecret Key\033[0m")
        print("5. \033[96mSave Stuff\033[0m")
        print("0. \033[96mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter new private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip

            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mIRAN\033[93m Public IP:\033[0m ")
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mKHAREJ [4]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_secret = input(
                "\033[93mEnter new \033[92mIPsec \033[93mSecret Key: \033[0m"
            )
            if new_secret:
                ipsecsecret_key_private = new_secret
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "5":
            save_stuff_sitsec_iran4(
                private_ip_private,
                local_ip_private,
                remote_ip_private,
                ipsecsecret_key_private,
            )
            update_ipsec_ip_multi4(private_ip_private)
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Please select a valid option.")


def kharej4sec_editmulti_local():
    local_ip_private = local_ip("/etc/private4.sh")
    remote_ip_private = remote_ip("/etc/private4.sh")
    private_ip_private = private_ip4("/etc/private4.sh")
    ipsecsecret_key_private = ipsecsecret_key("/etc/ipsec.secrets")

    if (
        not local_ip_private
        or not remote_ip_private
        or not private_ip_private
        or not ipsecsecret_key_private
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_privatekharej4(
            local_ip_private, remote_ip_private, private_ip_private
        )

        display_ipsecsecret(ipsecsecret_key_private)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mPrivate + IPSEC\033[93m Kharej [4] Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej [4] \033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mIRAN \033[92m Public IP\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IP \033[0m")
        print("4. \033[93mChange IPsec \033[92mSecret Key\033[0m")
        print("5. \033[96mSave Stuff\033[0m")
        print("0. \033[96mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter new private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip

            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mKharej [4]\033[93m Public IP:\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input("\033[93mEnter \033[92mIRAN\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_secret = input(
                "\033[93mEnter new \033[92mIPsec \033[93mSecret Key: \033[0m"
            )
            if new_secret:
                ipsecsecret_key_private = new_secret
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "5":
            save_stuff_sitsec_kharej4(
                private_ip_private,
                local_ip_private,
                remote_ip_private,
                ipsecsecret_key_private,
            )
            update_ipsec_ip(private_ip_private)
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Please select a valid option.")


# changes starts from here 5


# iran ipsec conf
def update_ipsec_conf_iran5(name, new_private_ip):
    try:
        with open(name, "r") as f:
            content = f.readlines()

        start_idx, end_idx = None, None
        for i, line in enumerate(content):
            if line.strip() == "conn private5":
                start_idx = i
            elif start_idx is not None and line.strip().startswith("conn "):
                end_idx = i
                break

        if start_idx is None:
            print("\033[91m'conn private5' section not found\033[0m")
            return

        if end_idx is None:
            end_idx = len(content)

        section = content[start_idx:end_idx]
        ip_parts = new_private_ip.split(":")
        if new_private_ip.endswith(":2"):
            ip_parts[-1] = "1"
        else:
            ip_parts[-1] = "2"
        counterpart_ip = ":".join(ip_parts)

        new_section = []
        for line in section:
            line = re.sub(r"leftsubnet=\S+", f"leftsubnet={new_private_ip}/64", line)
            line = re.sub(r"leftid=\S+", f"leftid={new_private_ip}", line)
            line = re.sub(r"right=\S+", f"right={counterpart_ip}", line)
            line = re.sub(r"rightsubnet=\S+", f"rightsubnet={counterpart_ip}/64", line)
            new_section.append(line)

        new_content = content[:start_idx] + new_section + content[end_idx:]

        with open(name, "w") as f:
            f.writelines(new_content)

        print(f"\033[92m'conn private5' section updated successfully\033[0m")
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def save_stuff_sitsec_kharej5(private_ip, local_ip, remote_ip, ipsecsecret):
    current_ips = get_current_private_ips5()
    current_ip = current_ips["private"]

    if current_ip:
        delete_ufw_rules(current_ip)

    add_ufw_rules(private_ip)

    counterpart_ip = wtb_opposite_ip(private_ip)
    try:
        update_pingfile_sit("/etc/ping_v65.sh", counterpart_ip)
        update_ipfile_sit5("/etc/private5.sh", private_ip, update_type="private")
        update_ipfile_sit5("/etc/private5.sh", local_ip, update_type="local")
        update_ipfile_sit5("/etc/private5.sh", remote_ip, update_type="remote")
        update_ipsecsecret("/etc/ipsec.secrets", ipsecsecret)
        update_ipsec_conf_sitv6("/etc/ipsec1.conf", private_ip)

        interface = "azumi5"
        subprocess.run(["ip", "link", "set", "dev", interface, "down"], check=True)
        subprocess.run(["ip", "link", "delete", interface], check=True)
    except subprocess.CalledProcessError as e:
        print("\033[91merror bringing interface down or deleting it\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")

    try:
        script = "/etc/private5.sh"
        result = subprocess.run(["/bin/bash", script], capture_output=True, text=True)
        if "RTNETLINK answers: File exists" in result.stderr:
            print("Network interface already exists, don't mind this")
        else:
            result.check_returncode()
        subprocess.run(["sudo", "systemctl", "daemon-reload"], check=True)
        subprocess.run(["systemctl", "restart", "ping_v65"], check=True)

        result = subprocess.run(
            [
                "systemctl",
                "list-units",
                "--full",
                "--all",
                "strong-azumi1.service",
            ],
            capture_output=True,
            text=True,
        )
        if "strong-azumi1.service" in result.stdout:
            subprocess.run(["systemctl", "restart", "strong-azumi1"], check=True)
        else:
            print(
                "\033[91mstrong-azumi service not found. don't mind this error\033[0m"
            )

        display_checkmark(
            f"\033[92mChanges saved and {interface} interface & IPSEC updated successfully!\033[0m"
        )
    except subprocess.CalledProcessError as e:
        print(f"\033[91merror applying network stuff - privateipsec\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def save_stuff_sitsec_iran5(private_ip, local_ip, remote_ip, ipsecsecret):
    current_ips = get_current_private_ips5()
    current_ip = current_ips["private"]

    if current_ip:
        delete_ufw_rules(current_ip)

    add_ufw_rules(private_ip)

    counterpart_ip = wtb_opposite_ip(private_ip)
    try:
        update_pingfile_sit("/etc/ping_v65.sh", counterpart_ip)
        update_ipfile_sit5("/etc/private5.sh", private_ip, update_type="private")
        update_ipfile_sit5("/etc/private5.sh", local_ip, update_type="local")
        update_ipfile_sit5("/etc/private5.sh", remote_ip, update_type="remote")
        update_ipsecsecret("/etc/ipsec.secrets", ipsecsecret)
        update_ipsec_conf_iran1("/etc/ipsec1.conf", private_ip)

        interface = "azumi5"
        subprocess.run(["ip", "link", "set", "dev", interface, "down"], check=True)
        subprocess.run(["ip", "link", "delete", interface], check=True)
    except subprocess.CalledProcessError as e:
        print("\033[91merror bringing interface down or deleting it\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")

    try:
        script = "/etc/private5.sh"
        result = subprocess.run(["/bin/bash", script], capture_output=True, text=True)
        if "RTNETLINK answers: File exists" in result.stderr:
            print("Network interface already exists, don't mind this")
        else:
            result.check_returncode()
        subprocess.run(["sudo", "systemctl", "daemon-reload"], check=True)
        subprocess.run(["systemctl", "restart", "ping_v65"], check=True)

        result = subprocess.run(
            [
                "systemctl",
                "list-units",
                "--full",
                "--all",
                "strong-azumi1.service",
            ],
            capture_output=True,
            text=True,
        )
        if "strong-azumi1.service" in result.stdout:
            subprocess.run(["systemctl", "restart", "strong-azumi1"], check=True)
        else:
            print(
                "\033[91mstrong-azumi service not found. don't mind this error\033[0m"
            )

        display_checkmark(
            f"\033[92mChanges saved and {interface} interface & IPSEC updated successfully!\033[0m"
        )
    except subprocess.CalledProcessError as e:
        print(f"\033[91merror applying network stuff - privateipsec\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def ir5sec_editmulti_local():
    local_ip_private = local_ip("/etc/private5.sh")
    remote_ip_private = remote_ip("/etc/private5.sh")
    private_ip_private = private_ip5("/etc/private5.sh")
    ipsecsecret_key_private = ipsecsecret_key("/etc/ipsec.secrets")

    if (
        not local_ip_private
        or not remote_ip_private
        or not private_ip_private
        or not ipsecsecret_key_private
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_privateiran5(
            local_ip_private, remote_ip_private, private_ip_private
        )

        display_ipsecsecret(ipsecsecret_key_private)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mPrivate + IPSEC\033[93m IRAN - \033[96mServer [5]\033[93m Menu\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN \033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mKHAREJ [5]\033[92m Public IP\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[93mChange IPsec \033[92mSecret Key\033[0m")
        print("5. \033[96mSave Stuff\033[0m")
        print("0. \033[96mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter new private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip

            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mIRAN\033[93m Public IP:\033[0m ")
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mKHAREJ [5]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_secret = input(
                "\033[93mEnter new \033[92mIPsec \033[93mSecret Key: \033[0m"
            )
            if new_secret:
                ipsecsecret_key_private = new_secret
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "5":
            save_stuff_sitsec_iran5(
                private_ip_private,
                local_ip_private,
                remote_ip_private,
                ipsecsecret_key_private,
            )
            update_ipsec_ip_multi5(private_ip_private)
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Please select a valid option.")


def kharej5sec_editmulti_local():
    local_ip_private = local_ip("/etc/private5.sh")
    remote_ip_private = remote_ip("/etc/private5.sh")
    private_ip_private = private_ip5("/etc/private5.sh")
    ipsecsecret_key_private = ipsecsecret_key("/etc/ipsec.secrets")

    if (
        not local_ip_private
        or not remote_ip_private
        or not private_ip_private
        or not ipsecsecret_key_private
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_privatekharej5(
            local_ip_private, remote_ip_private, private_ip_private
        )

        display_ipsecsecret(ipsecsecret_key_private)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mPrivate + IPSEC\033[93m Kharej [5] Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej [5] \033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mIRAN \033[92m Public IP\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IP \033[0m")
        print("4. \033[93mChange IPsec \033[92mSecret Key\033[0m")
        print("5. \033[96mSave Stuff\033[0m")
        print("0. \033[96mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter new private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip

            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mKharej [5]\033[93m Public IP:\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input("\033[93mEnter \033[92mIRAN\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_secret = input(
                "\033[93mEnter new \033[92mIPsec \033[93mSecret Key: \033[0m"
            )
            if new_secret:
                ipsecsecret_key_private = new_secret
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "5":
            save_stuff_sitsec_kharej5(
                private_ip_private,
                local_ip_private,
                remote_ip_private,
                ipsecsecret_key_private,
            )
            update_ipsec_ip(private_ip_private)
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Please select a valid option.")


# fiveiran one kharej


def kharejone1sec_editmulti_local():
    local_ip_private = local_ip("/etc/private1.sh")
    remote_ip_private = remote_ip("/etc/private1.sh")
    private_ip_private = private_ip1("/etc/private1.sh")
    ipsecsecret_key_private = ipsecsecret_key("/etc/ipsec.secrets")

    if (
        not local_ip_private
        or not remote_ip_private
        or not private_ip_private
        or not ipsecsecret_key_private
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_privatekharejone1(
            local_ip_private, remote_ip_private, private_ip_private
        )

        display_ipsecsecret(ipsecsecret_key_private)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mPrivate + IPSEC\033[93m Kharej - \033[96mServer [1]\033[93m Menu\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mIRAN \033[96m[1]\033[93m Public IP\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[93mChange IPsec \033[92mSecret Key\033[0m")
        print("5. \033[96mSave Stuff\033[0m")
        print("0. \033[96mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter new private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip

            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mKharej\033[93m Public IP:\033[0m ")
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input("\033[93mEnter \033[92mIRAN [1]\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_secret = input(
                "\033[93mEnter new \033[92mIPsec \033[93mSecret Key: \033[0m"
            )
            if new_secret:
                ipsecsecret_key_private = new_secret
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "5":
            save_stuff_sitsec_iran1(
                private_ip_private,
                local_ip_private,
                remote_ip_private,
                ipsecsecret_key_private,
            )
            update_ipsec_ip_multi(private_ip_private)
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Please select a valid option.")


def iranfive1sec_editmulti_local():
    local_ip_private = local_ip("/etc/private1.sh")
    remote_ip_private = remote_ip("/etc/private1.sh")
    private_ip_private = private_ip1("/etc/private1.sh")
    ipsecsecret_key_private = ipsecsecret_key("/etc/ipsec.secrets")

    if (
        not local_ip_private
        or not remote_ip_private
        or not private_ip_private
        or not ipsecsecret_key_private
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_privateiranfive1(
            local_ip_private, remote_ip_private, private_ip_private
        )

        display_ipsecsecret(ipsecsecret_key_private)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mPrivate + IPSEC\033[93m IRAN [1] Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN [1] \033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mKharej \033[92m Public IP\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IP \033[0m")
        print("4. \033[93mChange IPsec \033[92mSecret Key\033[0m")
        print("5. \033[96mSave Stuff\033[0m")
        print("0. \033[96mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter new private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip

            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mIRAN [1]\033[93m Public IP:\033[0m ")
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input("\033[93mEnter \033[92mKharej\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_secret = input(
                "\033[93mEnter new \033[92mIPsec \033[93mSecret Key: \033[0m"
            )
            if new_secret:
                ipsecsecret_key_private = new_secret
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "5":
            save_stuff_sitsec_kharej1(
                private_ip_private,
                local_ip_private,
                remote_ip_private,
                ipsecsecret_key_private,
            )
            update_ipsec_ip(private_ip_private)
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Please select a valid option.")


def kharejone2sec_editmulti_local():
    local_ip_private = local_ip("/etc/private2.sh")
    remote_ip_private = remote_ip("/etc/private2.sh")
    private_ip_private = private_ip2("/etc/private2.sh")
    ipsecsecret_key_private = ipsecsecret_key("/etc/ipsec.secrets")

    if (
        not local_ip_private
        or not remote_ip_private
        or not private_ip_private
        or not ipsecsecret_key_private
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_privatekharejone2(
            local_ip_private, remote_ip_private, private_ip_private
        )

        display_ipsecsecret(ipsecsecret_key_private)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mPrivate + IPSEC\033[93m Kharej - \033[96mServer [2]\033[93m Menu\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mIRAN \033[96m[2]\033[93m Public IP\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[93mChange IPsec \033[92mSecret Key\033[0m")
        print("5. \033[96mSave Stuff\033[0m")
        print("0. \033[96mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter new private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip

            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mKharej\033[93m Public IP:\033[0m ")
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input("\033[93mEnter \033[92mIRAN [2]\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_secret = input(
                "\033[93mEnter new \033[92mIPsec \033[93mSecret Key: \033[0m"
            )
            if new_secret:
                ipsecsecret_key_private = new_secret
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "5":
            save_stuff_sitsec_iran2(
                private_ip_private,
                local_ip_private,
                remote_ip_private,
                ipsecsecret_key_private,
            )
            update_ipsec_ip_multi2(private_ip_private)
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Please select a valid option.")


def iranfive2sec_editmulti_local():
    local_ip_private = local_ip("/etc/private2.sh")
    remote_ip_private = remote_ip("/etc/private2.sh")
    private_ip_private = private_ip2("/etc/private2.sh")
    ipsecsecret_key_private = ipsecsecret_key("/etc/ipsec.secrets")

    if (
        not local_ip_private
        or not remote_ip_private
        or not private_ip_private
        or not ipsecsecret_key_private
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_privateiranfive2(
            local_ip_private, remote_ip_private, private_ip_private
        )

        display_ipsecsecret(ipsecsecret_key_private)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mPrivate + IPSEC\033[93m IRAN [2] Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN [2] \033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mKharej \033[92m Public IP\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IP \033[0m")
        print("4. \033[93mChange IPsec \033[92mSecret Key\033[0m")
        print("5. \033[96mSave Stuff\033[0m")
        print("0. \033[96mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter new private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip

            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mIRAN [2]\033[93m Public IP:\033[0m ")
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input("\033[93mEnter \033[92mKharej\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_secret = input(
                "\033[93mEnter new \033[92mIPsec \033[93mSecret Key: \033[0m"
            )
            if new_secret:
                ipsecsecret_key_private = new_secret
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "5":
            save_stuff_sitsec_kharej2(
                private_ip_private,
                local_ip_private,
                remote_ip_private,
                ipsecsecret_key_private,
            )
            update_ipsec_ip(private_ip_private)
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Please select a valid option.")


def kharejone3sec_editmulti_local():
    local_ip_private = local_ip("/etc/private3.sh")
    remote_ip_private = remote_ip("/etc/private3.sh")
    private_ip_private = private_ip3("/etc/private3.sh")
    ipsecsecret_key_private = ipsecsecret_key("/etc/ipsec.secrets")

    if (
        not local_ip_private
        or not remote_ip_private
        or not private_ip_private
        or not ipsecsecret_key_private
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_privatekharejone3(
            local_ip_private, remote_ip_private, private_ip_private
        )

        display_ipsecsecret(ipsecsecret_key_private)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mPrivate + IPSEC\033[93m Kharej - \033[96mServer [3]\033[93m Menu\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mIRAN \033[96m[3]\033[93m Public IP\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[93mChange IPsec \033[92mSecret Key\033[0m")
        print("5. \033[96mSave Stuff\033[0m")
        print("0. \033[96mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter new private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip

            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mKharej\033[93m Public IP:\033[0m ")
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input("\033[93mEnter \033[92mIRAN [3]\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_secret = input(
                "\033[93mEnter new \033[92mIPsec \033[93mSecret Key: \033[0m"
            )
            if new_secret:
                ipsecsecret_key_private = new_secret
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "5":
            save_stuff_sitsec_iran3(
                private_ip_private,
                local_ip_private,
                remote_ip_private,
                ipsecsecret_key_private,
            )
            update_ipsec_ip_multi3(private_ip_private)
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Please select a valid option.")


def iranfive3sec_editmulti_local():
    local_ip_private = local_ip("/etc/private3.sh")
    remote_ip_private = remote_ip("/etc/private3.sh")
    private_ip_private = private_ip3("/etc/private3.sh")
    ipsecsecret_key_private = ipsecsecret_key("/etc/ipsec.secrets")

    if (
        not local_ip_private
        or not remote_ip_private
        or not private_ip_private
        or not ipsecsecret_key_private
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_privateiranfive3(
            local_ip_private, remote_ip_private, private_ip_private
        )

        display_ipsecsecret(ipsecsecret_key_private)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mPrivate + IPSEC\033[93m IRAN [3] Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN [3] \033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mKharej \033[92m Public IP\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IP \033[0m")
        print("4. \033[93mChange IPsec \033[92mSecret Key\033[0m")
        print("5. \033[96mSave Stuff\033[0m")
        print("0. \033[96mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter new private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip

            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mIRAN [3]\033[93m Public IP:\033[0m ")
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input("\033[93mEnter \033[92mKharej\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_secret = input(
                "\033[93mEnter new \033[92mIPsec \033[93mSecret Key: \033[0m"
            )
            if new_secret:
                ipsecsecret_key_private = new_secret
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "5":
            save_stuff_sitsec_kharej3(
                private_ip_private,
                local_ip_private,
                remote_ip_private,
                ipsecsecret_key_private,
            )
            update_ipsec_ip(private_ip_private)
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Please select a valid option.")


def kharejone4sec_editmulti_local():
    local_ip_private = local_ip("/etc/private4.sh")
    remote_ip_private = remote_ip("/etc/private4.sh")
    private_ip_private = private_ip4("/etc/private4.sh")
    ipsecsecret_key_private = ipsecsecret_key("/etc/ipsec.secrets")

    if (
        not local_ip_private
        or not remote_ip_private
        or not private_ip_private
        or not ipsecsecret_key_private
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_privatekharejone4(
            local_ip_private, remote_ip_private, private_ip_private
        )

        display_ipsecsecret(ipsecsecret_key_private)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mPrivate + IPSEC\033[93m Kharej - \033[96mServer [4]\033[93m Menu\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mIRAN \033[96m[4]\033[93m Public IP\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[93mChange IPsec \033[92mSecret Key\033[0m")
        print("5. \033[96mSave Stuff\033[0m")
        print("0. \033[96mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter new private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip

            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mKharej\033[93m Public IP:\033[0m ")
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input("\033[93mEnter \033[92mIRAN [4]\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_secret = input(
                "\033[93mEnter new \033[92mIPsec \033[93mSecret Key: \033[0m"
            )
            if new_secret:
                ipsecsecret_key_private = new_secret
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "5":
            save_stuff_sitsec_iran4(
                private_ip_private,
                local_ip_private,
                remote_ip_private,
                ipsecsecret_key_private,
            )
            update_ipsec_ip_multi4(private_ip_private)
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Please select a valid option.")


def iranfive4sec_editmulti_local():
    local_ip_private = local_ip("/etc/private4.sh")
    remote_ip_private = remote_ip("/etc/private4.sh")
    private_ip_private = private_ip4("/etc/private4.sh")
    ipsecsecret_key_private = ipsecsecret_key("/etc/ipsec.secrets")

    if (
        not local_ip_private
        or not remote_ip_private
        or not private_ip_private
        or not ipsecsecret_key_private
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_privateiranfive4(
            local_ip_private, remote_ip_private, private_ip_private
        )

        display_ipsecsecret(ipsecsecret_key_private)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mPrivate + IPSEC\033[93m IRAN [4] Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN [4] \033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mKharej \033[92m Public IP\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IP \033[0m")
        print("4. \033[93mChange IPsec \033[92mSecret Key\033[0m")
        print("5. \033[96mSave Stuff\033[0m")
        print("0. \033[96mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter new private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip

            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mIRAN [4]\033[93m Public IP:\033[0m ")
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input("\033[93mEnter \033[92mKharej\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_secret = input(
                "\033[93mEnter new \033[92mIPsec \033[93mSecret Key: \033[0m"
            )
            if new_secret:
                ipsecsecret_key_private = new_secret
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "5":
            save_stuff_sitsec_kharej4(
                private_ip_private,
                local_ip_private,
                remote_ip_private,
                ipsecsecret_key_private,
            )
            update_ipsec_ip(private_ip_private)
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Please select a valid option.")


def kharejone5sec_editmulti_local():
    local_ip_private = local_ip("/etc/private5.sh")
    remote_ip_private = remote_ip("/etc/private5.sh")
    private_ip_private = private_ip5("/etc/private5.sh")
    ipsecsecret_key_private = ipsecsecret_key("/etc/ipsec.secrets")

    if (
        not local_ip_private
        or not remote_ip_private
        or not private_ip_private
        or not ipsecsecret_key_private
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_privatekharejone5(
            local_ip_private, remote_ip_private, private_ip_private
        )

        display_ipsecsecret(ipsecsecret_key_private)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mPrivate + IPSEC\033[93m Kharej - \033[96mServer [5]\033[93m Menu\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mIRAN \033[96m[5]\033[93m Public IP\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[93mChange IPsec \033[92mSecret Key\033[0m")
        print("5. \033[96mSave Stuff\033[0m")
        print("0. \033[96mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter new private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip

            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mKharej\033[93m Public IP:\033[0m ")
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input("\033[93mEnter \033[92mIRAN [5]\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_secret = input(
                "\033[93mEnter new \033[92mIPsec \033[93mSecret Key: \033[0m"
            )
            if new_secret:
                ipsecsecret_key_private = new_secret
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "5":
            save_stuff_sitsec_iran5(
                private_ip_private,
                local_ip_private,
                remote_ip_private,
                ipsecsecret_key_private,
            )
            update_ipsec_ip_multi5(private_ip_private)
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Please select a valid option.")


def iranfive5sec_editmulti_local():
    local_ip_private = local_ip("/etc/private5.sh")
    remote_ip_private = remote_ip("/etc/private5.sh")
    private_ip_private = private_ip5("/etc/private5.sh")
    ipsecsecret_key_private = ipsecsecret_key("/etc/ipsec.secrets")

    if (
        not local_ip_private
        or not remote_ip_private
        or not private_ip_private
        or not ipsecsecret_key_private
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_privateiranfive5(
            local_ip_private, remote_ip_private, private_ip_private
        )

        display_ipsecsecret(ipsecsecret_key_private)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mPrivate + IPSEC\033[93m IRAN [5] Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN [5] \033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mKharej \033[92m Public IP\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IP \033[0m")
        print("4. \033[93mChange IPsec \033[92mSecret Key\033[0m")
        print("5. \033[96mSave Stuff\033[0m")
        print("0. \033[96mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter new private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip

            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mIRAN [5]\033[93m Public IP:\033[0m ")
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input("\033[93mEnter \033[92mKharej\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_secret = input(
                "\033[93mEnter new \033[92mIPsec \033[93mSecret Key: \033[0m"
            )
            if new_secret:
                ipsecsecret_key_private = new_secret
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "5":
            save_stuff_sitsec_kharej5(
                private_ip_private,
                local_ip_private,
                remote_ip_private,
                ipsecsecret_key_private,
            )
            update_ipsec_ip(private_ip_private)
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Please select a valid option.")


# ipip ipsec


def ip6ip6_multiedit_local():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print("\033[92m(   ) \033[92mEdit local\033[93m IP6IP6 Menu\033[0m")
    print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[92mNo IPSEC\033[0m")
    print("2. \033[93mWith IPSEC\033[0m")
    print("3. \033[94mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        choice = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if choice == "1":
            ip6ip6nosec_multiedit_local()
            break
        elif choice == "2":
            ip6ip6sec_multiedit_local()
            break
        elif choice == "3":
            clear()
            multi_edit_local()
            break
        else:
            print("Invalid choice.")


# ipsec menu
def ip6ip6sec_multiedit_local():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print("\033[92m(   ) \033[92mEdit local\033[93m IP6IP6 + IPSEC Menu\033[0m")
    print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[96mKharej\033[92m[5] \033[93mIRAN\033[92m[1]\033[0m")
    print("2. \033[96mKharej\033[92m[1] \033[93mIRAN\033[92m[5]  \033[0m")
    print("3. \033[94mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        choice = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if choice == "1":
            ip6ip6sec_edit_localkharej_multi()
            break
        elif choice == "2":
            ip6ip6sec_edit_localiran_multi()
            break
        elif choice == "3":
            clear()
            ip6ip6_multiedit_local()
            break
        else:
            print("Invalid choice.")


def ip6ip6sec_edit_localiran_multi():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print(
        "\033[92m(   ) \033[93mIP6IP6 + IPSEC \033[92m[5]IRAN\033[96m [1]Kharej\033[93m Menu\033[0m"
    )
    print(
        '\033[92m "-"\033[93m══════════════════════════════════════════════════════════\033[0m'
    )
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[92mIRAN[1]\033[0m")
    print("2. \033[92mIRAN[2]\033[0m")
    print("3. \033[93mIRAN[3]\033[0m")
    print("4. \033[92mIRAN[4]\033[0m")
    print("5. \033[92mIRAN[5]\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    print("6. \033[93mKharej Menu\033[0m")
    print("0. \033[94mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if server_type == "1":
            ipipiranfive1sec_editmulti_local()
            break
        elif server_type == "2":
            ipipiranfive2sec_editmulti_local()
            break
        elif server_type == "3":
            ipipiranfive3sec_editmulti_local()
            break
        elif server_type == "4":
            ipipiranfive4sec_editmulti_local()
            break
        elif server_type == "5":
            ipipiranfive5sec_editmulti_local()
            break
        elif server_type == "6":
            ipipkharejonesec_editmulti_localmenu()
            break
        elif server_type == "0":
            os.system("clear")
            ip6ip6sec_multiedit_local()
            break
        else:
            print("Invalid choice.")


def ipipkharejonesec_editmulti_localmenu():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print(
        "\033[92m(   ) \033[93mIP6IP6 + IPSEC \033[92m[5]IRAN\033[96m [1]Kharej\033[93m Menu\033[0m"
    )
    print(
        '\033[92m "-"\033[93m══════════════════════════════════════════════════════════\033[0m'
    )
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mThis is Kharej menu:\033[0m")
    print("1. \033[92mServer[1]\033[0m")
    print("2. \033[92mServer[2]\033[0m")
    print("3. \033[93mServer[3]\033[0m")
    print("4. \033[92mServer[4]\033[0m")
    print("5. \033[92mServer[5]\033[0m")
    print("0. \033[94mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if server_type == "1":
            ipipkharejone1sec_editmulti_local()
            break
        elif server_type == "2":
            ipipkharejone2sec_editmulti_local()
            break
        elif server_type == "3":
            ipipkharejone3sec_editmulti_local()
            break
        elif server_type == "4":
            ipipkharejone4sec_editmulti_local()
            break
        elif server_type == "5":
            ipipkharejone5sec_editmulti_local()
            break
        elif server_type == "0":
            os.system("clear")
            ip6ip6sec_multiedit_local()
            break
        else:
            print("Invalid choice.")


def ip6ip6sec_edit_localkharej_multi():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print(
        "\033[92m(   ) \033[93mIP6IP6 + IPSEC \033[92m[5]Kharej\033[96m [1]IRAN\033[93m Menu\033[0m"
    )
    print(
        '\033[92m "-"\033[93m══════════════════════════════════════════════════════════\033[0m'
    )
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[92mKharej[1]\033[0m")
    print("2. \033[92mKharej[2]\033[0m")
    print("3. \033[93mKharej[3]\033[0m")
    print("4. \033[92mKharej[4]\033[0m")
    print("5. \033[92mKharej[5]\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    print("6. \033[93mIRAN Menu\033[0m")
    print("0. \033[94mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if server_type == "1":
            ipipkharej1sec_editmulti_local()
            break
        elif server_type == "2":
            ipipkharej2sec_editmulti_local()
            break
        elif server_type == "3":
            ipipkharej3sec_editmulti_local()
            break
        elif server_type == "4":
            ipipkharej4sec_editmulti_local()
            break
        elif server_type == "5":
            ipipkharej5sec_editmulti_local()
            break
        elif server_type == "6":
            ipipiransec_editmulti_local()
            break
        elif server_type == "0":
            os.system("clear")
            ip6ip6sec_multiedit_local()
            break
        else:
            print("Invalid choice.")


def ipipiransec_editmulti_local():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print(
        "\033[92m(   ) \033[93mIP6IP6 + IPSEC \033[92m[5]Kharej\033[96m [1]IRAN\033[93m Menu\033[0m"
    )
    print(
        '\033[92m "-"\033[93m══════════════════════════════════════════════════════════\033[0m'
    )
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mThis is IRAN menu:\033[0m")
    print("1. \033[92mServer[1]\033[0m")
    print("2. \033[92mServer[2]\033[0m")
    print("3. \033[93mServer[3]\033[0m")
    print("4. \033[92mServer[4]\033[0m")
    print("5. \033[92mServer[5]\033[0m")
    print("0. \033[94mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if server_type == "1":
            ipipir1sec_editmulti_local()
            break
        elif server_type == "2":
            ipipir2sec_editmulti_local()
            break
        elif server_type == "3":
            ipipir3sec_editmulti_local()
            break
        elif server_type == "4":
            ipipir4sec_editmulti_local()
            break
        elif server_type == "5":
            ipipir5sec_editmulti_local()
            break
        elif server_type == "0":
            os.system("clear")
            ip6ip6sec_multiedit_local()
            break
        else:
            print("Invalid choice.")


def local_ip(name):
    try:
        with open(name, "r") as f:
            content = f.read()
        match = re.search(r"local (\S+)", content)
        if match:
            return match.group(1)
        else:
            print(f"\033[91mno local IP found\033[0m")
    except FileNotFoundError:
        print(f"file {name} doesn't exist")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")
    return None


def remote_ip(name):
    try:
        with open(name, "r") as f:
            content = f.read()
        match = re.search(r"remote (\S+)", content)
        if match:
            return match.group(1)
        else:
            print("\033[91mno remote IP found \033[0m")
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")
    return None


def delete_ufw_rules(ip):
    counterpart_ip = wtb_opposite_ip(ip)
    try:
        subprocess.run(["sudo", "ufw", "delete", "allow", "from", ip], check=False)
        subprocess.run(
            ["sudo", "ufw", "delete", "allow", "from", counterpart_ip],
            check=False,
        )
    except subprocess.CalledProcessError as e:
        print(f"\033[91merror deleting UFW rules: {e}\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def add_ufw_rules(ip):
    counterpart_ip = wtb_opposite_ip(ip)
    try:
        subprocess.run(["sudo", "ufw", "allow", "from", ip], check=True)
        subprocess.run(["sudo", "ufw", "allow", "from", counterpart_ip], check=True)
    except subprocess.CalledProcessError as e:
        print(f"\033[91merror adding UFW rules: {e}\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def wtb_opposite_ip(ip):
    if ":" in ip:  # IPv6
        ip_parts = ip.split(":")
        ip_parts[-1] = "1" if ip_parts[-1] == "2" else "2"
        return ":".join(ip_parts)
    else:  # IPv4
        ip_parts = ip.split(".")
        ip_parts[-1] = "1" if ip_parts[-1] == "2" else "2"
        return ".".join(ip_parts)


def update_pingfile(name, new_ip):
    try:
        with open(name, "r") as f:
            content = f.read()

        new_content = re.sub(r'ip_address="[^"]+"', f'ip_address="{new_ip}"', content)

        with open(name, "w") as f:
            f.write(new_content)
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def display_stuff_ip6ip6(local_ip, remote_ip, private_ip):
    lines = [
        f"\033[93mTitle:         IP6IP6 Configuration\033[0m",
        f"\033[97m──────────────────────────────────────\033[0m",
        f"\033[92mLocal IP:       \033[97m{local_ip}\033[0m",
        f"\033[92mRemote IP:      \033[97m{remote_ip}\033[0m",
        f"\033[93mPrivate IP:     \033[97m{private_ip}\033[0m",
    ]
    box_width = 50

    print("\033[93m╭" + "─" * (box_width - 2) + "╮\033[0m")

    for line in lines:
        print(f"\033[93m {line:<{box_width - 4}} \033[0m")

    print("\033[93m╰" + "─" * (box_width - 2) + "╯\033[0m")


def get_ipsecsecret(name):
    try:
        with open(name, "r") as f:
            content = f.read()
        match = re.search(r'PSK "(.*)"', content)
        if match:
            return match.group(1)
        else:
            print("\033[91mno IPsec key found\033[0m")
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")
    return None


def update_ipsecsecret(name, new_secret):
    try:
        with open(name, "r") as f:
            content = f.read()

        new_content = re.sub(r'PSK "\S+"', f'PSK "{new_secret}"', content)

        with open(name, "w") as f:
            f.write(new_content)
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def update_ipsec_ip(new_vxlan_ip):
    def opposite_ip(ip):
        if ":" in ip:
            parts = ip.split(":")
            if parts[-1].endswith("1"):
                parts[-1] = parts[-1][:-1] + "2"
            else:
                parts[-1] = parts[-1][:-1] + "1"
            return ":".join(parts)
        else:
            octets = ip.split(".")
            if octets[-1] == "1":
                octets[-1] = "2"
            else:
                octets[-1] = "1"
            return ".".join(octets)

    secrets_file = "/etc/ipsec.secrets"
    opposite_ip_addr = opposite_ip(new_vxlan_ip)

    with open(secrets_file, "r") as file:
        lines = file.readlines()

    new_lines = []
    for line in lines:
        if ": PSK" in line:
            parts = line.split()
            if len(parts) > 2:
                new_line = (
                    f'{opposite_ip_addr} {new_vxlan_ip} : PSK "{parts[-1][1:-1]}"'
                )
                new_lines.append(new_line + "\n")
            else:
                new_lines.append(line)
        else:
            new_lines.append(line)

    with open(secrets_file, "w") as file:
        file.writelines(new_lines)


def display_checkmark(message):
    print("\u2714 " + message)


def display_ipsecsecret(secret_key):
    box_width = 50
    print("\033[93m╭" + "─" * (box_width - 2) + "╮\033[0m")
    print(f"\033[93m Title:        \033[93m IPsec Secret Key\033[0m")
    print(f"\033[97m──────────────────────────────────────\033[0m")
    print(f"\033[93m IPsec Key:  \033[97m{secret_key}\033[0m")
    print("\033[93m╰" + "─" * (box_width - 2) + "╯\033[0m")


# changes
def update_ipfile_ipip1(name, new_ip, update_type):
    try:
        with open(name, "r") as f:
            content = f.read()

        if update_type == "private":
            new_content = re.sub(
                r"ip (-6 )?addr add [^ ]+/64 dev azumi?",
                f"ip -6 addr add {new_ip}/64 dev azumi",
                content,
            )
            ip_parts = new_ip.split(":")
            if new_ip.endswith(":2"):
                ip_parts[-1] = "1"
            else:
                ip_parts[-1] = "2"
            counterpart_ip = ":".join(ip_parts)
            new_content = re.sub(
                r"ip (-6 )?route add [^ ]+/64 dev azumi?",
                f"ip -6 route add {counterpart_ip}/64 dev azumi",
                new_content,
            )
            update_ipfile_ipip1("/etc/ipip1.sh", new_ip, update_type="ipip_local")
            update_ipfile_ipip1(
                "/etc/ipip1.sh", counterpart_ip, update_type="ipip_remote"
            )
        elif update_type == "local":
            new_content = re.sub(r"local \S+", f"local {new_ip}", content)
        elif update_type == "remote":
            new_content = re.sub(r"remote \S+", f"remote {new_ip}", content)
        elif update_type == "ipip_local":
            new_content = re.sub(r"local \S+", f"local {new_ip}", content)
        elif update_type == "ipip_remote":
            new_content = re.sub(r"remote \S+", f"remote {new_ip}", content)
        elif update_type == "ipsec":
            new_content = re.sub(r"leftsubnet=\S+", f"leftsubnet={new_ip}/64", content)
            new_content = re.sub(r"leftid=\S+", f"leftid={new_ip}", new_content)

            ip_parts = new_ip.split(":")
            if new_ip.endswith(":1"):
                ip_parts[-1] = "2"
            else:
                ip_parts[-1] = "1"
            counterpart_ip = ":".join(ip_parts)
            new_content = re.sub(r"right=\S+", f"right={counterpart_ip}", new_content)
            new_content = re.sub(
                r"rightsubnet=\S+",
                f"rightsubnet={counterpart_ip}/64",
                new_content,
            )

        with open(name, "w") as f:
            f.write(new_content)
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def private_ipip1(name):
    try:
        with open(name, "r") as f:
            content = f.read()
        match = re.search(r"ip (-6 )?addr add (\S+)/64 dev azumip?", content)
        if match:
            return match.group(2)
        else:
            print(f"\033[91mno private IP found\033[0m")
    except FileNotFoundError:
        print(f"\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")
    return None


def get_current_private_ipsipip1():
    private_ip_private = private_ipip1("/etc/private1.sh")
    private_ip_ipip = private_ipip1("/etc/ipip1.sh")
    return {
        "private": private_ip_private,
        "ipip": private_ip_ipip,
    }


def save_stuff_ipipseck1(private_ip, local_ip, remote_ip, is_ipip):
    current_ips = get_current_private_ipsipip1()
    current_ip = current_ips["ipip"] if is_ipip else current_ips["private"]

    if current_ip:
        delete_ufw_rules(current_ip)

    add_ufw_rules(private_ip)

    counterpart_ip = wtb_opposite_ip(private_ip)
    try:
        if is_ipip:
            update_pingfile_sit("/etc/ping_ip1.sh", counterpart_ip)
            update_ipfile_ipip1("/etc/ipip1.sh", private_ip, update_type="private")
            update_ipfile_ipip1("/etc/ipip1.sh", remote_ip, update_type="remote")
            update_ipfile_ipip1("/etc/ipsec1.conf", private_ip, update_type="ipsec")
        else:
            update_pingfile_sit("/etc/ping_v61.sh", counterpart_ip)
            update_ipfile_ipip1("/etc/private1.sh", private_ip, update_type="private")
            update_ipfile_ipip1("/etc/private1.sh", local_ip, update_type="local")
            update_ipfile_ipip1("/etc/private1.sh", remote_ip, update_type="remote")

        interface = "azumip1" if is_ipip else "azumi1"
        subprocess.run(["ip", "link", "set", "dev", interface, "down"], check=True)
        subprocess.run(["ip", "link", "delete", interface], check=True)
    except subprocess.CalledProcessError as e:
        print("\033[91merror bringing interface down or deleting it\033[0m")

    try:
        script = "/etc/ipip1.sh" if is_ipip else "/etc/private1.sh"
        result = subprocess.run(["/bin/bash", script], capture_output=True, text=True)
        if "RTNETLINK answers: File exists" in result.stderr:
            print("\033[91madditional ip already exists. Ignoring this error\033[0m")
        else:
            result.check_returncode()
        display_checkmark(
            f"\033[92mChanges saved and {interface} interface updated successfully!\033[0m"
        )

        subprocess.run(["sudo", "systemctl", "daemon-reload"], check=True)
        subprocess.run(["sudo", "systemctl", "restart", "ping_v61"], check=True)
        subprocess.run(["sudo", "systemctl", "restart", "ping_ip1"], check=True)
        subprocess.run(["sudo", "systemctl", "restart", "strong-azumi1"], check=True)

        result = subprocess.run(
            [
                "systemctl",
                "list-units",
                "--full",
                "--all",
                "strong-azumi1.service",
            ],
            capture_output=True,
            text=True,
        )
        if "strong-azumi1.service" in result.stdout:
            subprocess.run(
                ["sudo", "systemctl", "restart", "strong-azumi1"], check=True
            )
        else:
            print("\033[91mstrong service not found, don't mind this error.\033[0m")

    except subprocess.CalledProcessError as e:
        print(f"\033[91merror applying network changes: IPIP + IPSEC error\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")
    # animate("\033[92mSystem services reloaded and restarted successfully!\033[0m")


def save_stuff_ipipseciran1(private_ip, local_ip, remote_ip, is_ipip):
    current_ips = get_current_private_ipsipip1()
    current_ip = current_ips["ipip"] if is_ipip else current_ips["private"]

    if current_ip:
        delete_ufw_rules(current_ip)

    add_ufw_rules(private_ip)

    counterpart_ip = wtb_opposite_ip(private_ip)
    try:
        if is_ipip:
            update_pingfile_sit("/etc/ping_ip1.sh", counterpart_ip)
            update_ipfile_ipip1("/etc/ipip1.sh", private_ip, update_type="private")
            update_ipfile_ipip1("/etc/ipip1.sh", remote_ip, update_type="remote")
            update_ipsec_conf_iranipip1("/etc/ipsec1.conf", private_ip)
        else:
            update_pingfile_sit("/etc/ping_v61.sh", counterpart_ip)
            update_ipfile_ipip1("/etc/private1.sh", private_ip, update_type="private")
            update_ipfile_ipip1("/etc/private1.sh", local_ip, update_type="local")
            update_ipfile_ipip1("/etc/private1.sh", remote_ip, update_type="remote")

        interface = "azumip1" if is_ipip else "azumi1"
        subprocess.run(["ip", "link", "set", "dev", interface, "down"], check=True)
        subprocess.run(["ip", "link", "delete", interface], check=True)
    except subprocess.CalledProcessError as e:
        print("\033[91merror bringing interface down or deleting it\033[0m")

    try:
        script = "/etc/ipip1.sh" if is_ipip else "/etc/private1.sh"
        result = subprocess.run(["/bin/bash", script], capture_output=True, text=True)
        if "RTNETLINK answers: File exists" in result.stderr:
            print("\033[91madditional ip already exists. Ignoring this error\033[0m")
        else:
            result.check_returncode()
        display_checkmark(
            f"\033[92mChanges saved and {interface} interface updated successfully!\033[0m"
        )

        subprocess.run(["sudo", "systemctl", "daemon-reload"], check=True)
        subprocess.run(["sudo", "systemctl", "restart", "ping_v61"], check=True)
        subprocess.run(["sudo", "systemctl", "restart", "ping_ip1"], check=True)
        subprocess.run(["sudo", "systemctl", "restart", "strong-azumi1"], check=True)

        result = subprocess.run(
            [
                "systemctl",
                "list-units",
                "--full",
                "--all",
                "strong-azumi1.service",
            ],
            capture_output=True,
            text=True,
        )
        if "strong-azumi1.service" in result.stdout:
            subprocess.run(
                ["sudo", "systemctl", "restart", "strong-azumi1"], check=True
            )
        else:
            print("\033[91mstrong service not found, don't mind this error.\033[0m")

    except subprocess.CalledProcessError as e:
        print(f"\033[91merror applying network changes: IPIP + IPSEC error\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")
    # animate("\033[92mSystem services reloaded and restarted successfully!\033[0m")


def update_ipsec_conf_iranipip1(name, new_private_ip):
    try:
        with open(name, "r") as f:
            content = f.readlines()

        start_idx, end_idx = None, None
        for i, line in enumerate(content):
            if line.strip() == "conn ipip1":
                start_idx = i
            elif start_idx is not None and line.strip().startswith("conn "):
                end_idx = i
                break

        if start_idx is None:
            print("\033[91m'conn ipip1' section not found\033[0m")
            return

        if end_idx is None:
            end_idx = len(content)

        section = content[start_idx:end_idx]
        ip_parts = new_private_ip.split(":")
        if new_private_ip.endswith(":2"):
            ip_parts[-1] = "1"
        else:
            ip_parts[-1] = "2"
        counterpart_ip = ":".join(ip_parts)

        new_section = []
        for line in section:
            line = re.sub(r"leftsubnet=\S+", f"leftsubnet={new_private_ip}/64", line)
            line = re.sub(r"leftid=\S+", f"leftid={new_private_ip}", line)
            line = re.sub(r"right=\S+", f"right={counterpart_ip}", line)
            line = re.sub(r"rightsubnet=\S+", f"rightsubnet={counterpart_ip}/64", line)
            new_section.append(line)

        new_content = content[:start_idx] + new_section + content[end_idx:]

        with open(name, "w") as f:
            f.writelines(new_content)

        print(f"\033[92m'conn ipip1' section updated successfully\033[0m")
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def ipipkharej1sec_editmulti_local():
    local_ip_private = local_ip("/etc/private1.sh")
    remote_ip_private = remote_ip("/etc/private1.sh")
    private_ip_private = private_ip1("/etc/private1.sh")

    local_ip_ipip = local_ip("/etc/ipip1.sh")
    remote_ip_ipip = remote_ip("/etc/ipip1.sh")
    private_ip_ipip = private_ipip1("/etc/ipip1.sh")

    ipsecsecret = get_ipsecsecret("/etc/ipsec.secrets")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("couldn't retrieve IP addresses from private file")
    if not local_ip_ipip or not remote_ip_ipip or not private_ip_ipip:
        print("couldn't retrieve IP addresses from ipip file")
    if not ipsecsecret:
        print("couldn't retrieve IPsec secret key from ipsec file")

    if (
        not local_ip_private
        or not remote_ip_private
        or not private_ip_private
        or not local_ip_ipip
        or not remote_ip_ipip
        or not private_ip_ipip
        or not ipsecsecret
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_privatekharej1(
            local_ip_private, remote_ip_private, private_ip_private
        )
        display_stuff_ip6ip6(local_ip_ipip, remote_ip_ipip, private_ip_ipip)

        display_ipsecsecret(ipsecsecret)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mIP6IP6 + IPSEC\033[93m Kharej [1] Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej [1] \033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mIRAN \033[92m Public IP\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[93mChange \033[97mIP6IP6 \033[93mPrivate IPV6\033[0m")
        print("5. \033[93mChange IPSEC \033[92mSecret Key\033[0m")
        print("6. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_private = new_ip
                ip_parts = new_ip.split(":")
                if new_ip.endswith(":2"):
                    ip_parts[-1] = "1"
                else:
                    ip_parts[-1] = "2"
                counterpart_ip = ":".join(ip_parts)
                local_ip_ipip = new_ip
                remote_ip_ipip = counterpart_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[IP6IP6]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_ipip
                private_ip_ipip = new_ip

                update_ipfile_ipip1("/etc/ipsec1.conf", new_ip, update_type="ipsec")
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mKharej [1]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input("\033[93mEnter \033[92mIRAN\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "5":
            new_key = input(
                "\033[93mEnter new \033[92mIPsec \033[93mSecret Key: \033[0m"
            )
            if new_key:
                update_ipsecsecret("/etc/ipsec.secrets", new_key)
                ipsecsecret = new_key
            else:
                print("\033[91mCrazy Secret Key\033[0m")
        elif choice == "6":
            save_stuff_ipipseck1(
                private_ip_private,
                local_ip_private,
                remote_ip_private,
                is_ipip=False,
            )
            save_stuff_ipipseck1(
                private_ip_ipip, local_ip_ipip, remote_ip_ipip, is_ipip=True
            )
            update_ipsec_ip(private_ip_ipip)
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Please select a valid option.")


def ipipir1sec_editmulti_local():
    local_ip_private = local_ip("/etc/private1.sh")
    remote_ip_private = remote_ip("/etc/private1.sh")
    private_ip_private = private_ip1("/etc/private1.sh")

    local_ip_ipip = local_ip("/etc/ipip1.sh")
    remote_ip_ipip = remote_ip("/etc/ipip1.sh")
    private_ip_ipip = private_ipip1("/etc/ipip1.sh")

    ipsecsecret = get_ipsecsecret("/etc/ipsec.secrets")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("couldn't retrieve IP addresses from private file")
    if not local_ip_ipip or not remote_ip_ipip or not private_ip_ipip:
        print("couldn't retrieve IP addresses from ipip file")
    if not ipsecsecret:
        print("couldn't retrieve IPsec secret key from ipsec file")

    if (
        not local_ip_private
        or not remote_ip_private
        or not private_ip_private
        or not local_ip_ipip
        or not remote_ip_ipip
        or not private_ip_ipip
        or not ipsecsecret
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_privateiran1(
            local_ip_private, remote_ip_private, private_ip_private
        )
        display_stuff_ip6ip6(local_ip_ipip, remote_ip_ipip, private_ip_ipip)

        display_ipsecsecret(ipsecsecret)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mIP6IP6 + IPSEC\033[93m IRAN Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN \033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mKharej [1]\033[92m Public IP\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[93mChange \033[97mIP6IP6 \033[93mPrivate IPV6\033[0m")
        print("5. \033[93mChange IPSEC \033[92mSecret Key\033[0m")
        print("6. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter new private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_private = new_ip
                ip_parts = new_ip.split(":")
                if new_ip.endswith(":2"):
                    ip_parts[-1] = "1"
                else:
                    ip_parts[-1] = "2"
                counterpart_ip = ":".join(ip_parts)
                local_ip_ipip = new_ip
                remote_ip_ipip = counterpart_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter new private IPv6 address \033[96m[IP6IP6]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_ipip
                private_ip_ipip = new_ip

                update_ipsec_conf_iranipip1("/etc/ipsec1.conf", new_ip)
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mIRAN\033[93m Public IP :\033[0m ")
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mKharej [1]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "5":
            new_key = input(
                "\033[93mEnter new \033[92mIPsec \033[93mSecret Key: \033[0m"
            )
            if new_key:
                update_ipsecsecret("/etc/ipsec.secrets", new_key)
                ipsecsecret = new_key
            else:
                print("\033[91mCrazy Secret Key\033[0m")
        elif choice == "6":
            save_stuff_ipipseciran1(
                private_ip_private,
                local_ip_private,
                remote_ip_private,
                is_ipip=False,
            )
            save_stuff_ipipseciran1(
                private_ip_ipip, local_ip_ipip, remote_ip_ipip, is_ipip=True
            )
            update_ipsec_ip_multi(private_ip_ipip)
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Please select a valid option.")


# changes2


def update_ipfile_ipip2(name, new_ip, update_type):
    try:
        with open(name, "r") as f:
            content = f.read()

        if update_type == "private":
            new_content = re.sub(
                r"ip (-6 )?addr add [^ ]+/64 dev azumi?",
                f"ip -6 addr add {new_ip}/64 dev azumi",
                content,
            )
            ip_parts = new_ip.split(":")
            if new_ip.endswith(":2"):
                ip_parts[-1] = "1"
            else:
                ip_parts[-1] = "2"
            counterpart_ip = ":".join(ip_parts)
            new_content = re.sub(
                r"ip (-6 )?route add [^ ]+/64 dev azumi?",
                f"ip -6 route add {counterpart_ip}/64 dev azumi",
                new_content,
            )
            update_ipfile_ipip2("/etc/ipip2.sh", new_ip, update_type="ipip_local")
            update_ipfile_ipip2(
                "/etc/ipip2.sh", counterpart_ip, update_type="ipip_remote"
            )
        elif update_type == "local":
            new_content = re.sub(r"local \S+", f"local {new_ip}", content)
        elif update_type == "remote":
            new_content = re.sub(r"remote \S+", f"remote {new_ip}", content)
        elif update_type == "ipip_local":
            new_content = re.sub(r"local \S+", f"local {new_ip}", content)
        elif update_type == "ipip_remote":
            new_content = re.sub(r"remote \S+", f"remote {new_ip}", content)
        elif update_type == "ipsec":
            new_content = re.sub(r"leftsubnet=\S+", f"leftsubnet={new_ip}/64", content)
            new_content = re.sub(r"leftid=\S+", f"leftid={new_ip}", new_content)

            ip_parts = new_ip.split(":")
            if new_ip.endswith(":1"):
                ip_parts[-1] = "2"
            else:
                ip_parts[-1] = "1"
            counterpart_ip = ":".join(ip_parts)
            new_content = re.sub(r"right=\S+", f"right={counterpart_ip}", new_content)
            new_content = re.sub(
                r"rightsubnet=\S+",
                f"rightsubnet={counterpart_ip}/64",
                new_content,
            )

        with open(name, "w") as f:
            f.write(new_content)
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def get_current_private_ipsipip2():
    private_ip_private = private_ipip1("/etc/private2.sh")
    private_ip_ipip = private_ipip1("/etc/ipip2.sh")
    return {
        "private": private_ip_private,
        "ipip": private_ip_ipip,
    }


def save_stuff_ipipseck2(private_ip, local_ip, remote_ip, is_ipip):
    current_ips = get_current_private_ipsipip2()
    current_ip = current_ips["ipip"] if is_ipip else current_ips["private"]

    if current_ip:
        delete_ufw_rules(current_ip)

    add_ufw_rules(private_ip)

    counterpart_ip = wtb_opposite_ip(private_ip)
    try:
        if is_ipip:
            update_pingfile_sit("/etc/ping_ip2.sh", counterpart_ip)
            update_ipfile_ipip2("/etc/ipip2.sh", private_ip, update_type="private")
            update_ipfile_ipip2("/etc/ipip2.sh", remote_ip, update_type="remote")
            update_ipfile_ipip2("/etc/ipsec1.conf", private_ip, update_type="ipsec")
        else:
            update_pingfile_sit("/etc/ping_v62.sh", counterpart_ip)
            update_ipfile_ipip2("/etc/private2.sh", private_ip, update_type="private")
            update_ipfile_ipip2("/etc/private2.sh", local_ip, update_type="local")
            update_ipfile_ipip2("/etc/private2.sh", remote_ip, update_type="remote")

        interface = "azumip2" if is_ipip else "azumi2"
        subprocess.run(["ip", "link", "set", "dev", interface, "down"], check=True)
        subprocess.run(["ip", "link", "delete", interface], check=True)
    except subprocess.CalledProcessError as e:
        print("\033[91merror bringing interface down or deleting it\033[0m")

    try:
        script = "/etc/ipip2.sh" if is_ipip else "/etc/private2.sh"
        result = subprocess.run(["/bin/bash", script], capture_output=True, text=True)
        if "RTNETLINK answers: File exists" in result.stderr:
            print("\033[91madditional ip already exists. Ignoring this error\033[0m")
        else:
            result.check_returncode()
        display_checkmark(
            f"\033[92mChanges saved and {interface} interface updated successfully!\033[0m"
        )

        subprocess.run(["sudo", "systemctl", "daemon-reload"], check=True)
        subprocess.run(["sudo", "systemctl", "restart", "ping_v62"], check=True)
        subprocess.run(["sudo", "systemctl", "restart", "ping_ip2"], check=True)
        subprocess.run(["sudo", "systemctl", "restart", "strong-azumi1"], check=True)

        result = subprocess.run(
            [
                "systemctl",
                "list-units",
                "--full",
                "--all",
                "strong-azumi1.service",
            ],
            capture_output=True,
            text=True,
        )
        if "strong-azumi1.service" in result.stdout:
            subprocess.run(
                ["sudo", "systemctl", "restart", "strong-azumi1"], check=True
            )
        else:
            print("\033[91mstrong service not found, don't mind this error.\033[0m")

    except subprocess.CalledProcessError as e:
        print(f"\033[91merror applying network changes: IPIP + IPSEC error\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")
    # animate("\033[92mSystem services reloaded and restarted successfully!\033[0m")


def save_stuff_ipipseciran2(private_ip, local_ip, remote_ip, is_ipip):
    current_ips = get_current_private_ipsipip2()
    current_ip = current_ips["ipip"] if is_ipip else current_ips["private"]

    if current_ip:
        delete_ufw_rules(current_ip)

    add_ufw_rules(private_ip)

    counterpart_ip = wtb_opposite_ip(private_ip)
    try:
        if is_ipip:
            update_pingfile_sit("/etc/ping_ip2.sh", counterpart_ip)
            update_ipfile_ipip2("/etc/ipip2.sh", private_ip, update_type="private")
            update_ipfile_ipip2("/etc/ipip2.sh", remote_ip, update_type="remote")
            update_ipsec_conf_iranipip2("/etc/ipsec1.conf", private_ip)
        else:
            update_pingfile_sit("/etc/ping_v62.sh", counterpart_ip)
            update_ipfile_ipip2("/etc/private2.sh", private_ip, update_type="private")
            update_ipfile_ipip2("/etc/private2.sh", local_ip, update_type="local")
            update_ipfile_ipip2("/etc/private2.sh", remote_ip, update_type="remote")

        interface = "azumip2" if is_ipip else "azumi2"
        subprocess.run(["ip", "link", "set", "dev", interface, "down"], check=True)
        subprocess.run(["ip", "link", "delete", interface], check=True)
    except subprocess.CalledProcessError as e:
        print("\033[91merror bringing interface down or deleting it\033[0m")

    try:
        script = "/etc/ipip2.sh" if is_ipip else "/etc/private2.sh"
        result = subprocess.run(["/bin/bash", script], capture_output=True, text=True)
        if "RTNETLINK answers: File exists" in result.stderr:
            print("\033[91madditional ip already exists. Ignoring this error\033[0m")
        else:
            result.check_returncode()
        display_checkmark(
            f"\033[92mChanges saved and {interface} interface updated successfully!\033[0m"
        )

        subprocess.run(["sudo", "systemctl", "daemon-reload"], check=True)
        subprocess.run(["sudo", "systemctl", "restart", "ping_v62"], check=True)
        subprocess.run(["sudo", "systemctl", "restart", "ping_ip2"], check=True)
        subprocess.run(["sudo", "systemctl", "restart", "strong-azumi1"], check=True)

        result = subprocess.run(
            [
                "systemctl",
                "list-units",
                "--full",
                "--all",
                "strong-azumi1.service",
            ],
            capture_output=True,
            text=True,
        )
        if "strong-azumi1.service" in result.stdout:
            subprocess.run(
                ["sudo", "systemctl", "restart", "strong-azumi1"], check=True
            )
        else:
            print("\033[91mstrong service not found, don't mind this error.\033[0m")

    except subprocess.CalledProcessError as e:
        print(f"\033[91merror applying network changes: IPIP + IPSEC error\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")
    # animate("\033[92mSystem services reloaded and restarted successfully!\033[0m")


def update_ipsec_conf_iranipip2(name, new_private_ip):
    try:
        with open(name, "r") as f:
            content = f.readlines()

        start_idx, end_idx = None, None
        for i, line in enumerate(content):
            if line.strip() == "conn ipip2":
                start_idx = i
            elif start_idx is not None and line.strip().startswith("conn "):
                end_idx = i
                break

        if start_idx is None:
            print("\033[91m'conn ipip2' section not found\033[0m")
            return

        if end_idx is None:
            end_idx = len(content)

        section = content[start_idx:end_idx]
        ip_parts = new_private_ip.split(":")
        if new_private_ip.endswith(":2"):
            ip_parts[-1] = "1"
        else:
            ip_parts[-1] = "2"
        counterpart_ip = ":".join(ip_parts)

        new_section = []
        for line in section:
            line = re.sub(r"leftsubnet=\S+", f"leftsubnet={new_private_ip}/64", line)
            line = re.sub(r"leftid=\S+", f"leftid={new_private_ip}", line)
            line = re.sub(r"right=\S+", f"right={counterpart_ip}", line)
            line = re.sub(r"rightsubnet=\S+", f"rightsubnet={counterpart_ip}/64", line)
            new_section.append(line)

        new_content = content[:start_idx] + new_section + content[end_idx:]

        with open(name, "w") as f:
            f.writelines(new_content)

        print(f"\033[92m'conn ipip2' section updated successfully\033[0m")
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def ipipkharej2sec_editmulti_local():
    local_ip_private = local_ip("/etc/private2.sh")
    remote_ip_private = remote_ip("/etc/private2.sh")
    private_ip_private = private_ip1("/etc/private2.sh")

    local_ip_ipip = local_ip("/etc/ipip2.sh")
    remote_ip_ipip = remote_ip("/etc/ipip2.sh")
    private_ip_ipip = private_ipip1("/etc/ipip2.sh")

    ipsecsecret = get_ipsecsecret("/etc/ipsec.secrets")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("couldn't retrieve IP addresses from private file")
    if not local_ip_ipip or not remote_ip_ipip or not private_ip_ipip:
        print("couldn't retrieve IP addresses from ipip file")
    if not ipsecsecret:
        print("couldn't retrieve IPsec secret key from ipsec file")

    if (
        not local_ip_private
        or not remote_ip_private
        or not private_ip_private
        or not local_ip_ipip
        or not remote_ip_ipip
        or not private_ip_ipip
        or not ipsecsecret
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_privatekharej2(
            local_ip_private, remote_ip_private, private_ip_private
        )
        display_stuff_ip6ip6(local_ip_ipip, remote_ip_ipip, private_ip_ipip)

        display_ipsecsecret(ipsecsecret)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mIP6IP6 + IPSEC\033[93m Kharej [2] Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej [2] \033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mIRAN \033[92m Public IP\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[93mChange \033[97mIP6IP6 \033[93mPrivate IPV6\033[0m")
        print("5. \033[93mChange IPSEC \033[92mSecret Key\033[0m")
        print("6. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_private = new_ip
                ip_parts = new_ip.split(":")
                if new_ip.endswith(":2"):
                    ip_parts[-1] = "1"
                else:
                    ip_parts[-1] = "2"
                counterpart_ip = ":".join(ip_parts)
                local_ip_ipip = new_ip
                remote_ip_ipip = counterpart_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[IP6IP6]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_ipip
                private_ip_ipip = new_ip

                update_ipfile_ipip2("/etc/ipsec1.conf", new_ip, update_type="ipsec")
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mKharej [2]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input("\033[93mEnter \033[92mIRAN\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "5":
            new_key = input(
                "\033[93mEnter new \033[92mIPsec \033[93mSecret Key: \033[0m"
            )
            if new_key:
                update_ipsecsecret("/etc/ipsec.secrets", new_key)
                ipsecsecret = new_key
            else:
                print("\033[91mCrazy Secret Key\033[0m")
        elif choice == "6":
            save_stuff_ipipseck2(
                private_ip_private,
                local_ip_private,
                remote_ip_private,
                is_ipip=False,
            )
            save_stuff_ipipseck2(
                private_ip_ipip, local_ip_ipip, remote_ip_ipip, is_ipip=True
            )
            update_ipsec_ip(private_ip_ipip)
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Please select a valid option.")


def ipipir2sec_editmulti_local():
    local_ip_private = local_ip("/etc/private2.sh")
    remote_ip_private = remote_ip("/etc/private2.sh")
    private_ip_private = private_ip1("/etc/private2.sh")

    local_ip_ipip = local_ip("/etc/ipip2.sh")
    remote_ip_ipip = remote_ip("/etc/ipip2.sh")
    private_ip_ipip = private_ipip1("/etc/ipip2.sh")

    ipsecsecret = get_ipsecsecret("/etc/ipsec.secrets")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("couldn't retrieve IP addresses from private file")
    if not local_ip_ipip or not remote_ip_ipip or not private_ip_ipip:
        print("couldn't retrieve IP addresses from ipip file")
    if not ipsecsecret:
        print("couldn't retrieve IPsec secret key from ipsec file")

    if (
        not local_ip_private
        or not remote_ip_private
        or not private_ip_private
        or not local_ip_ipip
        or not remote_ip_ipip
        or not private_ip_ipip
        or not ipsecsecret
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_privateiran2(
            local_ip_private, remote_ip_private, private_ip_private
        )
        display_stuff_ip6ip6(local_ip_ipip, remote_ip_ipip, private_ip_ipip)

        display_ipsecsecret(ipsecsecret)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mIP6IP6 + IPSEC\033[93m IRAN Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN \033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mKharej [2]\033[92m Public IP\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[93mChange \033[97mIP6IP6 \033[93mPrivate IPV6\033[0m")
        print("5. \033[93mChange IPSEC \033[92mSecret Key\033[0m")
        print("6. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter new private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_private = new_ip
                ip_parts = new_ip.split(":")
                if new_ip.endswith(":2"):
                    ip_parts[-1] = "1"
                else:
                    ip_parts[-1] = "2"
                counterpart_ip = ":".join(ip_parts)
                local_ip_ipip = new_ip
                remote_ip_ipip = counterpart_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter new private IPv6 address \033[96m[IP6IP6]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_ipip
                private_ip_ipip = new_ip

                update_ipsec_conf_iranipip2("/etc/ipsec1.conf", new_ip)
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mIRAN\033[93m Public IP :\033[0m ")
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mKharej [2]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "5":
            new_key = input(
                "\033[93mEnter new \033[92mIPsec \033[93mSecret Key: \033[0m"
            )
            if new_key:
                update_ipsecsecret("/etc/ipsec.secrets", new_key)
                ipsecsecret = new_key
            else:
                print("\033[91mCrazy Secret Key\033[0m")
        elif choice == "6":
            save_stuff_ipipseciran2(
                private_ip_private,
                local_ip_private,
                remote_ip_private,
                is_ipip=False,
            )
            save_stuff_ipipseciran2(
                private_ip_ipip, local_ip_ipip, remote_ip_ipip, is_ipip=True
            )
            update_ipsec_ip_multi2(private_ip_ipip)
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Please select a valid option.")


# changes 3


def update_ipfile_ipip3(name, new_ip, update_type):
    try:
        with open(name, "r") as f:
            content = f.read()

        if update_type == "private":
            new_content = re.sub(
                r"ip (-6 )?addr add [^ ]+/64 dev azumi?",
                f"ip -6 addr add {new_ip}/64 dev azumi",
                content,
            )
            ip_parts = new_ip.split(":")
            if new_ip.endswith(":2"):
                ip_parts[-1] = "1"
            else:
                ip_parts[-1] = "2"
            counterpart_ip = ":".join(ip_parts)
            new_content = re.sub(
                r"ip (-6 )?route add [^ ]+/64 dev azumi?",
                f"ip -6 route add {counterpart_ip}/64 dev azumi",
                new_content,
            )
            update_ipfile_ipip3("/etc/ipip3.sh", new_ip, update_type="ipip_local")
            update_ipfile_ipip3(
                "/etc/ipip3.sh", counterpart_ip, update_type="ipip_remote"
            )
        elif update_type == "local":
            new_content = re.sub(r"local \S+", f"local {new_ip}", content)
        elif update_type == "remote":
            new_content = re.sub(r"remote \S+", f"remote {new_ip}", content)
        elif update_type == "ipip_local":
            new_content = re.sub(r"local \S+", f"local {new_ip}", content)
        elif update_type == "ipip_remote":
            new_content = re.sub(r"remote \S+", f"remote {new_ip}", content)
        elif update_type == "ipsec":
            new_content = re.sub(r"leftsubnet=\S+", f"leftsubnet={new_ip}/64", content)
            new_content = re.sub(r"leftid=\S+", f"leftid={new_ip}", new_content)

            ip_parts = new_ip.split(":")
            if new_ip.endswith(":1"):
                ip_parts[-1] = "2"
            else:
                ip_parts[-1] = "1"
            counterpart_ip = ":".join(ip_parts)
            new_content = re.sub(r"right=\S+", f"right={counterpart_ip}", new_content)
            new_content = re.sub(
                r"rightsubnet=\S+",
                f"rightsubnet={counterpart_ip}/64",
                new_content,
            )

        with open(name, "w") as f:
            f.write(new_content)
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def get_current_private_ipsipip3():
    private_ip_private = private_ipip1("/etc/private3.sh")
    private_ip_ipip = private_ipip1("/etc/ipip3.sh")
    return {
        "private": private_ip_private,
        "ipip": private_ip_ipip,
    }


def save_stuff_ipipseck3(private_ip, local_ip, remote_ip, is_ipip):
    current_ips = get_current_private_ipsipip3()
    current_ip = current_ips["ipip"] if is_ipip else current_ips["private"]

    if current_ip:
        delete_ufw_rules(current_ip)

    add_ufw_rules(private_ip)

    counterpart_ip = wtb_opposite_ip(private_ip)
    try:
        if is_ipip:
            update_pingfile_sit("/etc/ping_ip3.sh", counterpart_ip)
            update_ipfile_ipip3("/etc/ipip3.sh", private_ip, update_type="private")
            update_ipfile_ipip3("/etc/ipip3.sh", remote_ip, update_type="remote")
            update_ipfile_ipip3("/etc/ipsec1.conf", private_ip, update_type="ipsec")
        else:
            update_pingfile_sit("/etc/ping_v63.sh", counterpart_ip)
            update_ipfile_ipip3("/etc/private3.sh", private_ip, update_type="private")
            update_ipfile_ipip3("/etc/private3.sh", local_ip, update_type="local")
            update_ipfile_ipip3("/etc/private3.sh", remote_ip, update_type="remote")

        interface = "azumip3" if is_ipip else "azumi3"
        subprocess.run(["ip", "link", "set", "dev", interface, "down"], check=True)
        subprocess.run(["ip", "link", "delete", interface], check=True)
    except subprocess.CalledProcessError as e:
        print("\033[91merror bringing interface down or deleting it\033[0m")

    try:
        script = "/etc/ipip3.sh" if is_ipip else "/etc/private3.sh"
        result = subprocess.run(["/bin/bash", script], capture_output=True, text=True)
        if "RTNETLINK answers: File exists" in result.stderr:
            print("\033[91madditional ip already exists. Ignoring this error\033[0m")
        else:
            result.check_returncode()
        display_checkmark(
            f"\033[92mChanges saved and {interface} interface updated successfully!\033[0m"
        )

        subprocess.run(["sudo", "systemctl", "daemon-reload"], check=True)
        subprocess.run(["sudo", "systemctl", "restart", "ping_v63"], check=True)
        subprocess.run(["sudo", "systemctl", "restart", "ping_ip3"], check=True)
        subprocess.run(["sudo", "systemctl", "restart", "strong-azumi1"], check=True)

        result = subprocess.run(
            [
                "systemctl",
                "list-units",
                "--full",
                "--all",
                "strong-azumi1.service",
            ],
            capture_output=True,
            text=True,
        )
        if "strong-azumi1.service" in result.stdout:
            subprocess.run(
                ["sudo", "systemctl", "restart", "strong-azumi1"], check=True
            )
        else:
            print("\033[91mstrong service not found, don't mind this error.\033[0m")

    except subprocess.CalledProcessError as e:
        print(f"\033[91merror applying network changes: IPIP + IPSEC error\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")
    # animate("\033[92mSystem services reloaded and restarted successfully!\033[0m")


def update_ipsec_conf_iranipip3(name, new_private_ip):
    try:
        with open(name, "r") as f:
            content = f.readlines()

        start_idx, end_idx = None, None
        for i, line in enumerate(content):
            if line.strip() == "conn ipip3":
                start_idx = i
            elif start_idx is not None and line.strip().startswith("conn "):
                end_idx = i
                break

        if start_idx is None:
            print("\033[91m'conn ipip3' section not found\033[0m")
            return

        if end_idx is None:
            end_idx = len(content)

        section = content[start_idx:end_idx]
        ip_parts = new_private_ip.split(":")
        if new_private_ip.endswith(":2"):
            ip_parts[-1] = "1"
        else:
            ip_parts[-1] = "2"
        counterpart_ip = ":".join(ip_parts)

        new_section = []
        for line in section:
            line = re.sub(r"leftsubnet=\S+", f"leftsubnet={new_private_ip}/64", line)
            line = re.sub(r"leftid=\S+", f"leftid={new_private_ip}", line)
            line = re.sub(r"right=\S+", f"right={counterpart_ip}", line)
            line = re.sub(r"rightsubnet=\S+", f"rightsubnet={counterpart_ip}/64", line)
            new_section.append(line)

        new_content = content[:start_idx] + new_section + content[end_idx:]

        with open(name, "w") as f:
            f.writelines(new_content)

        print(f"\033[92m'conn ipip3' section updated successfully\033[0m")
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def save_stuff_ipipseciran3(private_ip, local_ip, remote_ip, is_ipip):
    current_ips = get_current_private_ipsipip3()
    current_ip = current_ips["ipip"] if is_ipip else current_ips["private"]

    if current_ip:
        delete_ufw_rules(current_ip)

    add_ufw_rules(private_ip)

    counterpart_ip = wtb_opposite_ip(private_ip)
    try:
        if is_ipip:
            update_pingfile_sit("/etc/ping_ip3.sh", counterpart_ip)
            update_ipfile_ipip3("/etc/ipip3.sh", private_ip, update_type="private")
            update_ipfile_ipip3("/etc/ipip3.sh", remote_ip, update_type="remote")
            update_ipsec_conf_iranipip3("/etc/ipsec1.conf", private_ip)
        else:
            update_pingfile_sit("/etc/ping_v63.sh", counterpart_ip)
            update_ipfile_ipip3("/etc/private3.sh", private_ip, update_type="private")
            update_ipfile_ipip3("/etc/private3.sh", local_ip, update_type="local")
            update_ipfile_ipip3("/etc/private3.sh", remote_ip, update_type="remote")

        interface = "azumip3" if is_ipip else "azumi3"
        subprocess.run(["ip", "link", "set", "dev", interface, "down"], check=True)
        subprocess.run(["ip", "link", "delete", interface], check=True)
    except subprocess.CalledProcessError as e:
        print("\033[91merror bringing interface down or deleting it\033[0m")

    try:
        script = "/etc/ipip3.sh" if is_ipip else "/etc/private3.sh"
        result = subprocess.run(["/bin/bash", script], capture_output=True, text=True)
        if "RTNETLINK answers: File exists" in result.stderr:
            print("\033[91madditional ip already exists. Ignoring this error\033[0m")
        else:
            result.check_returncode()
        display_checkmark(
            f"\033[92mChanges saved and {interface} interface updated successfully!\033[0m"
        )

        subprocess.run(["sudo", "systemctl", "daemon-reload"], check=True)
        subprocess.run(["sudo", "systemctl", "restart", "ping_v63"], check=True)
        subprocess.run(["sudo", "systemctl", "restart", "ping_ip3"], check=True)
        subprocess.run(["sudo", "systemctl", "restart", "strong-azumi1"], check=True)

        result = subprocess.run(
            [
                "systemctl",
                "list-units",
                "--full",
                "--all",
                "strong-azumi1.service",
            ],
            capture_output=True,
            text=True,
        )
        if "strong-azumi1.service" in result.stdout:
            subprocess.run(
                ["sudo", "systemctl", "restart", "strong-azumi1"], check=True
            )
        else:
            print("\033[91mstrong service not found, don't mind this error.\033[0m")

    except subprocess.CalledProcessError as e:
        print(f"\033[91merror applying network changes: IPIP + IPSEC error\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")
    # animate("\033[92mSystem services reloaded and restarted successfully!\033[0m")


def ipipkharej3sec_editmulti_local():
    local_ip_private = local_ip("/etc/private3.sh")
    remote_ip_private = remote_ip("/etc/private3.sh")
    private_ip_private = private_ip1("/etc/private3.sh")

    local_ip_ipip = local_ip("/etc/ipip3.sh")
    remote_ip_ipip = remote_ip("/etc/ipip3.sh")
    private_ip_ipip = private_ipip1("/etc/ipip3.sh")

    ipsecsecret = get_ipsecsecret("/etc/ipsec.secrets")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("couldn't retrieve IP addresses from private file")
    if not local_ip_ipip or not remote_ip_ipip or not private_ip_ipip:
        print("couldn't retrieve IP addresses from ipip file")
    if not ipsecsecret:
        print("couldn't retrieve IPsec secret key from ipsec file")

    if (
        not local_ip_private
        or not remote_ip_private
        or not private_ip_private
        or not local_ip_ipip
        or not remote_ip_ipip
        or not private_ip_ipip
        or not ipsecsecret
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_privatekharej3(
            local_ip_private, remote_ip_private, private_ip_private
        )
        display_stuff_ip6ip6(local_ip_ipip, remote_ip_ipip, private_ip_ipip)

        display_ipsecsecret(ipsecsecret)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mIP6IP6 + IPSEC\033[93m Kharej [3] Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej [3] \033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mIRAN \033[92m Public IP\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[93mChange \033[97mIP6IP6 \033[93mPrivate IPV6\033[0m")
        print("5. \033[93mChange IPSEC \033[92mSecret Key\033[0m")
        print("6. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local single menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_private = new_ip
                ip_parts = new_ip.split(":")
                if new_ip.endswith(":2"):
                    ip_parts[-1] = "1"
                else:
                    ip_parts[-1] = "2"
                counterpart_ip = ":".join(ip_parts)
                local_ip_ipip = new_ip
                remote_ip_ipip = counterpart_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[IP6IP6]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_ipip
                private_ip_ipip = new_ip

                update_ipfile_ipip3("/etc/ipsec1.conf", new_ip, update_type="ipsec")
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mKharej [3]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input("\033[93mEnter \033[92mIRAN\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "5":
            new_key = input(
                "\033[93mEnter new \033[92mIPsec \033[93mSecret Key: \033[0m"
            )
            if new_key:
                update_ipsecsecret("/etc/ipsec.secrets", new_key)
                ipsecsecret = new_key
            else:
                print("\033[91mCrazy Secret Key\033[0m")
        elif choice == "6":
            save_stuff_ipipseck3(
                private_ip_private,
                local_ip_private,
                remote_ip_private,
                is_ipip=False,
            )
            save_stuff_ipipseck3(
                private_ip_ipip, local_ip_ipip, remote_ip_ipip, is_ipip=True
            )
            update_ipsec_ip(private_ip_ipip)
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Please select a valid option.")


def ipipir3sec_editmulti_local():
    local_ip_private = local_ip("/etc/private3.sh")
    remote_ip_private = remote_ip("/etc/private3.sh")
    private_ip_private = private_ip1("/etc/private3.sh")

    local_ip_ipip = local_ip("/etc/ipip3.sh")
    remote_ip_ipip = remote_ip("/etc/ipip3.sh")
    private_ip_ipip = private_ipip1("/etc/ipip3.sh")

    ipsecsecret = get_ipsecsecret("/etc/ipsec.secrets")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("couldn't retrieve IP addresses from private file")
    if not local_ip_ipip or not remote_ip_ipip or not private_ip_ipip:
        print("couldn't retrieve IP addresses from ipip file")
    if not ipsecsecret:
        print("couldn't retrieve IPsec secret key from ipsec file")

    if (
        not local_ip_private
        or not remote_ip_private
        or not private_ip_private
        or not local_ip_ipip
        or not remote_ip_ipip
        or not private_ip_ipip
        or not ipsecsecret
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_privateiran3(
            local_ip_private, remote_ip_private, private_ip_private
        )
        display_stuff_ip6ip6(local_ip_ipip, remote_ip_ipip, private_ip_ipip)

        display_ipsecsecret(ipsecsecret)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mIP6IP6 + IPSEC\033[93m IRAN Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN \033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mKharej [3]\033[92m Public IP\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[93mChange \033[97mIP6IP6 \033[93mPrivate IPV6\033[0m")
        print("5. \033[93mChange IPSEC \033[92mSecret Key\033[0m")
        print("6. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter new private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_private = new_ip
                ip_parts = new_ip.split(":")
                if new_ip.endswith(":2"):
                    ip_parts[-1] = "1"
                else:
                    ip_parts[-1] = "2"
                counterpart_ip = ":".join(ip_parts)
                local_ip_ipip = new_ip
                remote_ip_ipip = counterpart_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter new private IPv6 address \033[96m[IP6IP6]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_ipip
                private_ip_ipip = new_ip

                update_ipsec_conf_iranipip3("/etc/ipsec1.conf", new_ip)
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mIRAN\033[93m Public IP :\033[0m ")
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mKharej [3]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "5":
            new_key = input(
                "\033[93mEnter new \033[92mIPsec \033[93mSecret Key: \033[0m"
            )
            if new_key:
                update_ipsecsecret("/etc/ipsec.secrets", new_key)
                ipsecsecret = new_key
            else:
                print("\033[91mCrazy Secret Key\033[0m")
        elif choice == "6":
            save_stuff_ipipseciran3(
                private_ip_private,
                local_ip_private,
                remote_ip_private,
                is_ipip=False,
            )
            save_stuff_ipipseciran3(
                private_ip_ipip, local_ip_ipip, remote_ip_ipip, is_ipip=True
            )
            update_ipsec_ip_multi3(private_ip_ipip)
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Please select a valid option.")


# changes 3


def update_ipfile_ipip3(name, new_ip, update_type):
    try:
        with open(name, "r") as f:
            content = f.read()

        if update_type == "private":
            new_content = re.sub(
                r"ip (-6 )?addr add [^ ]+/64 dev azumi?",
                f"ip -6 addr add {new_ip}/64 dev azumi",
                content,
            )
            ip_parts = new_ip.split(":")
            if new_ip.endswith(":2"):
                ip_parts[-1] = "1"
            else:
                ip_parts[-1] = "2"
            counterpart_ip = ":".join(ip_parts)
            new_content = re.sub(
                r"ip (-6 )?route add [^ ]+/64 dev azumi?",
                f"ip -6 route add {counterpart_ip}/64 dev azumi",
                new_content,
            )
            update_ipfile_ipip3("/etc/ipip3.sh", new_ip, update_type="ipip_local")
            update_ipfile_ipip3(
                "/etc/ipip3.sh", counterpart_ip, update_type="ipip_remote"
            )
        elif update_type == "local":
            new_content = re.sub(r"local \S+", f"local {new_ip}", content)
        elif update_type == "remote":
            new_content = re.sub(r"remote \S+", f"remote {new_ip}", content)
        elif update_type == "ipip_local":
            new_content = re.sub(r"local \S+", f"local {new_ip}", content)
        elif update_type == "ipip_remote":
            new_content = re.sub(r"remote \S+", f"remote {new_ip}", content)
        elif update_type == "ipsec":
            new_content = re.sub(r"leftsubnet=\S+", f"leftsubnet={new_ip}/64", content)
            new_content = re.sub(r"leftid=\S+", f"leftid={new_ip}", new_content)

            ip_parts = new_ip.split(":")
            if new_ip.endswith(":1"):
                ip_parts[-1] = "2"
            else:
                ip_parts[-1] = "1"
            counterpart_ip = ":".join(ip_parts)
            new_content = re.sub(r"right=\S+", f"right={counterpart_ip}", new_content)
            new_content = re.sub(
                r"rightsubnet=\S+",
                f"rightsubnet={counterpart_ip}/64",
                new_content,
            )

        with open(name, "w") as f:
            f.write(new_content)
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def get_current_private_ipsipip3():
    private_ip_private = private_ipip1("/etc/private3.sh")
    private_ip_ipip = private_ipip1("/etc/ipip3.sh")
    return {
        "private": private_ip_private,
        "ipip": private_ip_ipip,
    }


def save_stuff_ipipseck3(private_ip, local_ip, remote_ip, is_ipip):
    current_ips = get_current_private_ipsipip3()
    current_ip = current_ips["ipip"] if is_ipip else current_ips["private"]

    if current_ip:
        delete_ufw_rules(current_ip)

    add_ufw_rules(private_ip)

    counterpart_ip = wtb_opposite_ip(private_ip)
    try:
        if is_ipip:
            update_pingfile_sit("/etc/ping_ip3.sh", counterpart_ip)
            update_ipfile_ipip3("/etc/ipip3.sh", private_ip, update_type="private")
            update_ipfile_ipip3("/etc/ipip3.sh", remote_ip, update_type="remote")
            update_ipfile_ipip3("/etc/ipsec1.conf", private_ip, update_type="ipsec")
        else:
            update_pingfile_sit("/etc/ping_v63.sh", counterpart_ip)
            update_ipfile_ipip3("/etc/private3.sh", private_ip, update_type="private")
            update_ipfile_ipip3("/etc/private3.sh", local_ip, update_type="local")
            update_ipfile_ipip3("/etc/private3.sh", remote_ip, update_type="remote")

        interface = "azumip3" if is_ipip else "azumi3"
        subprocess.run(["ip", "link", "set", "dev", interface, "down"], check=True)
        subprocess.run(["ip", "link", "delete", interface], check=True)
    except subprocess.CalledProcessError as e:
        print("\033[91merror bringing interface down or deleting it\033[0m")

    try:
        script = "/etc/ipip3.sh" if is_ipip else "/etc/private3.sh"
        result = subprocess.run(["/bin/bash", script], capture_output=True, text=True)
        if "RTNETLINK answers: File exists" in result.stderr:
            print("\033[91madditional ip already exists. Ignoring this error\033[0m")
        else:
            result.check_returncode()
        display_checkmark(
            f"\033[92mChanges saved and {interface} interface updated successfully!\033[0m"
        )

        subprocess.run(["sudo", "systemctl", "daemon-reload"], check=True)
        subprocess.run(["sudo", "systemctl", "restart", "ping_v63"], check=True)
        subprocess.run(["sudo", "systemctl", "restart", "ping_ip3"], check=True)
        subprocess.run(["sudo", "systemctl", "restart", "strong-azumi1"], check=True)

        result = subprocess.run(
            [
                "systemctl",
                "list-units",
                "--full",
                "--all",
                "strong-azumi1.service",
            ],
            capture_output=True,
            text=True,
        )
        if "strong-azumi1.service" in result.stdout:
            subprocess.run(
                ["sudo", "systemctl", "restart", "strong-azumi1"], check=True
            )
        else:
            print("\033[91mstrong service not found, don't mind this error.\033[0m")

    except subprocess.CalledProcessError as e:
        print(f"\033[91merror applying network changes: IPIP + IPSEC error\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")
    # animate("\033[92mSystem services reloaded and restarted successfully!\033[0m")


def update_ipsec_conf_iranipip3(name, new_private_ip):
    try:
        with open(name, "r") as f:
            content = f.readlines()

        start_idx, end_idx = None, None
        for i, line in enumerate(content):
            if line.strip() == "conn ipip3":
                start_idx = i
            elif start_idx is not None and line.strip().startswith("conn "):
                end_idx = i
                break

        if start_idx is None:
            print("\033[91m'conn ipip3' section not found\033[0m")
            return

        if end_idx is None:
            end_idx = len(content)

        section = content[start_idx:end_idx]
        ip_parts = new_private_ip.split(":")
        if new_private_ip.endswith(":2"):
            ip_parts[-1] = "1"
        else:
            ip_parts[-1] = "2"
        counterpart_ip = ":".join(ip_parts)

        new_section = []
        for line in section:
            line = re.sub(r"leftsubnet=\S+", f"leftsubnet={new_private_ip}/64", line)
            line = re.sub(r"leftid=\S+", f"leftid={new_private_ip}", line)
            line = re.sub(r"right=\S+", f"right={counterpart_ip}", line)
            line = re.sub(r"rightsubnet=\S+", f"rightsubnet={counterpart_ip}/64", line)
            new_section.append(line)

        new_content = content[:start_idx] + new_section + content[end_idx:]

        with open(name, "w") as f:
            f.writelines(new_content)

        print(f"\033[92m'conn ipip3' section updated successfully\033[0m")
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def save_stuff_ipipseciran3(private_ip, local_ip, remote_ip, is_ipip):
    current_ips = get_current_private_ipsipip3()
    current_ip = current_ips["ipip"] if is_ipip else current_ips["private"]

    if current_ip:
        delete_ufw_rules(current_ip)

    add_ufw_rules(private_ip)

    counterpart_ip = wtb_opposite_ip(private_ip)
    try:
        if is_ipip:
            update_pingfile_sit("/etc/ping_ip3.sh", counterpart_ip)
            update_ipfile_ipip3("/etc/ipip3.sh", private_ip, update_type="private")
            update_ipfile_ipip3("/etc/ipip3.sh", remote_ip, update_type="remote")
            update_ipsec_conf_iranipip3("/etc/ipsec1.conf", private_ip)
        else:
            update_pingfile_sit("/etc/ping_v63.sh", counterpart_ip)
            update_ipfile_ipip3("/etc/private3.sh", private_ip, update_type="private")
            update_ipfile_ipip3("/etc/private3.sh", local_ip, update_type="local")
            update_ipfile_ipip3("/etc/private3.sh", remote_ip, update_type="remote")

        interface = "azumip3" if is_ipip else "azumi3"
        subprocess.run(["ip", "link", "set", "dev", interface, "down"], check=True)
        subprocess.run(["ip", "link", "delete", interface], check=True)
    except subprocess.CalledProcessError as e:
        print("\033[91merror bringing interface down or deleting it\033[0m")

    try:
        script = "/etc/ipip3.sh" if is_ipip else "/etc/private3.sh"
        result = subprocess.run(["/bin/bash", script], capture_output=True, text=True)
        if "RTNETLINK answers: File exists" in result.stderr:
            print("\033[91madditional ip already exists. Ignoring this error\033[0m")
        else:
            result.check_returncode()
        display_checkmark(
            f"\033[92mChanges saved and {interface} interface updated successfully!\033[0m"
        )

        subprocess.run(["sudo", "systemctl", "daemon-reload"], check=True)
        subprocess.run(["sudo", "systemctl", "restart", "ping_v63"], check=True)
        subprocess.run(["sudo", "systemctl", "restart", "ping_ip3"], check=True)
        subprocess.run(["sudo", "systemctl", "restart", "strong-azumi1"], check=True)

        result = subprocess.run(
            [
                "systemctl",
                "list-units",
                "--full",
                "--all",
                "strong-azumi1.service",
            ],
            capture_output=True,
            text=True,
        )
        if "strong-azumi1.service" in result.stdout:
            subprocess.run(
                ["sudo", "systemctl", "restart", "strong-azumi1"], check=True
            )
        else:
            print("\033[91mstrong service not found, don't mind this error.\033[0m")

    except subprocess.CalledProcessError as e:
        print(f"\033[91merror applying network changes: IPIP + IPSEC error\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")
    # animate("\033[92mSystem services reloaded and restarted successfully!\033[0m")


def ipipkharej3sec_editmulti_local():
    local_ip_private = local_ip("/etc/private3.sh")
    remote_ip_private = remote_ip("/etc/private3.sh")
    private_ip_private = private_ip1("/etc/private3.sh")

    local_ip_ipip = local_ip("/etc/ipip3.sh")
    remote_ip_ipip = remote_ip("/etc/ipip3.sh")
    private_ip_ipip = private_ipip1("/etc/ipip3.sh")

    ipsecsecret = get_ipsecsecret("/etc/ipsec.secrets")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("couldn't retrieve IP addresses from private file")
    if not local_ip_ipip or not remote_ip_ipip or not private_ip_ipip:
        print("couldn't retrieve IP addresses from ipip file")
    if not ipsecsecret:
        print("couldn't retrieve IPsec secret key from ipsec file")

    if (
        not local_ip_private
        or not remote_ip_private
        or not private_ip_private
        or not local_ip_ipip
        or not remote_ip_ipip
        or not private_ip_ipip
        or not ipsecsecret
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_privatekharej3(
            local_ip_private, remote_ip_private, private_ip_private
        )
        display_stuff_ip6ip6(local_ip_ipip, remote_ip_ipip, private_ip_ipip)

        display_ipsecsecret(ipsecsecret)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mIP6IP6 + IPSEC\033[93m Kharej [3] Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej [3] \033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mIRAN \033[92m Public IP\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[93mChange \033[97mIP6IP6 \033[93mPrivate IPV6\033[0m")
        print("5. \033[93mChange IPSEC \033[92mSecret Key\033[0m")
        print("6. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_private = new_ip
                ip_parts = new_ip.split(":")
                if new_ip.endswith(":2"):
                    ip_parts[-1] = "1"
                else:
                    ip_parts[-1] = "2"
                counterpart_ip = ":".join(ip_parts)
                local_ip_ipip = new_ip
                remote_ip_ipip = counterpart_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[IP6IP6]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_ipip
                private_ip_ipip = new_ip

                update_ipfile_ipip3("/etc/ipsec1.conf", new_ip, update_type="ipsec")
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mKharej [3]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input("\033[93mEnter \033[92mIRAN\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "5":
            new_key = input(
                "\033[93mEnter new \033[92mIPsec \033[93mSecret Key: \033[0m"
            )
            if new_key:
                update_ipsecsecret("/etc/ipsec.secrets", new_key)
                ipsecsecret = new_key
            else:
                print("\033[91mCrazy Secret Key\033[0m")
        elif choice == "6":
            save_stuff_ipipseck3(
                private_ip_private,
                local_ip_private,
                remote_ip_private,
                is_ipip=False,
            )
            save_stuff_ipipseck3(
                private_ip_ipip, local_ip_ipip, remote_ip_ipip, is_ipip=True
            )
            update_ipsec_ip(private_ip_ipip)
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Please select a valid option.")

def ipipir3sec_editmulti_local():
    local_ip_private = local_ip("/etc/private3.sh")
    remote_ip_private = remote_ip("/etc/private3.sh")
    private_ip_private = private_ip1("/etc/private3.sh")

    local_ip_ipip = local_ip("/etc/ipip3.sh")
    remote_ip_ipip = remote_ip("/etc/ipip3.sh")
    private_ip_ipip = private_ipip1("/etc/ipip3.sh")

    ipsecsecret = get_ipsecsecret("/etc/ipsec.secrets")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("couldn't retrieve IP addresses from private file")
    if not local_ip_ipip or not remote_ip_ipip or not private_ip_ipip:
        print("couldn't retrieve IP addresses from ipip file")
    if not ipsecsecret:
        print("couldn't retrieve IPsec secret key from ipsec file")

    if (
        not local_ip_private
        or not remote_ip_private
        or not private_ip_private
        or not local_ip_ipip
        or not remote_ip_ipip
        or not private_ip_ipip
        or not ipsecsecret
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_privateiran3(
            local_ip_private, remote_ip_private, private_ip_private
        )
        display_stuff_ip6ip6(local_ip_ipip, remote_ip_ipip, private_ip_ipip)

        display_ipsecsecret(ipsecsecret)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mIP6IP6 + IPSEC\033[93m IRAN Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN \033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mKharej [3]\033[92m Public IP\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[93mChange \033[97mIP6IP6 \033[93mPrivate IPV6\033[0m")
        print("5. \033[93mChange IPSEC \033[92mSecret Key\033[0m")
        print("6. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter new private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_private = new_ip
                ip_parts = new_ip.split(":")
                if new_ip.endswith(":2"):
                    ip_parts[-1] = "1"
                else:
                    ip_parts[-1] = "2"
                counterpart_ip = ":".join(ip_parts)
                local_ip_ipip = new_ip
                remote_ip_ipip = counterpart_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter new private IPv6 address \033[96m[IP6IP6]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_ipip
                private_ip_ipip = new_ip

                update_ipsec_conf_iranipip3("/etc/ipsec1.conf", new_ip)
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mIRAN\033[93m Public IP :\033[0m ")
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mKharej [3]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "5":
            new_key = input(
                "\033[93mEnter new \033[92mIPsec \033[93mSecret Key: \033[0m"
            )
            if new_key:
                update_ipsecsecret("/etc/ipsec.secrets", new_key)
                ipsecsecret = new_key
            else:
                print("\033[91mCrazy Secret Key\033[0m")
        elif choice == "6":
            save_stuff_ipipseciran3(
                private_ip_private,
                local_ip_private,
                remote_ip_private,
                is_ipip=False,
            )
            save_stuff_ipipseciran3(
                private_ip_ipip, local_ip_ipip, remote_ip_ipip, is_ipip=True
            )
            update_ipsec_ip_multi3(private_ip_ipip)
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Please select a valid option.")


# changes 4


def update_ipfile_ipip4(name, new_ip, update_type):
    try:
        with open(name, "r") as f:
            content = f.read()

        if update_type == "private":
            new_content = re.sub(
                r"ip (-6 )?addr add [^ ]+/64 dev azumi?",
                f"ip -6 addr add {new_ip}/64 dev azumi",
                content,
            )
            ip_parts = new_ip.split(":")
            if new_ip.endswith(":2"):
                ip_parts[-1] = "1"
            else:
                ip_parts[-1] = "2"
            counterpart_ip = ":".join(ip_parts)
            new_content = re.sub(
                r"ip (-6 )?route add [^ ]+/64 dev azumi?",
                f"ip -6 route add {counterpart_ip}/64 dev azumi",
                new_content,
            )
            update_ipfile_ipip4("/etc/ipip4.sh", new_ip, update_type="ipip_local")
            update_ipfile_ipip4(
                "/etc/ipip4.sh", counterpart_ip, update_type="ipip_remote"
            )
        elif update_type == "local":
            new_content = re.sub(r"local \S+", f"local {new_ip}", content)
        elif update_type == "remote":
            new_content = re.sub(r"remote \S+", f"remote {new_ip}", content)
        elif update_type == "ipip_local":
            new_content = re.sub(r"local \S+", f"local {new_ip}", content)
        elif update_type == "ipip_remote":
            new_content = re.sub(r"remote \S+", f"remote {new_ip}", content)
        elif update_type == "ipsec":
            new_content = re.sub(r"leftsubnet=\S+", f"leftsubnet={new_ip}/64", content)
            new_content = re.sub(r"leftid=\S+", f"leftid={new_ip}", new_content)

            ip_parts = new_ip.split(":")
            if new_ip.endswith(":1"):
                ip_parts[-1] = "2"
            else:
                ip_parts[-1] = "1"
            counterpart_ip = ":".join(ip_parts)
            new_content = re.sub(r"right=\S+", f"right={counterpart_ip}", new_content)
            new_content = re.sub(
                r"rightsubnet=\S+",
                f"rightsubnet={counterpart_ip}/64",
                new_content,
            )

        with open(name, "w") as f:
            f.write(new_content)
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def get_current_private_ipsipip4():
    private_ip_private = private_ipip1("/etc/private4.sh")
    private_ip_ipip = private_ipip1("/etc/ipip4.sh")
    return {
        "private": private_ip_private,
        "ipip": private_ip_ipip,
    }


def save_stuff_ipipseck4(private_ip, local_ip, remote_ip, is_ipip):
    current_ips = get_current_private_ipsipip4()
    current_ip = current_ips["ipip"] if is_ipip else current_ips["private"]

    if current_ip:
        delete_ufw_rules(current_ip)

    add_ufw_rules(private_ip)

    counterpart_ip = wtb_opposite_ip(private_ip)
    try:
        if is_ipip:
            update_pingfile_sit("/etc/ping_ip4.sh", counterpart_ip)
            update_ipfile_ipip4("/etc/ipip4.sh", private_ip, update_type="private")
            update_ipfile_ipip4("/etc/ipip4.sh", remote_ip, update_type="remote")
            update_ipfile_ipip4("/etc/ipsec1.conf", private_ip, update_type="ipsec")
        else:
            update_pingfile_sit("/etc/ping_v64.sh", counterpart_ip)
            update_ipfile_ipip4("/etc/private4.sh", private_ip, update_type="private")
            update_ipfile_ipip4("/etc/private4.sh", local_ip, update_type="local")
            update_ipfile_ipip4("/etc/private4.sh", remote_ip, update_type="remote")

        interface = "azumip4" if is_ipip else "azumi4"
        subprocess.run(["ip", "link", "set", "dev", interface, "down"], check=True)
        subprocess.run(["ip", "link", "delete", interface], check=True)
    except subprocess.CalledProcessError as e:
        print("\033[91merror bringing interface down or deleting it\033[0m")

    try:
        script = "/etc/ipip4.sh" if is_ipip else "/etc/private4.sh"
        result = subprocess.run(["/bin/bash", script], capture_output=True, text=True)
        if "RTNETLINK answers: File exists" in result.stderr:
            print("\033[91madditional ip already exists. Ignoring this error\033[0m")
        else:
            result.check_returncode()
        display_checkmark(
            f"\033[92mChanges saved and {interface} interface updated successfully!\033[0m"
        )

        subprocess.run(["sudo", "systemctl", "daemon-reload"], check=True)
        subprocess.run(["sudo", "systemctl", "restart", "ping_v64"], check=True)
        subprocess.run(["sudo", "systemctl", "restart", "ping_ip4"], check=True)
        subprocess.run(["sudo", "systemctl", "restart", "strong-azumi1"], check=True)

        result = subprocess.run(
            [
                "systemctl",
                "list-units",
                "--full",
                "--all",
                "strong-azumi1.service",
            ],
            capture_output=True,
            text=True,
        )
        if "strong-azumi1.service" in result.stdout:
            subprocess.run(
                ["sudo", "systemctl", "restart", "strong-azumi1"], check=True
            )
        else:
            print("\033[91mstrong service not found, don't mind this error.\033[0m")

    except subprocess.CalledProcessError as e:
        print(f"\033[91merror applying network changes: IPIP + IPSEC error\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")
    # animate("\033[92mSystem services reloaded and restarted successfully!\033[0m")


def update_ipsec_conf_iranipip4(name, new_private_ip):
    try:
        with open(name, "r") as f:
            content = f.readlines()

        start_idx, end_idx = None, None
        for i, line in enumerate(content):
            if line.strip() == "conn ipip4":
                start_idx = i
            elif start_idx is not None and line.strip().startswith("conn "):
                end_idx = i
                break

        if start_idx is None:
            print("\033[91m'conn ipip4' section not found\033[0m")
            return

        if end_idx is None:
            end_idx = len(content)

        section = content[start_idx:end_idx]
        ip_parts = new_private_ip.split(":")
        if new_private_ip.endswith(":2"):
            ip_parts[-1] = "1"
        else:
            ip_parts[-1] = "2"
        counterpart_ip = ":".join(ip_parts)

        new_section = []
        for line in section:
            line = re.sub(r"leftsubnet=\S+", f"leftsubnet={new_private_ip}/64", line)
            line = re.sub(r"leftid=\S+", f"leftid={new_private_ip}", line)
            line = re.sub(r"right=\S+", f"right={counterpart_ip}", line)
            line = re.sub(r"rightsubnet=\S+", f"rightsubnet={counterpart_ip}/64", line)
            new_section.append(line)

        new_content = content[:start_idx] + new_section + content[end_idx:]

        with open(name, "w") as f:
            f.writelines(new_content)

        print(f"\033[92m'conn ipip4' section updated successfully\033[0m")
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def save_stuff_ipipseciran4(private_ip, local_ip, remote_ip, is_ipip):
    current_ips = get_current_private_ipsipip4()
    current_ip = current_ips["ipip"] if is_ipip else current_ips["private"]

    if current_ip:
        delete_ufw_rules(current_ip)

    add_ufw_rules(private_ip)

    counterpart_ip = wtb_opposite_ip(private_ip)
    try:
        if is_ipip:
            update_pingfile_sit("/etc/ping_ip4.sh", counterpart_ip)
            update_ipfile_ipip4("/etc/ipip4.sh", private_ip, update_type="private")
            update_ipfile_ipip4("/etc/ipip4.sh", remote_ip, update_type="remote")
            update_ipsec_conf_iranipip4("/etc/ipsec1.conf", private_ip)
        else:
            update_pingfile_sit("/etc/ping_v64.sh", counterpart_ip)
            update_ipfile_ipip4("/etc/private4.sh", private_ip, update_type="private")
            update_ipfile_ipip4("/etc/private4.sh", local_ip, update_type="local")
            update_ipfile_ipip4("/etc/private4.sh", remote_ip, update_type="remote")

        interface = "azumip4" if is_ipip else "azumi4"
        subprocess.run(["ip", "link", "set", "dev", interface, "down"], check=True)
        subprocess.run(["ip", "link", "delete", interface], check=True)
    except subprocess.CalledProcessError as e:
        print("\033[91merror bringing interface down or deleting it\033[0m")

    try:
        script = "/etc/ipip4.sh" if is_ipip else "/etc/private4.sh"
        result = subprocess.run(["/bin/bash", script], capture_output=True, text=True)
        if "RTNETLINK answers: File exists" in result.stderr:
            print("\033[91madditional ip already exists. Ignoring this error\033[0m")
        else:
            result.check_returncode()
        display_checkmark(
            f"\033[92mChanges saved and {interface} interface updated successfully!\033[0m"
        )

        subprocess.run(["sudo", "systemctl", "daemon-reload"], check=True)
        subprocess.run(["sudo", "systemctl", "restart", "ping_v64"], check=True)
        subprocess.run(["sudo", "systemctl", "restart", "ping_ip4"], check=True)
        subprocess.run(["sudo", "systemctl", "restart", "strong-azumi1"], check=True)

        result = subprocess.run(
            [
                "systemctl",
                "list-units",
                "--full",
                "--all",
                "strong-azumi1.service",
            ],
            capture_output=True,
            text=True,
        )
        if "strong-azumi1.service" in result.stdout:
            subprocess.run(
                ["sudo", "systemctl", "restart", "strong-azumi1"], check=True
            )
        else:
            print("\033[91mstrong service not found, don't mind this error.\033[0m")

    except subprocess.CalledProcessError as e:
        print(f"\033[91merror applying network changes: IPIP + IPSEC error\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")
    # animate("\033[92mSystem services reloaded and restarted successfully!\033[0m")


def ipipkharej4sec_editmulti_local():
    local_ip_private = local_ip("/etc/private4.sh")
    remote_ip_private = remote_ip("/etc/private4.sh")
    private_ip_private = private_ip1("/etc/private4.sh")

    local_ip_ipip = local_ip("/etc/ipip4.sh")
    remote_ip_ipip = remote_ip("/etc/ipip4.sh")
    private_ip_ipip = private_ipip1("/etc/ipip4.sh")

    ipsecsecret = get_ipsecsecret("/etc/ipsec.secrets")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("couldn't retrieve IP addresses from private file")
    if not local_ip_ipip or not remote_ip_ipip or not private_ip_ipip:
        print("couldn't retrieve IP addresses from ipip file")
    if not ipsecsecret:
        print("couldn't retrieve IPsec secret key from ipsec file")

    if (
        not local_ip_private
        or not remote_ip_private
        or not private_ip_private
        or not local_ip_ipip
        or not remote_ip_ipip
        or not private_ip_ipip
        or not ipsecsecret
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_privatekharej4(
            local_ip_private, remote_ip_private, private_ip_private
        )
        display_stuff_ip6ip6(local_ip_ipip, remote_ip_ipip, private_ip_ipip)

        display_ipsecsecret(ipsecsecret)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mIP6IP6 + IPSEC\033[93m Kharej [4] Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej [4] \033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mIRAN \033[92m Public IP\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[93mChange \033[97mIP6IP6 \033[93mPrivate IPV6\033[0m")
        print("5. \033[93mChange IPSEC \033[92mSecret Key\033[0m")
        print("6. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_private = new_ip
                ip_parts = new_ip.split(":")
                if new_ip.endswith(":2"):
                    ip_parts[-1] = "1"
                else:
                    ip_parts[-1] = "2"
                counterpart_ip = ":".join(ip_parts)
                local_ip_ipip = new_ip
                remote_ip_ipip = counterpart_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[IP6IP6]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_ipip
                private_ip_ipip = new_ip

                update_ipfile_ipip4("/etc/ipsec1.conf", new_ip, update_type="ipsec")
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mKharej [4]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input("\033[93mEnter \033[92mIRAN\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "5":
            new_key = input(
                "\033[93mEnter new \033[92mIPsec \033[93mSecret Key: \033[0m"
            )
            if new_key:
                update_ipsecsecret("/etc/ipsec.secrets", new_key)
                ipsecsecret = new_key
            else:
                print("\033[91mCrazy Secret Key\033[0m")
        elif choice == "6":
            save_stuff_ipipseck4(
                private_ip_private,
                local_ip_private,
                remote_ip_private,
                is_ipip=False,
            )
            save_stuff_ipipseck4(
                private_ip_ipip, local_ip_ipip, remote_ip_ipip, is_ipip=True
            )
            update_ipsec_ip(private_ip_ipip)
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Please select a valid option.")


def ipipir4sec_editmulti_local():
    local_ip_private = local_ip("/etc/private4.sh")
    remote_ip_private = remote_ip("/etc/private4.sh")
    private_ip_private = private_ip1("/etc/private4.sh")

    local_ip_ipip = local_ip("/etc/ipip4.sh")
    remote_ip_ipip = remote_ip("/etc/ipip4.sh")
    private_ip_ipip = private_ipip1("/etc/ipip4.sh")

    ipsecsecret = get_ipsecsecret("/etc/ipsec.secrets")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("couldn't retrieve IP addresses from private file")
    if not local_ip_ipip or not remote_ip_ipip or not private_ip_ipip:
        print("couldn't retrieve IP addresses from ipip file")
    if not ipsecsecret:
        print("couldn't retrieve IPsec secret key from ipsec file")

    if (
        not local_ip_private
        or not remote_ip_private
        or not private_ip_private
        or not local_ip_ipip
        or not remote_ip_ipip
        or not private_ip_ipip
        or not ipsecsecret
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_privateiran4(
            local_ip_private, remote_ip_private, private_ip_private
        )
        display_stuff_ip6ip6(local_ip_ipip, remote_ip_ipip, private_ip_ipip)

        display_ipsecsecret(ipsecsecret)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mIP6IP6 + IPSEC\033[93m IRAN Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN \033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mKharej [4]\033[92m Public IP\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[93mChange \033[97mIP6IP6 \033[93mPrivate IPV6\033[0m")
        print("5. \033[93mChange IPSEC \033[92mSecret Key\033[0m")
        print("6. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter new private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_private = new_ip
                ip_parts = new_ip.split(":")
                if new_ip.endswith(":2"):
                    ip_parts[-1] = "1"
                else:
                    ip_parts[-1] = "2"
                counterpart_ip = ":".join(ip_parts)
                local_ip_ipip = new_ip
                remote_ip_ipip = counterpart_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter new private IPv6 address \033[96m[IP6IP6]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_ipip
                private_ip_ipip = new_ip

                update_ipsec_conf_iranipip4("/etc/ipsec1.conf", new_ip)
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mIRAN\033[93m Public IP :\033[0m ")
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mKharej [4]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "5":
            new_key = input(
                "\033[93mEnter new \033[92mIPsec \033[93mSecret Key: \033[0m"
            )
            if new_key:
                update_ipsecsecret("/etc/ipsec.secrets", new_key)
                ipsecsecret = new_key
            else:
                print("\033[91mCrazy Secret Key\033[0m")
        elif choice == "6":
            save_stuff_ipipseciran4(
                private_ip_private,
                local_ip_private,
                remote_ip_private,
                is_ipip=False,
            )
            save_stuff_ipipseciran4(
                private_ip_ipip, local_ip_ipip, remote_ip_ipip, is_ipip=True
            )
            update_ipsec_ip_multi4(private_ip_ipip)
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Please select a valid option.")


# changes 5


def update_ipfile_ipip5(name, new_ip, update_type):
    try:
        with open(name, "r") as f:
            content = f.read()

        if update_type == "private":
            new_content = re.sub(
                r"ip (-6 )?addr add [^ ]+/64 dev azumi?",
                f"ip -6 addr add {new_ip}/64 dev azumi",
                content,
            )
            ip_parts = new_ip.split(":")
            if new_ip.endswith(":2"):
                ip_parts[-1] = "1"
            else:
                ip_parts[-1] = "2"
            counterpart_ip = ":".join(ip_parts)
            new_content = re.sub(
                r"ip (-6 )?route add [^ ]+/64 dev azumi?",
                f"ip -6 route add {counterpart_ip}/64 dev azumi",
                new_content,
            )
            update_ipfile_ipip5("/etc/ipip5.sh", new_ip, update_type="ipip_local")
            update_ipfile_ipip5(
                "/etc/ipip5.sh", counterpart_ip, update_type="ipip_remote"
            )
        elif update_type == "local":
            new_content = re.sub(r"local \S+", f"local {new_ip}", content)
        elif update_type == "remote":
            new_content = re.sub(r"remote \S+", f"remote {new_ip}", content)
        elif update_type == "ipip_local":
            new_content = re.sub(r"local \S+", f"local {new_ip}", content)
        elif update_type == "ipip_remote":
            new_content = re.sub(r"remote \S+", f"remote {new_ip}", content)
        elif update_type == "ipsec":
            new_content = re.sub(r"leftsubnet=\S+", f"leftsubnet={new_ip}/64", content)
            new_content = re.sub(r"leftid=\S+", f"leftid={new_ip}", new_content)

            ip_parts = new_ip.split(":")
            if new_ip.endswith(":1"):
                ip_parts[-1] = "2"
            else:
                ip_parts[-1] = "1"
            counterpart_ip = ":".join(ip_parts)
            new_content = re.sub(r"right=\S+", f"right={counterpart_ip}", new_content)
            new_content = re.sub(
                r"rightsubnet=\S+",
                f"rightsubnet={counterpart_ip}/64",
                new_content,
            )

        with open(name, "w") as f:
            f.write(new_content)
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def get_current_private_ipsipip5():
    private_ip_private = private_ipip1("/etc/private5.sh")
    private_ip_ipip = private_ipip1("/etc/ipip5.sh")
    return {
        "private": private_ip_private,
        "ipip": private_ip_ipip,
    }


def save_stuff_ipipseck5(private_ip, local_ip, remote_ip, is_ipip):
    current_ips = get_current_private_ipsipip5()
    current_ip = current_ips["ipip"] if is_ipip else current_ips["private"]

    if current_ip:
        delete_ufw_rules(current_ip)

    add_ufw_rules(private_ip)

    counterpart_ip = wtb_opposite_ip(private_ip)
    try:
        if is_ipip:
            update_pingfile_sit("/etc/ping_ip5.sh", counterpart_ip)
            update_ipfile_ipip5("/etc/ipip5.sh", private_ip, update_type="private")
            update_ipfile_ipip5("/etc/ipip5.sh", remote_ip, update_type="remote")
            update_ipfile_ipip5("/etc/ipsec1.conf", private_ip, update_type="ipsec")
        else:
            update_pingfile_sit("/etc/ping_v65.sh", counterpart_ip)
            update_ipfile_ipip5("/etc/private5.sh", private_ip, update_type="private")
            update_ipfile_ipip5("/etc/private5.sh", local_ip, update_type="local")
            update_ipfile_ipip5("/etc/private5.sh", remote_ip, update_type="remote")

        interface = "azumip5" if is_ipip else "azumi5"
        subprocess.run(["ip", "link", "set", "dev", interface, "down"], check=True)
        subprocess.run(["ip", "link", "delete", interface], check=True)
    except subprocess.CalledProcessError as e:
        print("\033[91merror bringing interface down or deleting it\033[0m")

    try:
        script = "/etc/ipip5.sh" if is_ipip else "/etc/private5.sh"
        result = subprocess.run(["/bin/bash", script], capture_output=True, text=True)
        if "RTNETLINK answers: File exists" in result.stderr:
            print("\033[91madditional ip already exists. Ignoring this error\033[0m")
        else:
            result.check_returncode()
        display_checkmark(
            f"\033[92mChanges saved and {interface} interface updated successfully!\033[0m"
        )

        subprocess.run(["sudo", "systemctl", "daemon-reload"], check=True)
        subprocess.run(["sudo", "systemctl", "restart", "ping_v65"], check=True)
        subprocess.run(["sudo", "systemctl", "restart", "ping_ip5"], check=True)
        subprocess.run(["sudo", "systemctl", "restart", "strong-azumi1"], check=True)

        result = subprocess.run(
            [
                "systemctl",
                "list-units",
                "--full",
                "--all",
                "strong-azumi1.service",
            ],
            capture_output=True,
            text=True,
        )
        if "strong-azumi1.service" in result.stdout:
            subprocess.run(
                ["sudo", "systemctl", "restart", "strong-azumi1"], check=True
            )
        else:
            print("\033[91mstrong service not found, don't mind this error.\033[0m")

    except subprocess.CalledProcessError as e:
        print(f"\033[91merror applying network changes: IPIP + IPSEC error\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")
    # animate("\033[92mSystem services reloaded and restarted successfully!\033[0m")


def update_ipsec_conf_iranipip5(name, new_private_ip):
    try:
        with open(name, "r") as f:
            content = f.readlines()

        start_idx, end_idx = None, None
        for i, line in enumerate(content):
            if line.strip() == "conn ipip5":
                start_idx = i
            elif start_idx is not None and line.strip().startswith("conn "):
                end_idx = i
                break

        if start_idx is None:
            print("\033[91m'conn ipip5' section not found\033[0m")
            return

        if end_idx is None:
            end_idx = len(content)

        section = content[start_idx:end_idx]
        ip_parts = new_private_ip.split(":")
        if new_private_ip.endswith(":2"):
            ip_parts[-1] = "1"
        else:
            ip_parts[-1] = "2"
        counterpart_ip = ":".join(ip_parts)

        new_section = []
        for line in section:
            line = re.sub(r"leftsubnet=\S+", f"leftsubnet={new_private_ip}/64", line)
            line = re.sub(r"leftid=\S+", f"leftid={new_private_ip}", line)
            line = re.sub(r"right=\S+", f"right={counterpart_ip}", line)
            line = re.sub(r"rightsubnet=\S+", f"rightsubnet={counterpart_ip}/64", line)
            new_section.append(line)

        new_content = content[:start_idx] + new_section + content[end_idx:]

        with open(name, "w") as f:
            f.writelines(new_content)

        print(f"\033[92m'conn ipip5' section updated successfully\033[0m")
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def save_stuff_ipipseciran5(private_ip, local_ip, remote_ip, is_ipip):
    current_ips = get_current_private_ipsipip5()
    current_ip = current_ips["ipip"] if is_ipip else current_ips["private"]

    if current_ip:
        delete_ufw_rules(current_ip)

    add_ufw_rules(private_ip)

    counterpart_ip = wtb_opposite_ip(private_ip)
    try:
        if is_ipip:
            update_pingfile_sit("/etc/ping_ip5.sh", counterpart_ip)
            update_ipfile_ipip5("/etc/ipip5.sh", private_ip, update_type="private")
            update_ipfile_ipip5("/etc/ipip5.sh", remote_ip, update_type="remote")
            update_ipsec_conf_iranipip5("/etc/ipsec1.conf", private_ip)
        else:
            update_pingfile_sit("/etc/ping_v65.sh", counterpart_ip)
            update_ipfile_ipip5("/etc/private5.sh", private_ip, update_type="private")
            update_ipfile_ipip5("/etc/private5.sh", local_ip, update_type="local")
            update_ipfile_ipip5("/etc/private5.sh", remote_ip, update_type="remote")

        interface = "azumip5" if is_ipip else "azumi5"
        subprocess.run(["ip", "link", "set", "dev", interface, "down"], check=True)
        subprocess.run(["ip", "link", "delete", interface], check=True)
    except subprocess.CalledProcessError as e:
        print("\033[91merror bringing interface down or deleting it\033[0m")

    try:
        script = "/etc/ipip5.sh" if is_ipip else "/etc/private5.sh"
        result = subprocess.run(["/bin/bash", script], capture_output=True, text=True)
        if "RTNETLINK answers: File exists" in result.stderr:
            print("\033[91madditional ip already exists. Ignoring this error\033[0m")
        else:
            result.check_returncode()
        display_checkmark(
            f"\033[92mChanges saved and {interface} interface updated successfully!\033[0m"
        )

        subprocess.run(["sudo", "systemctl", "daemon-reload"], check=True)
        subprocess.run(["sudo", "systemctl", "restart", "ping_v65"], check=True)
        subprocess.run(["sudo", "systemctl", "restart", "ping_ip5"], check=True)
        subprocess.run(["sudo", "systemctl", "restart", "strong-azumi1"], check=True)

        result = subprocess.run(
            [
                "systemctl",
                "list-units",
                "--full",
                "--all",
                "strong-azumi1.service",
            ],
            capture_output=True,
            text=True,
        )
        if "strong-azumi1.service" in result.stdout:
            subprocess.run(
                ["sudo", "systemctl", "restart", "strong-azumi1"], check=True
            )
        else:
            print("\033[91mstrong service not found, don't mind this error.\033[0m")

    except subprocess.CalledProcessError as e:
        print(f"\033[91merror applying network changes: IPIP + IPSEC error\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")
    # animate("\033[92mSystem services reloaded and restarted successfully!\033[0m")


def ipipkharej5sec_editmulti_local():
    local_ip_private = local_ip("/etc/private5.sh")
    remote_ip_private = remote_ip("/etc/private5.sh")
    private_ip_private = private_ip1("/etc/private5.sh")

    local_ip_ipip = local_ip("/etc/ipip5.sh")
    remote_ip_ipip = remote_ip("/etc/ipip5.sh")
    private_ip_ipip = private_ipip1("/etc/ipip5.sh")

    ipsecsecret = get_ipsecsecret("/etc/ipsec.secrets")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("couldn't retrieve IP addresses from private file")
    if not local_ip_ipip or not remote_ip_ipip or not private_ip_ipip:
        print("couldn't retrieve IP addresses from ipip file")
    if not ipsecsecret:
        print("couldn't retrieve IPsec secret key from ipsec file")

    if (
        not local_ip_private
        or not remote_ip_private
        or not private_ip_private
        or not local_ip_ipip
        or not remote_ip_ipip
        or not private_ip_ipip
        or not ipsecsecret
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_privatekharej5(
            local_ip_private, remote_ip_private, private_ip_private
        )
        display_stuff_ip6ip6(local_ip_ipip, remote_ip_ipip, private_ip_ipip)

        display_ipsecsecret(ipsecsecret)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mIP6IP6 + IPSEC\033[93m Kharej [5] Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej [5] \033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mIRAN \033[92m Public IP\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[93mChange \033[97mIP6IP6 \033[93mPrivate IPV6\033[0m")
        print("5. \033[93mChange IPSEC \033[92mSecret Key\033[0m")
        print("6. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_private = new_ip
                ip_parts = new_ip.split(":")
                if new_ip.endswith(":2"):
                    ip_parts[-1] = "1"
                else:
                    ip_parts[-1] = "2"
                counterpart_ip = ":".join(ip_parts)
                local_ip_ipip = new_ip
                remote_ip_ipip = counterpart_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[IP6IP6]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_ipip
                private_ip_ipip = new_ip

                update_ipfile_ipip5("/etc/ipsec1.conf", new_ip, update_type="ipsec")
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mKharej [5]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input("\033[93mEnter \033[92mIRAN\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "5":
            new_key = input(
                "\033[93mEnter new \033[92mIPsec \033[93mSecret Key: \033[0m"
            )
            if new_key:
                update_ipsecsecret("/etc/ipsec.secrets", new_key)
                ipsecsecret = new_key
            else:
                print("\033[91mCrazy Secret Key\033[0m")
        elif choice == "6":
            save_stuff_ipipseck5(
                private_ip_private,
                local_ip_private,
                remote_ip_private,
                is_ipip=False,
            )
            save_stuff_ipipseck5(
                private_ip_ipip, local_ip_ipip, remote_ip_ipip, is_ipip=True
            )
            update_ipsec_ip(private_ip_ipip)
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Please select a valid option.")


def ipipir5sec_editmulti_local():
    local_ip_private = local_ip("/etc/private5.sh")
    remote_ip_private = remote_ip("/etc/private5.sh")
    private_ip_private = private_ip1("/etc/private5.sh")

    local_ip_ipip = local_ip("/etc/ipip5.sh")
    remote_ip_ipip = remote_ip("/etc/ipip5.sh")
    private_ip_ipip = private_ipip1("/etc/ipip5.sh")

    ipsecsecret = get_ipsecsecret("/etc/ipsec.secrets")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("couldn't retrieve IP addresses from private file")
    if not local_ip_ipip or not remote_ip_ipip or not private_ip_ipip:
        print("couldn't retrieve IP addresses from ipip file")
    if not ipsecsecret:
        print("couldn't retrieve IPsec secret key from ipsec file")

    if (
        not local_ip_private
        or not remote_ip_private
        or not private_ip_private
        or not local_ip_ipip
        or not remote_ip_ipip
        or not private_ip_ipip
        or not ipsecsecret
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_privateiran5(
            local_ip_private, remote_ip_private, private_ip_private
        )
        display_stuff_ip6ip6(local_ip_ipip, remote_ip_ipip, private_ip_ipip)

        display_ipsecsecret(ipsecsecret)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mIP6IP6 + IPSEC\033[93m IRAN Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN \033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mKharej [5]\033[92m Public IP\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[93mChange \033[97mIP6IP6 \033[93mPrivate IPV6\033[0m")
        print("5. \033[93mChange IPSEC \033[92mSecret Key\033[0m")
        print("6. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter new private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_private = new_ip
                ip_parts = new_ip.split(":")
                if new_ip.endswith(":2"):
                    ip_parts[-1] = "1"
                else:
                    ip_parts[-1] = "2"
                counterpart_ip = ":".join(ip_parts)
                local_ip_ipip = new_ip
                remote_ip_ipip = counterpart_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter new private IPv6 address \033[96m[IP6IP6]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_ipip
                private_ip_ipip = new_ip

                update_ipsec_conf_iranipip5("/etc/ipsec1.conf", new_ip)
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mIRAN\033[93m Public IP :\033[0m ")
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mKharej [5]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "5":
            new_key = input(
                "\033[93mEnter new \033[92mIPsec \033[93mSecret Key: \033[0m"
            )
            if new_key:
                update_ipsecsecret("/etc/ipsec.secrets", new_key)
                ipsecsecret = new_key
            else:
                print("\033[91mCrazy Secret Key\033[0m")
        elif choice == "6":
            save_stuff_ipipseciran5(
                private_ip_private,
                local_ip_private,
                remote_ip_private,
                is_ipip=False,
            )
            save_stuff_ipipseciran5(
                private_ip_ipip, local_ip_ipip, remote_ip_ipip, is_ipip=True
            )
            update_ipsec_ip_multi5(private_ip_ipip)
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Please select a valid option.")


# kharej one iran 5 ipipsec


def ipipiranfive1sec_editmulti_local():
    local_ip_private = local_ip("/etc/private1.sh")
    remote_ip_private = remote_ip("/etc/private1.sh")
    private_ip_private = private_ip1("/etc/private1.sh")

    local_ip_ipip = local_ip("/etc/ipip1.sh")
    remote_ip_ipip = remote_ip("/etc/ipip1.sh")
    private_ip_ipip = private_ipip1("/etc/ipip1.sh")

    ipsecsecret = get_ipsecsecret("/etc/ipsec.secrets")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("couldn't retrieve IP addresses from private file")
    if not local_ip_ipip or not remote_ip_ipip or not private_ip_ipip:
        print("couldn't retrieve IP addresses from ipip file")
    if not ipsecsecret:
        print("couldn't retrieve IPsec secret key from ipsec file")

    if (
        not local_ip_private
        or not remote_ip_private
        or not private_ip_private
        or not local_ip_ipip
        or not remote_ip_ipip
        or not private_ip_ipip
        or not ipsecsecret
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_privateiranfive1(
            local_ip_private, remote_ip_private, private_ip_private
        )
        display_stuff_ip6ip6(local_ip_ipip, remote_ip_ipip, private_ip_ipip)

        display_ipsecsecret(ipsecsecret)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mIP6IP6 + IPSEC\033[93m IRAN [1] Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN [1] \033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mKharej \033[92m Public IP\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[93mChange \033[97mIP6IP6 \033[93mPrivate IPV6\033[0m")
        print("5. \033[93mChange IPSEC \033[92mSecret Key\033[0m")
        print("6. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_private = new_ip
                ip_parts = new_ip.split(":")
                if new_ip.endswith(":2"):
                    ip_parts[-1] = "1"
                else:
                    ip_parts[-1] = "2"
                counterpart_ip = ":".join(ip_parts)
                local_ip_ipip = new_ip
                remote_ip_ipip = counterpart_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[IP6IP6]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_ipip
                private_ip_ipip = new_ip

                update_ipfile_ipip1("/etc/ipsec1.conf", new_ip, update_type="ipsec")
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mIRAN [1]\033[93m Public IP :\033[0m ")
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input("\033[93mEnter \033[92mKharej\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "5":
            new_key = input(
                "\033[93mEnter new \033[92mIPsec \033[93mSecret Key: \033[0m"
            )
            if new_key:
                update_ipsecsecret("/etc/ipsec.secrets", new_key)
                ipsecsecret = new_key
            else:
                print("\033[91mCrazy Secret Key\033[0m")
        elif choice == "6":
            save_stuff_ipipseck1(
                private_ip_private,
                local_ip_private,
                remote_ip_private,
                is_ipip=False,
            )
            save_stuff_ipipseck1(
                private_ip_ipip, local_ip_ipip, remote_ip_ipip, is_ipip=True
            )
            update_ipsec_ip(private_ip_ipip)
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Please select a valid option.")


def ipipkharejone1sec_editmulti_local():
    local_ip_private = local_ip("/etc/private1.sh")
    remote_ip_private = remote_ip("/etc/private1.sh")
    private_ip_private = private_ip1("/etc/private1.sh")

    local_ip_ipip = local_ip("/etc/ipip1.sh")
    remote_ip_ipip = remote_ip("/etc/ipip1.sh")
    private_ip_ipip = private_ipip1("/etc/ipip1.sh")

    ipsecsecret = get_ipsecsecret("/etc/ipsec.secrets")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("couldn't retrieve IP addresses from private file")
    if not local_ip_ipip or not remote_ip_ipip or not private_ip_ipip:
        print("couldn't retrieve IP addresses from ipip file")
    if not ipsecsecret:
        print("couldn't retrieve IPsec secret key from ipsec file")

    if (
        not local_ip_private
        or not remote_ip_private
        or not private_ip_private
        or not local_ip_ipip
        or not remote_ip_ipip
        or not private_ip_ipip
        or not ipsecsecret
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_privatekharejone1(
            local_ip_private, remote_ip_private, private_ip_private
        )
        display_stuff_ip6ip6(local_ip_ipip, remote_ip_ipip, private_ip_ipip)

        display_ipsecsecret(ipsecsecret)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mIP6IP6 + IPSEC\033[93m Kharej Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej \033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mIRAN [1]\033[92m Public IP\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[93mChange \033[97mIP6IP6 \033[93mPrivate IPV6\033[0m")
        print("5. \033[93mChange IPSEC \033[92mSecret Key\033[0m")
        print("6. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter new private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_private = new_ip
                ip_parts = new_ip.split(":")
                if new_ip.endswith(":2"):
                    ip_parts[-1] = "1"
                else:
                    ip_parts[-1] = "2"
                counterpart_ip = ":".join(ip_parts)
                local_ip_ipip = new_ip
                remote_ip_ipip = counterpart_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter new private IPv6 address \033[96m[IP6IP6]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_ipip
                private_ip_ipip = new_ip

                update_ipsec_conf_iranipip1("/etc/ipsec1.conf", new_ip)
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mKharej\033[93m Public IP :\033[0m ")
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input("\033[93mEnter \033[92mIRAN [1]\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "5":
            new_key = input(
                "\033[93mEnter new \033[92mIPsec \033[93mSecret Key: \033[0m"
            )
            if new_key:
                update_ipsecsecret("/etc/ipsec.secrets", new_key)
                ipsecsecret = new_key
            else:
                print("\033[91mCrazy Secret Key\033[0m")
        elif choice == "6":
            save_stuff_ipipseciran1(
                private_ip_private,
                local_ip_private,
                remote_ip_private,
                is_ipip=False,
            )
            save_stuff_ipipseciran1(
                private_ip_ipip, local_ip_ipip, remote_ip_ipip, is_ipip=True
            )
            update_ipsec_ip_multi(private_ip_ipip)
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Please select a valid option.")


def ipipiranfive2sec_editmulti_local():
    local_ip_private = local_ip("/etc/private2.sh")
    remote_ip_private = remote_ip("/etc/private2.sh")
    private_ip_private = private_ip1("/etc/private2.sh")

    local_ip_ipip = local_ip("/etc/ipip2.sh")
    remote_ip_ipip = remote_ip("/etc/ipip2.sh")
    private_ip_ipip = private_ipip1("/etc/ipip2.sh")

    ipsecsecret = get_ipsecsecret("/etc/ipsec.secrets")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("couldn't retrieve IP addresses from private file")
    if not local_ip_ipip or not remote_ip_ipip or not private_ip_ipip:
        print("couldn't retrieve IP addresses from ipip file")
    if not ipsecsecret:
        print("couldn't retrieve IPsec secret key from ipsec file")

    if (
        not local_ip_private
        or not remote_ip_private
        or not private_ip_private
        or not local_ip_ipip
        or not remote_ip_ipip
        or not private_ip_ipip
        or not ipsecsecret
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_privateiranfive2(
            local_ip_private, remote_ip_private, private_ip_private
        )
        display_stuff_ip6ip6(local_ip_ipip, remote_ip_ipip, private_ip_ipip)

        display_ipsecsecret(ipsecsecret)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mIP6IP6 + IPSEC\033[93m IRAN [2] Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN [2] \033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mKharej \033[92m Public IP\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[93mChange \033[97mIP6IP6 \033[93mPrivate IPV6\033[0m")
        print("5. \033[93mChange IPSEC \033[92mSecret Key\033[0m")
        print("6. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_private = new_ip
                ip_parts = new_ip.split(":")
                if new_ip.endswith(":2"):
                    ip_parts[-1] = "1"
                else:
                    ip_parts[-1] = "2"
                counterpart_ip = ":".join(ip_parts)
                local_ip_ipip = new_ip
                remote_ip_ipip = counterpart_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[IP6IP6]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_ipip
                private_ip_ipip = new_ip

                update_ipfile_ipip2("/etc/ipsec1.conf", new_ip, update_type="ipsec")
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mIRAN [2]\033[93m Public IP :\033[0m ")
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input("\033[93mEnter \033[92mKharej\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "5":
            new_key = input(
                "\033[93mEnter new \033[92mIPsec \033[93mSecret Key: \033[0m"
            )
            if new_key:
                update_ipsecsecret("/etc/ipsec.secrets", new_key)
                ipsecsecret = new_key
            else:
                print("\033[91mCrazy Secret Key\033[0m")
        elif choice == "6":
            save_stuff_ipipseck2(
                private_ip_private,
                local_ip_private,
                remote_ip_private,
                is_ipip=False,
            )
            save_stuff_ipipseck2(
                private_ip_ipip, local_ip_ipip, remote_ip_ipip, is_ipip=True
            )
            update_ipsec_ip(private_ip_ipip)
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Please select a valid option.")


def ipipkharejone2sec_editmulti_local():
    local_ip_private = local_ip("/etc/private2.sh")
    remote_ip_private = remote_ip("/etc/private2.sh")
    private_ip_private = private_ip1("/etc/private2.sh")

    local_ip_ipip = local_ip("/etc/ipip2.sh")
    remote_ip_ipip = remote_ip("/etc/ipip2.sh")
    private_ip_ipip = private_ipip1("/etc/ipip2.sh")

    ipsecsecret = get_ipsecsecret("/etc/ipsec.secrets")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("couldn't retrieve IP addresses from private file")
    if not local_ip_ipip or not remote_ip_ipip or not private_ip_ipip:
        print("couldn't retrieve IP addresses from ipip file")
    if not ipsecsecret:
        print("couldn't retrieve IPsec secret key from ipsec file")

    if (
        not local_ip_private
        or not remote_ip_private
        or not private_ip_private
        or not local_ip_ipip
        or not remote_ip_ipip
        or not private_ip_ipip
        or not ipsecsecret
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_privatekharejone2(
            local_ip_private, remote_ip_private, private_ip_private
        )
        display_stuff_ip6ip6(local_ip_ipip, remote_ip_ipip, private_ip_ipip)

        display_ipsecsecret(ipsecsecret)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mIP6IP6 + IPSEC\033[93m Kharej Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej \033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mIRAN [2]\033[92m Public IP\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[93mChange \033[97mIP6IP6 \033[93mPrivate IPV6\033[0m")
        print("5. \033[93mChange IPSEC \033[92mSecret Key\033[0m")
        print("6. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter new private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_private = new_ip
                ip_parts = new_ip.split(":")
                if new_ip.endswith(":2"):
                    ip_parts[-1] = "1"
                else:
                    ip_parts[-1] = "2"
                counterpart_ip = ":".join(ip_parts)
                local_ip_ipip = new_ip
                remote_ip_ipip = counterpart_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter new private IPv6 address \033[96m[IP6IP6]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_ipip
                private_ip_ipip = new_ip

                update_ipsec_conf_iranipip2("/etc/ipsec1.conf", new_ip)
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mKharej\033[93m Public IP :\033[0m ")
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input("\033[93mEnter \033[92mIRAN [2]\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "5":
            new_key = input(
                "\033[93mEnter new \033[92mIPsec \033[93mSecret Key: \033[0m"
            )
            if new_key:
                update_ipsecsecret("/etc/ipsec.secrets", new_key)
                ipsecsecret = new_key
            else:
                print("\033[91mCrazy Secret Key\033[0m")
        elif choice == "6":
            save_stuff_ipipseciran2(
                private_ip_private,
                local_ip_private,
                remote_ip_private,
                is_ipip=False,
            )
            save_stuff_ipipseciran2(
                private_ip_ipip, local_ip_ipip, remote_ip_ipip, is_ipip=True
            )
            update_ipsec_ip_multi2(private_ip_ipip)
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Please select a valid option.")


# 3
def ipipiranfive3sec_editmulti_local():
    local_ip_private = local_ip("/etc/private3.sh")
    remote_ip_private = remote_ip("/etc/private3.sh")
    private_ip_private = private_ip1("/etc/private3.sh")

    local_ip_ipip = local_ip("/etc/ipip3.sh")
    remote_ip_ipip = remote_ip("/etc/ipip3.sh")
    private_ip_ipip = private_ipip1("/etc/ipip3.sh")

    ipsecsecret = get_ipsecsecret("/etc/ipsec.secrets")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("couldn't retrieve IP addresses from private file")
    if not local_ip_ipip or not remote_ip_ipip or not private_ip_ipip:
        print("couldn't retrieve IP addresses from ipip file")
    if not ipsecsecret:
        print("couldn't retrieve IPsec secret key from ipsec file")

    if (
        not local_ip_private
        or not remote_ip_private
        or not private_ip_private
        or not local_ip_ipip
        or not remote_ip_ipip
        or not private_ip_ipip
        or not ipsecsecret
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_privateiranfive3(
            local_ip_private, remote_ip_private, private_ip_private
        )
        display_stuff_ip6ip6(local_ip_ipip, remote_ip_ipip, private_ip_ipip)

        display_ipsecsecret(ipsecsecret)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mIP6IP6 + IPSEC\033[93m IRAN [3] Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN [3] \033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mKharej \033[92m Public IP\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[93mChange \033[97mIP6IP6 \033[93mPrivate IPV6\033[0m")
        print("5. \033[93mChange IPSEC \033[92mSecret Key\033[0m")
        print("6. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_private = new_ip
                ip_parts = new_ip.split(":")
                if new_ip.endswith(":2"):
                    ip_parts[-1] = "1"
                else:
                    ip_parts[-1] = "2"
                counterpart_ip = ":".join(ip_parts)
                local_ip_ipip = new_ip
                remote_ip_ipip = counterpart_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[IP6IP6]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_ipip
                private_ip_ipip = new_ip

                update_ipfile_ipip3("/etc/ipsec1.conf", new_ip, update_type="ipsec")
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mIRAN [3]\033[93m Public IP :\033[0m ")
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input("\033[93mEnter \033[92mKharej\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "5":
            new_key = input(
                "\033[93mEnter new \033[92mIPsec \033[93mSecret Key: \033[0m"
            )
            if new_key:
                update_ipsecsecret("/etc/ipsec.secrets", new_key)
                ipsecsecret = new_key
            else:
                print("\033[91mCrazy Secret Key\033[0m")
        elif choice == "6":
            save_stuff_ipipseck3(
                private_ip_private,
                local_ip_private,
                remote_ip_private,
                is_ipip=False,
            )
            save_stuff_ipipseck3(
                private_ip_ipip, local_ip_ipip, remote_ip_ipip, is_ipip=True
            )
            update_ipsec_ip(private_ip_ipip)
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Please select a valid option.")


def ipipkharejone3sec_editmulti_local():
    local_ip_private = local_ip("/etc/private3.sh")
    remote_ip_private = remote_ip("/etc/private3.sh")
    private_ip_private = private_ip1("/etc/private3.sh")

    local_ip_ipip = local_ip("/etc/ipip3.sh")
    remote_ip_ipip = remote_ip("/etc/ipip3.sh")
    private_ip_ipip = private_ipip1("/etc/ipip3.sh")

    ipsecsecret = get_ipsecsecret("/etc/ipsec.secrets")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("couldn't retrieve IP addresses from private file")
    if not local_ip_ipip or not remote_ip_ipip or not private_ip_ipip:
        print("couldn't retrieve IP addresses from ipip file")
    if not ipsecsecret:
        print("couldn't retrieve IPsec secret key from ipsec file")

    if (
        not local_ip_private
        or not remote_ip_private
        or not private_ip_private
        or not local_ip_ipip
        or not remote_ip_ipip
        or not private_ip_ipip
        or not ipsecsecret
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_privatekharejone3(
            local_ip_private, remote_ip_private, private_ip_private
        )
        display_stuff_ip6ip6(local_ip_ipip, remote_ip_ipip, private_ip_ipip)

        display_ipsecsecret(ipsecsecret)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mIP6IP6 + IPSEC\033[93m Kharej Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej \033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mIRAN [3]\033[92m Public IP\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[93mChange \033[97mIP6IP6 \033[93mPrivate IPV6\033[0m")
        print("5. \033[93mChange IPSEC \033[92mSecret Key\033[0m")
        print("6. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter new private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_private = new_ip
                ip_parts = new_ip.split(":")
                if new_ip.endswith(":2"):
                    ip_parts[-1] = "1"
                else:
                    ip_parts[-1] = "2"
                counterpart_ip = ":".join(ip_parts)
                local_ip_ipip = new_ip
                remote_ip_ipip = counterpart_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter new private IPv6 address \033[96m[IP6IP6]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_ipip
                private_ip_ipip = new_ip

                update_ipsec_conf_iranipip3("/etc/ipsec1.conf", new_ip)
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mKharej\033[93m Public IP :\033[0m ")
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input("\033[93mEnter \033[92mIRAN [3]\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "5":
            new_key = input(
                "\033[93mEnter new \033[92mIPsec \033[93mSecret Key: \033[0m"
            )
            if new_key:
                update_ipsecsecret("/etc/ipsec.secrets", new_key)
                ipsecsecret = new_key
            else:
                print("\033[91mCrazy Secret Key\033[0m")
        elif choice == "6":
            save_stuff_ipipseciran3(
                private_ip_private,
                local_ip_private,
                remote_ip_private,
                is_ipip=False,
            )
            save_stuff_ipipseciran3(
                private_ip_ipip, local_ip_ipip, remote_ip_ipip, is_ipip=True
            )
            update_ipsec_ip_multi3(private_ip_ipip)
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Please select a valid option.")


# 4
def ipipiranfive4sec_editmulti_local():
    local_ip_private = local_ip("/etc/private4.sh")
    remote_ip_private = remote_ip("/etc/private4.sh")
    private_ip_private = private_ip1("/etc/private4.sh")

    local_ip_ipip = local_ip("/etc/ipip4.sh")
    remote_ip_ipip = remote_ip("/etc/ipip4.sh")
    private_ip_ipip = private_ipip1("/etc/ipip4.sh")

    ipsecsecret = get_ipsecsecret("/etc/ipsec.secrets")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("couldn't retrieve IP addresses from private file")
    if not local_ip_ipip or not remote_ip_ipip or not private_ip_ipip:
        print("couldn't retrieve IP addresses from ipip file")
    if not ipsecsecret:
        print("couldn't retrieve IPsec secret key from ipsec file")

    if (
        not local_ip_private
        or not remote_ip_private
        or not private_ip_private
        or not local_ip_ipip
        or not remote_ip_ipip
        or not private_ip_ipip
        or not ipsecsecret
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_privateiranfive4(
            local_ip_private, remote_ip_private, private_ip_private
        )
        display_stuff_ip6ip6(local_ip_ipip, remote_ip_ipip, private_ip_ipip)

        display_ipsecsecret(ipsecsecret)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mIP6IP6 + IPSEC\033[93m IRAN [4] Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN [4] \033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mKharej \033[92m Public IP\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[93mChange \033[97mIP6IP6 \033[93mPrivate IPV6\033[0m")
        print("5. \033[93mChange IPSEC \033[92mSecret Key\033[0m")
        print("6. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_private = new_ip
                ip_parts = new_ip.split(":")
                if new_ip.endswith(":2"):
                    ip_parts[-1] = "1"
                else:
                    ip_parts[-1] = "2"
                counterpart_ip = ":".join(ip_parts)
                local_ip_ipip = new_ip
                remote_ip_ipip = counterpart_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[IP6IP6]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_ipip
                private_ip_ipip = new_ip

                update_ipfile_ipip4("/etc/ipsec1.conf", new_ip, update_type="ipsec")
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mIRAN [4]\033[93m Public IP :\033[0m ")
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input("\033[93mEnter \033[92mKharej\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "5":
            new_key = input(
                "\033[93mEnter new \033[92mIPsec \033[93mSecret Key: \033[0m"
            )
            if new_key:
                update_ipsecsecret("/etc/ipsec.secrets", new_key)
                ipsecsecret = new_key
            else:
                print("\033[91mCrazy Secret Key\033[0m")
        elif choice == "6":
            save_stuff_ipipseck4(
                private_ip_private,
                local_ip_private,
                remote_ip_private,
                is_ipip=False,
            )
            save_stuff_ipipseck4(
                private_ip_ipip, local_ip_ipip, remote_ip_ipip, is_ipip=True
            )
            update_ipsec_ip(private_ip_ipip)
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Please select a valid option.")


def ipipkharejone4sec_editmulti_local():
    local_ip_private = local_ip("/etc/private4.sh")
    remote_ip_private = remote_ip("/etc/private4.sh")
    private_ip_private = private_ip1("/etc/private4.sh")

    local_ip_ipip = local_ip("/etc/ipip4.sh")
    remote_ip_ipip = remote_ip("/etc/ipip4.sh")
    private_ip_ipip = private_ipip1("/etc/ipip4.sh")

    ipsecsecret = get_ipsecsecret("/etc/ipsec.secrets")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("couldn't retrieve IP addresses from private file")
    if not local_ip_ipip or not remote_ip_ipip or not private_ip_ipip:
        print("couldn't retrieve IP addresses from ipip file")
    if not ipsecsecret:
        print("couldn't retrieve IPsec secret key from ipsec file")

    if (
        not local_ip_private
        or not remote_ip_private
        or not private_ip_private
        or not local_ip_ipip
        or not remote_ip_ipip
        or not private_ip_ipip
        or not ipsecsecret
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_privatekharejone4(
            local_ip_private, remote_ip_private, private_ip_private
        )
        display_stuff_ip6ip6(local_ip_ipip, remote_ip_ipip, private_ip_ipip)

        display_ipsecsecret(ipsecsecret)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mIP6IP6 + IPSEC\033[93m Kharej Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej \033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mIRAN [4]\033[92m Public IP\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[93mChange \033[97mIP6IP6 \033[93mPrivate IPV6\033[0m")
        print("5. \033[93mChange IPSEC \033[92mSecret Key\033[0m")
        print("6. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter new private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_private = new_ip
                ip_parts = new_ip.split(":")
                if new_ip.endswith(":2"):
                    ip_parts[-1] = "1"
                else:
                    ip_parts[-1] = "2"
                counterpart_ip = ":".join(ip_parts)
                local_ip_ipip = new_ip
                remote_ip_ipip = counterpart_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter new private IPv6 address \033[96m[IP6IP6]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_ipip
                private_ip_ipip = new_ip

                update_ipsec_conf_iranipip4("/etc/ipsec1.conf", new_ip)
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mKharej\033[93m Public IP :\033[0m ")
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input("\033[93mEnter \033[92mIRAN [4]\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "5":
            new_key = input(
                "\033[93mEnter new \033[92mIPsec \033[93mSecret Key: \033[0m"
            )
            if new_key:
                update_ipsecsecret("/etc/ipsec.secrets", new_key)
                ipsecsecret = new_key
            else:
                print("\033[91mCrazy Secret Key\033[0m")
        elif choice == "6":
            save_stuff_ipipseciran4(
                private_ip_private,
                local_ip_private,
                remote_ip_private,
                is_ipip=False,
            )
            save_stuff_ipipseciran4(
                private_ip_ipip, local_ip_ipip, remote_ip_ipip, is_ipip=True
            )
            update_ipsec_ip_multi4(private_ip_ipip)
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Please select a valid option.")


# 5
def ipipiranfive5sec_editmulti_local():
    local_ip_private = local_ip("/etc/private5.sh")
    remote_ip_private = remote_ip("/etc/private5.sh")
    private_ip_private = private_ip1("/etc/private5.sh")

    local_ip_ipip = local_ip("/etc/ipip5.sh")
    remote_ip_ipip = remote_ip("/etc/ipip5.sh")
    private_ip_ipip = private_ipip1("/etc/ipip5.sh")

    ipsecsecret = get_ipsecsecret("/etc/ipsec.secrets")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("couldn't retrieve IP addresses from private file")
    if not local_ip_ipip or not remote_ip_ipip or not private_ip_ipip:
        print("couldn't retrieve IP addresses from ipip file")
    if not ipsecsecret:
        print("couldn't retrieve IPsec secret key from ipsec file")

    if (
        not local_ip_private
        or not remote_ip_private
        or not private_ip_private
        or not local_ip_ipip
        or not remote_ip_ipip
        or not private_ip_ipip
        or not ipsecsecret
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_privateiranfive5(
            local_ip_private, remote_ip_private, private_ip_private
        )
        display_stuff_ip6ip6(local_ip_ipip, remote_ip_ipip, private_ip_ipip)

        display_ipsecsecret(ipsecsecret)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mIP6IP6 + IPSEC\033[93m IRAN [5] Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN [5] \033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mKharej \033[92m Public IP\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[93mChange \033[97mIP6IP6 \033[93mPrivate IPV6\033[0m")
        print("5. \033[93mChange IPSEC \033[92mSecret Key\033[0m")
        print("6. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_private = new_ip
                ip_parts = new_ip.split(":")
                if new_ip.endswith(":2"):
                    ip_parts[-1] = "1"
                else:
                    ip_parts[-1] = "2"
                counterpart_ip = ":".join(ip_parts)
                local_ip_ipip = new_ip
                remote_ip_ipip = counterpart_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[IP6IP6]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_ipip
                private_ip_ipip = new_ip

                update_ipfile_ipip5("/etc/ipsec1.conf", new_ip, update_type="ipsec")
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mIRAN [5]\033[93m Public IP :\033[0m ")
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input("\033[93mEnter \033[92mKharej\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "5":
            new_key = input(
                "\033[93mEnter new \033[92mIPsec \033[93mSecret Key: \033[0m"
            )
            if new_key:
                update_ipsecsecret("/etc/ipsec.secrets", new_key)
                ipsecsecret = new_key
            else:
                print("\033[91mCrazy Secret Key\033[0m")
        elif choice == "6":
            save_stuff_ipipseck5(
                private_ip_private,
                local_ip_private,
                remote_ip_private,
                is_ipip=False,
            )
            save_stuff_ipipseck5(
                private_ip_ipip, local_ip_ipip, remote_ip_ipip, is_ipip=True
            )
            update_ipsec_ip(private_ip_ipip)
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Please select a valid option.")


def ipipkharejone5sec_editmulti_local():
    local_ip_private = local_ip("/etc/private5.sh")
    remote_ip_private = remote_ip("/etc/private5.sh")
    private_ip_private = private_ip1("/etc/private5.sh")

    local_ip_ipip = local_ip("/etc/ipip5.sh")
    remote_ip_ipip = remote_ip("/etc/ipip5.sh")
    private_ip_ipip = private_ipip1("/etc/ipip5.sh")

    ipsecsecret = get_ipsecsecret("/etc/ipsec.secrets")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("couldn't retrieve IP addresses from private file")
    if not local_ip_ipip or not remote_ip_ipip or not private_ip_ipip:
        print("couldn't retrieve IP addresses from ipip file")
    if not ipsecsecret:
        print("couldn't retrieve IPsec secret key from ipsec file")

    if (
        not local_ip_private
        or not remote_ip_private
        or not private_ip_private
        or not local_ip_ipip
        or not remote_ip_ipip
        or not private_ip_ipip
        or not ipsecsecret
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_privatekharejone5(
            local_ip_private, remote_ip_private, private_ip_private
        )
        display_stuff_ip6ip6(local_ip_ipip, remote_ip_ipip, private_ip_ipip)

        display_ipsecsecret(ipsecsecret)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mIP6IP6 + IPSEC\033[93m Kharej Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej \033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mIRAN [5]\033[92m Public IP\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[93mChange \033[97mIP6IP6 \033[93mPrivate IPV6\033[0m")
        print("5. \033[93mChange IPSEC \033[92mSecret Key\033[0m")
        print("6. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter new private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_private = new_ip
                ip_parts = new_ip.split(":")
                if new_ip.endswith(":2"):
                    ip_parts[-1] = "1"
                else:
                    ip_parts[-1] = "2"
                counterpart_ip = ":".join(ip_parts)
                local_ip_ipip = new_ip
                remote_ip_ipip = counterpart_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter new private IPv6 address \033[96m[IP6IP6]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_ipip
                private_ip_ipip = new_ip

                update_ipsec_conf_iranipip5("/etc/ipsec1.conf", new_ip)
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mKharej\033[93m Public IP :\033[0m ")
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input("\033[93mEnter \033[92mIRAN [5]\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "5":
            new_key = input(
                "\033[93mEnter new \033[92mIPsec \033[93mSecret Key: \033[0m"
            )
            if new_key:
                update_ipsecsecret("/etc/ipsec.secrets", new_key)
                ipsecsecret = new_key
            else:
                print("\033[91mCrazy Secret Key\033[0m")
        elif choice == "6":
            save_stuff_ipipseciran5(
                private_ip_private,
                local_ip_private,
                remote_ip_private,
                is_ipip=False,
            )
            save_stuff_ipipseciran5(
                private_ip_ipip, local_ip_ipip, remote_ip_ipip, is_ipip=True
            )
            update_ipsec_ip_multi5(private_ip_ipip)
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Please select a valid option.")


def ip6ip6nosec_multiedit_local():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print("\033[92m(   ) \033[92mEdit local\033[93m IP6IP6 Menu\033[0m")
    print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[96mKharej\033[92m[10] \033[93mIRAN\033[92m[1]\033[0m")
    print("2. \033[96mKharej\033[92m[1] \033[93mIRAN\033[92m[10]  \033[0m")
    print("3. \033[94mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        choice = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if choice == "1":
            ip6ip6nosec_edit_localkharej_multi()
            break
        elif choice == "2":
            ip6ip6nosec_edit_localiran_multi()
            break
        elif choice == "3":
            clear()
            ip6ip6_multiedit_local()
            break
        else:
            print("Invalid choice.")


def ip6ip6nosec_edit_localiran_multi():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print(
        "\033[92m(   ) \033[93mIP6IP6 \033[92m[10]IRAN\033[96m [1]Kharej\033[93m Menu\033[0m"
    )
    print('\033[92m "-"\033[93m══════════════════════════\033[0m')
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[92mIRAN[1]\033[0m")
    print("2. \033[92mIRAN[2]\033[0m")
    print("3. \033[93mIRAN[3]\033[0m")
    print("4. \033[92mIRAN[4]\033[0m")
    print("5. \033[92mIRAN[5]\033[0m")
    print("6. \033[92mIRAN[6]\033[0m")
    print("7. \033[92mIRAN[7]\033[0m")
    print("8. \033[93mIRAN[8]\033[0m")
    print("9. \033[92mIRAN[9]\033[0m")
    print("10.\033[92mIRAN[10]\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    print("11.\033[93mKharej Menu\033[0m")
    print("0. \033[94mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if server_type == "1":
            ipipiranfive1_editmulti_local()
            break
        elif server_type == "2":
            ipipiranfive2_editmulti_local()
            break
        elif server_type == "3":
            ipipiranfive3_editmulti_local()
            break
        elif server_type == "4":
            ipipiranfive4_editmulti_local()
            break
        elif server_type == "5":
            ipipiranfive5_editmulti_local()
            break
        elif server_type == "6":
            ipipiranfive6_editmulti_local()
            break
        elif server_type == "7":
            ipipiranfive7_editmulti_local()
            break
        elif server_type == "8":
            ipipiranfive8_editmulti_local()
            break
        elif server_type == "9":
            ipipiranfive9_editmulti_local()
            break
        elif server_type == "10":
            ipipiranfive10_editmulti_local()
            break
        elif server_type == "11":
            ipipkharejone_editmulti_localmenu()
            break
        elif server_type == "0":
            os.system("clear")
            ip6ip6nosec_multiedit_local()
            break
        else:
            print("Invalid choice.")


def ipipkharejone_editmulti_localmenu():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print(
        "\033[92m(   ) \033[93mIP6IP6 \033[92m[10]IRAN\033[96m [1]Kharej\033[93m Menu\033[0m"
    )
    print('\033[92m "-"\033[93m══════════════════════════\033[0m')
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mThis is Kharej Menu:\033[0m")
    print("1. \033[92mServer[1]\033[0m")
    print("2. \033[92mServer[2]\033[0m")
    print("3. \033[93mServer[3]\033[0m")
    print("4. \033[92mServer[4]\033[0m")
    print("5. \033[92mServer[5]\033[0m")
    print("6. \033[92mServer[6]\033[0m")
    print("7. \033[92mServer[7]\033[0m")
    print("8. \033[93mServer[8]\033[0m")
    print("9. \033[92mServer[9]\033[0m")
    print("10.\033[92mServer[10]\033[0m")
    print("0. \033[94mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if server_type == "1":
            ipipkharejone1_editmulti_local()
            break
        elif server_type == "2":
            ipipkharejone2_editmulti_local()
            break
        elif server_type == "3":
            ipipkharejone3_editmulti_local()
            break
        elif server_type == "4":
            ipipkharejone4_editmulti_local()
            break
        elif server_type == "5":
            ipipkharejone5_editmulti_local()
            break
        elif server_type == "6":
            ipipkharejone6_editmulti_local()
            break
        elif server_type == "7":
            ipipkharejone7_editmulti_local()
            break
        elif server_type == "8":
            ipipkharejone8_editmulti_local()
            break
        elif server_type == "9":
            ipipkharejone9_editmulti_local()
            break
        elif server_type == "10":
            ipipkharejone10_editmulti_local()
            break
        elif server_type == "0":
            os.system("clear")
            ip6ip6nosec_multiedit_local()
            break
        else:
            print("Invalid choice.")


def ip6ip6nosec_edit_localkharej_multi():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print(
        "\033[92m(   ) \033[93mIP6IP6 \033[92m[10]Kharej\033[96m [1]IRAN\033[93m Menu\033[0m"
    )
    print('\033[92m "-"\033[93m══════════════════════════\033[0m')
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[92mKharej[1]\033[0m")
    print("2. \033[92mKharej[2]\033[0m")
    print("3. \033[93mKharej[3]\033[0m")
    print("4. \033[92mKharej[4]\033[0m")
    print("5. \033[92mKharej[5]\033[0m")
    print("6. \033[92mKharej[6]\033[0m")
    print("7. \033[92mKharej[7]\033[0m")
    print("8. \033[93mKharej[8]\033[0m")
    print("9. \033[92mKharej[9]\033[0m")
    print("10.\033[92mKharej[10]\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    print("11.\033[93mIRAN Menu\033[0m")
    print("0. \033[94mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if server_type == "1":
            ipipkharej1_editmulti_local()
            break
        elif server_type == "2":
            ipipkharej2_editmulti_local()
            break
        elif server_type == "3":
            ipipkharej3_editmulti_local()
            break
        elif server_type == "4":
            ipipkharej4_editmulti_local()
            break
        elif server_type == "5":
            ipipkharej5_editmulti_local()
            break
        elif server_type == "6":
            ipipkharej6_editmulti_local()
            break
        elif server_type == "7":
            ipipkharej7_editmulti_local()
            break
        elif server_type == "8":
            ipipkharej8_editmulti_local()
            break
        elif server_type == "9":
            ipipkharej9_editmulti_local()
            break
        elif server_type == "10":
            ipipkharej10_editmulti_local()
            break
        elif server_type == "11":
            ipipiran_editmulti_local()
            break
        elif server_type == "0":
            os.system("clear")
            ip6ip6nosec_multiedit_local()
            break
        else:
            print("Invalid choice.")


def ipipiran_editmulti_local():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print(
        "\033[92m(   ) \033[93mIP6IP6 \033[92m[10]Kharej\033[96m [1]IRAN\033[93m Menu\033[0m"
    )
    print('\033[92m "-"\033[93m══════════════════════════\033[0m')
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mThis is IRAN menu:\033[0m")
    print("1. \033[92mServer[1]\033[0m")
    print("2. \033[92mServer[2]\033[0m")
    print("3. \033[93mServer[3]\033[0m")
    print("4. \033[92mServer[4]\033[0m")
    print("5. \033[92mServer[5]\033[0m")
    print("6. \033[92mServer[6]\033[0m")
    print("7. \033[92mServer[7]\033[0m")
    print("8. \033[93mServer[8]\033[0m")
    print("9. \033[92mServer[9]\033[0m")
    print("10.\033[92mServer[10]\033[0m")
    print("0. \033[94mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if server_type == "1":
            ipipir1_editmulti_local()
            break
        elif server_type == "2":
            ipipir2_editmulti_local()
            break
        elif server_type == "3":
            ipipir3_editmulti_local()
            break
        elif server_type == "4":
            ipipir4_editmulti_local()
            break
        elif server_type == "5":
            ipipir5_editmulti_local()
            break
        elif server_type == "6":
            ipipir6_editmulti_local()
            break
        elif server_type == "7":
            ipipir7_editmulti_local()
            break
        elif server_type == "8":
            ipipir8_editmulti_local()
            break
        elif server_type == "9":
            ipipir9_editmulti_local()
            break
        elif server_type == "10":
            ipipir10_editmulti_local()
            break
        elif server_type == "0":
            os.system("clear")
            ip6ip6nosec_multiedit_local()
            break
        else:
            print("Invalid choice.")


def save_stuff_ipip1(private_ip, local_ip, remote_ip, is_ipip):
    current_ips = get_current_private_ipsipip1()
    current_ip = current_ips["ipip"] if is_ipip else current_ips["private"]

    if current_ip:
        delete_ufw_rules(current_ip)

    add_ufw_rules(private_ip)

    counterpart_ip = wtb_opposite_ip(private_ip)
    try:
        if is_ipip:
            update_pingfile_sit("/etc/ping_ip1.sh", counterpart_ip)
            update_ipfile_ipip1("/etc/ipip1.sh", private_ip, update_type="private")
            update_ipfile_ipip1("/etc/ipip1.sh", remote_ip, update_type="remote")
        else:
            update_pingfile_sit("/etc/ping_v61.sh", counterpart_ip)
            update_ipfile_ipip1("/etc/private1.sh", private_ip, update_type="private")
            update_ipfile_ipip1("/etc/private1.sh", local_ip, update_type="local")
            update_ipfile_ipip1("/etc/private1.sh", remote_ip, update_type="remote")

        interface = "azumip1" if is_ipip else "azumi1"
        subprocess.run(["ip", "link", "set", "dev", interface, "down"], check=True)
        subprocess.run(["ip", "link", "delete", interface], check=True)
    except subprocess.CalledProcessError as e:
        print("\033[91merror bringing interface down or deleting it\033[0m")

    try:
        script = "/etc/ipip1.sh" if is_ipip else "/etc/private1.sh"
        result = subprocess.run(["/bin/bash", script], capture_output=True, text=True)
        if "RTNETLINK answers: File exists" in result.stderr:
            print("\033[91madditional ip already exists. Ignoring this error\033[0m")
        else:
            result.check_returncode()
        display_checkmark(
            f"\033[92mChanges saved and {interface} interface updated successfully!\033[0m"
        )
        subprocess.run(["sudo", "systemctl", "daemon-reload"], check=True)
        subprocess.run(["sudo", "systemctl", "restart", "ping_v61"], check=True)
        subprocess.run(["sudo", "systemctl", "restart", "ping_ip1"], check=True)

        # display_checkmark("\033[92mSystem services reloaded and restarted successfully!\033[0m")
    except subprocess.CalledProcessError as e:
        print("\033[91merror applying network changes\033[0m")
    except FileNotFoundError:
        print(f"\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def ipipkharej1_editmulti_local():
    local_ip_private = local_ip("/etc/private1.sh")
    remote_ip_private = remote_ip("/etc/private1.sh")
    private_ip_private = private_ip1("/etc/private1.sh")

    local_ip_ipip = local_ip("/etc/ipip1.sh")
    remote_ip_ipip = remote_ip("/etc/ipip1.sh")
    private_ip_ipip = private_ipip1("/etc/ipip1.sh")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("couldn't retrieve IP addresses from private file")
    if not local_ip_ipip or not remote_ip_ipip or not private_ip_ipip:
        print("couldn't retrieve IP addresses from ipip file")

    if (
        not local_ip_private
        or not remote_ip_private
        or not private_ip_private
        or not local_ip_ipip
        or not remote_ip_ipip
        or not private_ip_ipip
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_privatekharej1(
            local_ip_private, remote_ip_private, private_ip_private
        )
        display_stuff_ip6ip6(local_ip_ipip, remote_ip_ipip, private_ip_ipip)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mIP6IP6\033[93m Kharej [1] Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej [1] \033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mIRAN \033[92m Public IP\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[93mChange \033[97mIP6IP6 \033[93mPrivate IPV6\033[0m")
        print("5. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_private = new_ip
                ip_parts = new_ip.split(":")
                if new_ip.endswith(":2"):
                    ip_parts[-1] = "1"
                else:
                    ip_parts[-1] = "2"
                counterpart_ip = ":".join(ip_parts)
                local_ip_ipip = new_ip
                remote_ip_ipip = counterpart_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[IP6IP6]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_ipip = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mKharej [1]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input("\033[93mEnter \033[92mIRAN\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "5":
            save_stuff_ipip1(
                private_ip_private,
                local_ip_private,
                remote_ip_private,
                is_ipip=False,
            )
            save_stuff_ipip1(
                private_ip_ipip, local_ip_ipip, remote_ip_ipip, is_ipip=True
            )
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Invalid choice. Please select a valid option.")


def ipipir1_editmulti_local():
    local_ip_private = local_ip("/etc/private1.sh")
    remote_ip_private = remote_ip("/etc/private1.sh")
    private_ip_private = private_ip1("/etc/private1.sh")

    local_ip_ipip = local_ip("/etc/ipip1.sh")
    remote_ip_ipip = remote_ip("/etc/ipip1.sh")
    private_ip_ipip = private_ipip1("/etc/ipip1.sh")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("couldn't retrieve IP addresses from private file")
    if not local_ip_ipip or not remote_ip_ipip or not private_ip_ipip:
        print("couldn't retrieve IP addresses from ipip file")

    if (
        not local_ip_private
        or not remote_ip_private
        or not private_ip_private
        or not local_ip_ipip
        or not remote_ip_ipip
        or not private_ip_ipip
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_privateiran1(
            local_ip_private, remote_ip_private, private_ip_private
        )
        display_stuff_ip6ip6(local_ip_ipip, remote_ip_ipip, private_ip_ipip)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mIP6IP6\033[93m IRAN Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN \033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mKharej [1] \033[92m Public IP\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[93mChange \033[97mIP6IP6 \033[93mPrivate IPV6\033[0m")
        print("5. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_private = new_ip
                ip_parts = new_ip.split(":")
                if new_ip.endswith(":2"):
                    ip_parts[-1] = "1"
                else:
                    ip_parts[-1] = "2"
                counterpart_ip = ":".join(ip_parts)
                local_ip_ipip = new_ip
                remote_ip_ipip = counterpart_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[IP6IP6]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_ipip = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mIRAN\033[93m Public IP :\033[0m ")
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mKharej [1]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "5":
            save_stuff_ipip1(
                private_ip_private,
                local_ip_private,
                remote_ip_private,
                is_ipip=False,
            )
            save_stuff_ipip1(
                private_ip_ipip, local_ip_ipip, remote_ip_ipip, is_ipip=True
            )
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Invalid choice. Please select a valid option.")


# 2
def save_stuff_ipip2(private_ip, local_ip, remote_ip, is_ipip):
    current_ips = get_current_private_ipsipip2()
    current_ip = current_ips["ipip"] if is_ipip else current_ips["private"]

    if current_ip:
        delete_ufw_rules(current_ip)

    add_ufw_rules(private_ip)

    counterpart_ip = wtb_opposite_ip(private_ip)
    try:
        if is_ipip:
            update_pingfile_sit("/etc/ping_ip2.sh", counterpart_ip)
            update_ipfile_ipip2("/etc/ipip2.sh", private_ip, update_type="private")
            update_ipfile_ipip2("/etc/ipip2.sh", remote_ip, update_type="remote")
        else:
            update_pingfile_sit("/etc/ping_v62.sh", counterpart_ip)
            update_ipfile_ipip2("/etc/private2.sh", private_ip, update_type="private")
            update_ipfile_ipip2("/etc/private2.sh", local_ip, update_type="local")
            update_ipfile_ipip2("/etc/private2.sh", remote_ip, update_type="remote")

        interface = "azumip2" if is_ipip else "azumi2"
        subprocess.run(["ip", "link", "set", "dev", interface, "down"], check=True)
        subprocess.run(["ip", "link", "delete", interface], check=True)
    except subprocess.CalledProcessError as e:
        print("\033[91merror bringing interface down or deleting it\033[0m")

    try:
        script = "/etc/ipip2.sh" if is_ipip else "/etc/private2.sh"
        result = subprocess.run(["/bin/bash", script], capture_output=True, text=True)
        if "RTNETLINK answers: File exists" in result.stderr:
            print("\033[91madditional ip already exists. Ignoring this error\033[0m")
        else:
            result.check_returncode()
        display_checkmark(
            f"\033[92mChanges saved and {interface} interface updated successfully!\033[0m"
        )
        subprocess.run(["sudo", "systemctl", "daemon-reload"], check=True)
        subprocess.run(["sudo", "systemctl", "restart", "ping_v62"], check=True)
        subprocess.run(["sudo", "systemctl", "restart", "ping_ip2"], check=True)

        # display_checkmark("\033[92mSystem services reloaded and restarted successfully!\033[0m")
    except subprocess.CalledProcessError as e:
        print("\033[91merror applying network changes\033[0m")
    except FileNotFoundError:
        print(f"\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def ipipkharej2_editmulti_local():
    local_ip_private = local_ip("/etc/private2.sh")
    remote_ip_private = remote_ip("/etc/private2.sh")
    private_ip_private = private_ip1("/etc/private2.sh")

    local_ip_ipip = local_ip("/etc/ipip2.sh")
    remote_ip_ipip = remote_ip("/etc/ipip2.sh")
    private_ip_ipip = private_ipip1("/etc/ipip2.sh")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("couldn't retrieve IP addresses from private file")
    if not local_ip_ipip or not remote_ip_ipip or not private_ip_ipip:
        print("couldn't retrieve IP addresses from ipip file")

    if (
        not local_ip_private
        or not remote_ip_private
        or not private_ip_private
        or not local_ip_ipip
        or not remote_ip_ipip
        or not private_ip_ipip
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_privatekharej2(
            local_ip_private, remote_ip_private, private_ip_private
        )
        display_stuff_ip6ip6(local_ip_ipip, remote_ip_ipip, private_ip_ipip)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mIP6IP6\033[93m Kharej [2] Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej [2] \033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mIRAN \033[92m Public IP\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[93mChange \033[97mIP6IP6 \033[93mPrivate IPV6\033[0m")
        print("5. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_private = new_ip
                ip_parts = new_ip.split(":")
                if new_ip.endswith(":2"):
                    ip_parts[-1] = "1"
                else:
                    ip_parts[-1] = "2"
                counterpart_ip = ":".join(ip_parts)
                local_ip_ipip = new_ip
                remote_ip_ipip = counterpart_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[IP6IP6]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_ipip = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mKharej [2]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input("\033[93mEnter \033[92mIRAN\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "5":
            save_stuff_ipip2(
                private_ip_private,
                local_ip_private,
                remote_ip_private,
                is_ipip=False,
            )
            save_stuff_ipip2(
                private_ip_ipip, local_ip_ipip, remote_ip_ipip, is_ipip=True
            )
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Invalid choice. Please select a valid option.")


def ipipir2_editmulti_local():
    local_ip_private = local_ip("/etc/private2.sh")
    remote_ip_private = remote_ip("/etc/private2.sh")
    private_ip_private = private_ip1("/etc/private2.sh")

    local_ip_ipip = local_ip("/etc/ipip2.sh")
    remote_ip_ipip = remote_ip("/etc/ipip2.sh")
    private_ip_ipip = private_ipip1("/etc/ipip2.sh")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("couldn't retrieve IP addresses from private file")
    if not local_ip_ipip or not remote_ip_ipip or not private_ip_ipip:
        print("couldn't retrieve IP addresses from ipip file")

    if (
        not local_ip_private
        or not remote_ip_private
        or not private_ip_private
        or not local_ip_ipip
        or not remote_ip_ipip
        or not private_ip_ipip
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_privateiran2(
            local_ip_private, remote_ip_private, private_ip_private
        )
        display_stuff_ip6ip6(local_ip_ipip, remote_ip_ipip, private_ip_ipip)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mIP6IP6\033[93m IRAN Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN \033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mKharej [2] \033[92m Public IP\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[93mChange \033[97mIP6IP6 \033[93mPrivate IPV6\033[0m")
        print("5. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_private = new_ip
                ip_parts = new_ip.split(":")
                if new_ip.endswith(":2"):
                    ip_parts[-1] = "1"
                else:
                    ip_parts[-1] = "2"
                counterpart_ip = ":".join(ip_parts)
                local_ip_ipip = new_ip
                remote_ip_ipip = counterpart_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[IP6IP6]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_ipip = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mIRAN\033[93m Public IP :\033[0m ")
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mKharej [2]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "5":
            save_stuff_ipip2(
                private_ip_private,
                local_ip_private,
                remote_ip_private,
                is_ipip=False,
            )
            save_stuff_ipip2(
                private_ip_ipip, local_ip_ipip, remote_ip_ipip, is_ipip=True
            )
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Invalid choice. Please select a valid option.")


# 3
def save_stuff_ipip3(private_ip, local_ip, remote_ip, is_ipip):
    current_ips = get_current_private_ipsipip3()
    current_ip = current_ips["ipip"] if is_ipip else current_ips["private"]

    if current_ip:
        delete_ufw_rules(current_ip)

    add_ufw_rules(private_ip)

    counterpart_ip = wtb_opposite_ip(private_ip)
    try:
        if is_ipip:
            update_pingfile_sit("/etc/ping_ip3.sh", counterpart_ip)
            update_ipfile_ipip3("/etc/ipip3.sh", private_ip, update_type="private")
            update_ipfile_ipip3("/etc/ipip3.sh", remote_ip, update_type="remote")
        else:
            update_pingfile_sit("/etc/ping_v63.sh", counterpart_ip)
            update_ipfile_ipip3("/etc/private3.sh", private_ip, update_type="private")
            update_ipfile_ipip3("/etc/private3.sh", local_ip, update_type="local")
            update_ipfile_ipip3("/etc/private3.sh", remote_ip, update_type="remote")

        interface = "azumip3" if is_ipip else "azumi3"
        subprocess.run(["ip", "link", "set", "dev", interface, "down"], check=True)
        subprocess.run(["ip", "link", "delete", interface], check=True)
    except subprocess.CalledProcessError as e:
        print("\033[91merror bringing interface down or deleting it\033[0m")

    try:
        script = "/etc/ipip3.sh" if is_ipip else "/etc/private3.sh"
        result = subprocess.run(["/bin/bash", script], capture_output=True, text=True)
        if "RTNETLINK answers: File exists" in result.stderr:
            print("\033[91madditional ip already exists. Ignoring this error\033[0m")
        else:
            result.check_returncode()
        display_checkmark(
            f"\033[92mChanges saved and {interface} interface updated successfully!\033[0m"
        )
        subprocess.run(["sudo", "systemctl", "daemon-reload"], check=True)
        subprocess.run(["sudo", "systemctl", "restart", "ping_v63"], check=True)
        subprocess.run(["sudo", "systemctl", "restart", "ping_ip3"], check=True)

        # display_checkmark("\033[92mSystem services reloaded and restarted successfully!\033[0m")
    except subprocess.CalledProcessError as e:
        print("\033[91merror applying network changes\033[0m")
    except FileNotFoundError:
        print(f"\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def ipipkharej3_editmulti_local():
    local_ip_private = local_ip("/etc/private3.sh")
    remote_ip_private = remote_ip("/etc/private3.sh")
    private_ip_private = private_ip1("/etc/private3.sh")

    local_ip_ipip = local_ip("/etc/ipip3.sh")
    remote_ip_ipip = remote_ip("/etc/ipip3.sh")
    private_ip_ipip = private_ipip1("/etc/ipip3.sh")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("couldn't retrieve IP addresses from private file")
    if not local_ip_ipip or not remote_ip_ipip or not private_ip_ipip:
        print("couldn't retrieve IP addresses from ipip file")

    if (
        not local_ip_private
        or not remote_ip_private
        or not private_ip_private
        or not local_ip_ipip
        or not remote_ip_ipip
        or not private_ip_ipip
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_privatekharej3(
            local_ip_private, remote_ip_private, private_ip_private
        )
        display_stuff_ip6ip6(local_ip_ipip, remote_ip_ipip, private_ip_ipip)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mIP6IP6\033[93m Kharej [3] Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej [3] \033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mIRAN \033[92m Public IP\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[93mChange \033[97mIP6IP6 \033[93mPrivate IPV6\033[0m")
        print("5. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_private = new_ip
                ip_parts = new_ip.split(":")
                if new_ip.endswith(":2"):
                    ip_parts[-1] = "1"
                else:
                    ip_parts[-1] = "2"
                counterpart_ip = ":".join(ip_parts)
                local_ip_ipip = new_ip
                remote_ip_ipip = counterpart_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[IP6IP6]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_ipip = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mKharej [3]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input("\033[93mEnter \033[92mIRAN\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "5":
            save_stuff_ipip3(
                private_ip_private,
                local_ip_private,
                remote_ip_private,
                is_ipip=False,
            )
            save_stuff_ipip3(
                private_ip_ipip, local_ip_ipip, remote_ip_ipip, is_ipip=True
            )
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Invalid choice. Please select a valid option.")


def ipipir3_editmulti_local():
    local_ip_private = local_ip("/etc/private3.sh")
    remote_ip_private = remote_ip("/etc/private3.sh")
    private_ip_private = private_ip1("/etc/private3.sh")

    local_ip_ipip = local_ip("/etc/ipip3.sh")
    remote_ip_ipip = remote_ip("/etc/ipip3.sh")
    private_ip_ipip = private_ipip1("/etc/ipip3.sh")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("couldn't retrieve IP addresses from private file")
    if not local_ip_ipip or not remote_ip_ipip or not private_ip_ipip:
        print("couldn't retrieve IP addresses from ipip file")

    if (
        not local_ip_private
        or not remote_ip_private
        or not private_ip_private
        or not local_ip_ipip
        or not remote_ip_ipip
        or not private_ip_ipip
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_privateiran3(
            local_ip_private, remote_ip_private, private_ip_private
        )
        display_stuff_ip6ip6(local_ip_ipip, remote_ip_ipip, private_ip_ipip)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mIP6IP6\033[93m IRAN Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN \033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mKharej [3] \033[92m Public IP\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[93mChange \033[97mIP6IP6 \033[93mPrivate IPV6\033[0m")
        print("5. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_private = new_ip
                ip_parts = new_ip.split(":")
                if new_ip.endswith(":2"):
                    ip_parts[-1] = "1"
                else:
                    ip_parts[-1] = "2"
                counterpart_ip = ":".join(ip_parts)
                local_ip_ipip = new_ip
                remote_ip_ipip = counterpart_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[IP6IP6]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_ipip = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mIRAN\033[93m Public IP :\033[0m ")
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mKharej [3]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "5":
            save_stuff_ipip3(
                private_ip_private,
                local_ip_private,
                remote_ip_private,
                is_ipip=False,
            )
            save_stuff_ipip3(
                private_ip_ipip, local_ip_ipip, remote_ip_ipip, is_ipip=True
            )
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Invalid choice. Please select a valid option.")


# 4
def save_stuff_ipip4(private_ip, local_ip, remote_ip, is_ipip):
    current_ips = get_current_private_ipsipip4()
    current_ip = current_ips["ipip"] if is_ipip else current_ips["private"]

    if current_ip:
        delete_ufw_rules(current_ip)

    add_ufw_rules(private_ip)

    counterpart_ip = wtb_opposite_ip(private_ip)
    try:
        if is_ipip:
            update_pingfile_sit("/etc/ping_ip4.sh", counterpart_ip)
            update_ipfile_ipip4("/etc/ipip4.sh", private_ip, update_type="private")
            update_ipfile_ipip4("/etc/ipip4.sh", remote_ip, update_type="remote")
        else:
            update_pingfile_sit("/etc/ping_v64.sh", counterpart_ip)
            update_ipfile_ipip4("/etc/private4.sh", private_ip, update_type="private")
            update_ipfile_ipip4("/etc/private4.sh", local_ip, update_type="local")
            update_ipfile_ipip4("/etc/private4.sh", remote_ip, update_type="remote")

        interface = "azumip4" if is_ipip else "azumi4"
        subprocess.run(["ip", "link", "set", "dev", interface, "down"], check=True)
        subprocess.run(["ip", "link", "delete", interface], check=True)
    except subprocess.CalledProcessError as e:
        print("\033[91merror bringing interface down or deleting it\033[0m")

    try:
        script = "/etc/ipip4.sh" if is_ipip else "/etc/private4.sh"
        result = subprocess.run(["/bin/bash", script], capture_output=True, text=True)
        if "RTNETLINK answers: File exists" in result.stderr:
            print("\033[91madditional ip already exists. Ignoring this error\033[0m")
        else:
            result.check_returncode()
        display_checkmark(
            f"\033[92mChanges saved and {interface} interface updated successfully!\033[0m"
        )
        subprocess.run(["sudo", "systemctl", "daemon-reload"], check=True)
        subprocess.run(["sudo", "systemctl", "restart", "ping_v64"], check=True)
        subprocess.run(["sudo", "systemctl", "restart", "ping_ip4"], check=True)

        # display_checkmark("\033[92mSystem services reloaded and restarted successfully!\033[0m")
    except subprocess.CalledProcessError as e:
        print("\033[91merror applying network changes\033[0m")
    except FileNotFoundError:
        print(f"\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def ipipkharej4_editmulti_local():
    local_ip_private = local_ip("/etc/private4.sh")
    remote_ip_private = remote_ip("/etc/private4.sh")
    private_ip_private = private_ip1("/etc/private4.sh")

    local_ip_ipip = local_ip("/etc/ipip4.sh")
    remote_ip_ipip = remote_ip("/etc/ipip4.sh")
    private_ip_ipip = private_ipip1("/etc/ipip4.sh")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("couldn't retrieve IP addresses from private file")
    if not local_ip_ipip or not remote_ip_ipip or not private_ip_ipip:
        print("couldn't retrieve IP addresses from ipip file")

    if (
        not local_ip_private
        or not remote_ip_private
        or not private_ip_private
        or not local_ip_ipip
        or not remote_ip_ipip
        or not private_ip_ipip
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_privatekharej4(
            local_ip_private, remote_ip_private, private_ip_private
        )
        display_stuff_ip6ip6(local_ip_ipip, remote_ip_ipip, private_ip_ipip)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mIP6IP6\033[93m Kharej [4] Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej [4] \033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mIRAN \033[92m Public IP\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[93mChange \033[97mIP6IP6 \033[93mPrivate IPV6\033[0m")
        print("5. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_private = new_ip
                ip_parts = new_ip.split(":")
                if new_ip.endswith(":2"):
                    ip_parts[-1] = "1"
                else:
                    ip_parts[-1] = "2"
                counterpart_ip = ":".join(ip_parts)
                local_ip_ipip = new_ip
                remote_ip_ipip = counterpart_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[IP6IP6]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_ipip = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mKharej [4]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input("\033[93mEnter \033[92mIRAN\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "5":
            save_stuff_ipip4(
                private_ip_private,
                local_ip_private,
                remote_ip_private,
                is_ipip=False,
            )
            save_stuff_ipip4(
                private_ip_ipip, local_ip_ipip, remote_ip_ipip, is_ipip=True
            )
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Invalid choice. Please select a valid option.")


def ipipir4_editmulti_local():
    local_ip_private = local_ip("/etc/private4.sh")
    remote_ip_private = remote_ip("/etc/private4.sh")
    private_ip_private = private_ip1("/etc/private4.sh")

    local_ip_ipip = local_ip("/etc/ipip4.sh")
    remote_ip_ipip = remote_ip("/etc/ipip4.sh")
    private_ip_ipip = private_ipip1("/etc/ipip4.sh")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("couldn't retrieve IP addresses from private file")
    if not local_ip_ipip or not remote_ip_ipip or not private_ip_ipip:
        print("couldn't retrieve IP addresses from ipip file")

    if (
        not local_ip_private
        or not remote_ip_private
        or not private_ip_private
        or not local_ip_ipip
        or not remote_ip_ipip
        or not private_ip_ipip
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_privateiran4(
            local_ip_private, remote_ip_private, private_ip_private
        )
        display_stuff_ip6ip6(local_ip_ipip, remote_ip_ipip, private_ip_ipip)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mIP6IP6\033[93m IRAN Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN \033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mKharej [4] \033[92m Public IP\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[93mChange \033[97mIP6IP6 \033[93mPrivate IPV6\033[0m")
        print("5. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_private = new_ip
                ip_parts = new_ip.split(":")
                if new_ip.endswith(":2"):
                    ip_parts[-1] = "1"
                else:
                    ip_parts[-1] = "2"
                counterpart_ip = ":".join(ip_parts)
                local_ip_ipip = new_ip
                remote_ip_ipip = counterpart_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[IP6IP6]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_ipip = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mIRAN\033[93m Public IP :\033[0m ")
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mKharej [4]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "5":
            save_stuff_ipip4(
                private_ip_private,
                local_ip_private,
                remote_ip_private,
                is_ipip=False,
            )
            save_stuff_ipip4(
                private_ip_ipip, local_ip_ipip, remote_ip_ipip, is_ipip=True
            )
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Invalid choice. Please select a valid option.")


# 5
def save_stuff_ipip5(private_ip, local_ip, remote_ip, is_ipip):
    current_ips = get_current_private_ipsipip5()
    current_ip = current_ips["ipip"] if is_ipip else current_ips["private"]

    if current_ip:
        delete_ufw_rules(current_ip)

    add_ufw_rules(private_ip)

    counterpart_ip = wtb_opposite_ip(private_ip)
    try:
        if is_ipip:
            update_pingfile_sit("/etc/ping_ip5.sh", counterpart_ip)
            update_ipfile_ipip5("/etc/ipip5.sh", private_ip, update_type="private")
            update_ipfile_ipip5("/etc/ipip5.sh", remote_ip, update_type="remote")
        else:
            update_pingfile_sit("/etc/ping_v65.sh", counterpart_ip)
            update_ipfile_ipip5("/etc/private5.sh", private_ip, update_type="private")
            update_ipfile_ipip5("/etc/private5.sh", local_ip, update_type="local")
            update_ipfile_ipip5("/etc/private5.sh", remote_ip, update_type="remote")

        interface = "azumip5" if is_ipip else "azumi5"
        subprocess.run(["ip", "link", "set", "dev", interface, "down"], check=True)
        subprocess.run(["ip", "link", "delete", interface], check=True)
    except subprocess.CalledProcessError as e:
        print("\033[91merror bringing interface down or deleting it\033[0m")

    try:
        script = "/etc/ipip5.sh" if is_ipip else "/etc/private5.sh"
        result = subprocess.run(["/bin/bash", script], capture_output=True, text=True)
        if "RTNETLINK answers: File exists" in result.stderr:
            print("\033[91madditional ip already exists. Ignoring this error\033[0m")
        else:
            result.check_returncode()
        display_checkmark(
            f"\033[92mChanges saved and {interface} interface updated successfully!\033[0m"
        )
        subprocess.run(["sudo", "systemctl", "daemon-reload"], check=True)
        subprocess.run(["sudo", "systemctl", "restart", "ping_v65"], check=True)
        subprocess.run(["sudo", "systemctl", "restart", "ping_ip5"], check=True)

        # display_checkmark("\033[92mSystem services reloaded and restarted successfully!\033[0m")
    except subprocess.CalledProcessError as e:
        print("\033[91merror applying network changes\033[0m")
    except FileNotFoundError:
        print(f"\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def ipipkharej5_editmulti_local():
    local_ip_private = local_ip("/etc/private5.sh")
    remote_ip_private = remote_ip("/etc/private5.sh")
    private_ip_private = private_ip1("/etc/private5.sh")

    local_ip_ipip = local_ip("/etc/ipip5.sh")
    remote_ip_ipip = remote_ip("/etc/ipip5.sh")
    private_ip_ipip = private_ipip1("/etc/ipip5.sh")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("couldn't retrieve IP addresses from private file")
    if not local_ip_ipip or not remote_ip_ipip or not private_ip_ipip:
        print("couldn't retrieve IP addresses from ipip file")

    if (
        not local_ip_private
        or not remote_ip_private
        or not private_ip_private
        or not local_ip_ipip
        or not remote_ip_ipip
        or not private_ip_ipip
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_privatekharej5(
            local_ip_private, remote_ip_private, private_ip_private
        )
        display_stuff_ip6ip6(local_ip_ipip, remote_ip_ipip, private_ip_ipip)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mIP6IP6\033[93m Kharej [5] Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej [5] \033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mIRAN \033[92m Public IP\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[93mChange \033[97mIP6IP6 \033[93mPrivate IPV6\033[0m")
        print("5. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_private = new_ip
                ip_parts = new_ip.split(":")
                if new_ip.endswith(":2"):
                    ip_parts[-1] = "1"
                else:
                    ip_parts[-1] = "2"
                counterpart_ip = ":".join(ip_parts)
                local_ip_ipip = new_ip
                remote_ip_ipip = counterpart_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[IP6IP6]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_ipip = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mKharej [5]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input("\033[93mEnter \033[92mIRAN\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "5":
            save_stuff_ipip5(
                private_ip_private,
                local_ip_private,
                remote_ip_private,
                is_ipip=False,
            )
            save_stuff_ipip5(
                private_ip_ipip, local_ip_ipip, remote_ip_ipip, is_ipip=True
            )
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Invalid choice. Please select a valid option.")


def ipipir5_editmulti_local():
    local_ip_private = local_ip("/etc/private5.sh")
    remote_ip_private = remote_ip("/etc/private5.sh")
    private_ip_private = private_ip1("/etc/private5.sh")

    local_ip_ipip = local_ip("/etc/ipip5.sh")
    remote_ip_ipip = remote_ip("/etc/ipip5.sh")
    private_ip_ipip = private_ipip1("/etc/ipip5.sh")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("couldn't retrieve IP addresses from private file")
    if not local_ip_ipip or not remote_ip_ipip or not private_ip_ipip:
        print("couldn't retrieve IP addresses from ipip file")

    if (
        not local_ip_private
        or not remote_ip_private
        or not private_ip_private
        or not local_ip_ipip
        or not remote_ip_ipip
        or not private_ip_ipip
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_privateiran5(
            local_ip_private, remote_ip_private, private_ip_private
        )
        display_stuff_ip6ip6(local_ip_ipip, remote_ip_ipip, private_ip_ipip)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mIP6IP6\033[93m IRAN Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN \033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mKharej [5] \033[92m Public IP\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[93mChange \033[97mIP6IP6 \033[93mPrivate IPV6\033[0m")
        print("5. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_private = new_ip
                ip_parts = new_ip.split(":")
                if new_ip.endswith(":2"):
                    ip_parts[-1] = "1"
                else:
                    ip_parts[-1] = "2"
                counterpart_ip = ":".join(ip_parts)
                local_ip_ipip = new_ip
                remote_ip_ipip = counterpart_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[IP6IP6]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_ipip = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mIRAN\033[93m Public IP :\033[0m ")
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mKharej [5]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "5":
            save_stuff_ipip5(
                private_ip_private,
                local_ip_private,
                remote_ip_private,
                is_ipip=False,
            )
            save_stuff_ipip5(
                private_ip_ipip, local_ip_ipip, remote_ip_ipip, is_ipip=True
            )
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Invalid choice. Please select a valid option.")


# 6
def get_current_private_ipsipip6():
    private_ip_private = private_ipip1("/etc/private6.sh")
    private_ip_ipip = private_ipip1("/etc/ipip6.sh")
    return {
        "private": private_ip_private,
        "ipip": private_ip_ipip,
    }


def update_ipfile_ipip6(name, new_ip, update_type):
    try:
        with open(name, "r") as f:
            content = f.read()

        if update_type == "private":
            new_content = re.sub(
                r"ip (-6 )?addr add [^ ]+/64 dev azumi?",
                f"ip -6 addr add {new_ip}/64 dev azumi",
                content,
            )
            ip_parts = new_ip.split(":")
            if new_ip.endswith(":2"):
                ip_parts[-1] = "1"
            else:
                ip_parts[-1] = "2"
            counterpart_ip = ":".join(ip_parts)
            new_content = re.sub(
                r"ip (-6 )?route add [^ ]+/64 dev azumi?",
                f"ip -6 route add {counterpart_ip}/64 dev azumi",
                new_content,
            )
            update_ipfile_ipip6("/etc/ipip6.sh", new_ip, update_type="ipip_local")
            update_ipfile_ipip6(
                "/etc/ipip6.sh", counterpart_ip, update_type="ipip_remote"
            )
        elif update_type == "local":
            new_content = re.sub(r"local \S+", f"local {new_ip}", content)
        elif update_type == "remote":
            new_content = re.sub(r"remote \S+", f"remote {new_ip}", content)
        elif update_type == "ipip_local":
            new_content = re.sub(r"local \S+", f"local {new_ip}", content)
        elif update_type == "ipip_remote":
            new_content = re.sub(r"remote \S+", f"remote {new_ip}", content)
        elif update_type == "ipsec":
            new_content = re.sub(r"leftsubnet=\S+", f"leftsubnet={new_ip}/64", content)
            new_content = re.sub(r"leftid=\S+", f"leftid={new_ip}", new_content)

            ip_parts = new_ip.split(":")
            if new_ip.endswith(":1"):
                ip_parts[-1] = "2"
            else:
                ip_parts[-1] = "1"
            counterpart_ip = ":".join(ip_parts)
            new_content = re.sub(r"right=\S+", f"right={counterpart_ip}", new_content)
            new_content = re.sub(
                r"rightsubnet=\S+",
                f"rightsubnet={counterpart_ip}/64",
                new_content,
            )

        with open(name, "w") as f:
            f.write(new_content)
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def save_stuff_ipip6(private_ip, local_ip, remote_ip, is_ipip):
    current_ips = get_current_private_ipsipip6()
    current_ip = current_ips["ipip"] if is_ipip else current_ips["private"]

    if current_ip:
        delete_ufw_rules(current_ip)

    add_ufw_rules(private_ip)

    counterpart_ip = wtb_opposite_ip(private_ip)
    try:
        if is_ipip:
            update_pingfile_sit("/etc/ping_ip6.sh", counterpart_ip)
            update_ipfile_ipip6("/etc/ipip6.sh", private_ip, update_type="private")
            update_ipfile_ipip6("/etc/ipip6.sh", remote_ip, update_type="remote")
        else:
            update_pingfile_sit("/etc/ping_v66.sh", counterpart_ip)
            update_ipfile_ipip6("/etc/private6.sh", private_ip, update_type="private")
            update_ipfile_ipip6("/etc/private6.sh", local_ip, update_type="local")
            update_ipfile_ipip6("/etc/private6.sh", remote_ip, update_type="remote")

        interface = "azumip6" if is_ipip else "azumi6"
        subprocess.run(["ip", "link", "set", "dev", interface, "down"], check=True)
        subprocess.run(["ip", "link", "delete", interface], check=True)
    except subprocess.CalledProcessError as e:
        print("\033[91merror bringing interface down or deleting it\033[0m")

    try:
        script = "/etc/ipip6.sh" if is_ipip else "/etc/private6.sh"
        result = subprocess.run(["/bin/bash", script], capture_output=True, text=True)
        if "RTNETLINK answers: File exists" in result.stderr:
            print("\033[91madditional ip already exists. Ignoring this error\033[0m")
        else:
            result.check_returncode()
        display_checkmark(
            f"\033[92mChanges saved and {interface} interface updated successfully!\033[0m"
        )
        subprocess.run(["sudo", "systemctl", "daemon-reload"], check=True)
        subprocess.run(["sudo", "systemctl", "restart", "ping_v66"], check=True)
        subprocess.run(["sudo", "systemctl", "restart", "ping_ip6"], check=True)

        # display_checkmark("\033[92mSystem services reloaded and restarted successfully!\033[0m")
    except subprocess.CalledProcessError as e:
        print("\033[91merror applying network changes\033[0m")
    except FileNotFoundError:
        print(f"\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def ipipkharej6_editmulti_local():
    local_ip_private = local_ip("/etc/private6.sh")
    remote_ip_private = remote_ip("/etc/private6.sh")
    private_ip_private = private_ip1("/etc/private6.sh")

    local_ip_ipip = local_ip("/etc/ipip6.sh")
    remote_ip_ipip = remote_ip("/etc/ipip6.sh")
    private_ip_ipip = private_ipip1("/etc/ipip6.sh")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("couldn't retrieve IP addresses from private file")
    if not local_ip_ipip or not remote_ip_ipip or not private_ip_ipip:
        print("couldn't retrieve IP addresses from ipip file")

    if (
        not local_ip_private
        or not remote_ip_private
        or not private_ip_private
        or not local_ip_ipip
        or not remote_ip_ipip
        or not private_ip_ipip
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_privatekharej6(
            local_ip_private, remote_ip_private, private_ip_private
        )
        display_stuff_ip6ip6(local_ip_ipip, remote_ip_ipip, private_ip_ipip)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mIP6IP6\033[93m Kharej [6] Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej [6] \033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mIRAN \033[92m Public IP\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[93mChange \033[97mIP6IP6 \033[93mPrivate IPV6\033[0m")
        print("5. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_private = new_ip
                ip_parts = new_ip.split(":")
                if new_ip.endswith(":2"):
                    ip_parts[-1] = "1"
                else:
                    ip_parts[-1] = "2"
                counterpart_ip = ":".join(ip_parts)
                local_ip_ipip = new_ip
                remote_ip_ipip = counterpart_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[IP6IP6]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_ipip = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mKharej [6]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input("\033[93mEnter \033[92mIRAN\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "5":
            save_stuff_ipip6(
                private_ip_private,
                local_ip_private,
                remote_ip_private,
                is_ipip=False,
            )
            save_stuff_ipip6(
                private_ip_ipip, local_ip_ipip, remote_ip_ipip, is_ipip=True
            )
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Invalid choice. Please select a valid option.")


def ipipir6_editmulti_local():
    local_ip_private = local_ip("/etc/private6.sh")
    remote_ip_private = remote_ip("/etc/private6.sh")
    private_ip_private = private_ip1("/etc/private6.sh")

    local_ip_ipip = local_ip("/etc/ipip6.sh")
    remote_ip_ipip = remote_ip("/etc/ipip6.sh")
    private_ip_ipip = private_ipip1("/etc/ipip6.sh")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("couldn't retrieve IP addresses from private file")
    if not local_ip_ipip or not remote_ip_ipip or not private_ip_ipip:
        print("couldn't retrieve IP addresses from ipip file")

    if (
        not local_ip_private
        or not remote_ip_private
        or not private_ip_private
        or not local_ip_ipip
        or not remote_ip_ipip
        or not private_ip_ipip
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_privateiran6(
            local_ip_private, remote_ip_private, private_ip_private
        )
        display_stuff_ip6ip6(local_ip_ipip, remote_ip_ipip, private_ip_ipip)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mIP6IP6\033[93m IRAN Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN \033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mKharej [6] \033[92m Public IP\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[93mChange \033[97mIP6IP6 \033[93mPrivate IPV6\033[0m")
        print("5. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_private = new_ip
                ip_parts = new_ip.split(":")
                if new_ip.endswith(":2"):
                    ip_parts[-1] = "1"
                else:
                    ip_parts[-1] = "2"
                counterpart_ip = ":".join(ip_parts)
                local_ip_ipip = new_ip
                remote_ip_ipip = counterpart_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[IP6IP6]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_ipip = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mIRAN\033[93m Public IP :\033[0m ")
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mKharej [6]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "5":
            save_stuff_ipip6(
                private_ip_private,
                local_ip_private,
                remote_ip_private,
                is_ipip=False,
            )
            save_stuff_ipip6(
                private_ip_ipip, local_ip_ipip, remote_ip_ipip, is_ipip=True
            )
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Invalid choice. Please select a valid option.")


# 7
def get_current_private_ipsipip7():
    private_ip_private = private_ipip1("/etc/private7.sh")
    private_ip_ipip = private_ipip1("/etc/ipip7.sh")
    return {
        "private": private_ip_private,
        "ipip": private_ip_ipip,
    }


def update_ipfile_ipip7(name, new_ip, update_type):
    try:
        with open(name, "r") as f:
            content = f.read()

        if update_type == "private":
            new_content = re.sub(
                r"ip (-6 )?addr add [^ ]+/64 dev azumi?",
                f"ip -6 addr add {new_ip}/64 dev azumi",
                content,
            )
            ip_parts = new_ip.split(":")
            if new_ip.endswith(":2"):
                ip_parts[-1] = "1"
            else:
                ip_parts[-1] = "2"
            counterpart_ip = ":".join(ip_parts)
            new_content = re.sub(
                r"ip (-6 )?route add [^ ]+/64 dev azumi?",
                f"ip -6 route add {counterpart_ip}/64 dev azumi",
                new_content,
            )
            update_ipfile_ipip7("/etc/ipip7.sh", new_ip, update_type="ipip_local")
            update_ipfile_ipip7(
                "/etc/ipip7.sh", counterpart_ip, update_type="ipip_remote"
            )
        elif update_type == "local":
            new_content = re.sub(r"local \S+", f"local {new_ip}", content)
        elif update_type == "remote":
            new_content = re.sub(r"remote \S+", f"remote {new_ip}", content)
        elif update_type == "ipip_local":
            new_content = re.sub(r"local \S+", f"local {new_ip}", content)
        elif update_type == "ipip_remote":
            new_content = re.sub(r"remote \S+", f"remote {new_ip}", content)
        elif update_type == "ipsec":
            new_content = re.sub(r"leftsubnet=\S+", f"leftsubnet={new_ip}/64", content)
            new_content = re.sub(r"leftid=\S+", f"leftid={new_ip}", new_content)

            ip_parts = new_ip.split(":")
            if new_ip.endswith(":1"):
                ip_parts[-1] = "2"
            else:
                ip_parts[-1] = "1"
            counterpart_ip = ":".join(ip_parts)
            new_content = re.sub(r"right=\S+", f"right={counterpart_ip}", new_content)
            new_content = re.sub(
                r"rightsubnet=\S+",
                f"rightsubnet={counterpart_ip}/64",
                new_content,
            )

        with open(name, "w") as f:
            f.write(new_content)
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def save_stuff_ipip7(private_ip, local_ip, remote_ip, is_ipip):
    current_ips = get_current_private_ipsipip7()
    current_ip = current_ips["ipip"] if is_ipip else current_ips["private"]

    if current_ip:
        delete_ufw_rules(current_ip)

    add_ufw_rules(private_ip)

    counterpart_ip = wtb_opposite_ip(private_ip)
    try:
        if is_ipip:
            update_pingfile_sit("/etc/ping_ip7.sh", counterpart_ip)
            update_ipfile_ipip7("/etc/ipip7.sh", private_ip, update_type="private")
            update_ipfile_ipip7("/etc/ipip7.sh", remote_ip, update_type="remote")
        else:
            update_pingfile_sit("/etc/ping_v67.sh", counterpart_ip)
            update_ipfile_ipip7("/etc/private7.sh", private_ip, update_type="private")
            update_ipfile_ipip7("/etc/private7.sh", local_ip, update_type="local")
            update_ipfile_ipip7("/etc/private7.sh", remote_ip, update_type="remote")

        interface = "azumip7" if is_ipip else "azumi7"
        subprocess.run(["ip", "link", "set", "dev", interface, "down"], check=True)
        subprocess.run(["ip", "link", "delete", interface], check=True)
    except subprocess.CalledProcessError as e:
        print("\033[91merror bringing interface down or deleting it\033[0m")

    try:
        script = "/etc/ipip7.sh" if is_ipip else "/etc/private7.sh"
        result = subprocess.run(["/bin/bash", script], capture_output=True, text=True)
        if "RTNETLINK answers: File exists" in result.stderr:
            print("\033[91madditional ip already exists. Ignoring this error\033[0m")
        else:
            result.check_returncode()
        display_checkmark(
            f"\033[92mChanges saved and {interface} interface updated successfully!\033[0m"
        )
        subprocess.run(["sudo", "systemctl", "daemon-reload"], check=True)
        subprocess.run(["sudo", "systemctl", "restart", "ping_v67"], check=True)
        subprocess.run(["sudo", "systemctl", "restart", "ping_ip7"], check=True)

        # display_checkmark("\033[92mSystem services reloaded and restarted successfully!\033[0m")
    except subprocess.CalledProcessError as e:
        print("\033[91merror applying network changes\033[0m")
    except FileNotFoundError:
        print(f"\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def ipipkharej7_editmulti_local():
    local_ip_private = local_ip("/etc/private7.sh")
    remote_ip_private = remote_ip("/etc/private7.sh")
    private_ip_private = private_ip1("/etc/private7.sh")

    local_ip_ipip = local_ip("/etc/ipip7.sh")
    remote_ip_ipip = remote_ip("/etc/ipip7.sh")
    private_ip_ipip = private_ipip1("/etc/ipip7.sh")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("couldn't retrieve IP addresses from private file")
    if not local_ip_ipip or not remote_ip_ipip or not private_ip_ipip:
        print("couldn't retrieve IP addresses from ipip file")

    if (
        not local_ip_private
        or not remote_ip_private
        or not private_ip_private
        or not local_ip_ipip
        or not remote_ip_ipip
        or not private_ip_ipip
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_privatekharej7(
            local_ip_private, remote_ip_private, private_ip_private
        )
        display_stuff_ip6ip6(local_ip_ipip, remote_ip_ipip, private_ip_ipip)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mIP6IP6\033[93m Kharej [7] Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej [7] \033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mIRAN \033[92m Public IP\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[93mChange \033[97mIP6IP6 \033[93mPrivate IPV6\033[0m")
        print("5. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_private = new_ip
                ip_parts = new_ip.split(":")
                if new_ip.endswith(":2"):
                    ip_parts[-1] = "1"
                else:
                    ip_parts[-1] = "2"
                counterpart_ip = ":".join(ip_parts)
                local_ip_ipip = new_ip
                remote_ip_ipip = counterpart_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[IP6IP6]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_ipip = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mKharej [7]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input("\033[93mEnter \033[92mIRAN\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "5":
            save_stuff_ipip7(
                private_ip_private,
                local_ip_private,
                remote_ip_private,
                is_ipip=False,
            )
            save_stuff_ipip7(
                private_ip_ipip, local_ip_ipip, remote_ip_ipip, is_ipip=True
            )
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Invalid choice. Please select a valid option.")


def ipipir7_editmulti_local():
    local_ip_private = local_ip("/etc/private7.sh")
    remote_ip_private = remote_ip("/etc/private7.sh")
    private_ip_private = private_ip1("/etc/private7.sh")

    local_ip_ipip = local_ip("/etc/ipip7.sh")
    remote_ip_ipip = remote_ip("/etc/ipip7.sh")
    private_ip_ipip = private_ipip1("/etc/ipip7.sh")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("couldn't retrieve IP addresses from private file")
    if not local_ip_ipip or not remote_ip_ipip or not private_ip_ipip:
        print("couldn't retrieve IP addresses from ipip file")

    if (
        not local_ip_private
        or not remote_ip_private
        or not private_ip_private
        or not local_ip_ipip
        or not remote_ip_ipip
        or not private_ip_ipip
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_privateiran7(
            local_ip_private, remote_ip_private, private_ip_private
        )
        display_stuff_ip6ip6(local_ip_ipip, remote_ip_ipip, private_ip_ipip)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mIP6IP6\033[93m IRAN Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN \033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mKharej [7] \033[92m Public IP\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[93mChange \033[97mIP6IP6 \033[93mPrivate IPV6\033[0m")
        print("5. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_private = new_ip
                ip_parts = new_ip.split(":")
                if new_ip.endswith(":2"):
                    ip_parts[-1] = "1"
                else:
                    ip_parts[-1] = "2"
                counterpart_ip = ":".join(ip_parts)
                local_ip_ipip = new_ip
                remote_ip_ipip = counterpart_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[IP6IP6]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_ipip = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mIRAN\033[93m Public IP :\033[0m ")
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mKharej [7]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "5":
            save_stuff_ipip7(
                private_ip_private,
                local_ip_private,
                remote_ip_private,
                is_ipip=False,
            )
            save_stuff_ipip7(
                private_ip_ipip, local_ip_ipip, remote_ip_ipip, is_ipip=True
            )
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Invalid choice. Please select a valid option.")


# 8
def get_current_private_ipsipip8():
    private_ip_private = private_ipip1("/etc/private8.sh")
    private_ip_ipip = private_ipip1("/etc/ipip8.sh")
    return {
        "private": private_ip_private,
        "ipip": private_ip_ipip,
    }


def update_ipfile_ipip8(name, new_ip, update_type):
    try:
        with open(name, "r") as f:
            content = f.read()

        if update_type == "private":
            new_content = re.sub(
                r"ip (-6 )?addr add [^ ]+/64 dev azumi?",
                f"ip -6 addr add {new_ip}/64 dev azumi",
                content,
            )
            ip_parts = new_ip.split(":")
            if new_ip.endswith(":2"):
                ip_parts[-1] = "1"
            else:
                ip_parts[-1] = "2"
            counterpart_ip = ":".join(ip_parts)
            new_content = re.sub(
                r"ip (-6 )?route add [^ ]+/64 dev azumi?",
                f"ip -6 route add {counterpart_ip}/64 dev azumi",
                new_content,
            )
            update_ipfile_ipip8("/etc/ipip8.sh", new_ip, update_type="ipip_local")
            update_ipfile_ipip8(
                "/etc/ipip8.sh", counterpart_ip, update_type="ipip_remote"
            )
        elif update_type == "local":
            new_content = re.sub(r"local \S+", f"local {new_ip}", content)
        elif update_type == "remote":
            new_content = re.sub(r"remote \S+", f"remote {new_ip}", content)
        elif update_type == "ipip_local":
            new_content = re.sub(r"local \S+", f"local {new_ip}", content)
        elif update_type == "ipip_remote":
            new_content = re.sub(r"remote \S+", f"remote {new_ip}", content)
        elif update_type == "ipsec":
            new_content = re.sub(r"leftsubnet=\S+", f"leftsubnet={new_ip}/64", content)
            new_content = re.sub(r"leftid=\S+", f"leftid={new_ip}", new_content)

            ip_parts = new_ip.split(":")
            if new_ip.endswith(":1"):
                ip_parts[-1] = "2"
            else:
                ip_parts[-1] = "1"
            counterpart_ip = ":".join(ip_parts)
            new_content = re.sub(r"right=\S+", f"right={counterpart_ip}", new_content)
            new_content = re.sub(
                r"rightsubnet=\S+",
                f"rightsubnet={counterpart_ip}/64",
                new_content,
            )

        with open(name, "w") as f:
            f.write(new_content)
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def save_stuff_ipip8(private_ip, local_ip, remote_ip, is_ipip):
    current_ips = get_current_private_ipsipip8()
    current_ip = current_ips["ipip"] if is_ipip else current_ips["private"]

    if current_ip:
        delete_ufw_rules(current_ip)

    add_ufw_rules(private_ip)

    counterpart_ip = wtb_opposite_ip(private_ip)
    try:
        if is_ipip:
            update_pingfile_sit("/etc/ping_ip8.sh", counterpart_ip)
            update_ipfile_ipip8("/etc/ipip8.sh", private_ip, update_type="private")
            update_ipfile_ipip8("/etc/ipip8.sh", remote_ip, update_type="remote")
        else:
            update_pingfile_sit("/etc/ping_v68.sh", counterpart_ip)
            update_ipfile_ipip8("/etc/private8.sh", private_ip, update_type="private")
            update_ipfile_ipip8("/etc/private8.sh", local_ip, update_type="local")
            update_ipfile_ipip8("/etc/private8.sh", remote_ip, update_type="remote")

        interface = "azumip8" if is_ipip else "azumi8"
        subprocess.run(["ip", "link", "set", "dev", interface, "down"], check=True)
        subprocess.run(["ip", "link", "delete", interface], check=True)
    except subprocess.CalledProcessError as e:
        print("\033[91merror bringing interface down or deleting it\033[0m")

    try:
        script = "/etc/ipip8.sh" if is_ipip else "/etc/private8.sh"
        result = subprocess.run(["/bin/bash", script], capture_output=True, text=True)
        if "RTNETLINK answers: File exists" in result.stderr:
            print("\033[91madditional ip already exists. Ignoring this error\033[0m")
        else:
            result.check_returncode()
        display_checkmark(
            f"\033[92mChanges saved and {interface} interface updated successfully!\033[0m"
        )
        subprocess.run(["sudo", "systemctl", "daemon-reload"], check=True)
        subprocess.run(["sudo", "systemctl", "restart", "ping_v68"], check=True)
        subprocess.run(["sudo", "systemctl", "restart", "ping_ip8"], check=True)

        # display_checkmark("\033[92mSystem services reloaded and restarted successfully!\033[0m")
    except subprocess.CalledProcessError as e:
        print("\033[91merror applying network changes\033[0m")
    except FileNotFoundError:
        print(f"\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def ipipkharej8_editmulti_local():
    local_ip_private = local_ip("/etc/private8.sh")
    remote_ip_private = remote_ip("/etc/private8.sh")
    private_ip_private = private_ip1("/etc/private8.sh")

    local_ip_ipip = local_ip("/etc/ipip8.sh")
    remote_ip_ipip = remote_ip("/etc/ipip8.sh")
    private_ip_ipip = private_ipip1("/etc/ipip8.sh")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("couldn't retrieve IP addresses from private file")
    if not local_ip_ipip or not remote_ip_ipip or not private_ip_ipip:
        print("couldn't retrieve IP addresses from ipip file")

    if (
        not local_ip_private
        or not remote_ip_private
        or not private_ip_private
        or not local_ip_ipip
        or not remote_ip_ipip
        or not private_ip_ipip
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_privatekharej8(
            local_ip_private, remote_ip_private, private_ip_private
        )
        display_stuff_ip6ip6(local_ip_ipip, remote_ip_ipip, private_ip_ipip)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mIP6IP6\033[93m Kharej [8] Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej [8] \033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mIRAN \033[92m Public IP\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[93mChange \033[97mIP6IP6 \033[93mPrivate IPV6\033[0m")
        print("5. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_private = new_ip
                ip_parts = new_ip.split(":")
                if new_ip.endswith(":2"):
                    ip_parts[-1] = "1"
                else:
                    ip_parts[-1] = "2"
                counterpart_ip = ":".join(ip_parts)
                local_ip_ipip = new_ip
                remote_ip_ipip = counterpart_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[IP6IP6]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_ipip = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mKharej [8]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input("\033[93mEnter \033[92mIRAN\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "5":
            save_stuff_ipip8(
                private_ip_private,
                local_ip_private,
                remote_ip_private,
                is_ipip=False,
            )
            save_stuff_ipip8(
                private_ip_ipip, local_ip_ipip, remote_ip_ipip, is_ipip=True
            )
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Invalid choice. Please select a valid option.")


def ipipir8_editmulti_local():
    local_ip_private = local_ip("/etc/private8.sh")
    remote_ip_private = remote_ip("/etc/private8.sh")
    private_ip_private = private_ip1("/etc/private8.sh")

    local_ip_ipip = local_ip("/etc/ipip8.sh")
    remote_ip_ipip = remote_ip("/etc/ipip8.sh")
    private_ip_ipip = private_ipip1("/etc/ipip8.sh")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("couldn't retrieve IP addresses from private file")
    if not local_ip_ipip or not remote_ip_ipip or not private_ip_ipip:
        print("couldn't retrieve IP addresses from ipip file")

    if (
        not local_ip_private
        or not remote_ip_private
        or not private_ip_private
        or not local_ip_ipip
        or not remote_ip_ipip
        or not private_ip_ipip
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_privateiran8(
            local_ip_private, remote_ip_private, private_ip_private
        )
        display_stuff_ip6ip6(local_ip_ipip, remote_ip_ipip, private_ip_ipip)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mIP6IP6\033[93m IRAN Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN \033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mKharej [8] \033[92m Public IP\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[93mChange \033[97mIP6IP6 \033[93mPrivate IPV6\033[0m")
        print("5. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_private = new_ip
                ip_parts = new_ip.split(":")
                if new_ip.endswith(":2"):
                    ip_parts[-1] = "1"
                else:
                    ip_parts[-1] = "2"
                counterpart_ip = ":".join(ip_parts)
                local_ip_ipip = new_ip
                remote_ip_ipip = counterpart_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[IP6IP6]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_ipip = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mIRAN\033[93m Public IP :\033[0m ")
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mKharej [8]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "5":
            save_stuff_ipip8(
                private_ip_private,
                local_ip_private,
                remote_ip_private,
                is_ipip=False,
            )
            save_stuff_ipip8(
                private_ip_ipip, local_ip_ipip, remote_ip_ipip, is_ipip=True
            )
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Invalid choice. Please select a valid option.")


# 9
def get_current_private_ipsipip9():
    private_ip_private = private_ipip1("/etc/private9.sh")
    private_ip_ipip = private_ipip1("/etc/ipip9.sh")
    return {
        "private": private_ip_private,
        "ipip": private_ip_ipip,
    }


def update_ipfile_ipip9(name, new_ip, update_type):
    try:
        with open(name, "r") as f:
            content = f.read()

        if update_type == "private":
            new_content = re.sub(
                r"ip (-6 )?addr add [^ ]+/64 dev azumi?",
                f"ip -6 addr add {new_ip}/64 dev azumi",
                content,
            )
            ip_parts = new_ip.split(":")
            if new_ip.endswith(":2"):
                ip_parts[-1] = "1"
            else:
                ip_parts[-1] = "2"
            counterpart_ip = ":".join(ip_parts)
            new_content = re.sub(
                r"ip (-6 )?route add [^ ]+/64 dev azumi?",
                f"ip -6 route add {counterpart_ip}/64 dev azumi",
                new_content,
            )
            update_ipfile_ipip9("/etc/ipip9.sh", new_ip, update_type="ipip_local")
            update_ipfile_ipip9(
                "/etc/ipip9.sh", counterpart_ip, update_type="ipip_remote"
            )
        elif update_type == "local":
            new_content = re.sub(r"local \S+", f"local {new_ip}", content)
        elif update_type == "remote":
            new_content = re.sub(r"remote \S+", f"remote {new_ip}", content)
        elif update_type == "ipip_local":
            new_content = re.sub(r"local \S+", f"local {new_ip}", content)
        elif update_type == "ipip_remote":
            new_content = re.sub(r"remote \S+", f"remote {new_ip}", content)
        elif update_type == "ipsec":
            new_content = re.sub(r"leftsubnet=\S+", f"leftsubnet={new_ip}/64", content)
            new_content = re.sub(r"leftid=\S+", f"leftid={new_ip}", new_content)

            ip_parts = new_ip.split(":")
            if new_ip.endswith(":1"):
                ip_parts[-1] = "2"
            else:
                ip_parts[-1] = "1"
            counterpart_ip = ":".join(ip_parts)
            new_content = re.sub(r"right=\S+", f"right={counterpart_ip}", new_content)
            new_content = re.sub(
                r"rightsubnet=\S+",
                f"rightsubnet={counterpart_ip}/64",
                new_content,
            )

        with open(name, "w") as f:
            f.write(new_content)
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def save_stuff_ipip9(private_ip, local_ip, remote_ip, is_ipip):
    current_ips = get_current_private_ipsipip9()
    current_ip = current_ips["ipip"] if is_ipip else current_ips["private"]

    if current_ip:
        delete_ufw_rules(current_ip)

    add_ufw_rules(private_ip)

    counterpart_ip = wtb_opposite_ip(private_ip)
    try:
        if is_ipip:
            update_pingfile_sit("/etc/ping_ip9.sh", counterpart_ip)
            update_ipfile_ipip9("/etc/ipip9.sh", private_ip, update_type="private")
            update_ipfile_ipip9("/etc/ipip9.sh", remote_ip, update_type="remote")
        else:
            update_pingfile_sit("/etc/ping_v69.sh", counterpart_ip)
            update_ipfile_ipip9("/etc/private9.sh", private_ip, update_type="private")
            update_ipfile_ipip9("/etc/private9.sh", local_ip, update_type="local")
            update_ipfile_ipip9("/etc/private9.sh", remote_ip, update_type="remote")

        interface = "azumip9" if is_ipip else "azumi9"
        subprocess.run(["ip", "link", "set", "dev", interface, "down"], check=True)
        subprocess.run(["ip", "link", "delete", interface], check=True)
    except subprocess.CalledProcessError as e:
        print("\033[91merror bringing interface down or deleting it\033[0m")

    try:
        script = "/etc/ipip9.sh" if is_ipip else "/etc/private9.sh"
        result = subprocess.run(["/bin/bash", script], capture_output=True, text=True)
        if "RTNETLINK answers: File exists" in result.stderr:
            print("\033[91madditional ip already exists. Ignoring this error\033[0m")
        else:
            result.check_returncode()
        display_checkmark(
            f"\033[92mChanges saved and {interface} interface updated successfully!\033[0m"
        )
        subprocess.run(["sudo", "systemctl", "daemon-reload"], check=True)
        subprocess.run(["sudo", "systemctl", "restart", "ping_v69"], check=True)
        subprocess.run(["sudo", "systemctl", "restart", "ping_ip9"], check=True)

        # display_checkmark("\033[92mSystem services reloaded and restarted successfully!\033[0m")
    except subprocess.CalledProcessError as e:
        print("\033[91merror applying network changes\033[0m")
    except FileNotFoundError:
        print(f"\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def ipipkharej9_editmulti_local():
    local_ip_private = local_ip("/etc/private9.sh")
    remote_ip_private = remote_ip("/etc/private9.sh")
    private_ip_private = private_ip1("/etc/private9.sh")

    local_ip_ipip = local_ip("/etc/ipip9.sh")
    remote_ip_ipip = remote_ip("/etc/ipip9.sh")
    private_ip_ipip = private_ipip1("/etc/ipip9.sh")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("couldn't retrieve IP addresses from private file")
    if not local_ip_ipip or not remote_ip_ipip or not private_ip_ipip:
        print("couldn't retrieve IP addresses from ipip file")

    if (
        not local_ip_private
        or not remote_ip_private
        or not private_ip_private
        or not local_ip_ipip
        or not remote_ip_ipip
        or not private_ip_ipip
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_privatekharej9(
            local_ip_private, remote_ip_private, private_ip_private
        )
        display_stuff_ip6ip6(local_ip_ipip, remote_ip_ipip, private_ip_ipip)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mIP6IP6\033[93m Kharej [9] Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej [9] \033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mIRAN \033[92m Public IP\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[93mChange \033[97mIP6IP6 \033[93mPrivate IPV6\033[0m")
        print("5. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_private = new_ip
                ip_parts = new_ip.split(":")
                if new_ip.endswith(":2"):
                    ip_parts[-1] = "1"
                else:
                    ip_parts[-1] = "2"
                counterpart_ip = ":".join(ip_parts)
                local_ip_ipip = new_ip
                remote_ip_ipip = counterpart_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[IP6IP6]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_ipip = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mKharej [9]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input("\033[93mEnter \033[92mIRAN\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "5":
            save_stuff_ipip9(
                private_ip_private,
                local_ip_private,
                remote_ip_private,
                is_ipip=False,
            )
            save_stuff_ipip9(
                private_ip_ipip, local_ip_ipip, remote_ip_ipip, is_ipip=True
            )
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Invalid choice. Please select a valid option.")


def ipipir9_editmulti_local():
    local_ip_private = local_ip("/etc/private9.sh")
    remote_ip_private = remote_ip("/etc/private9.sh")
    private_ip_private = private_ip1("/etc/private9.sh")

    local_ip_ipip = local_ip("/etc/ipip9.sh")
    remote_ip_ipip = remote_ip("/etc/ipip9.sh")
    private_ip_ipip = private_ipip1("/etc/ipip9.sh")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("couldn't retrieve IP addresses from private file")
    if not local_ip_ipip or not remote_ip_ipip or not private_ip_ipip:
        print("couldn't retrieve IP addresses from ipip file")

    if (
        not local_ip_private
        or not remote_ip_private
        or not private_ip_private
        or not local_ip_ipip
        or not remote_ip_ipip
        or not private_ip_ipip
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_privateiran9(
            local_ip_private, remote_ip_private, private_ip_private
        )
        display_stuff_ip6ip6(local_ip_ipip, remote_ip_ipip, private_ip_ipip)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mIP6IP6\033[93m IRAN Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN \033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mKharej [9] \033[92m Public IP\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[93mChange \033[97mIP6IP6 \033[93mPrivate IPV6\033[0m")
        print("5. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_private = new_ip
                ip_parts = new_ip.split(":")
                if new_ip.endswith(":2"):
                    ip_parts[-1] = "1"
                else:
                    ip_parts[-1] = "2"
                counterpart_ip = ":".join(ip_parts)
                local_ip_ipip = new_ip
                remote_ip_ipip = counterpart_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[IP6IP6]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_ipip = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mIRAN\033[93m Public IP :\033[0m ")
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mKharej [9]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "5":
            save_stuff_ipip9(
                private_ip_private,
                local_ip_private,
                remote_ip_private,
                is_ipip=False,
            )
            save_stuff_ipip9(
                private_ip_ipip, local_ip_ipip, remote_ip_ipip, is_ipip=True
            )
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Invalid choice. Please select a valid option.")


# 10
def get_current_private_ipsipip10():
    private_ip_private = private_ipip1("/etc/private10.sh")
    private_ip_ipip = private_ipip1("/etc/ipip10.sh")
    return {
        "private": private_ip_private,
        "ipip": private_ip_ipip,
    }


def update_ipfile_ipip10(name, new_ip, update_type):
    try:
        with open(name, "r") as f:
            content = f.read()

        if update_type == "private":
            new_content = re.sub(
                r"ip (-6 )?addr add [^ ]+/64 dev azumi?",
                f"ip -6 addr add {new_ip}/64 dev azumi",
                content,
            )
            ip_parts = new_ip.split(":")
            if new_ip.endswith(":2"):
                ip_parts[-1] = "1"
            else:
                ip_parts[-1] = "2"
            counterpart_ip = ":".join(ip_parts)
            new_content = re.sub(
                r"ip (-6 )?route add [^ ]+/64 dev azumi?",
                f"ip -6 route add {counterpart_ip}/64 dev azumi",
                new_content,
            )
            update_ipfile_ipip10("/etc/ipip10.sh", new_ip, update_type="ipip_local")
            update_ipfile_ipip10(
                "/etc/ipip10.sh", counterpart_ip, update_type="ipip_remote"
            )
        elif update_type == "local":
            new_content = re.sub(r"local \S+", f"local {new_ip}", content)
        elif update_type == "remote":
            new_content = re.sub(r"remote \S+", f"remote {new_ip}", content)
        elif update_type == "ipip_local":
            new_content = re.sub(r"local \S+", f"local {new_ip}", content)
        elif update_type == "ipip_remote":
            new_content = re.sub(r"remote \S+", f"remote {new_ip}", content)
        elif update_type == "ipsec":
            new_content = re.sub(r"leftsubnet=\S+", f"leftsubnet={new_ip}/64", content)
            new_content = re.sub(r"leftid=\S+", f"leftid={new_ip}", new_content)

            ip_parts = new_ip.split(":")
            if new_ip.endswith(":1"):
                ip_parts[-1] = "2"
            else:
                ip_parts[-1] = "1"
            counterpart_ip = ":".join(ip_parts)
            new_content = re.sub(r"right=\S+", f"right={counterpart_ip}", new_content)
            new_content = re.sub(
                r"rightsubnet=\S+",
                f"rightsubnet={counterpart_ip}/64",
                new_content,
            )

        with open(name, "w") as f:
            f.write(new_content)
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def save_stuff_ipip10(private_ip, local_ip, remote_ip, is_ipip):
    current_ips = get_current_private_ipsipip10()
    current_ip = current_ips["ipip"] if is_ipip else current_ips["private"]

    if current_ip:
        delete_ufw_rules(current_ip)

    add_ufw_rules(private_ip)

    counterpart_ip = wtb_opposite_ip(private_ip)
    try:
        if is_ipip:
            update_pingfile_sit("/etc/ping_ip10.sh", counterpart_ip)
            update_ipfile_ipip10("/etc/ipip10.sh", private_ip, update_type="private")
            update_ipfile_ipip10("/etc/ipip10.sh", remote_ip, update_type="remote")
        else:
            update_pingfile_sit("/etc/ping_v610.sh", counterpart_ip)
            update_ipfile_ipip10("/etc/private10.sh", private_ip, update_type="private")
            update_ipfile_ipip10("/etc/private10.sh", local_ip, update_type="local")
            update_ipfile_ipip10("/etc/private10.sh", remote_ip, update_type="remote")

        interface = "azumip10" if is_ipip else "azumi10"
        subprocess.run(["ip", "link", "set", "dev", interface, "down"], check=True)
        subprocess.run(["ip", "link", "delete", interface], check=True)
    except subprocess.CalledProcessError as e:
        print("\033[91merror bringing interface down or deleting it\033[0m")

    try:
        script = "/etc/ipip10.sh" if is_ipip else "/etc/private10.sh"
        result = subprocess.run(["/bin/bash", script], capture_output=True, text=True)
        if "RTNETLINK answers: File exists" in result.stderr:
            print("\033[91madditional ip already exists. Ignoring this error\033[0m")
        else:
            result.check_returncode()
        display_checkmark(
            f"\033[92mChanges saved and {interface} interface updated successfully!\033[0m"
        )
        subprocess.run(["sudo", "systemctl", "daemon-reload"], check=True)
        subprocess.run(["sudo", "systemctl", "restart", "ping_v610"], check=True)
        subprocess.run(["sudo", "systemctl", "restart", "ping_ip10"], check=True)

        # display_checkmark("\033[92mSystem services reloaded and restarted successfully!\033[0m")
    except subprocess.CalledProcessError as e:
        print("\033[91merror applying network changes\033[0m")
    except FileNotFoundError:
        print(f"\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def ipipkharej10_editmulti_local():
    local_ip_private = local_ip("/etc/private10.sh")
    remote_ip_private = remote_ip("/etc/private10.sh")
    private_ip_private = private_ip1("/etc/private10.sh")

    local_ip_ipip = local_ip("/etc/ipip10.sh")
    remote_ip_ipip = remote_ip("/etc/ipip10.sh")
    private_ip_ipip = private_ipip1("/etc/ipip10.sh")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("couldn't retrieve IP addresses from private file")
    if not local_ip_ipip or not remote_ip_ipip or not private_ip_ipip:
        print("couldn't retrieve IP addresses from ipip file")

    if (
        not local_ip_private
        or not remote_ip_private
        or not private_ip_private
        or not local_ip_ipip
        or not remote_ip_ipip
        or not private_ip_ipip
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_privatekharej10(
            local_ip_private, remote_ip_private, private_ip_private
        )
        display_stuff_ip6ip6(local_ip_ipip, remote_ip_ipip, private_ip_ipip)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mIP6IP6\033[93m Kharej [10] Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej [10] \033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mIRAN \033[92m Public IP\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[93mChange \033[97mIP6IP6 \033[93mPrivate IPV6\033[0m")
        print("5. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_private = new_ip
                ip_parts = new_ip.split(":")
                if new_ip.endswith(":2"):
                    ip_parts[-1] = "1"
                else:
                    ip_parts[-1] = "2"
                counterpart_ip = ":".join(ip_parts)
                local_ip_ipip = new_ip
                remote_ip_ipip = counterpart_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[IP6IP6]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_ipip = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mKharej [10]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input("\033[93mEnter \033[92mIRAN\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "5":
            save_stuff_ipip10(
                private_ip_private,
                local_ip_private,
                remote_ip_private,
                is_ipip=False,
            )
            save_stuff_ipip10(
                private_ip_ipip, local_ip_ipip, remote_ip_ipip, is_ipip=True
            )
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Invalid choice. Please select a valid option.")


def ipipir10_editmulti_local():
    local_ip_private = local_ip("/etc/private10.sh")
    remote_ip_private = remote_ip("/etc/private10.sh")
    private_ip_private = private_ip1("/etc/private10.sh")

    local_ip_ipip = local_ip("/etc/ipip10.sh")
    remote_ip_ipip = remote_ip("/etc/ipip10.sh")
    private_ip_ipip = private_ipip1("/etc/ipip10.sh")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("couldn't retrieve IP addresses from private file")
    if not local_ip_ipip or not remote_ip_ipip or not private_ip_ipip:
        print("couldn't retrieve IP addresses from ipip file")

    if (
        not local_ip_private
        or not remote_ip_private
        or not private_ip_private
        or not local_ip_ipip
        or not remote_ip_ipip
        or not private_ip_ipip
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_privateiran10(
            local_ip_private, remote_ip_private, private_ip_private
        )
        display_stuff_ip6ip6(local_ip_ipip, remote_ip_ipip, private_ip_ipip)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mIP6IP6\033[93m IRAN Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN \033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mKharej [10] \033[92m Public IP\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[93mChange \033[97mIP6IP6 \033[93mPrivate IPV6\033[0m")
        print("5. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_private = new_ip
                ip_parts = new_ip.split(":")
                if new_ip.endswith(":2"):
                    ip_parts[-1] = "1"
                else:
                    ip_parts[-1] = "2"
                counterpart_ip = ":".join(ip_parts)
                local_ip_ipip = new_ip
                remote_ip_ipip = counterpart_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[IP6IP6]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_ipip = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mIRAN\033[93m Public IP :\033[0m ")
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mKharej [10]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "5":
            save_stuff_ipip10(
                private_ip_private,
                local_ip_private,
                remote_ip_private,
                is_ipip=False,
            )
            save_stuff_ipip10(
                private_ip_ipip, local_ip_ipip, remote_ip_ipip, is_ipip=True
            )
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Invalid choice. Please select a valid option.")


# 10 iran 1 kharej ipip


def ipipiranfive1_editmulti_local():
    local_ip_private = local_ip("/etc/private1.sh")
    remote_ip_private = remote_ip("/etc/private1.sh")
    private_ip_private = private_ip1("/etc/private1.sh")

    local_ip_ipip = local_ip("/etc/ipip1.sh")
    remote_ip_ipip = remote_ip("/etc/ipip1.sh")
    private_ip_ipip = private_ipip1("/etc/ipip1.sh")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("couldn't retrieve IP addresses from private file")
    if not local_ip_ipip or not remote_ip_ipip or not private_ip_ipip:
        print("couldn't retrieve IP addresses from ipip file")

    if (
        not local_ip_private
        or not remote_ip_private
        or not private_ip_private
        or not local_ip_ipip
        or not remote_ip_ipip
        or not private_ip_ipip
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_privateiranfive1(
            local_ip_private, remote_ip_private, private_ip_private
        )
        display_stuff_ip6ip6(local_ip_ipip, remote_ip_ipip, private_ip_ipip)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mIP6IP6\033[93m IRAN [1] Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN [1] \033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mKharej \033[92m Public IP\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[93mChange \033[97mIP6IP6 \033[93mPrivate IPV6\033[0m")
        print("5. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_private = new_ip
                ip_parts = new_ip.split(":")
                if new_ip.endswith(":2"):
                    ip_parts[-1] = "1"
                else:
                    ip_parts[-1] = "2"
                counterpart_ip = ":".join(ip_parts)
                local_ip_ipip = new_ip
                remote_ip_ipip = counterpart_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[IP6IP6]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_ipip = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mIRAN [1]\033[93m Public IP :\033[0m ")
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input("\033[93mEnter \033[92mKharej\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "5":
            save_stuff_ipip1(
                private_ip_private,
                local_ip_private,
                remote_ip_private,
                is_ipip=False,
            )
            save_stuff_ipip1(
                private_ip_ipip, local_ip_ipip, remote_ip_ipip, is_ipip=True
            )
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Invalid choice. Please select a valid option.")


def ipipkharejone1_editmulti_local():
    local_ip_private = local_ip("/etc/private1.sh")
    remote_ip_private = remote_ip("/etc/private1.sh")
    private_ip_private = private_ip1("/etc/private1.sh")

    local_ip_ipip = local_ip("/etc/ipip1.sh")
    remote_ip_ipip = remote_ip("/etc/ipip1.sh")
    private_ip_ipip = private_ipip1("/etc/ipip1.sh")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("couldn't retrieve IP addresses from private file")
    if not local_ip_ipip or not remote_ip_ipip or not private_ip_ipip:
        print("couldn't retrieve IP addresses from ipip file")

    if (
        not local_ip_private
        or not remote_ip_private
        or not private_ip_private
        or not local_ip_ipip
        or not remote_ip_ipip
        or not private_ip_ipip
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_privatekharejone1(
            local_ip_private, remote_ip_private, private_ip_private
        )
        display_stuff_ip6ip6(local_ip_ipip, remote_ip_ipip, private_ip_ipip)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mIP6IP6\033[93m Kharej Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej \033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mIRAN [1] \033[92m Public IP\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[93mChange \033[97mIP6IP6 \033[93mPrivate IPV6\033[0m")
        print("5. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_private = new_ip
                ip_parts = new_ip.split(":")
                if new_ip.endswith(":2"):
                    ip_parts[-1] = "1"
                else:
                    ip_parts[-1] = "2"
                counterpart_ip = ":".join(ip_parts)
                local_ip_ipip = new_ip
                remote_ip_ipip = counterpart_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[IP6IP6]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_ipip = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mKharej\033[93m Public IP :\033[0m ")
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input("\033[93mEnter \033[92mIRAN [1]\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "5":
            save_stuff_ipip1(
                private_ip_private,
                local_ip_private,
                remote_ip_private,
                is_ipip=False,
            )
            save_stuff_ipip1(
                private_ip_ipip, local_ip_ipip, remote_ip_ipip, is_ipip=True
            )
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Invalid choice. Please select a valid option.")


# 2 ipip 10 iran 1 kharej
def ipipiranfive2_editmulti_local():
    local_ip_private = local_ip("/etc/private2.sh")
    remote_ip_private = remote_ip("/etc/private2.sh")
    private_ip_private = private_ip1("/etc/private2.sh")

    local_ip_ipip = local_ip("/etc/ipip2.sh")
    remote_ip_ipip = remote_ip("/etc/ipip2.sh")
    private_ip_ipip = private_ipip1("/etc/ipip2.sh")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("couldn't retrieve IP addresses from private file")
    if not local_ip_ipip or not remote_ip_ipip or not private_ip_ipip:
        print("couldn't retrieve IP addresses from ipip file")

    if (
        not local_ip_private
        or not remote_ip_private
        or not private_ip_private
        or not local_ip_ipip
        or not remote_ip_ipip
        or not private_ip_ipip
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_privateiranfive2(
            local_ip_private, remote_ip_private, private_ip_private
        )
        display_stuff_ip6ip6(local_ip_ipip, remote_ip_ipip, private_ip_ipip)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mIP6IP6\033[93m IRAN [2] Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN [2] \033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mKharej \033[92m Public IP\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[93mChange \033[97mIP6IP6 \033[93mPrivate IPV6\033[0m")
        print("5. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_private = new_ip
                ip_parts = new_ip.split(":")
                if new_ip.endswith(":2"):
                    ip_parts[-1] = "1"
                else:
                    ip_parts[-1] = "2"
                counterpart_ip = ":".join(ip_parts)
                local_ip_ipip = new_ip
                remote_ip_ipip = counterpart_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[IP6IP6]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_ipip = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mIRAN [2]\033[93m Public IP :\033[0m ")
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input("\033[93mEnter \033[92mKharej\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "5":
            save_stuff_ipip2(
                private_ip_private,
                local_ip_private,
                remote_ip_private,
                is_ipip=False,
            )
            save_stuff_ipip2(
                private_ip_ipip, local_ip_ipip, remote_ip_ipip, is_ipip=True
            )
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Invalid choice. Please select a valid option.")


def ipipkharejone2_editmulti_local():
    local_ip_private = local_ip("/etc/private2.sh")
    remote_ip_private = remote_ip("/etc/private2.sh")
    private_ip_private = private_ip1("/etc/private2.sh")

    local_ip_ipip = local_ip("/etc/ipip2.sh")
    remote_ip_ipip = remote_ip("/etc/ipip2.sh")
    private_ip_ipip = private_ipip1("/etc/ipip2.sh")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("couldn't retrieve IP addresses from private file")
    if not local_ip_ipip or not remote_ip_ipip or not private_ip_ipip:
        print("couldn't retrieve IP addresses from ipip file")

    if (
        not local_ip_private
        or not remote_ip_private
        or not private_ip_private
        or not local_ip_ipip
        or not remote_ip_ipip
        or not private_ip_ipip
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_privatekharejone2(
            local_ip_private, remote_ip_private, private_ip_private
        )
        display_stuff_ip6ip6(local_ip_ipip, remote_ip_ipip, private_ip_ipip)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mIP6IP6\033[93m Kharej Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej \033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mIRAN [2] \033[92m Public IP\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[93mChange \033[97mIP6IP6 \033[93mPrivate IPV6\033[0m")
        print("5. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_private = new_ip
                ip_parts = new_ip.split(":")
                if new_ip.endswith(":2"):
                    ip_parts[-1] = "1"
                else:
                    ip_parts[-1] = "2"
                counterpart_ip = ":".join(ip_parts)
                local_ip_ipip = new_ip
                remote_ip_ipip = counterpart_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[IP6IP6]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_ipip = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mKharej\033[93m Public IP :\033[0m ")
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input("\033[93mEnter \033[92mIRAN [2]\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "5":
            save_stuff_ipip2(
                private_ip_private,
                local_ip_private,
                remote_ip_private,
                is_ipip=False,
            )
            save_stuff_ipip2(
                private_ip_ipip, local_ip_ipip, remote_ip_ipip, is_ipip=True
            )
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Invalid choice. Please select a valid option.")


# 3 ipip 10 iran 1 kharej
def ipipiranfive3_editmulti_local():
    local_ip_private = local_ip("/etc/private3.sh")
    remote_ip_private = remote_ip("/etc/private3.sh")
    private_ip_private = private_ip1("/etc/private3.sh")

    local_ip_ipip = local_ip("/etc/ipip3.sh")
    remote_ip_ipip = remote_ip("/etc/ipip3.sh")
    private_ip_ipip = private_ipip1("/etc/ipip3.sh")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("couldn't retrieve IP addresses from private file")
    if not local_ip_ipip or not remote_ip_ipip or not private_ip_ipip:
        print("couldn't retrieve IP addresses from ipip file")

    if (
        not local_ip_private
        or not remote_ip_private
        or not private_ip_private
        or not local_ip_ipip
        or not remote_ip_ipip
        or not private_ip_ipip
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_privateiranfive3(
            local_ip_private, remote_ip_private, private_ip_private
        )
        display_stuff_ip6ip6(local_ip_ipip, remote_ip_ipip, private_ip_ipip)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mIP6IP6\033[93m IRAN [3] Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN [3] \033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mKharej\033[92m Public IP\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[93mChange \033[97mIP6IP6 \033[93mPrivate IPV6\033[0m")
        print("5. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_private = new_ip
                ip_parts = new_ip.split(":")
                if new_ip.endswith(":2"):
                    ip_parts[-1] = "1"
                else:
                    ip_parts[-1] = "2"
                counterpart_ip = ":".join(ip_parts)
                local_ip_ipip = new_ip
                remote_ip_ipip = counterpart_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[IP6IP6]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_ipip = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mIRAN [3]\033[93m Public IP :\033[0m ")
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input("\033[93mEnter \033[92mKharej\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "5":
            save_stuff_ipip3(
                private_ip_private,
                local_ip_private,
                remote_ip_private,
                is_ipip=False,
            )
            save_stuff_ipip3(
                private_ip_ipip, local_ip_ipip, remote_ip_ipip, is_ipip=True
            )
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Invalid choice. Please select a valid option.")


def ipipkharejone3_editmulti_local():
    local_ip_private = local_ip("/etc/private3.sh")
    remote_ip_private = remote_ip("/etc/private3.sh")
    private_ip_private = private_ip1("/etc/private3.sh")

    local_ip_ipip = local_ip("/etc/ipip3.sh")
    remote_ip_ipip = remote_ip("/etc/ipip3.sh")
    private_ip_ipip = private_ipip1("/etc/ipip3.sh")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("couldn't retrieve IP addresses from private file")
    if not local_ip_ipip or not remote_ip_ipip or not private_ip_ipip:
        print("couldn't retrieve IP addresses from ipip file")

    if (
        not local_ip_private
        or not remote_ip_private
        or not private_ip_private
        or not local_ip_ipip
        or not remote_ip_ipip
        or not private_ip_ipip
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_privatekharejone3(
            local_ip_private, remote_ip_private, private_ip_private
        )
        display_stuff_ip6ip6(local_ip_ipip, remote_ip_ipip, private_ip_ipip)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mIP6IP6\033[93m Kharej Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej \033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mIRAN [3] \033[92m Public IP\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[93mChange \033[97mIP6IP6 \033[93mPrivate IPV6\033[0m")
        print("5. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_private = new_ip
                ip_parts = new_ip.split(":")
                if new_ip.endswith(":2"):
                    ip_parts[-1] = "1"
                else:
                    ip_parts[-1] = "2"
                counterpart_ip = ":".join(ip_parts)
                local_ip_ipip = new_ip
                remote_ip_ipip = counterpart_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[IP6IP6]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_ipip = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mKharej\033[93m Public IP :\033[0m ")
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input("\033[93mEnter \033[92mIRAN [3]\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "5":
            save_stuff_ipip3(
                private_ip_private,
                local_ip_private,
                remote_ip_private,
                is_ipip=False,
            )
            save_stuff_ipip3(
                private_ip_ipip, local_ip_ipip, remote_ip_ipip, is_ipip=True
            )
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Invalid choice. Please select a valid option.")


# 4 ipip 10 iran 1 kharej
def ipipiranfive4_editmulti_local():
    local_ip_private = local_ip("/etc/private4.sh")
    remote_ip_private = remote_ip("/etc/private4.sh")
    private_ip_private = private_ip1("/etc/private4.sh")

    local_ip_ipip = local_ip("/etc/ipip4.sh")
    remote_ip_ipip = remote_ip("/etc/ipip4.sh")
    private_ip_ipip = private_ipip1("/etc/ipip4.sh")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("couldn't retrieve IP addresses from private file")
    if not local_ip_ipip or not remote_ip_ipip or not private_ip_ipip:
        print("couldn't retrieve IP addresses from ipip file")

    if (
        not local_ip_private
        or not remote_ip_private
        or not private_ip_private
        or not local_ip_ipip
        or not remote_ip_ipip
        or not private_ip_ipip
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_privateiranfive4(
            local_ip_private, remote_ip_private, private_ip_private
        )
        display_stuff_ip6ip6(local_ip_ipip, remote_ip_ipip, private_ip_ipip)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mIP6IP6\033[93m IRAN [4] Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN [4] \033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mKharej\033[92m Public IP\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[93mChange \033[97mIP6IP6 \033[93mPrivate IPV6\033[0m")
        print("5. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_private = new_ip
                ip_parts = new_ip.split(":")
                if new_ip.endswith(":2"):
                    ip_parts[-1] = "1"
                else:
                    ip_parts[-1] = "2"
                counterpart_ip = ":".join(ip_parts)
                local_ip_ipip = new_ip
                remote_ip_ipip = counterpart_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[IP6IP6]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_ipip = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mIRAN [4]\033[93m Public IP :\033[0m ")
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input("\033[93mEnter \033[92mKharej\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "5":
            save_stuff_ipip4(
                private_ip_private,
                local_ip_private,
                remote_ip_private,
                is_ipip=False,
            )
            save_stuff_ipip4(
                private_ip_ipip, local_ip_ipip, remote_ip_ipip, is_ipip=True
            )
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Invalid choice. Please select a valid option.")


def ipipkharejone4_editmulti_local():
    local_ip_private = local_ip("/etc/private4.sh")
    remote_ip_private = remote_ip("/etc/private4.sh")
    private_ip_private = private_ip1("/etc/private4.sh")

    local_ip_ipip = local_ip("/etc/ipip4.sh")
    remote_ip_ipip = remote_ip("/etc/ipip4.sh")
    private_ip_ipip = private_ipip1("/etc/ipip4.sh")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("couldn't retrieve IP addresses from private file")
    if not local_ip_ipip or not remote_ip_ipip or not private_ip_ipip:
        print("couldn't retrieve IP addresses from ipip file")

    if (
        not local_ip_private
        or not remote_ip_private
        or not private_ip_private
        or not local_ip_ipip
        or not remote_ip_ipip
        or not private_ip_ipip
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_privatekharejone4(
            local_ip_private, remote_ip_private, private_ip_private
        )
        display_stuff_ip6ip6(local_ip_ipip, remote_ip_ipip, private_ip_ipip)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mIP6IP6\033[93m Kharej Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej \033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mIRAN [4] \033[92m Public IP\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[93mChange \033[97mIP6IP6 \033[93mPrivate IPV6\033[0m")
        print("5. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_private = new_ip
                ip_parts = new_ip.split(":")
                if new_ip.endswith(":2"):
                    ip_parts[-1] = "1"
                else:
                    ip_parts[-1] = "2"
                counterpart_ip = ":".join(ip_parts)
                local_ip_ipip = new_ip
                remote_ip_ipip = counterpart_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[IP6IP6]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_ipip = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mKharej\033[93m Public IP :\033[0m ")
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input("\033[93mEnter \033[92mIRAN [4]\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "5":
            save_stuff_ipip4(
                private_ip_private,
                local_ip_private,
                remote_ip_private,
                is_ipip=False,
            )
            save_stuff_ipip4(
                private_ip_ipip, local_ip_ipip, remote_ip_ipip, is_ipip=True
            )
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Invalid choice. Please select a valid option.")


# 5 ipip 10 iran 1 kharej
def ipipiranfive5_editmulti_local():
    local_ip_private = local_ip("/etc/private5.sh")
    remote_ip_private = remote_ip("/etc/private5.sh")
    private_ip_private = private_ip1("/etc/private5.sh")

    local_ip_ipip = local_ip("/etc/ipip5.sh")
    remote_ip_ipip = remote_ip("/etc/ipip5.sh")
    private_ip_ipip = private_ipip1("/etc/ipip5.sh")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("couldn't retrieve IP addresses from private file")
    if not local_ip_ipip or not remote_ip_ipip or not private_ip_ipip:
        print("couldn't retrieve IP addresses from ipip file")

    if (
        not local_ip_private
        or not remote_ip_private
        or not private_ip_private
        or not local_ip_ipip
        or not remote_ip_ipip
        or not private_ip_ipip
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_privateiranfive5(
            local_ip_private, remote_ip_private, private_ip_private
        )
        display_stuff_ip6ip6(local_ip_ipip, remote_ip_ipip, private_ip_ipip)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mIP6IP6\033[93m IRAN [5] Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN [5] \033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mKharej\033[92m Public IP\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[93mChange \033[97mIP6IP6 \033[93mPrivate IPV6\033[0m")
        print("5. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_private = new_ip
                ip_parts = new_ip.split(":")
                if new_ip.endswith(":2"):
                    ip_parts[-1] = "1"
                else:
                    ip_parts[-1] = "2"
                counterpart_ip = ":".join(ip_parts)
                local_ip_ipip = new_ip
                remote_ip_ipip = counterpart_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[IP6IP6]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_ipip = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mIRAN [5]\033[93m Public IP :\033[0m ")
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input("\033[93mEnter \033[92mKharej\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "5":
            save_stuff_ipip5(
                private_ip_private,
                local_ip_private,
                remote_ip_private,
                is_ipip=False,
            )
            save_stuff_ipip5(
                private_ip_ipip, local_ip_ipip, remote_ip_ipip, is_ipip=True
            )
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Invalid choice. Please select a valid option.")


def ipipkharejone5_editmulti_local():
    local_ip_private = local_ip("/etc/private5.sh")
    remote_ip_private = remote_ip("/etc/private5.sh")
    private_ip_private = private_ip1("/etc/private5.sh")

    local_ip_ipip = local_ip("/etc/ipip5.sh")
    remote_ip_ipip = remote_ip("/etc/ipip5.sh")
    private_ip_ipip = private_ipip1("/etc/ipip5.sh")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("couldn't retrieve IP addresses from private file")
    if not local_ip_ipip or not remote_ip_ipip or not private_ip_ipip:
        print("couldn't retrieve IP addresses from ipip file")

    if (
        not local_ip_private
        or not remote_ip_private
        or not private_ip_private
        or not local_ip_ipip
        or not remote_ip_ipip
        or not private_ip_ipip
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_privatekharejone5(
            local_ip_private, remote_ip_private, private_ip_private
        )
        display_stuff_ip6ip6(local_ip_ipip, remote_ip_ipip, private_ip_ipip)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mIP6IP6\033[93m Kharej Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej \033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mIRAN [5] \033[92m Public IP\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[93mChange \033[97mIP6IP6 \033[93mPrivate IPV6\033[0m")
        print("5. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_private = new_ip
                ip_parts = new_ip.split(":")
                if new_ip.endswith(":2"):
                    ip_parts[-1] = "1"
                else:
                    ip_parts[-1] = "2"
                counterpart_ip = ":".join(ip_parts)
                local_ip_ipip = new_ip
                remote_ip_ipip = counterpart_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[IP6IP6]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_ipip = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mKharej\033[93m Public IP :\033[0m ")
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input("\033[93mEnter \033[92mIRAN [5]\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "5":
            save_stuff_ipip5(
                private_ip_private,
                local_ip_private,
                remote_ip_private,
                is_ipip=False,
            )
            save_stuff_ipip5(
                private_ip_ipip, local_ip_ipip, remote_ip_ipip, is_ipip=True
            )
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Invalid choice. Please select a valid option.")


# 6 ipip 10 iran 1 kharej


def display_stuff_privateiranfive6(local_ip, remote_ip, private_ip):
    lines = [
        f"\033[93mTitle:         SIT Configuration\033[0m",
        f"\033[97m──────────────────────────────────────\033[0m",
        f"\033[93mIRAN \033[96m[6]\033[93m Public IP:     \033[97m{local_ip}\033[0m",
        f"\033[92mKharej Public IP:       \033[97m{remote_ip}\033[0m",
        f"\033[93mSIT Private IP:         \033[97m{private_ip}\033[0m",
    ]
    box_width = 50

    print("\033[93m╭" + "─" * (box_width - 2) + "╮\033[0m")

    for line in lines:
        print(f"\033[93m {line:<{box_width - 4}} \033[0m")

    print("\033[93m╰" + "─" * (box_width - 2) + "╯\033[0m")


def display_stuff_privatekharejone6(local_ip, remote_ip, private_ip):
    lines = [
        f"\033[93mTitle:         SIT Configuration\033[0m",
        f"\033[97m──────────────────────────────────────\033[0m",
        f"\033[92mKharej Public IP:        \033[97m{local_ip}\033[0m",
        f"\033[93mIRAN \033[96m[6]\033[93m Public IP:      \033[97m{remote_ip}\033[0m",
        f"\033[93mSIT Private IP:          \033[97m{private_ip}\033[0m",
    ]
    box_width = 50

    print("\033[93m╭" + "─" * (box_width - 2) + "╮\033[0m")

    for line in lines:
        print(f"\033[93m {line:<{box_width - 4}} \033[0m")

    print("\033[93m╰" + "─" * (box_width - 2) + "╯\033[0m")


def ipipiranfive6_editmulti_local():
    local_ip_private = local_ip("/etc/private6.sh")
    remote_ip_private = remote_ip("/etc/private6.sh")
    private_ip_private = private_ip1("/etc/private6.sh")

    local_ip_ipip = local_ip("/etc/ipip6.sh")
    remote_ip_ipip = remote_ip("/etc/ipip6.sh")
    private_ip_ipip = private_ipip1("/etc/ipip6.sh")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("couldn't retrieve IP addresses from private file")
    if not local_ip_ipip or not remote_ip_ipip or not private_ip_ipip:
        print("couldn't retrieve IP addresses from ipip file")

    if (
        not local_ip_private
        or not remote_ip_private
        or not private_ip_private
        or not local_ip_ipip
        or not remote_ip_ipip
        or not private_ip_ipip
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_privateiranfive6(
            local_ip_private, remote_ip_private, private_ip_private
        )
        display_stuff_ip6ip6(local_ip_ipip, remote_ip_ipip, private_ip_ipip)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mIP6IP6\033[93m IRAN [6] Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN [6] \033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mKharej\033[92m Public IP\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[93mChange \033[97mIP6IP6 \033[93mPrivate IPV6\033[0m")
        print("5. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_private = new_ip
                ip_parts = new_ip.split(":")
                if new_ip.endswith(":2"):
                    ip_parts[-1] = "1"
                else:
                    ip_parts[-1] = "2"
                counterpart_ip = ":".join(ip_parts)
                local_ip_ipip = new_ip
                remote_ip_ipip = counterpart_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[IP6IP6]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_ipip = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mIRAN [6]\033[93m Public IP :\033[0m ")
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input("\033[93mEnter \033[92mKharej\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "5":
            save_stuff_ipip6(
                private_ip_private,
                local_ip_private,
                remote_ip_private,
                is_ipip=False,
            )
            save_stuff_ipip6(
                private_ip_ipip, local_ip_ipip, remote_ip_ipip, is_ipip=True
            )
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Invalid choice. Please select a valid option.")


def ipipkharejone6_editmulti_local():
    local_ip_private = local_ip("/etc/private6.sh")
    remote_ip_private = remote_ip("/etc/private6.sh")
    private_ip_private = private_ip1("/etc/private6.sh")

    local_ip_ipip = local_ip("/etc/ipip6.sh")
    remote_ip_ipip = remote_ip("/etc/ipip6.sh")
    private_ip_ipip = private_ipip1("/etc/ipip6.sh")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("couldn't retrieve IP addresses from private file")
    if not local_ip_ipip or not remote_ip_ipip or not private_ip_ipip:
        print("couldn't retrieve IP addresses from ipip file")

    if (
        not local_ip_private
        or not remote_ip_private
        or not private_ip_private
        or not local_ip_ipip
        or not remote_ip_ipip
        or not private_ip_ipip
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_privatekharejone6(
            local_ip_private, remote_ip_private, private_ip_private
        )
        display_stuff_ip6ip6(local_ip_ipip, remote_ip_ipip, private_ip_ipip)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mIP6IP6\033[93m Kharej Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej \033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mIRAN [6] \033[92m Public IP\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[93mChange \033[97mIP6IP6 \033[93mPrivate IPV6\033[0m")
        print("5. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_private = new_ip
                ip_parts = new_ip.split(":")
                if new_ip.endswith(":2"):
                    ip_parts[-1] = "1"
                else:
                    ip_parts[-1] = "2"
                counterpart_ip = ":".join(ip_parts)
                local_ip_ipip = new_ip
                remote_ip_ipip = counterpart_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[IP6IP6]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_ipip = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mKharej\033[93m Public IP :\033[0m ")
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input("\033[93mEnter \033[92mIRAN [6]\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "5":
            save_stuff_ipip6(
                private_ip_private,
                local_ip_private,
                remote_ip_private,
                is_ipip=False,
            )
            save_stuff_ipip6(
                private_ip_ipip, local_ip_ipip, remote_ip_ipip, is_ipip=True
            )
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Invalid choice. Please select a valid option.")


# 7 ipip 10 iran 1 kharej


def display_stuff_privateiranfive7(local_ip, remote_ip, private_ip):
    lines = [
        f"\033[93mTitle:         SIT Configuration\033[0m",
        f"\033[97m──────────────────────────────────────\033[0m",
        f"\033[93mIRAN \033[96m[7]\033[93m Public IP:     \033[97m{local_ip}\033[0m",
        f"\033[92mKharej Public IP:       \033[97m{remote_ip}\033[0m",
        f"\033[93mSIT Private IP:         \033[97m{private_ip}\033[0m",
    ]
    box_width = 50

    print("\033[93m╭" + "─" * (box_width - 2) + "╮\033[0m")

    for line in lines:
        print(f"\033[93m {line:<{box_width - 4}} \033[0m")

    print("\033[93m╰" + "─" * (box_width - 2) + "╯\033[0m")


def display_stuff_privatekharejone7(local_ip, remote_ip, private_ip):
    lines = [
        f"\033[93mTitle:         SIT Configuration\033[0m",
        f"\033[97m──────────────────────────────────────\033[0m",
        f"\033[92mKharej Public IP:        \033[97m{local_ip}\033[0m",
        f"\033[93mIRAN \033[96m[7]\033[93m Public IP:      \033[97m{remote_ip}\033[0m",
        f"\033[93mSIT Private IP:          \033[97m{private_ip}\033[0m",
    ]
    box_width = 50

    print("\033[93m╭" + "─" * (box_width - 2) + "╮\033[0m")

    for line in lines:
        print(f"\033[93m {line:<{box_width - 4}} \033[0m")

    print("\033[93m╰" + "─" * (box_width - 2) + "╯\033[0m")


def ipipiranfive7_editmulti_local():
    local_ip_private = local_ip("/etc/private7.sh")
    remote_ip_private = remote_ip("/etc/private7.sh")
    private_ip_private = private_ip1("/etc/private7.sh")

    local_ip_ipip = local_ip("/etc/ipip7.sh")
    remote_ip_ipip = remote_ip("/etc/ipip7.sh")
    private_ip_ipip = private_ipip1("/etc/ipip7.sh")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("couldn't retrieve IP addresses from private file")
    if not local_ip_ipip or not remote_ip_ipip or not private_ip_ipip:
        print("couldn't retrieve IP addresses from ipip file")

    if (
        not local_ip_private
        or not remote_ip_private
        or not private_ip_private
        or not local_ip_ipip
        or not remote_ip_ipip
        or not private_ip_ipip
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_privateiranfive7(
            local_ip_private, remote_ip_private, private_ip_private
        )
        display_stuff_ip6ip6(local_ip_ipip, remote_ip_ipip, private_ip_ipip)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mIP6IP6\033[93m IRAN [7] Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN [7] \033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mKharej\033[92m Public IP\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[93mChange \033[97mIP6IP6 \033[93mPrivate IPV6\033[0m")
        print("5. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_private = new_ip
                ip_parts = new_ip.split(":")
                if new_ip.endswith(":2"):
                    ip_parts[-1] = "1"
                else:
                    ip_parts[-1] = "2"
                counterpart_ip = ":".join(ip_parts)
                local_ip_ipip = new_ip
                remote_ip_ipip = counterpart_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[IP6IP6]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_ipip = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mIRAN [7]\033[93m Public IP :\033[0m ")
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input("\033[93mEnter \033[92mKharej\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "5":
            save_stuff_ipip7(
                private_ip_private,
                local_ip_private,
                remote_ip_private,
                is_ipip=False,
            )
            save_stuff_ipip7(
                private_ip_ipip, local_ip_ipip, remote_ip_ipip, is_ipip=True
            )
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Invalid choice. Please select a valid option.")


def ipipkharejone7_editmulti_local():
    local_ip_private = local_ip("/etc/private7.sh")
    remote_ip_private = remote_ip("/etc/private7.sh")
    private_ip_private = private_ip1("/etc/private7.sh")

    local_ip_ipip = local_ip("/etc/ipip7.sh")
    remote_ip_ipip = remote_ip("/etc/ipip7.sh")
    private_ip_ipip = private_ipip1("/etc/ipip7.sh")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("couldn't retrieve IP addresses from private file")
    if not local_ip_ipip or not remote_ip_ipip or not private_ip_ipip:
        print("couldn't retrieve IP addresses from ipip file")

    if (
        not local_ip_private
        or not remote_ip_private
        or not private_ip_private
        or not local_ip_ipip
        or not remote_ip_ipip
        or not private_ip_ipip
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_privatekharejone7(
            local_ip_private, remote_ip_private, private_ip_private
        )
        display_stuff_ip6ip6(local_ip_ipip, remote_ip_ipip, private_ip_ipip)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mIP6IP6\033[93m Kharej Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej \033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mIRAN [7] \033[92m Public IP\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[93mChange \033[97mIP6IP6 \033[93mPrivate IPV6\033[0m")
        print("5. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_private = new_ip
                ip_parts = new_ip.split(":")
                if new_ip.endswith(":2"):
                    ip_parts[-1] = "1"
                else:
                    ip_parts[-1] = "2"
                counterpart_ip = ":".join(ip_parts)
                local_ip_ipip = new_ip
                remote_ip_ipip = counterpart_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[IP6IP6]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_ipip = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mKharej\033[93m Public IP :\033[0m ")
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input("\033[93mEnter \033[92mIRAN [7]\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "5":
            save_stuff_ipip7(
                private_ip_private,
                local_ip_private,
                remote_ip_private,
                is_ipip=False,
            )
            save_stuff_ipip7(
                private_ip_ipip, local_ip_ipip, remote_ip_ipip, is_ipip=True
            )
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Invalid choice. Please select a valid option.")


# 8 ipip 10 iran 1 kharej


def display_stuff_privateiranfive8(local_ip, remote_ip, private_ip):
    lines = [
        f"\033[93mTitle:         SIT Configuration\033[0m",
        f"\033[97m──────────────────────────────────────\033[0m",
        f"\033[93mIRAN \033[96m[8]\033[93m Public IP:     \033[97m{local_ip}\033[0m",
        f"\033[92mKharej Public IP:       \033[97m{remote_ip}\033[0m",
        f"\033[93mSIT Private IP:         \033[97m{private_ip}\033[0m",
    ]
    box_width = 50

    print("\033[93m╭" + "─" * (box_width - 2) + "╮\033[0m")

    for line in lines:
        print(f"\033[93m {line:<{box_width - 4}} \033[0m")

    print("\033[93m╰" + "─" * (box_width - 2) + "╯\033[0m")


def display_stuff_privatekharejone8(local_ip, remote_ip, private_ip):
    lines = [
        f"\033[93mTitle:         SIT Configuration\033[0m",
        f"\033[97m──────────────────────────────────────\033[0m",
        f"\033[92mKharej Public IP:        \033[97m{local_ip}\033[0m",
        f"\033[93mIRAN \033[96m[8]\033[93m Public IP:      \033[97m{remote_ip}\033[0m",
        f"\033[93mSIT Private IP:          \033[97m{private_ip}\033[0m",
    ]
    box_width = 50

    print("\033[93m╭" + "─" * (box_width - 2) + "╮\033[0m")

    for line in lines:
        print(f"\033[93m {line:<{box_width - 4}} \033[0m")

    print("\033[93m╰" + "─" * (box_width - 2) + "╯\033[0m")


def ipipiranfive8_editmulti_local():
    local_ip_private = local_ip("/etc/private8.sh")
    remote_ip_private = remote_ip("/etc/private8.sh")
    private_ip_private = private_ip1("/etc/private8.sh")

    local_ip_ipip = local_ip("/etc/ipip8.sh")
    remote_ip_ipip = remote_ip("/etc/ipip8.sh")
    private_ip_ipip = private_ipip1("/etc/ipip8.sh")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("couldn't retrieve IP addresses from private file")
    if not local_ip_ipip or not remote_ip_ipip or not private_ip_ipip:
        print("couldn't retrieve IP addresses from ipip file")

    if (
        not local_ip_private
        or not remote_ip_private
        or not private_ip_private
        or not local_ip_ipip
        or not remote_ip_ipip
        or not private_ip_ipip
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_privateiranfive8(
            local_ip_private, remote_ip_private, private_ip_private
        )
        display_stuff_ip6ip6(local_ip_ipip, remote_ip_ipip, private_ip_ipip)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mIP6IP6\033[93m IRAN [8] Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN [8] \033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mKharej\033[92m Public IP\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[93mChange \033[97mIP6IP6 \033[93mPrivate IPV6\033[0m")
        print("5. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_private = new_ip
                ip_parts = new_ip.split(":")
                if new_ip.endswith(":2"):
                    ip_parts[-1] = "1"
                else:
                    ip_parts[-1] = "2"
                counterpart_ip = ":".join(ip_parts)
                local_ip_ipip = new_ip
                remote_ip_ipip = counterpart_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[IP6IP6]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_ipip = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mIRAN [8]\033[93m Public IP :\033[0m ")
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input("\033[93mEnter \033[92mKharej\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "5":
            save_stuff_ipip8(
                private_ip_private,
                local_ip_private,
                remote_ip_private,
                is_ipip=False,
            )
            save_stuff_ipip8(
                private_ip_ipip, local_ip_ipip, remote_ip_ipip, is_ipip=True
            )
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Invalid choice. Please select a valid option.")


def ipipkharejone8_editmulti_local():
    local_ip_private = local_ip("/etc/private8.sh")
    remote_ip_private = remote_ip("/etc/private8.sh")
    private_ip_private = private_ip1("/etc/private8.sh")

    local_ip_ipip = local_ip("/etc/ipip8.sh")
    remote_ip_ipip = remote_ip("/etc/ipip8.sh")
    private_ip_ipip = private_ipip1("/etc/ipip8.sh")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("couldn't retrieve IP addresses from private file")
    if not local_ip_ipip or not remote_ip_ipip or not private_ip_ipip:
        print("couldn't retrieve IP addresses from ipip file")

    if (
        not local_ip_private
        or not remote_ip_private
        or not private_ip_private
        or not local_ip_ipip
        or not remote_ip_ipip
        or not private_ip_ipip
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_privatekharejone8(
            local_ip_private, remote_ip_private, private_ip_private
        )
        display_stuff_ip6ip6(local_ip_ipip, remote_ip_ipip, private_ip_ipip)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mIP6IP6\033[93m Kharej Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej \033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mIRAN [8] \033[92m Public IP\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[93mChange \033[97mIP6IP6 \033[93mPrivate IPV6\033[0m")
        print("5. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_private = new_ip
                ip_parts = new_ip.split(":")
                if new_ip.endswith(":2"):
                    ip_parts[-1] = "1"
                else:
                    ip_parts[-1] = "2"
                counterpart_ip = ":".join(ip_parts)
                local_ip_ipip = new_ip
                remote_ip_ipip = counterpart_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[IP6IP6]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_ipip = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mKharej\033[93m Public IP :\033[0m ")
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input("\033[93mEnter \033[92mIRAN [8]\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "5":
            save_stuff_ipip8(
                private_ip_private,
                local_ip_private,
                remote_ip_private,
                is_ipip=False,
            )
            save_stuff_ipip8(
                private_ip_ipip, local_ip_ipip, remote_ip_ipip, is_ipip=True
            )
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Invalid choice. Please select a valid option.")


# 9 ipip 10 iran 1 kharej


def display_stuff_privateiranfive9(local_ip, remote_ip, private_ip):
    lines = [
        f"\033[93mTitle:         SIT Configuration\033[0m",
        f"\033[97m──────────────────────────────────────\033[0m",
        f"\033[93mIRAN \033[96m[9]\033[93m Public IP:     \033[97m{local_ip}\033[0m",
        f"\033[92mKharej Public IP:       \033[97m{remote_ip}\033[0m",
        f"\033[93mSIT Private IP:         \033[97m{private_ip}\033[0m",
    ]
    box_width = 50

    print("\033[93m╭" + "─" * (box_width - 2) + "╮\033[0m")

    for line in lines:
        print(f"\033[93m {line:<{box_width - 4}} \033[0m")

    print("\033[93m╰" + "─" * (box_width - 2) + "╯\033[0m")


def display_stuff_privatekharejone9(local_ip, remote_ip, private_ip):
    lines = [
        f"\033[93mTitle:         SIT Configuration\033[0m",
        f"\033[97m──────────────────────────────────────\033[0m",
        f"\033[92mKharej Public IP:        \033[97m{local_ip}\033[0m",
        f"\033[93mIRAN \033[96m[9]\033[93m Public IP:      \033[97m{remote_ip}\033[0m",
        f"\033[93mSIT Private IP:          \033[97m{private_ip}\033[0m",
    ]
    box_width = 50

    print("\033[93m╭" + "─" * (box_width - 2) + "╮\033[0m")

    for line in lines:
        print(f"\033[93m {line:<{box_width - 4}} \033[0m")

    print("\033[93m╰" + "─" * (box_width - 2) + "╯\033[0m")


def ipipiranfive9_editmulti_local():
    local_ip_private = local_ip("/etc/private9.sh")
    remote_ip_private = remote_ip("/etc/private9.sh")
    private_ip_private = private_ip1("/etc/private9.sh")

    local_ip_ipip = local_ip("/etc/ipip9.sh")
    remote_ip_ipip = remote_ip("/etc/ipip9.sh")
    private_ip_ipip = private_ipip1("/etc/ipip9.sh")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("couldn't retrieve IP addresses from private file")
    if not local_ip_ipip or not remote_ip_ipip or not private_ip_ipip:
        print("couldn't retrieve IP addresses from ipip file")

    if (
        not local_ip_private
        or not remote_ip_private
        or not private_ip_private
        or not local_ip_ipip
        or not remote_ip_ipip
        or not private_ip_ipip
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_privateiranfive9(
            local_ip_private, remote_ip_private, private_ip_private
        )
        display_stuff_ip6ip6(local_ip_ipip, remote_ip_ipip, private_ip_ipip)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mIP6IP6\033[93m IRAN [9] Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN [9] \033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mKharej\033[92m Public IP\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[93mChange \033[97mIP6IP6 \033[93mPrivate IPV6\033[0m")
        print("5. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_private = new_ip
                ip_parts = new_ip.split(":")
                if new_ip.endswith(":2"):
                    ip_parts[-1] = "1"
                else:
                    ip_parts[-1] = "2"
                counterpart_ip = ":".join(ip_parts)
                local_ip_ipip = new_ip
                remote_ip_ipip = counterpart_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[IP6IP6]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_ipip = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mIRAN [9]\033[93m Public IP :\033[0m ")
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input("\033[93mEnter \033[92mKharej\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "5":
            save_stuff_ipip9(
                private_ip_private,
                local_ip_private,
                remote_ip_private,
                is_ipip=False,
            )
            save_stuff_ipip9(
                private_ip_ipip, local_ip_ipip, remote_ip_ipip, is_ipip=True
            )
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Invalid choice. Please select a valid option.")


def ipipkharejone9_editmulti_local():
    local_ip_private = local_ip("/etc/private9.sh")
    remote_ip_private = remote_ip("/etc/private9.sh")
    private_ip_private = private_ip1("/etc/private9.sh")

    local_ip_ipip = local_ip("/etc/ipip9.sh")
    remote_ip_ipip = remote_ip("/etc/ipip9.sh")
    private_ip_ipip = private_ipip1("/etc/ipip9.sh")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("couldn't retrieve IP addresses from private file")
    if not local_ip_ipip or not remote_ip_ipip or not private_ip_ipip:
        print("couldn't retrieve IP addresses from ipip file")

    if (
        not local_ip_private
        or not remote_ip_private
        or not private_ip_private
        or not local_ip_ipip
        or not remote_ip_ipip
        or not private_ip_ipip
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_privatekharejone9(
            local_ip_private, remote_ip_private, private_ip_private
        )
        display_stuff_ip6ip6(local_ip_ipip, remote_ip_ipip, private_ip_ipip)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mIP6IP6\033[93m Kharej Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej \033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mIRAN [9] \033[92m Public IP\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[93mChange \033[97mIP6IP6 \033[93mPrivate IPV6\033[0m")
        print("5. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_private = new_ip
                ip_parts = new_ip.split(":")
                if new_ip.endswith(":2"):
                    ip_parts[-1] = "1"
                else:
                    ip_parts[-1] = "2"
                counterpart_ip = ":".join(ip_parts)
                local_ip_ipip = new_ip
                remote_ip_ipip = counterpart_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[IP6IP6]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_ipip = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mKharej\033[93m Public IP :\033[0m ")
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input("\033[93mEnter \033[92mIRAN [9]\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "5":
            save_stuff_ipip9(
                private_ip_private,
                local_ip_private,
                remote_ip_private,
                is_ipip=False,
            )
            save_stuff_ipip9(
                private_ip_ipip, local_ip_ipip, remote_ip_ipip, is_ipip=True
            )
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Invalid choice. Please select a valid option.")


# 10 ipip 10 iran 1 kharej


def display_stuff_privateiranfive10(local_ip, remote_ip, private_ip):
    lines = [
        f"\033[93mTitle:         SIT Configuration\033[0m",
        f"\033[97m──────────────────────────────────────\033[0m",
        f"\033[93mIRAN \033[96m[10]\033[93m Public IP:     \033[97m{local_ip}\033[0m",
        f"\033[92mKharej Public IP:       \033[97m{remote_ip}\033[0m",
        f"\033[93mSIT Private IP:         \033[97m{private_ip}\033[0m",
    ]
    box_width = 50

    print("\033[93m╭" + "─" * (box_width - 2) + "╮\033[0m")

    for line in lines:
        print(f"\033[93m {line:<{box_width - 4}} \033[0m")

    print("\033[93m╰" + "─" * (box_width - 2) + "╯\033[0m")


def display_stuff_privatekharejone10(local_ip, remote_ip, private_ip):
    lines = [
        f"\033[93mTitle:         SIT Configuration\033[0m",
        f"\033[97m──────────────────────────────────────\033[0m",
        f"\033[92mKharej Public IP:        \033[97m{local_ip}\033[0m",
        f"\033[93mIRAN \033[96m[10]\033[93m Public IP:    \033[97m{remote_ip}\033[0m",
        f"\033[93mSIT Private IP:          \033[97m{private_ip}\033[0m",
    ]
    box_width = 50

    print("\033[93m╭" + "─" * (box_width - 2) + "╮\033[0m")

    for line in lines:
        print(f"\033[93m {line:<{box_width - 4}} \033[0m")

    print("\033[93m╰" + "─" * (box_width - 2) + "╯\033[0m")


def ipipiranfive10_editmulti_local():
    local_ip_private = local_ip("/etc/private10.sh")
    remote_ip_private = remote_ip("/etc/private10.sh")
    private_ip_private = private_ip1("/etc/private10.sh")

    local_ip_ipip = local_ip("/etc/ipip10.sh")
    remote_ip_ipip = remote_ip("/etc/ipip10.sh")
    private_ip_ipip = private_ipip1("/etc/ipip10.sh")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("couldn't retrieve IP addresses from private file")
    if not local_ip_ipip or not remote_ip_ipip or not private_ip_ipip:
        print("couldn't retrieve IP addresses from ipip file")

    if (
        not local_ip_private
        or not remote_ip_private
        or not private_ip_private
        or not local_ip_ipip
        or not remote_ip_ipip
        or not private_ip_ipip
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_privateiranfive10(
            local_ip_private, remote_ip_private, private_ip_private
        )
        display_stuff_ip6ip6(local_ip_ipip, remote_ip_ipip, private_ip_ipip)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mIP6IP6\033[93m IRAN [10] Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN [10] \033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mKharej\033[92m Public IP\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[93mChange \033[97mIP6IP6 \033[93mPrivate IPV6\033[0m")
        print("5. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_private = new_ip
                ip_parts = new_ip.split(":")
                if new_ip.endswith(":2"):
                    ip_parts[-1] = "1"
                else:
                    ip_parts[-1] = "2"
                counterpart_ip = ":".join(ip_parts)
                local_ip_ipip = new_ip
                remote_ip_ipip = counterpart_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[IP6IP6]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_ipip = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN [10]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input("\033[93mEnter \033[92mKharej\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "5":
            save_stuff_ipip10(
                private_ip_private,
                local_ip_private,
                remote_ip_private,
                is_ipip=False,
            )
            save_stuff_ipip10(
                private_ip_ipip, local_ip_ipip, remote_ip_ipip, is_ipip=True
            )
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Invalid choice. Please select a valid option.")


def ipipkharejone10_editmulti_local():
    local_ip_private = local_ip("/etc/private10.sh")
    remote_ip_private = remote_ip("/etc/private10.sh")
    private_ip_private = private_ip1("/etc/private10.sh")

    local_ip_ipip = local_ip("/etc/ipip10.sh")
    remote_ip_ipip = remote_ip("/etc/ipip10.sh")
    private_ip_ipip = private_ipip1("/etc/ipip10.sh")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("couldn't retrieve IP addresses from private file")
    if not local_ip_ipip or not remote_ip_ipip or not private_ip_ipip:
        print("couldn't retrieve IP addresses from ipip file")

    if (
        not local_ip_private
        or not remote_ip_private
        or not private_ip_private
        or not local_ip_ipip
        or not remote_ip_ipip
        or not private_ip_ipip
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_privatekharejone10(
            local_ip_private, remote_ip_private, private_ip_private
        )
        display_stuff_ip6ip6(local_ip_ipip, remote_ip_ipip, private_ip_ipip)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mIP6IP6\033[93m Kharej Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej \033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mIRAN [10] \033[92m Public IP\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[93mChange \033[97mIP6IP6 \033[93mPrivate IPV6\033[0m")
        print("5. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_private = new_ip
                ip_parts = new_ip.split(":")
                if new_ip.endswith(":2"):
                    ip_parts[-1] = "1"
                else:
                    ip_parts[-1] = "2"
                counterpart_ip = ":".join(ip_parts)
                local_ip_ipip = new_ip
                remote_ip_ipip = counterpart_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[IP6IP6]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_ipip = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mKharej\033[93m Public IP :\033[0m ")
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN [10]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "5":
            save_stuff_ipip10(
                private_ip_private,
                local_ip_private,
                remote_ip_private,
                is_ipip=False,
            )
            save_stuff_ipip10(
                private_ip_ipip, local_ip_ipip, remote_ip_ipip, is_ipip=True
            )
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Invalid choice. Please select a valid option.")


def gre6_multiedit_local():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print("\033[92m(   ) \033[92mEdit local\033[93m GRE6 Menu\033[0m")
    print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[92mNo IPSEC\033[0m")
    print("2. \033[93mWith IPSEC\033[0m")
    print("3. \033[94mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        choice = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if choice == "1":
            gre6nosec_multiedit_local()
            break
        elif choice == "2":
            gre6sec_multiedit_local()
            break
        elif choice == "3":
            clear()
            multi_edit_local()
            break
        else:
            print("Invalid choice.")


# ipsec menu
def gre6sec_multiedit_local():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print("\033[92m(   ) \033[92mEdit local\033[93m GRE6 + IPSEC Menu\033[0m")
    print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[96mKharej\033[92m[5] \033[93mIRAN\033[92m[1]\033[0m")
    print("2. \033[96mKharej\033[92m[1] \033[93mIRAN\033[92m[5]  \033[0m")
    print("3. \033[94mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        choice = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if choice == "1":
            gre6sec_edit_localkharej_multi()
            break
        elif choice == "2":
            gre6sec_edit_localiran_multi()
            break
        elif choice == "3":
            clear()
            gre6_multiedit_local()
            break
        else:
            print("Invalid choice.")


def gre6sec_edit_localiran_multi():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print(
        "\033[92m(   ) \033[93mGRE6 + IPSEC \033[92m[5]IRAN\033[96m [1]Kharej\033[93m Menu\033[0m"
    )
    print(
        '\033[92m "-"\033[93m══════════════════════════════════════════════════════════\033[0m'
    )
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[92mIRAN[1]\033[0m")
    print("2. \033[92mIRAN[2]\033[0m")
    print("3. \033[93mIRAN[3]\033[0m")
    print("4. \033[92mIRAN[4]\033[0m")
    print("5. \033[92mIRAN[5]\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    print("6. \033[93mKharej Menu\033[0m")
    print("0. \033[94mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if server_type == "1":
            gre6iranfive1sec_editmulti_local()
            break
        elif server_type == "2":
            gre6iranfive2sec_editmulti_local()
            break
        elif server_type == "3":
            gre6iranfive3sec_editmulti_local()
            break
        elif server_type == "4":
            gre6iranfive4sec_editmulti_local()
            break
        elif server_type == "5":
            gre6iranfive5sec_editmulti_local()
            break
        elif server_type == "6":
            gre6kharejonesec_editmulti_localmenu()
            break
        elif server_type == "0":
            os.system("clear")
            gre6sec_multiedit_local()
            break
        else:
            print("Invalid choice.")


def gre6kharejonesec_editmulti_localmenu():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print(
        "\033[92m(   ) \033[93mGRE6 + IPSEC \033[92m[5]IRAN\033[96m [1]Kharej\033[93m Menu\033[0m"
    )
    print(
        '\033[92m "-"\033[93m══════════════════════════════════════════════════════════\033[0m'
    )
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mThis is Kharej menu:\033[0m")
    print("1. \033[92mServer[1]\033[0m")
    print("2. \033[92mServer[2]\033[0m")
    print("3. \033[93mServer[3]\033[0m")
    print("4. \033[92mServer[4]\033[0m")
    print("5. \033[92mServer[5]\033[0m")
    print("0. \033[94mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if server_type == "1":
            gre6kharejone1sec_editmulti_local()
            break
        elif server_type == "2":
            gre6kharejone2sec_editmulti_local()
            break
        elif server_type == "3":
            gre6kharejone3sec_editmulti_local()
            break
        elif server_type == "4":
            gre6kharejone4sec_editmulti_local()
            break
        elif server_type == "5":
            gre6kharejone5sec_editmulti_local()
            break
        elif server_type == "0":
            os.system("clear")
            gre6sec_multiedit_local()
            break
        else:
            print("Invalid choice.")


def gre6sec_edit_localkharej_multi():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print(
        "\033[92m(   ) \033[93mGRE6 + IPSEC \033[92m[5]Kharej\033[96m [1]IRAN\033[93m Menu\033[0m"
    )
    print(
        '\033[92m "-"\033[93m══════════════════════════════════════════════════════════\033[0m'
    )
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[92mKharej[1]\033[0m")
    print("2. \033[92mKharej[2]\033[0m")
    print("3. \033[93mKharej[3]\033[0m")
    print("4. \033[92mKharej[4]\033[0m")
    print("5. \033[92mKharej[5]\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    print("6. \033[93mIRAN Menu\033[0m")
    print("0. \033[94mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if server_type == "1":
            gre6kharej1sec_editmulti_local()
            break
        elif server_type == "2":
            gre6kharej2sec_editmulti_local()
            break
        elif server_type == "3":
            gre6kharej3sec_editmulti_local()
            break
        elif server_type == "4":
            gre6kharej4sec_editmulti_local()
            break
        elif server_type == "5":
            gre6kharej5sec_editmulti_local()
            break
        elif server_type == "6":
            gre6iransec_editmulti_local()
            break
        elif server_type == "0":
            os.system("clear")
            gre6sec_multiedit_local()
            break
        else:
            print("Invalid choice.")


def gre6iransec_editmulti_local():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print(
        "\033[92m(   ) \033[93mGRE6 + IPSEC \033[92m[5]Kharej\033[96m [1]IRAN\033[93m Menu\033[0m"
    )
    print(
        '\033[92m "-"\033[93m══════════════════════════════════════════════════════════\033[0m'
    )
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mThis is IRAN menu:\033[0m")
    print("1. \033[92mServer[1]\033[0m")
    print("2. \033[92mServer[2]\033[0m")
    print("3. \033[93mServer[3]\033[0m")
    print("4. \033[92mServer[4]\033[0m")
    print("5. \033[92mServer[5]\033[0m")
    print("0. \033[94mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if server_type == "1":
            gre6ir1sec_editmulti_local()
            break
        elif server_type == "2":
            gre6ir2sec_editmulti_local()
            break
        elif server_type == "3":
            gre6ir3sec_editmulti_local()
            break
        elif server_type == "4":
            gre6ir4sec_editmulti_local()
            break
        elif server_type == "5":
            gre6ir5sec_editmulti_local()
            break
        elif server_type == "0":
            os.system("clear")
            gre6sec_multiedit_local()
            break
        else:
            print("Invalid choice.")


def gre6nosec_multiedit_local():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print("\033[92m(   ) \033[92mEdit local\033[93m GRE6 Menu\033[0m")
    print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[96mKharej\033[92m[10] \033[93mIRAN\033[92m[1]\033[0m")
    print("2. \033[96mKharej\033[92m[1] \033[93mIRAN\033[92m[5]  \033[0m")
    print("3. \033[94mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        choice = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if choice == "1":
            gre6nosec_edit_localkharej_multi()
            break
        elif choice == "2":
            gre6nosec_edit_localiran_multi()
            break
        elif choice == "3":
            clear()
            gre6_multiedit_local()
            break
        else:
            print("Invalid choice.")


def gre6nosec_edit_localiran_multi():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print(
        "\033[92m(   ) \033[93mGRE6 \033[92m[5]IRAN\033[96m [1]Kharej\033[93m Menu\033[0m"
    )
    print(
        '\033[92m "-"\033[93m══════════════════════════════════════════════════════════\033[0m'
    )
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[92mIRAN[1]\033[0m")
    print("2. \033[92mIRAN[2]\033[0m")
    print("3. \033[93mIRAN[3]\033[0m")
    print("4. \033[92mIRAN[4]\033[0m")
    print("5. \033[92mIRAN[5]\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    print("6. \033[93mKharej Menu\033[0m")
    print("0. \033[94mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if server_type == "1":
            gre6iranfive1nosec_editmulti_local()
            break
        elif server_type == "2":
            gre6iranfive2nosec_editmulti_local()
            break
        elif server_type == "3":
            gre6iranfive3nosec_editmulti_local()
            break
        elif server_type == "4":
            gre6iranfive4nosec_editmulti_local()
            break
        elif server_type == "5":
            gre6iranfive5nosec_editmulti_local()
            break
        elif server_type == "6":
            gre6kharejonenosec_editmulti_localmenu()
            break
        elif server_type == "0":
            os.system("clear")
            gre6nosec_multiedit_local()
            break
        else:
            print("Invalid choice.")


def gre6kharejonenosec_editmulti_localmenu():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print(
        "\033[92m(   ) \033[93mGRE6 \033[92m[5]IRAN\033[96m [1]Kharej\033[93m Menu\033[0m"
    )
    print(
        '\033[92m "-"\033[93m══════════════════════════════════════════════════════════\033[0m'
    )
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mThis is Kharej menu:\033[0m")
    print("1. \033[92mServer[1]\033[0m")
    print("2. \033[92mServer[2]\033[0m")
    print("3. \033[93mServer[3]\033[0m")
    print("4. \033[92mServer[4]\033[0m")
    print("5. \033[92mServer[5]\033[0m")
    print("0. \033[94mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if server_type == "1":
            gre6kharejone1nosec_editmulti_local()
            break
        elif server_type == "2":
            gre6kharejone2nosec_editmulti_local()
            break
        elif server_type == "3":
            gre6kharejone3nosec_editmulti_local()
            break
        elif server_type == "4":
            gre6kharejone4nosec_editmulti_local()
            break
        elif server_type == "5":
            gre6kharejone5nosec_editmulti_local()
            break
        elif server_type == "0":
            os.system("clear")
            gre6nosec_multiedit_local()
            break
        else:
            print("Invalid choice.")


def gre6nosec_edit_localkharej_multi():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print(
        "\033[92m(   ) \033[93mGRE6 \033[92m[10]Kharej\033[96m [1]IRAN\033[93m Menu\033[0m"
    )
    print(
        '\033[92m "-"\033[93m══════════════════════════════════════════════════════════\033[0m'
    )
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[92mKharej[1]\033[0m")
    print("2. \033[92mKharej[2]\033[0m")
    print("3. \033[93mKharej[3]\033[0m")
    print("4. \033[92mKharej[4]\033[0m")
    print("5. \033[92mKharej[5]\033[0m")
    print("6. \033[92mKharej[6]\033[0m")
    print("7. \033[92mKharej[7]\033[0m")
    print("8. \033[93mKharej[8]\033[0m")
    print("9. \033[92mKharej[9]\033[0m")
    print("10.\033[92mKharej[10]\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    print("11.\033[93mIRAN Menu\033[0m")
    print("0. \033[94mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if server_type == "1":
            gre6kharej1nosec_editmulti_local()
            break
        elif server_type == "2":
            gre6kharej2nosec_editmulti_local()
            break
        elif server_type == "3":
            gre6kharej3nosec_editmulti_local()
            break
        elif server_type == "4":
            gre6kharej4nosec_editmulti_local()
            break
        elif server_type == "5":
            gre6kharej5nosec_editmulti_local()
            break
        elif server_type == "6":
            gre6kharej6nosec_editmulti_local()
            break
        elif server_type == "7":
            gre6kharej7nosec_editmulti_local()
            break
        elif server_type == "8":
            gre6kharej8nosec_editmulti_local()
            break
        elif server_type == "9":
            gre6kharej9nosec_editmulti_local()
            break
        elif server_type == "10":
            gre6kharej10nosec_editmulti_local()
            break
        elif server_type == "6":
            gre6irannosec_editmulti_local()
            break
        elif server_type == "0":
            os.system("clear")
            gre6nosec_multiedit_local()
            break
        else:
            print("Invalid choice.")


def gre6irannosec_editmulti_local():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print(
        "\033[92m(   ) \033[93mGRE6 \033[92m[5]Kharej\033[96m [1]IRAN\033[93m Menu\033[0m"
    )
    print(
        '\033[92m "-"\033[93m══════════════════════════════════════════════════════════\033[0m'
    )
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mThis is IRAN menu:\033[0m")
    print("1. \033[92mServer[1]\033[0m")
    print("2. \033[92mServer[2]\033[0m")
    print("3. \033[93mServer[3]\033[0m")
    print("4. \033[92mServer[4]\033[0m")
    print("5. \033[92mServer[5]\033[0m")
    print("6. \033[92mServer[6]\033[0m")
    print("7. \033[92mServer[7]\033[0m")
    print("8. \033[93mServer[8]\033[0m")
    print("9. \033[92mServer[9]\033[0m")
    print("10.\033[92mServer[10]\033[0m")
    print("0. \033[94mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if server_type == "1":
            gre6ir1nosec_editmulti_local()
            break
        elif server_type == "2":
            gre6ir2nosec_editmulti_local()
            break
        elif server_type == "3":
            gre6ir3nosec_editmulti_local()
            break
        elif server_type == "4":
            gre6ir4nosec_editmulti_local()
            break
        elif server_type == "5":
            gre6ir5nosec_editmulti_local()
            break
        elif server_type == "6":
            gre6ir6nosec_editmulti_local()
            break
        elif server_type == "7":
            gre6ir7nosec_editmulti_local()
            break
        elif server_type == "8":
            gre6ir8nosec_editmulti_local()
            break
        elif server_type == "9":
            gre6ir9nosec_editmulti_local()
            break
        elif server_type == "10":
            gre6ir10nosec_editmulti_local()
            break
        elif server_type == "0":
            os.system("clear")
            gre6nosec_multiedit_local()
            break
        else:
            print("Invalid choice.")


def private_gre6multi(name):
    try:
        with open(name, "r") as f:
            content = f.read()
        match = re.search(r"ip -6 addr add (\S+)/64 dev azumig6?", content)
        if match:
            return match.group(1)
        else:
            print(f"\033[91mno private IP found\033[0m")
    except FileNotFoundError:
        print("\033[91mPrivate file not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")
    return None


def display_stuff_gre6(local_ip, remote_ip, private_ip):
    lines = [
        f"\033[93mTitle:         GRE6 Configuration\033[0m",
        f"\033[97m──────────────────────────────────────\033[0m",
        f"\033[92mLocal IP:       \033[97m{local_ip}\033[0m",
        f"\033[92mRemote IP:      \033[97m{remote_ip}\033[0m",
        f"\033[93mPrivate IP:     \033[97m{private_ip}\033[0m",
    ]
    box_width = 50

    print("\033[93m╭" + "─" * (box_width - 2) + "╮\033[0m")

    for line in lines:
        print(f"\033[93m {line:<{box_width - 4}} \033[0m")

    print("\033[93m╰" + "─" * (box_width - 2) + "╯\033[0m")


# changes # 1
def update_ipfile_gre61(name, new_ip, update_type):
    try:
        with open(name, "r") as f:
            content = f.read()

        if update_type == "private":
            new_content = re.sub(
                r"ip (-6 )?addr add [^ ]+/64 dev azumi?",
                f"ip -6 addr add {new_ip}/64 dev azumi",
                content,
            )
            ip_parts = new_ip.split(":")
            if new_ip.endswith(":2"):
                ip_parts[-1] = "1"
            else:
                ip_parts[-1] = "2"
            counterpart_ip = ":".join(ip_parts)
            new_content = re.sub(
                r"ip (-6 )?route add [^ ]+/64 dev azumi?",
                f"ip -6 route add {counterpart_ip}/64 dev azumi",
                new_content,
            )
            update_ipfile_gre61("/etc/gre61.sh", new_ip, update_type="gre6_local")
            update_ipfile_gre61(
                "/etc/gre61.sh", counterpart_ip, update_type="gre6_remote"
            )
        elif update_type == "local":
            new_content = re.sub(r"local \S+", f"local {new_ip}", content)
        elif update_type == "remote":
            new_content = re.sub(r"remote \S+", f"remote {new_ip}", content)
        elif update_type == "gre6_local":
            new_content = re.sub(r"local \S+", f"local {new_ip}", content)
        elif update_type == "gre6_remote":
            new_content = re.sub(r"remote \S+", f"remote {new_ip}", content)
        elif update_type == "ipsec":
            new_content = re.sub(r"leftsubnet=\S+", f"leftsubnet={new_ip}/64", content)
            new_content = re.sub(r"leftid=\S+", f"leftid={new_ip}", new_content)

            ip_parts = new_ip.split(":")
            if new_ip.endswith(":1"):
                ip_parts[-1] = "2"
            else:
                ip_parts[-1] = "1"
            counterpart_ip = ":".join(ip_parts)
            new_content = re.sub(r"right=\S+", f"right={counterpart_ip}", new_content)
            new_content = re.sub(
                r"rightsubnet=\S+",
                f"rightsubnet={counterpart_ip}/64",
                new_content,
            )

        with open(name, "w") as f:
            f.write(new_content)
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def get_current_private_ipsgre61():
    private_ip_private = private_ip1("/etc/private1.sh")
    private_ip_gre6 = private_gre6multi("/etc/gre61.sh")
    return {
        "private": private_ip_private,
        "gre6": private_ip_gre6,
    }


def save_stuff_gre6sec1(private_ip, local_ip, remote_ip, is_gre6):
    current_ips = get_current_private_ipsgre61()
    current_ip = current_ips["gre6"] if is_gre6 else current_ips["private"]

    if current_ip:
        delete_ufw_rules(current_ip)

    add_ufw_rules(private_ip)

    counterpart_ip = wtb_opposite_ip(private_ip)
    try:
        if is_gre6:
            update_pingfile_sit("/etc/ping_ip1.sh", counterpart_ip)
            update_ipfile_gre61("/etc/gre61.sh", private_ip, update_type="private")
            update_ipfile_gre61("/etc/gre61.sh", remote_ip, update_type="remote")
            update_ipfile_gre61("/etc/ipsec1.conf", private_ip, update_type="ipsec")
        else:
            update_pingfile_sit("/etc/ping_v61.sh", counterpart_ip)
            update_ipfile_gre61("/etc/private1.sh", private_ip, update_type="private")
            update_ipfile_gre61("/etc/private1.sh", local_ip, update_type="local")
            update_ipfile_gre61("/etc/private1.sh", remote_ip, update_type="remote")

        interface = "azumig61" if is_gre6 else "azumi1"
        subprocess.run(["ip", "link", "set", "dev", interface, "down"], check=True)
        subprocess.run(["ip", "link", "delete", interface], check=True)
    except subprocess.CalledProcessError as e:
        print("\033[91merror bringing interface down or deleting it\033[0m")

    try:
        script = "/etc/gre61.sh" if is_gre6 else "/etc/private1.sh"
        result = subprocess.run(["/bin/bash", script], capture_output=True, text=True)
        if "RTNETLINK answers: File exists" in result.stderr:
            print("\033[91madditional ip already exists. Ignoring this error\033[0m")
        else:
            result.check_returncode()
        display_checkmark(
            f"\033[92mChanges saved and {interface} interface updated successfully!\033[0m"
        )

        subprocess.run(["sudo", "systemctl", "daemon-reload"], check=True)
        subprocess.run(["sudo", "systemctl", "restart", "ping_v61"], check=True)
        subprocess.run(["sudo", "systemctl", "restart", "ping_ip1"], check=True)
        subprocess.run(["sudo", "systemctl", "restart", "strong-azumi1"], check=True)

        result = subprocess.run(
            [
                "systemctl",
                "list-units",
                "--full",
                "--all",
                "strong-azumi1.service",
            ],
            capture_output=True,
            text=True,
        )
        if "strong-azumi1.service" in result.stdout:
            subprocess.run(
                ["sudo", "systemctl", "restart", "strong-azumi1"], check=True
            )
        else:
            print("\033[91mstrongswan service not found, don't mind this error.\033[0m")

    except subprocess.CalledProcessError as e:
        print(f"\033[91merror applying network changes: gre6 related error\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")
    # animate("\033[92mSystem services reloaded and restarted successfully!\033[0m")


def update_ipsec_conf_irangre61(name, new_private_ip):
    try:
        with open(name, "r") as f:
            content = f.readlines()

        start_idx, end_idx = None, None
        for i, line in enumerate(content):
            if line.strip() == "conn GRE61":
                start_idx = i
            elif start_idx is not None and line.strip().startswith("conn "):
                end_idx = i
                break

        if start_idx is None:
            print("\033[91m'conn GRE61' section not found\033[0m")
            return

        if end_idx is None:
            end_idx = len(content)

        section = content[start_idx:end_idx]
        ip_parts = new_private_ip.split(":")
        if new_private_ip.endswith(":2"):
            ip_parts[-1] = "1"
        else:
            ip_parts[-1] = "2"
        counterpart_ip = ":".join(ip_parts)

        new_section = []
        for line in section:
            line = re.sub(r"leftsubnet=\S+", f"leftsubnet={new_private_ip}/64", line)
            line = re.sub(r"leftid=\S+", f"leftid={new_private_ip}", line)
            line = re.sub(r"right=\S+", f"right={counterpart_ip}", line)
            line = re.sub(r"rightsubnet=\S+", f"rightsubnet={counterpart_ip}/64", line)
            new_section.append(line)

        new_content = content[:start_idx] + new_section + content[end_idx:]

        with open(name, "w") as f:
            f.writelines(new_content)

        print(f"\033[92m'conn GRE61' section updated successfully\033[0m")
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:

        print(f"\033[91mout of ordinary error: {e}\033[0m")


def save_stuff_gre6sec1_iran(private_ip, local_ip, remote_ip, is_gre6):
    current_ips = get_current_private_ipsgre61()
    current_ip = current_ips["gre6"] if is_gre6 else current_ips["private"]

    if current_ip:
        delete_ufw_rules(current_ip)

    add_ufw_rules(private_ip)

    counterpart_ip = wtb_opposite_ip(private_ip)
    try:
        if is_gre6:
            update_pingfile_sit("/etc/ping_ip1.sh", counterpart_ip)
            update_ipfile_gre61("/etc/gre61.sh", private_ip, update_type="private")
            update_ipfile_gre61("/etc/gre61.sh", remote_ip, update_type="remote")
            update_ipsec_conf_irangre61("/etc/ipsec1.conf", private_ip)
        else:
            update_pingfile_sit("/etc/ping_v61.sh", counterpart_ip)
            update_ipfile_gre61("/etc/private1.sh", private_ip, update_type="private")
            update_ipfile_gre61("/etc/private1.sh", local_ip, update_type="local")
            update_ipfile_gre61("/etc/private1.sh", remote_ip, update_type="remote")

        interface = "azumig61" if is_gre6 else "azumi1"
        subprocess.run(["ip", "link", "set", "dev", interface, "down"], check=True)
        subprocess.run(["ip", "link", "delete", interface], check=True)
    except subprocess.CalledProcessError as e:
        print("\033[91merror bringing interface down or deleting it\033[0m")

    try:
        script = "/etc/gre61.sh" if is_gre6 else "/etc/private1.sh"
        result = subprocess.run(["/bin/bash", script], capture_output=True, text=True)
        if "RTNETLINK answers: File exists" in result.stderr:
            print("\033[91madditional ip already exists. Ignoring this error\033[0m")
        else:
            result.check_returncode()
        display_checkmark(
            f"\033[92mChanges saved and {interface} interface updated successfully!\033[0m"
        )

        subprocess.run(["sudo", "systemctl", "daemon-reload"], check=True)
        subprocess.run(["sudo", "systemctl", "restart", "ping_v61"], check=True)
        subprocess.run(["sudo", "systemctl", "restart", "ping_ip1"], check=True)
        subprocess.run(["sudo", "systemctl", "restart", "strong-azumi1"], check=True)

        result = subprocess.run(
            [
                "systemctl",
                "list-units",
                "--full",
                "--all",
                "strong-azumi1.service",
            ],
            capture_output=True,
            text=True,
        )
        if "strong-azumi1.service" in result.stdout:
            subprocess.run(
                ["sudo", "systemctl", "restart", "strong-azumi1"], check=True
            )
        else:
            print("\033[91mstrongswan service not found, don't mind this error.\033[0m")

    except subprocess.CalledProcessError as e:
        print(f"\033[91merror applying network changes: gre6 related error\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")
    # animate("\033[92mSystem services reloaded and restarted successfully!\033[0m")


def gre6kharej1sec_editmulti_local():
    local_ip_private = local_ip("/etc/private1.sh")
    remote_ip_private = remote_ip("/etc/private1.sh")
    private_ip_private = private_ip1("/etc/private1.sh")

    local_ip_gre6 = local_ip("/etc/gre61.sh")
    remote_ip_gre6 = remote_ip("/etc/gre61.sh")
    private_ip_gre6 = private_gre6multi("/etc/gre61.sh")

    ipsecsecret = get_ipsecsecret("/etc/ipsec.secrets")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("couldn't retrieve IP addresses from private file")
    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("couldn't retrieve IP addresses from gre6 file")
    if not ipsecsecret:
        print("couldn't retrieve IPsec secret key from ipsec file")

    if (
        not local_ip_private
        or not remote_ip_private
        or not private_ip_private
        or not local_ip_gre6
        or not remote_ip_gre6
        or not private_ip_gre6
        or not ipsecsecret
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_privatekharej1(
            local_ip_private, remote_ip_private, private_ip_private
        )
        display_stuff_gre6(local_ip_gre6, remote_ip_gre6, private_ip_gre6)

        display_ipsecsecret(ipsecsecret)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mGRE6 + IPSEC\033[93m Kharej [1] Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej [1] \033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mIRAN \033[92m Public IP\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[93mChange \033[97mGRE6 \033[93mPrivate IPV6\033[0m")
        print("5. \033[93mChange IPSEC \033[92mSecret Key\033[0m")
        print("6. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_private = new_ip
                ip_parts = new_ip.split(":")
                if new_ip.endswith(":2"):
                    ip_parts[-1] = "1"
                else:
                    ip_parts[-1] = "2"
                counterpart_ip = ":".join(ip_parts)
                local_ip_gre6 = new_ip
                remote_ip_gre6 = counterpart_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[GRE6]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_gre6
                private_ip_gre6 = new_ip

                update_ipfile_gre61("/etc/ipsec1.conf", new_ip, update_type="ipsec")
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mKharej [1]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input("\033[93mEnter \033[92mIRAN\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "5":
            new_key = input(
                "\033[93mEnter new \033[92mIPsec \033[93mSecret Key: \033[0m"
            )
            if new_key:
                update_ipsecsecret("/etc/ipsec.secrets", new_key)
                ipsecsecret = new_key
            else:
                print("\033[91mCrazy Secret Key\033[0m")
        elif choice == "6":
            save_stuff_gre6sec1(
                private_ip_private,
                local_ip_private,
                remote_ip_private,
                is_gre6=False,
            )
            save_stuff_gre6sec1(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            update_ipsec_ip(private_ip_gre6)
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Please select a valid option.")


def gre6ir1sec_editmulti_local():
    local_ip_private = local_ip("/etc/private1.sh")
    remote_ip_private = remote_ip("/etc/private1.sh")
    private_ip_private = private_ip1("/etc/private1.sh")

    local_ip_gre6 = local_ip("/etc/gre61.sh")
    remote_ip_gre6 = remote_ip("/etc/gre61.sh")
    private_ip_gre6 = private_gre6multi("/etc/gre61.sh")

    ipsecsecret = get_ipsecsecret("/etc/ipsec.secrets")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("couldn't retrieve IP addresses from private file")
    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("couldn't retrieve IP addresses from gre6 file")
    if not ipsecsecret:
        print("couldn't retrieve IPsec secret key from ipsec file")

    if (
        not local_ip_private
        or not remote_ip_private
        or not private_ip_private
        or not local_ip_gre6
        or not remote_ip_gre6
        or not private_ip_gre6
        or not ipsecsecret
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_privateiran1(
            local_ip_private, remote_ip_private, private_ip_private
        )
        display_stuff_gre6(local_ip_gre6, remote_ip_gre6, private_ip_gre6)

        display_ipsecsecret(ipsecsecret)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mGRE6 + IPSEC\033[93m IRAN Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN \033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mKharej [1] \033[92m Public IP\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[93mChange \033[97mGRE6 \033[93mPrivate IPV6\033[0m")
        print("5. \033[93mChange IPSEC \033[92mSecret Key\033[0m")
        print("6. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter new private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_private = new_ip
                ip_parts = new_ip.split(":")
                if new_ip.endswith(":2"):
                    ip_parts[-1] = "1"
                else:
                    ip_parts[-1] = "2"
                counterpart_ip = ":".join(ip_parts)
                local_ip_gre6 = new_ip
                remote_ip_gre6 = counterpart_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter new private IPv6 address \033[96m[GRE6]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_gre6
                private_ip_gre6 = new_ip

                update_ipsec_conf_irangre61("/etc/ipsec1.conf", new_ip)
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mIRAN\033[93m Public IP :\033[0m ")
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mKharej [1]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "5":
            new_key = input(
                "\033[93mEnter new \033[92mIPsec \033[93mSecret Key: \033[0m"
            )
            if new_key:
                update_ipsecsecret("/etc/ipsec.secrets", new_key)
                ipsecsecret = new_key
            else:
                print("\033[91mCrazy Secret Key\033[0m")
        elif choice == "6":
            save_stuff_gre6sec1_iran(
                private_ip_private,
                local_ip_private,
                remote_ip_private,
                is_gre6=False,
            )
            save_stuff_gre6sec1_iran(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            update_ipsec_ip_multi(private_ip_gre6)
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Please select a valid option.")


# changes # 2
def update_ipfile_gre62(name, new_ip, update_type):
    try:
        with open(name, "r") as f:
            content = f.read()

        if update_type == "private":
            new_content = re.sub(
                r"ip (-6 )?addr add [^ ]+/64 dev azumi?",
                f"ip -6 addr add {new_ip}/64 dev azumi",
                content,
            )
            ip_parts = new_ip.split(":")
            if new_ip.endswith(":2"):
                ip_parts[-1] = "1"
            else:
                ip_parts[-1] = "2"
            counterpart_ip = ":".join(ip_parts)
            new_content = re.sub(
                r"ip (-6 )?route add [^ ]+/64 dev azumi?",
                f"ip -6 route add {counterpart_ip}/64 dev azumi",
                new_content,
            )
            update_ipfile_gre62("/etc/gre62.sh", new_ip, update_type="gre6_local")
            update_ipfile_gre62(
                "/etc/gre62.sh", counterpart_ip, update_type="gre6_remote"
            )
        elif update_type == "local":
            new_content = re.sub(r"local \S+", f"local {new_ip}", content)
        elif update_type == "remote":
            new_content = re.sub(r"remote \S+", f"remote {new_ip}", content)
        elif update_type == "gre6_local":
            new_content = re.sub(r"local \S+", f"local {new_ip}", content)
        elif update_type == "gre6_remote":
            new_content = re.sub(r"remote \S+", f"remote {new_ip}", content)
        elif update_type == "ipsec":
            new_content = re.sub(r"leftsubnet=\S+", f"leftsubnet={new_ip}/64", content)
            new_content = re.sub(r"leftid=\S+", f"leftid={new_ip}", new_content)

            ip_parts = new_ip.split(":")
            if new_ip.endswith(":1"):
                ip_parts[-1] = "2"
            else:
                ip_parts[-1] = "1"
            counterpart_ip = ":".join(ip_parts)
            new_content = re.sub(r"right=\S+", f"right={counterpart_ip}", new_content)
            new_content = re.sub(
                r"rightsubnet=\S+",
                f"rightsubnet={counterpart_ip}/64",
                new_content,
            )

        with open(name, "w") as f:
            f.write(new_content)
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def get_current_private_ipsgre62():
    private_ip_private = private_ip1("/etc/private2.sh")
    private_ip_gre6 = private_gre6multi("/etc/gre62.sh")
    return {
        "private": private_ip_private,
        "gre6": private_ip_gre6,
    }


def save_stuff_gre6sec2(private_ip, local_ip, remote_ip, is_gre6):
    current_ips = get_current_private_ipsgre62()
    current_ip = current_ips["gre6"] if is_gre6 else current_ips["private"]

    if current_ip:
        delete_ufw_rules(current_ip)

    add_ufw_rules(private_ip)

    counterpart_ip = wtb_opposite_ip(private_ip)
    try:
        if is_gre6:
            update_pingfile_sit("/etc/ping_ip2.sh", counterpart_ip)
            update_ipfile_gre62("/etc/gre62.sh", private_ip, update_type="private")
            update_ipfile_gre62("/etc/gre62.sh", remote_ip, update_type="remote")
            update_ipfile_gre62("/etc/ipsec1.conf", private_ip, update_type="ipsec")
        else:
            update_pingfile_sit("/etc/ping_v62.sh", counterpart_ip)
            update_ipfile_gre62("/etc/private2.sh", private_ip, update_type="private")
            update_ipfile_gre62("/etc/private2.sh", local_ip, update_type="local")
            update_ipfile_gre62("/etc/private2.sh", remote_ip, update_type="remote")

        interface = "azumig62" if is_gre6 else "azumi2"
        subprocess.run(["ip", "link", "set", "dev", interface, "down"], check=True)
        subprocess.run(["ip", "link", "delete", interface], check=True)
    except subprocess.CalledProcessError as e:
        print("\033[91merror bringing interface down or deleting it\033[0m")

    try:
        script = "/etc/gre62.sh" if is_gre6 else "/etc/private2.sh"
        result = subprocess.run(["/bin/bash", script], capture_output=True, text=True)
        if "RTNETLINK answers: File exists" in result.stderr:
            print("\033[91madditional ip already exists. Ignoring this error\033[0m")
        else:
            result.check_returncode()
        display_checkmark(
            f"\033[92mChanges saved and {interface} interface updated successfully!\033[0m"
        )

        subprocess.run(["sudo", "systemctl", "daemon-reload"], check=True)
        subprocess.run(["sudo", "systemctl", "restart", "ping_v62"], check=True)
        subprocess.run(["sudo", "systemctl", "restart", "ping_ip2"], check=True)
        subprocess.run(["sudo", "systemctl", "restart", "strong-azumi1"], check=True)

        result = subprocess.run(
            [
                "systemctl",
                "list-units",
                "--full",
                "--all",
                "strong-azumi1.service",
            ],
            capture_output=True,
            text=True,
        )
        if "strong-azumi1.service" in result.stdout:
            subprocess.run(
                ["sudo", "systemctl", "restart", "strong-azumi1"], check=True
            )
        else:
            print("\033[91mstrongswan service not found, don't mind this error.\033[0m")

    except subprocess.CalledProcessError as e:
        print(f"\033[91merror applying network changes: gre6 related error\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")
    # animate("\033[92mSystem services reloaded and restarted successfully!\033[0m")


def update_ipsec_conf_irangre62(name, new_private_ip):
    try:
        with open(name, "r") as f:
            content = f.readlines()

        start_idx, end_idx = None, None
        for i, line in enumerate(content):
            if line.strip() == "conn GRE62":
                start_idx = i
            elif start_idx is not None and line.strip().startswith("conn "):
                end_idx = i
                break

        if start_idx is None:
            print("\033[91m'conn GRE62' section not found\033[0m")
            return

        if end_idx is None:
            end_idx = len(content)

        section = content[start_idx:end_idx]
        ip_parts = new_private_ip.split(":")
        if new_private_ip.endswith(":2"):
            ip_parts[-1] = "1"
        else:
            ip_parts[-1] = "2"
        counterpart_ip = ":".join(ip_parts)

        new_section = []
        for line in section:
            line = re.sub(r"leftsubnet=\S+", f"leftsubnet={new_private_ip}/64", line)
            line = re.sub(r"leftid=\S+", f"leftid={new_private_ip}", line)
            line = re.sub(r"right=\S+", f"right={counterpart_ip}", line)
            line = re.sub(r"rightsubnet=\S+", f"rightsubnet={counterpart_ip}/64", line)
            new_section.append(line)

        new_content = content[:start_idx] + new_section + content[end_idx:]

        with open(name, "w") as f:
            f.writelines(new_content)

        print(f"\033[92m'conn GRE62' section updated successfully\033[0m")
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:

        print(f"\033[91mout of ordinary error: {e}\033[0m")


def save_stuff_gre6sec2_iran(private_ip, local_ip, remote_ip, is_gre6):
    current_ips = get_current_private_ipsgre62()
    current_ip = current_ips["gre6"] if is_gre6 else current_ips["private"]

    if current_ip:
        delete_ufw_rules(current_ip)

    add_ufw_rules(private_ip)

    counterpart_ip = wtb_opposite_ip(private_ip)
    try:
        if is_gre6:
            update_pingfile_sit("/etc/ping_ip2.sh", counterpart_ip)
            update_ipfile_gre62("/etc/gre62.sh", private_ip, update_type="private")
            update_ipfile_gre62("/etc/gre62.sh", remote_ip, update_type="remote")
            update_ipsec_conf_irangre62("/etc/ipsec1.conf", private_ip)
        else:
            update_pingfile_sit("/etc/ping_v62.sh", counterpart_ip)
            update_ipfile_gre62("/etc/private2.sh", private_ip, update_type="private")
            update_ipfile_gre62("/etc/private2.sh", local_ip, update_type="local")
            update_ipfile_gre62("/etc/private2.sh", remote_ip, update_type="remote")

        interface = "azumig62" if is_gre6 else "azumi2"
        subprocess.run(["ip", "link", "set", "dev", interface, "down"], check=True)
        subprocess.run(["ip", "link", "delete", interface], check=True)
    except subprocess.CalledProcessError as e:
        print("\033[91merror bringing interface down or deleting it\033[0m")

    try:
        script = "/etc/gre62.sh" if is_gre6 else "/etc/private2.sh"
        result = subprocess.run(["/bin/bash", script], capture_output=True, text=True)
        if "RTNETLINK answers: File exists" in result.stderr:
            print("\033[91madditional ip already exists. Ignoring this error\033[0m")
        else:
            result.check_returncode()
        display_checkmark(
            f"\033[92mChanges saved and {interface} interface updated successfully!\033[0m"
        )

        subprocess.run(["sudo", "systemctl", "daemon-reload"], check=True)
        subprocess.run(["sudo", "systemctl", "restart", "ping_v62"], check=True)
        subprocess.run(["sudo", "systemctl", "restart", "ping_ip2"], check=True)
        subprocess.run(["sudo", "systemctl", "restart", "strong-azumi1"], check=True)

        result = subprocess.run(
            [
                "systemctl",
                "list-units",
                "--full",
                "--all",
                "strong-azumi1.service",
            ],
            capture_output=True,
            text=True,
        )
        if "strong-azumi1.service" in result.stdout:
            subprocess.run(
                ["sudo", "systemctl", "restart", "strong-azumi1"], check=True
            )
        else:
            print("\033[91mstrongswan service not found, don't mind this error.\033[0m")

    except subprocess.CalledProcessError as e:
        print(f"\033[91merror applying network changes: Gre6 related error\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")
    # animate("\033[92mSystem services reloaded and restarted successfully!\033[0m")


def gre6kharej2sec_editmulti_local():
    local_ip_private = local_ip("/etc/private2.sh")
    remote_ip_private = remote_ip("/etc/private2.sh")
    private_ip_private = private_ip1("/etc/private2.sh")

    local_ip_gre6 = local_ip("/etc/gre62.sh")
    remote_ip_gre6 = remote_ip("/etc/gre62.sh")
    private_ip_gre6 = private_gre6multi("/etc/gre62.sh")

    ipsecsecret = get_ipsecsecret("/etc/ipsec.secrets")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("couldn't retrieve IP addresses from private file")
    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("couldn't retrieve IP addresses from gre6 file")
    if not ipsecsecret:
        print("couldn't retrieve IPsec secret key from ipsec file")

    if (
        not local_ip_private
        or not remote_ip_private
        or not private_ip_private
        or not local_ip_gre6
        or not remote_ip_gre6
        or not private_ip_gre6
        or not ipsecsecret
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_privatekharej2(
            local_ip_private, remote_ip_private, private_ip_private
        )
        display_stuff_gre6(local_ip_gre6, remote_ip_gre6, private_ip_gre6)

        display_ipsecsecret(ipsecsecret)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mGRE6 + IPSEC\033[93m Kharej [2] Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej [2] \033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mIRAN \033[92m Public IP\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[93mChange \033[97mGRE6 \033[93mPrivate IPV6\033[0m")
        print("5. \033[93mChange IPSEC \033[92mSecret Key\033[0m")
        print("6. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_private = new_ip
                ip_parts = new_ip.split(":")
                if new_ip.endswith(":2"):
                    ip_parts[-1] = "1"
                else:
                    ip_parts[-1] = "2"
                counterpart_ip = ":".join(ip_parts)
                local_ip_gre6 = new_ip
                remote_ip_gre6 = counterpart_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[GRE6]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_gre6
                private_ip_gre6 = new_ip

                update_ipfile_gre62("/etc/ipsec1.conf", new_ip, update_type="ipsec")
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mKharej [2]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input("\033[93mEnter \033[92mIRAN\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "5":
            new_key = input(
                "\033[93mEnter new \033[92mIPsec \033[93mSecret Key: \033[0m"
            )
            if new_key:
                update_ipsecsecret("/etc/ipsec.secrets", new_key)
                ipsecsecret = new_key
            else:
                print("\033[91mCrazy Secret Key\033[0m")
        elif choice == "6":
            save_stuff_gre6sec2(
                private_ip_private,
                local_ip_private,
                remote_ip_private,
                is_gre6=False,
            )
            save_stuff_gre6sec2(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            update_ipsec_ip(private_ip_gre6)
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Please select a valid option.")


def gre6ir2sec_editmulti_local():
    local_ip_private = local_ip("/etc/private2.sh")
    remote_ip_private = remote_ip("/etc/private2.sh")
    private_ip_private = private_ip1("/etc/private2.sh")

    local_ip_gre6 = local_ip("/etc/gre62.sh")
    remote_ip_gre6 = remote_ip("/etc/gre62.sh")
    private_ip_gre6 = private_gre6multi("/etc/gre62.sh")

    ipsecsecret = get_ipsecsecret("/etc/ipsec.secrets")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("couldn't retrieve IP addresses from private file")
    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("couldn't retrieve IP addresses from gre6 file")
    if not ipsecsecret:
        print("couldn't retrieve IPsec secret key from ipsec file")

    if (
        not local_ip_private
        or not remote_ip_private
        or not private_ip_private
        or not local_ip_gre6
        or not remote_ip_gre6
        or not private_ip_gre6
        or not ipsecsecret
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_privateiran2(
            local_ip_private, remote_ip_private, private_ip_private
        )
        display_stuff_gre6(local_ip_gre6, remote_ip_gre6, private_ip_gre6)

        display_ipsecsecret(ipsecsecret)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mGRE6 + IPSEC\033[93m IRAN Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN \033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mKharej [2] \033[92m Public IP\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[93mChange \033[97mGRE6 \033[93mPrivate IPV6\033[0m")
        print("5. \033[93mChange IPSEC \033[92mSecret Key\033[0m")
        print("6. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter new private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_private = new_ip
                ip_parts = new_ip.split(":")
                if new_ip.endswith(":2"):
                    ip_parts[-1] = "1"
                else:
                    ip_parts[-1] = "2"
                counterpart_ip = ":".join(ip_parts)
                local_ip_gre6 = new_ip
                remote_ip_gre6 = counterpart_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter new private IPv6 address \033[96m[GRE6]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_gre6
                private_ip_gre6 = new_ip

                update_ipsec_conf_irangre62("/etc/ipsec1.conf", new_ip)
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mIRAN\033[93m Public IP :\033[0m ")
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mKharej [2]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "5":
            new_key = input(
                "\033[93mEnter new \033[92mIPsec \033[93mSecret Key: \033[0m"
            )
            if new_key:
                update_ipsecsecret("/etc/ipsec.secrets", new_key)
                ipsecsecret = new_key
            else:
                print("\033[91mCrazy Secret Key\033[0m")
        elif choice == "6":
            save_stuff_gre6sec2_iran(
                private_ip_private,
                local_ip_private,
                remote_ip_private,
                is_gre6=False,
            )
            save_stuff_gre6sec2_iran(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            update_ipsec_ip_multi2(private_ip_gre6)
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Please select a valid option.")


# changes # 3
def update_ipfile_gre63(name, new_ip, update_type):
    try:
        with open(name, "r") as f:
            content = f.read()

        if update_type == "private":
            new_content = re.sub(
                r"ip (-6 )?addr add [^ ]+/64 dev azumi?",
                f"ip -6 addr add {new_ip}/64 dev azumi",
                content,
            )
            ip_parts = new_ip.split(":")
            if new_ip.endswith(":2"):
                ip_parts[-1] = "1"
            else:
                ip_parts[-1] = "2"
            counterpart_ip = ":".join(ip_parts)
            new_content = re.sub(
                r"ip (-6 )?route add [^ ]+/64 dev azumi?",
                f"ip -6 route add {counterpart_ip}/64 dev azumi",
                new_content,
            )
            update_ipfile_gre63("/etc/gre63.sh", new_ip, update_type="gre6_local")
            update_ipfile_gre63(
                "/etc/gre63.sh", counterpart_ip, update_type="gre6_remote"
            )
        elif update_type == "local":
            new_content = re.sub(r"local \S+", f"local {new_ip}", content)
        elif update_type == "remote":
            new_content = re.sub(r"remote \S+", f"remote {new_ip}", content)
        elif update_type == "gre6_local":
            new_content = re.sub(r"local \S+", f"local {new_ip}", content)
        elif update_type == "gre6_remote":
            new_content = re.sub(r"remote \S+", f"remote {new_ip}", content)
        elif update_type == "ipsec":
            new_content = re.sub(r"leftsubnet=\S+", f"leftsubnet={new_ip}/64", content)
            new_content = re.sub(r"leftid=\S+", f"leftid={new_ip}", new_content)

            ip_parts = new_ip.split(":")
            if new_ip.endswith(":1"):
                ip_parts[-1] = "2"
            else:
                ip_parts[-1] = "1"
            counterpart_ip = ":".join(ip_parts)
            new_content = re.sub(r"right=\S+", f"right={counterpart_ip}", new_content)
            new_content = re.sub(
                r"rightsubnet=\S+",
                f"rightsubnet={counterpart_ip}/64",
                new_content,
            )

        with open(name, "w") as f:
            f.write(new_content)
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def get_current_private_ipsgre63():
    private_ip_private = private_ip1("/etc/private3.sh")
    private_ip_gre6 = private_gre6multi("/etc/gre63.sh")
    return {
        "private": private_ip_private,
        "gre6": private_ip_gre6,
    }


def save_stuff_gre6sec3(private_ip, local_ip, remote_ip, is_gre6):
    current_ips = get_current_private_ipsgre63()
    current_ip = current_ips["gre6"] if is_gre6 else current_ips["private"]

    if current_ip:
        delete_ufw_rules(current_ip)

    add_ufw_rules(private_ip)

    counterpart_ip = wtb_opposite_ip(private_ip)
    try:
        if is_gre6:
            update_pingfile_sit("/etc/ping_ip3.sh", counterpart_ip)
            update_ipfile_gre63("/etc/gre63.sh", private_ip, update_type="private")
            update_ipfile_gre63("/etc/gre63.sh", remote_ip, update_type="remote")
            update_ipfile_gre63("/etc/ipsec1.conf", private_ip, update_type="ipsec")
        else:
            update_pingfile_sit("/etc/ping_v63.sh", counterpart_ip)
            update_ipfile_gre63("/etc/private3.sh", private_ip, update_type="private")
            update_ipfile_gre63("/etc/private3.sh", local_ip, update_type="local")
            update_ipfile_gre63("/etc/private3.sh", remote_ip, update_type="remote")

        interface = "azumig63" if is_gre6 else "azumi3"
        subprocess.run(["ip", "link", "set", "dev", interface, "down"], check=True)
        subprocess.run(["ip", "link", "delete", interface], check=True)
    except subprocess.CalledProcessError as e:
        print("\033[91merror bringing interface down or deleting it\033[0m")

    try:
        script = "/etc/gre63.sh" if is_gre6 else "/etc/private3.sh"
        result = subprocess.run(["/bin/bash", script], capture_output=True, text=True)
        if "RTNETLINK answers: File exists" in result.stderr:
            print("\033[91madditional ip already exists. Ignoring this error\033[0m")
        else:
            result.check_returncode()
        display_checkmark(
            f"\033[92mChanges saved and {interface} interface updated successfully!\033[0m"
        )

        subprocess.run(["sudo", "systemctl", "daemon-reload"], check=True)
        subprocess.run(["sudo", "systemctl", "restart", "ping_v63"], check=True)
        subprocess.run(["sudo", "systemctl", "restart", "ping_ip3"], check=True)
        subprocess.run(["sudo", "systemctl", "restart", "strong-azumi1"], check=True)

        result = subprocess.run(
            [
                "systemctl",
                "list-units",
                "--full",
                "--all",
                "strong-azumi1.service",
            ],
            capture_output=True,
            text=True,
        )
        if "strong-azumi1.service" in result.stdout:
            subprocess.run(
                ["sudo", "systemctl", "restart", "strong-azumi1"], check=True
            )
        else:
            print("\033[91mstrongswan service not found, don't mind this error.\033[0m")

    except subprocess.CalledProcessError as e:
        print(f"\033[91merror applying network changes: Gre6 related error\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")
    # animate("\033[92mSystem services reloaded and restarted successfully!\033[0m")


def update_ipsec_conf_irangre63(name, new_private_ip):
    try:
        with open(name, "r") as f:
            content = f.readlines()

        start_idx, end_idx = None, None
        for i, line in enumerate(content):
            if line.strip() == "conn GRE63":
                start_idx = i
            elif start_idx is not None and line.strip().startswith("conn "):
                end_idx = i
                break

        if start_idx is None:
            print("\033[91m'conn GRE63' section not found\033[0m")
            return

        if end_idx is None:
            end_idx = len(content)

        section = content[start_idx:end_idx]
        ip_parts = new_private_ip.split(":")
        if new_private_ip.endswith(":2"):
            ip_parts[-1] = "1"
        else:
            ip_parts[-1] = "2"
        counterpart_ip = ":".join(ip_parts)

        new_section = []
        for line in section:
            line = re.sub(r"leftsubnet=\S+", f"leftsubnet={new_private_ip}/64", line)
            line = re.sub(r"leftid=\S+", f"leftid={new_private_ip}", line)
            line = re.sub(r"right=\S+", f"right={counterpart_ip}", line)
            line = re.sub(r"rightsubnet=\S+", f"rightsubnet={counterpart_ip}/64", line)
            new_section.append(line)

        new_content = content[:start_idx] + new_section + content[end_idx:]

        with open(name, "w") as f:
            f.writelines(new_content)

        print(f"\033[92m'conn GRE63' section updated successfully\033[0m")
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:

        print(f"\033[91mout of ordinary error: {e}\033[0m")


def save_stuff_gre6sec3_iran(private_ip, local_ip, remote_ip, is_gre6):
    current_ips = get_current_private_ipsgre63()
    current_ip = current_ips["gre6"] if is_gre6 else current_ips["private"]

    if current_ip:
        delete_ufw_rules(current_ip)

    add_ufw_rules(private_ip)

    counterpart_ip = wtb_opposite_ip(private_ip)
    try:
        if is_gre6:
            update_pingfile_sit("/etc/ping_ip3.sh", counterpart_ip)
            update_ipfile_gre63("/etc/gre63.sh", private_ip, update_type="private")
            update_ipfile_gre63("/etc/gre63.sh", remote_ip, update_type="remote")
            update_ipsec_conf_irangre63("/etc/ipsec1.conf", private_ip)
        else:
            update_pingfile_sit("/etc/ping_v63.sh", counterpart_ip)
            update_ipfile_gre63("/etc/private3.sh", private_ip, update_type="private")
            update_ipfile_gre63("/etc/private3.sh", local_ip, update_type="local")
            update_ipfile_gre63("/etc/private3.sh", remote_ip, update_type="remote")

        interface = "azumig63" if is_gre6 else "azumi3"
        subprocess.run(["ip", "link", "set", "dev", interface, "down"], check=True)
        subprocess.run(["ip", "link", "delete", interface], check=True)
    except subprocess.CalledProcessError as e:
        print("\033[91merror bringing interface down or deleting it\033[0m")

    try:
        script = "/etc/gre63.sh" if is_gre6 else "/etc/private3.sh"
        result = subprocess.run(["/bin/bash", script], capture_output=True, text=True)
        if "RTNETLINK answers: File exists" in result.stderr:
            print("\033[91madditional ip already exists. Ignoring this error\033[0m")
        else:
            result.check_returncode()
        display_checkmark(
            f"\033[92mChanges saved and {interface} interface updated successfully!\033[0m"
        )

        subprocess.run(["sudo", "systemctl", "daemon-reload"], check=True)
        subprocess.run(["sudo", "systemctl", "restart", "ping_v63"], check=True)
        subprocess.run(["sudo", "systemctl", "restart", "ping_ip3"], check=True)
        subprocess.run(["sudo", "systemctl", "restart", "strong-azumi1"], check=True)

        result = subprocess.run(
            [
                "systemctl",
                "list-units",
                "--full",
                "--all",
                "strong-azumi1.service",
            ],
            capture_output=True,
            text=True,
        )
        if "strong-azumi1.service" in result.stdout:
            subprocess.run(
                ["sudo", "systemctl", "restart", "strong-azumi1"], check=True
            )
        else:
            print("\033[91mstrongswan service not found, don't mind this error.\033[0m")

    except subprocess.CalledProcessError as e:
        print(f"\033[91merror applying network changes: Gre6 related error\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")
    # animate("\033[92mSystem services reloaded and restarted successfully!\033[0m")


def gre6kharej3sec_editmulti_local():
    local_ip_private = local_ip("/etc/private3.sh")
    remote_ip_private = remote_ip("/etc/private3.sh")
    private_ip_private = private_ip1("/etc/private3.sh")

    local_ip_gre6 = local_ip("/etc/gre63.sh")
    remote_ip_gre6 = remote_ip("/etc/gre63.sh")
    private_ip_gre6 = private_gre6multi("/etc/gre63.sh")

    ipsecsecret = get_ipsecsecret("/etc/ipsec.secrets")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("couldn't retrieve IP addresses from private file")
    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("couldn't retrieve IP addresses from gre6 file")
    if not ipsecsecret:
        print("couldn't retrieve IPsec secret key from ipsec file")

    if (
        not local_ip_private
        or not remote_ip_private
        or not private_ip_private
        or not local_ip_gre6
        or not remote_ip_gre6
        or not private_ip_gre6
        or not ipsecsecret
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_privatekharej3(
            local_ip_private, remote_ip_private, private_ip_private
        )
        display_stuff_gre6(local_ip_gre6, remote_ip_gre6, private_ip_gre6)

        display_ipsecsecret(ipsecsecret)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mGRE6 + IPSEC\033[93m Kharej [3] Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej [3] \033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mIRAN \033[92m Public IP\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[93mChange \033[97mGRE6 \033[93mPrivate IPV6\033[0m")
        print("5. \033[93mChange IPSEC \033[92mSecret Key\033[0m")
        print("6. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_private = new_ip
                ip_parts = new_ip.split(":")
                if new_ip.endswith(":2"):
                    ip_parts[-1] = "1"
                else:
                    ip_parts[-1] = "2"
                counterpart_ip = ":".join(ip_parts)
                local_ip_gre6 = new_ip
                remote_ip_gre6 = counterpart_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[GRE6]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_gre6
                private_ip_gre6 = new_ip

                update_ipfile_gre63("/etc/ipsec1.conf", new_ip, update_type="ipsec")
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mKharej [3]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input("\033[93mEnter \033[92mIRAN\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "5":
            new_key = input(
                "\033[93mEnter new \033[92mIPsec \033[93mSecret Key: \033[0m"
            )
            if new_key:
                update_ipsecsecret("/etc/ipsec.secrets", new_key)
                ipsecsecret = new_key
            else:
                print("\033[91mCrazy Secret Key\033[0m")
        elif choice == "6":
            save_stuff_gre6sec3(
                private_ip_private,
                local_ip_private,
                remote_ip_private,
                is_gre6=False,
            )
            save_stuff_gre6sec3(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            update_ipsec_ip(private_ip_gre6)
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Please select a valid option.")


def gre6ir3sec_editmulti_local():
    local_ip_private = local_ip("/etc/private3.sh")
    remote_ip_private = remote_ip("/etc/private3.sh")
    private_ip_private = private_ip1("/etc/private3.sh")

    local_ip_gre6 = local_ip("/etc/gre63.sh")
    remote_ip_gre6 = remote_ip("/etc/gre63.sh")
    private_ip_gre6 = private_gre6multi("/etc/gre63.sh")

    ipsecsecret = get_ipsecsecret("/etc/ipsec.secrets")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("couldn't retrieve IP addresses from private file")
    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("couldn't retrieve IP addresses from gre6 file")
    if not ipsecsecret:
        print("couldn't retrieve IPsec secret key from ipsec file")

    if (
        not local_ip_private
        or not remote_ip_private
        or not private_ip_private
        or not local_ip_gre6
        or not remote_ip_gre6
        or not private_ip_gre6
        or not ipsecsecret
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_privateiran3(
            local_ip_private, remote_ip_private, private_ip_private
        )
        display_stuff_gre6(local_ip_gre6, remote_ip_gre6, private_ip_gre6)

        display_ipsecsecret(ipsecsecret)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mGRE6 + IPSEC\033[93m IRAN Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN \033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mKharej [3] \033[92m Public IP\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[93mChange \033[97mGRE6 \033[93mPrivate IPV6\033[0m")
        print("5. \033[93mChange IPSEC \033[92mSecret Key\033[0m")
        print("6. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter new private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_private = new_ip
                ip_parts = new_ip.split(":")
                if new_ip.endswith(":2"):
                    ip_parts[-1] = "1"
                else:
                    ip_parts[-1] = "2"
                counterpart_ip = ":".join(ip_parts)
                local_ip_gre6 = new_ip
                remote_ip_gre6 = counterpart_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter new private IPv6 address \033[96m[GRE6]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_gre6
                private_ip_gre6 = new_ip

                update_ipsec_conf_irangre63("/etc/ipsec1.conf", new_ip)
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mIRAN\033[93m Public IP :\033[0m ")
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mKharej [3]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "5":
            new_key = input(
                "\033[93mEnter new \033[92mIPsec \033[93mSecret Key: \033[0m"
            )
            if new_key:
                update_ipsecsecret("/etc/ipsec.secrets", new_key)
                ipsecsecret = new_key
            else:
                print("\033[91mCrazy Secret Key\033[0m")
        elif choice == "6":
            save_stuff_gre6sec3_iran(
                private_ip_private,
                local_ip_private,
                remote_ip_private,
                is_gre6=False,
            )
            save_stuff_gre6sec3_iran(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            update_ipsec_ip_multi3(private_ip_gre6)
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Please select a valid option.")


# changes # 4
def update_ipfile_gre64(name, new_ip, update_type):
    try:
        with open(name, "r") as f:
            content = f.read()

        if update_type == "private":
            new_content = re.sub(
                r"ip (-6 )?addr add [^ ]+/64 dev azumi?",
                f"ip -6 addr add {new_ip}/64 dev azumi",
                content,
            )
            ip_parts = new_ip.split(":")
            if new_ip.endswith(":2"):
                ip_parts[-1] = "1"
            else:
                ip_parts[-1] = "2"
            counterpart_ip = ":".join(ip_parts)
            new_content = re.sub(
                r"ip (-6 )?route add [^ ]+/64 dev azumi?",
                f"ip -6 route add {counterpart_ip}/64 dev azumi",
                new_content,
            )
            update_ipfile_gre64("/etc/gre64.sh", new_ip, update_type="gre6_local")
            update_ipfile_gre64(
                "/etc/gre64.sh", counterpart_ip, update_type="gre6_remote"
            )
        elif update_type == "local":
            new_content = re.sub(r"local \S+", f"local {new_ip}", content)
        elif update_type == "remote":
            new_content = re.sub(r"remote \S+", f"remote {new_ip}", content)
        elif update_type == "gre6_local":
            new_content = re.sub(r"local \S+", f"local {new_ip}", content)
        elif update_type == "gre6_remote":
            new_content = re.sub(r"remote \S+", f"remote {new_ip}", content)
        elif update_type == "ipsec":
            new_content = re.sub(r"leftsubnet=\S+", f"leftsubnet={new_ip}/64", content)
            new_content = re.sub(r"leftid=\S+", f"leftid={new_ip}", new_content)

            ip_parts = new_ip.split(":")
            if new_ip.endswith(":1"):
                ip_parts[-1] = "2"
            else:
                ip_parts[-1] = "1"
            counterpart_ip = ":".join(ip_parts)
            new_content = re.sub(r"right=\S+", f"right={counterpart_ip}", new_content)
            new_content = re.sub(
                r"rightsubnet=\S+",
                f"rightsubnet={counterpart_ip}/64",
                new_content,
            )

        with open(name, "w") as f:
            f.write(new_content)
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def get_current_private_ipsgre64():
    private_ip_private = private_ip1("/etc/private4.sh")
    private_ip_gre6 = private_gre6multi("/etc/gre64.sh")
    return {
        "private": private_ip_private,
        "gre6": private_ip_gre6,
    }


def save_stuff_gre6sec4(private_ip, local_ip, remote_ip, is_gre6):
    current_ips = get_current_private_ipsgre64()
    current_ip = current_ips["gre6"] if is_gre6 else current_ips["private"]

    if current_ip:
        delete_ufw_rules(current_ip)

    add_ufw_rules(private_ip)

    counterpart_ip = wtb_opposite_ip(private_ip)
    try:
        if is_gre6:
            update_pingfile_sit("/etc/ping_ip4.sh", counterpart_ip)
            update_ipfile_gre64("/etc/gre64.sh", private_ip, update_type="private")
            update_ipfile_gre64("/etc/gre64.sh", remote_ip, update_type="remote")
            update_ipfile_gre64("/etc/ipsec1.conf", private_ip, update_type="ipsec")
        else:
            update_pingfile_sit("/etc/ping_v64.sh", counterpart_ip)
            update_ipfile_gre64("/etc/private4.sh", private_ip, update_type="private")
            update_ipfile_gre64("/etc/private4.sh", local_ip, update_type="local")
            update_ipfile_gre64("/etc/private4.sh", remote_ip, update_type="remote")

        interface = "azumig64" if is_gre6 else "azumi4"
        subprocess.run(["ip", "link", "set", "dev", interface, "down"], check=True)
        subprocess.run(["ip", "link", "delete", interface], check=True)
    except subprocess.CalledProcessError as e:
        print("\033[91merror bringing interface down or deleting it\033[0m")

    try:
        script = "/etc/gre64.sh" if is_gre6 else "/etc/private4.sh"
        result = subprocess.run(["/bin/bash", script], capture_output=True, text=True)
        if "RTNETLINK answers: File exists" in result.stderr:
            print("\033[91madditional ip already exists. Ignoring this error\033[0m")
        else:
            result.check_returncode()
        display_checkmark(
            f"\033[92mChanges saved and {interface} interface updated successfully!\033[0m"
        )

        subprocess.run(["sudo", "systemctl", "daemon-reload"], check=True)
        subprocess.run(["sudo", "systemctl", "restart", "ping_v64"], check=True)
        subprocess.run(["sudo", "systemctl", "restart", "ping_ip4"], check=True)
        subprocess.run(["sudo", "systemctl", "restart", "strong-azumi1"], check=True)

        result = subprocess.run(
            [
                "systemctl",
                "list-units",
                "--full",
                "--all",
                "strong-azumi1.service",
            ],
            capture_output=True,
            text=True,
        )
        if "strong-azumi1.service" in result.stdout:
            subprocess.run(
                ["sudo", "systemctl", "restart", "strong-azumi1"], check=True
            )
        else:
            print("\033[91mstrongswan service not found, don't mind this error.\033[0m")

    except subprocess.CalledProcessError as e:
        print(f"\033[91merror applying network changes: gre6 related error\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")
    # animate("\033[92mSystem services reloaded and restarted successfully!\033[0m")


def update_ipsec_conf_irangre64(name, new_private_ip):
    try:
        with open(name, "r") as f:
            content = f.readlines()

        start_idx, end_idx = None, None
        for i, line in enumerate(content):
            if line.strip() == "conn GRE64":
                start_idx = i
            elif start_idx is not None and line.strip().startswith("conn "):
                end_idx = i
                break

        if start_idx is None:
            print("\033[91m'conn GRE64' section not found\033[0m")
            return

        if end_idx is None:
            end_idx = len(content)

        section = content[start_idx:end_idx]
        ip_parts = new_private_ip.split(":")
        if new_private_ip.endswith(":2"):
            ip_parts[-1] = "1"
        else:
            ip_parts[-1] = "2"
        counterpart_ip = ":".join(ip_parts)

        new_section = []
        for line in section:
            line = re.sub(r"leftsubnet=\S+", f"leftsubnet={new_private_ip}/64", line)
            line = re.sub(r"leftid=\S+", f"leftid={new_private_ip}", line)
            line = re.sub(r"right=\S+", f"right={counterpart_ip}", line)
            line = re.sub(r"rightsubnet=\S+", f"rightsubnet={counterpart_ip}/64", line)
            new_section.append(line)

        new_content = content[:start_idx] + new_section + content[end_idx:]

        with open(name, "w") as f:
            f.writelines(new_content)

        print(f"\033[92m'conn GRE64' section updated successfully\033[0m")
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:

        print(f"\033[91mout of ordinary error: {e}\033[0m")


def save_stuff_gre6sec4_iran(private_ip, local_ip, remote_ip, is_gre6):
    current_ips = get_current_private_ipsgre64()
    current_ip = current_ips["gre6"] if is_gre6 else current_ips["private"]

    if current_ip:
        delete_ufw_rules(current_ip)

    add_ufw_rules(private_ip)

    counterpart_ip = wtb_opposite_ip(private_ip)
    try:
        if is_gre6:
            update_pingfile_sit("/etc/ping_ip4.sh", counterpart_ip)
            update_ipfile_gre64("/etc/gre64.sh", private_ip, update_type="private")
            update_ipfile_gre64("/etc/gre64.sh", remote_ip, update_type="remote")
            update_ipsec_conf_irangre64("/etc/ipsec1.conf", private_ip)
        else:
            update_pingfile_sit("/etc/ping_v64.sh", counterpart_ip)
            update_ipfile_gre64("/etc/private4.sh", private_ip, update_type="private")
            update_ipfile_gre64("/etc/private4.sh", local_ip, update_type="local")
            update_ipfile_gre64("/etc/private4.sh", remote_ip, update_type="remote")

        interface = "azumig64" if is_gre6 else "azumi4"
        subprocess.run(["ip", "link", "set", "dev", interface, "down"], check=True)
        subprocess.run(["ip", "link", "delete", interface], check=True)
    except subprocess.CalledProcessError as e:
        print("\033[91merror bringing interface down or deleting it\033[0m")

    try:
        script = "/etc/gre64.sh" if is_gre6 else "/etc/private4.sh"
        result = subprocess.run(["/bin/bash", script], capture_output=True, text=True)
        if "RTNETLINK answers: File exists" in result.stderr:
            print("\033[91madditional ip already exists. Ignoring this error\033[0m")
        else:
            result.check_returncode()
        display_checkmark(
            f"\033[92mChanges saved and {interface} interface updated successfully!\033[0m"
        )

        subprocess.run(["sudo", "systemctl", "daemon-reload"], check=True)
        subprocess.run(["sudo", "systemctl", "restart", "ping_v64"], check=True)
        subprocess.run(["sudo", "systemctl", "restart", "ping_ip4"], check=True)
        subprocess.run(["sudo", "systemctl", "restart", "strong-azumi1"], check=True)

        result = subprocess.run(
            [
                "systemctl",
                "list-units",
                "--full",
                "--all",
                "strong-azumi1.service",
            ],
            capture_output=True,
            text=True,
        )
        if "strong-azumi1.service" in result.stdout:
            subprocess.run(
                ["sudo", "systemctl", "restart", "strong-azumi1"], check=True
            )
        else:
            print("\033[91mstrongswan service not found, don't mind this error.\033[0m")

    except subprocess.CalledProcessError as e:
        print(f"\033[91merror applying network changes: gre6 related error\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")
    # animate("\033[92mSystem services reloaded and restarted successfully!\033[0m")


def gre6kharej4sec_editmulti_local():
    local_ip_private = local_ip("/etc/private4.sh")
    remote_ip_private = remote_ip("/etc/private4.sh")
    private_ip_private = private_ip1("/etc/private4.sh")

    local_ip_gre6 = local_ip("/etc/gre64.sh")
    remote_ip_gre6 = remote_ip("/etc/gre64.sh")
    private_ip_gre6 = private_gre6multi("/etc/gre64.sh")

    ipsecsecret = get_ipsecsecret("/etc/ipsec.secrets")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("couldn't retrieve IP addresses from private file")
    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("couldn't retrieve IP addresses from gre6 file")
    if not ipsecsecret:
        print("couldn't retrieve IPsec secret key from ipsec file")

    if (
        not local_ip_private
        or not remote_ip_private
        or not private_ip_private
        or not local_ip_gre6
        or not remote_ip_gre6
        or not private_ip_gre6
        or not ipsecsecret
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_privatekharej4(
            local_ip_private, remote_ip_private, private_ip_private
        )
        display_stuff_gre6(local_ip_gre6, remote_ip_gre6, private_ip_gre6)

        display_ipsecsecret(ipsecsecret)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mGRE6 + IPSEC\033[93m Kharej [4] Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej [4] \033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mIRAN \033[92m Public IP\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[93mChange \033[97mGRE6 \033[93mPrivate IPV6\033[0m")
        print("5. \033[93mChange IPSEC \033[92mSecret Key\033[0m")
        print("6. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_private = new_ip
                ip_parts = new_ip.split(":")
                if new_ip.endswith(":2"):
                    ip_parts[-1] = "1"
                else:
                    ip_parts[-1] = "2"
                counterpart_ip = ":".join(ip_parts)
                local_ip_gre6 = new_ip
                remote_ip_gre6 = counterpart_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[GRE6]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_gre6
                private_ip_gre6 = new_ip

                update_ipfile_gre64("/etc/ipsec1.conf", new_ip, update_type="ipsec")
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mKharej [4]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input("\033[93mEnter \033[92mIRAN\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "5":
            new_key = input(
                "\033[93mEnter new \033[92mIPsec \033[93mSecret Key: \033[0m"
            )
            if new_key:
                update_ipsecsecret("/etc/ipsec.secrets", new_key)
                ipsecsecret = new_key
            else:
                print("\033[91mCrazy Secret Key\033[0m")
        elif choice == "6":
            save_stuff_gre6sec4(
                private_ip_private,
                local_ip_private,
                remote_ip_private,
                is_gre6=False,
            )
            save_stuff_gre6sec4(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            update_ipsec_ip(private_ip_gre6)
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Please select a valid option.")


def gre6ir4sec_editmulti_local():
    local_ip_private = local_ip("/etc/private4.sh")
    remote_ip_private = remote_ip("/etc/private4.sh")
    private_ip_private = private_ip1("/etc/private4.sh")

    local_ip_gre6 = local_ip("/etc/gre64.sh")
    remote_ip_gre6 = remote_ip("/etc/gre64.sh")
    private_ip_gre6 = private_gre6multi("/etc/gre64.sh")

    ipsecsecret = get_ipsecsecret("/etc/ipsec.secrets")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("couldn't retrieve IP addresses from private file")
    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("couldn't retrieve IP addresses from gre6 file")
    if not ipsecsecret:
        print("couldn't retrieve IPsec secret key from ipsec file")

    if (
        not local_ip_private
        or not remote_ip_private
        or not private_ip_private
        or not local_ip_gre6
        or not remote_ip_gre6
        or not private_ip_gre6
        or not ipsecsecret
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_privateiran4(
            local_ip_private, remote_ip_private, private_ip_private
        )
        display_stuff_gre6(local_ip_gre6, remote_ip_gre6, private_ip_gre6)

        display_ipsecsecret(ipsecsecret)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mGRE6 + IPSEC\033[93m IRAN Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN \033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mKharej [4] \033[92m Public IP\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[93mChange \033[97mGRE6 \033[93mPrivate IPV6\033[0m")
        print("5. \033[93mChange IPSEC \033[92mSecret Key\033[0m")
        print("6. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter new private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_private = new_ip
                ip_parts = new_ip.split(":")
                if new_ip.endswith(":2"):
                    ip_parts[-1] = "1"
                else:
                    ip_parts[-1] = "2"
                counterpart_ip = ":".join(ip_parts)
                local_ip_gre6 = new_ip
                remote_ip_gre6 = counterpart_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter new private IPv6 address \033[96m[GRE6]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_gre6
                private_ip_gre6 = new_ip

                update_ipsec_conf_irangre64("/etc/ipsec1.conf", new_ip)
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mIRAN\033[93m Public IP :\033[0m ")
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mKharej [4]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "5":
            new_key = input(
                "\033[93mEnter new \033[92mIPsec \033[93mSecret Key: \033[0m"
            )
            if new_key:
                update_ipsecsecret("/etc/ipsec.secrets", new_key)
                ipsecsecret = new_key
            else:
                print("\033[91mCrazy Secret Key\033[0m")
        elif choice == "6":
            save_stuff_gre6sec4_iran(
                private_ip_private,
                local_ip_private,
                remote_ip_private,
                is_gre6=False,
            )
            save_stuff_gre6sec4_iran(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            update_ipsec_ip_multi4(private_ip_gre6)
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Please select a valid option.")


# changes # 5
def update_ipfile_gre65(name, new_ip, update_type):
    try:
        with open(name, "r") as f:
            content = f.read()

        if update_type == "private":
            new_content = re.sub(
                r"ip (-6 )?addr add [^ ]+/64 dev azumi?",
                f"ip -6 addr add {new_ip}/64 dev azumi",
                content,
            )
            ip_parts = new_ip.split(":")
            if new_ip.endswith(":2"):
                ip_parts[-1] = "1"
            else:
                ip_parts[-1] = "2"
            counterpart_ip = ":".join(ip_parts)
            new_content = re.sub(
                r"ip (-6 )?route add [^ ]+/64 dev azumi?",
                f"ip -6 route add {counterpart_ip}/64 dev azumi",
                new_content,
            )
            update_ipfile_gre65("/etc/gre65.sh", new_ip, update_type="gre6_local")
            update_ipfile_gre65(
                "/etc/gre65.sh", counterpart_ip, update_type="gre6_remote"
            )
        elif update_type == "local":
            new_content = re.sub(r"local \S+", f"local {new_ip}", content)
        elif update_type == "remote":
            new_content = re.sub(r"remote \S+", f"remote {new_ip}", content)
        elif update_type == "gre6_local":
            new_content = re.sub(r"local \S+", f"local {new_ip}", content)
        elif update_type == "gre6_remote":
            new_content = re.sub(r"remote \S+", f"remote {new_ip}", content)
        elif update_type == "ipsec":
            new_content = re.sub(r"leftsubnet=\S+", f"leftsubnet={new_ip}/64", content)
            new_content = re.sub(r"leftid=\S+", f"leftid={new_ip}", new_content)

            ip_parts = new_ip.split(":")
            if new_ip.endswith(":1"):
                ip_parts[-1] = "2"
            else:
                ip_parts[-1] = "1"
            counterpart_ip = ":".join(ip_parts)
            new_content = re.sub(r"right=\S+", f"right={counterpart_ip}", new_content)
            new_content = re.sub(
                r"rightsubnet=\S+",
                f"rightsubnet={counterpart_ip}/64",
                new_content,
            )

        with open(name, "w") as f:
            f.write(new_content)
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def get_current_private_ipsgre65():
    private_ip_private = private_ip1("/etc/private5.sh")
    private_ip_gre6 = private_gre6multi("/etc/gre65.sh")
    return {
        "private": private_ip_private,
        "gre6": private_ip_gre6,
    }


def save_stuff_gre6sec5(private_ip, local_ip, remote_ip, is_gre6):
    current_ips = get_current_private_ipsgre65()
    current_ip = current_ips["gre6"] if is_gre6 else current_ips["private"]

    if current_ip:
        delete_ufw_rules(current_ip)

    add_ufw_rules(private_ip)

    counterpart_ip = wtb_opposite_ip(private_ip)
    try:
        if is_gre6:
            update_pingfile_sit("/etc/ping_ip5.sh", counterpart_ip)
            update_ipfile_gre65("/etc/gre65.sh", private_ip, update_type="private")
            update_ipfile_gre65("/etc/gre65.sh", remote_ip, update_type="remote")
            update_ipfile_gre65("/etc/ipsec1.conf", private_ip, update_type="ipsec")
        else:
            update_pingfile_sit("/etc/ping_v65.sh", counterpart_ip)
            update_ipfile_gre65("/etc/private5.sh", private_ip, update_type="private")
            update_ipfile_gre65("/etc/private5.sh", local_ip, update_type="local")
            update_ipfile_gre65("/etc/private5.sh", remote_ip, update_type="remote")

        interface = "azumig65" if is_gre6 else "azumi5"
        subprocess.run(["ip", "link", "set", "dev", interface, "down"], check=True)
        subprocess.run(["ip", "link", "delete", interface], check=True)
    except subprocess.CalledProcessError as e:
        print("\033[91merror bringing interface down or deleting it\033[0m")

    try:
        script = "/etc/gre65.sh" if is_gre6 else "/etc/private5.sh"
        result = subprocess.run(["/bin/bash", script], capture_output=True, text=True)
        if "RTNETLINK answers: File exists" in result.stderr:
            print("\033[91madditional ip already exists. Ignoring this error\033[0m")
        else:
            result.check_returncode()
        display_checkmark(
            f"\033[92mChanges saved and {interface} interface updated successfully!\033[0m"
        )

        subprocess.run(["sudo", "systemctl", "daemon-reload"], check=True)
        subprocess.run(["sudo", "systemctl", "restart", "ping_v65"], check=True)
        subprocess.run(["sudo", "systemctl", "restart", "ping_ip5"], check=True)
        subprocess.run(["sudo", "systemctl", "restart", "strong-azumi1"], check=True)

        result = subprocess.run(
            [
                "systemctl",
                "list-units",
                "--full",
                "--all",
                "strong-azumi1.service",
            ],
            capture_output=True,
            text=True,
        )
        if "strong-azumi1.service" in result.stdout:
            subprocess.run(
                ["sudo", "systemctl", "restart", "strong-azumi1"], check=True
            )
        else:
            print("\033[91mstrongswan service not found, don't mind this error.\033[0m")

    except subprocess.CalledProcessError as e:
        print(f"\033[91merror applying network changes: gre6 related error\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")
    # animate("\033[92mSystem services reloaded and restarted successfully!\033[0m")


def update_ipsec_conf_irangre65(name, new_private_ip):
    try:
        with open(name, "r") as f:
            content = f.readlines()

        start_idx, end_idx = None, None
        for i, line in enumerate(content):
            if line.strip() == "conn GRE65":
                start_idx = i
            elif start_idx is not None and line.strip().startswith("conn "):
                end_idx = i
                break

        if start_idx is None:
            print("\033[91m'conn GRE65' section not found\033[0m")
            return

        if end_idx is None:
            end_idx = len(content)

        section = content[start_idx:end_idx]
        ip_parts = new_private_ip.split(":")
        if new_private_ip.endswith(":2"):
            ip_parts[-1] = "1"
        else:
            ip_parts[-1] = "2"
        counterpart_ip = ":".join(ip_parts)

        new_section = []
        for line in section:
            line = re.sub(r"leftsubnet=\S+", f"leftsubnet={new_private_ip}/64", line)
            line = re.sub(r"leftid=\S+", f"leftid={new_private_ip}", line)
            line = re.sub(r"right=\S+", f"right={counterpart_ip}", line)
            line = re.sub(r"rightsubnet=\S+", f"rightsubnet={counterpart_ip}/64", line)
            new_section.append(line)

        new_content = content[:start_idx] + new_section + content[end_idx:]

        with open(name, "w") as f:
            f.writelines(new_content)

        print(f"\033[92m'conn GRE65' section updated successfully\033[0m")
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:

        print(f"\033[91mout of ordinary error: {e}\033[0m")


def save_stuff_gre6sec5_iran(private_ip, local_ip, remote_ip, is_gre6):
    current_ips = get_current_private_ipsgre65()
    current_ip = current_ips["gre6"] if is_gre6 else current_ips["private"]

    if current_ip:
        delete_ufw_rules(current_ip)

    add_ufw_rules(private_ip)

    counterpart_ip = wtb_opposite_ip(private_ip)
    try:
        if is_gre6:
            update_pingfile_sit("/etc/ping_ip5.sh", counterpart_ip)
            update_ipfile_gre65("/etc/gre65.sh", private_ip, update_type="private")
            update_ipfile_gre65("/etc/gre65.sh", remote_ip, update_type="remote")
            update_ipsec_conf_irangre65("/etc/ipsec1.conf", private_ip)
        else:
            update_pingfile_sit("/etc/ping_v65.sh", counterpart_ip)
            update_ipfile_gre65("/etc/private5.sh", private_ip, update_type="private")
            update_ipfile_gre65("/etc/private5.sh", local_ip, update_type="local")
            update_ipfile_gre65("/etc/private5.sh", remote_ip, update_type="remote")

        interface = "azumig65" if is_gre6 else "azumi5"
        subprocess.run(["ip", "link", "set", "dev", interface, "down"], check=True)
        subprocess.run(["ip", "link", "delete", interface], check=True)
    except subprocess.CalledProcessError as e:
        print("\033[91merror bringing interface down or deleting it\033[0m")

    try:
        script = "/etc/gre65.sh" if is_gre6 else "/etc/private5.sh"
        result = subprocess.run(["/bin/bash", script], capture_output=True, text=True)
        if "RTNETLINK answers: File exists" in result.stderr:
            print("\033[91madditional ip already exists. Ignoring this error\033[0m")
        else:
            result.check_returncode()
        display_checkmark(
            f"\033[92mChanges saved and {interface} interface updated successfully!\033[0m"
        )

        subprocess.run(["sudo", "systemctl", "daemon-reload"], check=True)
        subprocess.run(["sudo", "systemctl", "restart", "ping_v65"], check=True)
        subprocess.run(["sudo", "systemctl", "restart", "ping_ip5"], check=True)
        subprocess.run(["sudo", "systemctl", "restart", "strong-azumi1"], check=True)

        result = subprocess.run(
            [
                "systemctl",
                "list-units",
                "--full",
                "--all",
                "strong-azumi1.service",
            ],
            capture_output=True,
            text=True,
        )
        if "strong-azumi1.service" in result.stdout:
            subprocess.run(
                ["sudo", "systemctl", "restart", "strong-azumi1"], check=True
            )
        else:
            print("\033[91mstrongswan service not found, don't mind this error.\033[0m")

    except subprocess.CalledProcessError as e:
        print(f"\033[91merror applying network changes: gre6 related error\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")
    # animate("\033[92mSystem services reloaded and restarted successfully!\033[0m")


def gre6kharej5sec_editmulti_local():
    local_ip_private = local_ip("/etc/private5.sh")
    remote_ip_private = remote_ip("/etc/private5.sh")
    private_ip_private = private_ip1("/etc/private5.sh")

    local_ip_gre6 = local_ip("/etc/gre65.sh")
    remote_ip_gre6 = remote_ip("/etc/gre65.sh")
    private_ip_gre6 = private_gre6multi("/etc/gre65.sh")

    ipsecsecret = get_ipsecsecret("/etc/ipsec.secrets")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("couldn't retrieve IP addresses from private file")
    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("couldn't retrieve IP addresses from gre6 file")
    if not ipsecsecret:
        print("couldn't retrieve IPsec secret key from ipsec file")

    if (
        not local_ip_private
        or not remote_ip_private
        or not private_ip_private
        or not local_ip_gre6
        or not remote_ip_gre6
        or not private_ip_gre6
        or not ipsecsecret
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_privatekharej5(
            local_ip_private, remote_ip_private, private_ip_private
        )
        display_stuff_gre6(local_ip_gre6, remote_ip_gre6, private_ip_gre6)

        display_ipsecsecret(ipsecsecret)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mGRE6 + IPSEC\033[93m Kharej [5] Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej [5] \033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mIRAN \033[92m Public IP\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[93mChange \033[97mGRE6 \033[93mPrivate IPV6\033[0m")
        print("5. \033[93mChange IPSEC \033[92mSecret Key\033[0m")
        print("6. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_private = new_ip
                ip_parts = new_ip.split(":")
                if new_ip.endswith(":2"):
                    ip_parts[-1] = "1"
                else:
                    ip_parts[-1] = "2"
                counterpart_ip = ":".join(ip_parts)
                local_ip_gre6 = new_ip
                remote_ip_gre6 = counterpart_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[GRE6]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_gre6
                private_ip_gre6 = new_ip

                update_ipfile_gre65("/etc/ipsec1.conf", new_ip, update_type="ipsec")
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mKharej [5]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input("\033[93mEnter \033[92mIRAN\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "5":
            new_key = input(
                "\033[93mEnter new \033[92mIPsec \033[93mSecret Key: \033[0m"
            )
            if new_key:
                update_ipsecsecret("/etc/ipsec.secrets", new_key)
                ipsecsecret = new_key
            else:
                print("\033[91mCrazy Secret Key\033[0m")
        elif choice == "6":
            save_stuff_gre6sec5(
                private_ip_private,
                local_ip_private,
                remote_ip_private,
                is_gre6=False,
            )
            save_stuff_gre6sec5(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            update_ipsec_ip(private_ip_gre6)
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Please select a valid option.")


def gre6ir5sec_editmulti_local():
    local_ip_private = local_ip("/etc/private5.sh")
    remote_ip_private = remote_ip("/etc/private5.sh")
    private_ip_private = private_ip1("/etc/private5.sh")

    local_ip_gre6 = local_ip("/etc/gre65.sh")
    remote_ip_gre6 = remote_ip("/etc/gre65.sh")
    private_ip_gre6 = private_gre6multi("/etc/gre65.sh")

    ipsecsecret = get_ipsecsecret("/etc/ipsec.secrets")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("couldn't retrieve IP addresses from private file")
    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("couldn't retrieve IP addresses from gre6 file")
    if not ipsecsecret:
        print("couldn't retrieve IPsec secret key from ipsec file")

    if (
        not local_ip_private
        or not remote_ip_private
        or not private_ip_private
        or not local_ip_gre6
        or not remote_ip_gre6
        or not private_ip_gre6
        or not ipsecsecret
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_privateiran5(
            local_ip_private, remote_ip_private, private_ip_private
        )
        display_stuff_gre6(local_ip_gre6, remote_ip_gre6, private_ip_gre6)

        display_ipsecsecret(ipsecsecret)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mGRE6 + IPSEC\033[93m IRAN Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN \033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mKharej [5] \033[92m Public IP\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[93mChange \033[97mGRE6 \033[93mPrivate IPV6\033[0m")
        print("5. \033[93mChange IPSEC \033[92mSecret Key\033[0m")
        print("6. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter new private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_private = new_ip
                ip_parts = new_ip.split(":")
                if new_ip.endswith(":2"):
                    ip_parts[-1] = "1"
                else:
                    ip_parts[-1] = "2"
                counterpart_ip = ":".join(ip_parts)
                local_ip_gre6 = new_ip
                remote_ip_gre6 = counterpart_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter new private IPv6 address \033[96m[GRE6]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_gre6
                private_ip_gre6 = new_ip

                update_ipsec_conf_irangre65("/etc/ipsec1.conf", new_ip)
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mIRAN\033[93m Public IP :\033[0m ")
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mKharej [5]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "5":
            new_key = input(
                "\033[93mEnter new \033[92mIPsec \033[93mSecret Key: \033[0m"
            )
            if new_key:
                update_ipsecsecret("/etc/ipsec.secrets", new_key)
                ipsecsecret = new_key
            else:
                print("\033[91mCrazy Secret Key\033[0m")
        elif choice == "6":
            save_stuff_gre6sec5_iran(
                private_ip_private,
                local_ip_private,
                remote_ip_private,
                is_gre6=False,
            )
            save_stuff_gre6sec5_iran(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            update_ipsec_ip_multi5(private_ip_gre6)
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Please select a valid option.")


# gre6sec 5 iran 1 kharej


def gre6iranfive1sec_editmulti_local():
    local_ip_private = local_ip("/etc/private1.sh")
    remote_ip_private = remote_ip("/etc/private1.sh")
    private_ip_private = private_ip1("/etc/private1.sh")

    local_ip_gre6 = local_ip("/etc/gre61.sh")
    remote_ip_gre6 = remote_ip("/etc/gre61.sh")
    private_ip_gre6 = private_gre6multi("/etc/gre61.sh")

    ipsecsecret = get_ipsecsecret("/etc/ipsec.secrets")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("couldn't retrieve IP addresses from private file")
    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("couldn't retrieve IP addresses from gre6 file")
    if not ipsecsecret:
        print("couldn't retrieve IPsec secret key from ipsec file")

    if (
        not local_ip_private
        or not remote_ip_private
        or not private_ip_private
        or not local_ip_gre6
        or not remote_ip_gre6
        or not private_ip_gre6
        or not ipsecsecret
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_privateiranfive1(
            local_ip_private, remote_ip_private, private_ip_private
        )
        display_stuff_gre6(local_ip_gre6, remote_ip_gre6, private_ip_gre6)

        display_ipsecsecret(ipsecsecret)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mGRE6 + IPSEC\033[93m IRAN [1] Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN [1] \033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mKharej \033[92m Public IP\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[93mChange \033[97mGRE6 \033[93mPrivate IPV6\033[0m")
        print("5. \033[93mChange IPSEC \033[92mSecret Key\033[0m")
        print("6. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_private = new_ip
                ip_parts = new_ip.split(":")
                if new_ip.endswith(":2"):
                    ip_parts[-1] = "1"
                else:
                    ip_parts[-1] = "2"
                counterpart_ip = ":".join(ip_parts)
                local_ip_gre6 = new_ip
                remote_ip_gre6 = counterpart_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[GRE6]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_gre6
                private_ip_gre6 = new_ip

                update_ipfile_gre61("/etc/ipsec1.conf", new_ip, update_type="ipsec")
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mIRAN [1]\033[93m Public IP :\033[0m ")
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input("\033[93mEnter \033[92mKharej\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "5":
            new_key = input(
                "\033[93mEnter new \033[92mIPsec \033[93mSecret Key: \033[0m"
            )
            if new_key:
                update_ipsecsecret("/etc/ipsec.secrets", new_key)
                ipsecsecret = new_key
            else:
                print("\033[91mCrazy Secret Key\033[0m")
        elif choice == "6":
            save_stuff_gre6sec1(
                private_ip_private,
                local_ip_private,
                remote_ip_private,
                is_gre6=False,
            )
            save_stuff_gre6sec1(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            update_ipsec_ip(private_ip_gre6)
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Please select a valid option.")


def gre6kharejone1sec_editmulti_local():
    local_ip_private = local_ip("/etc/private1.sh")
    remote_ip_private = remote_ip("/etc/private1.sh")
    private_ip_private = private_ip1("/etc/private1.sh")

    local_ip_gre6 = local_ip("/etc/gre61.sh")
    remote_ip_gre6 = remote_ip("/etc/gre61.sh")
    private_ip_gre6 = private_gre6multi("/etc/gre61.sh")

    ipsecsecret = get_ipsecsecret("/etc/ipsec.secrets")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("couldn't retrieve IP addresses from private file")
    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("couldn't retrieve IP addresses from gre6 file")
    if not ipsecsecret:
        print("couldn't retrieve IPsec secret key from ipsec file")

    if (
        not local_ip_private
        or not remote_ip_private
        or not private_ip_private
        or not local_ip_gre6
        or not remote_ip_gre6
        or not private_ip_gre6
        or not ipsecsecret
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_privatekharejone1(
            local_ip_private, remote_ip_private, private_ip_private
        )
        display_stuff_gre6(local_ip_gre6, remote_ip_gre6, private_ip_gre6)

        display_ipsecsecret(ipsecsecret)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mGRE6 + IPSEC\033[93m Kharej Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej \033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mIRAN [1] \033[92m Public IP\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[93mChange \033[97mGRE6 \033[93mPrivate IPV6\033[0m")
        print("5. \033[93mChange IPSEC \033[92mSecret Key\033[0m")
        print("6. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter new private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_private = new_ip
                ip_parts = new_ip.split(":")
                if new_ip.endswith(":2"):
                    ip_parts[-1] = "1"
                else:
                    ip_parts[-1] = "2"
                counterpart_ip = ":".join(ip_parts)
                local_ip_gre6 = new_ip
                remote_ip_gre6 = counterpart_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter new private IPv6 address \033[96m[GRE6]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_gre6
                private_ip_gre6 = new_ip

                update_ipsec_conf_irangre61("/etc/ipsec1.conf", new_ip)
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mKharej\033[93m Public IP :\033[0m ")
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input("\033[93mEnter \033[92mIRAN [1]\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "5":
            new_key = input(
                "\033[93mEnter new \033[92mIPsec \033[93mSecret Key: \033[0m"
            )
            if new_key:
                update_ipsecsecret("/etc/ipsec.secrets", new_key)
                ipsecsecret = new_key
            else:
                print("\033[91mCrazy Secret Key\033[0m")
        elif choice == "6":
            save_stuff_gre6sec1_iran(
                private_ip_private,
                local_ip_private,
                remote_ip_private,
                is_gre6=False,
            )
            save_stuff_gre6sec1_iran(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            update_ipsec_ip_multi(private_ip_gre6)
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Please select a valid option.")


# gre6sec 5 iran 1 kharej #2


def gre6iranfive2sec_editmulti_local():
    local_ip_private = local_ip("/etc/private2.sh")
    remote_ip_private = remote_ip("/etc/private2.sh")
    private_ip_private = private_ip1("/etc/private2.sh")

    local_ip_gre6 = local_ip("/etc/gre62.sh")
    remote_ip_gre6 = remote_ip("/etc/gre62.sh")
    private_ip_gre6 = private_gre6multi("/etc/gre62.sh")

    ipsecsecret = get_ipsecsecret("/etc/ipsec.secrets")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("couldn't retrieve IP addresses from private file")
    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("couldn't retrieve IP addresses from gre6 file")
    if not ipsecsecret:
        print("couldn't retrieve IPsec secret key from ipsec file")

    if (
        not local_ip_private
        or not remote_ip_private
        or not private_ip_private
        or not local_ip_gre6
        or not remote_ip_gre6
        or not private_ip_gre6
        or not ipsecsecret
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_privateiranfive2(
            local_ip_private, remote_ip_private, private_ip_private
        )
        display_stuff_gre6(local_ip_gre6, remote_ip_gre6, private_ip_gre6)

        display_ipsecsecret(ipsecsecret)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mGRE6 + IPSEC\033[93m IRAN [2] Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN [2] \033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mKharej \033[92m Public IP\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[93mChange \033[97mGRE6 \033[93mPrivate IPV6\033[0m")
        print("5. \033[93mChange IPSEC \033[92mSecret Key\033[0m")
        print("6. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_private = new_ip
                ip_parts = new_ip.split(":")
                if new_ip.endswith(":2"):
                    ip_parts[-1] = "1"
                else:
                    ip_parts[-1] = "2"
                counterpart_ip = ":".join(ip_parts)
                local_ip_gre6 = new_ip
                remote_ip_gre6 = counterpart_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[GRE6]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_gre6
                private_ip_gre6 = new_ip

                update_ipfile_gre62("/etc/ipsec1.conf", new_ip, update_type="ipsec")
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mIRAN [2]\033[93m Public IP :\033[0m ")
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input("\033[93mEnter \033[92mKharej\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "5":
            new_key = input(
                "\033[93mEnter new \033[92mIPsec \033[93mSecret Key: \033[0m"
            )
            if new_key:
                update_ipsecsecret("/etc/ipsec.secrets", new_key)
                ipsecsecret = new_key
            else:
                print("\033[91mCrazy Secret Key\033[0m")
        elif choice == "6":
            save_stuff_gre6sec2(
                private_ip_private,
                local_ip_private,
                remote_ip_private,
                is_gre6=False,
            )
            save_stuff_gre6sec2(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            update_ipsec_ip(private_ip_gre6)
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Please select a valid option.")


def gre6kharejone2sec_editmulti_local():
    local_ip_private = local_ip("/etc/private2.sh")
    remote_ip_private = remote_ip("/etc/private2.sh")
    private_ip_private = private_ip1("/etc/private2.sh")

    local_ip_gre6 = local_ip("/etc/gre62.sh")
    remote_ip_gre6 = remote_ip("/etc/gre62.sh")
    private_ip_gre6 = private_gre6multi("/etc/gre62.sh")

    ipsecsecret = get_ipsecsecret("/etc/ipsec.secrets")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("couldn't retrieve IP addresses from private file")
    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("couldn't retrieve IP addresses from gre6 file")
    if not ipsecsecret:
        print("couldn't retrieve IPsec secret key from ipsec file")

    if (
        not local_ip_private
        or not remote_ip_private
        or not private_ip_private
        or not local_ip_gre6
        or not remote_ip_gre6
        or not private_ip_gre6
        or not ipsecsecret
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_privatekharejone2(
            local_ip_private, remote_ip_private, private_ip_private
        )
        display_stuff_gre6(local_ip_gre6, remote_ip_gre6, private_ip_gre6)

        display_ipsecsecret(ipsecsecret)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mGRE6 + IPSEC\033[93m Kharej Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej \033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mIRAN [2] \033[92m Public IP\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[93mChange \033[97mGRE6 \033[93mPrivate IPV6\033[0m")
        print("5. \033[93mChange IPSEC \033[92mSecret Key\033[0m")
        print("6. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter new private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_private = new_ip
                ip_parts = new_ip.split(":")
                if new_ip.endswith(":2"):
                    ip_parts[-1] = "1"
                else:
                    ip_parts[-1] = "2"
                counterpart_ip = ":".join(ip_parts)
                local_ip_gre6 = new_ip
                remote_ip_gre6 = counterpart_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter new private IPv6 address \033[96m[GRE6]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_gre6
                private_ip_gre6 = new_ip

                update_ipsec_conf_irangre62("/etc/ipsec1.conf", new_ip)
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mKharej\033[93m Public IP :\033[0m ")
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input("\033[93mEnter \033[92mIRAN [2]\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "5":
            new_key = input(
                "\033[93mEnter new \033[92mIPsec \033[93mSecret Key: \033[0m"
            )
            if new_key:
                update_ipsecsecret("/etc/ipsec.secrets", new_key)
                ipsecsecret = new_key
            else:
                print("\033[91mCrazy Secret Key\033[0m")
        elif choice == "6":
            save_stuff_gre6sec2_iran(
                private_ip_private,
                local_ip_private,
                remote_ip_private,
                is_gre6=False,
            )
            save_stuff_gre6sec2_iran(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            update_ipsec_ip_multi2(private_ip_gre6)
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Please select a valid option.")


# gre6sec 5 iran 1 kharej #3


def gre6iranfive3sec_editmulti_local():
    local_ip_private = local_ip("/etc/private3.sh")
    remote_ip_private = remote_ip("/etc/private3.sh")
    private_ip_private = private_ip1("/etc/private3.sh")

    local_ip_gre6 = local_ip("/etc/gre63.sh")
    remote_ip_gre6 = remote_ip("/etc/gre63.sh")
    private_ip_gre6 = private_gre6multi("/etc/gre63.sh")

    ipsecsecret = get_ipsecsecret("/etc/ipsec.secrets")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("couldn't retrieve IP addresses from private file")
    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("couldn't retrieve IP addresses from gre6 file")
    if not ipsecsecret:
        print("couldn't retrieve IPsec secret key from ipsec file")

    if (
        not local_ip_private
        or not remote_ip_private
        or not private_ip_private
        or not local_ip_gre6
        or not remote_ip_gre6
        or not private_ip_gre6
        or not ipsecsecret
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_privateiranfive3(
            local_ip_private, remote_ip_private, private_ip_private
        )
        display_stuff_gre6(local_ip_gre6, remote_ip_gre6, private_ip_gre6)

        display_ipsecsecret(ipsecsecret)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mGRE6 + IPSEC\033[93m IRAN [3] Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN [3] \033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mKharej \033[92m Public IP\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[93mChange \033[97mGRE6 \033[93mPrivate IPV6\033[0m")
        print("5. \033[93mChange IPSEC \033[92mSecret Key\033[0m")
        print("6. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_private = new_ip
                ip_parts = new_ip.split(":")
                if new_ip.endswith(":2"):
                    ip_parts[-1] = "1"
                else:
                    ip_parts[-1] = "2"
                counterpart_ip = ":".join(ip_parts)
                local_ip_gre6 = new_ip
                remote_ip_gre6 = counterpart_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[GRE6]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_gre6
                private_ip_gre6 = new_ip

                update_ipfile_gre63("/etc/ipsec1.conf", new_ip, update_type="ipsec")
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mIRAN [3]\033[93m Public IP :\033[0m ")
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input("\033[93mEnter \033[92mKharej\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "5":
            new_key = input(
                "\033[93mEnter new \033[92mIPsec \033[93mSecret Key: \033[0m"
            )
            if new_key:
                update_ipsecsecret("/etc/ipsec.secrets", new_key)
                ipsecsecret = new_key
            else:
                print("\033[91mCrazy Secret Key\033[0m")
        elif choice == "6":
            save_stuff_gre6sec3(
                private_ip_private,
                local_ip_private,
                remote_ip_private,
                is_gre6=False,
            )
            save_stuff_gre6sec3(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            update_ipsec_ip(private_ip_gre6)
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Please select a valid option.")


def gre6kharejone3sec_editmulti_local():
    local_ip_private = local_ip("/etc/private3.sh")
    remote_ip_private = remote_ip("/etc/private3.sh")
    private_ip_private = private_ip1("/etc/private3.sh")

    local_ip_gre6 = local_ip("/etc/gre63.sh")
    remote_ip_gre6 = remote_ip("/etc/gre63.sh")
    private_ip_gre6 = private_gre6multi("/etc/gre63.sh")

    ipsecsecret = get_ipsecsecret("/etc/ipsec.secrets")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("couldn't retrieve IP addresses from private file")
    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("couldn't retrieve IP addresses from gre6 file")
    if not ipsecsecret:
        print("couldn't retrieve IPsec secret key from ipsec file")

    if (
        not local_ip_private
        or not remote_ip_private
        or not private_ip_private
        or not local_ip_gre6
        or not remote_ip_gre6
        or not private_ip_gre6
        or not ipsecsecret
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_privatekharejone3(
            local_ip_private, remote_ip_private, private_ip_private
        )
        display_stuff_gre6(local_ip_gre6, remote_ip_gre6, private_ip_gre6)

        display_ipsecsecret(ipsecsecret)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mGRE6 + IPSEC\033[93m Kharej Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej \033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mIRAN [3] \033[92m Public IP\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[93mChange \033[97mGRE6 \033[93mPrivate IPV6\033[0m")
        print("5. \033[93mChange IPSEC \033[92mSecret Key\033[0m")
        print("6. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter new private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_private = new_ip
                ip_parts = new_ip.split(":")
                if new_ip.endswith(":2"):
                    ip_parts[-1] = "1"
                else:
                    ip_parts[-1] = "2"
                counterpart_ip = ":".join(ip_parts)
                local_ip_gre6 = new_ip
                remote_ip_gre6 = counterpart_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter new private IPv6 address \033[96m[GRE6]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_gre6
                private_ip_gre6 = new_ip

                update_ipsec_conf_irangre63("/etc/ipsec1.conf", new_ip)
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mKharej\033[93m Public IP :\033[0m ")
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input("\033[93mEnter \033[92mIRAN [3]\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "5":
            new_key = input(
                "\033[93mEnter new \033[92mIPsec \033[93mSecret Key: \033[0m"
            )
            if new_key:
                update_ipsecsecret("/etc/ipsec.secrets", new_key)
                ipsecsecret = new_key
            else:
                print("\033[91mCrazy Secret Key\033[0m")
        elif choice == "6":
            save_stuff_gre6sec3_iran(
                private_ip_private,
                local_ip_private,
                remote_ip_private,
                is_gre6=False,
            )
            save_stuff_gre6sec3_iran(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            update_ipsec_ip_multi3(private_ip_gre6)
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Please select a valid option.")


# gre6sec 5 iran 1 kharej #4


def gre6iranfive4sec_editmulti_local():
    local_ip_private = local_ip("/etc/private4.sh")
    remote_ip_private = remote_ip("/etc/private4.sh")
    private_ip_private = private_ip1("/etc/private4.sh")

    local_ip_gre6 = local_ip("/etc/gre64.sh")
    remote_ip_gre6 = remote_ip("/etc/gre64.sh")
    private_ip_gre6 = private_gre6multi("/etc/gre64.sh")

    ipsecsecret = get_ipsecsecret("/etc/ipsec.secrets")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("couldn't retrieve IP addresses from private file")
    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("couldn't retrieve IP addresses from gre6 file")
    if not ipsecsecret:
        print("couldn't retrieve IPsec secret key from ipsec file")

    if (
        not local_ip_private
        or not remote_ip_private
        or not private_ip_private
        or not local_ip_gre6
        or not remote_ip_gre6
        or not private_ip_gre6
        or not ipsecsecret
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_privateiranfive4(
            local_ip_private, remote_ip_private, private_ip_private
        )
        display_stuff_gre6(local_ip_gre6, remote_ip_gre6, private_ip_gre6)

        display_ipsecsecret(ipsecsecret)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mGRE6 + IPSEC\033[93m IRAN [4] Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN [4] \033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mKharej \033[92m Public IP\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[93mChange \033[97mGRE6 \033[93mPrivate IPV6\033[0m")
        print("5. \033[93mChange IPSEC \033[92mSecret Key\033[0m")
        print("6. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_private = new_ip
                ip_parts = new_ip.split(":")
                if new_ip.endswith(":2"):
                    ip_parts[-1] = "1"
                else:
                    ip_parts[-1] = "2"
                counterpart_ip = ":".join(ip_parts)
                local_ip_gre6 = new_ip
                remote_ip_gre6 = counterpart_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[GRE6]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_gre6
                private_ip_gre6 = new_ip

                update_ipfile_gre64("/etc/ipsec1.conf", new_ip, update_type="ipsec")
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mIRAN [4]\033[93m Public IP :\033[0m ")
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input("\033[93mEnter \033[92mKharej\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "5":
            new_key = input(
                "\033[93mEnter new \033[92mIPsec \033[93mSecret Key: \033[0m"
            )
            if new_key:
                update_ipsecsecret("/etc/ipsec.secrets", new_key)
                ipsecsecret = new_key
            else:
                print("\033[91mCrazy Secret Key\033[0m")
        elif choice == "6":
            save_stuff_gre6sec4(
                private_ip_private,
                local_ip_private,
                remote_ip_private,
                is_gre6=False,
            )
            save_stuff_gre6sec4(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            update_ipsec_ip(private_ip_gre6)
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Please select a valid option.")


def gre6kharejone4sec_editmulti_local():
    local_ip_private = local_ip("/etc/private4.sh")
    remote_ip_private = remote_ip("/etc/private4.sh")
    private_ip_private = private_ip1("/etc/private4.sh")

    local_ip_gre6 = local_ip("/etc/gre64.sh")
    remote_ip_gre6 = remote_ip("/etc/gre64.sh")
    private_ip_gre6 = private_gre6multi("/etc/gre64.sh")

    ipsecsecret = get_ipsecsecret("/etc/ipsec.secrets")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("couldn't retrieve IP addresses from private file")
    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("couldn't retrieve IP addresses from gre6 file")
    if not ipsecsecret:
        print("couldn't retrieve IPsec secret key from ipsec file")

    if (
        not local_ip_private
        or not remote_ip_private
        or not private_ip_private
        or not local_ip_gre6
        or not remote_ip_gre6
        or not private_ip_gre6
        or not ipsecsecret
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_privatekharejone4(
            local_ip_private, remote_ip_private, private_ip_private
        )
        display_stuff_gre6(local_ip_gre6, remote_ip_gre6, private_ip_gre6)

        display_ipsecsecret(ipsecsecret)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mGRE6 + IPSEC\033[93m Kharej Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej \033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mIRAN [4] \033[92m Public IP\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[93mChange \033[97mGRE6 \033[93mPrivate IPV6\033[0m")
        print("5. \033[93mChange IPSEC \033[92mSecret Key\033[0m")
        print("6. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter new private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_private = new_ip
                ip_parts = new_ip.split(":")
                if new_ip.endswith(":2"):
                    ip_parts[-1] = "1"
                else:
                    ip_parts[-1] = "2"
                counterpart_ip = ":".join(ip_parts)
                local_ip_gre6 = new_ip
                remote_ip_gre6 = counterpart_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter new private IPv6 address \033[96m[GRE6]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_gre6
                private_ip_gre6 = new_ip

                update_ipsec_conf_irangre64("/etc/ipsec1.conf", new_ip)
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mKharej\033[93m Public IP :\033[0m ")
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input("\033[93mEnter \033[92mIRAN [4]\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "5":
            new_key = input(
                "\033[93mEnter new \033[92mIPsec \033[93mSecret Key: \033[0m"
            )
            if new_key:
                update_ipsecsecret("/etc/ipsec.secrets", new_key)
                ipsecsecret = new_key
            else:
                print("\033[91mCrazy Secret Key\033[0m")
        elif choice == "6":
            save_stuff_gre6sec4_iran(
                private_ip_private,
                local_ip_private,
                remote_ip_private,
                is_gre6=False,
            )
            save_stuff_gre6sec4_iran(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            update_ipsec_ip_multi4(private_ip_gre6)
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Please select a valid option.")


# gre6sec 5 iran 1 kharej #5


def gre6iranfive5sec_editmulti_local():
    local_ip_private = local_ip("/etc/private5.sh")
    remote_ip_private = remote_ip("/etc/private5.sh")
    private_ip_private = private_ip1("/etc/private5.sh")

    local_ip_gre6 = local_ip("/etc/gre65.sh")
    remote_ip_gre6 = remote_ip("/etc/gre65.sh")
    private_ip_gre6 = private_gre6multi("/etc/gre65.sh")

    ipsecsecret = get_ipsecsecret("/etc/ipsec.secrets")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("couldn't retrieve IP addresses from private file")
    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("couldn't retrieve IP addresses from gre6 file")
    if not ipsecsecret:
        print("couldn't retrieve IPsec secret key from ipsec file")

    if (
        not local_ip_private
        or not remote_ip_private
        or not private_ip_private
        or not local_ip_gre6
        or not remote_ip_gre6
        or not private_ip_gre6
        or not ipsecsecret
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_privateiranfive5(
            local_ip_private, remote_ip_private, private_ip_private
        )
        display_stuff_gre6(local_ip_gre6, remote_ip_gre6, private_ip_gre6)

        display_ipsecsecret(ipsecsecret)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mGRE6 + IPSEC\033[93m IRAN [5] Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN [5] \033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mKharej \033[92m Public IP\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[93mChange \033[97mGRE6 \033[93mPrivate IPV6\033[0m")
        print("5. \033[93mChange IPSEC \033[92mSecret Key\033[0m")
        print("6. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_private = new_ip
                ip_parts = new_ip.split(":")
                if new_ip.endswith(":2"):
                    ip_parts[-1] = "1"
                else:
                    ip_parts[-1] = "2"
                counterpart_ip = ":".join(ip_parts)
                local_ip_gre6 = new_ip
                remote_ip_gre6 = counterpart_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[GRE6]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_gre6
                private_ip_gre6 = new_ip

                update_ipfile_gre65("/etc/ipsec1.conf", new_ip, update_type="ipsec")
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mIRAN [5]\033[93m Public IP :\033[0m ")
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input("\033[93mEnter \033[92mKharej\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "5":
            new_key = input(
                "\033[93mEnter new \033[92mIPsec \033[93mSecret Key: \033[0m"
            )
            if new_key:
                update_ipsecsecret("/etc/ipsec.secrets", new_key)
                ipsecsecret = new_key
            else:
                print("\033[91mCrazy Secret Key\033[0m")
        elif choice == "6":
            save_stuff_gre6sec5(
                private_ip_private,
                local_ip_private,
                remote_ip_private,
                is_gre6=False,
            )
            save_stuff_gre6sec5(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            update_ipsec_ip(private_ip_gre6)
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Please select a valid option.")


def gre6kharejone5sec_editmulti_local():
    local_ip_private = local_ip("/etc/private5.sh")
    remote_ip_private = remote_ip("/etc/private5.sh")
    private_ip_private = private_ip1("/etc/private5.sh")

    local_ip_gre6 = local_ip("/etc/gre65.sh")
    remote_ip_gre6 = remote_ip("/etc/gre65.sh")
    private_ip_gre6 = private_gre6multi("/etc/gre65.sh")

    ipsecsecret = get_ipsecsecret("/etc/ipsec.secrets")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("couldn't retrieve IP addresses from private file")
    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("couldn't retrieve IP addresses from gre6 file")
    if not ipsecsecret:
        print("couldn't retrieve IPsec secret key from ipsec file")

    if (
        not local_ip_private
        or not remote_ip_private
        or not private_ip_private
        or not local_ip_gre6
        or not remote_ip_gre6
        or not private_ip_gre6
        or not ipsecsecret
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_privatekharejone5(
            local_ip_private, remote_ip_private, private_ip_private
        )
        display_stuff_gre6(local_ip_gre6, remote_ip_gre6, private_ip_gre6)

        display_ipsecsecret(ipsecsecret)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mGRE6 + IPSEC\033[93m Kharej Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej \033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mIRAN [5] \033[92m Public IP\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[93mChange \033[97mGRE6 \033[93mPrivate IPV6\033[0m")
        print("5. \033[93mChange IPSEC \033[92mSecret Key\033[0m")
        print("6. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter new private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_private = new_ip
                ip_parts = new_ip.split(":")
                if new_ip.endswith(":2"):
                    ip_parts[-1] = "1"
                else:
                    ip_parts[-1] = "2"
                counterpart_ip = ":".join(ip_parts)
                local_ip_gre6 = new_ip
                remote_ip_gre6 = counterpart_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter new private IPv6 address \033[96m[GRE6]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_gre6
                private_ip_gre6 = new_ip

                update_ipsec_conf_irangre65("/etc/ipsec1.conf", new_ip)
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mKharej\033[93m Public IP :\033[0m ")
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input("\033[93mEnter \033[92mIRAN [5]\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "5":
            new_key = input(
                "\033[93mEnter new \033[92mIPsec \033[93mSecret Key: \033[0m"
            )
            if new_key:
                update_ipsecsecret("/etc/ipsec.secrets", new_key)
                ipsecsecret = new_key
            else:
                print("\033[91mCrazy Secret Key\033[0m")
        elif choice == "6":
            save_stuff_gre6sec5_iran(
                private_ip_private,
                local_ip_private,
                remote_ip_private,
                is_gre6=False,
            )
            save_stuff_gre6sec5_iran(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            update_ipsec_ip_multi5(private_ip_gre6)
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Please select a valid option.")


# gre61
def save_stuff_gre61(private_ip, local_ip, remote_ip, is_gre6):
    current_ips = get_current_private_ipsgre61()
    current_ip = current_ips["gre6"] if is_gre6 else current_ips["private"]

    if current_ip:
        delete_ufw_rules(current_ip)

    add_ufw_rules(private_ip)

    counterpart_ip = wtb_opposite_ip(private_ip)
    try:
        if is_gre6:
            update_pingfile_sit("/etc/ping_ip1.sh", counterpart_ip)
            update_ipfile_gre61("/etc/gre61.sh", private_ip, update_type="private")
            update_ipfile_gre61("/etc/gre61.sh", remote_ip, update_type="remote")
        else:
            update_pingfile_sit("/etc/ping_v61.sh", counterpart_ip)
            update_ipfile_gre61("/etc/private1.sh", private_ip, update_type="private")
            update_ipfile_gre61("/etc/private1.sh", local_ip, update_type="local")
            update_ipfile_gre61("/etc/private1.sh", remote_ip, update_type="remote")

        interface = "azumig61" if is_gre6 else "azumi1"
        subprocess.run(["ip", "link", "set", "dev", interface, "down"], check=True)
        subprocess.run(["ip", "link", "delete", interface], check=True)
    except subprocess.CalledProcessError as e:
        print(f"\033[91merror bringing interface down or deleting it: {e}\033[0m")

    try:
        script = "/etc/gre61.sh" if is_gre6 else "/etc/private1.sh"
        result = subprocess.run(["/bin/bash", script], capture_output=True, text=True)
        if "RTNETLINK answers: File exists" in result.stderr:
            print("\033[91madditional ip already exists. Ignoring this error\033[0m")
        else:
            result.check_returncode()
        display_checkmark(
            f"\033[92mChanges saved and {interface} interface updated successfully!\033[0m"
        )
        subprocess.run(["sudo", "systemctl", "daemon-reload"], check=True)
        subprocess.run(["sudo", "systemctl", "restart", "ping_v61"], check=True)
        subprocess.run(["sudo", "systemctl", "restart", "ping_ip1"], check=True)

        # display_checkmark("\033[92mSystem services reloaded and restarted successfully!\033[0m")
    except subprocess.CalledProcessError as e:
        print(f"\033[91merror applying network changes: gre6 related error\033[0m")
    except FileNotFoundError:
        print(f"\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def gre6kharej1nosec_editmulti_local():
    local_ip_private = local_ip("/etc/private1.sh")
    remote_ip_private = remote_ip("/etc/private1.sh")
    private_ip_private = private_ip1("/etc/private1.sh")

    local_ip_gre6 = local_ip("/etc/gre61.sh")
    remote_ip_gre6 = remote_ip("/etc/gre61.sh")
    private_ip_gre6 = private_gre6multi("/etc/gre61.sh")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("couldn't retrieve IP addresses from private file")
    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("couldn't retrieve IP addresses from gre6 file")

    if (
        not local_ip_private
        or not remote_ip_private
        or not private_ip_private
        or not local_ip_gre6
        or not remote_ip_gre6
        or not private_ip_gre6
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_privatekharej1(
            local_ip_private, remote_ip_private, private_ip_private
        )
        display_stuff_gre6(local_ip_gre6, remote_ip_gre6, private_ip_gre6)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mGRE6\033[93m Kharej [1] Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej [1] \033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mIRAN \033[92m Public IP\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[93mChange \033[97mGRE6 \033[93mPrivate IPV6\033[0m")
        print("5. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_private = new_ip
                ip_parts = new_ip.split(":")
                if new_ip.endswith(":2"):
                    ip_parts[-1] = "1"
                else:
                    ip_parts[-1] = "2"
                counterpart_ip = ":".join(ip_parts)
                local_ip_gre6 = new_ip
                remote_ip_gre6 = counterpart_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[GRE6]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_gre6 = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mKharej [1]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input("\033[93mEnter \033[92mIRAN\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "5":
            save_stuff_gre61(
                private_ip_private,
                local_ip_private,
                remote_ip_private,
                is_gre6=False,
            )
            save_stuff_gre61(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Invalid choice. Please select a valid option.")


def gre6ir1nosec_editmulti_local():
    local_ip_private = local_ip("/etc/private1.sh")
    remote_ip_private = remote_ip("/etc/private1.sh")
    private_ip_private = private_ip1("/etc/private1.sh")

    local_ip_gre6 = local_ip("/etc/gre61.sh")
    remote_ip_gre6 = remote_ip("/etc/gre61.sh")
    private_ip_gre6 = private_gre6multi("/etc/gre61.sh")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("couldn't retrieve IP addresses from private file")
    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("couldn't retrieve IP addresses from gre6 file")

    if (
        not local_ip_private
        or not remote_ip_private
        or not private_ip_private
        or not local_ip_gre6
        or not remote_ip_gre6
        or not private_ip_gre6
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_privateiran1(
            local_ip_private, remote_ip_private, private_ip_private
        )
        display_stuff_gre6(local_ip_gre6, remote_ip_gre6, private_ip_gre6)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mGRE6\033[93m IRAN Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN \033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mKHAREJ [1] \033[92m Public IP\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[93mChange \033[97mGRE6 \033[93mPrivate IPV6\033[0m")
        print("5. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_private = new_ip
                ip_parts = new_ip.split(":")
                if new_ip.endswith(":2"):
                    ip_parts[-1] = "1"
                else:
                    ip_parts[-1] = "2"
                counterpart_ip = ":".join(ip_parts)
                local_ip_gre6 = new_ip
                remote_ip_gre6 = counterpart_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[GRE6]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_gre6 = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mIRAN\033[93m Public IP :\033[0m ")
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mKharej [1]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "5":
            save_stuff_gre61(
                private_ip_private,
                local_ip_private,
                remote_ip_private,
                is_gre6=False,
            )
            save_stuff_gre61(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Invalid choice. Please select a valid option.")


# gre62
def save_stuff_gre62(private_ip, local_ip, remote_ip, is_gre6):
    current_ips = get_current_private_ipsgre62()
    current_ip = current_ips["gre6"] if is_gre6 else current_ips["private"]

    if current_ip:
        delete_ufw_rules(current_ip)

    add_ufw_rules(private_ip)

    counterpart_ip = wtb_opposite_ip(private_ip)
    try:
        if is_gre6:
            update_pingfile_sit("/etc/ping_ip2.sh", counterpart_ip)
            update_ipfile_gre62("/etc/gre62.sh", private_ip, update_type="private")
            update_ipfile_gre62("/etc/gre62.sh", remote_ip, update_type="remote")
        else:
            update_pingfile_sit("/etc/ping_v62.sh", counterpart_ip)
            update_ipfile_gre62("/etc/private2.sh", private_ip, update_type="private")
            update_ipfile_gre62("/etc/private2.sh", local_ip, update_type="local")
            update_ipfile_gre62("/etc/private2.sh", remote_ip, update_type="remote")

        interface = "azumig62" if is_gre6 else "azumi2"
        subprocess.run(["ip", "link", "set", "dev", interface, "down"], check=True)
        subprocess.run(["ip", "link", "delete", interface], check=True)
    except subprocess.CalledProcessError as e:
        print(f"\033[91merror bringing interface down or deleting it: {e}\033[0m")

    try:
        script = "/etc/gre62.sh" if is_gre6 else "/etc/private2.sh"
        result = subprocess.run(["/bin/bash", script], capture_output=True, text=True)
        if "RTNETLINK answers: File exists" in result.stderr:
            print("\033[91madditional ip already exists. Ignoring this error\033[0m")
        else:
            result.check_returncode()
        display_checkmark(
            f"\033[92mChanges saved and {interface} interface updated successfully!\033[0m"
        )
        subprocess.run(["sudo", "systemctl", "daemon-reload"], check=True)
        subprocess.run(["sudo", "systemctl", "restart", "ping_v62"], check=True)
        subprocess.run(["sudo", "systemctl", "restart", "ping_ip2"], check=True)

        # display_checkmark("\033[92mSystem services reloaded and restarted successfully!\033[0m")
    except subprocess.CalledProcessError as e:
        print(f"\033[91merror applying network changes: gre6 related error\033[0m")
    except FileNotFoundError:
        print(f"\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def gre6kharej2nosec_editmulti_local():
    local_ip_private = local_ip("/etc/private2.sh")
    remote_ip_private = remote_ip("/etc/private2.sh")
    private_ip_private = private_ip1("/etc/private2.sh")

    local_ip_gre6 = local_ip("/etc/gre62.sh")
    remote_ip_gre6 = remote_ip("/etc/gre62.sh")
    private_ip_gre6 = private_gre6multi("/etc/gre62.sh")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("couldn't retrieve IP addresses from private file")
    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("couldn't retrieve IP addresses from gre6 file")

    if (
        not local_ip_private
        or not remote_ip_private
        or not private_ip_private
        or not local_ip_gre6
        or not remote_ip_gre6
        or not private_ip_gre6
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_privatekharej2(
            local_ip_private, remote_ip_private, private_ip_private
        )
        display_stuff_gre6(local_ip_gre6, remote_ip_gre6, private_ip_gre6)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mGRE6\033[93m Kharej [2] Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej [2] \033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mIRAN \033[92m Public IP\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[93mChange \033[97mGRE6 \033[93mPrivate IPV6\033[0m")
        print("5. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_private = new_ip
                ip_parts = new_ip.split(":")
                if new_ip.endswith(":2"):
                    ip_parts[-1] = "1"
                else:
                    ip_parts[-1] = "2"
                counterpart_ip = ":".join(ip_parts)
                local_ip_gre6 = new_ip
                remote_ip_gre6 = counterpart_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[GRE6]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_gre6 = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mKharej [2]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input("\033[93mEnter \033[92mIRAN\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "5":
            save_stuff_gre62(
                private_ip_private,
                local_ip_private,
                remote_ip_private,
                is_gre6=False,
            )
            save_stuff_gre62(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Invalid choice. Please select a valid option.")


def gre6ir2nosec_editmulti_local():
    local_ip_private = local_ip("/etc/private2.sh")
    remote_ip_private = remote_ip("/etc/private2.sh")
    private_ip_private = private_ip1("/etc/private2.sh")

    local_ip_gre6 = local_ip("/etc/gre62.sh")
    remote_ip_gre6 = remote_ip("/etc/gre62.sh")
    private_ip_gre6 = private_gre6multi("/etc/gre62.sh")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("couldn't retrieve IP addresses from private file")
    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("couldn't retrieve IP addresses from gre6 file")

    if (
        not local_ip_private
        or not remote_ip_private
        or not private_ip_private
        or not local_ip_gre6
        or not remote_ip_gre6
        or not private_ip_gre6
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_privateiran2(
            local_ip_private, remote_ip_private, private_ip_private
        )
        display_stuff_gre6(local_ip_gre6, remote_ip_gre6, private_ip_gre6)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mGRE6\033[93m IRAN Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN \033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mKHAREJ [2] \033[92m Public IP\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[93mChange \033[97mGRE6 \033[93mPrivate IPV6\033[0m")
        print("5. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_private = new_ip
                ip_parts = new_ip.split(":")
                if new_ip.endswith(":2"):
                    ip_parts[-1] = "1"
                else:
                    ip_parts[-1] = "2"
                counterpart_ip = ":".join(ip_parts)
                local_ip_gre6 = new_ip
                remote_ip_gre6 = counterpart_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[GRE6]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_gre6 = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mIRAN\033[93m Public IP :\033[0m ")
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mKharej [2]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "5":
            save_stuff_gre62(
                private_ip_private,
                local_ip_private,
                remote_ip_private,
                is_gre6=False,
            )
            save_stuff_gre62(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Invalid choice. Please select a valid option.")


# gre63
def save_stuff_gre63(private_ip, local_ip, remote_ip, is_gre6):
    current_ips = get_current_private_ipsgre63()
    current_ip = current_ips["gre6"] if is_gre6 else current_ips["private"]

    if current_ip:
        delete_ufw_rules(current_ip)

    add_ufw_rules(private_ip)

    counterpart_ip = wtb_opposite_ip(private_ip)
    try:
        if is_gre6:
            update_pingfile_sit("/etc/ping_ip3.sh", counterpart_ip)
            update_ipfile_gre63("/etc/gre63.sh", private_ip, update_type="private")
            update_ipfile_gre63("/etc/gre63.sh", remote_ip, update_type="remote")
        else:
            update_pingfile_sit("/etc/ping_v63.sh", counterpart_ip)
            update_ipfile_gre63("/etc/private3.sh", private_ip, update_type="private")
            update_ipfile_gre63("/etc/private3.sh", local_ip, update_type="local")
            update_ipfile_gre63("/etc/private3.sh", remote_ip, update_type="remote")

        interface = "azumig63" if is_gre6 else "azumi3"
        subprocess.run(["ip", "link", "set", "dev", interface, "down"], check=True)
        subprocess.run(["ip", "link", "delete", interface], check=True)
    except subprocess.CalledProcessError as e:
        print(f"\033[91merror bringing interface down or deleting it: {e}\033[0m")

    try:
        script = "/etc/gre63.sh" if is_gre6 else "/etc/private3.sh"
        result = subprocess.run(["/bin/bash", script], capture_output=True, text=True)
        if "RTNETLINK answers: File exists" in result.stderr:
            print("\033[91madditional ip already exists. Ignoring this error\033[0m")
        else:
            result.check_returncode()
        display_checkmark(
            f"\033[92mChanges saved and {interface} interface updated successfully!\033[0m"
        )
        subprocess.run(["sudo", "systemctl", "daemon-reload"], check=True)
        subprocess.run(["sudo", "systemctl", "restart", "ping_v63"], check=True)
        subprocess.run(["sudo", "systemctl", "restart", "ping_ip3"], check=True)

        # display_checkmark("\033[92mSystem services reloaded and restarted successfully!\033[0m")
    except subprocess.CalledProcessError as e:
        print(f"\033[91merror applying network changes: gre6 related error\033[0m")
    except FileNotFoundError:
        print(f"\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def gre6kharej3nosec_editmulti_local():
    local_ip_private = local_ip("/etc/private3.sh")
    remote_ip_private = remote_ip("/etc/private3.sh")
    private_ip_private = private_ip1("/etc/private3.sh")

    local_ip_gre6 = local_ip("/etc/gre63.sh")
    remote_ip_gre6 = remote_ip("/etc/gre63.sh")
    private_ip_gre6 = private_gre6multi("/etc/gre63.sh")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("couldn't retrieve IP addresses from private file")
    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("couldn't retrieve IP addresses from gre6 file")

    if (
        not local_ip_private
        or not remote_ip_private
        or not private_ip_private
        or not local_ip_gre6
        or not remote_ip_gre6
        or not private_ip_gre6
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_privatekharej3(
            local_ip_private, remote_ip_private, private_ip_private
        )
        display_stuff_gre6(local_ip_gre6, remote_ip_gre6, private_ip_gre6)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mGRE6\033[93m Kharej [3] Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej [3] \033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mIRAN \033[92m Public IP\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[93mChange \033[97mGRE6 \033[93mPrivate IPV6\033[0m")
        print("5. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_private = new_ip
                ip_parts = new_ip.split(":")
                if new_ip.endswith(":2"):
                    ip_parts[-1] = "1"
                else:
                    ip_parts[-1] = "2"
                counterpart_ip = ":".join(ip_parts)
                local_ip_gre6 = new_ip
                remote_ip_gre6 = counterpart_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[GRE6]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_gre6 = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mKharej [3]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input("\033[93mEnter \033[92mIRAN\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "5":
            save_stuff_gre63(
                private_ip_private,
                local_ip_private,
                remote_ip_private,
                is_gre6=False,
            )
            save_stuff_gre63(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Invalid choice. Please select a valid option.")


def gre6ir3nosec_editmulti_local():
    local_ip_private = local_ip("/etc/private3.sh")
    remote_ip_private = remote_ip("/etc/private3.sh")
    private_ip_private = private_ip1("/etc/private3.sh")

    local_ip_gre6 = local_ip("/etc/gre63.sh")
    remote_ip_gre6 = remote_ip("/etc/gre63.sh")
    private_ip_gre6 = private_gre6multi("/etc/gre63.sh")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("couldn't retrieve IP addresses from private file")
    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("couldn't retrieve IP addresses from gre6 file")

    if (
        not local_ip_private
        or not remote_ip_private
        or not private_ip_private
        or not local_ip_gre6
        or not remote_ip_gre6
        or not private_ip_gre6
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_privateiran3(
            local_ip_private, remote_ip_private, private_ip_private
        )
        display_stuff_gre6(local_ip_gre6, remote_ip_gre6, private_ip_gre6)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mGRE6\033[93m IRAN Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN \033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mKHAREJ [3] \033[92m Public IP\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[93mChange \033[97mGRE6 \033[93mPrivate IPV6\033[0m")
        print("5. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_private = new_ip
                ip_parts = new_ip.split(":")
                if new_ip.endswith(":2"):
                    ip_parts[-1] = "1"
                else:
                    ip_parts[-1] = "2"
                counterpart_ip = ":".join(ip_parts)
                local_ip_gre6 = new_ip
                remote_ip_gre6 = counterpart_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[GRE6]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_gre6 = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mIRAN\033[93m Public IP :\033[0m ")
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mKharej [3]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "5":
            save_stuff_gre63(
                private_ip_private,
                local_ip_private,
                remote_ip_private,
                is_gre6=False,
            )
            save_stuff_gre63(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Invalid choice. Please select a valid option.")


# gre64
def save_stuff_gre64(private_ip, local_ip, remote_ip, is_gre6):
    current_ips = get_current_private_ipsgre64()
    current_ip = current_ips["gre6"] if is_gre6 else current_ips["private"]

    if current_ip:
        delete_ufw_rules(current_ip)

    add_ufw_rules(private_ip)

    counterpart_ip = wtb_opposite_ip(private_ip)
    try:
        if is_gre6:
            update_pingfile_sit("/etc/ping_ip4.sh", counterpart_ip)
            update_ipfile_gre64("/etc/gre64.sh", private_ip, update_type="private")
            update_ipfile_gre64("/etc/gre64.sh", remote_ip, update_type="remote")
        else:
            update_pingfile_sit("/etc/ping_v64.sh", counterpart_ip)
            update_ipfile_gre64("/etc/private4.sh", private_ip, update_type="private")
            update_ipfile_gre64("/etc/private4.sh", local_ip, update_type="local")
            update_ipfile_gre64("/etc/private4.sh", remote_ip, update_type="remote")

        interface = "azumig64" if is_gre6 else "azumi4"
        subprocess.run(["ip", "link", "set", "dev", interface, "down"], check=True)
        subprocess.run(["ip", "link", "delete", interface], check=True)
    except subprocess.CalledProcessError as e:
        print(f"\033[91merror bringing interface down or deleting it: {e}\033[0m")

    try:
        script = "/etc/gre64.sh" if is_gre6 else "/etc/private4.sh"
        result = subprocess.run(["/bin/bash", script], capture_output=True, text=True)
        if "RTNETLINK answers: File exists" in result.stderr:
            print("\033[91madditional ip already exists. Ignoring this error\033[0m")
        else:
            result.check_returncode()
        display_checkmark(
            f"\033[92mChanges saved and {interface} interface updated successfully!\033[0m"
        )
        subprocess.run(["sudo", "systemctl", "daemon-reload"], check=True)
        subprocess.run(["sudo", "systemctl", "restart", "ping_v64"], check=True)
        subprocess.run(["sudo", "systemctl", "restart", "ping_ip4"], check=True)

        # display_checkmark("\033[92mSystem services reloaded and restarted successfully!\033[0m")
    except subprocess.CalledProcessError as e:
        print(f"\033[91merror applying network changes: Gre6 related error\033[0m")
    except FileNotFoundError:
        print(f"\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def gre6kharej4nosec_editmulti_local():
    local_ip_private = local_ip("/etc/private4.sh")
    remote_ip_private = remote_ip("/etc/private4.sh")
    private_ip_private = private_ip1("/etc/private4.sh")

    local_ip_gre6 = local_ip("/etc/gre64.sh")
    remote_ip_gre6 = remote_ip("/etc/gre64.sh")
    private_ip_gre6 = private_gre6multi("/etc/gre64.sh")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("couldn't retrieve IP addresses from private file")
    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("couldn't retrieve IP addresses from gre6 file")

    if (
        not local_ip_private
        or not remote_ip_private
        or not private_ip_private
        or not local_ip_gre6
        or not remote_ip_gre6
        or not private_ip_gre6
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_privatekharej4(
            local_ip_private, remote_ip_private, private_ip_private
        )
        display_stuff_gre6(local_ip_gre6, remote_ip_gre6, private_ip_gre6)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mGRE6\033[93m Kharej [4] Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej [4] \033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mIRAN \033[92m Public IP\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[93mChange \033[97mGRE6 \033[93mPrivate IPV6\033[0m")
        print("5. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_private = new_ip
                ip_parts = new_ip.split(":")
                if new_ip.endswith(":2"):
                    ip_parts[-1] = "1"
                else:
                    ip_parts[-1] = "2"
                counterpart_ip = ":".join(ip_parts)
                local_ip_gre6 = new_ip
                remote_ip_gre6 = counterpart_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[GRE6]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_gre6 = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mKharej [4]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input("\033[93mEnter \033[92mIRAN\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "5":
            save_stuff_gre64(
                private_ip_private,
                local_ip_private,
                remote_ip_private,
                is_gre6=False,
            )
            save_stuff_gre64(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Invalid choice. Please select a valid option.")


def gre6ir4nosec_editmulti_local():
    local_ip_private = local_ip("/etc/private4.sh")
    remote_ip_private = remote_ip("/etc/private4.sh")
    private_ip_private = private_ip1("/etc/private4.sh")

    local_ip_gre6 = local_ip("/etc/gre64.sh")
    remote_ip_gre6 = remote_ip("/etc/gre64.sh")
    private_ip_gre6 = private_gre6multi("/etc/gre64.sh")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("couldn't retrieve IP addresses from private file")
    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("couldn't retrieve IP addresses from gre6 file")

    if (
        not local_ip_private
        or not remote_ip_private
        or not private_ip_private
        or not local_ip_gre6
        or not remote_ip_gre6
        or not private_ip_gre6
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_privateiran4(
            local_ip_private, remote_ip_private, private_ip_private
        )
        display_stuff_gre6(local_ip_gre6, remote_ip_gre6, private_ip_gre6)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mGRE6\033[93m IRAN Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN \033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mKHAREJ [4] \033[92m Public IP\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[93mChange \033[97mGRE6 \033[93mPrivate IPV6\033[0m")
        print("5. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_private = new_ip
                ip_parts = new_ip.split(":")
                if new_ip.endswith(":2"):
                    ip_parts[-1] = "1"
                else:
                    ip_parts[-1] = "2"
                counterpart_ip = ":".join(ip_parts)
                local_ip_gre6 = new_ip
                remote_ip_gre6 = counterpart_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[GRE6]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_gre6 = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mIRAN\033[93m Public IP :\033[0m ")
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mKharej [4]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "5":
            save_stuff_gre64(
                private_ip_private,
                local_ip_private,
                remote_ip_private,
                is_gre6=False,
            )
            save_stuff_gre64(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Invalid choice. Please select a valid option.")


# gre65
def save_stuff_gre65(private_ip, local_ip, remote_ip, is_gre6):
    current_ips = get_current_private_ipsgre65()
    current_ip = current_ips["gre6"] if is_gre6 else current_ips["private"]

    if current_ip:
        delete_ufw_rules(current_ip)

    add_ufw_rules(private_ip)

    counterpart_ip = wtb_opposite_ip(private_ip)
    try:
        if is_gre6:
            update_pingfile_sit("/etc/ping_ip5.sh", counterpart_ip)
            update_ipfile_gre65("/etc/gre65.sh", private_ip, update_type="private")
            update_ipfile_gre65("/etc/gre65.sh", remote_ip, update_type="remote")
        else:
            update_pingfile_sit("/etc/ping_v65.sh", counterpart_ip)
            update_ipfile_gre65("/etc/private5.sh", private_ip, update_type="private")
            update_ipfile_gre65("/etc/private5.sh", local_ip, update_type="local")
            update_ipfile_gre65("/etc/private5.sh", remote_ip, update_type="remote")

        interface = "azumig65" if is_gre6 else "azumi5"
        subprocess.run(["ip", "link", "set", "dev", interface, "down"], check=True)
        subprocess.run(["ip", "link", "delete", interface], check=True)
    except subprocess.CalledProcessError as e:
        print(f"\033[91merror bringing interface down or deleting it: {e}\033[0m")

    try:
        script = "/etc/gre65.sh" if is_gre6 else "/etc/private5.sh"
        result = subprocess.run(["/bin/bash", script], capture_output=True, text=True)
        if "RTNETLINK answers: File exists" in result.stderr:
            print("\033[91madditional ip already exists. Ignoring this error\033[0m")
        else:
            result.check_returncode()
        display_checkmark(
            f"\033[92mChanges saved and {interface} interface updated successfully!\033[0m"
        )
        subprocess.run(["sudo", "systemctl", "daemon-reload"], check=True)
        subprocess.run(["sudo", "systemctl", "restart", "ping_v65"], check=True)
        subprocess.run(["sudo", "systemctl", "restart", "ping_ip5"], check=True)

        # display_checkmark("\033[92mSystem services reloaded and restarted successfully!\033[0m")
    except subprocess.CalledProcessError as e:
        print(f"\033[91merror applying network changes: Gre6 related error\033[0m")
    except FileNotFoundError:
        print(f"\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def gre6kharej5nosec_editmulti_local():
    local_ip_private = local_ip("/etc/private5.sh")
    remote_ip_private = remote_ip("/etc/private5.sh")
    private_ip_private = private_ip1("/etc/private5.sh")

    local_ip_gre6 = local_ip("/etc/gre65.sh")
    remote_ip_gre6 = remote_ip("/etc/gre65.sh")
    private_ip_gre6 = private_gre6multi("/etc/gre65.sh")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("couldn't retrieve IP addresses from private file")
    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("couldn't retrieve IP addresses from gre6 file")

    if (
        not local_ip_private
        or not remote_ip_private
        or not private_ip_private
        or not local_ip_gre6
        or not remote_ip_gre6
        or not private_ip_gre6
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_privatekharej5(
            local_ip_private, remote_ip_private, private_ip_private
        )
        display_stuff_gre6(local_ip_gre6, remote_ip_gre6, private_ip_gre6)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mGRE6\033[93m Kharej [5] Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej [5] \033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mIRAN \033[92m Public IP\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[93mChange \033[97mGRE6 \033[93mPrivate IPV6\033[0m")
        print("5. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_private = new_ip
                ip_parts = new_ip.split(":")
                if new_ip.endswith(":2"):
                    ip_parts[-1] = "1"
                else:
                    ip_parts[-1] = "2"
                counterpart_ip = ":".join(ip_parts)
                local_ip_gre6 = new_ip
                remote_ip_gre6 = counterpart_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[GRE6]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_gre6 = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mKharej [5]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input("\033[93mEnter \033[92mIRAN\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "5":
            save_stuff_gre65(
                private_ip_private,
                local_ip_private,
                remote_ip_private,
                is_gre6=False,
            )
            save_stuff_gre65(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Invalid choice. Please select a valid option.")


def gre6ir5nosec_editmulti_local():
    local_ip_private = local_ip("/etc/private5.sh")
    remote_ip_private = remote_ip("/etc/private5.sh")
    private_ip_private = private_ip1("/etc/private5.sh")

    local_ip_gre6 = local_ip("/etc/gre65.sh")
    remote_ip_gre6 = remote_ip("/etc/gre65.sh")
    private_ip_gre6 = private_gre6multi("/etc/gre65.sh")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("couldn't retrieve IP addresses from private file")
    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("couldn't retrieve IP addresses from gre6 file")

    if (
        not local_ip_private
        or not remote_ip_private
        or not private_ip_private
        or not local_ip_gre6
        or not remote_ip_gre6
        or not private_ip_gre6
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_privateiran5(
            local_ip_private, remote_ip_private, private_ip_private
        )
        display_stuff_gre6(local_ip_gre6, remote_ip_gre6, private_ip_gre6)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mGRE6\033[93m IRAN Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN \033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mKHAREJ [5] \033[92m Public IP\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[93mChange \033[97mGRE6 \033[93mPrivate IPV6\033[0m")
        print("5. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_private = new_ip
                ip_parts = new_ip.split(":")
                if new_ip.endswith(":2"):
                    ip_parts[-1] = "1"
                else:
                    ip_parts[-1] = "2"
                counterpart_ip = ":".join(ip_parts)
                local_ip_gre6 = new_ip
                remote_ip_gre6 = counterpart_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[GRE6]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_gre6 = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mIRAN\033[93m Public IP :\033[0m ")
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mKharej [5]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "5":
            save_stuff_gre65(
                private_ip_private,
                local_ip_private,
                remote_ip_private,
                is_gre6=False,
            )
            save_stuff_gre65(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Invalid choice. Please select a valid option.")


# gre66
def get_current_private_ipsgre66():
    private_ip_private = private_ip1("/etc/private6.sh")
    private_ip_gre6 = private_gre6multi("/etc/gre66.sh")
    return {
        "private": private_ip_private,
        "gre6": private_ip_gre6,
    }


def update_ipfile_gre66(name, new_ip, update_type):
    try:
        with open(name, "r") as f:
            content = f.read()

        if update_type == "private":
            new_content = re.sub(
                r"ip (-6 )?addr add [^ ]+/64 dev azumi?",
                f"ip -6 addr add {new_ip}/64 dev azumi",
                content,
            )
            ip_parts = new_ip.split(":")
            if new_ip.endswith(":2"):
                ip_parts[-1] = "1"
            else:
                ip_parts[-1] = "2"
            counterpart_ip = ":".join(ip_parts)
            new_content = re.sub(
                r"ip (-6 )?route add [^ ]+/64 dev azumi?",
                f"ip -6 route add {counterpart_ip}/64 dev azumi",
                new_content,
            )
            update_ipfile_gre66("/etc/gre66.sh", new_ip, update_type="gre6_local")
            update_ipfile_gre66(
                "/etc/gre66.sh", counterpart_ip, update_type="gre6_remote"
            )
        elif update_type == "local":
            new_content = re.sub(r"local \S+", f"local {new_ip}", content)
        elif update_type == "remote":
            new_content = re.sub(r"remote \S+", f"remote {new_ip}", content)
        elif update_type == "gre6_local":
            new_content = re.sub(r"local \S+", f"local {new_ip}", content)
        elif update_type == "gre6_remote":
            new_content = re.sub(r"remote \S+", f"remote {new_ip}", content)
        elif update_type == "ipsec":
            new_content = re.sub(r"leftsubnet=\S+", f"leftsubnet={new_ip}/64", content)
            new_content = re.sub(r"leftid=\S+", f"leftid={new_ip}", new_content)

            ip_parts = new_ip.split(":")
            if new_ip.endswith(":1"):
                ip_parts[-1] = "2"
            else:
                ip_parts[-1] = "1"
            counterpart_ip = ":".join(ip_parts)
            new_content = re.sub(r"right=\S+", f"right={counterpart_ip}", new_content)
            new_content = re.sub(
                r"rightsubnet=\S+",
                f"rightsubnet={counterpart_ip}/64",
                new_content,
            )

        with open(name, "w") as f:
            f.write(new_content)
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def save_stuff_gre66(private_ip, local_ip, remote_ip, is_gre6):
    current_ips = get_current_private_ipsgre66()
    current_ip = current_ips["gre6"] if is_gre6 else current_ips["private"]

    if current_ip:
        delete_ufw_rules(current_ip)

    add_ufw_rules(private_ip)

    counterpart_ip = wtb_opposite_ip(private_ip)
    try:
        if is_gre6:
            update_pingfile_sit("/etc/ping_ip6.sh", counterpart_ip)
            update_ipfile_gre66("/etc/gre66.sh", private_ip, update_type="private")
            update_ipfile_gre66("/etc/gre66.sh", remote_ip, update_type="remote")
        else:
            update_pingfile_sit("/etc/ping_v66.sh", counterpart_ip)
            update_ipfile_gre66("/etc/private6.sh", private_ip, update_type="private")
            update_ipfile_gre66("/etc/private6.sh", local_ip, update_type="local")
            update_ipfile_gre66("/etc/private6.sh", remote_ip, update_type="remote")

        interface = "azumig66" if is_gre6 else "azumi6"
        subprocess.run(["ip", "link", "set", "dev", interface, "down"], check=True)
        subprocess.run(["ip", "link", "delete", interface], check=True)
    except subprocess.CalledProcessError as e:
        print(f"\033[91merror bringing interface down or deleting it: {e}\033[0m")

    try:
        script = "/etc/gre66.sh" if is_gre6 else "/etc/private6.sh"
        result = subprocess.run(["/bin/bash", script], capture_output=True, text=True)
        if "RTNETLINK answers: File exists" in result.stderr:
            print("\033[91madditional ip already exists. Ignoring this error\033[0m")
        else:
            result.check_returncode()
        display_checkmark(
            f"\033[92mChanges saved and {interface} interface updated successfully!\033[0m"
        )
        subprocess.run(["sudo", "systemctl", "daemon-reload"], check=True)
        subprocess.run(["sudo", "systemctl", "restart", "ping_v66"], check=True)
        subprocess.run(["sudo", "systemctl", "restart", "ping_ip6"], check=True)

        # display_checkmark("\033[92mSystem services reloaded and restarted successfully!\033[0m")
    except subprocess.CalledProcessError as e:
        print(f"\033[91merror applying network changes: Gre6 related error\033[0m")
    except FileNotFoundError:
        print(f"\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def gre6kharej6nosec_editmulti_local():
    local_ip_private = local_ip("/etc/private6.sh")
    remote_ip_private = remote_ip("/etc/private6.sh")
    private_ip_private = private_ip1("/etc/private6.sh")

    local_ip_gre6 = local_ip("/etc/gre66.sh")
    remote_ip_gre6 = remote_ip("/etc/gre66.sh")
    private_ip_gre6 = private_gre6multi("/etc/gre66.sh")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("couldn't retrieve IP addresses from private file")
    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("couldn't retrieve IP addresses from gre6 file")

    if (
        not local_ip_private
        or not remote_ip_private
        or not private_ip_private
        or not local_ip_gre6
        or not remote_ip_gre6
        or not private_ip_gre6
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_privatekharej6(
            local_ip_private, remote_ip_private, private_ip_private
        )
        display_stuff_gre6(local_ip_gre6, remote_ip_gre6, private_ip_gre6)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mGRE6\033[93m Kharej [6] Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej [6] \033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mIRAN \033[92m Public IP\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[93mChange \033[97mGRE6 \033[93mPrivate IPV6\033[0m")
        print("5. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_private = new_ip
                ip_parts = new_ip.split(":")
                if new_ip.endswith(":2"):
                    ip_parts[-1] = "1"
                else:
                    ip_parts[-1] = "2"
                counterpart_ip = ":".join(ip_parts)
                local_ip_gre6 = new_ip
                remote_ip_gre6 = counterpart_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[GRE6]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_gre6 = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mKharej [6]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input("\033[93mEnter \033[92mIRAN\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "5":
            save_stuff_gre66(
                private_ip_private,
                local_ip_private,
                remote_ip_private,
                is_gre6=False,
            )
            save_stuff_gre66(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Invalid choice. Please select a valid option.")


def gre6ir6nosec_editmulti_local():
    local_ip_private = local_ip("/etc/private6.sh")
    remote_ip_private = remote_ip("/etc/private6.sh")
    private_ip_private = private_ip1("/etc/private6.sh")

    local_ip_gre6 = local_ip("/etc/gre66.sh")
    remote_ip_gre6 = remote_ip("/etc/gre66.sh")
    private_ip_gre6 = private_gre6multi("/etc/gre66.sh")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("couldn't retrieve IP addresses from private file")
    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("couldn't retrieve IP addresses from gre6 file")

    if (
        not local_ip_private
        or not remote_ip_private
        or not private_ip_private
        or not local_ip_gre6
        or not remote_ip_gre6
        or not private_ip_gre6
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_privateiran6(
            local_ip_private, remote_ip_private, private_ip_private
        )
        display_stuff_gre6(local_ip_gre6, remote_ip_gre6, private_ip_gre6)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mGRE6\033[93m IRAN Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN \033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mKHAREJ [6] \033[92m Public IP\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[93mChange \033[97mGRE6 \033[93mPrivate IPV6\033[0m")
        print("5. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_private = new_ip
                ip_parts = new_ip.split(":")
                if new_ip.endswith(":2"):
                    ip_parts[-1] = "1"
                else:
                    ip_parts[-1] = "2"
                counterpart_ip = ":".join(ip_parts)
                local_ip_gre6 = new_ip
                remote_ip_gre6 = counterpart_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[GRE6]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_gre6 = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mIRAN\033[93m Public IP :\033[0m ")
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mKharej [6]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "5":
            save_stuff_gre66(
                private_ip_private,
                local_ip_private,
                remote_ip_private,
                is_gre6=False,
            )
            save_stuff_gre66(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Invalid choice. Please select a valid option.")


# gre67
def get_current_private_ipsgre67():
    private_ip_private = private_ip1("/etc/private7.sh")
    private_ip_gre6 = private_gre6multi("/etc/gre67.sh")
    return {
        "private": private_ip_private,
        "gre6": private_ip_gre6,
    }


def update_ipfile_gre67(name, new_ip, update_type):
    try:
        with open(name, "r") as f:
            content = f.read()

        if update_type == "private":
            new_content = re.sub(
                r"ip (-6 )?addr add [^ ]+/64 dev azumi?",
                f"ip -6 addr add {new_ip}/64 dev azumi",
                content,
            )
            ip_parts = new_ip.split(":")
            if new_ip.endswith(":2"):
                ip_parts[-1] = "1"
            else:
                ip_parts[-1] = "2"
            counterpart_ip = ":".join(ip_parts)
            new_content = re.sub(
                r"ip (-6 )?route add [^ ]+/64 dev azumi?",
                f"ip -6 route add {counterpart_ip}/64 dev azumi",
                new_content,
            )
            update_ipfile_gre67("/etc/gre67.sh", new_ip, update_type="gre6_local")
            update_ipfile_gre67(
                "/etc/gre67.sh", counterpart_ip, update_type="gre6_remote"
            )
        elif update_type == "local":
            new_content = re.sub(r"local \S+", f"local {new_ip}", content)
        elif update_type == "remote":
            new_content = re.sub(r"remote \S+", f"remote {new_ip}", content)
        elif update_type == "gre6_local":
            new_content = re.sub(r"local \S+", f"local {new_ip}", content)
        elif update_type == "gre6_remote":
            new_content = re.sub(r"remote \S+", f"remote {new_ip}", content)
        elif update_type == "ipsec":
            new_content = re.sub(r"leftsubnet=\S+", f"leftsubnet={new_ip}/64", content)
            new_content = re.sub(r"leftid=\S+", f"leftid={new_ip}", new_content)

            ip_parts = new_ip.split(":")
            if new_ip.endswith(":1"):
                ip_parts[-1] = "2"
            else:
                ip_parts[-1] = "1"
            counterpart_ip = ":".join(ip_parts)
            new_content = re.sub(r"right=\S+", f"right={counterpart_ip}", new_content)
            new_content = re.sub(
                r"rightsubnet=\S+",
                f"rightsubnet={counterpart_ip}/64",
                new_content,
            )

        with open(name, "w") as f:
            f.write(new_content)
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def save_stuff_gre67(private_ip, local_ip, remote_ip, is_gre6):
    current_ips = get_current_private_ipsgre67()
    current_ip = current_ips["gre6"] if is_gre6 else current_ips["private"]

    if current_ip:
        delete_ufw_rules(current_ip)

    add_ufw_rules(private_ip)

    counterpart_ip = wtb_opposite_ip(private_ip)
    try:
        if is_gre6:
            update_pingfile_sit("/etc/ping_ip7.sh", counterpart_ip)
            update_ipfile_gre67("/etc/gre67.sh", private_ip, update_type="private")
            update_ipfile_gre67("/etc/gre67.sh", remote_ip, update_type="remote")
        else:
            update_pingfile_sit("/etc/ping_v67.sh", counterpart_ip)
            update_ipfile_gre67("/etc/private7.sh", private_ip, update_type="private")
            update_ipfile_gre67("/etc/private7.sh", local_ip, update_type="local")
            update_ipfile_gre67("/etc/private7.sh", remote_ip, update_type="remote")

        interface = "azumig67" if is_gre6 else "azumi7"
        subprocess.run(["ip", "link", "set", "dev", interface, "down"], check=True)
        subprocess.run(["ip", "link", "delete", interface], check=True)
    except subprocess.CalledProcessError as e:
        print(f"\033[91merror bringing interface down or deleting it: {e}\033[0m")

    try:
        script = "/etc/gre67.sh" if is_gre6 else "/etc/private7.sh"
        result = subprocess.run(["/bin/bash", script], capture_output=True, text=True)
        if "RTNETLINK answers: File exists" in result.stderr:
            print("\033[91madditional ip already exists. Ignoring this error\033[0m")
        else:
            result.check_returncode()
        display_checkmark(
            f"\033[92mChanges saved and {interface} interface updated successfully!\033[0m"
        )
        subprocess.run(["sudo", "systemctl", "daemon-reload"], check=True)
        subprocess.run(["sudo", "systemctl", "restart", "ping_v67"], check=True)
        subprocess.run(["sudo", "systemctl", "restart", "ping_ip7"], check=True)

        # display_checkmark("\033[92mSystem services reloaded and restarted successfully!\033[0m")
    except subprocess.CalledProcessError as e:
        print(f"\033[91merror applying network changes: Gre6 related error\033[0m")
    except FileNotFoundError:
        print(f"\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def gre6kharej7nosec_editmulti_local():
    local_ip_private = local_ip("/etc/private7.sh")
    remote_ip_private = remote_ip("/etc/private7.sh")
    private_ip_private = private_ip1("/etc/private7.sh")

    local_ip_gre6 = local_ip("/etc/gre67.sh")
    remote_ip_gre6 = remote_ip("/etc/gre67.sh")
    private_ip_gre6 = private_gre6multi("/etc/gre67.sh")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("couldn't retrieve IP addresses from private file")
    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("couldn't retrieve IP addresses from gre6 file")

    if (
        not local_ip_private
        or not remote_ip_private
        or not private_ip_private
        or not local_ip_gre6
        or not remote_ip_gre6
        or not private_ip_gre6
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_privatekharej7(
            local_ip_private, remote_ip_private, private_ip_private
        )
        display_stuff_gre6(local_ip_gre6, remote_ip_gre6, private_ip_gre6)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mGRE6\033[93m Kharej [7] Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej [7] \033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mIRAN \033[92m Public IP\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[93mChange \033[97mGRE6 \033[93mPrivate IPV6\033[0m")
        print("5. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_private = new_ip
                ip_parts = new_ip.split(":")
                if new_ip.endswith(":2"):
                    ip_parts[-1] = "1"
                else:
                    ip_parts[-1] = "2"
                counterpart_ip = ":".join(ip_parts)
                local_ip_gre6 = new_ip
                remote_ip_gre6 = counterpart_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[GRE6]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_gre6 = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mKharej [7]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input("\033[93mEnter \033[92mIRAN\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "5":
            save_stuff_gre67(
                private_ip_private,
                local_ip_private,
                remote_ip_private,
                is_gre6=False,
            )
            save_stuff_gre67(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Invalid choice. Please select a valid option.")


def gre6ir7nosec_editmulti_local():
    local_ip_private = local_ip("/etc/private7.sh")
    remote_ip_private = remote_ip("/etc/private7.sh")
    private_ip_private = private_ip1("/etc/private7.sh")

    local_ip_gre6 = local_ip("/etc/gre67.sh")
    remote_ip_gre6 = remote_ip("/etc/gre67.sh")
    private_ip_gre6 = private_gre6multi("/etc/gre67.sh")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("couldn't retrieve IP addresses from private file")
    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("couldn't retrieve IP addresses from gre6 file")

    if (
        not local_ip_private
        or not remote_ip_private
        or not private_ip_private
        or not local_ip_gre6
        or not remote_ip_gre6
        or not private_ip_gre6
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_privateiran7(
            local_ip_private, remote_ip_private, private_ip_private
        )
        display_stuff_gre6(local_ip_gre6, remote_ip_gre6, private_ip_gre6)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mGRE6\033[93m IRAN Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN \033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mKHAREJ [7] \033[92m Public IP\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[93mChange \033[97mGRE6 \033[93mPrivate IPV6\033[0m")
        print("5. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_private = new_ip
                ip_parts = new_ip.split(":")
                if new_ip.endswith(":2"):
                    ip_parts[-1] = "1"
                else:
                    ip_parts[-1] = "2"
                counterpart_ip = ":".join(ip_parts)
                local_ip_gre6 = new_ip
                remote_ip_gre6 = counterpart_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[GRE6]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_gre6 = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mIRAN\033[93m Public IP :\033[0m ")
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mKharej [7]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "5":
            save_stuff_gre67(
                private_ip_private,
                local_ip_private,
                remote_ip_private,
                is_gre6=False,
            )
            save_stuff_gre67(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Invalid choice. Please select a valid option.")


# gre68
def get_current_private_ipsgre68():
    private_ip_private = private_ip1("/etc/private8.sh")
    private_ip_gre6 = private_gre6multi("/etc/gre68.sh")
    return {
        "private": private_ip_private,
        "gre6": private_ip_gre6,
    }


def update_ipfile_gre68(name, new_ip, update_type):
    try:
        with open(name, "r") as f:
            content = f.read()

        if update_type == "private":
            new_content = re.sub(
                r"ip (-6 )?addr add [^ ]+/64 dev azumi?",
                f"ip -6 addr add {new_ip}/64 dev azumi",
                content,
            )
            ip_parts = new_ip.split(":")
            if new_ip.endswith(":2"):
                ip_parts[-1] = "1"
            else:
                ip_parts[-1] = "2"
            counterpart_ip = ":".join(ip_parts)
            new_content = re.sub(
                r"ip (-6 )?route add [^ ]+/64 dev azumi?",
                f"ip -6 route add {counterpart_ip}/64 dev azumi",
                new_content,
            )
            update_ipfile_gre68("/etc/gre68.sh", new_ip, update_type="gre6_local")
            update_ipfile_gre68(
                "/etc/gre68.sh", counterpart_ip, update_type="gre6_remote"
            )
        elif update_type == "local":
            new_content = re.sub(r"local \S+", f"local {new_ip}", content)
        elif update_type == "remote":
            new_content = re.sub(r"remote \S+", f"remote {new_ip}", content)
        elif update_type == "gre6_local":
            new_content = re.sub(r"local \S+", f"local {new_ip}", content)
        elif update_type == "gre6_remote":
            new_content = re.sub(r"remote \S+", f"remote {new_ip}", content)
        elif update_type == "ipsec":
            new_content = re.sub(r"leftsubnet=\S+", f"leftsubnet={new_ip}/64", content)
            new_content = re.sub(r"leftid=\S+", f"leftid={new_ip}", new_content)

            ip_parts = new_ip.split(":")
            if new_ip.endswith(":1"):
                ip_parts[-1] = "2"
            else:
                ip_parts[-1] = "1"
            counterpart_ip = ":".join(ip_parts)
            new_content = re.sub(r"right=\S+", f"right={counterpart_ip}", new_content)
            new_content = re.sub(
                r"rightsubnet=\S+",
                f"rightsubnet={counterpart_ip}/64",
                new_content,
            )

        with open(name, "w") as f:
            f.write(new_content)
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def save_stuff_gre68(private_ip, local_ip, remote_ip, is_gre6):
    current_ips = get_current_private_ipsgre68()
    current_ip = current_ips["gre6"] if is_gre6 else current_ips["private"]

    if current_ip:
        delete_ufw_rules(current_ip)

    add_ufw_rules(private_ip)

    counterpart_ip = wtb_opposite_ip(private_ip)
    try:
        if is_gre6:
            update_pingfile_sit("/etc/ping_ip8.sh", counterpart_ip)
            update_ipfile_gre68("/etc/gre68.sh", private_ip, update_type="private")
            update_ipfile_gre68("/etc/gre68.sh", remote_ip, update_type="remote")
        else:
            update_pingfile_sit("/etc/ping_v68.sh", counterpart_ip)
            update_ipfile_gre68("/etc/private8.sh", private_ip, update_type="private")
            update_ipfile_gre68("/etc/private8.sh", local_ip, update_type="local")
            update_ipfile_gre68("/etc/private8.sh", remote_ip, update_type="remote")

        interface = "azumig68" if is_gre6 else "azumi8"
        subprocess.run(["ip", "link", "set", "dev", interface, "down"], check=True)
        subprocess.run(["ip", "link", "delete", interface], check=True)
    except subprocess.CalledProcessError as e:
        print(f"\033[91merror bringing interface down or deleting it: {e}\033[0m")

    try:
        script = "/etc/gre68.sh" if is_gre6 else "/etc/private8.sh"
        result = subprocess.run(["/bin/bash", script], capture_output=True, text=True)
        if "RTNETLINK answers: File exists" in result.stderr:
            print("\033[91madditional ip already exists. Ignoring this error\033[0m")
        else:
            result.check_returncode()
        display_checkmark(
            f"\033[92mChanges saved and {interface} interface updated successfully!\033[0m"
        )
        subprocess.run(["sudo", "systemctl", "daemon-reload"], check=True)
        subprocess.run(["sudo", "systemctl", "restart", "ping_v68"], check=True)
        subprocess.run(["sudo", "systemctl", "restart", "ping_ip8"], check=True)

        # display_checkmark("\033[92mSystem services reloaded and restarted successfully!\033[0m")
    except subprocess.CalledProcessError as e:
        print(f"\033[91merror applying network changes: Gre6 related error\033[0m")
    except FileNotFoundError:
        print(f"\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def gre6kharej8nosec_editmulti_local():
    local_ip_private = local_ip("/etc/private8.sh")
    remote_ip_private = remote_ip("/etc/private8.sh")
    private_ip_private = private_ip1("/etc/private8.sh")

    local_ip_gre6 = local_ip("/etc/gre68.sh")
    remote_ip_gre6 = remote_ip("/etc/gre68.sh")
    private_ip_gre6 = private_gre6multi("/etc/gre68.sh")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("couldn't retrieve IP addresses from private file")
    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("couldn't retrieve IP addresses from gre6 file")

    if (
        not local_ip_private
        or not remote_ip_private
        or not private_ip_private
        or not local_ip_gre6
        or not remote_ip_gre6
        or not private_ip_gre6
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_privatekharej8(
            local_ip_private, remote_ip_private, private_ip_private
        )
        display_stuff_gre6(local_ip_gre6, remote_ip_gre6, private_ip_gre6)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mGRE6\033[93m Kharej [8] Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej [8] \033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mIRAN \033[92m Public IP\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[93mChange \033[97mGRE6 \033[93mPrivate IPV6\033[0m")
        print("5. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_private = new_ip
                ip_parts = new_ip.split(":")
                if new_ip.endswith(":2"):
                    ip_parts[-1] = "1"
                else:
                    ip_parts[-1] = "2"
                counterpart_ip = ":".join(ip_parts)
                local_ip_gre6 = new_ip
                remote_ip_gre6 = counterpart_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[GRE6]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_gre6 = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mKharej [8]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input("\033[93mEnter \033[92mIRAN\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "5":
            save_stuff_gre68(
                private_ip_private,
                local_ip_private,
                remote_ip_private,
                is_gre6=False,
            )
            save_stuff_gre68(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Invalid choice. Please select a valid option.")


def gre6ir8nosec_editmulti_local():
    local_ip_private = local_ip("/etc/private8.sh")
    remote_ip_private = remote_ip("/etc/private8.sh")
    private_ip_private = private_ip1("/etc/private8.sh")

    local_ip_gre6 = local_ip("/etc/gre68.sh")
    remote_ip_gre6 = remote_ip("/etc/gre68.sh")
    private_ip_gre6 = private_gre6multi("/etc/gre68.sh")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("couldn't retrieve IP addresses from private file")
    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("couldn't retrieve IP addresses from gre6 file")

    if (
        not local_ip_private
        or not remote_ip_private
        or not private_ip_private
        or not local_ip_gre6
        or not remote_ip_gre6
        or not private_ip_gre6
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_privateiran8(
            local_ip_private, remote_ip_private, private_ip_private
        )
        display_stuff_gre6(local_ip_gre6, remote_ip_gre6, private_ip_gre6)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mGRE6\033[93m IRAN Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN \033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mKHAREJ [8] \033[92m Public IP\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[93mChange \033[97mGRE6 \033[93mPrivate IPV6\033[0m")
        print("5. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_private = new_ip
                ip_parts = new_ip.split(":")
                if new_ip.endswith(":2"):
                    ip_parts[-1] = "1"
                else:
                    ip_parts[-1] = "2"
                counterpart_ip = ":".join(ip_parts)
                local_ip_gre6 = new_ip
                remote_ip_gre6 = counterpart_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[GRE6]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_gre6 = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mIRAN\033[93m Public IP :\033[0m ")
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mKharej [8]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "5":
            save_stuff_gre68(
                private_ip_private,
                local_ip_private,
                remote_ip_private,
                is_gre6=False,
            )
            save_stuff_gre68(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Invalid choice. Please select a valid option.")


# gre69
def get_current_private_ipsgre69():
    private_ip_private = private_ip1("/etc/private9.sh")
    private_ip_gre6 = private_gre6multi("/etc/gre69.sh")
    return {
        "private": private_ip_private,
        "gre6": private_ip_gre6,
    }


def update_ipfile_gre69(name, new_ip, update_type):
    try:
        with open(name, "r") as f:
            content = f.read()

        if update_type == "private":
            new_content = re.sub(
                r"ip (-6 )?addr add [^ ]+/64 dev azumi?",
                f"ip -6 addr add {new_ip}/64 dev azumi",
                content,
            )
            ip_parts = new_ip.split(":")
            if new_ip.endswith(":2"):
                ip_parts[-1] = "1"
            else:
                ip_parts[-1] = "2"
            counterpart_ip = ":".join(ip_parts)
            new_content = re.sub(
                r"ip (-6 )?route add [^ ]+/64 dev azumi?",
                f"ip -6 route add {counterpart_ip}/64 dev azumi",
                new_content,
            )
            update_ipfile_gre69("/etc/gre69.sh", new_ip, update_type="gre6_local")
            update_ipfile_gre69(
                "/etc/gre69.sh", counterpart_ip, update_type="gre6_remote"
            )
        elif update_type == "local":
            new_content = re.sub(r"local \S+", f"local {new_ip}", content)
        elif update_type == "remote":
            new_content = re.sub(r"remote \S+", f"remote {new_ip}", content)
        elif update_type == "gre6_local":
            new_content = re.sub(r"local \S+", f"local {new_ip}", content)
        elif update_type == "gre6_remote":
            new_content = re.sub(r"remote \S+", f"remote {new_ip}", content)
        elif update_type == "ipsec":
            new_content = re.sub(r"leftsubnet=\S+", f"leftsubnet={new_ip}/64", content)
            new_content = re.sub(r"leftid=\S+", f"leftid={new_ip}", new_content)

            ip_parts = new_ip.split(":")
            if new_ip.endswith(":1"):
                ip_parts[-1] = "2"
            else:
                ip_parts[-1] = "1"
            counterpart_ip = ":".join(ip_parts)
            new_content = re.sub(r"right=\S+", f"right={counterpart_ip}", new_content)
            new_content = re.sub(
                r"rightsubnet=\S+",
                f"rightsubnet={counterpart_ip}/64",
                new_content,
            )

        with open(name, "w") as f:
            f.write(new_content)
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def save_stuff_gre69(private_ip, local_ip, remote_ip, is_gre6):
    current_ips = get_current_private_ipsgre69()
    current_ip = current_ips["gre6"] if is_gre6 else current_ips["private"]

    if current_ip:
        delete_ufw_rules(current_ip)

    add_ufw_rules(private_ip)

    counterpart_ip = wtb_opposite_ip(private_ip)
    try:
        if is_gre6:
            update_pingfile_sit("/etc/ping_ip9.sh", counterpart_ip)
            update_ipfile_gre69("/etc/gre69.sh", private_ip, update_type="private")
            update_ipfile_gre69("/etc/gre69.sh", remote_ip, update_type="remote")
        else:
            update_pingfile_sit("/etc/ping_v69.sh", counterpart_ip)
            update_ipfile_gre69("/etc/private9.sh", private_ip, update_type="private")
            update_ipfile_gre69("/etc/private9.sh", local_ip, update_type="local")
            update_ipfile_gre69("/etc/private9.sh", remote_ip, update_type="remote")

        interface = "azumig69" if is_gre6 else "azumi9"
        subprocess.run(["ip", "link", "set", "dev", interface, "down"], check=True)
        subprocess.run(["ip", "link", "delete", interface], check=True)
    except subprocess.CalledProcessError as e:
        print(f"\033[91merror bringing interface down or deleting it: {e}\033[0m")

    try:
        script = "/etc/gre69.sh" if is_gre6 else "/etc/private9.sh"
        result = subprocess.run(["/bin/bash", script], capture_output=True, text=True)
        if "RTNETLINK answers: File exists" in result.stderr:
            print("\033[91madditional ip already exists. Ignoring this error\033[0m")
        else:
            result.check_returncode()
        display_checkmark(
            f"\033[92mChanges saved and {interface} interface updated successfully!\033[0m"
        )
        subprocess.run(["sudo", "systemctl", "daemon-reload"], check=True)
        subprocess.run(["sudo", "systemctl", "restart", "ping_v69"], check=True)
        subprocess.run(["sudo", "systemctl", "restart", "ping_ip9"], check=True)

        # display_checkmark("\033[92mSystem services reloaded and restarted successfully!\033[0m")
    except subprocess.CalledProcessError as e:
        print(f"\033[91merror applying network changes: Gre6 related error\033[0m")
    except FileNotFoundError:
        print(f"\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def gre6kharej9nosec_editmulti_local():
    local_ip_private = local_ip("/etc/private9.sh")
    remote_ip_private = remote_ip("/etc/private9.sh")
    private_ip_private = private_ip1("/etc/private9.sh")

    local_ip_gre6 = local_ip("/etc/gre69.sh")
    remote_ip_gre6 = remote_ip("/etc/gre69.sh")
    private_ip_gre6 = private_gre6multi("/etc/gre69.sh")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("couldn't retrieve IP addresses from private file")
    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("couldn't retrieve IP addresses from gre6 file")

    if (
        not local_ip_private
        or not remote_ip_private
        or not private_ip_private
        or not local_ip_gre6
        or not remote_ip_gre6
        or not private_ip_gre6
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_privatekharej9(
            local_ip_private, remote_ip_private, private_ip_private
        )
        display_stuff_gre6(local_ip_gre6, remote_ip_gre6, private_ip_gre6)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mGRE6\033[93m Kharej [9] Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej [9] \033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mIRAN \033[92m Public IP\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[93mChange \033[97mGRE6 \033[93mPrivate IPV6\033[0m")
        print("5. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_private = new_ip
                ip_parts = new_ip.split(":")
                if new_ip.endswith(":2"):
                    ip_parts[-1] = "1"
                else:
                    ip_parts[-1] = "2"
                counterpart_ip = ":".join(ip_parts)
                local_ip_gre6 = new_ip
                remote_ip_gre6 = counterpart_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[GRE6]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_gre6 = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mKharej [9]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input("\033[93mEnter \033[92mIRAN\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "5":
            save_stuff_gre69(
                private_ip_private,
                local_ip_private,
                remote_ip_private,
                is_gre6=False,
            )
            save_stuff_gre69(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Invalid choice. Please select a valid option.")


def gre6ir9nosec_editmulti_local():
    local_ip_private = local_ip("/etc/private9.sh")
    remote_ip_private = remote_ip("/etc/private9.sh")
    private_ip_private = private_ip1("/etc/private9.sh")

    local_ip_gre6 = local_ip("/etc/gre69.sh")
    remote_ip_gre6 = remote_ip("/etc/gre69.sh")
    private_ip_gre6 = private_gre6multi("/etc/gre69.sh")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("couldn't retrieve IP addresses from private file")
    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("couldn't retrieve IP addresses from gre6 file")

    if (
        not local_ip_private
        or not remote_ip_private
        or not private_ip_private
        or not local_ip_gre6
        or not remote_ip_gre6
        or not private_ip_gre6
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_privateiran9(
            local_ip_private, remote_ip_private, private_ip_private
        )
        display_stuff_gre6(local_ip_gre6, remote_ip_gre6, private_ip_gre6)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mGRE6\033[93m IRAN Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN \033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mKHAREJ [9] \033[92m Public IP\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[93mChange \033[97mGRE6 \033[93mPrivate IPV6\033[0m")
        print("5. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_private = new_ip
                ip_parts = new_ip.split(":")
                if new_ip.endswith(":2"):
                    ip_parts[-1] = "1"
                else:
                    ip_parts[-1] = "2"
                counterpart_ip = ":".join(ip_parts)
                local_ip_gre6 = new_ip
                remote_ip_gre6 = counterpart_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[GRE6]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_gre6 = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mIRAN\033[93m Public IP :\033[0m ")
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mKharej [9]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "5":
            save_stuff_gre69(
                private_ip_private,
                local_ip_private,
                remote_ip_private,
                is_gre6=False,
            )
            save_stuff_gre69(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Invalid choice. Please select a valid option.")


# gre610
def get_current_private_ipsgre610():
    private_ip_private = private_ip1("/etc/private10.sh")
    private_ip_gre6 = private_gre6multi("/etc/gre610.sh")
    return {
        "private": private_ip_private,
        "gre6": private_ip_gre6,
    }


def update_ipfile_gre610(name, new_ip, update_type):
    try:
        with open(name, "r") as f:
            content = f.read()

        if update_type == "private":
            new_content = re.sub(
                r"ip (-6 )?addr add [^ ]+/64 dev azumi?",
                f"ip -6 addr add {new_ip}/64 dev azumi",
                content,
            )
            ip_parts = new_ip.split(":")
            if new_ip.endswith(":2"):
                ip_parts[-1] = "1"
            else:
                ip_parts[-1] = "2"
            counterpart_ip = ":".join(ip_parts)
            new_content = re.sub(
                r"ip (-6 )?route add [^ ]+/64 dev azumi?",
                f"ip -6 route add {counterpart_ip}/64 dev azumi",
                new_content,
            )
            update_ipfile_gre610("/etc/gre610.sh", new_ip, update_type="gre6_local")
            update_ipfile_gre610(
                "/etc/gre610.sh", counterpart_ip, update_type="gre6_remote"
            )
        elif update_type == "local":
            new_content = re.sub(r"local \S+", f"local {new_ip}", content)
        elif update_type == "remote":
            new_content = re.sub(r"remote \S+", f"remote {new_ip}", content)
        elif update_type == "gre6_local":
            new_content = re.sub(r"local \S+", f"local {new_ip}", content)
        elif update_type == "gre6_remote":
            new_content = re.sub(r"remote \S+", f"remote {new_ip}", content)
        elif update_type == "ipsec":
            new_content = re.sub(r"leftsubnet=\S+", f"leftsubnet={new_ip}/64", content)
            new_content = re.sub(r"leftid=\S+", f"leftid={new_ip}", new_content)

            ip_parts = new_ip.split(":")
            if new_ip.endswith(":1"):
                ip_parts[-1] = "2"
            else:
                ip_parts[-1] = "1"
            counterpart_ip = ":".join(ip_parts)
            new_content = re.sub(r"right=\S+", f"right={counterpart_ip}", new_content)
            new_content = re.sub(
                r"rightsubnet=\S+",
                f"rightsubnet={counterpart_ip}/64",
                new_content,
            )

        with open(name, "w") as f:
            f.write(new_content)
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def save_stuff_gre610(private_ip, local_ip, remote_ip, is_gre6):
    current_ips = get_current_private_ipsgre610()
    current_ip = current_ips["gre6"] if is_gre6 else current_ips["private"]

    if current_ip:
        delete_ufw_rules(current_ip)

    add_ufw_rules(private_ip)

    counterpart_ip = wtb_opposite_ip(private_ip)
    try:
        if is_gre6:
            update_pingfile_sit("/etc/ping_ip10.sh", counterpart_ip)
            update_ipfile_gre610("/etc/gre610.sh", private_ip, update_type="private")
            update_ipfile_gre610("/etc/gre610.sh", remote_ip, update_type="remote")
        else:
            update_pingfile_sit("/etc/ping_v610.sh", counterpart_ip)
            update_ipfile_gre610("/etc/private10.sh", private_ip, update_type="private")
            update_ipfile_gre610("/etc/private10.sh", local_ip, update_type="local")
            update_ipfile_gre610("/etc/private10.sh", remote_ip, update_type="remote")

        interface = "azumig610" if is_gre6 else "azumi10"
        subprocess.run(["ip", "link", "set", "dev", interface, "down"], check=True)
        subprocess.run(["ip", "link", "delete", interface], check=True)
    except subprocess.CalledProcessError as e:
        print(f"\033[91merror bringing interface down or deleting it: {e}\033[0m")

    try:
        script = "/etc/gre610.sh" if is_gre6 else "/etc/private10.sh"
        result = subprocess.run(["/bin/bash", script], capture_output=True, text=True)
        if "RTNETLINK answers: File exists" in result.stderr:
            print("\033[91madditional ip already exists. Ignoring this error\033[0m")
        else:
            result.check_returncode()
        display_checkmark(
            f"\033[92mChanges saved and {interface} interface updated successfully!\033[0m"
        )
        subprocess.run(["sudo", "systemctl", "daemon-reload"], check=True)
        subprocess.run(["sudo", "systemctl", "restart", "ping_v610"], check=True)
        subprocess.run(["sudo", "systemctl", "restart", "ping_ip10"], check=True)

        # display_checkmark("\033[92mSystem services reloaded and restarted successfully!\033[0m")
    except subprocess.CalledProcessError as e:
        print(f"\033[91merror applying network changes: Gre6 related error\033[0m")
    except FileNotFoundError:
        print(f"\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def gre6kharej10nosec_editmulti_local():
    local_ip_private = local_ip("/etc/private10.sh")
    remote_ip_private = remote_ip("/etc/private10.sh")
    private_ip_private = private_ip1("/etc/private10.sh")

    local_ip_gre6 = local_ip("/etc/gre610.sh")
    remote_ip_gre6 = remote_ip("/etc/gre610.sh")
    private_ip_gre6 = private_gre6multi("/etc/gre610.sh")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("couldn't retrieve IP addresses from private file")
    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("couldn't retrieve IP addresses from gre6 file")

    if (
        not local_ip_private
        or not remote_ip_private
        or not private_ip_private
        or not local_ip_gre6
        or not remote_ip_gre6
        or not private_ip_gre6
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_privatekharej10(
            local_ip_private, remote_ip_private, private_ip_private
        )
        display_stuff_gre6(local_ip_gre6, remote_ip_gre6, private_ip_gre6)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mGRE6\033[93m Kharej [10] Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej [10] \033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mIRAN \033[92m Public IP\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[93mChange \033[97mGRE6 \033[93mPrivate IPV6\033[0m")
        print("5. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_private = new_ip
                ip_parts = new_ip.split(":")
                if new_ip.endswith(":2"):
                    ip_parts[-1] = "1"
                else:
                    ip_parts[-1] = "2"
                counterpart_ip = ":".join(ip_parts)
                local_ip_gre6 = new_ip
                remote_ip_gre6 = counterpart_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[GRE6]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_gre6 = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mKharej [10]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input("\033[93mEnter \033[92mIRAN\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "5":
            save_stuff_gre610(
                private_ip_private,
                local_ip_private,
                remote_ip_private,
                is_gre6=False,
            )
            save_stuff_gre610(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Invalid choice. Please select a valid option.")


def gre6ir10nosec_editmulti_local():
    local_ip_private = local_ip("/etc/private10.sh")
    remote_ip_private = remote_ip("/etc/private10.sh")
    private_ip_private = private_ip1("/etc/private10.sh")

    local_ip_gre6 = local_ip("/etc/gre610.sh")
    remote_ip_gre6 = remote_ip("/etc/gre610.sh")
    private_ip_gre6 = private_gre6multi("/etc/gre610.sh")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("couldn't retrieve IP addresses from private file")
    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("couldn't retrieve IP addresses from gre6 file")

    if (
        not local_ip_private
        or not remote_ip_private
        or not private_ip_private
        or not local_ip_gre6
        or not remote_ip_gre6
        or not private_ip_gre6
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_privateiran10(
            local_ip_private, remote_ip_private, private_ip_private
        )
        display_stuff_gre6(local_ip_gre6, remote_ip_gre6, private_ip_gre6)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mGRE6\033[93m IRAN Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN \033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mKHAREJ [10] \033[92m Public IP\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[93mChange \033[97mGRE6 \033[93mPrivate IPV6\033[0m")
        print("5. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_private = new_ip
                ip_parts = new_ip.split(":")
                if new_ip.endswith(":2"):
                    ip_parts[-1] = "1"
                else:
                    ip_parts[-1] = "2"
                counterpart_ip = ":".join(ip_parts)
                local_ip_gre6 = new_ip
                remote_ip_gre6 = counterpart_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[GRE6]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_gre6 = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mIRAN\033[93m Public IP :\033[0m ")
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mKharej [10]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "5":
            save_stuff_gre610(
                private_ip_private,
                local_ip_private,
                remote_ip_private,
                is_gre6=False,
            )
            save_stuff_gre610(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Invalid choice. Please select a valid option.")


# iran 10 kharej 1 #1


def gre6iranfive1nosec_editmulti_local():
    local_ip_private = local_ip("/etc/private1.sh")
    remote_ip_private = remote_ip("/etc/private1.sh")
    private_ip_private = private_ip1("/etc/private1.sh")

    local_ip_gre6 = local_ip("/etc/gre61.sh")
    remote_ip_gre6 = remote_ip("/etc/gre61.sh")
    private_ip_gre6 = private_gre6multi("/etc/gre61.sh")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("couldn't retrieve IP addresses from private file")
    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("couldn't retrieve IP addresses from gre6 file")

    if (
        not local_ip_private
        or not remote_ip_private
        or not private_ip_private
        or not local_ip_gre6
        or not remote_ip_gre6
        or not private_ip_gre6
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_privateiranfive1(
            local_ip_private, remote_ip_private, private_ip_private
        )
        display_stuff_gre6(local_ip_gre6, remote_ip_gre6, private_ip_gre6)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mGRE6\033[93m IRAN [1] Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN [1] \033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mKharej \033[92m Public IP\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[93mChange \033[97mGRE6 \033[93mPrivate IPV6\033[0m")
        print("5. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_private = new_ip
                ip_parts = new_ip.split(":")
                if new_ip.endswith(":2"):
                    ip_parts[-1] = "1"
                else:
                    ip_parts[-1] = "2"
                counterpart_ip = ":".join(ip_parts)
                local_ip_gre6 = new_ip
                remote_ip_gre6 = counterpart_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[GRE6]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_gre6 = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mIRAN [1]\033[93m Public IP :\033[0m ")
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input("\033[93mEnter \033[92mKharej\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "5":
            save_stuff_gre61(
                private_ip_private,
                local_ip_private,
                remote_ip_private,
                is_gre6=False,
            )
            save_stuff_gre61(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Invalid choice. Please select a valid option.")


def gre6kharejone1nosec_editmulti_local():
    local_ip_private = local_ip("/etc/private1.sh")
    remote_ip_private = remote_ip("/etc/private1.sh")
    private_ip_private = private_ip1("/etc/private1.sh")

    local_ip_gre6 = local_ip("/etc/gre61.sh")
    remote_ip_gre6 = remote_ip("/etc/gre61.sh")
    private_ip_gre6 = private_gre6multi("/etc/gre61.sh")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("couldn't retrieve IP addresses from private file")
    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("couldn't retrieve IP addresses from gre6 file")

    if (
        not local_ip_private
        or not remote_ip_private
        or not private_ip_private
        or not local_ip_gre6
        or not remote_ip_gre6
        or not private_ip_gre6
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_privatekharejone1(
            local_ip_private, remote_ip_private, private_ip_private
        )
        display_stuff_gre6(local_ip_gre6, remote_ip_gre6, private_ip_gre6)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mGRE6\033[93m Kharej Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej \033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mIRAN [1] \033[92m Public IP\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[93mChange \033[97mGRE6 \033[93mPrivate IPV6\033[0m")
        print("5. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_private = new_ip
                ip_parts = new_ip.split(":")
                if new_ip.endswith(":2"):
                    ip_parts[-1] = "1"
                else:
                    ip_parts[-1] = "2"
                counterpart_ip = ":".join(ip_parts)
                local_ip_gre6 = new_ip
                remote_ip_gre6 = counterpart_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[GRE6]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_gre6 = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mKharej\033[93m Public IP :\033[0m ")
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input("\033[93mEnter \033[92mIRAN [1]\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "5":
            save_stuff_gre61(
                private_ip_private,
                local_ip_private,
                remote_ip_private,
                is_gre6=False,
            )
            save_stuff_gre61(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Invalid choice. Please select a valid option.")


# iran 10 kharej 1 #2


def gre6iranfive2nosec_editmulti_local():
    local_ip_private = local_ip("/etc/private2.sh")
    remote_ip_private = remote_ip("/etc/private2.sh")
    private_ip_private = private_ip1("/etc/private2.sh")

    local_ip_gre6 = local_ip("/etc/gre62.sh")
    remote_ip_gre6 = remote_ip("/etc/gre62.sh")
    private_ip_gre6 = private_gre6multi("/etc/gre62.sh")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("couldn't retrieve IP addresses from private file")
    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("couldn't retrieve IP addresses from gre6 file")

    if (
        not local_ip_private
        or not remote_ip_private
        or not private_ip_private
        or not local_ip_gre6
        or not remote_ip_gre6
        or not private_ip_gre6
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_privateiranfive2(
            local_ip_private, remote_ip_private, private_ip_private
        )
        display_stuff_gre6(local_ip_gre6, remote_ip_gre6, private_ip_gre6)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mGRE6\033[93m IRAN [2] Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN [2] \033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mKharej \033[92m Public IP\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[93mChange \033[97mGRE6 \033[93mPrivate IPV6\033[0m")
        print("5. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_private = new_ip
                ip_parts = new_ip.split(":")
                if new_ip.endswith(":2"):
                    ip_parts[-1] = "1"
                else:
                    ip_parts[-1] = "2"
                counterpart_ip = ":".join(ip_parts)
                local_ip_gre6 = new_ip
                remote_ip_gre6 = counterpart_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[GRE6]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_gre6 = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mIRAN [2]\033[93m Public IP :\033[0m ")
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input("\033[93mEnter \033[92mKharej\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "5":
            save_stuff_gre62(
                private_ip_private,
                local_ip_private,
                remote_ip_private,
                is_gre6=False,
            )
            save_stuff_gre62(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Invalid choice. Please select a valid option.")


def gre6kharejone2nosec_editmulti_local():
    local_ip_private = local_ip("/etc/private2.sh")
    remote_ip_private = remote_ip("/etc/private2.sh")
    private_ip_private = private_ip1("/etc/private2.sh")

    local_ip_gre6 = local_ip("/etc/gre62.sh")
    remote_ip_gre6 = remote_ip("/etc/gre62.sh")
    private_ip_gre6 = private_gre6multi("/etc/gre62.sh")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("couldn't retrieve IP addresses from private file")
    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("couldn't retrieve IP addresses from gre6 file")

    if (
        not local_ip_private
        or not remote_ip_private
        or not private_ip_private
        or not local_ip_gre6
        or not remote_ip_gre6
        or not private_ip_gre6
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_privatekharejone2(
            local_ip_private, remote_ip_private, private_ip_private
        )
        display_stuff_gre6(local_ip_gre6, remote_ip_gre6, private_ip_gre6)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mGRE6\033[93m Kharej Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej \033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mIRAN [2] \033[92m Public IP\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[93mChange \033[97mGRE6 \033[93mPrivate IPV6\033[0m")
        print("5. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_private = new_ip
                ip_parts = new_ip.split(":")
                if new_ip.endswith(":2"):
                    ip_parts[-1] = "1"
                else:
                    ip_parts[-1] = "2"
                counterpart_ip = ":".join(ip_parts)
                local_ip_gre6 = new_ip
                remote_ip_gre6 = counterpart_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[GRE6]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_gre6 = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mKharej\033[93m Public IP :\033[0m ")
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input("\033[93mEnter \033[92mIRAN [2]\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "5":
            save_stuff_gre62(
                private_ip_private,
                local_ip_private,
                remote_ip_private,
                is_gre6=False,
            )
            save_stuff_gre62(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Invalid choice. Please select a valid option.")


# iran 10 kharej 1 #3


def gre6iranfive3nosec_editmulti_local():
    local_ip_private = local_ip("/etc/private3.sh")
    remote_ip_private = remote_ip("/etc/private3.sh")
    private_ip_private = private_ip1("/etc/private3.sh")

    local_ip_gre6 = local_ip("/etc/gre63.sh")
    remote_ip_gre6 = remote_ip("/etc/gre63.sh")
    private_ip_gre6 = private_gre6multi("/etc/gre63.sh")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("couldn't retrieve IP addresses from private file")
    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("couldn't retrieve IP addresses from gre6 file")

    if (
        not local_ip_private
        or not remote_ip_private
        or not private_ip_private
        or not local_ip_gre6
        or not remote_ip_gre6
        or not private_ip_gre6
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_privateiranfive3(
            local_ip_private, remote_ip_private, private_ip_private
        )
        display_stuff_gre6(local_ip_gre6, remote_ip_gre6, private_ip_gre6)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mGRE6\033[93m IRAN [3] Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN [3] \033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mKharej \033[92m Public IP\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[93mChange \033[97mGRE6 \033[93mPrivate IPV6\033[0m")
        print("5. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_private = new_ip
                ip_parts = new_ip.split(":")
                if new_ip.endswith(":2"):
                    ip_parts[-1] = "1"
                else:
                    ip_parts[-1] = "2"
                counterpart_ip = ":".join(ip_parts)
                local_ip_gre6 = new_ip
                remote_ip_gre6 = counterpart_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[GRE6]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_gre6 = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mIRAN [3]\033[93m Public IP :\033[0m ")
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input("\033[93mEnter \033[92mKharej\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "5":
            save_stuff_gre63(
                private_ip_private,
                local_ip_private,
                remote_ip_private,
                is_gre6=False,
            )
            save_stuff_gre63(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Invalid choice. Please select a valid option.")


def gre6kharejone3nosec_editmulti_local():
    local_ip_private = local_ip("/etc/private3.sh")
    remote_ip_private = remote_ip("/etc/private3.sh")
    private_ip_private = private_ip1("/etc/private3.sh")

    local_ip_gre6 = local_ip("/etc/gre63.sh")
    remote_ip_gre6 = remote_ip("/etc/gre63.sh")
    private_ip_gre6 = private_gre6multi("/etc/gre63.sh")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("couldn't retrieve IP addresses from private file")
    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("couldn't retrieve IP addresses from gre6 file")

    if (
        not local_ip_private
        or not remote_ip_private
        or not private_ip_private
        or not local_ip_gre6
        or not remote_ip_gre6
        or not private_ip_gre6
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_privatekharejone3(
            local_ip_private, remote_ip_private, private_ip_private
        )
        display_stuff_gre6(local_ip_gre6, remote_ip_gre6, private_ip_gre6)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mGRE6\033[93m Kharej Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej \033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mIRAN [3] \033[92m Public IP\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[93mChange \033[97mGRE6 \033[93mPrivate IPV6\033[0m")
        print("5. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_private = new_ip
                ip_parts = new_ip.split(":")
                if new_ip.endswith(":2"):
                    ip_parts[-1] = "1"
                else:
                    ip_parts[-1] = "2"
                counterpart_ip = ":".join(ip_parts)
                local_ip_gre6 = new_ip
                remote_ip_gre6 = counterpart_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[GRE6]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_gre6 = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mKharej\033[93m Public IP :\033[0m ")
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input("\033[93mEnter \033[92mIRAN [3]\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "5":
            save_stuff_gre63(
                private_ip_private,
                local_ip_private,
                remote_ip_private,
                is_gre6=False,
            )
            save_stuff_gre63(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Invalid choice. Please select a valid option.")


# iran 10 kharej 1 #4


def gre6iranfive4nosec_editmulti_local():
    local_ip_private = local_ip("/etc/private4.sh")
    remote_ip_private = remote_ip("/etc/private4.sh")
    private_ip_private = private_ip1("/etc/private4.sh")

    local_ip_gre6 = local_ip("/etc/gre64.sh")
    remote_ip_gre6 = remote_ip("/etc/gre64.sh")
    private_ip_gre6 = private_gre6multi("/etc/gre64.sh")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("couldn't retrieve IP addresses from private file")
    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("couldn't retrieve IP addresses from gre6 file")

    if (
        not local_ip_private
        or not remote_ip_private
        or not private_ip_private
        or not local_ip_gre6
        or not remote_ip_gre6
        or not private_ip_gre6
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_privateiranfive4(
            local_ip_private, remote_ip_private, private_ip_private
        )
        display_stuff_gre6(local_ip_gre6, remote_ip_gre6, private_ip_gre6)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mGRE6\033[93m IRAN [4] Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN [4] \033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mKharej \033[92m Public IP\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[93mChange \033[97mGRE6 \033[93mPrivate IPV6\033[0m")
        print("5. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_private = new_ip
                ip_parts = new_ip.split(":")
                if new_ip.endswith(":2"):
                    ip_parts[-1] = "1"
                else:
                    ip_parts[-1] = "2"
                counterpart_ip = ":".join(ip_parts)
                local_ip_gre6 = new_ip
                remote_ip_gre6 = counterpart_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[GRE6]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_gre6 = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mIRAN [4]\033[93m Public IP :\033[0m ")
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input("\033[93mEnter \033[92mKharej\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "5":
            save_stuff_gre64(
                private_ip_private,
                local_ip_private,
                remote_ip_private,
                is_gre6=False,
            )
            save_stuff_gre64(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Invalid choice. Please select a valid option.")


def gre6kharejone4nosec_editmulti_local():
    local_ip_private = local_ip("/etc/private4.sh")
    remote_ip_private = remote_ip("/etc/private4.sh")
    private_ip_private = private_ip1("/etc/private4.sh")

    local_ip_gre6 = local_ip("/etc/gre64.sh")
    remote_ip_gre6 = remote_ip("/etc/gre64.sh")
    private_ip_gre6 = private_gre6multi("/etc/gre64.sh")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("couldn't retrieve IP addresses from private file")
    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("couldn't retrieve IP addresses from gre6 file")

    if (
        not local_ip_private
        or not remote_ip_private
        or not private_ip_private
        or not local_ip_gre6
        or not remote_ip_gre6
        or not private_ip_gre6
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_privatekharejone4(
            local_ip_private, remote_ip_private, private_ip_private
        )
        display_stuff_gre6(local_ip_gre6, remote_ip_gre6, private_ip_gre6)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mGRE6\033[93m Kharej Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej \033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mIRAN [4] \033[92m Public IP\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[93mChange \033[97mGRE6 \033[93mPrivate IPV6\033[0m")
        print("5. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_private = new_ip
                ip_parts = new_ip.split(":")
                if new_ip.endswith(":2"):
                    ip_parts[-1] = "1"
                else:
                    ip_parts[-1] = "2"
                counterpart_ip = ":".join(ip_parts)
                local_ip_gre6 = new_ip
                remote_ip_gre6 = counterpart_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[GRE6]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_gre6 = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mKharej\033[93m Public IP :\033[0m ")
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input("\033[93mEnter \033[92mIRAN [4]\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "5":
            save_stuff_gre64(
                private_ip_private,
                local_ip_private,
                remote_ip_private,
                is_gre6=False,
            )
            save_stuff_gre64(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Invalid choice. Please select a valid option.")


# iran 10 kharej 1 #5


def gre6iranfive5nosec_editmulti_local():
    local_ip_private = local_ip("/etc/private5.sh")
    remote_ip_private = remote_ip("/etc/private5.sh")
    private_ip_private = private_ip1("/etc/private5.sh")

    local_ip_gre6 = local_ip("/etc/gre65.sh")
    remote_ip_gre6 = remote_ip("/etc/gre65.sh")
    private_ip_gre6 = private_gre6multi("/etc/gre65.sh")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("couldn't retrieve IP addresses from private file")
    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("couldn't retrieve IP addresses from gre6 file")

    if (
        not local_ip_private
        or not remote_ip_private
        or not private_ip_private
        or not local_ip_gre6
        or not remote_ip_gre6
        or not private_ip_gre6
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_privateiranfive5(
            local_ip_private, remote_ip_private, private_ip_private
        )
        display_stuff_gre6(local_ip_gre6, remote_ip_gre6, private_ip_gre6)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mGRE6\033[93m IRAN [5] Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN [5] \033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mKharej \033[92m Public IP\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[93mChange \033[97mGRE6 \033[93mPrivate IPV6\033[0m")
        print("5. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_private = new_ip
                ip_parts = new_ip.split(":")
                if new_ip.endswith(":2"):
                    ip_parts[-1] = "1"
                else:
                    ip_parts[-1] = "2"
                counterpart_ip = ":".join(ip_parts)
                local_ip_gre6 = new_ip
                remote_ip_gre6 = counterpart_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[GRE6]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_gre6 = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mIRAN [5]\033[93m Public IP :\033[0m ")
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input("\033[93mEnter \033[92mKharej\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "5":
            save_stuff_gre65(
                private_ip_private,
                local_ip_private,
                remote_ip_private,
                is_gre6=False,
            )
            save_stuff_gre65(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Invalid choice. Please select a valid option.")

def gre6kharejone5nosec_editmulti_local():
    local_ip_private = local_ip("/etc/private5.sh")
    remote_ip_private = remote_ip("/etc/private5.sh")
    private_ip_private = private_ip1("/etc/private5.sh")

    local_ip_gre6 = local_ip("/etc/gre65.sh")
    remote_ip_gre6 = remote_ip("/etc/gre65.sh")
    private_ip_gre6 = private_gre6multi("/etc/gre65.sh")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("couldn't retrieve IP addresses from private file")
    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("couldn't retrieve IP addresses from gre6 file")

    if (
        not local_ip_private
        or not remote_ip_private
        or not private_ip_private
        or not local_ip_gre6
        or not remote_ip_gre6
        or not private_ip_gre6
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_privatekharejone5(
            local_ip_private, remote_ip_private, private_ip_private
        )
        display_stuff_gre6(local_ip_gre6, remote_ip_gre6, private_ip_gre6)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mGRE6\033[93m Kharej Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej \033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mIRAN [5] \033[92m Public IP\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[93mChange \033[97mGRE6 \033[93mPrivate IPV6\033[0m")
        print("5. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_private = new_ip
                ip_parts = new_ip.split(":")
                if new_ip.endswith(":2"):
                    ip_parts[-1] = "1"
                else:
                    ip_parts[-1] = "2"
                counterpart_ip = ":".join(ip_parts)
                local_ip_gre6 = new_ip
                remote_ip_gre6 = counterpart_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[GRE6]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_gre6 = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mKharej\033[93m Public IP :\033[0m ")
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input("\033[93mEnter \033[92mIRAN [5]\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "5":
            save_stuff_gre65(
                private_ip_private,
                local_ip_private,
                remote_ip_private,
                is_gre6=False,
            )
            save_stuff_gre65(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Invalid choice. Please select a valid option.")


def display_stuff_gre6tap(local_ip, remote_ip, private_ip):
    lines = [
        f"\033[93mTitle:         GRE6TAP Configuration\033[0m",
        f"\033[97m──────────────────────────────────────\033[0m",
        f"\033[92mLocal IP:       \033[97m{local_ip}\033[0m",
        f"\033[92mRemote IP:      \033[97m{remote_ip}\033[0m",
        f"\033[93mPrivate IP:     \033[97m{private_ip}\033[0m",
    ]
    box_width = 50

    print("\033[93m╭" + "─" * (box_width - 2) + "╮\033[0m")

    for line in lines:
        print(f"\033[93m {line:<{box_width - 4}} \033[0m")

    print("\033[93m╰" + "─" * (box_width - 2) + "╯\033[0m")


def gre6tap_multiedit_local():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print("\033[92m(   ) \033[92mEdit local\033[93m GRE6TAP Menu\033[0m")
    print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[92mNo IPSEC\033[0m")
    print("2. \033[93mWith IPSEC\033[0m")
    print("3. \033[94mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        choice = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if choice == "1":
            gre6tapnosec_multiedit_local()
            break
        elif choice == "2":
            gre6tapsec_multiedit_local()
            break
        elif choice == "3":
            clear()
            multi_edit_local()
            break
        else:
            print("Invalid choice.")


# gre6 menu
def gre6tapnosec_multiedit_local():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print("\033[92m(   ) \033[92mEdit local\033[93m GRE6TAP Menu\033[0m")
    print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[96mKharej\033[92m[10] \033[93mIRAN\033[92m[1]\033[0m")
    print("2. \033[96mKharej\033[92m[1] \033[93mIRAN\033[92m[5]  \033[0m")
    print("3. \033[94mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        choice = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if choice == "1":
            gre6tapnosec_edit_localkharej_multi()
            break
        elif choice == "2":
            gre6tapnosec_edit_localiran_multi()
            break
        elif choice == "3":
            clear()
            gre6tap_multiedit_local()
            break
        else:
            print("Invalid choice.")


def gre6tapnosec_edit_localiran_multi():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print(
        "\033[92m(   ) \033[93mGRE6TAP \033[92m[5]IRAN\033[96m [1]Kharej\033[93m Menu\033[0m"
    )
    print(
        '\033[92m "-"\033[93m══════════════════════════════════════════════════════════\033[0m'
    )
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[92mIRAN[1]\033[0m")
    print("2. \033[92mIRAN[2]\033[0m")
    print("3. \033[93mIRAN[3]\033[0m")
    print("4. \033[92mIRAN[4]\033[0m")
    print("5. \033[92mIRAN[5]\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    print("6. \033[93mKharej Menu\033[0m")
    print("0. \033[94mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if server_type == "1":
            gre6tapiranfive1nosec_editmulti_local()
            break
        elif server_type == "2":
            gre6tapiranfive2nosec_editmulti_local()
            break
        elif server_type == "3":
            gre6tapiranfive3nosec_editmulti_local()
            break
        elif server_type == "4":
            gre6tapiranfive4nosec_editmulti_local()
            break
        elif server_type == "5":
            gre6tapiranfive5nosec_editmulti_local()
            break
        elif server_type == "6":
            gre6tapkharejonenosec_editmulti_localmenu()
            break
        elif server_type == "0":
            os.system("clear")
            gre6tapnosec_multiedit_local()
            break
        else:
            print("Invalid choice.")


def gre6tapkharejonenosec_editmulti_localmenu():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print(
        "\033[92m(   ) \033[93mGRE6TAP \033[92m[5]IRAN\033[96m [1]Kharej\033[93m Menu\033[0m"
    )
    print(
        '\033[92m "-"\033[93m══════════════════════════════════════════════════════════\033[0m'
    )
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mThis is Kharej menu:\033[0m")
    print("1. \033[92mServer[1]\033[0m")
    print("2. \033[92mServer[2]\033[0m")
    print("3. \033[93mServer[3]\033[0m")
    print("4. \033[92mServer[4]\033[0m")
    print("5. \033[92mServer[5]\033[0m")
    print("0. \033[94mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if server_type == "1":
            gre6tapkharejone1nosec_editmulti_local()
            break
        elif server_type == "2":
            gre6tapkharejone2nosec_editmulti_local()
            break
        elif server_type == "3":
            gre6tapkharejone3nosec_editmulti_local()
            break
        elif server_type == "4":
            gre6tapkharejone4nosec_editmulti_local()
            break
        elif server_type == "5":
            gre6tapkharejone5nosec_editmulti_local()
            break
        elif server_type == "0":
            os.system("clear")
            gre6tapnosec_multiedit_local()
            break
        else:
            print("Invalid choice.")


def gre6tapnosec_edit_localkharej_multi():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print(
        "\033[92m(   ) \033[93mGRE6TAP \033[92m[10]Kharej\033[96m [1]IRAN\033[93m Menu\033[0m"
    )
    print(
        '\033[92m "-"\033[93m══════════════════════════════════════════════════════════\033[0m'
    )
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[92mKharej[1]\033[0m")
    print("2. \033[92mKharej[2]\033[0m")
    print("3. \033[93mKharej[3]\033[0m")
    print("4. \033[92mKharej[4]\033[0m")
    print("5. \033[92mKharej[5]\033[0m")
    print("6. \033[92mKharej[6]\033[0m")
    print("7. \033[92mKharej[7]\033[0m")
    print("8. \033[93mKharej[8]\033[0m")
    print("9. \033[92mKharej[9]\033[0m")
    print("10.\033[92mKharej[10]\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    print("11.\033[93mIRAN Menu\033[0m")
    print("0. \033[94mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if server_type == "1":
            gre6tapkharej1nosec_editmulti_local()
            break
        elif server_type == "2":
            gre6tapkharej2nosec_editmulti_local()
            break
        elif server_type == "3":
            gre6tapkharej3nosec_editmulti_local()
            break
        elif server_type == "4":
            gre6tapkharej4nosec_editmulti_local()
            break
        elif server_type == "5":
            gre6tapkharej5nosec_editmulti_local()
            break
        elif server_type == "6":
            gre6tapkharej6nosec_editmulti_local()
            break
        elif server_type == "7":
            gre6tapkharej7nosec_editmulti_local()
            break
        elif server_type == "8":
            gre6tapkharej8nosec_editmulti_local()
            break
        elif server_type == "9":
            gre6tapkharej9nosec_editmulti_local()
            break
        elif server_type == "10":
            gre6tapkharej10nosec_editmulti_local()
            break
        elif server_type == "6":
            gre6tapirannosec_editmulti_local()
            break
        elif server_type == "0":
            os.system("clear")
            gre6tapnosec_multiedit_local()
            break
        else:
            print("Invalid choice.")


def gre6tapirannosec_editmulti_local():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print(
        "\033[92m(   ) \033[93mGRE6TAP \033[92m[5]Kharej\033[96m [1]IRAN\033[93m Menu\033[0m"
    )
    print(
        '\033[92m "-"\033[93m══════════════════════════════════════════════════════════\033[0m'
    )
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mThis is IRAN menu:\033[0m")
    print("1. \033[92mServer[1]\033[0m")
    print("2. \033[92mServer[2]\033[0m")
    print("3. \033[93mServer[3]\033[0m")
    print("4. \033[92mServer[4]\033[0m")
    print("5. \033[92mServer[5]\033[0m")
    print("6. \033[92mServer[6]\033[0m")
    print("7. \033[92mServer[7]\033[0m")
    print("8. \033[93mServer[8]\033[0m")
    print("9. \033[92mServer[9]\033[0m")
    print("10.\033[92mServer[10]\033[0m")
    print("0. \033[94mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if server_type == "1":
            gre6tapir1nosec_editmulti_local()
            break
        elif server_type == "2":
            gre6tapir2nosec_editmulti_local()
            break
        elif server_type == "3":
            gre6tapir3nosec_editmulti_local()
            break
        elif server_type == "4":
            gre6tapir4nosec_editmulti_local()
            break
        elif server_type == "5":
            gre6tapir5nosec_editmulti_local()
            break
        elif server_type == "6":
            gre6tapir6nosec_editmulti_local()
            break
        elif server_type == "7":
            gre6tapir7nosec_editmulti_local()
            break
        elif server_type == "8":
            gre6tapir8nosec_editmulti_local()
            break
        elif server_type == "9":
            gre6tapir9nosec_editmulti_local()
            break
        elif server_type == "10":
            gre6tapir10nosec_editmulti_local()
            break
        elif server_type == "0":
            os.system("clear")
            gre6tapnosec_multiedit_local()
            break
        else:
            print("Invalid choice.")


def gre6tapkharej1nosec_editmulti_local():
    local_ip_private = local_ip("/etc/private1.sh")
    remote_ip_private = remote_ip("/etc/private1.sh")
    private_ip_private = private_ip1("/etc/private1.sh")

    local_ip_gre6 = local_ip("/etc/gre61.sh")
    remote_ip_gre6 = remote_ip("/etc/gre61.sh")
    private_ip_gre6 = private_gre6multi("/etc/gre61.sh")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("couldn't retrieve IP addresses from private file")
    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("couldn't retrieve IP addresses from gre6tap file")

    if (
        not local_ip_private
        or not remote_ip_private
        or not private_ip_private
        or not local_ip_gre6
        or not remote_ip_gre6
        or not private_ip_gre6
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_privatekharej1(
            local_ip_private, remote_ip_private, private_ip_private
        )
        display_stuff_gre6tap(local_ip_gre6, remote_ip_gre6, private_ip_gre6)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mGRE6TAP\033[93m Kharej [1] Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej [1] \033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mIRAN \033[92m Public IP\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[93mChange \033[97mGRE6TAP \033[93mPrivate IPV6\033[0m")
        print("5. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_private = new_ip
                ip_parts = new_ip.split(":")
                if new_ip.endswith(":2"):
                    ip_parts[-1] = "1"
                else:
                    ip_parts[-1] = "2"
                counterpart_ip = ":".join(ip_parts)
                local_ip_gre6 = new_ip
                remote_ip_gre6 = counterpart_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[GRE6tap]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_gre6 = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mKharej [1]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input("\033[93mEnter \033[92mIRAN\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "5":
            save_stuff_gre61(
                private_ip_private,
                local_ip_private,
                remote_ip_private,
                is_gre6=False,
            )
            save_stuff_gre61(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Invalid choice. Please select a valid option.")


def gre6tapir1nosec_editmulti_local():
    local_ip_private = local_ip("/etc/private1.sh")
    remote_ip_private = remote_ip("/etc/private1.sh")
    private_ip_private = private_ip1("/etc/private1.sh")

    local_ip_gre6 = local_ip("/etc/gre61.sh")
    remote_ip_gre6 = remote_ip("/etc/gre61.sh")
    private_ip_gre6 = private_gre6multi("/etc/gre61.sh")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("couldn't retrieve IP addresses from private file")
    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("couldn't retrieve IP addresses from gre6tap file")

    if (
        not local_ip_private
        or not remote_ip_private
        or not private_ip_private
        or not local_ip_gre6
        or not remote_ip_gre6
        or not private_ip_gre6
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_privateiran1(
            local_ip_private, remote_ip_private, private_ip_private
        )
        display_stuff_gre6tap(local_ip_gre6, remote_ip_gre6, private_ip_gre6)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mGRE6tap\033[93m IRAN Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN \033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mKHAREJ [1] \033[92m Public IP\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[93mChange \033[97mGRE6tap \033[93mPrivate IPV6\033[0m")
        print("5. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_private = new_ip
                ip_parts = new_ip.split(":")
                if new_ip.endswith(":2"):
                    ip_parts[-1] = "1"
                else:
                    ip_parts[-1] = "2"
                counterpart_ip = ":".join(ip_parts)
                local_ip_gre6 = new_ip
                remote_ip_gre6 = counterpart_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[GRE6tap]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_gre6 = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mIRAN\033[93m Public IP :\033[0m ")
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mKharej [1]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "5":
            save_stuff_gre61(
                private_ip_private,
                local_ip_private,
                remote_ip_private,
                is_gre6=False,
            )
            save_stuff_gre61(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Invalid choice. Please select a valid option.")


def gre6tapkharej2nosec_editmulti_local():
    local_ip_private = local_ip("/etc/private2.sh")
    remote_ip_private = remote_ip("/etc/private2.sh")
    private_ip_private = private_ip1("/etc/private2.sh")

    local_ip_gre6 = local_ip("/etc/gre62.sh")
    remote_ip_gre6 = remote_ip("/etc/gre62.sh")
    private_ip_gre6 = private_gre6multi("/etc/gre62.sh")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("couldn't retrieve IP addresses from private file")
    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("couldn't retrieve IP addresses from gre6tap file")

    if (
        not local_ip_private
        or not remote_ip_private
        or not private_ip_private
        or not local_ip_gre6
        or not remote_ip_gre6
        or not private_ip_gre6
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_privatekharej2(
            local_ip_private, remote_ip_private, private_ip_private
        )
        display_stuff_gre6tap(local_ip_gre6, remote_ip_gre6, private_ip_gre6)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mGRE6tap\033[93m Kharej [2] Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej [2] \033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mIRAN \033[92m Public IP\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[93mChange \033[97mGRE6tap \033[93mPrivate IPV6\033[0m")
        print("5. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_private = new_ip
                ip_parts = new_ip.split(":")
                if new_ip.endswith(":2"):
                    ip_parts[-1] = "1"
                else:
                    ip_parts[-1] = "2"
                counterpart_ip = ":".join(ip_parts)
                local_ip_gre6 = new_ip
                remote_ip_gre6 = counterpart_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[GRE6tap]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_gre6 = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mKharej [2]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input("\033[93mEnter \033[92mIRAN\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "5":
            save_stuff_gre62(
                private_ip_private,
                local_ip_private,
                remote_ip_private,
                is_gre6=False,
            )
            save_stuff_gre62(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Invalid choice. Please select a valid option.")


def gre6tapir2nosec_editmulti_local():
    local_ip_private = local_ip("/etc/private2.sh")
    remote_ip_private = remote_ip("/etc/private2.sh")
    private_ip_private = private_ip1("/etc/private2.sh")

    local_ip_gre6 = local_ip("/etc/gre62.sh")
    remote_ip_gre6 = remote_ip("/etc/gre62.sh")
    private_ip_gre6 = private_gre6multi("/etc/gre62.sh")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("couldn't retrieve IP addresses from private file")
    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("couldn't retrieve IP addresses from gre6tap file")

    if (
        not local_ip_private
        or not remote_ip_private
        or not private_ip_private
        or not local_ip_gre6
        or not remote_ip_gre6
        or not private_ip_gre6
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_privateiran2(
            local_ip_private, remote_ip_private, private_ip_private
        )
        display_stuff_gre6tap(local_ip_gre6, remote_ip_gre6, private_ip_gre6)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mGRE6tap\033[93m IRAN Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN \033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mKHAREJ [2] \033[92m Public IP\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[93mChange \033[97mGRE6tap \033[93mPrivate IPV6\033[0m")
        print("5. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_private = new_ip
                ip_parts = new_ip.split(":")
                if new_ip.endswith(":2"):
                    ip_parts[-1] = "1"
                else:
                    ip_parts[-1] = "2"
                counterpart_ip = ":".join(ip_parts)
                local_ip_gre6 = new_ip
                remote_ip_gre6 = counterpart_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[GRE6tap]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_gre6 = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mIRAN\033[93m Public IP :\033[0m ")
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mKharej [2]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "5":
            save_stuff_gre62(
                private_ip_private,
                local_ip_private,
                remote_ip_private,
                is_gre6=False,
            )
            save_stuff_gre62(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Invalid choice. Please select a valid option.")


def gre6tapkharej3nosec_editmulti_local():
    local_ip_private = local_ip("/etc/private3.sh")
    remote_ip_private = remote_ip("/etc/private3.sh")
    private_ip_private = private_ip1("/etc/private3.sh")

    local_ip_gre6 = local_ip("/etc/gre63.sh")
    remote_ip_gre6 = remote_ip("/etc/gre63.sh")
    private_ip_gre6 = private_gre6multi("/etc/gre63.sh")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("couldn't retrieve IP addresses from private file")
    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("couldn't retrieve IP addresses from gre6tap file")

    if (
        not local_ip_private
        or not remote_ip_private
        or not private_ip_private
        or not local_ip_gre6
        or not remote_ip_gre6
        or not private_ip_gre6
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_privatekharej3(
            local_ip_private, remote_ip_private, private_ip_private
        )
        display_stuff_gre6tap(local_ip_gre6, remote_ip_gre6, private_ip_gre6)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mGRE6tap\033[93m Kharej [3] Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej [3] \033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mIRAN \033[92m Public IP\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[93mChange \033[97mGRE6tap \033[93mPrivate IPV6\033[0m")
        print("5. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_private = new_ip
                ip_parts = new_ip.split(":")
                if new_ip.endswith(":2"):
                    ip_parts[-1] = "1"
                else:
                    ip_parts[-1] = "2"
                counterpart_ip = ":".join(ip_parts)
                local_ip_gre6 = new_ip
                remote_ip_gre6 = counterpart_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[GRE6tap]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_gre6 = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mKharej [3]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input("\033[93mEnter \033[92mIRAN\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "5":
            save_stuff_gre63(
                private_ip_private,
                local_ip_private,
                remote_ip_private,
                is_gre6=False,
            )
            save_stuff_gre63(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Invalid choice. Please select a valid option.")


def gre6tapir3nosec_editmulti_local():
    local_ip_private = local_ip("/etc/private3.sh")
    remote_ip_private = remote_ip("/etc/private3.sh")
    private_ip_private = private_ip1("/etc/private3.sh")

    local_ip_gre6 = local_ip("/etc/gre63.sh")
    remote_ip_gre6 = remote_ip("/etc/gre63.sh")
    private_ip_gre6 = private_gre6multi("/etc/gre63.sh")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("couldn't retrieve IP addresses from private file")
    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("couldn't retrieve IP addresses from gre6tap file")

    if (
        not local_ip_private
        or not remote_ip_private
        or not private_ip_private
        or not local_ip_gre6
        or not remote_ip_gre6
        or not private_ip_gre6
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_privateiran3(
            local_ip_private, remote_ip_private, private_ip_private
        )
        display_stuff_gre6tap(local_ip_gre6, remote_ip_gre6, private_ip_gre6)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mGRE6tap\033[93m IRAN Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN \033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mKHAREJ [3] \033[92m Public IP\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[93mChange \033[97mGRE6tap \033[93mPrivate IPV6\033[0m")
        print("5. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_private = new_ip
                ip_parts = new_ip.split(":")
                if new_ip.endswith(":2"):
                    ip_parts[-1] = "1"
                else:
                    ip_parts[-1] = "2"
                counterpart_ip = ":".join(ip_parts)
                local_ip_gre6 = new_ip
                remote_ip_gre6 = counterpart_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[GRE6tap]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_gre6 = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mIRAN\033[93m Public IP :\033[0m ")
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mKharej [3]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "5":
            save_stuff_gre63(
                private_ip_private,
                local_ip_private,
                remote_ip_private,
                is_gre6=False,
            )
            save_stuff_gre63(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Invalid choice. Please select a valid option.")


def gre6tapkharej4nosec_editmulti_local():
    local_ip_private = local_ip("/etc/private4.sh")
    remote_ip_private = remote_ip("/etc/private4.sh")
    private_ip_private = private_ip1("/etc/private4.sh")

    local_ip_gre6 = local_ip("/etc/gre64.sh")
    remote_ip_gre6 = remote_ip("/etc/gre64.sh")
    private_ip_gre6 = private_gre6multi("/etc/gre64.sh")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("couldn't retrieve IP addresses from private file")
    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("couldn't retrieve IP addresses from gre6tap file")

    if (
        not local_ip_private
        or not remote_ip_private
        or not private_ip_private
        or not local_ip_gre6
        or not remote_ip_gre6
        or not private_ip_gre6
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_privatekharej4(
            local_ip_private, remote_ip_private, private_ip_private
        )
        display_stuff_gre6tap(local_ip_gre6, remote_ip_gre6, private_ip_gre6)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mGRE6tap\033[93m Kharej [4] Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej [4] \033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mIRAN \033[92m Public IP\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[93mChange \033[97mGRE6tap \033[93mPrivate IPV6\033[0m")
        print("5. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_private = new_ip
                ip_parts = new_ip.split(":")
                if new_ip.endswith(":2"):
                    ip_parts[-1] = "1"
                else:
                    ip_parts[-1] = "2"
                counterpart_ip = ":".join(ip_parts)
                local_ip_gre6 = new_ip
                remote_ip_gre6 = counterpart_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[GRE6]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_gre6 = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mKharej [4]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input("\033[93mEnter \033[92mIRAN\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "5":
            save_stuff_gre64(
                private_ip_private,
                local_ip_private,
                remote_ip_private,
                is_gre6=False,
            )
            save_stuff_gre64(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Invalid choice. Please select a valid option.")


def gre6tapir4nosec_editmulti_local():
    local_ip_private = local_ip("/etc/private4.sh")
    remote_ip_private = remote_ip("/etc/private4.sh")
    private_ip_private = private_ip1("/etc/private4.sh")

    local_ip_gre6 = local_ip("/etc/gre64.sh")
    remote_ip_gre6 = remote_ip("/etc/gre64.sh")
    private_ip_gre6 = private_gre6multi("/etc/gre64.sh")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("couldn't retrieve IP addresses from private file")
    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("couldn't retrieve IP addresses from gre6tap file")

    if (
        not local_ip_private
        or not remote_ip_private
        or not private_ip_private
        or not local_ip_gre6
        or not remote_ip_gre6
        or not private_ip_gre6
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_privateiran4(
            local_ip_private, remote_ip_private, private_ip_private
        )
        display_stuff_gre6tap(local_ip_gre6, remote_ip_gre6, private_ip_gre6)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mGRE6tap\033[93m IRAN Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN \033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mKHAREJ [4] \033[92m Public IP\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[93mChange \033[97mGRE6tap \033[93mPrivate IPV6\033[0m")
        print("5. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_private = new_ip
                ip_parts = new_ip.split(":")
                if new_ip.endswith(":2"):
                    ip_parts[-1] = "1"
                else:
                    ip_parts[-1] = "2"
                counterpart_ip = ":".join(ip_parts)
                local_ip_gre6 = new_ip
                remote_ip_gre6 = counterpart_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[GRE6tap]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_gre6 = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mIRAN\033[93m Public IP :\033[0m ")
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mKharej [4]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "5":
            save_stuff_gre64(
                private_ip_private,
                local_ip_private,
                remote_ip_private,
                is_gre6=False,
            )
            save_stuff_gre64(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Invalid choice. Please select a valid option.")


def gre6tapkharej5nosec_editmulti_local():
    local_ip_private = local_ip("/etc/private5.sh")
    remote_ip_private = remote_ip("/etc/private5.sh")
    private_ip_private = private_ip1("/etc/private5.sh")

    local_ip_gre6 = local_ip("/etc/gre65.sh")
    remote_ip_gre6 = remote_ip("/etc/gre65.sh")
    private_ip_gre6 = private_gre6multi("/etc/gre65.sh")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("couldn't retrieve IP addresses from private file")
    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("couldn't retrieve IP addresses from gre6tap file")

    if (
        not local_ip_private
        or not remote_ip_private
        or not private_ip_private
        or not local_ip_gre6
        or not remote_ip_gre6
        or not private_ip_gre6
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_privatekharej5(
            local_ip_private, remote_ip_private, private_ip_private
        )
        display_stuff_gre6tap(local_ip_gre6, remote_ip_gre6, private_ip_gre6)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mGRE6tap\033[93m Kharej [5] Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej [5] \033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mIRAN \033[92m Public IP\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[93mChange \033[97mGRE6tap \033[93mPrivate IPV6\033[0m")
        print("5. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_private = new_ip
                ip_parts = new_ip.split(":")
                if new_ip.endswith(":2"):
                    ip_parts[-1] = "1"
                else:
                    ip_parts[-1] = "2"
                counterpart_ip = ":".join(ip_parts)
                local_ip_gre6 = new_ip
                remote_ip_gre6 = counterpart_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[GRE6tap]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_gre6 = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mKharej [5]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input("\033[93mEnter \033[92mIRAN\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "5":
            save_stuff_gre65(
                private_ip_private,
                local_ip_private,
                remote_ip_private,
                is_gre6=False,
            )
            save_stuff_gre65(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Invalid choice. Please select a valid option.")


def gre6tapir5nosec_editmulti_local():
    local_ip_private = local_ip("/etc/private5.sh")
    remote_ip_private = remote_ip("/etc/private5.sh")
    private_ip_private = private_ip1("/etc/private5.sh")

    local_ip_gre6 = local_ip("/etc/gre65.sh")
    remote_ip_gre6 = remote_ip("/etc/gre65.sh")
    private_ip_gre6 = private_gre6multi("/etc/gre65.sh")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("couldn't retrieve IP addresses from private file")
    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("couldn't retrieve IP addresses from gre6tap file")

    if (
        not local_ip_private
        or not remote_ip_private
        or not private_ip_private
        or not local_ip_gre6
        or not remote_ip_gre6
        or not private_ip_gre6
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_privateiran5(
            local_ip_private, remote_ip_private, private_ip_private
        )
        display_stuff_gre6tap(local_ip_gre6, remote_ip_gre6, private_ip_gre6)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mGRE6tap\033[93m IRAN Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN \033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mKHAREJ [5] \033[92m Public IP\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[93mChange \033[97mGRE6tap \033[93mPrivate IPV6\033[0m")
        print("5. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_private = new_ip
                ip_parts = new_ip.split(":")
                if new_ip.endswith(":2"):
                    ip_parts[-1] = "1"
                else:
                    ip_parts[-1] = "2"
                counterpart_ip = ":".join(ip_parts)
                local_ip_gre6 = new_ip
                remote_ip_gre6 = counterpart_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[GRE6tap]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_gre6 = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mIRAN\033[93m Public IP :\033[0m ")
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mKharej [5]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "5":
            save_stuff_gre65(
                private_ip_private,
                local_ip_private,
                remote_ip_private,
                is_gre6=False,
            )
            save_stuff_gre65(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Invalid choice. Please select a valid option.")


def gre6tapkharej6nosec_editmulti_local():
    local_ip_private = local_ip("/etc/private6.sh")
    remote_ip_private = remote_ip("/etc/private6.sh")
    private_ip_private = private_ip1("/etc/private6.sh")

    local_ip_gre6 = local_ip("/etc/gre66.sh")
    remote_ip_gre6 = remote_ip("/etc/gre66.sh")
    private_ip_gre6 = private_gre6multi("/etc/gre66.sh")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("couldn't retrieve IP addresses from private file")
    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("couldn't retrieve IP addresses from gre6tap file")

    if (
        not local_ip_private
        or not remote_ip_private
        or not private_ip_private
        or not local_ip_gre6
        or not remote_ip_gre6
        or not private_ip_gre6
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_privatekharej6(
            local_ip_private, remote_ip_private, private_ip_private
        )
        display_stuff_gre6tap(local_ip_gre6, remote_ip_gre6, private_ip_gre6)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mGRE6tap\033[93m Kharej [6] Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej [6] \033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mIRAN \033[92m Public IP\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[93mChange \033[97mGRE6tap \033[93mPrivate IPV6\033[0m")
        print("5. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_private = new_ip
                ip_parts = new_ip.split(":")
                if new_ip.endswith(":2"):
                    ip_parts[-1] = "1"
                else:
                    ip_parts[-1] = "2"
                counterpart_ip = ":".join(ip_parts)
                local_ip_gre6 = new_ip
                remote_ip_gre6 = counterpart_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[GRE6tap]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_gre6 = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mKharej [6]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input("\033[93mEnter \033[92mIRAN\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "5":
            save_stuff_gre66(
                private_ip_private,
                local_ip_private,
                remote_ip_private,
                is_gre6=False,
            )
            save_stuff_gre66(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Invalid choice. Please select a valid option.")


def gre6tapir6nosec_editmulti_local():
    local_ip_private = local_ip("/etc/private6.sh")
    remote_ip_private = remote_ip("/etc/private6.sh")
    private_ip_private = private_ip1("/etc/private6.sh")

    local_ip_gre6 = local_ip("/etc/gre66.sh")
    remote_ip_gre6 = remote_ip("/etc/gre66.sh")
    private_ip_gre6 = private_gre6multi("/etc/gre66.sh")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("couldn't retrieve IP addresses from private file")
    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("couldn't retrieve IP addresses from gre6tap file")

    if (
        not local_ip_private
        or not remote_ip_private
        or not private_ip_private
        or not local_ip_gre6
        or not remote_ip_gre6
        or not private_ip_gre6
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_privateiran6(
            local_ip_private, remote_ip_private, private_ip_private
        )
        display_stuff_gre6tap(local_ip_gre6, remote_ip_gre6, private_ip_gre6)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mGRE6tap\033[93m IRAN Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN \033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mKHAREJ [6] \033[92m Public IP\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[93mChange \033[97mGRE6tap \033[93mPrivate IPV6\033[0m")
        print("5. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_private = new_ip
                ip_parts = new_ip.split(":")
                if new_ip.endswith(":2"):
                    ip_parts[-1] = "1"
                else:
                    ip_parts[-1] = "2"
                counterpart_ip = ":".join(ip_parts)
                local_ip_gre6 = new_ip
                remote_ip_gre6 = counterpart_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[GRE6tap]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_gre6 = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mIRAN\033[93m Public IP :\033[0m ")
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mKharej [6]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "5":
            save_stuff_gre66(
                private_ip_private,
                local_ip_private,
                remote_ip_private,
                is_gre6=False,
            )
            save_stuff_gre66(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Invalid choice. Please select a valid option.")


def gre6tapkharej7nosec_editmulti_local():
    local_ip_private = local_ip("/etc/private7.sh")
    remote_ip_private = remote_ip("/etc/private7.sh")
    private_ip_private = private_ip1("/etc/private7.sh")

    local_ip_gre6 = local_ip("/etc/gre67.sh")
    remote_ip_gre6 = remote_ip("/etc/gre67.sh")
    private_ip_gre6 = private_gre6multi("/etc/gre67.sh")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("couldn't retrieve IP addresses from private file")
    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("couldn't retrieve IP addresses from gre6tap file")

    if (
        not local_ip_private
        or not remote_ip_private
        or not private_ip_private
        or not local_ip_gre6
        or not remote_ip_gre6
        or not private_ip_gre6
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_privatekharej7(
            local_ip_private, remote_ip_private, private_ip_private
        )
        display_stuff_gre6tap(local_ip_gre6, remote_ip_gre6, private_ip_gre6)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mGRE6tap\033[93m Kharej [7] Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej [7] \033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mIRAN \033[92m Public IP\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[93mChange \033[97mGRE6tap \033[93mPrivate IPV6\033[0m")
        print("5. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_private = new_ip
                ip_parts = new_ip.split(":")
                if new_ip.endswith(":2"):
                    ip_parts[-1] = "1"
                else:
                    ip_parts[-1] = "2"
                counterpart_ip = ":".join(ip_parts)
                local_ip_gre6 = new_ip
                remote_ip_gre6 = counterpart_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[GRE6tap]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_gre6 = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mKharej [7]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input("\033[93mEnter \033[92mIRAN\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "5":
            save_stuff_gre67(
                private_ip_private,
                local_ip_private,
                remote_ip_private,
                is_gre6=False,
            )
            save_stuff_gre67(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Invalid choice. Please select a valid option.")


def gre6tapir7nosec_editmulti_local():
    local_ip_private = local_ip("/etc/private7.sh")
    remote_ip_private = remote_ip("/etc/private7.sh")
    private_ip_private = private_ip1("/etc/private7.sh")

    local_ip_gre6 = local_ip("/etc/gre67.sh")
    remote_ip_gre6 = remote_ip("/etc/gre67.sh")
    private_ip_gre6 = private_gre6multi("/etc/gre67.sh")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("couldn't retrieve IP addresses from private file")
    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("couldn't retrieve IP addresses from gre6tap file")

    if (
        not local_ip_private
        or not remote_ip_private
        or not private_ip_private
        or not local_ip_gre6
        or not remote_ip_gre6
        or not private_ip_gre6
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_privateiran7(
            local_ip_private, remote_ip_private, private_ip_private
        )
        display_stuff_gre6tap(local_ip_gre6, remote_ip_gre6, private_ip_gre6)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mGRE6tap\033[93m IRAN Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN \033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mKHAREJ [7] \033[92m Public IP\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[93mChange \033[97mGRE6tap \033[93mPrivate IPV6\033[0m")
        print("5. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_private = new_ip
                ip_parts = new_ip.split(":")
                if new_ip.endswith(":2"):
                    ip_parts[-1] = "1"
                else:
                    ip_parts[-1] = "2"
                counterpart_ip = ":".join(ip_parts)
                local_ip_gre6 = new_ip
                remote_ip_gre6 = counterpart_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[GRE6tap]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_gre6 = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mIRAN\033[93m Public IP :\033[0m ")
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mKharej [7]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "5":
            save_stuff_gre67(
                private_ip_private,
                local_ip_private,
                remote_ip_private,
                is_gre6=False,
            )
            save_stuff_gre67(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Invalid choice. Please select a valid option.")


def gre6tapkharej8nosec_editmulti_local():
    local_ip_private = local_ip("/etc/private8.sh")
    remote_ip_private = remote_ip("/etc/private8.sh")
    private_ip_private = private_ip1("/etc/private8.sh")

    local_ip_gre6 = local_ip("/etc/gre68.sh")
    remote_ip_gre6 = remote_ip("/etc/gre68.sh")
    private_ip_gre6 = private_gre6multi("/etc/gre68.sh")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("couldn't retrieve IP addresses from private file")
    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("couldn't retrieve IP addresses from gre6tap file")

    if (
        not local_ip_private
        or not remote_ip_private
        or not private_ip_private
        or not local_ip_gre6
        or not remote_ip_gre6
        or not private_ip_gre6
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_privatekharej8(
            local_ip_private, remote_ip_private, private_ip_private
        )
        display_stuff_gre6tap(local_ip_gre6, remote_ip_gre6, private_ip_gre6)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mGRE6tap\033[93m Kharej [8] Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej [8] \033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mIRAN \033[92m Public IP\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[93mChange \033[97mGRE6tap \033[93mPrivate IPV6\033[0m")
        print("5. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_private = new_ip
                ip_parts = new_ip.split(":")
                if new_ip.endswith(":2"):
                    ip_parts[-1] = "1"
                else:
                    ip_parts[-1] = "2"
                counterpart_ip = ":".join(ip_parts)
                local_ip_gre6 = new_ip
                remote_ip_gre6 = counterpart_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[GRE6tap]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_gre6 = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mKharej [8]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input("\033[93mEnter \033[92mIRAN\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "5":
            save_stuff_gre68(
                private_ip_private,
                local_ip_private,
                remote_ip_private,
                is_gre6=False,
            )
            save_stuff_gre68(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Invalid choice. Please select a valid option.")


def gre6tapir8nosec_editmulti_local():
    local_ip_private = local_ip("/etc/private8.sh")
    remote_ip_private = remote_ip("/etc/private8.sh")
    private_ip_private = private_ip1("/etc/private8.sh")

    local_ip_gre6 = local_ip("/etc/gre68.sh")
    remote_ip_gre6 = remote_ip("/etc/gre68.sh")
    private_ip_gre6 = private_gre6multi("/etc/gre68.sh")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("couldn't retrieve IP addresses from private file")
    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("couldn't retrieve IP addresses from gre6tap file")

    if (
        not local_ip_private
        or not remote_ip_private
        or not private_ip_private
        or not local_ip_gre6
        or not remote_ip_gre6
        or not private_ip_gre6
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_privateiran8(
            local_ip_private, remote_ip_private, private_ip_private
        )
        display_stuff_gre6tap(local_ip_gre6, remote_ip_gre6, private_ip_gre6)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mGRE6tap\033[93m IRAN Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN \033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mKHAREJ [8] \033[92m Public IP\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[93mChange \033[97mGRE6tap \033[93mPrivate IPV6\033[0m")
        print("5. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_private = new_ip
                ip_parts = new_ip.split(":")
                if new_ip.endswith(":2"):
                    ip_parts[-1] = "1"
                else:
                    ip_parts[-1] = "2"
                counterpart_ip = ":".join(ip_parts)
                local_ip_gre6 = new_ip
                remote_ip_gre6 = counterpart_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[GRE6tap]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_gre6 = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mIRAN\033[93m Public IP :\033[0m ")
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mKharej [8]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "5":
            save_stuff_gre68(
                private_ip_private,
                local_ip_private,
                remote_ip_private,
                is_gre6=False,
            )
            save_stuff_gre68(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Invalid choice. Please select a valid option.")


def gre6tapkharej9nosec_editmulti_local():
    local_ip_private = local_ip("/etc/private9.sh")
    remote_ip_private = remote_ip("/etc/private9.sh")
    private_ip_private = private_ip1("/etc/private9.sh")

    local_ip_gre6 = local_ip("/etc/gre69.sh")
    remote_ip_gre6 = remote_ip("/etc/gre69.sh")
    private_ip_gre6 = private_gre6multi("/etc/gre69.sh")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("couldn't retrieve IP addresses from private file")
    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("couldn't retrieve IP addresses from gre6tap file")

    if (
        not local_ip_private
        or not remote_ip_private
        or not private_ip_private
        or not local_ip_gre6
        or not remote_ip_gre6
        or not private_ip_gre6
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_privatekharej9(
            local_ip_private, remote_ip_private, private_ip_private
        )
        display_stuff_gre6tap(local_ip_gre6, remote_ip_gre6, private_ip_gre6)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mGRE6tap\033[93m Kharej [9] Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej [9] \033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mIRAN \033[92m Public IP\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[93mChange \033[97mGRE6tap \033[93mPrivate IPV6\033[0m")
        print("5. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_private = new_ip
                ip_parts = new_ip.split(":")
                if new_ip.endswith(":2"):
                    ip_parts[-1] = "1"
                else:
                    ip_parts[-1] = "2"
                counterpart_ip = ":".join(ip_parts)
                local_ip_gre6 = new_ip
                remote_ip_gre6 = counterpart_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[GRE6tap]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_gre6 = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mKharej [9]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input("\033[93mEnter \033[92mIRAN\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "5":
            save_stuff_gre69(
                private_ip_private,
                local_ip_private,
                remote_ip_private,
                is_gre6=False,
            )
            save_stuff_gre69(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Invalid choice. Please select a valid option.")


def gre6tapir9nosec_editmulti_local():
    local_ip_private = local_ip("/etc/private9.sh")
    remote_ip_private = remote_ip("/etc/private9.sh")
    private_ip_private = private_ip1("/etc/private9.sh")

    local_ip_gre6 = local_ip("/etc/gre69.sh")
    remote_ip_gre6 = remote_ip("/etc/gre69.sh")
    private_ip_gre6 = private_gre6multi("/etc/gre69.sh")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("couldn't retrieve IP addresses from private file")
    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("couldn't retrieve IP addresses from gre6tap file")

    if (
        not local_ip_private
        or not remote_ip_private
        or not private_ip_private
        or not local_ip_gre6
        or not remote_ip_gre6
        or not private_ip_gre6
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_privateiran9(
            local_ip_private, remote_ip_private, private_ip_private
        )
        display_stuff_gre6tap(local_ip_gre6, remote_ip_gre6, private_ip_gre6)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mGRE6tap\033[93m IRAN Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN \033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mKHAREJ [9] \033[92m Public IP\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[93mChange \033[97mGRE6tap \033[93mPrivate IPV6\033[0m")
        print("5. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_private = new_ip
                ip_parts = new_ip.split(":")
                if new_ip.endswith(":2"):
                    ip_parts[-1] = "1"
                else:
                    ip_parts[-1] = "2"
                counterpart_ip = ":".join(ip_parts)
                local_ip_gre6 = new_ip
                remote_ip_gre6 = counterpart_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[GRE6tap]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_gre6 = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mIRAN\033[93m Public IP :\033[0m ")
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mKharej [9]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "5":
            save_stuff_gre69(
                private_ip_private,
                local_ip_private,
                remote_ip_private,
                is_gre6=False,
            )
            save_stuff_gre69(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Invalid choice. Please select a valid option.")


def gre6tapkharej10nosec_editmulti_local():
    local_ip_private = local_ip("/etc/private10.sh")
    remote_ip_private = remote_ip("/etc/private10.sh")
    private_ip_private = private_ip1("/etc/private10.sh")

    local_ip_gre6 = local_ip("/etc/gre610.sh")
    remote_ip_gre6 = remote_ip("/etc/gre610.sh")
    private_ip_gre6 = private_gre6multi("/etc/gre610.sh")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("couldn't retrieve IP addresses from private file")
    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("couldn't retrieve IP addresses from gre6tap file")

    if (
        not local_ip_private
        or not remote_ip_private
        or not private_ip_private
        or not local_ip_gre6
        or not remote_ip_gre6
        or not private_ip_gre6
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_privatekharej10(
            local_ip_private, remote_ip_private, private_ip_private
        )
        display_stuff_gre6tap(local_ip_gre6, remote_ip_gre6, private_ip_gre6)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mGRE6tap\033[93m Kharej [10] Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej [10] \033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mIRAN \033[92m Public IP\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[93mChange \033[97mGRE6tap \033[93mPrivate IPV6\033[0m")
        print("5. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_private = new_ip
                ip_parts = new_ip.split(":")
                if new_ip.endswith(":2"):
                    ip_parts[-1] = "1"
                else:
                    ip_parts[-1] = "2"
                counterpart_ip = ":".join(ip_parts)
                local_ip_gre6 = new_ip
                remote_ip_gre6 = counterpart_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[GRE6tap]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_gre6 = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mKharej [10]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input("\033[93mEnter \033[92mIRAN\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "5":
            save_stuff_gre610(
                private_ip_private,
                local_ip_private,
                remote_ip_private,
                is_gre6=False,
            )
            save_stuff_gre610(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Invalid choice. Please select a valid option.")


def gre6tapir10nosec_editmulti_local():
    local_ip_private = local_ip("/etc/private10.sh")
    remote_ip_private = remote_ip("/etc/private10.sh")
    private_ip_private = private_ip1("/etc/private10.sh")

    local_ip_gre6 = local_ip("/etc/gre610.sh")
    remote_ip_gre6 = remote_ip("/etc/gre610.sh")
    private_ip_gre6 = private_gre6multi("/etc/gre610.sh")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("couldn't retrieve IP addresses from private file")
    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("couldn't retrieve IP addresses from gre6tap file")

    if (
        not local_ip_private
        or not remote_ip_private
        or not private_ip_private
        or not local_ip_gre6
        or not remote_ip_gre6
        or not private_ip_gre6
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_privateiran10(
            local_ip_private, remote_ip_private, private_ip_private
        )
        display_stuff_gre6tap(local_ip_gre6, remote_ip_gre6, private_ip_gre6)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mGRE6tap\033[93m IRAN Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN \033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mKHAREJ [10] \033[92m Public IP\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[93mChange \033[97mGRE6tap \033[93mPrivate IPV6\033[0m")
        print("5. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_private = new_ip
                ip_parts = new_ip.split(":")
                if new_ip.endswith(":2"):
                    ip_parts[-1] = "1"
                else:
                    ip_parts[-1] = "2"
                counterpart_ip = ":".join(ip_parts)
                local_ip_gre6 = new_ip
                remote_ip_gre6 = counterpart_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[GRE6tap]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_gre6 = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mIRAN\033[93m Public IP :\033[0m ")
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mKharej [10]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "5":
            save_stuff_gre610(
                private_ip_private,
                local_ip_private,
                remote_ip_private,
                is_gre6=False,
            )
            save_stuff_gre610(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Invalid choice. Please select a valid option.")


# iran 10 kharej 1 #1


def gre6tapiranfive1nosec_editmulti_local():
    local_ip_private = local_ip("/etc/private1.sh")
    remote_ip_private = remote_ip("/etc/private1.sh")
    private_ip_private = private_ip1("/etc/private1.sh")

    local_ip_gre6 = local_ip("/etc/gre61.sh")
    remote_ip_gre6 = remote_ip("/etc/gre61.sh")
    private_ip_gre6 = private_gre6multi("/etc/gre61.sh")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("couldn't retrieve IP addresses from private file")
    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("couldn't retrieve IP addresses from gre6tap file")

    if (
        not local_ip_private
        or not remote_ip_private
        or not private_ip_private
        or not local_ip_gre6
        or not remote_ip_gre6
        or not private_ip_gre6
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_privateiranfive1(
            local_ip_private, remote_ip_private, private_ip_private
        )
        display_stuff_gre6tap(local_ip_gre6, remote_ip_gre6, private_ip_gre6)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mGRE6tap\033[93m IRAN [1] Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN [1] \033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mKharej \033[92m Public IP\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[93mChange \033[97mGRE6tap \033[93mPrivate IPV6\033[0m")
        print("5. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_private = new_ip
                ip_parts = new_ip.split(":")
                if new_ip.endswith(":2"):
                    ip_parts[-1] = "1"
                else:
                    ip_parts[-1] = "2"
                counterpart_ip = ":".join(ip_parts)
                local_ip_gre6 = new_ip
                remote_ip_gre6 = counterpart_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[GRE6tap]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_gre6 = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mIRAN [1]\033[93m Public IP :\033[0m ")
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input("\033[93mEnter \033[92mKharej\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "5":
            save_stuff_gre61(
                private_ip_private,
                local_ip_private,
                remote_ip_private,
                is_gre6=False,
            )
            save_stuff_gre61(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Invalid choice. Please select a valid option.")


def gre6tapkharejone1nosec_editmulti_local():
    local_ip_private = local_ip("/etc/private1.sh")
    remote_ip_private = remote_ip("/etc/private1.sh")
    private_ip_private = private_ip1("/etc/private1.sh")

    local_ip_gre6 = local_ip("/etc/gre61.sh")
    remote_ip_gre6 = remote_ip("/etc/gre61.sh")
    private_ip_gre6 = private_gre6multi("/etc/gre61.sh")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("couldn't retrieve IP addresses from private file")
    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("couldn't retrieve IP addresses from gre6tap file")

    if (
        not local_ip_private
        or not remote_ip_private
        or not private_ip_private
        or not local_ip_gre6
        or not remote_ip_gre6
        or not private_ip_gre6
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_privatekharejone1(
            local_ip_private, remote_ip_private, private_ip_private
        )
        display_stuff_gre6tap(local_ip_gre6, remote_ip_gre6, private_ip_gre6)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mGRE6tap\033[93m Kharej Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej \033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mIRAN [1] \033[92m Public IP\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[93mChange \033[97mGRE6tap \033[93mPrivate IPV6\033[0m")
        print("5. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_private = new_ip
                ip_parts = new_ip.split(":")
                if new_ip.endswith(":2"):
                    ip_parts[-1] = "1"
                else:
                    ip_parts[-1] = "2"
                counterpart_ip = ":".join(ip_parts)
                local_ip_gre6 = new_ip
                remote_ip_gre6 = counterpart_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[GRE6tap]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_gre6 = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mKharej\033[93m Public IP :\033[0m ")
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input("\033[93mEnter \033[92mIRAN [1]\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "5":
            save_stuff_gre61(
                private_ip_private,
                local_ip_private,
                remote_ip_private,
                is_gre6=False,
            )
            save_stuff_gre61(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Invalid choice. Please select a valid option.")


# iran 10 kharej 1 #2


def gre6tapiranfive2nosec_editmulti_local():
    local_ip_private = local_ip("/etc/private2.sh")
    remote_ip_private = remote_ip("/etc/private2.sh")
    private_ip_private = private_ip1("/etc/private2.sh")

    local_ip_gre6 = local_ip("/etc/gre62.sh")
    remote_ip_gre6 = remote_ip("/etc/gre62.sh")
    private_ip_gre6 = private_gre6multi("/etc/gre62.sh")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("couldn't retrieve IP addresses from private file")
    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("couldn't retrieve IP addresses from gre6tap file")

    if (
        not local_ip_private
        or not remote_ip_private
        or not private_ip_private
        or not local_ip_gre6
        or not remote_ip_gre6
        or not private_ip_gre6
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_privateiranfive2(
            local_ip_private, remote_ip_private, private_ip_private
        )
        display_stuff_gre6tap(local_ip_gre6, remote_ip_gre6, private_ip_gre6)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mGRE6tap\033[93m IRAN [2] Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN [2] \033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mKharej \033[92m Public IP\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[93mChange \033[97mGRE6tap \033[93mPrivate IPV6\033[0m")
        print("5. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_private = new_ip
                ip_parts = new_ip.split(":")
                if new_ip.endswith(":2"):
                    ip_parts[-1] = "1"
                else:
                    ip_parts[-1] = "2"
                counterpart_ip = ":".join(ip_parts)
                local_ip_gre6 = new_ip
                remote_ip_gre6 = counterpart_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[GRE6tap]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_gre6 = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mIRAN [2]\033[93m Public IP :\033[0m ")
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input("\033[93mEnter \033[92mKharej\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "5":
            save_stuff_gre62(
                private_ip_private,
                local_ip_private,
                remote_ip_private,
                is_gre6=False,
            )
            save_stuff_gre62(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Invalid choice. Please select a valid option.")


def gre6tapkharejone2nosec_editmulti_local():
    local_ip_private = local_ip("/etc/private2.sh")
    remote_ip_private = remote_ip("/etc/private2.sh")
    private_ip_private = private_ip1("/etc/private2.sh")

    local_ip_gre6 = local_ip("/etc/gre62.sh")
    remote_ip_gre6 = remote_ip("/etc/gre62.sh")
    private_ip_gre6 = private_gre6multi("/etc/gre62.sh")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("couldn't retrieve IP addresses from private file")
    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("couldn't retrieve IP addresses from gre6tap file")

    if (
        not local_ip_private
        or not remote_ip_private
        or not private_ip_private
        or not local_ip_gre6
        or not remote_ip_gre6
        or not private_ip_gre6
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_privatekharejone2(
            local_ip_private, remote_ip_private, private_ip_private
        )
        display_stuff_gre6tap(local_ip_gre6, remote_ip_gre6, private_ip_gre6)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mGRE6tap\033[93m Kharej Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej \033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mIRAN [2] \033[92m Public IP\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[93mChange \033[97mGRE6tap \033[93mPrivate IPV6\033[0m")
        print("5. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_private = new_ip
                ip_parts = new_ip.split(":")
                if new_ip.endswith(":2"):
                    ip_parts[-1] = "1"
                else:
                    ip_parts[-1] = "2"
                counterpart_ip = ":".join(ip_parts)
                local_ip_gre6 = new_ip
                remote_ip_gre6 = counterpart_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[GRE6tap]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_gre6 = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mKharej\033[93m Public IP :\033[0m ")
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input("\033[93mEnter \033[92mIRAN [2]\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "5":
            save_stuff_gre62(
                private_ip_private,
                local_ip_private,
                remote_ip_private,
                is_gre6=False,
            )
            save_stuff_gre62(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Invalid choice. Please select a valid option.")


# iran 10 kharej 1 #3


def gre6tapiranfive3nosec_editmulti_local():
    local_ip_private = local_ip("/etc/private3.sh")
    remote_ip_private = remote_ip("/etc/private3.sh")
    private_ip_private = private_ip1("/etc/private3.sh")

    local_ip_gre6 = local_ip("/etc/gre63.sh")
    remote_ip_gre6 = remote_ip("/etc/gre63.sh")
    private_ip_gre6 = private_gre6multi("/etc/gre63.sh")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("couldn't retrieve IP addresses from private file")
    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("couldn't retrieve IP addresses from gre6tap file")

    if (
        not local_ip_private
        or not remote_ip_private
        or not private_ip_private
        or not local_ip_gre6
        or not remote_ip_gre6
        or not private_ip_gre6
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_privateiranfive3(
            local_ip_private, remote_ip_private, private_ip_private
        )
        display_stuff_gre6tap(local_ip_gre6, remote_ip_gre6, private_ip_gre6)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mGRE6tap\033[93m IRAN [3] Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN [3] \033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mKharej \033[92m Public IP\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[93mChange \033[97mGRE6tap \033[93mPrivate IPV6\033[0m")
        print("5. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_private = new_ip
                ip_parts = new_ip.split(":")
                if new_ip.endswith(":2"):
                    ip_parts[-1] = "1"
                else:
                    ip_parts[-1] = "2"
                counterpart_ip = ":".join(ip_parts)
                local_ip_gre6 = new_ip
                remote_ip_gre6 = counterpart_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[GRE6tap]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_gre6 = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mIRAN [3]\033[93m Public IP :\033[0m ")
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input("\033[93mEnter \033[92mKharej\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "5":
            save_stuff_gre63(
                private_ip_private,
                local_ip_private,
                remote_ip_private,
                is_gre6=False,
            )
            save_stuff_gre63(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Invalid choice. Please select a valid option.")


def gre6tapkharejone3nosec_editmulti_local():
    local_ip_private = local_ip("/etc/private3.sh")
    remote_ip_private = remote_ip("/etc/private3.sh")
    private_ip_private = private_ip1("/etc/private3.sh")

    local_ip_gre6 = local_ip("/etc/gre63.sh")
    remote_ip_gre6 = remote_ip("/etc/gre63.sh")
    private_ip_gre6 = private_gre6multi("/etc/gre63.sh")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("couldn't retrieve IP addresses from private file")
    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("couldn't retrieve IP addresses from gre6tap file")

    if (
        not local_ip_private
        or not remote_ip_private
        or not private_ip_private
        or not local_ip_gre6
        or not remote_ip_gre6
        or not private_ip_gre6
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_privatekharejone3(
            local_ip_private, remote_ip_private, private_ip_private
        )
        display_stuff_gre6tap(local_ip_gre6, remote_ip_gre6, private_ip_gre6)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mGRE6tap\033[93m Kharej Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej \033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mIRAN [3] \033[92m Public IP\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[93mChange \033[97mGRE6tap \033[93mPrivate IPV6\033[0m")
        print("5. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_private = new_ip
                ip_parts = new_ip.split(":")
                if new_ip.endswith(":2"):
                    ip_parts[-1] = "1"
                else:
                    ip_parts[-1] = "2"
                counterpart_ip = ":".join(ip_parts)
                local_ip_gre6 = new_ip
                remote_ip_gre6 = counterpart_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[GRE6tap]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_gre6 = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mKharej\033[93m Public IP :\033[0m ")
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input("\033[93mEnter \033[92mIRAN [3]\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "5":
            save_stuff_gre63(
                private_ip_private,
                local_ip_private,
                remote_ip_private,
                is_gre6=False,
            )
            save_stuff_gre63(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Invalid choice. Please select a valid option.")


# iran 10 kharej 1 #4


def gre6tapiranfive4nosec_editmulti_local():
    local_ip_private = local_ip("/etc/private4.sh")
    remote_ip_private = remote_ip("/etc/private4.sh")
    private_ip_private = private_ip1("/etc/private4.sh")

    local_ip_gre6 = local_ip("/etc/gre64.sh")
    remote_ip_gre6 = remote_ip("/etc/gre64.sh")
    private_ip_gre6 = private_gre6multi("/etc/gre64.sh")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("couldn't retrieve IP addresses from private file")
    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("couldn't retrieve IP addresses from gre6tap file")

    if (
        not local_ip_private
        or not remote_ip_private
        or not private_ip_private
        or not local_ip_gre6
        or not remote_ip_gre6
        or not private_ip_gre6
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_privateiranfive4(
            local_ip_private, remote_ip_private, private_ip_private
        )
        display_stuff_gre6tap(local_ip_gre6, remote_ip_gre6, private_ip_gre6)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mGRE6tap\033[93m IRAN [4] Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN [4] \033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mKharej \033[92m Public IP\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[93mChange \033[97mGRE6tap \033[93mPrivate IPV6\033[0m")
        print("5. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_private = new_ip
                ip_parts = new_ip.split(":")
                if new_ip.endswith(":2"):
                    ip_parts[-1] = "1"
                else:
                    ip_parts[-1] = "2"
                counterpart_ip = ":".join(ip_parts)
                local_ip_gre6 = new_ip
                remote_ip_gre6 = counterpart_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[GRE6tap]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_gre6 = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mIRAN [4]\033[93m Public IP :\033[0m ")
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input("\033[93mEnter \033[92mKharej\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "5":
            save_stuff_gre64(
                private_ip_private,
                local_ip_private,
                remote_ip_private,
                is_gre6=False,
            )
            save_stuff_gre64(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Invalid choice. Please select a valid option.")


def gre6tapkharejone4nosec_editmulti_local():
    local_ip_private = local_ip("/etc/private4.sh")
    remote_ip_private = remote_ip("/etc/private4.sh")
    private_ip_private = private_ip1("/etc/private4.sh")

    local_ip_gre6 = local_ip("/etc/gre64.sh")
    remote_ip_gre6 = remote_ip("/etc/gre64.sh")
    private_ip_gre6 = private_gre6multi("/etc/gre64.sh")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("couldn't retrieve IP addresses from private file")
    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("couldn't retrieve IP addresses from gre6tap file")

    if (
        not local_ip_private
        or not remote_ip_private
        or not private_ip_private
        or not local_ip_gre6
        or not remote_ip_gre6
        or not private_ip_gre6
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_privatekharejone4(
            local_ip_private, remote_ip_private, private_ip_private
        )
        display_stuff_gre6tap(local_ip_gre6, remote_ip_gre6, private_ip_gre6)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mGRE6tap\033[93m Kharej Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej \033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mIRAN [4] \033[92m Public IP\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[93mChange \033[97mGRE6tap \033[93mPrivate IPV6\033[0m")
        print("5. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_private = new_ip
                ip_parts = new_ip.split(":")
                if new_ip.endswith(":2"):
                    ip_parts[-1] = "1"
                else:
                    ip_parts[-1] = "2"
                counterpart_ip = ":".join(ip_parts)
                local_ip_gre6 = new_ip
                remote_ip_gre6 = counterpart_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[GRE6tap]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_gre6 = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mKharej\033[93m Public IP :\033[0m ")
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input("\033[93mEnter \033[92mIRAN [4]\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "5":
            save_stuff_gre64(
                private_ip_private,
                local_ip_private,
                remote_ip_private,
                is_gre6=False,
            )
            save_stuff_gre64(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Invalid choice. Please select a valid option.")


# iran 10 kharej 1 #5


def gre6tapiranfive5nosec_editmulti_local():
    local_ip_private = local_ip("/etc/private5.sh")
    remote_ip_private = remote_ip("/etc/private5.sh")
    private_ip_private = private_ip1("/etc/private5.sh")

    local_ip_gre6 = local_ip("/etc/gre65.sh")
    remote_ip_gre6 = remote_ip("/etc/gre65.sh")
    private_ip_gre6 = private_gre6multi("/etc/gre65.sh")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("couldn't retrieve IP addresses from private file")
    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("couldn't retrieve IP addresses from gre6tap file")

    if (
        not local_ip_private
        or not remote_ip_private
        or not private_ip_private
        or not local_ip_gre6
        or not remote_ip_gre6
        or not private_ip_gre6
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_privateiranfive5(
            local_ip_private, remote_ip_private, private_ip_private
        )
        display_stuff_gre6tap(local_ip_gre6, remote_ip_gre6, private_ip_gre6)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mGRE6tap\033[93m IRAN [5] Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN [5] \033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mKharej \033[92m Public IP\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[93mChange \033[97mGRE6tap \033[93mPrivate IPV6\033[0m")
        print("5. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_private = new_ip
                ip_parts = new_ip.split(":")
                if new_ip.endswith(":2"):
                    ip_parts[-1] = "1"
                else:
                    ip_parts[-1] = "2"
                counterpart_ip = ":".join(ip_parts)
                local_ip_gre6 = new_ip
                remote_ip_gre6 = counterpart_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[GRE6tap]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_gre6 = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mIRAN [5]\033[93m Public IP :\033[0m ")
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input("\033[93mEnter \033[92mKharej\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "5":
            save_stuff_gre65(
                private_ip_private,
                local_ip_private,
                remote_ip_private,
                is_gre6=False,
            )
            save_stuff_gre65(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Invalid choice. Please select a valid option.")


def gre6tapkharejone5nosec_editmulti_local():
    local_ip_private = local_ip("/etc/private5.sh")
    remote_ip_private = remote_ip("/etc/private5.sh")
    private_ip_private = private_ip1("/etc/private5.sh")

    local_ip_gre6 = local_ip("/etc/gre65.sh")
    remote_ip_gre6 = remote_ip("/etc/gre65.sh")
    private_ip_gre6 = private_gre6multi("/etc/gre65.sh")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("couldn't retrieve IP addresses from private file")
    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("couldn't retrieve IP addresses from gre6tap file")

    if (
        not local_ip_private
        or not remote_ip_private
        or not private_ip_private
        or not local_ip_gre6
        or not remote_ip_gre6
        or not private_ip_gre6
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_privatekharejone5(
            local_ip_private, remote_ip_private, private_ip_private
        )
        display_stuff_gre6tap(local_ip_gre6, remote_ip_gre6, private_ip_gre6)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mGRE6tap\033[93m Kharej Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej \033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mIRAN [5] \033[92m Public IP\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[93mChange \033[97mGRE6tap \033[93mPrivate IPV6\033[0m")
        print("5. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_private = new_ip
                ip_parts = new_ip.split(":")
                if new_ip.endswith(":2"):
                    ip_parts[-1] = "1"
                else:
                    ip_parts[-1] = "2"
                counterpart_ip = ":".join(ip_parts)
                local_ip_gre6 = new_ip
                remote_ip_gre6 = counterpart_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[GRE6tap]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_gre6 = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mKharej\033[93m Public IP :\033[0m ")
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input("\033[93mEnter \033[92mIRAN [5]\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "5":
            save_stuff_gre65(
                private_ip_private,
                local_ip_private,
                remote_ip_private,
                is_gre6=False,
            )
            save_stuff_gre65(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Invalid choice. Please select a valid option.")


def gre6tapsec_multiedit_local():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print("\033[92m(   ) \033[92mEdit local\033[93m GRE6tap + IPSEC Menu\033[0m")
    print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[96mKharej\033[92m[5] \033[93mIRAN\033[92m[1]\033[0m")
    print("2. \033[96mKharej\033[92m[1] \033[93mIRAN\033[92m[5]  \033[0m")
    print("3. \033[94mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        choice = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if choice == "1":
            gre6tapsec_edit_localkharej_multi()
            break
        elif choice == "2":
            gre6tapsec_edit_localiran_multi()
            break
        elif choice == "3":
            clear()
            gre6tap_multiedit_local()
            break
        else:
            print("Invalid choice.")


def gre6tapsec_edit_localiran_multi():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print(
        "\033[92m(   ) \033[93mGRE6tap + IPSEC \033[92m[5]IRAN\033[96m [1]Kharej\033[93m Menu\033[0m"
    )
    print(
        '\033[92m "-"\033[93m══════════════════════════════════════════════════════════\033[0m'
    )
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[92mIRAN[1]\033[0m")
    print("2. \033[92mIRAN[2]\033[0m")
    print("3. \033[93mIRAN[3]\033[0m")
    print("4. \033[92mIRAN[4]\033[0m")
    print("5. \033[92mIRAN[5]\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    print("6. \033[93mKharej Menu\033[0m")
    print("0. \033[94mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if server_type == "1":
            gre6tapiranfive1sec_editmulti_local()
            break
        elif server_type == "2":
            gre6tapiranfive2sec_editmulti_local()
            break
        elif server_type == "3":
            gre6tapiranfive3sec_editmulti_local()
            break
        elif server_type == "4":
            gre6tapiranfive4sec_editmulti_local()
            break
        elif server_type == "5":
            gre6tapiranfive5sec_editmulti_local()
            break
        elif server_type == "6":
            gre6tapkharejonesec_editmulti_localmenu()
            break
        elif server_type == "0":
            os.system("clear")
            gre6tapsec_multiedit_local()
            break
        else:
            print("Invalid choice.")


def gre6tapkharejonesec_editmulti_localmenu():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print(
        "\033[92m(   ) \033[93mGRE6tap + IPSEC \033[92m[5]IRAN\033[96m [1]Kharej\033[93m Menu\033[0m"
    )
    print(
        '\033[92m "-"\033[93m══════════════════════════════════════════════════════════\033[0m'
    )
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mThis is Kharej menu:\033[0m")
    print("1. \033[92mServer[1]\033[0m")
    print("2. \033[92mServer[2]\033[0m")
    print("3. \033[93mServer[3]\033[0m")
    print("4. \033[92mServer[4]\033[0m")
    print("5. \033[92mServer[5]\033[0m")
    print("0. \033[94mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if server_type == "1":
            gre6tapkharejone1sec_editmulti_local()
            break
        elif server_type == "2":
            gre6tapkharejone2sec_editmulti_local()
            break
        elif server_type == "3":
            gre6tapkharejone3sec_editmulti_local()
            break
        elif server_type == "4":
            gre6tapkharejone4sec_editmulti_local()
            break
        elif server_type == "5":
            gre6tapkharejone5sec_editmulti_local()
            break
        elif server_type == "0":
            os.system("clear")
            gre6tapsec_multiedit_local()
            break
        else:
            print("Invalid choice.")


def gre6tapsec_edit_localkharej_multi():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print(
        "\033[92m(   ) \033[93mGRE6tap + IPSEC \033[92m[5]Kharej\033[96m [1]IRAN\033[93m Menu\033[0m"
    )
    print(
        '\033[92m "-"\033[93m══════════════════════════════════════════════════════════\033[0m'
    )
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[92mKharej[1]\033[0m")
    print("2. \033[92mKharej[2]\033[0m")
    print("3. \033[93mKharej[3]\033[0m")
    print("4. \033[92mKharej[4]\033[0m")
    print("5. \033[92mKharej[5]\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    print("6. \033[93mIRAN Menu\033[0m")
    print("0. \033[94mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if server_type == "1":
            gre6tapkharej1sec_editmulti_local()
            break
        elif server_type == "2":
            gre6tapkharej2sec_editmulti_local()
            break
        elif server_type == "3":
            gre6tapkharej3sec_editmulti_local()
            break
        elif server_type == "4":
            gre6tapkharej4sec_editmulti_local()
            break
        elif server_type == "5":
            gre6tapkharej5sec_editmulti_local()
            break
        elif server_type == "6":
            gre6tapiransec_editmulti_local()
            break
        elif server_type == "0":
            os.system("clear")
            gre6tapsec_multiedit_local()
            break
        else:
            print("Invalid choice.")


def gre6tapiransec_editmulti_local():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print(
        "\033[92m(   ) \033[93mGRE6tap + IPSEC \033[92m[5]Kharej\033[96m [1]IRAN\033[93m Menu\033[0m"
    )
    print(
        '\033[92m "-"\033[93m══════════════════════════════════════════════════════════\033[0m'
    )
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mThis is IRAN menu:\033[0m")
    print("1. \033[92mServer[1]\033[0m")
    print("2. \033[92mServer[2]\033[0m")
    print("3. \033[93mServer[3]\033[0m")
    print("4. \033[92mServer[4]\033[0m")
    print("5. \033[92mServer[5]\033[0m")
    print("0. \033[94mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if server_type == "1":
            gre6tapir1sec_editmulti_local()
            break
        elif server_type == "2":
            gre6tapir2sec_editmulti_local()
            break
        elif server_type == "3":
            gre6tapir3sec_editmulti_local()
            break
        elif server_type == "4":
            gre6tapir4sec_editmulti_local()
            break
        elif server_type == "5":
            gre6tapir5sec_editmulti_local()
            break
        elif server_type == "0":
            os.system("clear")
            gre6tapsec_multiedit_local()
            break
        else:
            print("Invalid choice.")


def gre6tapkharej1sec_editmulti_local():
    local_ip_private = local_ip("/etc/private1.sh")
    remote_ip_private = remote_ip("/etc/private1.sh")
    private_ip_private = private_ip1("/etc/private1.sh")

    local_ip_gre6 = local_ip("/etc/gre61.sh")
    remote_ip_gre6 = remote_ip("/etc/gre61.sh")
    private_ip_gre6 = private_gre6multi("/etc/gre61.sh")

    ipsecsecret = get_ipsecsecret("/etc/ipsec.secrets")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("couldn't retrieve IP addresses from private file")
    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("couldn't retrieve IP addresses from gre6tap file")
    if not ipsecsecret:
        print("couldn't retrieve IPsec secret key from ipsec file")

    if (
        not local_ip_private
        or not remote_ip_private
        or not private_ip_private
        or not local_ip_gre6
        or not remote_ip_gre6
        or not private_ip_gre6
        or not ipsecsecret
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_privatekharej1(
            local_ip_private, remote_ip_private, private_ip_private
        )
        display_stuff_gre6tap(local_ip_gre6, remote_ip_gre6, private_ip_gre6)

        display_ipsecsecret(ipsecsecret)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mGRE6tap + IPSEC\033[93m Kharej [1] Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej [1] \033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mIRAN \033[92m Public IP\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[93mChange \033[97mGRE6tap \033[93mPrivate IPV6\033[0m")
        print("5. \033[93mChange IPSEC \033[92mSecret Key\033[0m")
        print("6. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_private = new_ip
                ip_parts = new_ip.split(":")
                if new_ip.endswith(":2"):
                    ip_parts[-1] = "1"
                else:
                    ip_parts[-1] = "2"
                counterpart_ip = ":".join(ip_parts)
                local_ip_gre6 = new_ip
                remote_ip_gre6 = counterpart_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[GRE6tap]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_gre6
                private_ip_gre6 = new_ip

                update_ipfile_gre61("/etc/ipsec1.conf", new_ip, update_type="ipsec")
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mKharej [1]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input("\033[93mEnter \033[92mIRAN\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "5":
            new_key = input(
                "\033[93mEnter new \033[92mIPsec \033[93mSecret Key: \033[0m"
            )
            if new_key:
                update_ipsecsecret("/etc/ipsec.secrets", new_key)
                ipsecsecret = new_key
            else:
                print("\033[91mCrazy Secret Key\033[0m")
        elif choice == "6":
            save_stuff_gre6sec1(
                private_ip_private,
                local_ip_private,
                remote_ip_private,
                is_gre6=False,
            )
            save_stuff_gre6sec1(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            update_ipsec_ip(private_ip_gre6)
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Please select a valid option.")


def gre6tapir1sec_editmulti_local():
    local_ip_private = local_ip("/etc/private1.sh")
    remote_ip_private = remote_ip("/etc/private1.sh")
    private_ip_private = private_ip1("/etc/private1.sh")

    local_ip_gre6 = local_ip("/etc/gre61.sh")
    remote_ip_gre6 = remote_ip("/etc/gre61.sh")
    private_ip_gre6 = private_gre6multi("/etc/gre61.sh")

    ipsecsecret = get_ipsecsecret("/etc/ipsec.secrets")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("couldn't retrieve IP addresses from private file")
    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("couldn't retrieve IP addresses from gre6tap file")
    if not ipsecsecret:
        print("couldn't retrieve IPsec secret key from ipsec file")

    if (
        not local_ip_private
        or not remote_ip_private
        or not private_ip_private
        or not local_ip_gre6
        or not remote_ip_gre6
        or not private_ip_gre6
        or not ipsecsecret
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_privateiran1(
            local_ip_private, remote_ip_private, private_ip_private
        )
        display_stuff_gre6tap(local_ip_gre6, remote_ip_gre6, private_ip_gre6)

        display_ipsecsecret(ipsecsecret)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mGRE6tap + IPSEC\033[93m IRAN Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN \033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mKharej [1] \033[92m Public IP\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[93mChange \033[97mGRE6tap \033[93mPrivate IPV6\033[0m")
        print("5. \033[93mChange IPSEC \033[92mSecret Key\033[0m")
        print("6. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter new private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_private = new_ip
                ip_parts = new_ip.split(":")
                if new_ip.endswith(":2"):
                    ip_parts[-1] = "1"
                else:
                    ip_parts[-1] = "2"
                counterpart_ip = ":".join(ip_parts)
                local_ip_gre6 = new_ip
                remote_ip_gre6 = counterpart_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter new private IPv6 address \033[96m[GRE6tap]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_gre6
                private_ip_gre6 = new_ip

                update_ipsec_conf_irangre61("/etc/ipsec1.conf", new_ip)
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mIRAN\033[93m Public IP :\033[0m ")
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mKharej [1]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "5":
            new_key = input(
                "\033[93mEnter new \033[92mIPsec \033[93mSecret Key: \033[0m"
            )
            if new_key:
                update_ipsecsecret("/etc/ipsec.secrets", new_key)
                ipsecsecret = new_key
            else:
                print("\033[91mCrazy Secret Key\033[0m")
        elif choice == "6":
            save_stuff_gre6sec1_iran(
                private_ip_private,
                local_ip_private,
                remote_ip_private,
                is_gre6=False,
            )
            save_stuff_gre6sec1_iran(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            update_ipsec_ip_multi(private_ip_gre6)
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Please select a valid option.")


def gre6tapkharej2sec_editmulti_local():
    local_ip_private = local_ip("/etc/private2.sh")
    remote_ip_private = remote_ip("/etc/private2.sh")
    private_ip_private = private_ip1("/etc/private2.sh")

    local_ip_gre6 = local_ip("/etc/gre62.sh")
    remote_ip_gre6 = remote_ip("/etc/gre62.sh")
    private_ip_gre6 = private_gre6multi("/etc/gre62.sh")

    ipsecsecret = get_ipsecsecret("/etc/ipsec.secrets")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("couldn't retrieve IP addresses from private file")
    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("couldn't retrieve IP addresses from gre6tap file")
    if not ipsecsecret:
        print("couldn't retrieve IPsec secret key from ipsec file")

    if (
        not local_ip_private
        or not remote_ip_private
        or not private_ip_private
        or not local_ip_gre6
        or not remote_ip_gre6
        or not private_ip_gre6
        or not ipsecsecret
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_privatekharej2(
            local_ip_private, remote_ip_private, private_ip_private
        )
        display_stuff_gre6tap(local_ip_gre6, remote_ip_gre6, private_ip_gre6)

        display_ipsecsecret(ipsecsecret)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mGRE6tap + IPSEC\033[93m Kharej [2] Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej [2] \033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mIRAN \033[92m Public IP\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[93mChange \033[97mGRE6tap \033[93mPrivate IPV6\033[0m")
        print("5. \033[93mChange IPSEC \033[92mSecret Key\033[0m")
        print("6. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_private = new_ip
                ip_parts = new_ip.split(":")
                if new_ip.endswith(":2"):
                    ip_parts[-1] = "1"
                else:
                    ip_parts[-1] = "2"
                counterpart_ip = ":".join(ip_parts)
                local_ip_gre6 = new_ip
                remote_ip_gre6 = counterpart_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[GRE6tap]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_gre6
                private_ip_gre6 = new_ip

                update_ipfile_gre62("/etc/ipsec1.conf", new_ip, update_type="ipsec")
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mKharej [2]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input("\033[93mEnter \033[92mIRAN\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "5":
            new_key = input(
                "\033[93mEnter new \033[92mIPsec \033[93mSecret Key: \033[0m"
            )
            if new_key:
                update_ipsecsecret("/etc/ipsec.secrets", new_key)
                ipsecsecret = new_key
            else:
                print("\033[91mCrazy Secret Key\033[0m")
        elif choice == "6":
            save_stuff_gre6sec2(
                private_ip_private,
                local_ip_private,
                remote_ip_private,
                is_gre6=False,
            )
            save_stuff_gre6sec2(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            update_ipsec_ip(private_ip_gre6)
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Please select a valid option.")


def gre6tapir2sec_editmulti_local():
    local_ip_private = local_ip("/etc/private2.sh")
    remote_ip_private = remote_ip("/etc/private2.sh")
    private_ip_private = private_ip1("/etc/private2.sh")

    local_ip_gre6 = local_ip("/etc/gre62.sh")
    remote_ip_gre6 = remote_ip("/etc/gre62.sh")
    private_ip_gre6 = private_gre6multi("/etc/gre62.sh")

    ipsecsecret = get_ipsecsecret("/etc/ipsec.secrets")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("couldn't retrieve IP addresses from private file")
    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("couldn't retrieve IP addresses from gre6tap file")
    if not ipsecsecret:
        print("couldn't retrieve IPsec secret key from ipsec file")

    if (
        not local_ip_private
        or not remote_ip_private
        or not private_ip_private
        or not local_ip_gre6
        or not remote_ip_gre6
        or not private_ip_gre6
        or not ipsecsecret
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_privateiran2(
            local_ip_private, remote_ip_private, private_ip_private
        )
        display_stuff_gre6tap(local_ip_gre6, remote_ip_gre6, private_ip_gre6)

        display_ipsecsecret(ipsecsecret)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mGRE6tap + IPSEC\033[93m IRAN Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN \033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mKharej [2] \033[92m Public IP\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[93mChange \033[97mGRE6tap \033[93mPrivate IPV6\033[0m")
        print("5. \033[93mChange IPSEC \033[92mSecret Key\033[0m")
        print("6. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter new private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_private = new_ip
                ip_parts = new_ip.split(":")
                if new_ip.endswith(":2"):
                    ip_parts[-1] = "1"
                else:
                    ip_parts[-1] = "2"
                counterpart_ip = ":".join(ip_parts)
                local_ip_gre6 = new_ip
                remote_ip_gre6 = counterpart_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter new private IPv6 address \033[96m[GRE6tap]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_gre6
                private_ip_gre6 = new_ip

                update_ipsec_conf_irangre62("/etc/ipsec1.conf", new_ip)
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mIRAN\033[93m Public IP :\033[0m ")
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mKharej [2]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "5":
            new_key = input(
                "\033[93mEnter new \033[92mIPsec \033[93mSecret Key: \033[0m"
            )
            if new_key:
                update_ipsecsecret("/etc/ipsec.secrets", new_key)
                ipsecsecret = new_key
            else:
                print("\033[91mCrazy Secret Key\033[0m")
        elif choice == "6":
            save_stuff_gre6sec2_iran(
                private_ip_private,
                local_ip_private,
                remote_ip_private,
                is_gre6=False,
            )
            save_stuff_gre6sec2_iran(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            update_ipsec_ip_multi2(private_ip_gre6)
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Please select a valid option.")


def gre6tapkharej3sec_editmulti_local():
    local_ip_private = local_ip("/etc/private3.sh")
    remote_ip_private = remote_ip("/etc/private3.sh")
    private_ip_private = private_ip1("/etc/private3.sh")

    local_ip_gre6 = local_ip("/etc/gre63.sh")
    remote_ip_gre6 = remote_ip("/etc/gre63.sh")
    private_ip_gre6 = private_gre6multi("/etc/gre63.sh")

    ipsecsecret = get_ipsecsecret("/etc/ipsec.secrets")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("couldn't retrieve IP addresses from private file")
    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("couldn't retrieve IP addresses from gre6tap file")
    if not ipsecsecret:
        print("couldn't retrieve IPsec secret key from ipsec file")

    if (
        not local_ip_private
        or not remote_ip_private
        or not private_ip_private
        or not local_ip_gre6
        or not remote_ip_gre6
        or not private_ip_gre6
        or not ipsecsecret
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_privatekharej3(
            local_ip_private, remote_ip_private, private_ip_private
        )
        display_stuff_gre6tap(local_ip_gre6, remote_ip_gre6, private_ip_gre6)

        display_ipsecsecret(ipsecsecret)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mGRE6tap + IPSEC\033[93m Kharej [3] Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej [3] \033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mIRAN \033[92m Public IP\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[93mChange \033[97mGRE6tap \033[93mPrivate IPV6\033[0m")
        print("5. \033[93mChange IPSEC \033[92mSecret Key\033[0m")
        print("6. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_private = new_ip
                ip_parts = new_ip.split(":")
                if new_ip.endswith(":2"):
                    ip_parts[-1] = "1"
                else:
                    ip_parts[-1] = "2"
                counterpart_ip = ":".join(ip_parts)
                local_ip_gre6 = new_ip
                remote_ip_gre6 = counterpart_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[GRE6tap]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_gre6
                private_ip_gre6 = new_ip

                update_ipfile_gre63("/etc/ipsec1.conf", new_ip, update_type="ipsec")
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mKharej [3]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input("\033[93mEnter \033[92mIRAN\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "5":
            new_key = input(
                "\033[93mEnter new \033[92mIPsec \033[93mSecret Key: \033[0m"
            )
            if new_key:
                update_ipsecsecret("/etc/ipsec.secrets", new_key)
                ipsecsecret = new_key
            else:
                print("\033[91mCrazy Secret Key\033[0m")
        elif choice == "6":
            save_stuff_gre6sec3(
                private_ip_private,
                local_ip_private,
                remote_ip_private,
                is_gre6=False,
            )
            save_stuff_gre6sec3(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            update_ipsec_ip(private_ip_gre6)
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Please select a valid option.")


def gre6tapir3sec_editmulti_local():
    local_ip_private = local_ip("/etc/private3.sh")
    remote_ip_private = remote_ip("/etc/private3.sh")
    private_ip_private = private_ip1("/etc/private3.sh")

    local_ip_gre6 = local_ip("/etc/gre63.sh")
    remote_ip_gre6 = remote_ip("/etc/gre63.sh")
    private_ip_gre6 = private_gre6multi("/etc/gre63.sh")

    ipsecsecret = get_ipsecsecret("/etc/ipsec.secrets")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("couldn't retrieve IP addresses from private file")
    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("couldn't retrieve IP addresses from gre6tap file")
    if not ipsecsecret:
        print("couldn't retrieve IPsec secret key from ipsec file")

    if (
        not local_ip_private
        or not remote_ip_private
        or not private_ip_private
        or not local_ip_gre6
        or not remote_ip_gre6
        or not private_ip_gre6
        or not ipsecsecret
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_privateiran3(
            local_ip_private, remote_ip_private, private_ip_private
        )
        display_stuff_gre6tap(local_ip_gre6, remote_ip_gre6, private_ip_gre6)

        display_ipsecsecret(ipsecsecret)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mGRE6tap + IPSEC\033[93m IRAN Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN \033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mKharej [3] \033[92m Public IP\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[93mChange \033[97mGRE6tap \033[93mPrivate IPV6\033[0m")
        print("5. \033[93mChange IPSEC \033[92mSecret Key\033[0m")
        print("6. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter new private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_private = new_ip
                ip_parts = new_ip.split(":")
                if new_ip.endswith(":2"):
                    ip_parts[-1] = "1"
                else:
                    ip_parts[-1] = "2"
                counterpart_ip = ":".join(ip_parts)
                local_ip_gre6 = new_ip
                remote_ip_gre6 = counterpart_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter new private IPv6 address \033[96m[GRE6tap]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_gre6
                private_ip_gre6 = new_ip

                update_ipsec_conf_irangre63("/etc/ipsec1.conf", new_ip)
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mIRAN\033[93m Public IP :\033[0m ")
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mKharej [3]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "5":
            new_key = input(
                "\033[93mEnter new \033[92mIPsec \033[93mSecret Key: \033[0m"
            )
            if new_key:
                update_ipsecsecret("/etc/ipsec.secrets", new_key)
                ipsecsecret = new_key
            else:
                print("\033[91mCrazy Secret Key\033[0m")
        elif choice == "6":
            save_stuff_gre6sec3_iran(
                private_ip_private,
                local_ip_private,
                remote_ip_private,
                is_gre6=False,
            )
            save_stuff_gre6sec3_iran(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            update_ipsec_ip_multi3(private_ip_gre6)
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Please select a valid option.")


def gre6tapkharej4sec_editmulti_local():
    local_ip_private = local_ip("/etc/private4.sh")
    remote_ip_private = remote_ip("/etc/private4.sh")
    private_ip_private = private_ip1("/etc/private4.sh")

    local_ip_gre6 = local_ip("/etc/gre64.sh")
    remote_ip_gre6 = remote_ip("/etc/gre64.sh")
    private_ip_gre6 = private_gre6multi("/etc/gre64.sh")

    ipsecsecret = get_ipsecsecret("/etc/ipsec.secrets")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("couldn't retrieve IP addresses from private file")
    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("couldn't retrieve IP addresses from gre6tap file")
    if not ipsecsecret:
        print("couldn't retrieve IPsec secret key from ipsec file")

    if (
        not local_ip_private
        or not remote_ip_private
        or not private_ip_private
        or not local_ip_gre6
        or not remote_ip_gre6
        or not private_ip_gre6
        or not ipsecsecret
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_privatekharej4(
            local_ip_private, remote_ip_private, private_ip_private
        )
        display_stuff_gre6tap(local_ip_gre6, remote_ip_gre6, private_ip_gre6)

        display_ipsecsecret(ipsecsecret)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mGRE6tap + IPSEC\033[93m Kharej [4] Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej [4] \033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mIRAN \033[92m Public IP\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[93mChange \033[97mGRE6tap \033[93mPrivate IPV6\033[0m")
        print("5. \033[93mChange IPSEC \033[92mSecret Key\033[0m")
        print("6. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_private = new_ip
                ip_parts = new_ip.split(":")
                if new_ip.endswith(":2"):
                    ip_parts[-1] = "1"
                else:
                    ip_parts[-1] = "2"
                counterpart_ip = ":".join(ip_parts)
                local_ip_gre6 = new_ip
                remote_ip_gre6 = counterpart_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[GRE6tap]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_gre6
                private_ip_gre6 = new_ip

                update_ipfile_gre64("/etc/ipsec1.conf", new_ip, update_type="ipsec")
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mKharej [4]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input("\033[93mEnter \033[92mIRAN\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "5":
            new_key = input(
                "\033[93mEnter new \033[92mIPsec \033[93mSecret Key: \033[0m"
            )
            if new_key:
                update_ipsecsecret("/etc/ipsec.secrets", new_key)
                ipsecsecret = new_key
            else:
                print("\033[91mCrazy Secret Key\033[0m")
        elif choice == "6":
            save_stuff_gre6sec4(
                private_ip_private,
                local_ip_private,
                remote_ip_private,
                is_gre6=False,
            )
            save_stuff_gre6sec4(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            update_ipsec_ip(private_ip_gre6)
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Please select a valid option.")


def gre6tapir4sec_editmulti_local():
    local_ip_private = local_ip("/etc/private4.sh")
    remote_ip_private = remote_ip("/etc/private4.sh")
    private_ip_private = private_ip1("/etc/private4.sh")

    local_ip_gre6 = local_ip("/etc/gre64.sh")
    remote_ip_gre6 = remote_ip("/etc/gre64.sh")
    private_ip_gre6 = private_gre6multi("/etc/gre64.sh")

    ipsecsecret = get_ipsecsecret("/etc/ipsec.secrets")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("couldn't retrieve IP addresses from private file")
    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("couldn't retrieve IP addresses from gre6tap file")
    if not ipsecsecret:
        print("couldn't retrieve IPsec secret key from ipsec file")

    if (
        not local_ip_private
        or not remote_ip_private
        or not private_ip_private
        or not local_ip_gre6
        or not remote_ip_gre6
        or not private_ip_gre6
        or not ipsecsecret
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_privateiran4(
            local_ip_private, remote_ip_private, private_ip_private
        )
        display_stuff_gre6tap(local_ip_gre6, remote_ip_gre6, private_ip_gre6)

        display_ipsecsecret(ipsecsecret)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mGRE6tap + IPSEC\033[93m IRAN Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN \033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mKharej [4] \033[92m Public IP\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[93mChange \033[97mGRE6tap \033[93mPrivate IPV6\033[0m")
        print("5. \033[93mChange IPSEC \033[92mSecret Key\033[0m")
        print("6. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter new private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_private = new_ip
                ip_parts = new_ip.split(":")
                if new_ip.endswith(":2"):
                    ip_parts[-1] = "1"
                else:
                    ip_parts[-1] = "2"
                counterpart_ip = ":".join(ip_parts)
                local_ip_gre6 = new_ip
                remote_ip_gre6 = counterpart_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter new private IPv6 address \033[96m[GRE6tap]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_gre6
                private_ip_gre6 = new_ip

                update_ipsec_conf_irangre64("/etc/ipsec1.conf", new_ip)
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mIRAN\033[93m Public IP :\033[0m ")
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mKharej [4]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "5":
            new_key = input(
                "\033[93mEnter new \033[92mIPsec \033[93mSecret Key: \033[0m"
            )
            if new_key:
                update_ipsecsecret("/etc/ipsec.secrets", new_key)
                ipsecsecret = new_key
            else:
                print("\033[91mCrazy Secret Key\033[0m")
        elif choice == "6":
            save_stuff_gre6sec4_iran(
                private_ip_private,
                local_ip_private,
                remote_ip_private,
                is_gre6=False,
            )
            save_stuff_gre6sec4_iran(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            update_ipsec_ip_multi4(private_ip_gre6)
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Please select a valid option.")


def gre6tapkharej5sec_editmulti_local():
    local_ip_private = local_ip("/etc/private5.sh")
    remote_ip_private = remote_ip("/etc/private5.sh")
    private_ip_private = private_ip1("/etc/private5.sh")

    local_ip_gre6 = local_ip("/etc/gre65.sh")
    remote_ip_gre6 = remote_ip("/etc/gre65.sh")
    private_ip_gre6 = private_gre6multi("/etc/gre65.sh")

    ipsecsecret = get_ipsecsecret("/etc/ipsec.secrets")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("couldn't retrieve IP addresses from private file")
    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("couldn't retrieve IP addresses from gre6tap file")
    if not ipsecsecret:
        print("couldn't retrieve IPsec secret key from ipsec file")

    if (
        not local_ip_private
        or not remote_ip_private
        or not private_ip_private
        or not local_ip_gre6
        or not remote_ip_gre6
        or not private_ip_gre6
        or not ipsecsecret
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_privatekharej5(
            local_ip_private, remote_ip_private, private_ip_private
        )
        display_stuff_gre6tap(local_ip_gre6, remote_ip_gre6, private_ip_gre6)

        display_ipsecsecret(ipsecsecret)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mGRE6tap + IPSEC\033[93m Kharej [5] Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej [5] \033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mIRAN \033[92m Public IP\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[93mChange \033[97mGRE6tap \033[93mPrivate IPV6\033[0m")
        print("5. \033[93mChange IPSEC \033[92mSecret Key\033[0m")
        print("6. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_private = new_ip
                ip_parts = new_ip.split(":")
                if new_ip.endswith(":2"):
                    ip_parts[-1] = "1"
                else:
                    ip_parts[-1] = "2"
                counterpart_ip = ":".join(ip_parts)
                local_ip_gre6 = new_ip
                remote_ip_gre6 = counterpart_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[GRE6tap]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_gre6
                private_ip_gre6 = new_ip

                update_ipfile_gre65("/etc/ipsec1.conf", new_ip, update_type="ipsec")
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mKharej [5]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input("\033[93mEnter \033[92mIRAN\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "5":
            new_key = input(
                "\033[93mEnter new \033[92mIPsec \033[93mSecret Key: \033[0m"
            )
            if new_key:
                update_ipsecsecret("/etc/ipsec.secrets", new_key)
                ipsecsecret = new_key
            else:
                print("\033[91mCrazy Secret Key\033[0m")
        elif choice == "6":
            save_stuff_gre6sec5(
                private_ip_private,
                local_ip_private,
                remote_ip_private,
                is_gre6=False,
            )
            save_stuff_gre6sec5(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            update_ipsec_ip(private_ip_gre6)
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Please select a valid option.")


def gre6tapir5sec_editmulti_local():
    local_ip_private = local_ip("/etc/private5.sh")
    remote_ip_private = remote_ip("/etc/private5.sh")
    private_ip_private = private_ip1("/etc/private5.sh")

    local_ip_gre6 = local_ip("/etc/gre65.sh")
    remote_ip_gre6 = remote_ip("/etc/gre65.sh")
    private_ip_gre6 = private_gre6multi("/etc/gre65.sh")

    ipsecsecret = get_ipsecsecret("/etc/ipsec.secrets")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("couldn't retrieve IP addresses from private file")
    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("couldn't retrieve IP addresses from gre6tap file")
    if not ipsecsecret:
        print("couldn't retrieve IPsec secret key from ipsec file")

    if (
        not local_ip_private
        or not remote_ip_private
        or not private_ip_private
        or not local_ip_gre6
        or not remote_ip_gre6
        or not private_ip_gre6
        or not ipsecsecret
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_privateiran5(
            local_ip_private, remote_ip_private, private_ip_private
        )
        display_stuff_gre6tap(local_ip_gre6, remote_ip_gre6, private_ip_gre6)

        display_ipsecsecret(ipsecsecret)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mGRE6tap + IPSEC\033[93m IRAN Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN \033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mKharej [5] \033[92m Public IP\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[93mChange \033[97mGRE6tap \033[93mPrivate IPV6\033[0m")
        print("5. \033[93mChange IPSEC \033[92mSecret Key\033[0m")
        print("6. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter new private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_private = new_ip
                ip_parts = new_ip.split(":")
                if new_ip.endswith(":2"):
                    ip_parts[-1] = "1"
                else:
                    ip_parts[-1] = "2"
                counterpart_ip = ":".join(ip_parts)
                local_ip_gre6 = new_ip
                remote_ip_gre6 = counterpart_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter new private IPv6 address \033[96m[GRE6tap]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_gre6
                private_ip_gre6 = new_ip

                update_ipsec_conf_irangre65("/etc/ipsec1.conf", new_ip)
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mIRAN\033[93m Public IP :\033[0m ")
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mKharej [5]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "5":
            new_key = input(
                "\033[93mEnter new \033[92mIPsec \033[93mSecret Key: \033[0m"
            )
            if new_key:
                update_ipsecsecret("/etc/ipsec.secrets", new_key)
                ipsecsecret = new_key
            else:
                print("\033[91mCrazy Secret Key\033[0m")
        elif choice == "6":
            save_stuff_gre6sec5_iran(
                private_ip_private,
                local_ip_private,
                remote_ip_private,
                is_gre6=False,
            )
            save_stuff_gre6sec5_iran(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            update_ipsec_ip_multi5(private_ip_gre6)
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Please select a valid option.")


def gre6tapiranfive1sec_editmulti_local():
    local_ip_private = local_ip("/etc/private1.sh")
    remote_ip_private = remote_ip("/etc/private1.sh")
    private_ip_private = private_ip1("/etc/private1.sh")

    local_ip_gre6 = local_ip("/etc/gre61.sh")
    remote_ip_gre6 = remote_ip("/etc/gre61.sh")
    private_ip_gre6 = private_gre6multi("/etc/gre61.sh")

    ipsecsecret = get_ipsecsecret("/etc/ipsec.secrets")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("couldn't retrieve IP addresses from private file")
    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("couldn't retrieve IP addresses from gre6tap file")
    if not ipsecsecret:
        print("couldn't retrieve IPsec secret key from ipsec file")

    if (
        not local_ip_private
        or not remote_ip_private
        or not private_ip_private
        or not local_ip_gre6
        or not remote_ip_gre6
        or not private_ip_gre6
        or not ipsecsecret
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_privateiranfive1(
            local_ip_private, remote_ip_private, private_ip_private
        )
        display_stuff_gre6tap(local_ip_gre6, remote_ip_gre6, private_ip_gre6)

        display_ipsecsecret(ipsecsecret)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mGRE6tap + IPSEC\033[93m IRAN [1] Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN [1] \033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mKharej \033[92m Public IP\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[93mChange \033[97mGRE6tap \033[93mPrivate IPV6\033[0m")
        print("5. \033[93mChange IPSEC \033[92mSecret Key\033[0m")
        print("6. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_private = new_ip
                ip_parts = new_ip.split(":")
                if new_ip.endswith(":2"):
                    ip_parts[-1] = "1"
                else:
                    ip_parts[-1] = "2"
                counterpart_ip = ":".join(ip_parts)
                local_ip_gre6 = new_ip
                remote_ip_gre6 = counterpart_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[GRE6tap]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_gre6
                private_ip_gre6 = new_ip

                update_ipfile_gre61("/etc/ipsec1.conf", new_ip, update_type="ipsec")
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mIRAN [1]\033[93m Public IP :\033[0m ")
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input("\033[93mEnter \033[92mKharej\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "5":
            new_key = input(
                "\033[93mEnter new \033[92mIPsec \033[93mSecret Key: \033[0m"
            )
            if new_key:
                update_ipsecsecret("/etc/ipsec.secrets", new_key)
                ipsecsecret = new_key
            else:
                print("\033[91mCrazy Secret Key\033[0m")
        elif choice == "6":
            save_stuff_gre6sec1(
                private_ip_private,
                local_ip_private,
                remote_ip_private,
                is_gre6=False,
            )
            save_stuff_gre6sec1(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            update_ipsec_ip(private_ip_gre6)
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Please select a valid option.")


def gre6tapkharejone1sec_editmulti_local():
    local_ip_private = local_ip("/etc/private1.sh")
    remote_ip_private = remote_ip("/etc/private1.sh")
    private_ip_private = private_ip1("/etc/private1.sh")

    local_ip_gre6 = local_ip("/etc/gre61.sh")
    remote_ip_gre6 = remote_ip("/etc/gre61.sh")
    private_ip_gre6 = private_gre6multi("/etc/gre61.sh")

    ipsecsecret = get_ipsecsecret("/etc/ipsec.secrets")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("couldn't retrieve IP addresses from private file")
    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("couldn't retrieve IP addresses from gre6tap file")
    if not ipsecsecret:
        print("couldn't retrieve IPsec secret key from ipsec file")

    if (
        not local_ip_private
        or not remote_ip_private
        or not private_ip_private
        or not local_ip_gre6
        or not remote_ip_gre6
        or not private_ip_gre6
        or not ipsecsecret
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_privatekharejone1(
            local_ip_private, remote_ip_private, private_ip_private
        )
        display_stuff_gre6tap(local_ip_gre6, remote_ip_gre6, private_ip_gre6)

        display_ipsecsecret(ipsecsecret)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mGRE6tap + IPSEC\033[93m Kharej Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej \033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mIRAN [1] \033[92m Public IP\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[93mChange \033[97mGRE6tap \033[93mPrivate IPV6\033[0m")
        print("5. \033[93mChange IPSEC \033[92mSecret Key\033[0m")
        print("6. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter new private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_private = new_ip
                ip_parts = new_ip.split(":")
                if new_ip.endswith(":2"):
                    ip_parts[-1] = "1"
                else:
                    ip_parts[-1] = "2"
                counterpart_ip = ":".join(ip_parts)
                local_ip_gre6 = new_ip
                remote_ip_gre6 = counterpart_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter new private IPv6 address \033[96m[GRE6tap]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_gre6
                private_ip_gre6 = new_ip

                update_ipsec_conf_irangre61("/etc/ipsec1.conf", new_ip)
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mKharej\033[93m Public IP :\033[0m ")
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input("\033[93mEnter \033[92mIRAN [1]\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "5":
            new_key = input(
                "\033[93mEnter new \033[92mIPsec \033[93mSecret Key: \033[0m"
            )
            if new_key:
                update_ipsecsecret("/etc/ipsec.secrets", new_key)
                ipsecsecret = new_key
            else:
                print("\033[91mCrazy Secret Key\033[0m")
        elif choice == "6":
            save_stuff_gre6sec1_iran(
                private_ip_private,
                local_ip_private,
                remote_ip_private,
                is_gre6=False,
            )
            save_stuff_gre6sec1_iran(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            update_ipsec_ip_multi(private_ip_gre6)
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Please select a valid option.")


def gre6tapiranfive2sec_editmulti_local():
    local_ip_private = local_ip("/etc/private2.sh")
    remote_ip_private = remote_ip("/etc/private2.sh")
    private_ip_private = private_ip1("/etc/private2.sh")

    local_ip_gre6 = local_ip("/etc/gre62.sh")
    remote_ip_gre6 = remote_ip("/etc/gre62.sh")
    private_ip_gre6 = private_gre6multi("/etc/gre62.sh")

    ipsecsecret = get_ipsecsecret("/etc/ipsec.secrets")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("couldn't retrieve IP addresses from private file")
    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("couldn't retrieve IP addresses from gre6tap file")
    if not ipsecsecret:
        print("couldn't retrieve IPsec secret key from ipsec file")

    if (
        not local_ip_private
        or not remote_ip_private
        or not private_ip_private
        or not local_ip_gre6
        or not remote_ip_gre6
        or not private_ip_gre6
        or not ipsecsecret
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_privateiranfive2(
            local_ip_private, remote_ip_private, private_ip_private
        )
        display_stuff_gre6tap(local_ip_gre6, remote_ip_gre6, private_ip_gre6)

        display_ipsecsecret(ipsecsecret)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mGRE6tap + IPSEC\033[93m IRAN [2] Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN [2] \033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mKharej \033[92m Public IP\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[93mChange \033[97mGRE6tap \033[93mPrivate IPV6\033[0m")
        print("5. \033[93mChange IPSEC \033[92mSecret Key\033[0m")
        print("6. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_private = new_ip
                ip_parts = new_ip.split(":")
                if new_ip.endswith(":2"):
                    ip_parts[-1] = "1"
                else:
                    ip_parts[-1] = "2"
                counterpart_ip = ":".join(ip_parts)
                local_ip_gre6 = new_ip
                remote_ip_gre6 = counterpart_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[GRE6tap]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_gre6
                private_ip_gre6 = new_ip

                update_ipfile_gre62("/etc/ipsec1.conf", new_ip, update_type="ipsec")
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mIRAN [2]\033[93m Public IP :\033[0m ")
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input("\033[93mEnter \033[92mKharej\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "5":
            new_key = input(
                "\033[93mEnter new \033[92mIPsec \033[93mSecret Key: \033[0m"
            )
            if new_key:
                update_ipsecsecret("/etc/ipsec.secrets", new_key)
                ipsecsecret = new_key
            else:
                print("\033[91mCrazy Secret Key\033[0m")
        elif choice == "6":
            save_stuff_gre6sec2(
                private_ip_private,
                local_ip_private,
                remote_ip_private,
                is_gre6=False,
            )
            save_stuff_gre6sec2(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            update_ipsec_ip(private_ip_gre6)
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Please select a valid option.")


def gre6tapkharejone2sec_editmulti_local():
    local_ip_private = local_ip("/etc/private2.sh")
    remote_ip_private = remote_ip("/etc/private2.sh")
    private_ip_private = private_ip1("/etc/private2.sh")

    local_ip_gre6 = local_ip("/etc/gre62.sh")
    remote_ip_gre6 = remote_ip("/etc/gre62.sh")
    private_ip_gre6 = private_gre6multi("/etc/gre62.sh")

    ipsecsecret = get_ipsecsecret("/etc/ipsec.secrets")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("couldn't retrieve IP addresses from private file")
    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("couldn't retrieve IP addresses from gre6tap file")
    if not ipsecsecret:
        print("couldn't retrieve IPsec secret key from ipsec file")

    if (
        not local_ip_private
        or not remote_ip_private
        or not private_ip_private
        or not local_ip_gre6
        or not remote_ip_gre6
        or not private_ip_gre6
        or not ipsecsecret
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_privatekharejone2(
            local_ip_private, remote_ip_private, private_ip_private
        )
        display_stuff_gre6tap(local_ip_gre6, remote_ip_gre6, private_ip_gre6)

        display_ipsecsecret(ipsecsecret)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mGRE6tap + IPSEC\033[93m Kharej Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej \033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mIRAN [2] \033[92m Public IP\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[93mChange \033[97mGRE6tap \033[93mPrivate IPV6\033[0m")
        print("5. \033[93mChange IPSEC \033[92mSecret Key\033[0m")
        print("6. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter new private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_private = new_ip
                ip_parts = new_ip.split(":")
                if new_ip.endswith(":2"):
                    ip_parts[-1] = "1"
                else:
                    ip_parts[-1] = "2"
                counterpart_ip = ":".join(ip_parts)
                local_ip_gre6 = new_ip
                remote_ip_gre6 = counterpart_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter new private IPv6 address \033[96m[GRE6tap]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_gre6
                private_ip_gre6 = new_ip

                update_ipsec_conf_irangre62("/etc/ipsec1.conf", new_ip)
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mKharej\033[93m Public IP :\033[0m ")
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input("\033[93mEnter \033[92mIRAN [2]\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "5":
            new_key = input(
                "\033[93mEnter new \033[92mIPsec \033[93mSecret Key: \033[0m"
            )
            if new_key:
                update_ipsecsecret("/etc/ipsec.secrets", new_key)
                ipsecsecret = new_key
            else:
                print("\033[91mCrazy Secret Key\033[0m")
        elif choice == "6":
            save_stuff_gre6sec2_iran(
                private_ip_private,
                local_ip_private,
                remote_ip_private,
                is_gre6=False,
            )
            save_stuff_gre6sec2_iran(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            update_ipsec_ip_multi2(private_ip_gre6)
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Please select a valid option.")


def gre6tapiranfive3sec_editmulti_local():
    local_ip_private = local_ip("/etc/private3.sh")
    remote_ip_private = remote_ip("/etc/private3.sh")
    private_ip_private = private_ip1("/etc/private3.sh")

    local_ip_gre6 = local_ip("/etc/gre63.sh")
    remote_ip_gre6 = remote_ip("/etc/gre63.sh")
    private_ip_gre6 = private_gre6multi("/etc/gre63.sh")

    ipsecsecret = get_ipsecsecret("/etc/ipsec.secrets")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("couldn't retrieve IP addresses from private file")
    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("couldn't retrieve IP addresses from gre6tap file")
    if not ipsecsecret:
        print("couldn't retrieve IPsec secret key from ipsec file")

    if (
        not local_ip_private
        or not remote_ip_private
        or not private_ip_private
        or not local_ip_gre6
        or not remote_ip_gre6
        or not private_ip_gre6
        or not ipsecsecret
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_privateiranfive3(
            local_ip_private, remote_ip_private, private_ip_private
        )
        display_stuff_gre6tap(local_ip_gre6, remote_ip_gre6, private_ip_gre6)

        display_ipsecsecret(ipsecsecret)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mGRE6tap + IPSEC\033[93m IRAN [3] Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN [3] \033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mKharej \033[92m Public IP\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[93mChange \033[97mGRE6tap \033[93mPrivate IPV6\033[0m")
        print("5. \033[93mChange IPSEC \033[92mSecret Key\033[0m")
        print("6. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_private = new_ip
                ip_parts = new_ip.split(":")
                if new_ip.endswith(":2"):
                    ip_parts[-1] = "1"
                else:
                    ip_parts[-1] = "2"
                counterpart_ip = ":".join(ip_parts)
                local_ip_gre6 = new_ip
                remote_ip_gre6 = counterpart_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[GRE6tap]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_gre6
                private_ip_gre6 = new_ip

                update_ipfile_gre63("/etc/ipsec1.conf", new_ip, update_type="ipsec")
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mIRAN [3]\033[93m Public IP :\033[0m ")
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input("\033[93mEnter \033[92mKharej\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "5":
            new_key = input(
                "\033[93mEnter new \033[92mIPsec \033[93mSecret Key: \033[0m"
            )
            if new_key:
                update_ipsecsecret("/etc/ipsec.secrets", new_key)
                ipsecsecret = new_key
            else:
                print("\033[91mCrazy Secret Key\033[0m")
        elif choice == "6":
            save_stuff_gre6sec3(
                private_ip_private,
                local_ip_private,
                remote_ip_private,
                is_gre6=False,
            )
            save_stuff_gre6sec3(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            update_ipsec_ip(private_ip_gre6)
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Please select a valid option.")


def gre6tapkharejone3sec_editmulti_local():
    local_ip_private = local_ip("/etc/private3.sh")
    remote_ip_private = remote_ip("/etc/private3.sh")
    private_ip_private = private_ip1("/etc/private3.sh")

    local_ip_gre6 = local_ip("/etc/gre63.sh")
    remote_ip_gre6 = remote_ip("/etc/gre63.sh")
    private_ip_gre6 = private_gre6multi("/etc/gre63.sh")

    ipsecsecret = get_ipsecsecret("/etc/ipsec.secrets")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("couldn't retrieve IP addresses from private file")
    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("couldn't retrieve IP addresses from gre6tap file")
    if not ipsecsecret:
        print("couldn't retrieve IPsec secret key from ipsec file")

    if (
        not local_ip_private
        or not remote_ip_private
        or not private_ip_private
        or not local_ip_gre6
        or not remote_ip_gre6
        or not private_ip_gre6
        or not ipsecsecret
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_privatekharejone3(
            local_ip_private, remote_ip_private, private_ip_private
        )
        display_stuff_gre6tap(local_ip_gre6, remote_ip_gre6, private_ip_gre6)

        display_ipsecsecret(ipsecsecret)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mGRE6tap + IPSEC\033[93m Kharej Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej \033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mIRAN [3] \033[92m Public IP\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[93mChange \033[97mGRE6tap \033[93mPrivate IPV6\033[0m")
        print("5. \033[93mChange IPSEC \033[92mSecret Key\033[0m")
        print("6. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter new private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_private = new_ip
                ip_parts = new_ip.split(":")
                if new_ip.endswith(":2"):
                    ip_parts[-1] = "1"
                else:
                    ip_parts[-1] = "2"
                counterpart_ip = ":".join(ip_parts)
                local_ip_gre6 = new_ip
                remote_ip_gre6 = counterpart_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter new private IPv6 address \033[96m[GRE6tap]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_gre6
                private_ip_gre6 = new_ip

                update_ipsec_conf_irangre63("/etc/ipsec1.conf", new_ip)
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mKharej\033[93m Public IP :\033[0m ")
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input("\033[93mEnter \033[92mIRAN [3]\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "5":
            new_key = input(
                "\033[93mEnter new \033[92mIPsec \033[93mSecret Key: \033[0m"
            )
            if new_key:
                update_ipsecsecret("/etc/ipsec.secrets", new_key)
                ipsecsecret = new_key
            else:
                print("\033[91mCrazy Secret Key\033[0m")
        elif choice == "6":
            save_stuff_gre6sec3_iran(
                private_ip_private,
                local_ip_private,
                remote_ip_private,
                is_gre6=False,
            )
            save_stuff_gre6sec3_iran(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            update_ipsec_ip_multi3(private_ip_gre6)
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Please select a valid option.")


def gre6tapiranfive4sec_editmulti_local():
    local_ip_private = local_ip("/etc/private4.sh")
    remote_ip_private = remote_ip("/etc/private4.sh")
    private_ip_private = private_ip1("/etc/private4.sh")

    local_ip_gre6 = local_ip("/etc/gre64.sh")
    remote_ip_gre6 = remote_ip("/etc/gre64.sh")
    private_ip_gre6 = private_gre6multi("/etc/gre64.sh")

    ipsecsecret = get_ipsecsecret("/etc/ipsec.secrets")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("couldn't retrieve IP addresses from private file")
    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("couldn't retrieve IP addresses from gre6tap file")
    if not ipsecsecret:
        print("couldn't retrieve IPsec secret key from ipsec file")

    if (
        not local_ip_private
        or not remote_ip_private
        or not private_ip_private
        or not local_ip_gre6
        or not remote_ip_gre6
        or not private_ip_gre6
        or not ipsecsecret
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_privateiranfive4(
            local_ip_private, remote_ip_private, private_ip_private
        )
        display_stuff_gre6tap(local_ip_gre6, remote_ip_gre6, private_ip_gre6)

        display_ipsecsecret(ipsecsecret)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mGRE6tap + IPSEC\033[93m IRAN [4] Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN [4] \033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mKharej \033[92m Public IP\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[93mChange \033[97mGRE6tap \033[93mPrivate IPV6\033[0m")
        print("5. \033[93mChange IPSEC \033[92mSecret Key\033[0m")
        print("6. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_private = new_ip
                ip_parts = new_ip.split(":")
                if new_ip.endswith(":2"):
                    ip_parts[-1] = "1"
                else:
                    ip_parts[-1] = "2"
                counterpart_ip = ":".join(ip_parts)
                local_ip_gre6 = new_ip
                remote_ip_gre6 = counterpart_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[GRE6tap]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_gre6
                private_ip_gre6 = new_ip

                update_ipfile_gre64("/etc/ipsec1.conf", new_ip, update_type="ipsec")
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mIRAN [4]\033[93m Public IP :\033[0m ")
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input("\033[93mEnter \033[92mKharej\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "5":
            new_key = input(
                "\033[93mEnter new \033[92mIPsec \033[93mSecret Key: \033[0m"
            )
            if new_key:
                update_ipsecsecret("/etc/ipsec.secrets", new_key)
                ipsecsecret = new_key
            else:
                print("\033[91mCrazy Secret Key\033[0m")
        elif choice == "6":
            save_stuff_gre6sec4(
                private_ip_private,
                local_ip_private,
                remote_ip_private,
                is_gre6=False,
            )
            save_stuff_gre6sec4(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            update_ipsec_ip(private_ip_gre6)
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Please select a valid option.")


def gre6tapkharejone4sec_editmulti_local():
    local_ip_private = local_ip("/etc/private4.sh")
    remote_ip_private = remote_ip("/etc/private4.sh")
    private_ip_private = private_ip1("/etc/private4.sh")

    local_ip_gre6 = local_ip("/etc/gre64.sh")
    remote_ip_gre6 = remote_ip("/etc/gre64.sh")
    private_ip_gre6 = private_gre6multi("/etc/gre64.sh")

    ipsecsecret = get_ipsecsecret("/etc/ipsec.secrets")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("couldn't retrieve IP addresses from private file")
    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("couldn't retrieve IP addresses from gre6tap file")
    if not ipsecsecret:
        print("couldn't retrieve IPsec secret key from ipsec file")

    if (
        not local_ip_private
        or not remote_ip_private
        or not private_ip_private
        or not local_ip_gre6
        or not remote_ip_gre6
        or not private_ip_gre6
        or not ipsecsecret
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_privatekharejone4(
            local_ip_private, remote_ip_private, private_ip_private
        )
        display_stuff_gre6tap(local_ip_gre6, remote_ip_gre6, private_ip_gre6)

        display_ipsecsecret(ipsecsecret)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mGRE6tap + IPSEC\033[93m Kharej Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej \033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mIRAN [4] \033[92m Public IP\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[93mChange \033[97mGRE6tap \033[93mPrivate IPV6\033[0m")
        print("5. \033[93mChange IPSEC \033[92mSecret Key\033[0m")
        print("6. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter new private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_private = new_ip
                ip_parts = new_ip.split(":")
                if new_ip.endswith(":2"):
                    ip_parts[-1] = "1"
                else:
                    ip_parts[-1] = "2"
                counterpart_ip = ":".join(ip_parts)
                local_ip_gre6 = new_ip
                remote_ip_gre6 = counterpart_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter new private IPv6 address \033[96m[GRE6tap]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_gre6
                private_ip_gre6 = new_ip

                update_ipsec_conf_irangre64("/etc/ipsec1.conf", new_ip)
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mKharej\033[93m Public IP :\033[0m ")
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input("\033[93mEnter \033[92mIRAN [4]\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "5":
            new_key = input(
                "\033[93mEnter new \033[92mIPsec \033[93mSecret Key: \033[0m"
            )
            if new_key:
                update_ipsecsecret("/etc/ipsec.secrets", new_key)
                ipsecsecret = new_key
            else:
                print("\033[91mCrazy Secret Key\033[0m")
        elif choice == "6":
            save_stuff_gre6sec4_iran(
                private_ip_private,
                local_ip_private,
                remote_ip_private,
                is_gre6=False,
            )
            save_stuff_gre6sec4_iran(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            update_ipsec_ip_multi4(private_ip_gre6)
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Please select a valid option.")


def gre6tapiranfive5sec_editmulti_local():
    local_ip_private = local_ip("/etc/private5.sh")
    remote_ip_private = remote_ip("/etc/private5.sh")
    private_ip_private = private_ip1("/etc/private5.sh")

    local_ip_gre6 = local_ip("/etc/gre65.sh")
    remote_ip_gre6 = remote_ip("/etc/gre65.sh")
    private_ip_gre6 = private_gre6multi("/etc/gre65.sh")

    ipsecsecret = get_ipsecsecret("/etc/ipsec.secrets")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("couldn't retrieve IP addresses from private file")
    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("couldn't retrieve IP addresses from gre6tap file")
    if not ipsecsecret:
        print("couldn't retrieve IPsec secret key from ipsec file")

    if (
        not local_ip_private
        or not remote_ip_private
        or not private_ip_private
        or not local_ip_gre6
        or not remote_ip_gre6
        or not private_ip_gre6
        or not ipsecsecret
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_privateiranfive5(
            local_ip_private, remote_ip_private, private_ip_private
        )
        display_stuff_gre6tap(local_ip_gre6, remote_ip_gre6, private_ip_gre6)

        display_ipsecsecret(ipsecsecret)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mGRE6tap + IPSEC\033[93m IRAN [5] Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN [5] \033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mKharej \033[92m Public IP\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[93mChange \033[97mGRE6tap \033[93mPrivate IPV6\033[0m")
        print("5. \033[93mChange IPSEC \033[92mSecret Key\033[0m")
        print("6. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_private = new_ip
                ip_parts = new_ip.split(":")
                if new_ip.endswith(":2"):
                    ip_parts[-1] = "1"
                else:
                    ip_parts[-1] = "2"
                counterpart_ip = ":".join(ip_parts)
                local_ip_gre6 = new_ip
                remote_ip_gre6 = counterpart_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[GRE6tap]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_gre6
                private_ip_gre6 = new_ip

                update_ipfile_gre65("/etc/ipsec1.conf", new_ip, update_type="ipsec")
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mIRAN [5]\033[93m Public IP :\033[0m ")
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input("\033[93mEnter \033[92mKharej\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "5":
            new_key = input(
                "\033[93mEnter new \033[92mIPsec \033[93mSecret Key: \033[0m"
            )
            if new_key:
                update_ipsecsecret("/etc/ipsec.secrets", new_key)
                ipsecsecret = new_key
            else:
                print("\033[91mCrazy Secret Key\033[0m")
        elif choice == "6":
            save_stuff_gre6sec5(
                private_ip_private,
                local_ip_private,
                remote_ip_private,
                is_gre6=False,
            )
            save_stuff_gre6sec5(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            update_ipsec_ip(private_ip_gre6)
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Please select a valid option.")


def gre6tapkharejone5sec_editmulti_local():
    local_ip_private = local_ip("/etc/private5.sh")
    remote_ip_private = remote_ip("/etc/private5.sh")
    private_ip_private = private_ip1("/etc/private5.sh")

    local_ip_gre6 = local_ip("/etc/gre65.sh")
    remote_ip_gre6 = remote_ip("/etc/gre65.sh")
    private_ip_gre6 = private_gre6multi("/etc/gre65.sh")

    ipsecsecret = get_ipsecsecret("/etc/ipsec.secrets")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("couldn't retrieve IP addresses from private file")
    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("couldn't retrieve IP addresses from gre6tap file")
    if not ipsecsecret:
        print("couldn't retrieve IPsec secret key from ipsec file")

    if (
        not local_ip_private
        or not remote_ip_private
        or not private_ip_private
        or not local_ip_gre6
        or not remote_ip_gre6
        or not private_ip_gre6
        or not ipsecsecret
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_privatekharejone5(
            local_ip_private, remote_ip_private, private_ip_private
        )
        display_stuff_gre6tap(local_ip_gre6, remote_ip_gre6, private_ip_gre6)

        display_ipsecsecret(ipsecsecret)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mGRE6tap + IPSEC\033[93m Kharej Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej \033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mIRAN [5] \033[92m Public IP\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[93mChange \033[97mGRE6tap \033[93mPrivate IPV6\033[0m")
        print("5. \033[93mChange IPSEC \033[92mSecret Key\033[0m")
        print("6. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter new private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_private = new_ip
                ip_parts = new_ip.split(":")
                if new_ip.endswith(":2"):
                    ip_parts[-1] = "1"
                else:
                    ip_parts[-1] = "2"
                counterpart_ip = ":".join(ip_parts)
                local_ip_gre6 = new_ip
                remote_ip_gre6 = counterpart_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter new private IPv6 address \033[96m[GRE6tap]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_gre6
                private_ip_gre6 = new_ip

                update_ipsec_conf_irangre65("/etc/ipsec1.conf", new_ip)
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mKharej\033[93m Public IP :\033[0m ")
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input("\033[93mEnter \033[92mIRAN [5]\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "5":
            new_key = input(
                "\033[93mEnter new \033[92mIPsec \033[93mSecret Key: \033[0m"
            )
            if new_key:
                update_ipsecsecret("/etc/ipsec.secrets", new_key)
                ipsecsecret = new_key
            else:
                print("\033[91mCrazy Secret Key\033[0m")
        elif choice == "6":
            save_stuff_gre6sec5_iran(
                private_ip_private,
                local_ip_private,
                remote_ip_private,
                is_gre6=False,
            )
            save_stuff_gre6sec5_iran(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            update_ipsec_ip_multi5(private_ip_gre6)
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Please select a valid option.")


def gen_multiedit_localmenu():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print("\033[92m(   ) \033[92mEdit local\033[93m Geneve UDP Menu\033[0m")
    print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[92mGeneve Private IPV4 \033[96m[Point IP]\033[0m")
    print("2. \033[93mGeneve Private IPV6 \033[96m[Point IP]\033[0m")
    print("3. \033[94mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        choice = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if choice == "1":
            gen_multiedit_local()
            break
        elif choice == "2":
            gen_multiedit_localv6()
            break
        elif choice == "3":
            clear()
            multi_edit_local()
            break
        else:
            print("Invalid choice.")


def gen_multiedit_local():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print("\033[92m(   ) \033[92mEdit local\033[93m Geneve UDP V4 Menu\033[0m")
    print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[92mNo IPSEC\033[0m")
    print("2. \033[93mWith IPSEC\033[0m")
    print("3. \033[94mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        choice = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if choice == "1":
            genudpnosec_multiedit_local()
            break
        elif choice == "2":
            genudpsec_multiedit_local()
            break
        elif choice == "3":
            clear()
            gen_multiedit_localmenu()
            break
        else:
            print("Invalid choice.")


def gen_multiedit_localv6():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print("\033[92m(   ) \033[92mEdit local\033[93m Geneve UDP V6 Menu\033[0m")
    print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[92mNo IPSEC\033[0m")
    print("2. \033[93mWith IPSEC\033[0m")
    print("3. \033[94mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        choice = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if choice == "1":
            genudpnosec_multiedit_localv6()
            break
        elif choice == "2":
            genudpsec_multiedit_localv6()
            break
        elif choice == "3":
            clear()
            gen_multiedit_localmenu()
            break
        else:
            print("Invalid choice.")


def genudpnosec_multiedit_localv6():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print("\033[92m(   ) \033[92mEdit local\033[93m Geneve UDP V6 Menu\033[0m")
    print('\033[92m "-"\033[93m═════════════════════════════════════════════\033[0m')
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[96mKharej\033[92m[5] \033[93mIRAN\033[92m[1]\033[0m")
    print("2. \033[96mKharej\033[92m[1] \033[93mIRAN\033[92m[5]  \033[0m")
    print("3. \033[94mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        choice = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if choice == "1":
            genudpnosec_edit_localkharej_multiv6()
            break
        elif choice == "2":
            genudpnosec_edit_localiran_multiv6()
            break
        elif choice == "3":
            clear()
            gen_multiedit_localv6()
            break
        else:
            print("Invalid choice.")


def genudpnosec_edit_localiran_multiv6():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print(
        "\033[92m(   ) \033[93mGeneve V6 \033[92m[5]IRAN\033[96m [1]Kharej\033[93m Menu\033[0m"
    )
    print(
        '\033[92m "-"\033[93m══════════════════════════════════════════════════════════\033[0m'
    )
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[92mIRAN[1]\033[0m")
    print("2. \033[92mIRAN[2]\033[0m")
    print("3. \033[93mIRAN[3]\033[0m")
    print("4. \033[92mIRAN[4]\033[0m")
    print("5. \033[92mIRAN[5]\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    print("6. \033[93mKharej Menu\033[0m")
    print("0. \033[94mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if server_type == "1":
            genudpiranfive1nosec_editmulti_localv6()
            break
        elif server_type == "2":
            genudpiranfive2nosec_editmulti_localv6()
            break
        elif server_type == "3":
            genudpiranfive3nosec_editmulti_localv6()
            break
        elif server_type == "4":
            genudpiranfive4nosec_editmulti_localv6()
            break
        elif server_type == "5":
            genudpiranfive5nosec_editmulti_localv6()
            break
        elif server_type == "6":
            genudpkharejonenosec_editmulti_localmenuv6()
            break
        elif server_type == "0":
            os.system("clear")
            genudpnosec_multiedit_localv6()
            break
        else:
            print("Invalid choice.")


def genudpkharejonenosec_editmulti_localmenuv6():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print(
        "\033[92m(   ) \033[93mGenve V6 \033[92m[5]IRAN\033[96m [1]Kharej\033[93m Menu\033[0m"
    )
    print(
        '\033[92m "-"\033[93m══════════════════════════════════════════════════════════\033[0m'
    )
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mThis is Kharej menu:\033[0m")
    print("1. \033[92mServer[1]\033[0m")
    print("2. \033[92mServer[2]\033[0m")
    print("3. \033[93mServer[3]\033[0m")
    print("4. \033[92mServer[4]\033[0m")
    print("5. \033[92mServer[5]\033[0m")
    print("0. \033[94mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if server_type == "1":
            genudpkharejone1nosec_editmulti_localv6()
            break
        elif server_type == "2":
            genudpkharejone2nosec_editmulti_localv6()
            break
        elif server_type == "3":
            genudpkharejone3nosec_editmulti_localv6()
            break
        elif server_type == "4":
            genudpkharejone4nosec_editmulti_localv6()
            break
        elif server_type == "5":
            genudpkharejone5nosec_editmulti_localv6()
            break
        elif server_type == "0":
            os.system("clear")
            genudpnosec_multiedit_localv6()
            break
        else:
            print("Invalid choice.")


def genudpnosec_edit_localkharej_multiv6():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print(
        "\033[92m(   ) \033[93mGeneve V6 \033[92m[5]Kharej\033[96m [1]IRAN\033[93m Menu\033[0m"
    )
    print(
        '\033[92m "-"\033[93m══════════════════════════════════════════════════════════\033[0m'
    )
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[92mKharej[1]\033[0m")
    print("2. \033[92mKharej[2]\033[0m")
    print("3. \033[93mKharej[3]\033[0m")
    print("4. \033[92mKharej[4]\033[0m")
    print("5. \033[92mKharej[5]\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    print("6.\033[93mIRAN Menu\033[0m")
    print("0. \033[94mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if server_type == "1":
            genudpkharej1nosec_editmulti_localv6()
            break
        elif server_type == "2":
            genudpkharej2nosec_editmulti_localv6()
            break
        elif server_type == "3":
            genudpkharej3nosec_editmulti_localv6()
            break
        elif server_type == "4":
            genudpkharej4nosec_editmulti_localv6()
            break
        elif server_type == "5":
            genudpkharej5nosec_editmulti_localv6()
            break
        elif server_type == "6":
            genudpirannosec_editmulti_localv6()
            break
        elif server_type == "0":
            os.system("clear")
            genudpnosec_multiedit_localv6()
            break
        else:
            print("Invalid choice.")


def genudpirannosec_editmulti_localv6():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print(
        "\033[92m(   ) \033[93mGeneve V6 \033[92m[5]Kharej\033[96m [1]IRAN\033[93m Menu\033[0m"
    )
    print(
        '\033[92m "-"\033[93m══════════════════════════════════════════════════════════\033[0m'
    )
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mThis is IRAN menu:\033[0m")
    print("1. \033[92mServer[1]\033[0m")
    print("2. \033[92mServer[2]\033[0m")
    print("3. \033[93mServer[3]\033[0m")
    print("4. \033[92mServer[4]\033[0m")
    print("5. \033[92mServer[5]\033[0m")
    print("0. \033[94mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if server_type == "1":
            genudpir1nosec_editmulti_localv6()
            break
        elif server_type == "2":
            genudpir2nosec_editmulti_localv6()
            break
        elif server_type == "3":
            genudpir3nosec_editmulti_localv6()
            break
        elif server_type == "4":
            genudpir4nosec_editmulti_localv6()
            break
        elif server_type == "5":
            genudpir5nosec_editmulti_localv6()
            break
        elif server_type == "0":
            os.system("clear")
            genudpnosec_multiedit_localv6()
            break
        else:
            print("Invalid choice.")


def genudpnosec_multiedit_local():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print("\033[92m(   ) \033[92mEdit local\033[93m Geneve UDP V4 Menu\033[0m")
    print('\033[92m "-"\033[93m═════════════════════════════════════════════\033[0m')
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[96mKharej\033[92m[5] \033[93mIRAN\033[92m[1]\033[0m")
    print("2. \033[96mKharej\033[92m[1] \033[93mIRAN\033[92m[5]  \033[0m")
    print("3. \033[94mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        choice = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if choice == "1":
            genudpnosec_edit_localkharej_multi()
            break
        elif choice == "2":
            genudpnosec_edit_localiran_multi()
            break
        elif choice == "3":
            clear()
            gen_multiedit_local()
            break
        else:
            print("Invalid choice.")


def genudpnosec_edit_localiran_multi():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print(
        "\033[92m(   ) \033[93mGeneve V4 \033[92m[5]IRAN\033[96m [1]Kharej\033[93m Menu\033[0m"
    )
    print(
        '\033[92m "-"\033[93m══════════════════════════════════════════════════════════\033[0m'
    )
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[92mIRAN[1]\033[0m")
    print("2. \033[92mIRAN[2]\033[0m")
    print("3. \033[93mIRAN[3]\033[0m")
    print("4. \033[92mIRAN[4]\033[0m")
    print("5. \033[92mIRAN[5]\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    print("6. \033[93mKharej Menu\033[0m")
    print("0. \033[94mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if server_type == "1":
            genudpiranfive1nosec_editmulti_local()
            break
        elif server_type == "2":
            genudpiranfive2nosec_editmulti_local()
            break
        elif server_type == "3":
            genudpiranfive3nosec_editmulti_local()
            break
        elif server_type == "4":
            genudpiranfive4nosec_editmulti_local()
            break
        elif server_type == "5":
            genudpiranfive5nosec_editmulti_local()
            break
        elif server_type == "6":
            genudpkharejonenosec_editmulti_localmenu()
            break
        elif server_type == "0":
            os.system("clear")
            genudpnosec_multiedit_local()
            break
        else:
            print("Invalid choice.")


def genudpkharejonenosec_editmulti_localmenu():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print(
        "\033[92m(   ) \033[93mGenve V4 \033[92m[5]IRAN\033[96m [1]Kharej\033[93m Menu\033[0m"
    )
    print(
        '\033[92m "-"\033[93m══════════════════════════════════════════════════════════\033[0m'
    )
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mThis is Kharej menu:\033[0m")
    print("1. \033[92mServer[1]\033[0m")
    print("2. \033[92mServer[2]\033[0m")
    print("3. \033[93mServer[3]\033[0m")
    print("4. \033[92mServer[4]\033[0m")
    print("5. \033[92mServer[5]\033[0m")
    print("0. \033[94mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if server_type == "1":
            genudpkharejone1nosec_editmulti_local()
            break
        elif server_type == "2":
            genudpkharejone2nosec_editmulti_local()
            break
        elif server_type == "3":
            genudpkharejone3nosec_editmulti_local()
            break
        elif server_type == "4":
            genudpkharejone4nosec_editmulti_local()
            break
        elif server_type == "5":
            genudpkharejone5nosec_editmulti_local()
            break
        elif server_type == "0":
            os.system("clear")
            genudpnosec_multiedit_local()
            break
        else:
            print("Invalid choice.")


def genudpnosec_edit_localkharej_multi():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print(
        "\033[92m(   ) \033[93mGeneve V4 \033[92m[5]Kharej\033[96m [1]IRAN\033[93m Menu\033[0m"
    )
    print(
        '\033[92m "-"\033[93m══════════════════════════════════════════════════════════\033[0m'
    )
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[92mKharej[1]\033[0m")
    print("2. \033[92mKharej[2]\033[0m")
    print("3. \033[93mKharej[3]\033[0m")
    print("4. \033[92mKharej[4]\033[0m")
    print("5. \033[92mKharej[5]\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    print("6.\033[93mIRAN Menu\033[0m")
    print("0. \033[94mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if server_type == "1":
            genudpkharej1nosec_editmulti_local()
            break
        elif server_type == "2":
            genudpkharej2nosec_editmulti_local()
            break
        elif server_type == "3":
            genudpkharej3nosec_editmulti_local()
            break
        elif server_type == "4":
            genudpkharej4nosec_editmulti_local()
            break
        elif server_type == "5":
            genudpkharej5nosec_editmulti_local()
            break
        elif server_type == "6":
            genudpirannosec_editmulti_local()
            break
        elif server_type == "0":
            os.system("clear")
            genudpnosec_multiedit_local()
            break
        else:
            print("Invalid choice.")


def genudpirannosec_editmulti_local():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print(
        "\033[92m(   ) \033[93mGeneve V4 \033[92m[5]Kharej\033[96m [1]IRAN\033[93m Menu\033[0m"
    )
    print(
        '\033[92m "-"\033[93m══════════════════════════════════════════════════════════\033[0m'
    )
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mThis is IRAN menu:\033[0m")
    print("1. \033[92mServer[1]\033[0m")
    print("2. \033[92mServer[2]\033[0m")
    print("3. \033[93mServer[3]\033[0m")
    print("4. \033[92mServer[4]\033[0m")
    print("5. \033[92mServer[5]\033[0m")
    print("0. \033[94mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if server_type == "1":
            genudpir1nosec_editmulti_local()
            break
        elif server_type == "2":
            genudpir2nosec_editmulti_local()
            break
        elif server_type == "3":
            genudpir3nosec_editmulti_local()
            break
        elif server_type == "4":
            genudpir4nosec_editmulti_local()
            break
        elif server_type == "5":
            genudpir5nosec_editmulti_local()
            break
        elif server_type == "0":
            os.system("clear")
            genudpnosec_multiedit_local()
            break
        else:
            print("Invalid choice.")


# server 1


def genudpir1nosec_editmulti_local():
    remote_ip_private = remote_ip("/etc/sys1.sh")
    private_ip_private = private_genmulti("/etc/sys1.sh")

    if not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    while True:
        os.system("clear")
        display_stuff_gennoseck1(remote_ip_private, private_ip_private)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mGeneve V4\033[93m IRAN Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej [1] \033[92m Public IP\033[0m")
        print("2.\033[93m Change \033[97mGeneve \033[93mPrivate IPV4 \033[0m")
        print("3. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "2":
            new_ip = input(
                "\033[93mEnter New Private IPV4 address \033[96m[Geneve]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mKharej [1]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "3":
            save_stuff_gen1(private_ip_private, remote_ip_private)
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Please select a valid option.")


def genudpkharej1nosec_editmulti_local():
    remote_ip_private = remote_ip("/etc/sys1.sh")
    private_ip_private = private_genmulti("/etc/sys1.sh")

    if not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    while True:
        os.system("clear")
        display_stuff_gennoseci(remote_ip_private, private_ip_private)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mGeneve\033[93m Kharej [1] Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN \033[92m Public IP\033[0m")
        print("2.\033[93m Change \033[97mGeneve \033[93mPrivate IPV4 \033[0m")
        print("3. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "2":
            new_ip = input(
                "\033[93mEnter New Private IPV4 address \033[96m[Geneve]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mIRAN\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "3":
            save_stuff_gen1(private_ip_private, remote_ip_private)
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Please select a valid option.")


# server 2


def genudpir2nosec_editmulti_local():
    remote_ip_private = remote_ip("/etc/sys2.sh")
    private_ip_private = private_genmulti("/etc/sys2.sh")

    if not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    while True:
        os.system("clear")
        display_stuff_gennoseck2(remote_ip_private, private_ip_private)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mGeneve V4\033[93m IRAN Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej [2] \033[92m Public IP\033[0m")
        print("2.\033[93m Change \033[97mGeneve \033[93mPrivate IPV4 \033[0m")
        print("3. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "2":
            new_ip = input(
                "\033[93mEnter New Private IPV4 address \033[96m[Geneve]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mKharej [2]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "3":
            save_stuff_gen2(private_ip_private, remote_ip_private)
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Please select a valid option.")


def genudpkharej2nosec_editmulti_local():
    remote_ip_private = remote_ip("/etc/sys2.sh")
    private_ip_private = private_genmulti("/etc/sys2.sh")

    if not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    while True:
        os.system("clear")
        display_stuff_gennoseci(remote_ip_private, private_ip_private)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mGeneve\033[93m Kharej [2] Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN \033[92m Public IP\033[0m")
        print("2.\033[93m Change \033[97mGeneve \033[93mPrivate IPV4 \033[0m")
        print("3. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "2":
            new_ip = input(
                "\033[93mEnter New Private IPV4 address \033[96m[Geneve]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mIRAN\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "3":
            save_stuff_gen2(private_ip_private, remote_ip_private)
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Please select a valid option.")


# server 3


def genudpir3nosec_editmulti_local():
    remote_ip_private = remote_ip("/etc/sys3.sh")
    private_ip_private = private_genmulti("/etc/sys3.sh")

    if not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    while True:
        os.system("clear")
        display_stuff_gennoseck3(remote_ip_private, private_ip_private)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mGeneve V4\033[93m IRAN Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej [3] \033[92m Public IP\033[0m")
        print("2.\033[93m Change \033[97mGeneve \033[93mPrivate IPV4 \033[0m")
        print("3. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "2":
            new_ip = input(
                "\033[93mEnter New Private IPV4 address \033[96m[Geneve]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mKharej [3]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "3":
            save_stuff_gen3(private_ip_private, remote_ip_private)
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Please select a valid option.")


def genudpkharej3nosec_editmulti_local():
    remote_ip_private = remote_ip("/etc/sys3.sh")
    private_ip_private = private_genmulti("/etc/sys3.sh")

    if not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    while True:
        os.system("clear")
        display_stuff_gennoseci(remote_ip_private, private_ip_private)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mGeneve\033[93m Kharej [3] Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN \033[92m Public IP\033[0m")
        print("2.\033[93m Change \033[97mGeneve \033[93mPrivate IPV4 \033[0m")
        print("3. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "2":
            new_ip = input(
                "\033[93mEnter New Private IPV4 address \033[96m[Geneve]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mIRAN\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "3":
            save_stuff_gen3(private_ip_private, remote_ip_private)
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Please select a valid option.")


# server 4


def genudpir4nosec_editmulti_local():
    remote_ip_private = remote_ip("/etc/sys4.sh")
    private_ip_private = private_genmulti("/etc/sys4.sh")

    if not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    while True:
        os.system("clear")
        display_stuff_gennoseck4(remote_ip_private, private_ip_private)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mGeneve V4\033[93m IRAN Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej [4] \033[92m Public IP\033[0m")
        print("2.\033[93m Change \033[97mGeneve \033[93mPrivate IPV4 \033[0m")
        print("3. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "2":
            new_ip = input(
                "\033[93mEnter New Private IPV4 address \033[96m[Geneve]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mKharej [4]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "3":
            save_stuff_gen4(private_ip_private, remote_ip_private)
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Please select a valid option.")


def genudpkharej4nosec_editmulti_local():
    remote_ip_private = remote_ip("/etc/sys4.sh")
    private_ip_private = private_genmulti("/etc/sys4.sh")

    if not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    while True:
        os.system("clear")
        display_stuff_gennoseci(remote_ip_private, private_ip_private)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mGeneve\033[93m Kharej [4] Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN \033[92m Public IP\033[0m")
        print("2.\033[93m Change \033[97mGeneve \033[93mPrivate IPV4 \033[0m")
        print("3. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "2":
            new_ip = input(
                "\033[93mEnter New Private IPV4 address \033[96m[Geneve]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mIRAN\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "3":
            save_stuff_gen4(private_ip_private, remote_ip_private)
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Please select a valid option.")


# server


def genudpir5nosec_editmulti_local():
    remote_ip_private = remote_ip("/etc/sys5.sh")
    private_ip_private = private_genmulti("/etc/sys5.sh")

    if not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    while True:
        os.system("clear")
        display_stuff_gennoseck5(remote_ip_private, private_ip_private)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mGeneve V4\033[93m IRAN Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej [5] \033[92m Public IP\033[0m")
        print("2.\033[93m Change \033[97mGeneve \033[93mPrivate IPV4 \033[0m")
        print("3. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "2":
            new_ip = input(
                "\033[93mEnter New Private IPV4 address \033[96m[Geneve]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mKharej [5]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "3":
            save_stuff_gen5(private_ip_private, remote_ip_private)
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Please select a valid option.")


def genudpkharej5nosec_editmulti_local():
    remote_ip_private = remote_ip("/etc/sys5.sh")
    private_ip_private = private_genmulti("/etc/sys5.sh")

    if not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    while True:
        os.system("clear")
        display_stuff_gennoseci(remote_ip_private, private_ip_private)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mGeneve\033[93m Kharej [5] Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN \033[92m Public IP\033[0m")
        print("2.\033[93m Change \033[97mGeneve \033[93mPrivate IPV4 \033[0m")
        print("3. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "2":
            new_ip = input(
                "\033[93mEnter New Private IPV4 address \033[96m[Geneve]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mIRAN\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "3":
            save_stuff_gen5(private_ip_private, remote_ip_private)
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Please select a valid option.")


# iran 5 kharej 1 v6 #1


def genudpiranfive1nosec_editmulti_local():
    remote_ip_private = remote_ip("/etc/sys1.sh")
    private_ip_private = private_genmulti("/etc/sys1.sh")

    if not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    while True:
        os.system("clear")
        display_stuff_gennoseckharej(remote_ip_private, private_ip_private)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mGeneve V4\033[93m IRAN [1] Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej\033[92m Public IP\033[0m")
        print("2.\033[93m Change \033[97mGeneve \033[93mPrivate IPV4 \033[0m")
        print("3. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "2":
            new_ip = input(
                "\033[93mEnter New Private IPV4 address \033[96m[Geneve]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mKharej\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "3":
            save_stuff_gen1(private_ip_private, remote_ip_private)
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Please select a valid option.")


def genudpkharejone1nosec_editmulti_local():
    remote_ip_private = remote_ip("/etc/sys1.sh")
    private_ip_private = private_genmulti("/etc/sys1.sh")

    if not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    while True:
        os.system("clear")
        display_stuff_gennoseciran1(remote_ip_private, private_ip_private)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mGeneve\033[93m Kharej Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN [1]\033[92m Public IP\033[0m")
        print("2.\033[93m Change \033[97mGeneve \033[93mPrivate IPV4 \033[0m")
        print("3. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "2":
            new_ip = input(
                "\033[93mEnter New Private IPV4 address \033[96m[Geneve]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mIRAN [1]\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "3":
            save_stuff_gen1(private_ip_private, remote_ip_private)
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Please select a valid option.")


# 2


def genudpiranfive2nosec_editmulti_local():
    remote_ip_private = remote_ip("/etc/sys2.sh")
    private_ip_private = private_genmulti("/etc/sys2.sh")

    if not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    while True:
        os.system("clear")
        display_stuff_gennoseckharej(remote_ip_private, private_ip_private)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mGeneve V4\033[93m IRAN [2] Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej \033[92m Public IP\033[0m")
        print("2.\033[93m Change \033[97mGeneve \033[93mPrivate IPV4 \033[0m")
        print("3. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "2":
            new_ip = input(
                "\033[93mEnter New Private IPV4 address \033[96m[Geneve]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mKharej\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "3":
            save_stuff_gen2(private_ip_private, remote_ip_private)
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Please select a valid option.")


def genudpkharejone2nosec_editmulti_local():
    remote_ip_private = remote_ip("/etc/sys2.sh")
    private_ip_private = private_genmulti("/etc/sys2.sh")

    if not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    while True:
        os.system("clear")
        display_stuff_gennoseciran2(remote_ip_private, private_ip_private)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mGeneve\033[93m Kharej Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN [2]\033[92m Public IP\033[0m")
        print("2.\033[93m Change \033[97mGeneve \033[93mPrivate IPV4 \033[0m")
        print("3. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "2":
            new_ip = input(
                "\033[93mEnter New Private IPV4 address \033[96m[Geneve]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mIRAN [2]\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "3":
            save_stuff_gen2(private_ip_private, remote_ip_private)
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Please select a valid option.")


# 3
def genudpiranfive3nosec_editmulti_local():
    remote_ip_private = remote_ip("/etc/sys3.sh")
    private_ip_private = private_genmulti("/etc/sys3.sh")

    if not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    while True:
        os.system("clear")
        display_stuff_gennoseckharej(remote_ip_private, private_ip_private)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mGeneve V4\033[93m IRAN [3] Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej \033[92m Public IP\033[0m")
        print("2.\033[93m Change \033[97mGeneve \033[93mPrivate IPV4 \033[0m")
        print("3. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "2":
            new_ip = input(
                "\033[93mEnter New Private IPV4 address \033[96m[Geneve]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mKharej\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "3":
            save_stuff_gen3(private_ip_private, remote_ip_private)
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Please select a valid option.")


def genudpkharejone3nosec_editmulti_local():
    remote_ip_private = remote_ip("/etc/sys3.sh")
    private_ip_private = private_genmulti("/etc/sys3.sh")

    if not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    while True:
        os.system("clear")
        display_stuff_gennoseciran3(remote_ip_private, private_ip_private)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mGeneve\033[93m Kharej Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN [3]\033[92m Public IP\033[0m")
        print("2.\033[93m Change \033[97mGeneve \033[93mPrivate IPV4 \033[0m")
        print("3. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "2":
            new_ip = input(
                "\033[93mEnter New Private IPV4 address \033[96m[Geneve]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mIRAN [3]\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "3":
            save_stuff_gen3(private_ip_private, remote_ip_private)
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Please select a valid option.")


# 4


def genudpiranfive4nosec_editmulti_local():
    remote_ip_private = remote_ip("/etc/sys4.sh")
    private_ip_private = private_genmulti("/etc/sys4.sh")

    if not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    while True:
        os.system("clear")
        display_stuff_gennoseckharej(remote_ip_private, private_ip_private)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mGeneve V4\033[93m IRAN [4] Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej \033[92m Public IP\033[0m")
        print("2.\033[93m Change \033[97mGeneve \033[93mPrivate IPV4 \033[0m")
        print("3. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "2":
            new_ip = input(
                "\033[93mEnter New Private IPV4 address \033[96m[Geneve]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mKharej\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "3":
            save_stuff_gen4(private_ip_private, remote_ip_private)
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Please select a valid option.")


def genudpkharejone4nosec_editmulti_local():
    remote_ip_private = remote_ip("/etc/sys4.sh")
    private_ip_private = private_genmulti("/etc/sys4.sh")

    if not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    while True:
        os.system("clear")
        display_stuff_gennoseciran4(remote_ip_private, private_ip_private)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mGeneve\033[93m Kharej Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN [4]\033[92m Public IP\033[0m")
        print("2.\033[93m Change \033[97mGeneve \033[93mPrivate IPV4 \033[0m")
        print("3. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "2":
            new_ip = input(
                "\033[93mEnter New Private IPV4 address \033[96m[Geneve]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mIRAN [4]\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "3":
            save_stuff_gen4(private_ip_private, remote_ip_private)
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Please select a valid option.")


# 5


def genudpiranfive5nosec_editmulti_local():
    remote_ip_private = remote_ip("/etc/sys5.sh")
    private_ip_private = private_genmulti("/etc/sys5.sh")

    if not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    while True:
        os.system("clear")
        display_stuff_gennoseckharej(remote_ip_private, private_ip_private)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mGeneve V4\033[93m IRAN [5] Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej \033[92m Public IP\033[0m")
        print("2.\033[93m Change \033[97mGeneve \033[93mPrivate IPV4 \033[0m")
        print("3. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "2":
            new_ip = input(
                "\033[93mEnter New Private IPV4 address \033[96m[Geneve]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mKharej\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "3":
            save_stuff_gen5(private_ip_private, remote_ip_private)
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Please select a valid option.")


def genudpkharejone5nosec_editmulti_local():
    remote_ip_private = remote_ip("/etc/sys5.sh")
    private_ip_private = private_genmulti("/etc/sys5.sh")

    if not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    while True:
        os.system("clear")
        display_stuff_gennoseciran5(remote_ip_private, private_ip_private)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mGeneve\033[93m Kharej Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN [5]\033[92m Public IP\033[0m")
        print("2.\033[93m Change \033[97mGeneve \033[93mPrivate IPV4 \033[0m")
        print("3. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "2":
            new_ip = input(
                "\033[93mEnter New Private IPV4 address \033[96m[Geneve]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mIRAN [5]\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "3":
            save_stuff_gen5(private_ip_private, remote_ip_private)
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Please select a valid option.")


def update_ipfile_gen(name, new_ip, update_type):
    try:
        with open(name, "r") as f:
            content = f.read()

        if update_type == "private":
            if ":" in new_ip:
                new_content = re.sub(
                    r"ip addr add \S+/64 dev azumigen?",
                    f"ip addr add {new_ip}/64 dev azumigen",
                    content,
                )
                ip_parts = new_ip.split(":")
                ip_parts[-1] = "1" if ip_parts[-1] == "2" else "2"
                counterpart_ip = ":".join(ip_parts)
                new_content = re.sub(
                    r"ip route add \S+/64 dev azumigen?",
                    f"ip route add {counterpart_ip}/64 dev azumigen",
                    new_content,
                )
            else:
                new_content = re.sub(
                    r"ip addr add \d+\.\d+\.\d+\.\d+/32 dev azumigen?",
                    f"ip addr add {new_ip}/32 dev azumigen",
                    content,
                )
                ip_parts = new_ip.split(".")
                ip_parts[-1] = "1" if ip_parts[-1] == "2" else "2"
                counterpart_ip = ".".join(ip_parts)
                new_content = re.sub(
                    r"ip route add \d+\.\d+\.\d+\.\d+/32 dev azumigen?",
                    f"ip route add {counterpart_ip}/32 dev azumigen",
                    new_content,
                )
        elif update_type == "remote":
            new_content = re.sub(r"remote \S+", f"remote {new_ip}", content)

        with open(name, "w") as f:
            f.write(new_content)
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def display_stuff_gennoseci(remote_ip, private_ip):
    lines = [
        f"\033[93mTitle:         Geneve Configuration\033[0m",
        f"\033[97m──────────────────────────────────────\033[0m",
        f"\033[92mIRAN Public IP:        \033[97m{remote_ip}\033[0m",
        f"\033[93mGeneve Private IP:     \033[97m{private_ip}\033[0m",
    ]
    box_width = 50

    print("\033[93m╭" + "─" * (box_width - 2) + "╮\033[0m")

    for line in lines:
        print(f"\033[93m {line:<{box_width - 4}} \033[0m")

    print("\033[93m╰" + "─" * (box_width - 2) + "╯\033[0m")


# server 1
def display_stuff_gennoseck1(remote_ip, private_ip):
    lines = [
        f"\033[93mTitle:         Geneve Configuration\033[0m",
        f"\033[97m──────────────────────────────────────\033[0m",
        f"\033[92mKharej [1] Public IP:      \033[97m{remote_ip}\033[0m",
        f"\033[93mGeneve Private IP:         \033[97m{private_ip}\033[0m",
    ]
    box_width = 50

    print("\033[93m╭" + "─" * (box_width - 2) + "╮\033[0m")

    for line in lines:
        print(f"\033[93m {line:<{box_width - 4}} \033[0m")

    print("\033[93m╰" + "─" * (box_width - 2) + "╯\033[0m")


def save_stuff_gen1(private_ip, remote_ip):
    current_ips = get_current_private_ipsgen_multi1()
    current_ip = current_ips.get("geneve")

    if current_ip:
        delete_ufw_rules(current_ip)

    add_ufw_rules(private_ip)

    opposite_private_ip = wtb_opposite_ipgen(private_ip)

    try:
        update_pingfilegen("/etc/ping1_sys.sh", opposite_private_ip)
        update_ipfile_gen("/etc/sys1.sh", private_ip, update_type="private")
        update_ipfile_gen("/etc/sys1.sh", remote_ip, update_type="remote")

        interface = "azumigen1"
        try:
            subprocess.run(["ip", "link", "set", "dev", interface, "down"], check=True)
            subprocess.run(["ip", "link", "delete", interface], check=True)
        except subprocess.CalledProcessError:
            print("\033[91merror bringing interface down or deleting it\033[0m")

        script = "/etc/sys1.sh"
        result = subprocess.run(["/bin/bash", script], capture_output=True, text=True)
        if "RTNETLINK answers: File exists" in (result.stderr or ""):
            print("interface already exists, don't mind this")
        else:
            result.check_returncode()
        print(
            f"\033[92mChanges saved and {interface} interface updated successfully!\033[0m"
        )

        subprocess.run(["sudo", "systemctl", "daemon-reload"], check=True)
        try:
            subprocess.run(
                ["sudo", "systemctl", "restart", "ping1_gen.service"], check=True
            )
            display_checkmark(
                "\033[92mSystem services reloaded and restarted successfully!\033[0m"
            )
        except subprocess.CalledProcessError as e:
            if "Unit ping1_gen.service not found" in (e.stderr or ""):
                print(
                    "\033[91mFailed to restart ping1_gen.service: Unit ping1_gen.service not found.\033[0m"
                )
            else:
                raise

    except subprocess.CalledProcessError as e:
        print(f"\033[91merror applying network stuff : gen udp no sec error\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def genudpir1nosec_editmulti_localv6():
    remote_ip_private = remote_ip("/etc/sys1.sh")
    private_ip_private = private_genmulti("/etc/sys1.sh")

    if not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    while True:
        os.system("clear")
        display_stuff_gennoseck1(remote_ip_private, private_ip_private)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mGeneve V6\033[93m IRAN Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej [1] \033[92m Public IP\033[0m")
        print("2.\033[93m Change \033[97mGeneve \033[93mPrivate IPV6 \033[0m")
        print("3. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "2":
            new_ip = input(
                "\033[93mEnter New Private IPV6 address \033[96m[Geneve]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mKharej [1]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "3":
            save_stuff_gen1(private_ip_private, remote_ip_private)
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Please select a valid option.")


def genudpkharej1nosec_editmulti_localv6():
    remote_ip_private = remote_ip("/etc/sys1.sh")
    private_ip_private = private_genmulti("/etc/sys1.sh")

    if not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    while True:
        os.system("clear")
        display_stuff_gennoseci(remote_ip_private, private_ip_private)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mGeneve\033[93m Kharej [1] Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN \033[92m Public IP\033[0m")
        print("2.\033[93m Change \033[97mGeneve \033[93mPrivate IPV6 \033[0m")
        print("3. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "2":
            new_ip = input(
                "\033[93mEnter New Private IPV6 address \033[96m[Geneve]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mIRAN\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "3":
            save_stuff_gen1(private_ip_private, remote_ip_private)
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Please select a valid option.")


# server 2
def display_stuff_gennoseck2(remote_ip, private_ip):
    lines = [
        f"\033[93mTitle:         Geneve Configuration\033[0m",
        f"\033[97m──────────────────────────────────────\033[0m",
        f"\033[92mKharej [2] Public IP:      \033[97m{remote_ip}\033[0m",
        f"\033[93mGeneve Private IP:         \033[97m{private_ip}\033[0m",
    ]
    box_width = 50

    print("\033[93m╭" + "─" * (box_width - 2) + "╮\033[0m")

    for line in lines:
        print(f"\033[93m {line:<{box_width - 4}} \033[0m")

    print("\033[93m╰" + "─" * (box_width - 2) + "╯\033[0m")


def save_stuff_gen2(private_ip, remote_ip):
    current_ips = get_current_private_ipsgen_multi2()
    current_ip = current_ips.get("geneve")

    if current_ip:
        delete_ufw_rules(current_ip)

    add_ufw_rules(private_ip)

    opposite_private_ip = wtb_opposite_ipgen(private_ip)

    try:
        update_pingfilegen("/etc/ping2_sys.sh", opposite_private_ip)
        update_ipfile_gen("/etc/sys2.sh", private_ip, update_type="private")
        update_ipfile_gen("/etc/sys2.sh", remote_ip, update_type="remote")

        interface = "azumigen2"
        try:
            subprocess.run(["ip", "link", "set", "dev", interface, "down"], check=True)
            subprocess.run(["ip", "link", "delete", interface], check=True)
        except subprocess.CalledProcessError:
            print("\033[91merror bringing interface down or deleting it\033[0m")

        script = "/etc/sys2.sh"
        result = subprocess.run(["/bin/bash", script], capture_output=True, text=True)
        if "RTNETLINK answers: File exists" in (result.stderr or ""):
            print("interface already exists, don't mind this")
        else:
            result.check_returncode()
        print(
            f"\033[92mChanges saved and {interface} interface updated successfully!\033[0m"
        )

        subprocess.run(["sudo", "systemctl", "daemon-reload"], check=True)
        try:
            subprocess.run(
                ["sudo", "systemctl", "restart", "ping2_gen.service"], check=True
            )
            display_checkmark(
                "\033[92mSystem services reloaded and restarted successfully!\033[0m"
            )
        except subprocess.CalledProcessError as e:
            if "Unit ping2_gen.service not found" in (e.stderr or ""):
                print(
                    "\033[91mFailed to restart ping2_gen.service: Unit ping2_gen.service not found.\033[0m"
                )
            else:
                raise

    except subprocess.CalledProcessError as e:
        print(f"\033[91merror applying network stuff : gen udp no sec error\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def genudpir2nosec_editmulti_localv6():
    remote_ip_private = remote_ip("/etc/sys2.sh")
    private_ip_private = private_genmulti("/etc/sys2.sh")

    if not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    while True:
        os.system("clear")
        display_stuff_gennoseck2(remote_ip_private, private_ip_private)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mGeneve V6\033[93m IRAN Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej [2] \033[92m Public IP\033[0m")
        print("2.\033[93m Change \033[97mGeneve \033[93mPrivate IPV6 \033[0m")
        print("3. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "2":
            new_ip = input(
                "\033[93mEnter New Private IPV6 address \033[96m[Geneve]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mKharej [2]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "3":
            save_stuff_gen2(private_ip_private, remote_ip_private)
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Please select a valid option.")


def genudpkharej2nosec_editmulti_localv6():
    remote_ip_private = remote_ip("/etc/sys2.sh")
    private_ip_private = private_genmulti("/etc/sys2.sh")

    if not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    while True:
        os.system("clear")
        display_stuff_gennoseci(remote_ip_private, private_ip_private)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mGeneve\033[93m Kharej [2] Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN \033[92m Public IP\033[0m")
        print("2.\033[93m Change \033[97mGeneve \033[93mPrivate IPV6 \033[0m")
        print("3. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "2":
            new_ip = input(
                "\033[93mEnter New Private IPV6 address \033[96m[Geneve]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mIRAN\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "3":
            save_stuff_gen2(private_ip_private, remote_ip_private)
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Please select a valid option.")


# server 3
def display_stuff_gennoseck3(remote_ip, private_ip):
    lines = [
        f"\033[93mTitle:         Geneve Configuration\033[0m",
        f"\033[97m──────────────────────────────────────\033[0m",
        f"\033[92mKharej [3] Public IP:      \033[97m{remote_ip}\033[0m",
        f"\033[93mGeneve Private IP:         \033[97m{private_ip}\033[0m",
    ]
    box_width = 50

    print("\033[93m╭" + "─" * (box_width - 2) + "╮\033[0m")

    for line in lines:
        print(f"\033[93m {line:<{box_width - 4}} \033[0m")

    print("\033[93m╰" + "─" * (box_width - 2) + "╯\033[0m")


def save_stuff_gen3(private_ip, remote_ip):
    current_ips = get_current_private_ipsgen_multi3()
    current_ip = current_ips.get("geneve")

    if current_ip:
        delete_ufw_rules(current_ip)

    add_ufw_rules(private_ip)

    opposite_private_ip = wtb_opposite_ipgen(private_ip)

    try:
        update_pingfilegen("/etc/ping3_sys.sh", opposite_private_ip)
        update_ipfile_gen("/etc/sys3.sh", private_ip, update_type="private")
        update_ipfile_gen("/etc/sys3.sh", remote_ip, update_type="remote")

        interface = "azumigen3"
        try:
            subprocess.run(["ip", "link", "set", "dev", interface, "down"], check=True)
            subprocess.run(["ip", "link", "delete", interface], check=True)
        except subprocess.CalledProcessError:
            print("\033[91merror bringing interface down or deleting it\033[0m")

        script = "/etc/sys3.sh"
        result = subprocess.run(["/bin/bash", script], capture_output=True, text=True)
        if "RTNETLINK answers: File exists" in (result.stderr or ""):
            print("interface already exists, don't mind this")
        else:
            result.check_returncode()
        print(
            f"\033[92mChanges saved and {interface} interface updated successfully!\033[0m"
        )

        subprocess.run(["sudo", "systemctl", "daemon-reload"], check=True)
        try:
            subprocess.run(
                ["sudo", "systemctl", "restart", "ping3_gen.service"], check=True
            )
            display_checkmark(
                "\033[92mSystem services reloaded and restarted successfully!\033[0m"
            )
        except subprocess.CalledProcessError as e:
            if "Unit ping3_gen.service not found" in (e.stderr or ""):
                print(
                    "\033[91mFailed to restart ping3_gen.service: Unit ping3_gen.service not found.\033[0m"
                )
            else:
                raise

    except subprocess.CalledProcessError as e:
        print(f"\033[91merror applying network stuff : gen udp no sec error\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def genudpir3nosec_editmulti_localv6():
    remote_ip_private = remote_ip("/etc/sys3.sh")
    private_ip_private = private_genmulti("/etc/sys3.sh")

    if not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    while True:
        os.system("clear")
        display_stuff_gennoseck3(remote_ip_private, private_ip_private)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mGeneve V6\033[93m IRAN Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej [3] \033[92m Public IP\033[0m")
        print("2.\033[93m Change \033[97mGeneve \033[93mPrivate IPV6 \033[0m")
        print("3. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "2":
            new_ip = input(
                "\033[93mEnter New Private IPV6 address \033[96m[Geneve]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mKharej [3]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "3":
            save_stuff_gen3(private_ip_private, remote_ip_private)
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Please select a valid option.")


def genudpkharej3nosec_editmulti_localv6():
    remote_ip_private = remote_ip("/etc/sys3.sh")
    private_ip_private = private_genmulti("/etc/sys3.sh")

    if not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    while True:
        os.system("clear")
        display_stuff_gennoseci(remote_ip_private, private_ip_private)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mGeneve\033[93m Kharej [3] Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN \033[92m Public IP\033[0m")
        print("2.\033[93m Change \033[97mGeneve \033[93mPrivate IPV6 \033[0m")
        print("3. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "2":
            new_ip = input(
                "\033[93mEnter New Private IPV6 address \033[96m[Geneve]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mIRAN\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "3":
            save_stuff_gen3(private_ip_private, remote_ip_private)
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Please select a valid option.")


# server 4
def display_stuff_gennoseck4(remote_ip, private_ip):
    lines = [
        f"\033[93mTitle:         Geneve Configuration\033[0m",
        f"\033[97m──────────────────────────────────────\033[0m",
        f"\033[92mKharej [4] Public IP:      \033[97m{remote_ip}\033[0m",
        f"\033[93mGeneve Private IP:         \033[97m{private_ip}\033[0m",
    ]
    box_width = 50

    print("\033[93m╭" + "─" * (box_width - 2) + "╮\033[0m")

    for line in lines:
        print(f"\033[93m {line:<{box_width - 4}} \033[0m")

    print("\033[93m╰" + "─" * (box_width - 2) + "╯\033[0m")


def save_stuff_gen4(private_ip, remote_ip):
    current_ips = get_current_private_ipsgen_multi4()
    current_ip = current_ips.get("geneve")

    if current_ip:
        delete_ufw_rules(current_ip)

    add_ufw_rules(private_ip)

    opposite_private_ip = wtb_opposite_ipgen(private_ip)

    try:
        update_pingfilegen("/etc/ping4_sys.sh", opposite_private_ip)
        update_ipfile_gen("/etc/sys4.sh", private_ip, update_type="private")
        update_ipfile_gen("/etc/sys4.sh", remote_ip, update_type="remote")

        interface = "azumigen4"
        try:
            subprocess.run(["ip", "link", "set", "dev", interface, "down"], check=True)
            subprocess.run(["ip", "link", "delete", interface], check=True)
        except subprocess.CalledProcessError:
            print("\033[91merror bringing interface down or deleting it\033[0m")

        script = "/etc/sys4.sh"
        result = subprocess.run(["/bin/bash", script], capture_output=True, text=True)
        if "RTNETLINK answers: File exists" in (result.stderr or ""):
            print("interface already exists, don't mind this")
        else:
            result.check_returncode()
        print(
            f"\033[92mChanges saved and {interface} interface updated successfully!\033[0m"
        )

        subprocess.run(["sudo", "systemctl", "daemon-reload"], check=True)
        try:
            subprocess.run(
                ["sudo", "systemctl", "restart", "ping4_gen.service"], check=True
            )
            display_checkmark(
                "\033[92mSystem services reloaded and restarted successfully!\033[0m"
            )
        except subprocess.CalledProcessError as e:
            if "Unit ping4_gen.service not found" in (e.stderr or ""):
                print(
                    "\033[91mFailed to restart ping4_gen.service: Unit ping4_gen.service not found.\033[0m"
                )
            else:
                raise

    except subprocess.CalledProcessError as e:
        print(f"\033[91merror applying network stuff : gen udp no sec error\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def genudpir4nosec_editmulti_localv6():
    remote_ip_private = remote_ip("/etc/sys4.sh")
    private_ip_private = private_genmulti("/etc/sys4.sh")

    if not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    while True:
        os.system("clear")
        display_stuff_gennoseck4(remote_ip_private, private_ip_private)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mGeneve V6\033[93m IRAN Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej [4] \033[92m Public IP\033[0m")
        print("2.\033[93m Change \033[97mGeneve \033[93mPrivate IPV6 \033[0m")
        print("3. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "2":
            new_ip = input(
                "\033[93mEnter New Private IPV6 address \033[96m[Geneve]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mKharej [4]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "3":
            save_stuff_gen4(private_ip_private, remote_ip_private)
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Please select a valid option.")


def genudpkharej4nosec_editmulti_localv6():
    remote_ip_private = remote_ip("/etc/sys4.sh")
    private_ip_private = private_genmulti("/etc/sys4.sh")

    if not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    while True:
        os.system("clear")
        display_stuff_gennoseci(remote_ip_private, private_ip_private)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mGeneve\033[93m Kharej [4] Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN \033[92m Public IP\033[0m")
        print("2.\033[93m Change \033[97mGeneve \033[93mPrivate IPV6 \033[0m")
        print("3. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "2":
            new_ip = input(
                "\033[93mEnter New Private IPV6 address \033[96m[Geneve]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mIRAN\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "3":
            save_stuff_gen4(private_ip_private, remote_ip_private)
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Please select a valid option.")


# server 5
def display_stuff_gennoseck5(remote_ip, private_ip):
    lines = [
        f"\033[93mTitle:         Geneve Configuration\033[0m",
        f"\033[97m──────────────────────────────────────\033[0m",
        f"\033[92mKharej [5] Public IP:      \033[97m{remote_ip}\033[0m",
        f"\033[93mGeneve Private IP:         \033[97m{private_ip}\033[0m",
    ]
    box_width = 50

    print("\033[93m╭" + "─" * (box_width - 2) + "╮\033[0m")

    for line in lines:
        print(f"\033[93m {line:<{box_width - 4}} \033[0m")

    print("\033[93m╰" + "─" * (box_width - 2) + "╯\033[0m")


def save_stuff_gen5(private_ip, remote_ip):
    current_ips = get_current_private_ipsgen_multi5()
    current_ip = current_ips.get("geneve")

    if current_ip:
        delete_ufw_rules(current_ip)

    add_ufw_rules(private_ip)

    opposite_private_ip = wtb_opposite_ipgen(private_ip)

    try:
        update_pingfilegen("/etc/ping5_sys.sh", opposite_private_ip)
        update_ipfile_gen("/etc/sys5.sh", private_ip, update_type="private")
        update_ipfile_gen("/etc/sys5.sh", remote_ip, update_type="remote")

        interface = "azumigen5"
        try:
            subprocess.run(["ip", "link", "set", "dev", interface, "down"], check=True)
            subprocess.run(["ip", "link", "delete", interface], check=True)
        except subprocess.CalledProcessError:
            print("\033[91merror bringing interface down or deleting it\033[0m")

        script = "/etc/sys5.sh"
        result = subprocess.run(["/bin/bash", script], capture_output=True, text=True)
        if "RTNETLINK answers: File exists" in (result.stderr or ""):
            print("interface already exists, don't mind this")
        else:
            result.check_returncode()
        print(
            f"\033[92mChanges saved and {interface} interface updated successfully!\033[0m"
        )

        subprocess.run(["sudo", "systemctl", "daemon-reload"], check=True)
        try:
            subprocess.run(
                ["sudo", "systemctl", "restart", "ping5_gen.service"], check=True
            )
            display_checkmark(
                "\033[92mSystem services reloaded and restarted successfully!\033[0m"
            )
        except subprocess.CalledProcessError as e:
            if "Unit ping5_gen.service not found" in (e.stderr or ""):
                print(
                    "\033[91mFailed to restart ping5_gen.service: Unit ping5_gen.service not found.\033[0m"
                )
            else:
                raise

    except subprocess.CalledProcessError as e:
        print(f"\033[91merror applying network stuff : gen udp no sec error\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def genudpir5nosec_editmulti_localv6():
    remote_ip_private = remote_ip("/etc/sys5.sh")
    private_ip_private = private_genmulti("/etc/sys5.sh")

    if not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    while True:
        os.system("clear")
        display_stuff_gennoseck5(remote_ip_private, private_ip_private)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mGeneve V6\033[93m IRAN Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej [5] \033[92m Public IP\033[0m")
        print("2.\033[93m Change \033[97mGeneve \033[93mPrivate IPV6 \033[0m")
        print("3. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "2":
            new_ip = input(
                "\033[93mEnter New Private IPV6 address \033[96m[Geneve]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mKharej [5]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "3":
            save_stuff_gen5(private_ip_private, remote_ip_private)
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Please select a valid option.")


def genudpkharej5nosec_editmulti_localv6():
    remote_ip_private = remote_ip("/etc/sys5.sh")
    private_ip_private = private_genmulti("/etc/sys5.sh")

    if not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    while True:
        os.system("clear")
        display_stuff_gennoseci(remote_ip_private, private_ip_private)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mGeneve\033[93m Kharej [5] Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN \033[92m Public IP\033[0m")
        print("2.\033[93m Change \033[97mGeneve \033[93mPrivate IPV6 \033[0m")
        print("3. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "2":
            new_ip = input(
                "\033[93mEnter New Private IPV6 address \033[96m[Geneve]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mIRAN\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "3":
            save_stuff_gen5(private_ip_private, remote_ip_private)
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Please select a valid option.")


# iran 5 kharej 1 v6 #1


def display_stuff_gennoseckharej(remote_ip, private_ip):
    lines = [
        f"\033[93mTitle:         Geneve Configuration\033[0m",
        f"\033[97m──────────────────────────────────────\033[0m",
        f"\033[92mKharej Public IP:      \033[97m{remote_ip}\033[0m",
        f"\033[93mGeneve Private IP:     \033[97m{private_ip}\033[0m",
    ]
    box_width = 50

    print("\033[93m╭" + "─" * (box_width - 2) + "╮\033[0m")

    for line in lines:
        print(f"\033[93m {line:<{box_width - 4}} \033[0m")

    print("\033[93m╰" + "─" * (box_width - 2) + "╯\033[0m")


def display_stuff_gennoseciran1(remote_ip, private_ip):
    lines = [
        f"\033[93mTitle:         Geneve Configuration\033[0m",
        f"\033[97m──────────────────────────────────────\033[0m",
        f"\033[92mIRAN [1] Public IP:    \033[97m{remote_ip}\033[0m",
        f"\033[93mGeneve Private IP:     \033[97m{private_ip}\033[0m",
    ]
    box_width = 50

    print("\033[93m╭" + "─" * (box_width - 2) + "╮\033[0m")

    for line in lines:
        print(f"\033[93m {line:<{box_width - 4}} \033[0m")

    print("\033[93m╰" + "─" * (box_width - 2) + "╯\033[0m")


def genudpiranfive1nosec_editmulti_localv6():
    remote_ip_private = remote_ip("/etc/sys1.sh")
    private_ip_private = private_genmulti("/etc/sys1.sh")

    if not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    while True:
        os.system("clear")
        display_stuff_gennoseckharej(remote_ip_private, private_ip_private)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mGeneve V6\033[93m IRAN [1] Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej\033[92m Public IP\033[0m")
        print("2.\033[93m Change \033[97mGeneve \033[93mPrivate IPV6 \033[0m")
        print("3. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "2":
            new_ip = input(
                "\033[93mEnter New Private IPV6 address \033[96m[Geneve]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mKharej\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "3":
            save_stuff_gen1(private_ip_private, remote_ip_private)
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Please select a valid option.")


def genudpkharejone1nosec_editmulti_localv6():
    remote_ip_private = remote_ip("/etc/sys1.sh")
    private_ip_private = private_genmulti("/etc/sys1.sh")

    if not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    while True:
        os.system("clear")
        display_stuff_gennoseciran1(remote_ip_private, private_ip_private)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mGeneve\033[93m Kharej Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN [1]\033[92m Public IP\033[0m")
        print("2.\033[93m Change \033[97mGeneve \033[93mPrivate IPV6 \033[0m")
        print("3. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "2":
            new_ip = input(
                "\033[93mEnter New Private IPV6 address \033[96m[Geneve]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mIRAN [1]\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "3":
            save_stuff_gen1(private_ip_private, remote_ip_private)
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Please select a valid option.")


# 2
def display_stuff_gennoseciran2(remote_ip, private_ip):
    lines = [
        f"\033[93mTitle:         Geneve Configuration\033[0m",
        f"\033[97m──────────────────────────────────────\033[0m",
        f"\033[92mIRAN [2] Public IP:    \033[97m{remote_ip}\033[0m",
        f"\033[93mGeneve Private IP:     \033[97m{private_ip}\033[0m",
    ]
    box_width = 50

    print("\033[93m╭" + "─" * (box_width - 2) + "╮\033[0m")

    for line in lines:
        print(f"\033[93m {line:<{box_width - 4}} \033[0m")

    print("\033[93m╰" + "─" * (box_width - 2) + "╯\033[0m")


def genudpiranfive2nosec_editmulti_localv6():
    remote_ip_private = remote_ip("/etc/sys2.sh")
    private_ip_private = private_genmulti("/etc/sys2.sh")

    if not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    while True:
        os.system("clear")
        display_stuff_gennoseckharej(remote_ip_private, private_ip_private)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mGeneve V6\033[93m IRAN [2] Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej \033[92m Public IP\033[0m")
        print("2.\033[93m Change \033[97mGeneve \033[93mPrivate IPV6 \033[0m")
        print("3. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "2":
            new_ip = input(
                "\033[93mEnter New Private IPV6 address \033[96m[Geneve]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mKharej\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "3":
            save_stuff_gen2(private_ip_private, remote_ip_private)
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Please select a valid option.")


def genudpkharejone2nosec_editmulti_localv6():
    remote_ip_private = remote_ip("/etc/sys2.sh")
    private_ip_private = private_genmulti("/etc/sys2.sh")

    if not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    while True:
        os.system("clear")
        display_stuff_gennoseciran2(remote_ip_private, private_ip_private)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mGeneve\033[93m Kharej Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN [2]\033[92m Public IP\033[0m")
        print("2.\033[93m Change \033[97mGeneve \033[93mPrivate IPV6 \033[0m")
        print("3. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "2":
            new_ip = input(
                "\033[93mEnter New Private IPV6 address \033[96m[Geneve]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mIRAN [2]\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "3":
            save_stuff_gen2(private_ip_private, remote_ip_private)
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Please select a valid option.")


# 3
def display_stuff_gennoseciran3(remote_ip, private_ip):
    lines = [
        f"\033[93mTitle:         Geneve Configuration\033[0m",
        f"\033[97m──────────────────────────────────────\033[0m",
        f"\033[92mIRAN [3] Public IP:    \033[97m{remote_ip}\033[0m",
        f"\033[93mGeneve Private IP:     \033[97m{private_ip}\033[0m",
    ]
    box_width = 50

    print("\033[93m╭" + "─" * (box_width - 2) + "╮\033[0m")

    for line in lines:
        print(f"\033[93m {line:<{box_width - 4}} \033[0m")

    print("\033[93m╰" + "─" * (box_width - 2) + "╯\033[0m")


def genudpiranfive3nosec_editmulti_localv6():
    remote_ip_private = remote_ip("/etc/sys3.sh")
    private_ip_private = private_genmulti("/etc/sys3.sh")

    if not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    while True:
        os.system("clear")
        display_stuff_gennoseckharej(remote_ip_private, private_ip_private)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mGeneve V6\033[93m IRAN [3] Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej \033[92m Public IP\033[0m")
        print("2.\033[93m Change \033[97mGeneve \033[93mPrivate IPV6 \033[0m")
        print("3. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "2":
            new_ip = input(
                "\033[93mEnter New Private IPV6 address \033[96m[Geneve]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mKharej\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "3":
            save_stuff_gen3(private_ip_private, remote_ip_private)
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Please select a valid option.")


def genudpkharejone3nosec_editmulti_localv6():
    remote_ip_private = remote_ip("/etc/sys3.sh")
    private_ip_private = private_genmulti("/etc/sys3.sh")

    if not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    while True:
        os.system("clear")
        display_stuff_gennoseciran3(remote_ip_private, private_ip_private)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mGeneve\033[93m Kharej Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN [3]\033[92m Public IP\033[0m")
        print("2.\033[93m Change \033[97mGeneve \033[93mPrivate IPV6 \033[0m")
        print("3. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "2":
            new_ip = input(
                "\033[93mEnter New Private IPV6 address \033[96m[Geneve]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mIRAN [3]\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "3":
            save_stuff_gen3(private_ip_private, remote_ip_private)
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Please select a valid option.")


# 4
def display_stuff_gennoseciran4(remote_ip, private_ip):
    lines = [
        f"\033[93mTitle:         Geneve Configuration\033[0m",
        f"\033[97m──────────────────────────────────────\033[0m",
        f"\033[92mIRAN [4] Public IP:    \033[97m{remote_ip}\033[0m",
        f"\033[93mGeneve Private IP:     \033[97m{private_ip}\033[0m",
    ]
    box_width = 50

    print("\033[93m╭" + "─" * (box_width - 2) + "╮\033[0m")

    for line in lines:
        print(f"\033[93m {line:<{box_width - 4}} \033[0m")

    print("\033[93m╰" + "─" * (box_width - 2) + "╯\033[0m")


def genudpiranfive4nosec_editmulti_localv6():
    remote_ip_private = remote_ip("/etc/sys4.sh")
    private_ip_private = private_genmulti("/etc/sys4.sh")

    if not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    while True:
        os.system("clear")
        display_stuff_gennoseckharej(remote_ip_private, private_ip_private)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mGeneve V6\033[93m IRAN [4] Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej \033[92m Public IP\033[0m")
        print("2.\033[93m Change \033[97mGeneve \033[93mPrivate IPV6 \033[0m")
        print("3. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "2":
            new_ip = input(
                "\033[93mEnter New Private IPV6 address \033[96m[Geneve]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mKharej\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "3":
            save_stuff_gen4(private_ip_private, remote_ip_private)
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Please select a valid option.")


def genudpkharejone4nosec_editmulti_localv6():
    remote_ip_private = remote_ip("/etc/sys4.sh")
    private_ip_private = private_genmulti("/etc/sys4.sh")

    if not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    while True:
        os.system("clear")
        display_stuff_gennoseciran4(remote_ip_private, private_ip_private)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mGeneve\033[93m Kharej Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN [4]\033[92m Public IP\033[0m")
        print("2.\033[93m Change \033[97mGeneve \033[93mPrivate IPV6 \033[0m")
        print("3. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "2":
            new_ip = input(
                "\033[93mEnter New Private IPV6 address \033[96m[Geneve]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mIRAN [4]\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "3":
            save_stuff_gen4(private_ip_private, remote_ip_private)
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Please select a valid option.")


# 5
def display_stuff_gennoseciran5(remote_ip, private_ip):
    lines = [
        f"\033[93mTitle:         Geneve Configuration\033[0m",
        f"\033[97m──────────────────────────────────────\033[0m",
        f"\033[92mIRAN [5] Public IP:    \033[97m{remote_ip}\033[0m",
        f"\033[93mGeneve Private IP:     \033[97m{private_ip}\033[0m",
    ]
    box_width = 50

    print("\033[93m╭" + "─" * (box_width - 2) + "╮\033[0m")

    for line in lines:
        print(f"\033[93m {line:<{box_width - 4}} \033[0m")

    print("\033[93m╰" + "─" * (box_width - 2) + "╯\033[0m")


def genudpiranfive5nosec_editmulti_localv6():
    remote_ip_private = remote_ip("/etc/sys5.sh")
    private_ip_private = private_genmulti("/etc/sys5.sh")

    if not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    while True:
        os.system("clear")
        display_stuff_gennoseckharej(remote_ip_private, private_ip_private)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mGeneve V6\033[93m IRAN [5] Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej \033[92m Public IP\033[0m")
        print("2.\033[93m Change \033[97mGeneve \033[93mPrivate IPV6 \033[0m")
        print("3. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "2":
            new_ip = input(
                "\033[93mEnter New Private IPV6 address \033[96m[Geneve]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mKharej\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "3":
            save_stuff_gen5(private_ip_private, remote_ip_private)
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Please select a valid option.")


def genudpkharejone5nosec_editmulti_localv6():
    remote_ip_private = remote_ip("/etc/sys5.sh")
    private_ip_private = private_genmulti("/etc/sys5.sh")

    if not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    while True:
        os.system("clear")
        display_stuff_gennoseciran5(remote_ip_private, private_ip_private)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mGeneve\033[93m Kharej Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN [5]\033[92m Public IP\033[0m")
        print("2.\033[93m Change \033[97mGeneve \033[93mPrivate IPV6 \033[0m")
        print("3. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "2":
            new_ip = input(
                "\033[93mEnter New Private IPV6 address \033[96m[Geneve]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mIRAN [5]\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "3":
            save_stuff_gen5(private_ip_private, remote_ip_private)
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Please select a valid option.")


def genudpsec_multiedit_localv6():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print("\033[92m(   ) \033[92mEdit local\033[93m Geneve + IPSEC UDP V6 Menu\033[0m")
    print('\033[92m "-"\033[93m═════════════════════════════════════════════\033[0m')
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[96mKharej\033[92m[5] \033[93mIRAN\033[92m[1]\033[0m")
    print("2. \033[96mKharej\033[92m[1] \033[93mIRAN\033[92m[5]  \033[0m")
    print("3. \033[94mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        choice = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if choice == "1":
            genudpsec_edit_localkharej_multiv6()
            break
        elif choice == "2":
            genudpsec_edit_localiran_multiv6()
            break
        elif choice == "3":
            clear()
            gen_multiedit_localv6()
            break
        else:
            print("Invalid choice.")


def genudpsec_edit_localiran_multiv6():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print(
        "\033[92m(   ) \033[93mGeneve V6 + IPSEC \033[92m[5]IRAN\033[96m [1]Kharej\033[93m Menu\033[0m"
    )
    print(
        '\033[92m "-"\033[93m══════════════════════════════════════════════════════════\033[0m'
    )
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[92mIRAN[1]\033[0m")
    print("2. \033[92mIRAN[2]\033[0m")
    print("3. \033[93mIRAN[3]\033[0m")
    print("4. \033[92mIRAN[4]\033[0m")
    print("5. \033[92mIRAN[5]\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    print("6. \033[93mKharej Menu\033[0m")
    print("0. \033[94mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if server_type == "1":
            genudpiranfive1sec_editmulti_localv6()
            break
        elif server_type == "2":
            genudpiranfive2sec_editmulti_localv6()
            break
        elif server_type == "3":
            genudpiranfive3sec_editmulti_localv6()
            break
        elif server_type == "4":
            genudpiranfive4sec_editmulti_localv6()
            break
        elif server_type == "5":
            genudpiranfive5sec_editmulti_localv6()
            break
        elif server_type == "6":
            genudpkharejonesec_editmulti_localmenuv6()
            break
        elif server_type == "0":
            os.system("clear")
            genudpsec_multiedit_localv6()
            break
        else:
            print("Invalid choice.")


def genudpkharejonesec_editmulti_localmenuv6():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print(
        "\033[92m(   ) \033[93mGenve V6 + IPSEC \033[92m[5]IRAN\033[96m [1]Kharej\033[93m Menu\033[0m"
    )
    print(
        '\033[92m "-"\033[93m══════════════════════════════════════════════════════════\033[0m'
    )
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mThis is Kharej menu:\033[0m")
    print("1. \033[92mServer[1]\033[0m")
    print("2. \033[92mServer[2]\033[0m")
    print("3. \033[93mServer[3]\033[0m")
    print("4. \033[92mServer[4]\033[0m")
    print("5. \033[92mServer[5]\033[0m")
    print("0. \033[94mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if server_type == "1":
            genudpkharejone1sec_editmulti_localv6()
            break
        elif server_type == "2":
            genudpkharejone2sec_editmulti_localv6()
            break
        elif server_type == "3":
            genudpkharejone3sec_editmulti_localv6()
            break
        elif server_type == "4":
            genudpkharejone4sec_editmulti_localv6()
            break
        elif server_type == "5":
            genudpkharejone5sec_editmulti_localv6()
            break
        elif server_type == "0":
            os.system("clear")
            genudpsec_multiedit_localv6()
            break
        else:
            print("Invalid choice.")


def genudpsec_edit_localkharej_multiv6():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print(
        "\033[92m(   ) \033[93mGeneve V6 IPSEC \033[92m[5]Kharej\033[96m [1]IRAN\033[93m Menu\033[0m"
    )
    print(
        '\033[92m "-"\033[93m══════════════════════════════════════════════════════════\033[0m'
    )
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[92mKharej[1]\033[0m")
    print("2. \033[92mKharej[2]\033[0m")
    print("3. \033[93mKharej[3]\033[0m")
    print("4. \033[92mKharej[4]\033[0m")
    print("5. \033[92mKharej[5]\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    print("6.\033[93mIRAN Menu\033[0m")
    print("0. \033[94mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if server_type == "1":
            genudpkharej1sec_editmulti_localv6()
            break
        elif server_type == "2":
            genudpkharej2sec_editmulti_localv6()
            break
        elif server_type == "3":
            genudpkharej3sec_editmulti_localv6()
            break
        elif server_type == "4":
            genudpkharej4sec_editmulti_localv6()
            break
        elif server_type == "5":
            genudpkharej5sec_editmulti_localv6()
            break
        elif server_type == "6":
            genudpiransec_editmulti_localv6()
            break
        elif server_type == "0":
            os.system("clear")
            genudpsec_multiedit_localv6()
            break
        else:
            print("Invalid choice.")


def genudpiransec_editmulti_localv6():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print(
        "\033[92m(   ) \033[93mGeneve V6 IPSEC \033[92m[5]Kharej\033[96m [1]IRAN\033[93m Menu\033[0m"
    )
    print(
        '\033[92m "-"\033[93m══════════════════════════════════════════════════════════\033[0m'
    )
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mThis is IRAN menu:\033[0m")
    print("1. \033[92mServer[1]\033[0m")
    print("2. \033[92mServer[2]\033[0m")
    print("3. \033[93mServer[3]\033[0m")
    print("4. \033[92mServer[4]\033[0m")
    print("5. \033[92mServer[5]\033[0m")
    print("0. \033[94mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if server_type == "1":
            genudpir1sec_editmulti_localv6()
            break
        elif server_type == "2":
            genudpir2sec_editmulti_localv6()
            break
        elif server_type == "3":
            genudpir3sec_editmulti_localv6()
            break
        elif server_type == "4":
            genudpir4sec_editmulti_localv6()
            break
        elif server_type == "5":
            genudpir5sec_editmulti_localv6()
            break
        elif server_type == "0":
            os.system("clear")
            genudpsec_multiedit_localv6()
            break
        else:
            print("Invalid choice.")


# geneve ipsec menu
def genudpsec_multiedit_local():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print("\033[92m(   ) \033[92mEdit local\033[93m Geneve + IPSEC UDP V4 Menu\033[0m")
    print('\033[92m "-"\033[93m═════════════════════════════════════════════\033[0m')
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[96mKharej\033[92m[5] \033[93mIRAN\033[92m[1]\033[0m")
    print("2. \033[96mKharej\033[92m[1] \033[93mIRAN\033[92m[5]  \033[0m")
    print("3. \033[94mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        choice = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if choice == "1":
            genudpsec_edit_localkharej_multi()
            break
        elif choice == "2":
            genudpsec_edit_localiran_multi()
            break
        elif choice == "3":
            clear()
            gen_multiedit_local()
            break
        else:
            print("Invalid choice.")


def genudpsec_edit_localiran_multi():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print(
        "\033[92m(   ) \033[93mGeneve V4 + IPSEC \033[92m[5]IRAN\033[96m [1]Kharej\033[93m Menu\033[0m"
    )
    print(
        '\033[92m "-"\033[93m══════════════════════════════════════════════════════════\033[0m'
    )
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[92mIRAN[1]\033[0m")
    print("2. \033[92mIRAN[2]\033[0m")
    print("3. \033[93mIRAN[3]\033[0m")
    print("4. \033[92mIRAN[4]\033[0m")
    print("5. \033[92mIRAN[5]\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    print("6. \033[93mKharej Menu\033[0m")
    print("0. \033[94mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if server_type == "1":
            genudpiranfive1sec_editmulti_local()
            break
        elif server_type == "2":
            genudpiranfive2sec_editmulti_local()
            break
        elif server_type == "3":
            genudpiranfive3sec_editmulti_local()
            break
        elif server_type == "4":
            genudpiranfive4sec_editmulti_local()
            break
        elif server_type == "5":
            genudpiranfive5sec_editmulti_local()
            break
        elif server_type == "6":
            genudpkharejonesec_editmulti_localmenu()
            break
        elif server_type == "0":
            os.system("clear")
            genudpsec_multiedit_local()
            break
        else:
            print("Invalid choice.")


def genudpkharejonesec_editmulti_localmenu():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print(
        "\033[92m(   ) \033[93mGenve V4 + IPSEC \033[92m[5]IRAN\033[96m [1]Kharej\033[93m Menu\033[0m"
    )
    print(
        '\033[92m "-"\033[93m══════════════════════════════════════════════════════════\033[0m'
    )
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mThis is Kharej menu:\033[0m")
    print("1. \033[92mServer[1]\033[0m")
    print("2. \033[92mServer[2]\033[0m")
    print("3. \033[93mServer[3]\033[0m")
    print("4. \033[92mServer[4]\033[0m")
    print("5. \033[92mServer[5]\033[0m")
    print("0. \033[94mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if server_type == "1":
            genudpkharejone1sec_editmulti_local()
            break
        elif server_type == "2":
            genudpkharejone2sec_editmulti_local()
            break
        elif server_type == "3":
            genudpkharejone3sec_editmulti_local()
            break
        elif server_type == "4":
            genudpkharejone4sec_editmulti_local()
            break
        elif server_type == "5":
            genudpkharejone5sec_editmulti_local()
            break
        elif server_type == "0":
            os.system("clear")
            genudpsec_multiedit_local()
            break
        else:
            print("Invalid choice.")


def genudpsec_edit_localkharej_multi():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print(
        "\033[92m(   ) \033[93mGeneve V4 IPSEC \033[92m[5]Kharej\033[96m [1]IRAN\033[93m Menu\033[0m"
    )
    print(
        '\033[92m "-"\033[93m══════════════════════════════════════════════════════════\033[0m'
    )
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[92mKharej[1]\033[0m")
    print("2. \033[92mKharej[2]\033[0m")
    print("3. \033[93mKharej[3]\033[0m")
    print("4. \033[92mKharej[4]\033[0m")
    print("5. \033[92mKharej[5]\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    print("6.\033[93mIRAN Menu\033[0m")
    print("0. \033[94mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if server_type == "1":
            genudpkharej1sec_editmulti_local()
            break
        elif server_type == "2":
            genudpkharej2sec_editmulti_local()
            break
        elif server_type == "3":
            genudpkharej3sec_editmulti_local()
            break
        elif server_type == "4":
            genudpkharej4sec_editmulti_local()
            break
        elif server_type == "5":
            genudpkharej5sec_editmulti_local()
            break
        elif server_type == "6":
            genudpiransec_editmulti_local()
            break
        elif server_type == "0":
            os.system("clear")
            genudpsec_multiedit_local()
            break
        else:
            print("Invalid choice.")


def genudpiransec_editmulti_local():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print(
        "\033[92m(   ) \033[93mGeneve V4 IPSEC \033[92m[5]Kharej\033[96m [1]IRAN\033[93m Menu\033[0m"
    )
    print(
        '\033[92m "-"\033[93m══════════════════════════════════════════════════════════\033[0m'
    )
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mThis is IRAN menu:\033[0m")
    print("1. \033[92mServer[1]\033[0m")
    print("2. \033[92mServer[2]\033[0m")
    print("3. \033[93mServer[3]\033[0m")
    print("4. \033[92mServer[4]\033[0m")
    print("5. \033[92mServer[5]\033[0m")
    print("0. \033[94mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if server_type == "1":
            genudpir1sec_editmulti_local()
            break
        elif server_type == "2":
            genudpir2sec_editmulti_local()
            break
        elif server_type == "3":
            genudpir3sec_editmulti_local()
            break
        elif server_type == "4":
            genudpir4sec_editmulti_local()
            break
        elif server_type == "5":
            genudpir5sec_editmulti_local()
            break
        elif server_type == "0":
            os.system("clear")
            genudpsec_multiedit_local()
            break
        else:
            print("Invalid choice.")


def private_genmulti(name):
    try:
        with open(name, "r") as f:
            content = f.read()
        match_v4 = re.search(
            r"ip addr add (\d+\.\d+\.\d+\.\d+)/32 dev azumigen?", content
        )
        match_v6 = re.search(r"ip addr add (\S+::\d+)/64 dev azumigen?", content)
        if match_v4:
            return match_v4.group(1)
        elif match_v6:
            return match_v6.group(1)
        else:
            print(f"\033[91mno private IP found\033[0m")
    except FileNotFoundError:
        print(f"file {name} doesn't exist")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")
    return None


def update_ipfile_gensec(name, new_ip, update_type):
    try:
        with open(name, "r") as f:
            content = f.read()

        if update_type == "private":
            if ":" in new_ip:
                new_content = re.sub(
                    r"ip addr add \S+/64 dev azumigen?",
                    f"ip addr add {new_ip}/64 dev azumigen",
                    content,
                )
                ip_parts = new_ip.split(":")
                ip_parts[-1] = "1" if ip_parts[-1] == "2" else "2"
                counterpart_ip = ":".join(ip_parts)
                new_content = re.sub(
                    r"ip route add \S+/64 dev azumigen?",
                    f"ip route add {counterpart_ip}/64 dev azumigen",
                    new_content,
                )
            else:
                new_content = re.sub(
                    r"ip addr add \d+\.\d+\.\d+\.\d+/32 dev azumigen?",
                    f"ip addr add {new_ip}/32 dev azumigen",
                    content,
                )
                ip_parts = new_ip.split(".")
                ip_parts[-1] = "1" if ip_parts[-1] == "2" else "2"
                counterpart_ip = ".".join(ip_parts)
                new_content = re.sub(
                    r"ip route add \d+\.\d+\.\d+\.\d+/32 dev azumigen?",
                    f"ip route add {counterpart_ip}/32 dev azumigen",
                    new_content,
                )
        elif update_type == "remote":
            new_content = re.sub(r"remote \S+", f"remote {new_ip}", content)
        elif update_type == "ipsec":
            if ":" in new_ip:
                ip_parts = new_ip.split(":")
                ip_parts[-1] = "1" if ip_parts[-1] == "2" else "2"
                counterpart_ip = ":".join(ip_parts)
                new_content = re.sub(
                    r"leftsubnet=\S+", f"leftsubnet={new_ip}/64", content
                )
                new_content = re.sub(r"leftid=\S+", f"leftid={new_ip}", new_content)
                new_content = re.sub(
                    r"right=\S+", f"right={counterpart_ip}", new_content
                )
                new_content = re.sub(
                    r"rightsubnet=\S+", f"rightsubnet={counterpart_ip}/64", new_content
                )
            else:
                ip_parts = new_ip.split(".")
                ip_parts[-1] = "1" if ip_parts[-1] == "2" else "2"
                counterpart_ip = ".".join(ip_parts)
                new_content = re.sub(
                    r"leftsubnet=\S+", f"leftsubnet={new_ip}/32", content
                )
                new_content = re.sub(r"leftid=\S+", f"leftid={new_ip}", new_content)
                new_content = re.sub(
                    r"right=\S+", f"right={counterpart_ip}", new_content
                )
                new_content = re.sub(
                    r"rightsubnet=\S+", f"rightsubnet={counterpart_ip}/32", new_content
                )

        with open(name, "w") as f:
            f.write(new_content)
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def update_ipsec_secret(name, new_secret):
    try:
        with open(name, "r") as f:
            content = f.read()

        new_content = re.sub(r'PSK "[^"]+"', f'PSK "{new_secret}"', content)

        with open(name, "w") as f:
            f.write(new_content)
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def get_current_private_ipsgen_multi1():
    private_ip_geneve = private_genmulti("/etc/sys1.sh")
    return {
        "geneve": private_ip_geneve,
    }


# changes


def display_stuff_k1(remote_ip, private_ip, ipsec_secret):
    lines = [
        f"\033[93mTitle:         Geneve Configuration\033[0m",
        f"\033[97m──────────────────────────────────────\033[0m",
        f"\033[92mKharej [1] Public IP:      \033[97m{remote_ip}\033[0m",
        f"\033[93mGeneve Private IP:         \033[97m{private_ip}\033[0m",
        f"\033[94mIPSec key:                 \033[97m{ipsec_secret}\033[0m",
    ]
    box_width = 50

    print("\033[93m╭" + "─" * (box_width - 2) + "╮\033[0m")

    for line in lines:
        print(f"\033[93m {line:<{box_width - 4}} \033[0m")

    print("\033[93m╰" + "─" * (box_width - 2) + "╯\033[0m")


def display_stuff_i1(remote_ip, private_ip, ipsec_secret):
    lines = [
        f"\033[93mTitle:         Geneve Configuration\033[0m",
        f"\033[97m──────────────────────────────────────\033[0m",
        f"\033[92mIRAN Public IP:      \033[97m{remote_ip}\033[0m",
        f"\033[93mGeneve Private IP:       \033[97m{private_ip}\033[0m",
        f"\033[94mIPSec key:               \033[97m{ipsec_secret}\033[0m",
    ]
    box_width = 50

    print("\033[93m╭" + "─" * (box_width - 2) + "╮\033[0m")

    for line in lines:
        print(f"\033[93m {line:<{box_width - 4}} \033[0m")

    print("\033[93m╰" + "─" * (box_width - 2) + "╯\033[0m")


def update_ipsec_conf_geniran1(name, new_private_ip):
    try:
        with open(name, "r") as f:
            content = f.readlines()

        start_idx, end_idx = None, None
        for i, line in enumerate(content):
            if line.strip() == "conn Geneve1":
                start_idx = i
            elif start_idx is not None and line.strip().startswith("conn "):
                end_idx = i
                break

        if start_idx is None:
            print("\033[91m'conn Geneve1' section not found\033[0m")
            return

        if end_idx is None:
            end_idx = len(content)

        section = content[start_idx:end_idx]
        ip_parts = new_private_ip.split(":")
        if new_private_ip.endswith(":2"):
            ip_parts[-1] = "1"
        else:
            ip_parts[-1] = "2"
        counterpart_ip = ":".join(ip_parts)

        new_section = []
        for line in section:
            line = re.sub(r"leftsubnet=\S+", f"leftsubnet={new_private_ip}/64", line)
            line = re.sub(r"leftid=\S+", f"leftid={new_private_ip}", line)
            line = re.sub(r"right=\S+", f"right={counterpart_ip}", line)
            line = re.sub(r"rightsubnet=\S+", f"rightsubnet={counterpart_ip}/64", line)
            new_section.append(line)

        new_content = content[:start_idx] + new_section + content[end_idx:]

        with open(name, "w") as f:
            f.writelines(new_content)

        print(f"\033[92m'conn Geneve1' section updated successfully\033[0m")
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def save_stuff_gensec1(private_ip, remote_ip, ipsec_secret):
    try:
        current_ips = get_current_private_ipsgen_multi1()
        current_ip = current_ips.get("geneve")

        if current_ip:
            delete_ufw_rules(current_ip)

        add_ufw_rules(private_ip)

        opposite_private_ip = wtb_opposite_ipgen(private_ip)

        update_pingfilegen("/etc/ping1_sys.sh", opposite_private_ip)
        update_ipfile_gensec("/etc/sys1.sh", private_ip, update_type="private")
        update_ipfile_gensec("/etc/sys1.sh", remote_ip, update_type="remote")
        update_ipfile_gensec("/etc/ipsec1.conf", private_ip, update_type="ipsec")
        update_ipsec_secret("/etc/ipsec.secrets", ipsec_secret)

        try:
            interface = "azumigen1"
            subprocess.run(["ip", "link", "set", "dev", interface, "down"], check=True)
            subprocess.run(["ip", "link", "delete", interface], check=True)
        except subprocess.CalledProcessError:
            print("\033[91merror bringing interface down or deleting it\033[0m")

        script = "/etc/sys1.sh"
        result = subprocess.run(["/bin/bash", script], capture_output=True, text=True)
        if "RTNETLINK answers: File exists" in result.stderr:
            print("interface already exists, don't mind this")
        else:
            result.check_returncode()
        display_checkmark(
            f"\033[92mChanges saved and {interface} interface updated successfully!\033[0m"
        )

        subprocess.run(["sudo", "systemctl", "daemon-reload"], check=True)
        try:
            subprocess.run(
                ["sudo", "systemctl", "restart", "ping1_gen.service"], check=True
            )
        except subprocess.CalledProcessError as e:
            if "Unit ping1_gen.service not found" in (e.stderr or ""):
                print(
                    "\033[91mFailed to restart ping_gen.service: ping1_gen.service not found.\033[0m"
                )
            else:
                raise

        subprocess.run(["sudo", "systemctl", "restart", "strong-azumi1"], check=True)

        result = subprocess.run(
            ["systemctl", "list-units", "--full", "--all", "strong-azumi1.service"],
            capture_output=True,
            text=True,
        )
        if "strong-azumi1.service" in (result.stdout or ""):
            subprocess.run(
                ["sudo", "systemctl", "restart", "strong-azumi1"], check=True
            )
        else:
            print(
                "\033[91mstrong-azumi service not found, don't mind this error.\033[0m"
            )
    except subprocess.CalledProcessError as e:
        print(f"\033[91merror applying network stuff: geneve udp v4 error\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def save_stuff_gensec_iran1(private_ip, remote_ip, ipsec_secret):
    try:
        current_ips = get_current_private_ipsgen_multi1()
        current_ip = current_ips.get("geneve")

        if current_ip:
            delete_ufw_rules(current_ip)

        add_ufw_rules(private_ip)

        opposite_private_ip = wtb_opposite_ipgen(private_ip)

        update_pingfilegen("/etc/ping1_sys.sh", opposite_private_ip)
        update_ipfile_gensec("/etc/sys1.sh", private_ip, update_type="private")
        update_ipfile_gensec("/etc/sys1.sh", remote_ip, update_type="remote")
        update_ipsec_conf_geniran1("/etc/ipsec1.conf", private_ip)
        update_ipsec_secret("/etc/ipsec.secrets", ipsec_secret)

        try:
            interface = "azumigen1"
            subprocess.run(["ip", "link", "set", "dev", interface, "down"], check=True)
            subprocess.run(["ip", "link", "delete", interface], check=True)
        except subprocess.CalledProcessError:
            print("\033[91merror bringing interface down or deleting it\033[0m")

        script = "/etc/sys1.sh"
        result = subprocess.run(["/bin/bash", script], capture_output=True, text=True)
        if "RTNETLINK answers: File exists" in result.stderr:
            print("interface already exists, don't mind this")
        else:
            result.check_returncode()
        display_checkmark(
            f"\033[92mChanges saved and {interface} interface updated successfully!\033[0m"
        )

        subprocess.run(["sudo", "systemctl", "daemon-reload"], check=True)
        try:
            subprocess.run(
                ["sudo", "systemctl", "restart", "ping1_gen.service"], check=True
            )
        except subprocess.CalledProcessError as e:
            if "Unit ping1_gen.service not found" in (e.stderr or ""):
                print(
                    "\033[91mFailed to restart ping_gen.service: ping1_gen.service not found.\033[0m"
                )
            else:
                raise

        subprocess.run(["sudo", "systemctl", "restart", "strong-azumi1"], check=True)

        result = subprocess.run(
            ["systemctl", "list-units", "--full", "--all", "strong-azumi1.service"],
            capture_output=True,
            text=True,
        )
        if "strong-azumi1.service" in (result.stdout or ""):
            subprocess.run(
                ["sudo", "systemctl", "restart", "strong-azumi1"], check=True
            )
        else:
            print(
                "\033[91mstrong-azumi service not found, don't mind this error.\033[0m"
            )
    except subprocess.CalledProcessError as e:
        print(f"\033[91merror applying network stuff: geneve udp v4 error\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def genudpir1sec_editmulti_local():
    remote_ip_private = remote_ip("/etc/sys1.sh")
    private_ip_private = private_genmulti("/etc/sys1.sh")
    ipsec_secret_private = ipsec_secret("/etc/ipsec.secrets")

    if not remote_ip_private or not private_ip_private or not ipsec_secret_private:
        print("Couldn't retrieve IP addresses or IPSec secret from files")
        return

    while True:
        os.system("clear")
        display_stuff_k1(remote_ip_private, private_ip_private, ipsec_secret_private)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mGeneve\033[93m IRAN Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej [1] \033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mGeneve \033[93mPrivate IPV4 \033[0m")
        print("3. \033[93mChange IPSec Secret Key\033[0m")
        print("4. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "2":
            new_ip = input(
                "\033[93mEnter New Private IPV4 address \033[96m[Geneve]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mKharej [1]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "3":
            new_secret = input("\033[93mEnter new IPSec Secret Key :\033[0m ")
            if new_secret:
                ipsec_secret_private = new_secret
            else:
                print("\033[91mCrazy Secret Key\033[0m")
        elif choice == "4":
            save_stuff_gensec_iran1(
                private_ip_private, remote_ip_private, ipsec_secret_private
            )
            update_ipsec_ip_multi(private_ip_private)
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Please select a valid option.")


def genudpkharej1sec_editmulti_local():
    remote_ip_private = remote_ip("/etc/sys1.sh")
    private_ip_private = private_genmulti("/etc/sys1.sh")
    ipsec_secret_private = ipsec_secret("/etc/ipsec.secrets")

    if not remote_ip_private or not private_ip_private or not ipsec_secret_private:
        print("Couldn't retrieve IP addresses or IPSec secret from files")
        return

    while True:
        os.system("clear")
        display_stuff_i1(remote_ip_private, private_ip_private, ipsec_secret_private)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mGeneve + IPSEC [5]Kharej [1]IRAN\033[93m Kharej Server 1 Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═════════════════════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN \033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mGeneve \033[93mPrivate IPV4 \033[0m")
        print("3. \033[93mChange IPSec Secret Key\033[0m")
        print("4. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "2":
            new_ip = input(
                "\033[93mEnter New Private IPV4 address \033[96m[Geneve]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mIRAN\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "3":
            new_secret = input("\033[93mEnter new IPSec Secret Key :\033[0m ")
            if new_secret:
                ipsec_secret_private = new_secret
            else:
                print("\033[91mCrazy Secret Key\033[0m")
        elif choice == "4":
            save_stuff_gensec1(
                private_ip_private, remote_ip_private, ipsec_secret_private
            )
            update_ipsec_ip(private_ip_private)
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Please select a valid option.")


# 2
def get_current_private_ipsgen_multi2():
    private_ip_geneve = private_genmulti("/etc/sys2.sh")
    return {
        "geneve": private_ip_geneve,
    }


def display_stuff_k2(remote_ip, private_ip, ipsec_secret):
    lines = [
        f"\033[93mTitle:         Geneve Configuration\033[0m",
        f"\033[97m──────────────────────────────────────\033[0m",
        f"\033[92mKharej [2] Public IP:      \033[97m{remote_ip}\033[0m",
        f"\033[93mGeneve Private IP:         \033[97m{private_ip}\033[0m",
        f"\033[94mIPSec key:                 \033[97m{ipsec_secret}\033[0m",
    ]
    box_width = 50

    print("\033[93m╭" + "─" * (box_width - 2) + "╮\033[0m")

    for line in lines:
        print(f"\033[93m {line:<{box_width - 4}} \033[0m")

    print("\033[93m╰" + "─" * (box_width - 2) + "╯\033[0m")


def update_ipsec_conf_geniran2(name, new_private_ip):
    try:
        with open(name, "r") as f:
            content = f.readlines()

        start_idx, end_idx = None, None
        for i, line in enumerate(content):
            if line.strip() == "conn Geneve2":
                start_idx = i
            elif start_idx is not None and line.strip().startswith("conn "):
                end_idx = i
                break

        if start_idx is None:
            print("\033[91m'conn Geneve2' section not found\033[0m")
            return

        if end_idx is None:
            end_idx = len(content)

        section = content[start_idx:end_idx]
        ip_parts = new_private_ip.split(":")
        if new_private_ip.endswith(":2"):
            ip_parts[-1] = "1"
        else:
            ip_parts[-1] = "2"
        counterpart_ip = ":".join(ip_parts)

        new_section = []
        for line in section:
            line = re.sub(r"leftsubnet=\S+", f"leftsubnet={new_private_ip}/64", line)
            line = re.sub(r"leftid=\S+", f"leftid={new_private_ip}", line)
            line = re.sub(r"right=\S+", f"right={counterpart_ip}", line)
            line = re.sub(r"rightsubnet=\S+", f"rightsubnet={counterpart_ip}/64", line)
            new_section.append(line)

        new_content = content[:start_idx] + new_section + content[end_idx:]

        with open(name, "w") as f:
            f.writelines(new_content)

        print(f"\033[92m'conn Geneve2' section updated successfully\033[0m")
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def save_stuff_gensec2(private_ip, remote_ip, ipsec_secret):
    try:
        current_ips = get_current_private_ipsgen_multi2()
        current_ip = current_ips.get("geneve")

        if current_ip:
            delete_ufw_rules(current_ip)

        add_ufw_rules(private_ip)

        opposite_private_ip = wtb_opposite_ipgen(private_ip)

        update_pingfilegen("/etc/ping2_sys.sh", opposite_private_ip)
        update_ipfile_gensec("/etc/sys2.sh", private_ip, update_type="private")
        update_ipfile_gensec("/etc/sys2.sh", remote_ip, update_type="remote")
        update_ipfile_gensec("/etc/ipsec1.conf", private_ip, update_type="ipsec")
        update_ipsec_secret("/etc/ipsec.secrets", ipsec_secret)

        try:
            interface = "azumigen2"
            subprocess.run(["ip", "link", "set", "dev", interface, "down"], check=True)
            subprocess.run(["ip", "link", "delete", interface], check=True)
        except subprocess.CalledProcessError:
            print("\033[91merror bringing interface down or deleting it\033[0m")

        script = "/etc/sys2.sh"
        result = subprocess.run(["/bin/bash", script], capture_output=True, text=True)
        if "RTNETLINK answers: File exists" in result.stderr:
            print("interface already exists, don't mind this")
        else:
            result.check_returncode()
        display_checkmark(
            f"\033[92mChanges saved and {interface} interface updated successfully!\033[0m"
        )

        subprocess.run(["sudo", "systemctl", "daemon-reload"], check=True)
        try:
            subprocess.run(
                ["sudo", "systemctl", "restart", "ping2_gen.service"], check=True
            )
        except subprocess.CalledProcessError as e:
            if "Unit ping2_gen.service not found" in (e.stderr or ""):
                print(
                    "\033[91mFailed to restart ping_gen.service: ping2_gen.service not found.\033[0m"
                )
            else:
                raise

        subprocess.run(["sudo", "systemctl", "restart", "strong-azumi1"], check=True)

        result = subprocess.run(
            ["systemctl", "list-units", "--full", "--all", "strong-azumi1.service"],
            capture_output=True,
            text=True,
        )
        if "strong-azumi1.service" in (result.stdout or ""):
            subprocess.run(
                ["sudo", "systemctl", "restart", "strong-azumi1"], check=True
            )
        else:
            print(
                "\033[91mstrong-azumi service not found, don't mind this error.\033[0m"
            )
    except subprocess.CalledProcessError as e:
        print(f"\033[91merror applying network stuff: geneve udp v4 error\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def save_stuff_gensec_iran2(private_ip, remote_ip, ipsec_secret):
    try:
        current_ips = get_current_private_ipsgen_multi2()
        current_ip = current_ips.get("geneve")

        if current_ip:
            delete_ufw_rules(current_ip)

        add_ufw_rules(private_ip)

        opposite_private_ip = wtb_opposite_ipgen(private_ip)

        update_pingfilegen("/etc/ping2_sys.sh", opposite_private_ip)
        update_ipfile_gensec("/etc/sys2.sh", private_ip, update_type="private")
        update_ipfile_gensec("/etc/sys2.sh", remote_ip, update_type="remote")
        update_ipsec_conf_geniran2("/etc/ipsec1.conf", private_ip)
        update_ipsec_secret("/etc/ipsec.secrets", ipsec_secret)

        try:
            interface = "azumigen2"
            subprocess.run(["ip", "link", "set", "dev", interface, "down"], check=True)
            subprocess.run(["ip", "link", "delete", interface], check=True)
        except subprocess.CalledProcessError:
            print("\033[91merror bringing interface down or deleting it\033[0m")

        script = "/etc/sys2.sh"
        result = subprocess.run(["/bin/bash", script], capture_output=True, text=True)
        if "RTNETLINK answers: File exists" in result.stderr:
            print("interface already exists, don't mind this")
        else:
            result.check_returncode()
        display_checkmark(
            f"\033[92mChanges saved and {interface} interface updated successfully!\033[0m"
        )

        subprocess.run(["sudo", "systemctl", "daemon-reload"], check=True)
        try:
            subprocess.run(
                ["sudo", "systemctl", "restart", "ping2_gen.service"], check=True
            )
        except subprocess.CalledProcessError as e:
            if "Unit ping2_gen.service not found" in (e.stderr or ""):
                print(
                    "\033[91mFailed to restart ping_gen.service: ping2_gen.service not found.\033[0m"
                )
            else:
                raise

        subprocess.run(["sudo", "systemctl", "restart", "strong-azumi1"], check=True)

        result = subprocess.run(
            ["systemctl", "list-units", "--full", "--all", "strong-azumi1.service"],
            capture_output=True,
            text=True,
        )
        if "strong-azumi1.service" in (result.stdout or ""):
            subprocess.run(
                ["sudo", "systemctl", "restart", "strong-azumi1"], check=True
            )
        else:
            print(
                "\033[91mstrong-azumi service not found, don't mind this error.\033[0m"
            )
    except subprocess.CalledProcessError as e:
        print(f"\033[91merror applying network stuff: geneve udp v4 error\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def genudpir2sec_editmulti_local():
    remote_ip_private = remote_ip("/etc/sys2.sh")
    private_ip_private = private_genmulti("/etc/sys2.sh")
    ipsec_secret_private = ipsec_secret("/etc/ipsec.secrets")

    if not remote_ip_private or not private_ip_private or not ipsec_secret_private:
        print("Couldn't retrieve IP addresses or IPSec secret from files")
        return

    while True:
        os.system("clear")
        display_stuff_k2(remote_ip_private, private_ip_private, ipsec_secret_private)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mGeneve [5]Kharej [1]IRAN\033[93m IRAN Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej [2] \033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mGeneve \033[93mPrivate IPV4 \033[0m")
        print("3. \033[93mChange IPSec Secret Key\033[0m")
        print("4. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "2":
            new_ip = input(
                "\033[93mEnter New Private IPV4 address \033[96m[Geneve]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mKharej [2]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "3":
            new_secret = input("\033[93mEnter new IPSec Secret Key :\033[0m ")
            if new_secret:
                ipsec_secret_private = new_secret
            else:
                print("\033[91mCrazy Secret Key\033[0m")
        elif choice == "4":
            save_stuff_gensec_iran2(
                private_ip_private, remote_ip_private, ipsec_secret_private
            )
            update_ipsec_ip_multi2(private_ip_private)
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Please select a valid option.")


def genudpkharej2sec_editmulti_local():
    remote_ip_private = remote_ip("/etc/sys2.sh")
    private_ip_private = private_genmulti("/etc/sys2.sh")
    ipsec_secret_private = ipsec_secret("/etc/ipsec.secrets")

    if not remote_ip_private or not private_ip_private or not ipsec_secret_private:
        print("Couldn't retrieve IP addresses or IPSec secret from files")
        return

    while True:
        os.system("clear")
        display_stuff_i1(remote_ip_private, private_ip_private, ipsec_secret_private)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mGeneve + IPSEC [5]Kharej [1]IRAN\033[93m Kharej Server 2 Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═════════════════════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN \033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mGeneve \033[93mPrivate IPV4 \033[0m")
        print("3. \033[93mChange IPSec Secret Key\033[0m")
        print("4. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "2":
            new_ip = input(
                "\033[93mEnter New Private IPV4 address \033[96m[Geneve]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mIRAN\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "3":
            new_secret = input("\033[93mEnter new IPSec Secret Key :\033[0m ")
            if new_secret:
                ipsec_secret_private = new_secret
            else:
                print("\033[91mCrazy Secret Key\033[0m")
        elif choice == "4":
            save_stuff_gensec2(
                private_ip_private, remote_ip_private, ipsec_secret_private
            )
            update_ipsec_ip(private_ip_private)
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Please select a valid option.")


# 3
def get_current_private_ipsgen_multi3():
    private_ip_geneve = private_genmulti("/etc/sys3.sh")
    return {
        "geneve": private_ip_geneve,
    }


def display_stuff_k3(remote_ip, private_ip, ipsec_secret):
    lines = [
        f"\033[93mTitle:         Geneve Configuration\033[0m",
        f"\033[97m──────────────────────────────────────\033[0m",
        f"\033[92mKharej [3] Public IP:      \033[97m{remote_ip}\033[0m",
        f"\033[93mGeneve Private IP:         \033[97m{private_ip}\033[0m",
        f"\033[94mIPSec key:                 \033[97m{ipsec_secret}\033[0m",
    ]
    box_width = 50

    print("\033[93m╭" + "─" * (box_width - 2) + "╮\033[0m")

    for line in lines:
        print(f"\033[93m {line:<{box_width - 4}} \033[0m")

    print("\033[93m╰" + "─" * (box_width - 2) + "╯\033[0m")


def update_ipsec_conf_geniran3(name, new_private_ip):
    try:
        with open(name, "r") as f:
            content = f.readlines()

        start_idx, end_idx = None, None
        for i, line in enumerate(content):
            if line.strip() == "conn Geneve3":
                start_idx = i
            elif start_idx is not None and line.strip().startswith("conn "):
                end_idx = i
                break

        if start_idx is None:
            print("\033[91m'conn Geneve3' section not found\033[0m")
            return

        if end_idx is None:
            end_idx = len(content)

        section = content[start_idx:end_idx]
        ip_parts = new_private_ip.split(":")
        if new_private_ip.endswith(":2"):
            ip_parts[-1] = "1"
        else:
            ip_parts[-1] = "2"
        counterpart_ip = ":".join(ip_parts)

        new_section = []
        for line in section:
            line = re.sub(r"leftsubnet=\S+", f"leftsubnet={new_private_ip}/64", line)
            line = re.sub(r"leftid=\S+", f"leftid={new_private_ip}", line)
            line = re.sub(r"right=\S+", f"right={counterpart_ip}", line)
            line = re.sub(r"rightsubnet=\S+", f"rightsubnet={counterpart_ip}/64", line)
            new_section.append(line)

        new_content = content[:start_idx] + new_section + content[end_idx:]

        with open(name, "w") as f:
            f.writelines(new_content)

        print(f"\033[92m'conn Geneve3' section updated successfully\033[0m")
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def save_stuff_gensec3(private_ip, remote_ip, ipsec_secret):
    try:
        current_ips = get_current_private_ipsgen_multi3()
        current_ip = current_ips.get("geneve")

        if current_ip:
            delete_ufw_rules(current_ip)

        add_ufw_rules(private_ip)

        opposite_private_ip = wtb_opposite_ipgen(private_ip)

        update_pingfilegen("/etc/ping3_sys.sh", opposite_private_ip)
        update_ipfile_gensec("/etc/sys3.sh", private_ip, update_type="private")
        update_ipfile_gensec("/etc/sys3.sh", remote_ip, update_type="remote")
        update_ipfile_gensec("/etc/ipsec1.conf", private_ip, update_type="ipsec")
        update_ipsec_secret("/etc/ipsec.secrets", ipsec_secret)

        try:
            interface = "azumigen3"
            subprocess.run(["ip", "link", "set", "dev", interface, "down"], check=True)
            subprocess.run(["ip", "link", "delete", interface], check=True)
        except subprocess.CalledProcessError:
            print("\033[91merror bringing interface down or deleting it\033[0m")

        script = "/etc/sys3.sh"
        result = subprocess.run(["/bin/bash", script], capture_output=True, text=True)
        if "RTNETLINK answers: File exists" in result.stderr:
            print("interface already exists, don't mind this")
        else:
            result.check_returncode()
        display_checkmark(
            f"\033[92mChanges saved and {interface} interface updated successfully!\033[0m"
        )

        subprocess.run(["sudo", "systemctl", "daemon-reload"], check=True)
        try:
            subprocess.run(
                ["sudo", "systemctl", "restart", "ping3_gen.service"], check=True
            )
        except subprocess.CalledProcessError as e:
            if "Unit ping3_gen.service not found" in (e.stderr or ""):
                print(
                    "\033[91mFailed to restart ping_gen.service: ping3_gen.service not found.\033[0m"
                )
            else:
                raise

        subprocess.run(["sudo", "systemctl", "restart", "strong-azumi1"], check=True)

        result = subprocess.run(
            ["systemctl", "list-units", "--full", "--all", "strong-azumi1.service"],
            capture_output=True,
            text=True,
        )
        if "strong-azumi1.service" in (result.stdout or ""):
            subprocess.run(
                ["sudo", "systemctl", "restart", "strong-azumi1"], check=True
            )
        else:
            print(
                "\033[91mstrong-azumi service not found, don't mind this error.\033[0m"
            )
    except subprocess.CalledProcessError as e:
        print(f"\033[91merror applying network stuff: geneve udp v4 error\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def save_stuff_gensec_iran3(private_ip, remote_ip, ipsec_secret):
    try:
        current_ips = get_current_private_ipsgen_multi3()
        current_ip = current_ips.get("geneve")

        if current_ip:
            delete_ufw_rules(current_ip)

        add_ufw_rules(private_ip)

        opposite_private_ip = wtb_opposite_ipgen(private_ip)

        update_pingfilegen("/etc/ping3_sys.sh", opposite_private_ip)
        update_ipfile_gensec("/etc/sys3.sh", private_ip, update_type="private")
        update_ipfile_gensec("/etc/sys3.sh", remote_ip, update_type="remote")
        update_ipsec_conf_geniran2("/etc/ipsec1.conf", private_ip)
        update_ipsec_secret("/etc/ipsec.secrets", ipsec_secret)

        try:
            interface = "azumigen3"
            subprocess.run(["ip", "link", "set", "dev", interface, "down"], check=True)
            subprocess.run(["ip", "link", "delete", interface], check=True)
        except subprocess.CalledProcessError:
            print("\033[91merror bringing interface down or deleting it\033[0m")

        script = "/etc/sys3.sh"
        result = subprocess.run(["/bin/bash", script], capture_output=True, text=True)
        if "RTNETLINK answers: File exists" in result.stderr:
            print("interface already exists, don't mind this")
        else:
            result.check_returncode()
        display_checkmark(
            f"\033[92mChanges saved and {interface} interface updated successfully!\033[0m"
        )

        subprocess.run(["sudo", "systemctl", "daemon-reload"], check=True)
        try:
            subprocess.run(
                ["sudo", "systemctl", "restart", "ping3_gen.service"], check=True
            )
        except subprocess.CalledProcessError as e:
            if "Unit ping3_gen.service not found" in (e.stderr or ""):
                print(
                    "\033[91mFailed to restart ping_gen.service: ping3_gen.service not found.\033[0m"
                )
            else:
                raise

        subprocess.run(["sudo", "systemctl", "restart", "strong-azumi1"], check=True)

        result = subprocess.run(
            ["systemctl", "list-units", "--full", "--all", "strong-azumi1.service"],
            capture_output=True,
            text=True,
        )
        if "strong-azumi1.service" in (result.stdout or ""):
            subprocess.run(
                ["sudo", "systemctl", "restart", "strong-azumi1"], check=True
            )
        else:
            print(
                "\033[91mstrong-azumi service not found, don't mind this error.\033[0m"
            )
    except subprocess.CalledProcessError as e:
        print(f"\033[91merror applying network stuff: geneve udp v4 error\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def genudpir3sec_editmulti_local():
    remote_ip_private = remote_ip("/etc/sys3.sh")
    private_ip_private = private_genmulti("/etc/sys3.sh")
    ipsec_secret_private = ipsec_secret("/etc/ipsec.secrets")

    if not remote_ip_private or not private_ip_private or not ipsec_secret_private:
        print("Couldn't retrieve IP addresses or IPSec secret from files")
        return

    while True:
        os.system("clear")
        display_stuff_k3(remote_ip_private, private_ip_private, ipsec_secret_private)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mGeneve [5]Kharej [1]IRAN\033[93m IRAN Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej [3] \033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mGeneve \033[93mPrivate IPV4 \033[0m")
        print("3. \033[93mChange IPSec Secret Key\033[0m")
        print("4. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "2":
            new_ip = input(
                "\033[93mEnter New Private IPV4 address \033[96m[Geneve]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mKharej [3]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "3":
            new_secret = input("\033[93mEnter new IPSec Secret Key :\033[0m ")
            if new_secret:
                ipsec_secret_private = new_secret
            else:
                print("\033[91mCrazy Secret Key\033[0m")
        elif choice == "4":
            save_stuff_gensec_iran3(
                private_ip_private, remote_ip_private, ipsec_secret_private
            )
            update_ipsec_ip_multi3(private_ip_private)
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Please select a valid option.")


def genudpkharej3sec_editmulti_local():
    remote_ip_private = remote_ip("/etc/sys3.sh")
    private_ip_private = private_genmulti("/etc/sys3.sh")
    ipsec_secret_private = ipsec_secret("/etc/ipsec.secrets")

    if not remote_ip_private or not private_ip_private or not ipsec_secret_private:
        print("Couldn't retrieve IP addresses or IPSec secret from files")
        return

    while True:
        os.system("clear")
        display_stuff_i1(remote_ip_private, private_ip_private, ipsec_secret_private)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mGeneve + IPSEC [5]Kharej [1]IRAN\033[93m Kharej Server 3 Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═════════════════════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN \033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mGeneve \033[93mPrivate IPV4 \033[0m")
        print("3. \033[93mChange IPSec Secret Key\033[0m")
        print("4. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "2":
            new_ip = input(
                "\033[93mEnter New Private IPV4 address \033[96m[Geneve]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mIRAN\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "3":
            new_secret = input("\033[93mEnter new IPSec Secret Key :\033[0m ")
            if new_secret:
                ipsec_secret_private = new_secret
            else:
                print("\033[91mCrazy Secret Key\033[0m")
        elif choice == "4":
            save_stuff_gensec3(
                private_ip_private, remote_ip_private, ipsec_secret_private
            )
            update_ipsec_ip(private_ip_private)
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Please select a valid option.")


# 4
def get_current_private_ipsgen_multi4():
    private_ip_geneve = private_genmulti("/etc/sys4.sh")
    return {
        "geneve": private_ip_geneve,
    }


def display_stuff_k4(remote_ip, private_ip, ipsec_secret):
    lines = [
        f"\033[93mTitle:         Geneve Configuration\033[0m",
        f"\033[97m──────────────────────────────────────\033[0m",
        f"\033[92mKharej [4] Public IP:      \033[97m{remote_ip}\033[0m",
        f"\033[93mGeneve Private IP:         \033[97m{private_ip}\033[0m",
        f"\033[94mIPSec key:                 \033[97m{ipsec_secret}\033[0m",
    ]
    box_width = 50

    print("\033[93m╭" + "─" * (box_width - 2) + "╮\033[0m")

    for line in lines:
        print(f"\033[93m {line:<{box_width - 4}} \033[0m")

    print("\033[93m╰" + "─" * (box_width - 2) + "╯\033[0m")


def update_ipsec_conf_geniran4(name, new_private_ip):
    try:
        with open(name, "r") as f:
            content = f.readlines()

        start_idx, end_idx = None, None
        for i, line in enumerate(content):
            if line.strip() == "conn Geneve4":
                start_idx = i
            elif start_idx is not None and line.strip().startswith("conn "):
                end_idx = i
                break

        if start_idx is None:
            print("\033[91m'conn Geneve4' section not found\033[0m")
            return

        if end_idx is None:
            end_idx = len(content)

        section = content[start_idx:end_idx]
        ip_parts = new_private_ip.split(":")
        if new_private_ip.endswith(":2"):
            ip_parts[-1] = "1"
        else:
            ip_parts[-1] = "2"
        counterpart_ip = ":".join(ip_parts)

        new_section = []
        for line in section:
            line = re.sub(r"leftsubnet=\S+", f"leftsubnet={new_private_ip}/64", line)
            line = re.sub(r"leftid=\S+", f"leftid={new_private_ip}", line)
            line = re.sub(r"right=\S+", f"right={counterpart_ip}", line)
            line = re.sub(r"rightsubnet=\S+", f"rightsubnet={counterpart_ip}/64", line)
            new_section.append(line)

        new_content = content[:start_idx] + new_section + content[end_idx:]

        with open(name, "w") as f:
            f.writelines(new_content)

        print(f"\033[92m'conn Geneve4' section updated successfully\033[0m")
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def save_stuff_gensec4(private_ip, remote_ip, ipsec_secret):
    try:
        current_ips = get_current_private_ipsgen_multi4()
        current_ip = current_ips.get("geneve")

        if current_ip:
            delete_ufw_rules(current_ip)

        add_ufw_rules(private_ip)

        opposite_private_ip = wtb_opposite_ipgen(private_ip)

        update_pingfilegen("/etc/ping4_sys.sh", opposite_private_ip)
        update_ipfile_gensec("/etc/sys4.sh", private_ip, update_type="private")
        update_ipfile_gensec("/etc/sys4.sh", remote_ip, update_type="remote")
        update_ipfile_gensec("/etc/ipsec1.conf", private_ip, update_type="ipsec")
        update_ipsec_secret("/etc/ipsec.secrets", ipsec_secret)

        try:
            interface = "azumigen4"
            subprocess.run(["ip", "link", "set", "dev", interface, "down"], check=True)
            subprocess.run(["ip", "link", "delete", interface], check=True)
        except subprocess.CalledProcessError:
            print("\033[91merror bringing interface down or deleting it\033[0m")

        script = "/etc/sys4.sh"
        result = subprocess.run(["/bin/bash", script], capture_output=True, text=True)
        if "RTNETLINK answers: File exists" in result.stderr:
            print("interface already exists, don't mind this")
        else:
            result.check_returncode()
        display_checkmark(
            f"\033[92mChanges saved and {interface} interface updated successfully!\033[0m"
        )

        subprocess.run(["sudo", "systemctl", "daemon-reload"], check=True)
        try:
            subprocess.run(
                ["sudo", "systemctl", "restart", "ping4_gen.service"], check=True
            )
        except subprocess.CalledProcessError as e:
            if "Unit ping4_gen.service not found" in (e.stderr or ""):
                print(
                    "\033[91mFailed to restart ping_gen.service: ping4_gen.service not found.\033[0m"
                )
            else:
                raise

        subprocess.run(["sudo", "systemctl", "restart", "strong-azumi1"], check=True)

        result = subprocess.run(
            ["systemctl", "list-units", "--full", "--all", "strong-azumi1.service"],
            capture_output=True,
            text=True,
        )
        if "strong-azumi1.service" in (result.stdout or ""):
            subprocess.run(
                ["sudo", "systemctl", "restart", "strong-azumi1"], check=True
            )
        else:
            print(
                "\033[91mstrong-azumi service not found, don't mind this error.\033[0m"
            )
    except subprocess.CalledProcessError as e:
        print(f"\033[91merror applying network stuff: geneve udp v4 error\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def save_stuff_gensec_iran4(private_ip, remote_ip, ipsec_secret):
    try:
        current_ips = get_current_private_ipsgen_multi4()
        current_ip = current_ips.get("geneve")

        if current_ip:
            delete_ufw_rules(current_ip)

        add_ufw_rules(private_ip)

        opposite_private_ip = wtb_opposite_ipgen(private_ip)

        update_pingfilegen("/etc/ping4_sys.sh", opposite_private_ip)
        update_ipfile_gensec("/etc/sys4.sh", private_ip, update_type="private")
        update_ipfile_gensec("/etc/sys4.sh", remote_ip, update_type="remote")
        update_ipsec_conf_geniran4("/etc/ipsec1.conf", private_ip)
        update_ipsec_secret("/etc/ipsec.secrets", ipsec_secret)

        try:
            interface = "azumigen4"
            subprocess.run(["ip", "link", "set", "dev", interface, "down"], check=True)
            subprocess.run(["ip", "link", "delete", interface], check=True)
        except subprocess.CalledProcessError:
            print("\033[91merror bringing interface down or deleting it\033[0m")

        script = "/etc/sys4.sh"
        result = subprocess.run(["/bin/bash", script], capture_output=True, text=True)
        if "RTNETLINK answers: File exists" in result.stderr:
            print("interface already exists, don't mind this")
        else:
            result.check_returncode()
        display_checkmark(
            f"\033[92mChanges saved and {interface} interface updated successfully!\033[0m"
        )

        subprocess.run(["sudo", "systemctl", "daemon-reload"], check=True)
        try:
            subprocess.run(
                ["sudo", "systemctl", "restart", "ping4_gen.service"], check=True
            )
        except subprocess.CalledProcessError as e:
            if "Unit ping4_gen.service not found" in (e.stderr or ""):
                print(
                    "\033[91mFailed to restart ping_gen.service: ping4_gen.service not found.\033[0m"
                )
            else:
                raise

        subprocess.run(["sudo", "systemctl", "restart", "strong-azumi1"], check=True)

        result = subprocess.run(
            ["systemctl", "list-units", "--full", "--all", "strong-azumi1.service"],
            capture_output=True,
            text=True,
        )
        if "strong-azumi1.service" in (result.stdout or ""):
            subprocess.run(
                ["sudo", "systemctl", "restart", "strong-azumi1"], check=True
            )
        else:
            print(
                "\033[91mstrong-azumi service not found, don't mind this error.\033[0m"
            )
    except subprocess.CalledProcessError as e:
        print(f"\033[91merror applying network stuff: geneve udp v4 error\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def genudpir4sec_editmulti_local():
    remote_ip_private = remote_ip("/etc/sys4.sh")
    private_ip_private = private_genmulti("/etc/sys4.sh")
    ipsec_secret_private = ipsec_secret("/etc/ipsec.secrets")

    if not remote_ip_private or not private_ip_private or not ipsec_secret_private:
        print("Couldn't retrieve IP addresses or IPSec secret from files")
        return

    while True:
        os.system("clear")
        display_stuff_k4(remote_ip_private, private_ip_private, ipsec_secret_private)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mGeneve [5]Kharej [1]IRAN\033[93m IRAN Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej [4] \033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mGeneve \033[93mPrivate IPV4 \033[0m")
        print("3. \033[93mChange IPSec Secret Key\033[0m")
        print("4. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "2":
            new_ip = input(
                "\033[93mEnter New Private IPV4 address \033[96m[Geneve]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mKharej [4]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "3":
            new_secret = input("\033[93mEnter new IPSec Secret Key :\033[0m ")
            if new_secret:
                ipsec_secret_private = new_secret
            else:
                print("\033[91mCrazy Secret Key\033[0m")
        elif choice == "4":
            save_stuff_gensec_iran4(
                private_ip_private, remote_ip_private, ipsec_secret_private
            )
            update_ipsec_ip_multi4(private_ip_private)
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Please select a valid option.")


def genudpkharej4sec_editmulti_local():
    remote_ip_private = remote_ip("/etc/sys4.sh")
    private_ip_private = private_genmulti("/etc/sys4.sh")
    ipsec_secret_private = ipsec_secret("/etc/ipsec.secrets")

    if not remote_ip_private or not private_ip_private or not ipsec_secret_private:
        print("Couldn't retrieve IP addresses or IPSec secret from files")
        return

    while True:
        os.system("clear")
        display_stuff_i1(remote_ip_private, private_ip_private, ipsec_secret_private)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mGeneve + IPSEC [5]Kharej [1]IRAN\033[93m Kharej Server 4 Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═════════════════════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN \033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mGeneve \033[93mPrivate IPV4 \033[0m")
        print("3. \033[93mChange IPSec Secret Key\033[0m")
        print("4. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "2":
            new_ip = input(
                "\033[93mEnter New Private IPV4 address \033[96m[Geneve]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mIRAN\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "3":
            new_secret = input("\033[93mEnter new IPSec Secret Key :\033[0m ")
            if new_secret:
                ipsec_secret_private = new_secret
            else:
                print("\033[91mCrazy Secret Key\033[0m")
        elif choice == "4":
            save_stuff_gensec4(
                private_ip_private, remote_ip_private, ipsec_secret_private
            )
            update_ipsec_ip(private_ip_private)
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Please select a valid option.")


# 5
def get_current_private_ipsgen_multi5():
    private_ip_geneve = private_genmulti("/etc/sys5.sh")
    return {
        "geneve": private_ip_geneve,
    }


def display_stuff_k5(remote_ip, private_ip, ipsec_secret):
    lines = [
        f"\033[93mTitle:         Geneve Configuration\033[0m",
        f"\033[97m──────────────────────────────────────\033[0m",
        f"\033[92mKharej [5] Public IP:      \033[97m{remote_ip}\033[0m",
        f"\033[93mGeneve Private IP:         \033[97m{private_ip}\033[0m",
        f"\033[94mIPSec key:                 \033[97m{ipsec_secret}\033[0m",
    ]
    box_width = 50

    print("\033[93m╭" + "─" * (box_width - 2) + "╮\033[0m")

    for line in lines:
        print(f"\033[93m {line:<{box_width - 4}} \033[0m")

    print("\033[93m╰" + "─" * (box_width - 2) + "╯\033[0m")


def update_ipsec_conf_geniran5(name, new_private_ip):
    try:
        with open(name, "r") as f:
            content = f.readlines()

        start_idx, end_idx = None, None
        for i, line in enumerate(content):
            if line.strip() == "conn Geneve5":
                start_idx = i
            elif start_idx is not None and line.strip().startswith("conn "):
                end_idx = i
                break

        if start_idx is None:
            print("\033[91m'conn Geneve5' section not found\033[0m")
            return

        if end_idx is None:
            end_idx = len(content)

        section = content[start_idx:end_idx]
        ip_parts = new_private_ip.split(":")
        if new_private_ip.endswith(":2"):
            ip_parts[-1] = "1"
        else:
            ip_parts[-1] = "2"
        counterpart_ip = ":".join(ip_parts)

        new_section = []
        for line in section:
            line = re.sub(r"leftsubnet=\S+", f"leftsubnet={new_private_ip}/64", line)
            line = re.sub(r"leftid=\S+", f"leftid={new_private_ip}", line)
            line = re.sub(r"right=\S+", f"right={counterpart_ip}", line)
            line = re.sub(r"rightsubnet=\S+", f"rightsubnet={counterpart_ip}/64", line)
            new_section.append(line)

        new_content = content[:start_idx] + new_section + content[end_idx:]

        with open(name, "w") as f:
            f.writelines(new_content)

        print(f"\033[92m'conn Geneve5' section updated successfully\033[0m")
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def save_stuff_gensec5(private_ip, remote_ip, ipsec_secret):
    try:
        current_ips = get_current_private_ipsgen_multi5()
        current_ip = current_ips.get("geneve")

        if current_ip:
            delete_ufw_rules(current_ip)

        add_ufw_rules(private_ip)

        opposite_private_ip = wtb_opposite_ipgen(private_ip)

        update_pingfilegen("/etc/ping5_sys.sh", opposite_private_ip)
        update_ipfile_gensec("/etc/sys5.sh", private_ip, update_type="private")
        update_ipfile_gensec("/etc/sys5.sh", remote_ip, update_type="remote")
        update_ipfile_gensec("/etc/ipsec1.conf", private_ip, update_type="ipsec")
        update_ipsec_secret("/etc/ipsec.secrets", ipsec_secret)

        try:
            interface = "azumigen5"
            subprocess.run(["ip", "link", "set", "dev", interface, "down"], check=True)
            subprocess.run(["ip", "link", "delete", interface], check=True)
        except subprocess.CalledProcessError:
            print("\033[91merror bringing interface down or deleting it\033[0m")

        script = "/etc/sys5.sh"
        result = subprocess.run(["/bin/bash", script], capture_output=True, text=True)
        if "RTNETLINK answers: File exists" in result.stderr:
            print("interface already exists, don't mind this")
        else:
            result.check_returncode()
        display_checkmark(
            f"\033[92mChanges saved and {interface} interface updated successfully!\033[0m"
        )

        subprocess.run(["sudo", "systemctl", "daemon-reload"], check=True)
        try:
            subprocess.run(
                ["sudo", "systemctl", "restart", "ping5_gen.service"], check=True
            )
        except subprocess.CalledProcessError as e:
            if "Unit ping5_gen.service not found" in (e.stderr or ""):
                print(
                    "\033[91mFailed to restart ping_gen.service: ping5_gen.service not found.\033[0m"
                )
            else:
                raise

        subprocess.run(["sudo", "systemctl", "restart", "strong-azumi1"], check=True)

        result = subprocess.run(
            ["systemctl", "list-units", "--full", "--all", "strong-azumi1.service"],
            capture_output=True,
            text=True,
        )
        if "strong-azumi1.service" in (result.stdout or ""):
            subprocess.run(
                ["sudo", "systemctl", "restart", "strong-azumi1"], check=True
            )
        else:
            print(
                "\033[91mstrong-azumi service not found, don't mind this error.\033[0m"
            )
    except subprocess.CalledProcessError as e:
        print(f"\033[91merror applying network stuff: geneve udp v4 error\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def save_stuff_gensec_iran5(private_ip, remote_ip, ipsec_secret):
    try:
        current_ips = get_current_private_ipsgen_multi5()
        current_ip = current_ips.get("geneve")

        if current_ip:
            delete_ufw_rules(current_ip)

        add_ufw_rules(private_ip)

        opposite_private_ip = wtb_opposite_ipgen(private_ip)

        update_pingfilegen("/etc/ping5_sys.sh", opposite_private_ip)
        update_ipfile_gensec("/etc/sys5.sh", private_ip, update_type="private")
        update_ipfile_gensec("/etc/sys5.sh", remote_ip, update_type="remote")
        update_ipsec_conf_geniran5("/etc/ipsec1.conf", private_ip)
        update_ipsec_secret("/etc/ipsec.secrets", ipsec_secret)

        try:
            interface = "azumigen5"
            subprocess.run(["ip", "link", "set", "dev", interface, "down"], check=True)
            subprocess.run(["ip", "link", "delete", interface], check=True)
        except subprocess.CalledProcessError:
            print("\033[91merror bringing interface down or deleting it\033[0m")

        script = "/etc/sys5.sh"
        result = subprocess.run(["/bin/bash", script], capture_output=True, text=True)
        if "RTNETLINK answers: File exists" in result.stderr:
            print("interface already exists, don't mind this")
        else:
            result.check_returncode()
        display_checkmark(
            f"\033[92mChanges saved and {interface} interface updated successfully!\033[0m"
        )

        subprocess.run(["sudo", "systemctl", "daemon-reload"], check=True)
        try:
            subprocess.run(
                ["sudo", "systemctl", "restart", "ping5_gen.service"], check=True
            )
        except subprocess.CalledProcessError as e:
            if "Unit ping5_gen.service not found" in (e.stderr or ""):
                print(
                    "\033[91mFailed to restart ping_gen.service: ping5_gen.service not found.\033[0m"
                )
            else:
                raise

        subprocess.run(["sudo", "systemctl", "restart", "strong-azumi1"], check=True)

        result = subprocess.run(
            ["systemctl", "list-units", "--full", "--all", "strong-azumi1.service"],
            capture_output=True,
            text=True,
        )
        if "strong-azumi1.service" in (result.stdout or ""):
            subprocess.run(
                ["sudo", "systemctl", "restart", "strong-azumi1"], check=True
            )
        else:
            print(
                "\033[91mstrong-azumi service not found, don't mind this error.\033[0m"
            )
    except subprocess.CalledProcessError as e:
        print(f"\033[91merror applying network stuff: geneve udp v4 error\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def genudpir5sec_editmulti_local():
    remote_ip_private = remote_ip("/etc/sys5.sh")
    private_ip_private = private_genmulti("/etc/sys5.sh")
    ipsec_secret_private = ipsec_secret("/etc/ipsec.secrets")

    if not remote_ip_private or not private_ip_private or not ipsec_secret_private:
        print("Couldn't retrieve IP addresses or IPSec secret from files")
        return

    while True:
        os.system("clear")
        display_stuff_k5(remote_ip_private, private_ip_private, ipsec_secret_private)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mGeneve [5]Kharej [1]IRAN\033[93m IRAN Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej [5] \033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mGeneve \033[93mPrivate IPV4 \033[0m")
        print("3. \033[93mChange IPSec Secret Key\033[0m")
        print("4. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "2":
            new_ip = input(
                "\033[93mEnter New Private IPV4 address \033[96m[Geneve]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mKharej [5]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "3":
            new_secret = input("\033[93mEnter new IPSec Secret Key :\033[0m ")
            if new_secret:
                ipsec_secret_private = new_secret
            else:
                print("\033[91mCrazy Secret Key\033[0m")
        elif choice == "4":
            save_stuff_gensec_iran5(
                private_ip_private, remote_ip_private, ipsec_secret_private
            )
            update_ipsec_ip_multi5(private_ip_private)
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Please select a valid option.")


def genudpkharej5sec_editmulti_local():
    remote_ip_private = remote_ip("/etc/sys5.sh")
    private_ip_private = private_genmulti("/etc/sys5.sh")
    ipsec_secret_private = ipsec_secret("/etc/ipsec.secrets")

    if not remote_ip_private or not private_ip_private or not ipsec_secret_private:
        print("Couldn't retrieve IP addresses or IPSec secret from files")
        return

    while True:
        os.system("clear")
        display_stuff_i1(remote_ip_private, private_ip_private, ipsec_secret_private)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mGeneve + IPSEC [5]Kharej [1]IRAN\033[93m Kharej Server 5 Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═════════════════════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN \033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mGeneve \033[93mPrivate IPV4 \033[0m")
        print("3. \033[93mChange IPSec Secret Key\033[0m")
        print("4. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "2":
            new_ip = input(
                "\033[93mEnter New Private IPV4 address \033[96m[Geneve]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mIRAN\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "3":
            new_secret = input("\033[93mEnter new IPSec Secret Key :\033[0m ")
            if new_secret:
                ipsec_secret_private = new_secret
            else:
                print("\033[91mCrazy Secret Key\033[0m")
        elif choice == "4":
            save_stuff_gensec5(
                private_ip_private, remote_ip_private, ipsec_secret_private
            )
            update_ipsec_ip(private_ip_private)
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Please select a valid option.")


# v6 5 kharej 1 iran
def genudpir1sec_editmulti_localv6():
    remote_ip_private = remote_ip("/etc/sys1.sh")
    private_ip_private = private_genmulti("/etc/sys1.sh")
    ipsec_secret_private = ipsec_secret("/etc/ipsec.secrets")

    if not remote_ip_private or not private_ip_private or not ipsec_secret_private:
        print("Couldn't retrieve IP addresses or IPSec secret from files")
        return

    while True:
        os.system("clear")
        display_stuff_k1(remote_ip_private, private_ip_private, ipsec_secret_private)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mGeneve V6\033[93m IRAN Menu\033[0m")
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej [1] \033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mGeneve \033[93mPrivate IPV6 \033[0m")
        print("3. \033[93mChange IPSec Secret Key\033[0m")
        print("4. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "2":
            new_ip = input(
                "\033[93mEnter New Private IPV6 address \033[96m[Geneve]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mKharej [1]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "3":
            new_secret = input("\033[93mEnter new IPSec Secret Key :\033[0m ")
            if new_secret:
                ipsec_secret_private = new_secret
            else:
                print("\033[91mCrazy Secret Key\033[0m")
        elif choice == "4":
            save_stuff_gensec_iran1(
                private_ip_private, remote_ip_private, ipsec_secret_private
            )
            update_ipsec_ip_multi(private_ip_private)
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Please select a valid option.")


def genudpkharej1sec_editmulti_localv6():
    remote_ip_private = remote_ip("/etc/sys1.sh")
    private_ip_private = private_genmulti("/etc/sys1.sh")
    ipsec_secret_private = ipsec_secret("/etc/ipsec.secrets")

    if not remote_ip_private or not private_ip_private or not ipsec_secret_private:
        print("Couldn't retrieve IP addresses or IPSec secret from files")
        return

    while True:
        os.system("clear")
        display_stuff_i1(remote_ip_private, private_ip_private, ipsec_secret_private)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mGeneve V6 + IPSEC [5]Kharej [1]IRAN\033[93m Kharej Server 1 Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═════════════════════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN \033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mGeneve \033[93mPrivate IPV6 \033[0m")
        print("3. \033[93mChange IPSec Secret Key\033[0m")
        print("4. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "2":
            new_ip = input(
                "\033[93mEnter New Private IPV6 address \033[96m[Geneve]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mIRAN\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "3":
            new_secret = input("\033[93mEnter new IPSec Secret Key :\033[0m ")
            if new_secret:
                ipsec_secret_private = new_secret
            else:
                print("\033[91mCrazy Secret Key\033[0m")
        elif choice == "4":
            save_stuff_gensec1(
                private_ip_private, remote_ip_private, ipsec_secret_private
            )
            update_ipsec_ip(private_ip_private)
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Please select a valid option.")


def genudpir2sec_editmulti_localv6():
    remote_ip_private = remote_ip("/etc/sys2.sh")
    private_ip_private = private_genmulti("/etc/sys2.sh")
    ipsec_secret_private = ipsec_secret("/etc/ipsec.secrets")

    if not remote_ip_private or not private_ip_private or not ipsec_secret_private:
        print("Couldn't retrieve IP addresses or IPSec secret from files")
        return

    while True:
        os.system("clear")
        display_stuff_k2(remote_ip_private, private_ip_private, ipsec_secret_private)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mGeneve V6 [5]Kharej [1]IRAN\033[93m IRAN Menu\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej [2] \033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mGeneve \033[93mPrivate IPV6 \033[0m")
        print("3. \033[93mChange IPSec Secret Key\033[0m")
        print("4. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "2":
            new_ip = input(
                "\033[93mEnter New Private IPV6 address \033[96m[Geneve]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mKharej [2]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "3":
            new_secret = input("\033[93mEnter new IPSec Secret Key :\033[0m ")
            if new_secret:
                ipsec_secret_private = new_secret
            else:
                print("\033[91mCrazy Secret Key\033[0m")
        elif choice == "4":
            save_stuff_gensec_iran2(
                private_ip_private, remote_ip_private, ipsec_secret_private
            )
            update_ipsec_ip_multi2(private_ip_private)
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Please select a valid option.")


def genudpkharej2sec_editmulti_localv6():
    remote_ip_private = remote_ip("/etc/sys2.sh")
    private_ip_private = private_genmulti("/etc/sys2.sh")
    ipsec_secret_private = ipsec_secret("/etc/ipsec.secrets")

    if not remote_ip_private or not private_ip_private or not ipsec_secret_private:
        print("Couldn't retrieve IP addresses or IPSec secret from files")
        return

    while True:
        os.system("clear")
        display_stuff_i1(remote_ip_private, private_ip_private, ipsec_secret_private)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mGeneve V6 + IPSEC [5]Kharej [1]IRAN\033[93m Kharej Server 2 Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═════════════════════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN \033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mGeneve \033[93mPrivate IPV6 \033[0m")
        print("3. \033[93mChange IPSec Secret Key\033[0m")
        print("4. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "2":
            new_ip = input(
                "\033[93mEnter New Private IPV6 address \033[96m[Geneve]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mIRAN\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "3":
            new_secret = input("\033[93mEnter new IPSec Secret Key :\033[0m ")
            if new_secret:
                ipsec_secret_private = new_secret
            else:
                print("\033[91mCrazy Secret Key\033[0m")
        elif choice == "4":
            save_stuff_gensec2(
                private_ip_private, remote_ip_private, ipsec_secret_private
            )
            update_ipsec_ip(private_ip_private)
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Please select a valid option.")


def genudpir3sec_editmulti_localv6():
    remote_ip_private = remote_ip("/etc/sys3.sh")
    private_ip_private = private_genmulti("/etc/sys3.sh")
    ipsec_secret_private = ipsec_secret("/etc/ipsec.secrets")

    if not remote_ip_private or not private_ip_private or not ipsec_secret_private:
        print("Couldn't retrieve IP addresses or IPSec secret from files")
        return

    while True:
        os.system("clear")
        display_stuff_k3(remote_ip_private, private_ip_private, ipsec_secret_private)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mGeneve V6 [5]Kharej [1]IRAN\033[93m IRAN Menu\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej [3] \033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mGeneve \033[93mPrivate IPV6 \033[0m")
        print("3. \033[93mChange IPSec Secret Key\033[0m")
        print("4. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "2":
            new_ip = input(
                "\033[93mEnter New Private IPV6 address \033[96m[Geneve]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mKharej [3]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "3":
            new_secret = input("\033[93mEnter new IPSec Secret Key :\033[0m ")
            if new_secret:
                ipsec_secret_private = new_secret
            else:
                print("\033[91mCrazy Secret Key\033[0m")
        elif choice == "4":
            save_stuff_gensec_iran3(
                private_ip_private, remote_ip_private, ipsec_secret_private
            )
            update_ipsec_ip_multi3(private_ip_private)
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Please select a valid option.")


def genudpkharej3sec_editmulti_localv6():
    remote_ip_private = remote_ip("/etc/sys3.sh")
    private_ip_private = private_genmulti("/etc/sys3.sh")
    ipsec_secret_private = ipsec_secret("/etc/ipsec.secrets")

    if not remote_ip_private or not private_ip_private or not ipsec_secret_private:
        print("Couldn't retrieve IP addresses or IPSec secret from files")
        return

    while True:
        os.system("clear")
        display_stuff_i1(remote_ip_private, private_ip_private, ipsec_secret_private)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mGeneve V6 + IPSEC [5]Kharej [1]IRAN\033[93m Kharej Server 3 Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═════════════════════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN \033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mGeneve \033[93mPrivate IPV6 \033[0m")
        print("3. \033[93mChange IPSec Secret Key\033[0m")
        print("4. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "2":
            new_ip = input(
                "\033[93mEnter New Private IPV6 address \033[96m[Geneve]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mIRAN\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "3":
            new_secret = input("\033[93mEnter new IPSec Secret Key :\033[0m ")
            if new_secret:
                ipsec_secret_private = new_secret
            else:
                print("\033[91mCrazy Secret Key\033[0m")
        elif choice == "4":
            save_stuff_gensec3(
                private_ip_private, remote_ip_private, ipsec_secret_private
            )
            update_ipsec_ip(private_ip_private)
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Please select a valid option.")


def genudpir4sec_editmulti_localv6():
    remote_ip_private = remote_ip("/etc/sys4.sh")
    private_ip_private = private_genmulti("/etc/sys4.sh")
    ipsec_secret_private = ipsec_secret("/etc/ipsec.secrets")

    if not remote_ip_private or not private_ip_private or not ipsec_secret_private:
        print("Couldn't retrieve IP addresses or IPSec secret from files")
        return

    while True:
        os.system("clear")
        display_stuff_k4(remote_ip_private, private_ip_private, ipsec_secret_private)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mGeneve V6 [5]Kharej [1]IRAN\033[93m IRAN Menu\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej [4] \033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mGeneve \033[93mPrivate IPV6 \033[0m")
        print("3. \033[93mChange IPSec Secret Key\033[0m")
        print("4. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "2":
            new_ip = input(
                "\033[93mEnter New Private IPV6 address \033[96m[Geneve]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mKharej [4]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "3":
            new_secret = input("\033[93mEnter new IPSec Secret Key :\033[0m ")
            if new_secret:
                ipsec_secret_private = new_secret
            else:
                print("\033[91mCrazy Secret Key\033[0m")
        elif choice == "4":
            save_stuff_gensec_iran4(
                private_ip_private, remote_ip_private, ipsec_secret_private
            )
            update_ipsec_ip_multi4(private_ip_private)
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Please select a valid option.")


def genudpkharej4sec_editmulti_localv6():
    remote_ip_private = remote_ip("/etc/sys4.sh")
    private_ip_private = private_genmulti("/etc/sys4.sh")
    ipsec_secret_private = ipsec_secret("/etc/ipsec.secrets")

    if not remote_ip_private or not private_ip_private or not ipsec_secret_private:
        print("Couldn't retrieve IP addresses or IPSec secret from files")
        return

    while True:
        os.system("clear")
        display_stuff_i1(remote_ip_private, private_ip_private, ipsec_secret_private)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mGeneve V6 + IPSEC [5]Kharej [1]IRAN\033[93m Kharej Server 4 Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═════════════════════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN \033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mGeneve \033[93mPrivate IPV6 \033[0m")
        print("3. \033[93mChange IPSec Secret Key\033[0m")
        print("4. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "2":
            new_ip = input(
                "\033[93mEnter New Private IPV6 address \033[96m[Geneve]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mIRAN\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "3":
            new_secret = input("\033[93mEnter new IPSec Secret Key :\033[0m ")
            if new_secret:
                ipsec_secret_private = new_secret
            else:
                print("\033[91mCrazy Secret Key\033[0m")
        elif choice == "4":
            save_stuff_gensec4(
                private_ip_private, remote_ip_private, ipsec_secret_private
            )
            update_ipsec_ip(private_ip_private)
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Please select a valid option.")


def genudpir5sec_editmulti_localv6():
    remote_ip_private = remote_ip("/etc/sys5.sh")
    private_ip_private = private_genmulti("/etc/sys5.sh")
    ipsec_secret_private = ipsec_secret("/etc/ipsec.secrets")

    if not remote_ip_private or not private_ip_private or not ipsec_secret_private:
        print("Couldn't retrieve IP addresses or IPSec secret from files")
        return

    while True:
        os.system("clear")
        display_stuff_k5(remote_ip_private, private_ip_private, ipsec_secret_private)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mGeneve V6 [5]Kharej [1]IRAN\033[93m IRAN Menu\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej [5] \033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mGeneve \033[93mPrivate IPV6 \033[0m")
        print("3. \033[93mChange IPSec Secret Key\033[0m")
        print("4. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "2":
            new_ip = input(
                "\033[93mEnter New Private IPV6 address \033[96m[Geneve]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mKharej [5]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "3":
            new_secret = input("\033[93mEnter new IPSec Secret Key :\033[0m ")
            if new_secret:
                ipsec_secret_private = new_secret
            else:
                print("\033[91mCrazy Secret Key\033[0m")
        elif choice == "4":
            save_stuff_gensec_iran5(
                private_ip_private, remote_ip_private, ipsec_secret_private
            )
            update_ipsec_ip_multi5(private_ip_private)
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Please select a valid option.")


def genudpkharej5sec_editmulti_localv6():
    remote_ip_private = remote_ip("/etc/sys5.sh")
    private_ip_private = private_genmulti("/etc/sys5.sh")
    ipsec_secret_private = ipsec_secret("/etc/ipsec.secrets")

    if not remote_ip_private or not private_ip_private or not ipsec_secret_private:
        print("Couldn't retrieve IP addresses or IPSec secret from files")
        return

    while True:
        os.system("clear")
        display_stuff_i1(remote_ip_private, private_ip_private, ipsec_secret_private)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mGeneve V6 + IPSEC [5]Kharej [1]IRAN\033[93m Kharej Server 5 Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═════════════════════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN \033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mGeneve \033[93mPrivate IPV6 \033[0m")
        print("3. \033[93mChange IPSec Secret Key\033[0m")
        print("4. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "2":
            new_ip = input(
                "\033[93mEnter New Private IPV6 address \033[96m[Geneve]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mIRAN\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "3":
            new_secret = input("\033[93mEnter new IPSec Secret Key :\033[0m ")
            if new_secret:
                ipsec_secret_private = new_secret
            else:
                print("\033[91mCrazy Secret Key\033[0m")
        elif choice == "4":
            save_stuff_gensec5(
                private_ip_private, remote_ip_private, ipsec_secret_private
            )
            update_ipsec_ip(private_ip_private)
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Please select a valid option.")


def display_stuff_kharej(remote_ip, private_ip, ipsec_secret):
    lines = [
        f"\033[93mTitle:         Geneve Configuration\033[0m",
        f"\033[97m──────────────────────────────────────\033[0m",
        f"\033[92mKharej Public IP:        \033[97m{remote_ip}\033[0m",
        f"\033[93mGeneve Private IP:       \033[97m{private_ip}\033[0m",
        f"\033[94mIPSec key:               \033[97m{ipsec_secret}\033[0m",
    ]
    box_width = 50

    print("\033[93m╭" + "─" * (box_width - 2) + "╮\033[0m")

    for line in lines:
        print(f"\033[93m {line:<{box_width - 4}} \033[0m")

    print("\033[93m╰" + "─" * (box_width - 2) + "╯\033[0m")


def display_stuff_iran1(remote_ip, private_ip, ipsec_secret):
    lines = [
        f"\033[93mTitle:         Geneve Configuration\033[0m",
        f"\033[97m──────────────────────────────────────\033[0m",
        f"\033[92mIRAN [1] Public IP:      \033[97m{remote_ip}\033[0m",
        f"\033[93mGeneve Private IP:       \033[97m{private_ip}\033[0m",
        f"\033[94mIPSec key:               \033[97m{ipsec_secret}\033[0m",
    ]
    box_width = 50

    print("\033[93m╭" + "─" * (box_width - 2) + "╮\033[0m")

    for line in lines:
        print(f"\033[93m {line:<{box_width - 4}} \033[0m")

    print("\033[93m╰" + "─" * (box_width - 2) + "╯\033[0m")


def genudpkharejone1sec_editmulti_local():
    remote_ip_private = remote_ip("/etc/sys1.sh")
    private_ip_private = private_genmulti("/etc/sys1.sh")
    ipsec_secret_private = ipsec_secret("/etc/ipsec.secrets")

    if not remote_ip_private or not private_ip_private or not ipsec_secret_private:
        print("Couldn't retrieve IP addresses or IPSec secret from files")
        return

    while True:
        os.system("clear")
        display_stuff_iran1(remote_ip_private, private_ip_private, ipsec_secret_private)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mGeneve [1]Kharej [5]IRAN\033[93m Kharej Menu\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN [1]\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mGeneve \033[93mPrivate IPV4 \033[0m")
        print("3. \033[93mChange IPSec Secret Key\033[0m")
        print("4. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "2":
            new_ip = input(
                "\033[93mEnter New Private IPV4 address \033[96m[Geneve]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mIRAN [1]\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "3":
            new_secret = input("\033[93mEnter new IPSec Secret Key :\033[0m ")
            if new_secret:
                ipsec_secret_private = new_secret
            else:
                print("\033[91mCrazy Secret Key\033[0m")
        elif choice == "4":
            save_stuff_gensec_iran1(
                private_ip_private, remote_ip_private, ipsec_secret_private
            )
            update_ipsec_ip_multi(private_ip_private)
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Please select a valid option.")


def genudpiranfive1sec_editmulti_local():
    remote_ip_private = remote_ip("/etc/sys1.sh")
    private_ip_private = private_genmulti("/etc/sys1.sh")
    ipsec_secret_private = ipsec_secret("/etc/ipsec.secrets")

    if not remote_ip_private or not private_ip_private or not ipsec_secret_private:
        print("Couldn't retrieve IP addresses or IPSec secret from files")
        return

    while True:
        os.system("clear")
        display_stuff_kharej(
            remote_ip_private, private_ip_private, ipsec_secret_private
        )

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mGeneve + IPSEC [5]Kharej [1]IRAN\033[93m IRAN Server 1 Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═════════════════════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mGeneve \033[93mPrivate IPV4 \033[0m")
        print("3. \033[93mChange IPSec Secret Key\033[0m")
        print("4. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "2":
            new_ip = input(
                "\033[93mEnter New Private IPV4 address \033[96m[Geneve]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mKharej\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "3":
            new_secret = input("\033[93mEnter new IPSec Secret Key :\033[0m ")
            if new_secret:
                ipsec_secret_private = new_secret
            else:
                print("\033[91mCrazy Secret Key\033[0m")
        elif choice == "4":
            save_stuff_gensec1(
                private_ip_private, remote_ip_private, ipsec_secret_private
            )
            update_ipsec_ip(private_ip_private)
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Please select a valid option.")


# 2
def display_stuff_iran2(remote_ip, private_ip, ipsec_secret):
    lines = [
        f"\033[93mTitle:         Geneve Configuration\033[0m",
        f"\033[97m──────────────────────────────────────\033[0m",
        f"\033[92mIRAN [2] Public IP:      \033[97m{remote_ip}\033[0m",
        f"\033[93mGeneve Private IP:       \033[97m{private_ip}\033[0m",
        f"\033[94mIPSec key:               \033[97m{ipsec_secret}\033[0m",
    ]
    box_width = 50

    print("\033[93m╭" + "─" * (box_width - 2) + "╮\033[0m")

    for line in lines:
        print(f"\033[93m {line:<{box_width - 4}} \033[0m")

    print("\033[93m╰" + "─" * (box_width - 2) + "╯\033[0m")


def genudpkharejone2sec_editmulti_local():
    remote_ip_private = remote_ip("/etc/sys2.sh")
    private_ip_private = private_genmulti("/etc/sys2.sh")
    ipsec_secret_private = ipsec_secret("/etc/ipsec.secrets")

    if not remote_ip_private or not private_ip_private or not ipsec_secret_private:
        print("Couldn't retrieve IP addresses or IPSec secret from files")
        return

    while True:
        os.system("clear")
        display_stuff_iran2(remote_ip_private, private_ip_private, ipsec_secret_private)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mGeneve [1]Kharej [5]IRAN\033[93m Kharej Menu\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN [2]\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mGeneve \033[93mPrivate IPV4 \033[0m")
        print("3. \033[93mChange IPSec Secret Key\033[0m")
        print("4. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "2":
            new_ip = input(
                "\033[93mEnter New Private IPV4 address \033[96m[Geneve]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mIRAN [2]\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "3":
            new_secret = input("\033[93mEnter new IPSec Secret Key :\033[0m ")
            if new_secret:
                ipsec_secret_private = new_secret
            else:
                print("\033[91mCrazy Secret Key\033[0m")
        elif choice == "4":
            save_stuff_gensec_iran2(
                private_ip_private, remote_ip_private, ipsec_secret_private
            )
            update_ipsec_ip_multi2(private_ip_private)
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Please select a valid option.")


def genudpiranfive2sec_editmulti_local():
    remote_ip_private = remote_ip("/etc/sys2.sh")
    private_ip_private = private_genmulti("/etc/sys2.sh")
    ipsec_secret_private = ipsec_secret("/etc/ipsec.secrets")

    if not remote_ip_private or not private_ip_private or not ipsec_secret_private:
        print("Couldn't retrieve IP addresses or IPSec secret from files")
        return

    while True:
        os.system("clear")
        display_stuff_kharej(
            remote_ip_private, private_ip_private, ipsec_secret_private
        )

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mGeneve + IPSEC [5]Kharej [1]IRAN\033[93m IRAN Server 2 Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═════════════════════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mGeneve \033[93mPrivate IPV4 \033[0m")
        print("3. \033[93mChange IPSec Secret Key\033[0m")
        print("4. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "2":
            new_ip = input(
                "\033[93mEnter New Private IPV4 address \033[96m[Geneve]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mKharej\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "3":
            new_secret = input("\033[93mEnter new IPSec Secret Key :\033[0m ")
            if new_secret:
                ipsec_secret_private = new_secret
            else:
                print("\033[91mCrazy Secret Key\033[0m")
        elif choice == "4":
            save_stuff_gensec2(
                private_ip_private, remote_ip_private, ipsec_secret_private
            )
            update_ipsec_ip(private_ip_private)
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Please select a valid option.")


# 3
def display_stuff_iran3(remote_ip, private_ip, ipsec_secret):
    lines = [
        f"\033[93mTitle:         Geneve Configuration\033[0m",
        f"\033[97m──────────────────────────────────────\033[0m",
        f"\033[92mIRAN [3] Public IP:      \033[97m{remote_ip}\033[0m",
        f"\033[93mGeneve Private IP:       \033[97m{private_ip}\033[0m",
        f"\033[94mIPSec key:               \033[97m{ipsec_secret}\033[0m",
    ]
    box_width = 50

    print("\033[93m╭" + "─" * (box_width - 2) + "╮\033[0m")

    for line in lines:
        print(f"\033[93m {line:<{box_width - 4}} \033[0m")

    print("\033[93m╰" + "─" * (box_width - 2) + "╯\033[0m")


def genudpkharejone3sec_editmulti_local():
    remote_ip_private = remote_ip("/etc/sys3.sh")
    private_ip_private = private_genmulti("/etc/sys3.sh")
    ipsec_secret_private = ipsec_secret("/etc/ipsec.secrets")

    if not remote_ip_private or not private_ip_private or not ipsec_secret_private:
        print("Couldn't retrieve IP addresses or IPSec secret from files")
        return

    while True:
        os.system("clear")
        display_stuff_iran3(remote_ip_private, private_ip_private, ipsec_secret_private)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mGeneve [1]Kharej [5]IRAN\033[93m Kharej Menu\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN [3]\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mGeneve \033[93mPrivate IPV4 \033[0m")
        print("3. \033[93mChange IPSec Secret Key\033[0m")
        print("4. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "2":
            new_ip = input(
                "\033[93mEnter New Private IPV4 address \033[96m[Geneve]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mIRAN [3]\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "3":
            new_secret = input("\033[93mEnter new IPSec Secret Key :\033[0m ")
            if new_secret:
                ipsec_secret_private = new_secret
            else:
                print("\033[91mCrazy Secret Key\033[0m")
        elif choice == "4":
            save_stuff_gensec_iran3(
                private_ip_private, remote_ip_private, ipsec_secret_private
            )
            update_ipsec_ip_multi3(private_ip_private)
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Please select a valid option.")


def genudpiranfive3sec_editmulti_local():
    remote_ip_private = remote_ip("/etc/sys3.sh")
    private_ip_private = private_genmulti("/etc/sys3.sh")
    ipsec_secret_private = ipsec_secret("/etc/ipsec.secrets")

    if not remote_ip_private or not private_ip_private or not ipsec_secret_private:
        print("Couldn't retrieve IP addresses or IPSec secret from files")
        return

    while True:
        os.system("clear")
        display_stuff_kharej(
            remote_ip_private, private_ip_private, ipsec_secret_private
        )

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mGeneve + IPSEC [5]Kharej [1]IRAN\033[93m IRAN Server 3 Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═════════════════════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mGeneve \033[93mPrivate IPV4 \033[0m")
        print("3. \033[93mChange IPSec Secret Key\033[0m")
        print("4. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "2":
            new_ip = input(
                "\033[93mEnter New Private IPV4 address \033[96m[Geneve]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mKharej\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "3":
            new_secret = input("\033[93mEnter new IPSec Secret Key :\033[0m ")
            if new_secret:
                ipsec_secret_private = new_secret
            else:
                print("\033[91mCrazy Secret Key\033[0m")
        elif choice == "4":
            save_stuff_gensec3(
                private_ip_private, remote_ip_private, ipsec_secret_private
            )
            update_ipsec_ip(private_ip_private)
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Please select a valid option.")


# 4
def display_stuff_iran4(remote_ip, private_ip, ipsec_secret):
    lines = [
        f"\033[93mTitle:         Geneve Configuration\033[0m",
        f"\033[97m──────────────────────────────────────\033[0m",
        f"\033[92mIRAN [4] Public IP:      \033[97m{remote_ip}\033[0m",
        f"\033[93mGeneve Private IP:       \033[97m{private_ip}\033[0m",
        f"\033[94mIPSec key:               \033[97m{ipsec_secret}\033[0m",
    ]
    box_width = 50

    print("\033[93m╭" + "─" * (box_width - 2) + "╮\033[0m")

    for line in lines:
        print(f"\033[93m {line:<{box_width - 4}} \033[0m")

    print("\033[93m╰" + "─" * (box_width - 2) + "╯\033[0m")


def genudpkharejone4sec_editmulti_local():
    remote_ip_private = remote_ip("/etc/sys4.sh")
    private_ip_private = private_genmulti("/etc/sys4.sh")
    ipsec_secret_private = ipsec_secret("/etc/ipsec.secrets")

    if not remote_ip_private or not private_ip_private or not ipsec_secret_private:
        print("Couldn't retrieve IP addresses or IPSec secret from files")
        return

    while True:
        os.system("clear")
        display_stuff_iran4(remote_ip_private, private_ip_private, ipsec_secret_private)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mGeneve [1]Kharej [5]IRAN\033[93m Kharej Menu\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN [4]\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mGeneve \033[93mPrivate IPV4 \033[0m")
        print("3. \033[93mChange IPSec Secret Key\033[0m")
        print("4. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "2":
            new_ip = input(
                "\033[93mEnter New Private IPV4 address \033[96m[Geneve]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mIRAN [4]\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "3":
            new_secret = input("\033[93mEnter new IPSec Secret Key :\033[0m ")
            if new_secret:
                ipsec_secret_private = new_secret
            else:
                print("\033[91mCrazy Secret Key\033[0m")
        elif choice == "4":
            save_stuff_gensec_iran4(
                private_ip_private, remote_ip_private, ipsec_secret_private
            )
            update_ipsec_ip_multi4(private_ip_private)
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Please select a valid option.")


def genudpiranfive4sec_editmulti_local():
    remote_ip_private = remote_ip("/etc/sys4.sh")
    private_ip_private = private_genmulti("/etc/sys4.sh")
    ipsec_secret_private = ipsec_secret("/etc/ipsec.secrets")

    if not remote_ip_private or not private_ip_private or not ipsec_secret_private:
        print("Couldn't retrieve IP addresses or IPSec secret from files")
        return

    while True:
        os.system("clear")
        display_stuff_kharej(
            remote_ip_private, private_ip_private, ipsec_secret_private
        )

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mGeneve + IPSEC [5]Kharej [1]IRAN\033[93m IRAN Server 4 Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═════════════════════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mGeneve \033[93mPrivate IPV4 \033[0m")
        print("3. \033[93mChange IPSec Secret Key\033[0m")
        print("4. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "2":
            new_ip = input(
                "\033[93mEnter New Private IPV4 address \033[96m[Geneve]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mKharej\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "3":
            new_secret = input("\033[93mEnter new IPSec Secret Key :\033[0m ")
            if new_secret:
                ipsec_secret_private = new_secret
            else:
                print("\033[91mCrazy Secret Key\033[0m")
        elif choice == "4":
            save_stuff_gensec4(
                private_ip_private, remote_ip_private, ipsec_secret_private
            )
            update_ipsec_ip(private_ip_private)
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Please select a valid option.")


# 5
def display_stuff_iran5(remote_ip, private_ip, ipsec_secret):
    lines = [
        f"\033[93mTitle:         Geneve Configuration\033[0m",
        f"\033[97m──────────────────────────────────────\033[0m",
        f"\033[92mIRAN [5] Public IP:      \033[97m{remote_ip}\033[0m",
        f"\033[93mGeneve Private IP:       \033[97m{private_ip}\033[0m",
        f"\033[94mIPSec key:               \033[97m{ipsec_secret}\033[0m",
    ]
    box_width = 50

    print("\033[93m╭" + "─" * (box_width - 2) + "╮\033[0m")

    for line in lines:
        print(f"\033[93m {line:<{box_width - 4}} \033[0m")

    print("\033[93m╰" + "─" * (box_width - 2) + "╯\033[0m")


def genudpkharejone5sec_editmulti_local():
    remote_ip_private = remote_ip("/etc/sys5.sh")
    private_ip_private = private_genmulti("/etc/sys5.sh")
    ipsec_secret_private = ipsec_secret("/etc/ipsec.secrets")

    if not remote_ip_private or not private_ip_private or not ipsec_secret_private:
        print("Couldn't retrieve IP addresses or IPSec secret from files")
        return

    while True:
        os.system("clear")
        display_stuff_iran5(remote_ip_private, private_ip_private, ipsec_secret_private)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mGeneve [1]Kharej [5]IRAN\033[93m Kharej Menu\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN [5]\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mGeneve \033[93mPrivate IPV4 \033[0m")
        print("3. \033[93mChange IPSec Secret Key\033[0m")
        print("4. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "2":
            new_ip = input(
                "\033[93mEnter New Private IPV4 address \033[96m[Geneve]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mIRAN [5]\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "3":
            new_secret = input("\033[93mEnter new IPSec Secret Key :\033[0m ")
            if new_secret:
                ipsec_secret_private = new_secret
            else:
                print("\033[91mCrazy Secret Key\033[0m")
        elif choice == "4":
            save_stuff_gensec_iran5(
                private_ip_private, remote_ip_private, ipsec_secret_private
            )
            update_ipsec_ip_multi5(private_ip_private)
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Please select a valid option.")


def genudpiranfive5sec_editmulti_local():
    remote_ip_private = remote_ip("/etc/sys5.sh")
    private_ip_private = private_genmulti("/etc/sys5.sh")
    ipsec_secret_private = ipsec_secret("/etc/ipsec.secrets")

    if not remote_ip_private or not private_ip_private or not ipsec_secret_private:
        print("Couldn't retrieve IP addresses or IPSec secret from files")
        return

    while True:
        os.system("clear")
        display_stuff_kharej(
            remote_ip_private, private_ip_private, ipsec_secret_private
        )

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mGeneve + IPSEC [5]Kharej [1]IRAN\033[93m IRAN Server 5 Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═════════════════════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mGeneve \033[93mPrivate IPV4 \033[0m")
        print("3. \033[93mChange IPSec Secret Key\033[0m")
        print("4. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "2":
            new_ip = input(
                "\033[93mEnter New Private IPV4 address \033[96m[Geneve]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mKharej\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "3":
            new_secret = input("\033[93mEnter new IPSec Secret Key :\033[0m ")
            if new_secret:
                ipsec_secret_private = new_secret
            else:
                print("\033[91mCrazy Secret Key\033[0m")
        elif choice == "4":
            save_stuff_gensec5(
                private_ip_private, remote_ip_private, ipsec_secret_private
            )
            update_ipsec_ip(private_ip_private)
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Please select a valid option.")


# v6 1kharej 5 iran #1
def genudpkharejone1sec_editmulti_localv6():
    remote_ip_private = remote_ip("/etc/sys1.sh")
    private_ip_private = private_genmulti("/etc/sys1.sh")
    ipsec_secret_private = ipsec_secret("/etc/ipsec.secrets")

    if not remote_ip_private or not private_ip_private or not ipsec_secret_private:
        print("Couldn't retrieve IP addresses or IPSec secret from files")
        return

    while True:
        os.system("clear")
        display_stuff_iran1(remote_ip_private, private_ip_private, ipsec_secret_private)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mGeneve [1]Kharej [5]IRAN\033[93m Kharej Menu\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN [1]\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mGeneve \033[93mPrivate IPV6 \033[0m")
        print("3. \033[93mChange IPSec Secret Key\033[0m")
        print("4. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "2":
            new_ip = input(
                "\033[93mEnter New Private IPV6 address \033[96m[Geneve]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mIRAN [1]\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "3":
            new_secret = input("\033[93mEnter new IPSec Secret Key :\033[0m ")
            if new_secret:
                ipsec_secret_private = new_secret
            else:
                print("\033[91mCrazy Secret Key\033[0m")
        elif choice == "4":
            save_stuff_gensec_iran1(
                private_ip_private, remote_ip_private, ipsec_secret_private
            )
            update_ipsec_ip_multi(private_ip_private)
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Please select a valid option.")


def genudpiranfive1sec_editmulti_localv6():
    remote_ip_private = remote_ip("/etc/sys1.sh")
    private_ip_private = private_genmulti("/etc/sys1.sh")
    ipsec_secret_private = ipsec_secret("/etc/ipsec.secrets")

    if not remote_ip_private or not private_ip_private or not ipsec_secret_private:
        print("Couldn't retrieve IP addresses or IPSec secret from files")
        return

    while True:
        os.system("clear")
        display_stuff_kharej(
            remote_ip_private, private_ip_private, ipsec_secret_private
        )

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mGeneve + IPSEC [5]Kharej [1]IRAN\033[93m IRAN Server 1 Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═════════════════════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej \033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mGeneve \033[93mPrivate IPV6 \033[0m")
        print("3. \033[93mChange IPSec Secret Key\033[0m")
        print("4. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "2":
            new_ip = input(
                "\033[93mEnter New Private IPV6 address \033[96m[Geneve]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mKharej\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "3":
            new_secret = input("\033[93mEnter new IPSec Secret Key :\033[0m ")
            if new_secret:
                ipsec_secret_private = new_secret
            else:
                print("\033[91mCrazy Secret Key\033[0m")
        elif choice == "4":
            save_stuff_gensec1(
                private_ip_private, remote_ip_private, ipsec_secret_private
            )
            update_ipsec_ip(private_ip_private)
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Please select a valid option.")


def genudpkharejone2sec_editmulti_localv6():
    remote_ip_private = remote_ip("/etc/sys2.sh")
    private_ip_private = private_genmulti("/etc/sys2.sh")
    ipsec_secret_private = ipsec_secret("/etc/ipsec.secrets")

    if not remote_ip_private or not private_ip_private or not ipsec_secret_private:
        print("Couldn't retrieve IP addresses or IPSec secret from files")
        return

    while True:
        os.system("clear")
        display_stuff_iran2(remote_ip_private, private_ip_private, ipsec_secret_private)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mGeneve [1]Kharej [5]IRAN\033[93m Kharej Menu\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN [2]\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mGeneve \033[93mPrivate IPV6 \033[0m")
        print("3. \033[93mChange IPSec Secret Key\033[0m")
        print("4. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "2":
            new_ip = input(
                "\033[93mEnter New Private IPV6 address \033[96m[Geneve]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mIRAN [2]\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "3":
            new_secret = input("\033[93mEnter new IPSec Secret Key :\033[0m ")
            if new_secret:
                ipsec_secret_private = new_secret
            else:
                print("\033[91mCrazy Secret Key\033[0m")
        elif choice == "4":
            save_stuff_gensec_iran2(
                private_ip_private, remote_ip_private, ipsec_secret_private
            )
            update_ipsec_ip_multi2(private_ip_private)
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Please select a valid option.")


def genudpiranfive2sec_editmulti_localv6():
    remote_ip_private = remote_ip("/etc/sys2.sh")
    private_ip_private = private_genmulti("/etc/sys2.sh")
    ipsec_secret_private = ipsec_secret("/etc/ipsec.secrets")

    if not remote_ip_private or not private_ip_private or not ipsec_secret_private:
        print("Couldn't retrieve IP addresses or IPSec secret from files")
        return

    while True:
        os.system("clear")
        display_stuff_kharej(
            remote_ip_private, private_ip_private, ipsec_secret_private
        )

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mGeneve + IPSEC [5]Kharej [1]IRAN\033[93m IRAN Server 2 Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═════════════════════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mGeneve \033[93mPrivate IPV6 \033[0m")
        print("3. \033[93mChange IPSec Secret Key\033[0m")
        print("4. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "2":
            new_ip = input(
                "\033[93mEnter New Private IPV6 address \033[96m[Geneve]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mKharej\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "3":
            new_secret = input("\033[93mEnter new IPSec Secret Key :\033[0m ")
            if new_secret:
                ipsec_secret_private = new_secret
            else:
                print("\033[91mCrazy Secret Key\033[0m")
        elif choice == "4":
            save_stuff_gensec2(
                private_ip_private, remote_ip_private, ipsec_secret_private
            )
            update_ipsec_ip(private_ip_private)
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Please select a valid option.")


def genudpkharejone3sec_editmulti_localv6():
    remote_ip_private = remote_ip("/etc/sys3.sh")
    private_ip_private = private_genmulti("/etc/sys3.sh")
    ipsec_secret_private = ipsec_secret("/etc/ipsec.secrets")

    if not remote_ip_private or not private_ip_private or not ipsec_secret_private:
        print("Couldn't retrieve IP addresses or IPSec secret from files")
        return

    while True:
        os.system("clear")
        display_stuff_iran3(remote_ip_private, private_ip_private, ipsec_secret_private)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mGeneve [1]Kharej [5]IRAN\033[93m Kharej Menu\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN [3]\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mGeneve \033[93mPrivate IPV6 \033[0m")
        print("3. \033[93mChange IPSec Secret Key\033[0m")
        print("4. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "2":
            new_ip = input(
                "\033[93mEnter New Private IPV6 address \033[96m[Geneve]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mIRAN [3]\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "3":
            new_secret = input("\033[93mEnter new IPSec Secret Key :\033[0m ")
            if new_secret:
                ipsec_secret_private = new_secret
            else:
                print("\033[91mCrazy Secret Key\033[0m")
        elif choice == "4":
            save_stuff_gensec_iran3(
                private_ip_private, remote_ip_private, ipsec_secret_private
            )
            update_ipsec_ip_multi3(private_ip_private)
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Please select a valid option.")


def genudpiranfive3sec_editmulti_localv6():
    remote_ip_private = remote_ip("/etc/sys3.sh")
    private_ip_private = private_genmulti("/etc/sys3.sh")
    ipsec_secret_private = ipsec_secret("/etc/ipsec.secrets")

    if not remote_ip_private or not private_ip_private or not ipsec_secret_private:
        print("Couldn't retrieve IP addresses or IPSec secret from files")
        return

    while True:
        os.system("clear")
        display_stuff_kharej(
            remote_ip_private, private_ip_private, ipsec_secret_private
        )

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mGeneve + IPSEC [5]Kharej [1]IRAN\033[93m IRAN Server 3 Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═════════════════════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mGeneve \033[93mPrivate IPV6 \033[0m")
        print("3. \033[93mChange IPSec Secret Key\033[0m")
        print("4. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "2":
            new_ip = input(
                "\033[93mEnter New Private IPV6 address \033[96m[Geneve]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mKharej\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "3":
            new_secret = input("\033[93mEnter new IPSec Secret Key :\033[0m ")
            if new_secret:
                ipsec_secret_private = new_secret
            else:
                print("\033[91mCrazy Secret Key\033[0m")
        elif choice == "4":
            save_stuff_gensec3(
                private_ip_private, remote_ip_private, ipsec_secret_private
            )
            update_ipsec_ip(private_ip_private)
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Please select a valid option.")


def ipsec_secret(name):
    try:
        with open(name, "r") as f:
            content = f.read()
        match = re.search(r'PSK "([^"]+)"', content)
        if match:
            return match.group(1)
        else:
            print("\033[91mno IPSec secret found\033[0m")
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")
    return None


def genudpkharejone4sec_editmulti_localv6():
    remote_ip_private = remote_ip("/etc/sys4.sh")
    private_ip_private = private_genmulti("/etc/sys4.sh")
    ipsec_secret_private = ipsec_secret("/etc/ipsec.secrets")

    if not remote_ip_private or not private_ip_private or not ipsec_secret_private:
        print("Couldn't retrieve IP addresses or IPSec secret from files")
        return

    while True:
        os.system("clear")
        display_stuff_iran4(remote_ip_private, private_ip_private, ipsec_secret_private)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mGeneve [1]Kharej [5]IRAN\033[93m Kharej Menu\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN [4]\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mGeneve \033[93mPrivate IPV6 \033[0m")
        print("3. \033[93mChange IPSec Secret Key\033[0m")
        print("4. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "2":
            new_ip = input(
                "\033[93mEnter New Private IPV6 address \033[96m[Geneve]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mIRAN [4]\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "3":
            new_secret = input("\033[93mEnter new IPSec Secret Key :\033[0m ")
            if new_secret:
                ipsec_secret_private = new_secret
            else:
                print("\033[91mCrazy Secret Key\033[0m")
        elif choice == "4":
            save_stuff_gensec_iran4(
                private_ip_private, remote_ip_private, ipsec_secret_private
            )
            update_ipsec_ip_multi4(private_ip_private)
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Please select a valid option.")


def genudpiranfive4sec_editmulti_localv6():
    remote_ip_private = remote_ip("/etc/sys4.sh")
    private_ip_private = private_genmulti("/etc/sys4.sh")
    ipsec_secret_private = ipsec_secret("/etc/ipsec.secrets")

    if not remote_ip_private or not private_ip_private or not ipsec_secret_private:
        print("Couldn't retrieve IP addresses or IPSec secret from files")
        return

    while True:
        os.system("clear")
        display_stuff_kharej(
            remote_ip_private, private_ip_private, ipsec_secret_private
        )

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mGeneve + IPSEC [5]Kharej [1]IRAN\033[93m IRAN Server 4 Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═════════════════════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mGeneve \033[93mPrivate IPV6 \033[0m")
        print("3. \033[93mChange IPSec Secret Key\033[0m")
        print("4. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "2":
            new_ip = input(
                "\033[93mEnter New Private IPV6 address \033[96m[Geneve]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mKharej\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "3":
            new_secret = input("\033[93mEnter new IPSec Secret Key :\033[0m ")
            if new_secret:
                ipsec_secret_private = new_secret
            else:
                print("\033[91mCrazy Secret Key\033[0m")
        elif choice == "4":
            save_stuff_gensec4(
                private_ip_private, remote_ip_private, ipsec_secret_private
            )
            update_ipsec_ip(private_ip_private)
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Please select a valid option.")


def genudpkharejone5sec_editmulti_localv6():
    remote_ip_private = remote_ip("/etc/sys5.sh")
    private_ip_private = private_genmulti("/etc/sys5.sh")
    ipsec_secret_private = ipsec_secret("/etc/ipsec.secrets")

    if not remote_ip_private or not private_ip_private or not ipsec_secret_private:
        print("Couldn't retrieve IP addresses or IPSec secret from files")
        return

    while True:
        os.system("clear")
        display_stuff_iran5(remote_ip_private, private_ip_private, ipsec_secret_private)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mGeneve [1]Kharej [5]IRAN\033[93m Kharej Menu\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN [5]\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mGeneve \033[93mPrivate IPV6 \033[0m")
        print("3. \033[93mChange IPSec Secret Key\033[0m")
        print("4. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "2":
            new_ip = input(
                "\033[93mEnter New Private IPV6 address \033[96m[Geneve]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mIRAN [5]\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "3":
            new_secret = input("\033[93mEnter new IPSec Secret Key :\033[0m ")
            if new_secret:
                ipsec_secret_private = new_secret
            else:
                print("\033[91mCrazy Secret Key\033[0m")
        elif choice == "4":
            save_stuff_gensec_iran5(
                private_ip_private, remote_ip_private, ipsec_secret_private
            )
            update_ipsec_ip_multi5(private_ip_private)
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Please select a valid option.")


def genudpiranfive5sec_editmulti_localv6():
    remote_ip_private = remote_ip("/etc/sys5.sh")
    private_ip_private = private_genmulti("/etc/sys5.sh")
    ipsec_secret_private = ipsec_secret("/etc/ipsec.secrets")

    if not remote_ip_private or not private_ip_private or not ipsec_secret_private:
        print("Couldn't retrieve IP addresses or IPSec secret from files")
        return

    while True:
        os.system("clear")
        display_stuff_kharej(
            remote_ip_private, private_ip_private, ipsec_secret_private
        )

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mGeneve + IPSEC [5]Kharej [1]IRAN\033[93m IRAN Server 5 Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═════════════════════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mGeneve \033[93mPrivate IPV6 \033[0m")
        print("3. \033[93mChange IPSec Secret Key\033[0m")
        print("4. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "2":
            new_ip = input(
                "\033[93mEnter New Private IPV6 address \033[96m[Geneve]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mKharej\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "3":
            new_secret = input("\033[93mEnter new IPSec Secret Key :\033[0m ")
            if new_secret:
                ipsec_secret_private = new_secret
            else:
                print("\033[91mCrazy Secret Key\033[0m")
        elif choice == "4":
            save_stuff_gensec5(
                private_ip_private, remote_ip_private, ipsec_secret_private
            )
            update_ipsec_ip(private_ip_private)
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Please select a valid option.")


def wtb_opposite_ipgen(ip):
    if ":" in ip:  # IPv6
        ip_parts = ip.split(":")
        ip_parts[-1] = "1" if ip_parts[-1] == "2" else "2"
        return ":".join(ip_parts)
    else:  # IPv4
        ip_parts = ip.split(".")
        ip_parts[-1] = "1" if ip_parts[-1] == "2" else "2"
        return ".".join(ip_parts)


def update_pingfilegen(name, new_ip):
    try:
        with open(name, "r") as f:
            content = f.read()

        new_content = re.sub(r'ip_address="[^"]+"', f'ip_address="{new_ip}"', content)

        with open(name, "w") as f:
            f.write(new_content)
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def gengre_multiedit_local():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print("\033[92m(   ) \033[92mEdit local\033[93m Geneve GRE6 Menu\033[0m")
    print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[92mNo IPSEC\033[0m")
    print("2. \033[93mWith IPSEC\033[0m")
    print("3. \033[94mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        choice = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if choice == "1":
            gengrenosec_multiedit_local()
            break
        elif choice == "2":
            gengresec_multiedit_local()
            break
        elif choice == "3":
            clear()
            multi_edit_local()
            break
        else:
            print("Invalid choice.")


def gengrenosec_multiedit_local():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print("\033[92m(   ) \033[92mEdit local\033[93m Geneve Gre6 Menu\033[0m")
    print('\033[92m "-"\033[93m═════════════════════════════════════════════\033[0m')
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[96mKharej\033[92m[5] \033[93mIRAN\033[92m[1]\033[0m")
    print("2. \033[96mKharej\033[92m[1] \033[93mIRAN\033[92m[5]  \033[0m")
    print("3. \033[94mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        choice = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if choice == "1":
            gengrenosec_edit_localkharej_multi()
            break
        elif choice == "2":
            gengrenosec_edit_localiran_multi()
            break
        elif choice == "3":
            clear()
            gengre_multiedit_local()
            break
        else:
            print("Invalid choice.")


def gengrenosec_edit_localiran_multi():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print(
        "\033[92m(   ) \033[93mGeneve GRE6 \033[92m[5]IRAN\033[96m [1]Kharej\033[93m Menu\033[0m"
    )
    print(
        '\033[92m "-"\033[93m══════════════════════════════════════════════════════════\033[0m'
    )
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[92mIRAN[1]\033[0m")
    print("2. \033[92mIRAN[2]\033[0m")
    print("3. \033[93mIRAN[3]\033[0m")
    print("4. \033[92mIRAN[4]\033[0m")
    print("5. \033[92mIRAN[5]\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    print("6. \033[93mKharej Menu\033[0m")
    print("0. \033[94mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if server_type == "1":
            gengreiranfive1nosec_editmulti_local()
            break
        elif server_type == "2":
            gengreiranfive2nosec_editmulti_local()
            break
        elif server_type == "3":
            gengreiranfive3nosec_editmulti_local()
            break
        elif server_type == "4":
            gengreiranfive4nosec_editmulti_local()
            break
        elif server_type == "5":
            gengreiranfive5nosec_editmulti_local()
            break
        elif server_type == "6":
            gengrekharejonenosec_editmulti_localmenu()
            break
        elif server_type == "0":
            os.system("clear")
            gengrenosec_multiedit_local()
            break
        else:
            print("Invalid choice.")


def gengrekharejonenosec_editmulti_localmenu():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print(
        "\033[92m(   ) \033[93mGenve GRE6 \033[92m[5]IRAN\033[96m [1]Kharej\033[93m Menu\033[0m"
    )
    print(
        '\033[92m "-"\033[93m══════════════════════════════════════════════════════════\033[0m'
    )
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mThis is Kharej menu:\033[0m")
    print("1. \033[92mServer[1]\033[0m")
    print("2. \033[92mServer[2]\033[0m")
    print("3. \033[93mServer[3]\033[0m")
    print("4. \033[92mServer[4]\033[0m")
    print("5. \033[92mServer[5]\033[0m")
    print("0. \033[94mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if server_type == "1":
            gengrekharejone1nosec_editmulti_local()
            break
        elif server_type == "2":
            gengrekharejone2nosec_editmulti_local()
            break
        elif server_type == "3":
            gengrekharejone3nosec_editmulti_local()
            break
        elif server_type == "4":
            gengrekharejone4nosec_editmulti_local()
            break
        elif server_type == "5":
            gengrekharejone5nosec_editmulti_local()
            break
        elif server_type == "0":
            os.system("clear")
            gengrenosec_multiedit_local()
            break
        else:
            print("Invalid choice.")


def gengrenosec_edit_localkharej_multi():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print(
        "\033[92m(   ) \033[93mGeneve GRE6 \033[92m[5]Kharej\033[96m [1]IRAN\033[93m Menu\033[0m"
    )
    print(
        '\033[92m "-"\033[93m══════════════════════════════════════════════════════════\033[0m'
    )
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[92mKharej[1]\033[0m")
    print("2. \033[92mKharej[2]\033[0m")
    print("3. \033[93mKharej[3]\033[0m")
    print("4. \033[92mKharej[4]\033[0m")
    print("5. \033[92mKharej[5]\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    print("6.\033[93mIRAN Menu\033[0m")
    print("0. \033[94mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if server_type == "1":
            gengrekharej1nosec_editmulti_local()
            break
        elif server_type == "2":
            gengrekharej2nosec_editmulti_local()
            break
        elif server_type == "3":
            gengrekharej3nosec_editmulti_local()
            break
        elif server_type == "4":
            gengrekharej4nosec_editmulti_local()
            break
        elif server_type == "5":
            gengrekharej5nosec_editmulti_local()
            break
        elif server_type == "6":
            gengreirannosec_editmulti_local()
            break
        elif server_type == "0":
            os.system("clear")
            gengrenosec_multiedit_local()
            break
        else:
            print("Invalid choice.")


def gengreirannosec_editmulti_local():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print(
        "\033[92m(   ) \033[93mGeneve GRE6 \033[92m[5]Kharej\033[96m [1]IRAN\033[93m Menu\033[0m"
    )
    print(
        '\033[92m "-"\033[93m══════════════════════════════════════════════════════════\033[0m'
    )
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mThis is IRAN menu:\033[0m")
    print("1. \033[92mServer[1]\033[0m")
    print("2. \033[92mServer[2]\033[0m")
    print("3. \033[93mServer[3]\033[0m")
    print("4. \033[92mServer[4]\033[0m")
    print("5. \033[92mServer[5]\033[0m")
    print("0. \033[94mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if server_type == "1":
            gengreir1nosec_editmulti_local()
            break
        elif server_type == "2":
            gengreir2nosec_editmulti_local()
            break
        elif server_type == "3":
            gengreir3nosec_editmulti_local()
            break
        elif server_type == "4":
            gengreir4nosec_editmulti_local()
            break
        elif server_type == "5":
            gengreir5nosec_editmulti_local()
            break
        elif server_type == "0":
            os.system("clear")
            gengrenosec_multiedit_local()
            break
        else:
            print("Invalid choice.")


def update_pingfile_gengrenosec(name, ip, update_type):
    try:
        with open(name, "r") as f:
            content = f.read()

        if update_type == "geneve":
            new_content = re.sub(r"remote \S+", f"remote {ip}", content)
        elif update_type == "geneve_opposite":
            opposite_ip = wtb_opposite_ip_gengrenosec(ip)
            new_content = re.sub(r"remote \S+", f"remote {opposite_ip}", content)
        elif update_type == "ping_ip":
            new_content = re.sub(r'ip_address="[^"]+"', f'ip_address="{ip}"', content)
        elif update_type == "ping_v6":
            new_content = re.sub(r'ip_address="[^"]+"', f'ip_address="{ip}"', content)
        elif update_type == "ping_sys_opposite":
            new_content = re.sub(r'ip_address="[^"]+"', f'ip_address="{ip}"', content)
        else:
            print("\033[91mInvalid update type for pingfile\033[0m")
            return

        with open(name, "w") as f:
            f.write(new_content)
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def wtb_opposite_ip_gengrenosec(ip):
    ip_parts = ip.split(":")
    if ip.endswith(":1"):
        ip_parts[-1] = "2"
    else:
        ip_parts[-1] = "1"
    return ":".join(ip_parts)


def update_ipsecsecret(name, new_key):
    try:
        with open(name, "r") as f:
            content = f.read()

        new_content = re.sub(r'PSK ".*"', f'PSK "{new_key}"', content)

        with open(name, "w") as f:
            f.write(new_content)
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


# server 1
def get_current_private_ipsgregen1():
    private_ip_private = private_ip1("/etc/private1.sh")
    private_ip_gre6 = private_gre6multi("/etc/gre61.sh")
    private_ip_geneve = private_genmulti("/etc/sys1.sh")
    return {
        "private": private_ip_private,
        "gre6": private_ip_gre6,
        "geneve": private_ip_geneve,
    }


def update_ipfilegengre_nosec1(name, new_ip, update_type):
    try:
        with open(name, "r") as f:
            content = f.read()

        if update_type == "private":
            new_content = re.sub(
                r"ip (-6 )?addr add [^ ]+/64 dev azumi?",
                f"ip -6 addr add {new_ip}/64 dev azumi",
                content,
            )
            ip_parts = new_ip.split(":")
            if new_ip.endswith(":2"):
                ip_parts[-1] = "1"
            else:
                ip_parts[-1] = "2"
            counterpart_ip = ":".join(ip_parts)
            new_content = re.sub(
                r"ip (-6 )?route add [^ ]+/64 dev azumi?",
                f"ip -6 route add {counterpart_ip}/64 dev azumi",
                new_content,
            )

            update_ipfilegengre_nosec1(
                "/etc/gre61.sh", new_ip, update_type="gre6_local"
            )
            update_ipfilegengre_nosec1(
                "/etc/gre61.sh", counterpart_ip, update_type="gre6_remote"
            )
        elif update_type == "local":
            new_content = re.sub(r"local \S+", f"local {new_ip}", content)
        elif update_type == "remote":
            new_content = re.sub(r"remote \S+", f"remote {new_ip}", content)
        elif update_type == "gre6_local":
            new_content = re.sub(r"local \S+", f"local {new_ip}", content)
        elif update_type == "gre6_remote":
            new_content = re.sub(r"remote \S+", f"remote {new_ip}", content)
        elif update_type == "geneve_remote":
            new_content = re.sub(r"remote \S+", f"remote {new_ip}", content)
        elif update_type == "geneve_private":
            new_content = re.sub(
                r"ip addr add \S+/64 dev azumigen?",
                f"ip addr add {new_ip}/64 dev azumigen",
                content,
            )
            counterpart_ip = wtb_opposite_ip_gengrenosec(new_ip)
            new_content = re.sub(
                r"ip route add \S+/64 dev azumigen?",
                f"ip route add {counterpart_ip}/64 dev azumigen",
                new_content,
            )

        with open(name, "w") as f:
            f.write(new_content)
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def save_stuff_gengrenosec1(
    new_private_ip, local_ip, remote_ip, is_gre6, is_geneve=False
):
    current_ips = get_current_private_ipsgregen1()

    if is_gre6:
        current_ip = current_ips["gre6"]
    elif is_geneve:
        current_ip = current_ips["geneve"]
    else:
        current_ip = current_ips["private"]

    if current_ip:
        delete_ufw_rules(current_ip)

    add_ufw_rules(new_private_ip)

    counterpart_ip = wtb_opposite_ip_gengrenosec(new_private_ip)

    try:
        if is_gre6:
            update_pingfile_gengrenosec(
                "/etc/ping_ip1.sh", counterpart_ip, update_type="ping_ip"
            )
            update_ipfilegengre_nosec1(
                "/etc/gre61.sh", new_private_ip, update_type="private"
            )
            update_ipfilegengre_nosec1("/etc/gre61.sh", remote_ip, update_type="remote")
            update_ipfilegengre_nosec1(
                "/etc/sys1.sh", counterpart_ip, update_type="geneve_remote"
            )
            update_pingfile_gengrenosec(
                "/etc/ping1_sys.sh", remote_ip, update_type="geneve"
            )
            update_pingfile_gengrenosec(
                "/etc/ping1_sys.sh", counterpart_ip, update_type="geneve_opposite"
            )
        elif is_geneve:
            update_ipfilegengre_nosec1(
                "/etc/sys1.sh", new_private_ip, update_type="geneve_private"
            )
            update_pingfile_gengrenosec(
                "/etc/ping1_sys.sh", counterpart_ip, update_type="ping_sys_opposite"
            )
        else:
            update_pingfile_gengrenosec(
                "/etc/ping_v61.sh", counterpart_ip, update_type="ping_v6"
            )
            update_ipfilegengre_nosec1(
                "/etc/private1.sh", new_private_ip, update_type="private"
            )
            update_ipfilegengre_nosec1(
                "/etc/private1.sh", local_ip, update_type="local"
            )
            update_ipfilegengre_nosec1(
                "/etc/private1.sh", remote_ip, update_type="remote"
            )
            update_ipfilegengre_nosec1(
                "/etc/gre61.sh", counterpart_ip, update_type="gre6_remote"
            )
            update_pingfile_gengrenosec(
                "/etc/ping1_sys.sh", counterpart_ip, update_type="ping_sys_opposite"
            )

        interface = "azumig61" if is_gre6 else "azumi1"
        if is_geneve:
            interface = "azumigen1"
        try:
            subprocess.run(["ip", "link", "set", "dev", interface, "down"], check=True)
            subprocess.run(["ip", "link", "delete", interface], check=True)
        except subprocess.CalledProcessError:
            print("\033[91merror bringing interface down or deleting it\033[0m")

        script = "/etc/gre61.sh" if is_gre6 else "/etc/private1.sh"
        if is_geneve:
            script = "/etc/sys1.sh"
        result = subprocess.run(["/bin/bash", script], capture_output=True, text=True)
        if "RTNETLINK answers: File exists" in result.stderr:
            print("\033[91madditional ip already exists. Ignoring this error\033[0m")
        else:
            result.check_returncode()
        subprocess.run(["sudo", "systemctl", "daemon-reload"], check=True)

        try:
            subprocess.run(["systemctl", "restart", "ping_v61"], check=True)
            display_checkmark("\033[92mping_v61 service restarted successfully!\033[0m")
        except subprocess.CalledProcessError as e:
            if "Unit ping_v61 not found" in (e.stderr or ""):
                print("\033[91mcouldn't restart ping_v61\033[0m")

        try:
            subprocess.run(["sudo", "systemctl", "restart", "ping1_gen"], check=True)
            display_checkmark(
                "\033[92mSystem services reloaded and restarted successfully!\033[0m"
            )
        except subprocess.CalledProcessError as e:
            if "Unit ping1_gen.service not found" in (e.stderr or ""):
                print("\033[91mcouldn't restart ping1_gen\033[0m")

        try:
            subprocess.run(["sudo", "systemctl", "restart", "ping_ip1"], check=True)
            display_checkmark("\033[92mping_ip1 service restarted successfully!\033[0m")
        except subprocess.CalledProcessError as e:
            if "Unit ping_ip1 not found" in (e.stderr or ""):
                print("\033[91mcouldn't restart ping_ip\033[0m")

        display_checkmark(
            f"\033[92mChanges saved and {interface} interface updated successfully!\033[0m"
        )
    except subprocess.CalledProcessError:
        print("\033[91merror in applying network changes: don't mind this error\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def gengreir1nosec_editmulti_local():
    local_ip_private = local_ip("/etc/private1.sh")
    remote_ip_private = remote_ip("/etc/private1.sh")
    private_ip_private = private_ip1("/etc/private1.sh")

    local_ip_gre6 = local_ip("/etc/gre61.sh")
    remote_ip_gre6 = remote_ip("/etc/gre61.sh")
    private_ip_gre6 = private_gre6multi("/etc/gre61.sh")

    remote_ip_geneve = remote_ip("/etc/sys1.sh")
    private_ip_geneve = private_genmulti("/etc/sys1.sh")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("couldn't retrieve IP addresses from private file")
    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("couldn't retrieve IP addresses from gre6 file")
    if not remote_ip_geneve or not private_ip_geneve:
        print("couldn't retrieve IP addresses from geneve file")

    if (
        not local_ip_private
        or not remote_ip_private
        or not private_ip_private
        or not local_ip_gre6
        or not remote_ip_gre6
        or not private_ip_gre6
        or not remote_ip_geneve
        or not private_ip_geneve
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_privateiran1(
            local_ip_private, remote_ip_private, private_ip_private
        )
        display_stuff_gre6(local_ip_gre6, remote_ip_gre6, private_ip_gre6)
        display_stuff_geneve_greiran(remote_ip_geneve, private_ip_geneve)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mGeneve GRE6\033[93m IRAN Menu\033[0m")
        print('\033[92m "-"\033[93m═══════════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN \033[92m IPV4\033[0m")
        print("2. \033[93mChange \033[97mKharej [1] \033[92m IPV4\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[93mChange \033[97mGRE6 \033[93mPrivate IPV6\033[0m")
        print("5. \033[93mChange \033[97mGeneve \033[93mPrivate IPV6\033[0m")
        print("6. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to edit local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_private = new_ip
                ip_parts = new_ip.split(":")
                if new_ip.endswith(":2"):
                    ip_parts[-1] = "1"
                else:
                    ip_parts[-1] = "2"
                counterpart_ip = ":".join(ip_parts)
                local_ip_gre6 = new_ip
                remote_ip_gre6 = counterpart_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[GRE6]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_gre6 = new_ip
                remote_ip_geneve = wtb_opposite_ip_gengrenosec(new_ip)
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "5":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[Geneve]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_geneve = new_ip
                save_stuff_gengrenosec1(
                    private_ip_geneve,
                    None,
                    remote_ip_geneve,
                    is_gre6=False,
                    is_geneve=True,
                )
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mIRAN\033[93m Public IP :\033[0m ")
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mKharej [1]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "6":
            save_stuff_gengrenosec1(
                private_ip_private, local_ip_private, remote_ip_private, is_gre6=False
            )
            save_stuff_gengrenosec1(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            save_stuff_gengrenosec1(
                private_ip_geneve, None, remote_ip_geneve, is_gre6=False, is_geneve=True
            )
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Invalid choice. Please select a valid option.")


def gengrekharej1nosec_editmulti_local():
    local_ip_private = local_ip("/etc/private1.sh")
    remote_ip_private = remote_ip("/etc/private1.sh")
    private_ip_private = private_ip1("/etc/private1.sh")

    local_ip_gre6 = local_ip("/etc/gre61.sh")
    remote_ip_gre6 = remote_ip("/etc/gre61.sh")
    private_ip_gre6 = private_gre6multi("/etc/gre61.sh")

    remote_ip_geneve = remote_ip("/etc/sys1.sh")
    private_ip_geneve = private_genmulti("/etc/sys1.sh")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("couldn't retrieve IP addresses from private file")
    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("couldn't retrieve IP addresses from gre6 file")
    if not remote_ip_geneve or not private_ip_geneve:
        print("couldn't retrieve IP addresses from geneve file")

    if (
        not local_ip_private
        or not remote_ip_private
        or not private_ip_private
        or not local_ip_gre6
        or not remote_ip_gre6
        or not private_ip_gre6
        or not remote_ip_geneve
        or not private_ip_geneve
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_privatekharej1(
            local_ip_private, remote_ip_private, private_ip_private
        )
        display_stuff_gre6(local_ip_gre6, remote_ip_gre6, private_ip_gre6)
        display_stuff_geneve_greiran(remote_ip_geneve, private_ip_geneve)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mGeneve GRE6\033[93m Kharej [1] Menu\033[0m")
        print('\033[92m "-"\033[93m═══════════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej [1] \033[92m IPV4\033[0m")
        print("2. \033[93mChange \033[97mIRAN \033[92m IPV4\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[93mChange \033[97mGRE6 \033[93mPrivate IPV6\033[0m")
        print("5. \033[93mChange \033[97mGeneve \033[93mPrivate IPV6\033[0m")
        print("6. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to edit local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_private = new_ip
                ip_parts = new_ip.split(":")
                if new_ip.endswith(":2"):
                    ip_parts[-1] = "1"
                else:
                    ip_parts[-1] = "2"
                counterpart_ip = ":".join(ip_parts)
                local_ip_gre6 = new_ip
                remote_ip_gre6 = counterpart_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[GRE6]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_gre6 = new_ip
                remote_ip_geneve = wtb_opposite_ipgregen(new_ip)
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "5":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[Geneve]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_geneve = new_ip
                save_stuff_gengrenosec1(
                    private_ip_geneve,
                    None,
                    remote_ip_geneve,
                    is_gre6=False,
                    is_geneve=True,
                )
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mKharej [1]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input("\033[93mEnter \033[92mIRAN\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "6":
            save_stuff_gengrenosec1(
                private_ip_private, local_ip_private, remote_ip_private, is_gre6=False
            )
            save_stuff_gengrenosec1(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            save_stuff_gengrenosec1(
                private_ip_geneve, None, remote_ip_geneve, is_gre6=False, is_geneve=True
            )
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Invalid choice. Please select a valid option.")


# server 2
def get_current_private_ipsgregen2():
    private_ip_private = private_ip1("/etc/private2.sh")
    private_ip_gre6 = private_gre6multi("/etc/gre62.sh")
    private_ip_geneve = private_genmulti("/etc/sys2.sh")
    return {
        "private": private_ip_private,
        "gre6": private_ip_gre6,
        "geneve": private_ip_geneve,
    }


def update_ipfilegengre_nosec2(name, new_ip, update_type):
    try:
        with open(name, "r") as f:
            content = f.read()

        if update_type == "private":
            new_content = re.sub(
                r"ip (-6 )?addr add [^ ]+/64 dev azumi?",
                f"ip -6 addr add {new_ip}/64 dev azumi",
                content,
            )
            ip_parts = new_ip.split(":")
            if new_ip.endswith(":2"):
                ip_parts[-1] = "1"
            else:
                ip_parts[-1] = "2"
            counterpart_ip = ":".join(ip_parts)
            new_content = re.sub(
                r"ip (-6 )?route add [^ ]+/64 dev azumi?",
                f"ip -6 route add {counterpart_ip}/64 dev azumi",
                new_content,
            )

            update_ipfilegengre_nosec2(
                "/etc/gre62.sh", new_ip, update_type="gre6_local"
            )
            update_ipfilegengre_nosec2(
                "/etc/gre62.sh", counterpart_ip, update_type="gre6_remote"
            )
        elif update_type == "local":
            new_content = re.sub(r"local \S+", f"local {new_ip}", content)
        elif update_type == "remote":
            new_content = re.sub(r"remote \S+", f"remote {new_ip}", content)
        elif update_type == "gre6_local":
            new_content = re.sub(r"local \S+", f"local {new_ip}", content)
        elif update_type == "gre6_remote":
            new_content = re.sub(r"remote \S+", f"remote {new_ip}", content)
        elif update_type == "geneve_remote":
            new_content = re.sub(r"remote \S+", f"remote {new_ip}", content)
        elif update_type == "geneve_private":
            new_content = re.sub(
                r"ip addr add \S+/64 dev azumigen?",
                f"ip addr add {new_ip}/64 dev azumigen",
                content,
            )
            counterpart_ip = wtb_opposite_ip_gengrenosec(new_ip)
            new_content = re.sub(
                r"ip route add \S+/64 dev azumigen?",
                f"ip route add {counterpart_ip}/64 dev azumigen",
                new_content,
            )

        with open(name, "w") as f:
            f.write(new_content)
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def save_stuff_gengrenosec2(
    new_private_ip, local_ip, remote_ip, is_gre6, is_geneve=False
):
    current_ips = get_current_private_ipsgregen2()

    if is_gre6:
        current_ip = current_ips["gre6"]
    elif is_geneve:
        current_ip = current_ips["geneve"]
    else:
        current_ip = current_ips["private"]

    if current_ip:
        delete_ufw_rules(current_ip)

    add_ufw_rules(new_private_ip)

    counterpart_ip = wtb_opposite_ip_gengrenosec(new_private_ip)

    try:
        if is_gre6:
            update_pingfile_gengrenosec(
                "/etc/ping_ip2.sh", counterpart_ip, update_type="ping_ip"
            )
            update_ipfilegengre_nosec2(
                "/etc/gre62.sh", new_private_ip, update_type="private"
            )
            update_ipfilegengre_nosec2("/etc/gre62.sh", remote_ip, update_type="remote")
            update_ipfilegengre_nosec2(
                "/etc/sys2.sh", counterpart_ip, update_type="geneve_remote"
            )
            update_pingfile_gengrenosec(
                "/etc/ping2_sys.sh", remote_ip, update_type="geneve"
            )
            update_pingfile_gengrenosec(
                "/etc/ping2_sys.sh", counterpart_ip, update_type="geneve_opposite"
            )
        elif is_geneve:
            update_ipfilegengre_nosec2(
                "/etc/sys2.sh", new_private_ip, update_type="geneve_private"
            )
            update_pingfile_gengrenosec(
                "/etc/ping2_sys.sh", counterpart_ip, update_type="ping_sys_opposite"
            )
        else:
            update_pingfile_gengrenosec(
                "/etc/ping_v62.sh", counterpart_ip, update_type="ping_v6"
            )
            update_ipfilegengre_nosec2(
                "/etc/private2.sh", new_private_ip, update_type="private"
            )
            update_ipfilegengre_nosec2(
                "/etc/private2.sh", local_ip, update_type="local"
            )
            update_ipfilegengre_nosec2(
                "/etc/private2.sh", remote_ip, update_type="remote"
            )
            update_ipfilegengre_nosec2(
                "/etc/gre62.sh", counterpart_ip, update_type="gre6_remote"
            )
            update_pingfile_gengrenosec(
                "/etc/ping2_sys.sh", counterpart_ip, update_type="ping_sys_opposite"
            )

        interface = "azumig62" if is_gre6 else "azumi2"
        if is_geneve:
            interface = "azumigen2"
        try:
            subprocess.run(["ip", "link", "set", "dev", interface, "down"], check=True)
            subprocess.run(["ip", "link", "delete", interface], check=True)
        except subprocess.CalledProcessError:
            print("\033[91merror bringing interface down or deleting it\033[0m")

        script = "/etc/gre62.sh" if is_gre6 else "/etc/private2.sh"
        if is_geneve:
            script = "/etc/sys2.sh"
        result = subprocess.run(["/bin/bash", script], capture_output=True, text=True)
        if "RTNETLINK answers: File exists" in result.stderr:
            print("\033[91madditional ip already exists. Ignoring this error\033[0m")
        else:
            result.check_returncode()
        subprocess.run(["sudo", "systemctl", "daemon-reload"], check=True)

        try:
            subprocess.run(["systemctl", "restart", "ping_v62"], check=True)
            display_checkmark("\033[92mping_v62 service restarted successfully!\033[0m")
        except subprocess.CalledProcessError as e:
            if "Unit ping_v62 not found" in (e.stderr or ""):
                print("\033[91mcouldn't restart ping_v62\033[0m")

        try:
            subprocess.run(["sudo", "systemctl", "restart", "ping2_gen"], check=True)
            display_checkmark(
                "\033[92mSystem services reloaded and restarted successfully!\033[0m"
            )
        except subprocess.CalledProcessError as e:
            if "Unit ping2_gen.service not found" in (e.stderr or ""):
                print("\033[91mcouldn't restart ping2_gen\033[0m")

        try:
            subprocess.run(["sudo", "systemctl", "restart", "ping_ip2"], check=True)
            display_checkmark("\033[92mping_ip2 service restarted successfully!\033[0m")
        except subprocess.CalledProcessError as e:
            if "Unit ping_ip2 not found" in (e.stderr or ""):
                print("\033[91mcouldn't restart ping_ip2\033[0m")

        display_checkmark(
            f"\033[92mChanges saved and {interface} interface updated successfully!\033[0m"
        )
    except subprocess.CalledProcessError:
        print("\033[91merror in applying network changes: don't mind this error\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def gengreir2nosec_editmulti_local():
    local_ip_private = local_ip("/etc/private2.sh")
    remote_ip_private = remote_ip("/etc/private2.sh")
    private_ip_private = private_ip1("/etc/private2.sh")

    local_ip_gre6 = local_ip("/etc/gre62.sh")
    remote_ip_gre6 = remote_ip("/etc/gre62.sh")
    private_ip_gre6 = private_gre6multi("/etc/gre62.sh")

    remote_ip_geneve = remote_ip("/etc/sys2.sh")
    private_ip_geneve = private_genmulti("/etc/sys2.sh")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("couldn't retrieve IP addresses from private file")
    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("couldn't retrieve IP addresses from gre6 file")
    if not remote_ip_geneve or not private_ip_geneve:
        print("couldn't retrieve IP addresses from geneve file")

    if (
        not local_ip_private
        or not remote_ip_private
        or not private_ip_private
        or not local_ip_gre6
        or not remote_ip_gre6
        or not private_ip_gre6
        or not remote_ip_geneve
        or not private_ip_geneve
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_privateiran2(
            local_ip_private, remote_ip_private, private_ip_private
        )
        display_stuff_gre6(local_ip_gre6, remote_ip_gre6, private_ip_gre6)
        display_stuff_geneve_greiran(remote_ip_geneve, private_ip_geneve)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mGeneve GRE6\033[93m IRAN Menu\033[0m")
        print('\033[92m "-"\033[93m═══════════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN \033[92m IPV4\033[0m")
        print("2. \033[93mChange \033[97mKharej [2] \033[92m IPV4\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[93mChange \033[97mGRE6 \033[93mPrivate IPV6\033[0m")
        print("5. \033[93mChange \033[97mGeneve \033[93mPrivate IPV6\033[0m")
        print("6. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to edit local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_private = new_ip
                ip_parts = new_ip.split(":")
                if new_ip.endswith(":2"):
                    ip_parts[-1] = "1"
                else:
                    ip_parts[-1] = "2"
                counterpart_ip = ":".join(ip_parts)
                local_ip_gre6 = new_ip
                remote_ip_gre6 = counterpart_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[GRE6]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_gre6 = new_ip
                remote_ip_geneve = wtb_opposite_ip_gengrenosec(new_ip)
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "5":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[Geneve]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_geneve = new_ip
                save_stuff_gengrenosec2(
                    private_ip_geneve,
                    None,
                    remote_ip_geneve,
                    is_gre6=False,
                    is_geneve=True,
                )
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mIRAN\033[93m Public IP :\033[0m ")
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mKharej [2]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "6":
            save_stuff_gengrenosec2(
                private_ip_private, local_ip_private, remote_ip_private, is_gre6=False
            )
            save_stuff_gengrenosec2(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            save_stuff_gengrenosec2(
                private_ip_geneve, None, remote_ip_geneve, is_gre6=False, is_geneve=True
            )
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Invalid choice. Please select a valid option.")


def gengrekharej2nosec_editmulti_local():
    local_ip_private = local_ip("/etc/private2.sh")
    remote_ip_private = remote_ip("/etc/private2.sh")
    private_ip_private = private_ip1("/etc/private2.sh")

    local_ip_gre6 = local_ip("/etc/gre62.sh")
    remote_ip_gre6 = remote_ip("/etc/gre62.sh")
    private_ip_gre6 = private_gre6multi("/etc/gre62.sh")

    remote_ip_geneve = remote_ip("/etc/sys2.sh")
    private_ip_geneve = private_genmulti("/etc/sys2.sh")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("couldn't retrieve IP addresses from private file")
    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("couldn't retrieve IP addresses from gre6 file")
    if not remote_ip_geneve or not private_ip_geneve:
        print("couldn't retrieve IP addresses from geneve file")

    if (
        not local_ip_private
        or not remote_ip_private
        or not private_ip_private
        or not local_ip_gre6
        or not remote_ip_gre6
        or not private_ip_gre6
        or not remote_ip_geneve
        or not private_ip_geneve
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_privatekharej2(
            local_ip_private, remote_ip_private, private_ip_private
        )
        display_stuff_gre6(local_ip_gre6, remote_ip_gre6, private_ip_gre6)
        display_stuff_geneve_greiran(remote_ip_geneve, private_ip_geneve)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mGeneve GRE6\033[93m Kharej [2] Menu\033[0m")
        print('\033[92m "-"\033[93m═══════════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej [2] \033[92m IPV4\033[0m")
        print("2. \033[93mChange \033[97mIRAN \033[92m IPV4\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[93mChange \033[97mGRE6 \033[93mPrivate IPV6\033[0m")
        print("5. \033[93mChange \033[97mGeneve \033[93mPrivate IPV6\033[0m")
        print("6. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to edit local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_private = new_ip
                ip_parts = new_ip.split(":")
                if new_ip.endswith(":2"):
                    ip_parts[-1] = "1"
                else:
                    ip_parts[-1] = "2"
                counterpart_ip = ":".join(ip_parts)
                local_ip_gre6 = new_ip
                remote_ip_gre6 = counterpart_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[GRE6]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_gre6 = new_ip
                remote_ip_geneve = wtb_opposite_ipgregen(new_ip)
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "5":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[Geneve]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_geneve = new_ip
                save_stuff_gengrenosec2(
                    private_ip_geneve,
                    None,
                    remote_ip_geneve,
                    is_gre6=False,
                    is_geneve=True,
                )
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mKharej [2]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input("\033[93mEnter \033[92mIRAN\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "6":
            save_stuff_gengrenosec2(
                private_ip_private, local_ip_private, remote_ip_private, is_gre6=False
            )
            save_stuff_gengrenosec2(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            save_stuff_gengrenosec2(
                private_ip_geneve, None, remote_ip_geneve, is_gre6=False, is_geneve=True
            )
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Invalid choice. Please select a valid option.")


# server 3
def get_current_private_ipsgregen3():
    private_ip_private = private_ip1("/etc/private3.sh")
    private_ip_gre6 = private_gre6multi("/etc/gre63.sh")
    private_ip_geneve = private_genmulti("/etc/sys3.sh")
    return {
        "private": private_ip_private,
        "gre6": private_ip_gre6,
        "geneve": private_ip_geneve,
    }


def update_ipfilegengre_nosec3(name, new_ip, update_type):
    try:
        with open(name, "r") as f:
            content = f.read()

        if update_type == "private":
            new_content = re.sub(
                r"ip (-6 )?addr add [^ ]+/64 dev azumi?",
                f"ip -6 addr add {new_ip}/64 dev azumi",
                content,
            )
            ip_parts = new_ip.split(":")
            if new_ip.endswith(":2"):
                ip_parts[-1] = "1"
            else:
                ip_parts[-1] = "2"
            counterpart_ip = ":".join(ip_parts)
            new_content = re.sub(
                r"ip (-6 )?route add [^ ]+/64 dev azumi?",
                f"ip -6 route add {counterpart_ip}/64 dev azumi",
                new_content,
            )

            update_ipfilegengre_nosec3(
                "/etc/gre63.sh", new_ip, update_type="gre6_local"
            )
            update_ipfilegengre_nosec3(
                "/etc/gre63.sh", counterpart_ip, update_type="gre6_remote"
            )
        elif update_type == "local":
            new_content = re.sub(r"local \S+", f"local {new_ip}", content)
        elif update_type == "remote":
            new_content = re.sub(r"remote \S+", f"remote {new_ip}", content)
        elif update_type == "gre6_local":
            new_content = re.sub(r"local \S+", f"local {new_ip}", content)
        elif update_type == "gre6_remote":
            new_content = re.sub(r"remote \S+", f"remote {new_ip}", content)
        elif update_type == "geneve_remote":
            new_content = re.sub(r"remote \S+", f"remote {new_ip}", content)
        elif update_type == "geneve_private":
            new_content = re.sub(
                r"ip addr add \S+/64 dev azumigen?",
                f"ip addr add {new_ip}/64 dev azumigen",
                content,
            )
            counterpart_ip = wtb_opposite_ip_gengrenosec(new_ip)
            new_content = re.sub(
                r"ip route add \S+/64 dev azumigen?",
                f"ip route add {counterpart_ip}/64 dev azumigen",
                new_content,
            )

        with open(name, "w") as f:
            f.write(new_content)
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def save_stuff_gengrenosec3(
    new_private_ip, local_ip, remote_ip, is_gre6, is_geneve=False
):
    current_ips = get_current_private_ipsgregen3()

    if is_gre6:
        current_ip = current_ips["gre6"]
    elif is_geneve:
        current_ip = current_ips["geneve"]
    else:
        current_ip = current_ips["private"]

    if current_ip:
        delete_ufw_rules(current_ip)

    add_ufw_rules(new_private_ip)

    counterpart_ip = wtb_opposite_ip_gengrenosec(new_private_ip)

    try:
        if is_gre6:
            update_pingfile_gengrenosec(
                "/etc/ping_ip3.sh", counterpart_ip, update_type="ping_ip"
            )
            update_ipfilegengre_nosec3(
                "/etc/gre63.sh", new_private_ip, update_type="private"
            )
            update_ipfilegengre_nosec3("/etc/gre63.sh", remote_ip, update_type="remote")
            update_ipfilegengre_nosec3(
                "/etc/sys3.sh", counterpart_ip, update_type="geneve_remote"
            )
            update_pingfile_gengrenosec(
                "/etc/ping3_sys.sh", remote_ip, update_type="geneve"
            )
            update_pingfile_gengrenosec(
                "/etc/ping3_sys.sh", counterpart_ip, update_type="geneve_opposite"
            )
        elif is_geneve:
            update_ipfilegengre_nosec3(
                "/etc/sys3.sh", new_private_ip, update_type="geneve_private"
            )
            update_pingfile_gengrenosec(
                "/etc/ping3_sys.sh", counterpart_ip, update_type="ping_sys_opposite"
            )
        else:
            update_pingfile_gengrenosec(
                "/etc/ping_v63.sh", counterpart_ip, update_type="ping_v6"
            )
            update_ipfilegengre_nosec3(
                "/etc/private3.sh", new_private_ip, update_type="private"
            )
            update_ipfilegengre_nosec3(
                "/etc/private3.sh", local_ip, update_type="local"
            )
            update_ipfilegengre_nosec3(
                "/etc/private3.sh", remote_ip, update_type="remote"
            )
            update_ipfilegengre_nosec3(
                "/etc/gre63.sh", counterpart_ip, update_type="gre6_remote"
            )
            update_pingfile_gengrenosec(
                "/etc/ping3_sys.sh", counterpart_ip, update_type="ping_sys_opposite"
            )

        interface = "azumig63" if is_gre6 else "azumi3"
        if is_geneve:
            interface = "azumigen3"
        try:
            subprocess.run(["ip", "link", "set", "dev", interface, "down"], check=True)
            subprocess.run(["ip", "link", "delete", interface], check=True)
        except subprocess.CalledProcessError:
            print("\033[91merror bringing interface down or deleting it\033[0m")

        script = "/etc/gre63.sh" if is_gre6 else "/etc/private3.sh"
        if is_geneve:
            script = "/etc/sys3.sh"
        result = subprocess.run(["/bin/bash", script], capture_output=True, text=True)
        if "RTNETLINK answers: File exists" in result.stderr:
            print("\033[91madditional ip already exists. Ignoring this error\033[0m")
        else:
            result.check_returncode()
        subprocess.run(["sudo", "systemctl", "daemon-reload"], check=True)

        try:
            subprocess.run(["systemctl", "restart", "ping_v63"], check=True)
            display_checkmark("\033[92mping_v63 service restarted successfully!\033[0m")
        except subprocess.CalledProcessError as e:
            if "Unit ping_v63 not found" in (e.stderr or ""):
                print("\033[91mcouldn't restart ping_v63\033[0m")

        try:
            subprocess.run(["sudo", "systemctl", "restart", "ping3_gen"], check=True)
            display_checkmark(
                "\033[92mSystem services reloaded and restarted successfully!\033[0m"
            )
        except subprocess.CalledProcessError as e:
            if "Unit ping3_gen.service not found" in (e.stderr or ""):
                print("\033[91mcouldn't restart ping3_gen\033[0m")

        try:
            subprocess.run(["sudo", "systemctl", "restart", "ping_ip3"], check=True)
            display_checkmark("\033[92mping_ip3 service restarted successfully!\033[0m")
        except subprocess.CalledProcessError as e:
            if "Unit ping_ip3 not found" in (e.stderr or ""):
                print("\033[91mcouldn't restart ping_ip3\033[0m")

        display_checkmark(
            f"\033[92mChanges saved and {interface} interface updated successfully!\033[0m"
        )
    except subprocess.CalledProcessError:
        print("\033[91merror in applying network changes: don't mind this error\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def gengreir3nosec_editmulti_local():
    local_ip_private = local_ip("/etc/private3.sh")
    remote_ip_private = remote_ip("/etc/private3.sh")
    private_ip_private = private_ip1("/etc/private3.sh")

    local_ip_gre6 = local_ip("/etc/gre63.sh")
    remote_ip_gre6 = remote_ip("/etc/gre63.sh")
    private_ip_gre6 = private_gre6multi("/etc/gre63.sh")

    remote_ip_geneve = remote_ip("/etc/sys3.sh")
    private_ip_geneve = private_genmulti("/etc/sys3.sh")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("couldn't retrieve IP addresses from private file")
    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("couldn't retrieve IP addresses from gre6 file")
    if not remote_ip_geneve or not private_ip_geneve:
        print("couldn't retrieve IP addresses from geneve file")

    if (
        not local_ip_private
        or not remote_ip_private
        or not private_ip_private
        or not local_ip_gre6
        or not remote_ip_gre6
        or not private_ip_gre6
        or not remote_ip_geneve
        or not private_ip_geneve
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_privateiran3(
            local_ip_private, remote_ip_private, private_ip_private
        )
        display_stuff_gre6(local_ip_gre6, remote_ip_gre6, private_ip_gre6)
        display_stuff_geneve_greiran(remote_ip_geneve, private_ip_geneve)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mGeneve GRE6\033[93m IRAN Menu\033[0m")
        print('\033[92m "-"\033[93m═══════════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN \033[92m IPV4\033[0m")
        print("2. \033[93mChange \033[97mKharej [3] \033[92m IPV4\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[93mChange \033[97mGRE6 \033[93mPrivate IPV6\033[0m")
        print("5. \033[93mChange \033[97mGeneve \033[93mPrivate IPV6\033[0m")
        print("6. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to edit local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_private = new_ip
                ip_parts = new_ip.split(":")
                if new_ip.endswith(":2"):
                    ip_parts[-1] = "1"
                else:
                    ip_parts[-1] = "2"
                counterpart_ip = ":".join(ip_parts)
                local_ip_gre6 = new_ip
                remote_ip_gre6 = counterpart_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[GRE6]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_gre6 = new_ip
                remote_ip_geneve = wtb_opposite_ip_gengrenosec(new_ip)
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "5":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[Geneve]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_geneve = new_ip
                save_stuff_gengrenosec3(
                    private_ip_geneve,
                    None,
                    remote_ip_geneve,
                    is_gre6=False,
                    is_geneve=True,
                )
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mIRAN\033[93m Public IP :\033[0m ")
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mKharej [3]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "6":
            save_stuff_gengrenosec3(
                private_ip_private, local_ip_private, remote_ip_private, is_gre6=False
            )
            save_stuff_gengrenosec3(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            save_stuff_gengrenosec3(
                private_ip_geneve, None, remote_ip_geneve, is_gre6=False, is_geneve=True
            )
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Invalid choice. Please select a valid option.")


def gengrekharej3nosec_editmulti_local():
    local_ip_private = local_ip("/etc/private3.sh")
    remote_ip_private = remote_ip("/etc/private3.sh")
    private_ip_private = private_ip1("/etc/private3.sh")

    local_ip_gre6 = local_ip("/etc/gre63.sh")
    remote_ip_gre6 = remote_ip("/etc/gre63.sh")
    private_ip_gre6 = private_gre6multi("/etc/gre63.sh")

    remote_ip_geneve = remote_ip("/etc/sys3.sh")
    private_ip_geneve = private_genmulti("/etc/sys3.sh")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("couldn't retrieve IP addresses from private file")
    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("couldn't retrieve IP addresses from gre6 file")
    if not remote_ip_geneve or not private_ip_geneve:
        print("couldn't retrieve IP addresses from geneve file")

    if (
        not local_ip_private
        or not remote_ip_private
        or not private_ip_private
        or not local_ip_gre6
        or not remote_ip_gre6
        or not private_ip_gre6
        or not remote_ip_geneve
        or not private_ip_geneve
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_privatekharej3(
            local_ip_private, remote_ip_private, private_ip_private
        )
        display_stuff_gre6(local_ip_gre6, remote_ip_gre6, private_ip_gre6)
        display_stuff_geneve_greiran(remote_ip_geneve, private_ip_geneve)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mGeneve GRE6\033[93m Kharej [3] Menu\033[0m")
        print('\033[92m "-"\033[93m═══════════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej [3] \033[92m IPV4\033[0m")
        print("2. \033[93mChange \033[97mIRAN \033[92m IPV4\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[93mChange \033[97mGRE6 \033[93mPrivate IPV6\033[0m")
        print("5. \033[93mChange \033[97mGeneve \033[93mPrivate IPV6\033[0m")
        print("6. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to edit local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_private = new_ip
                ip_parts = new_ip.split(":")
                if new_ip.endswith(":2"):
                    ip_parts[-1] = "1"
                else:
                    ip_parts[-1] = "2"
                counterpart_ip = ":".join(ip_parts)
                local_ip_gre6 = new_ip
                remote_ip_gre6 = counterpart_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[GRE6]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_gre6 = new_ip
                remote_ip_geneve = wtb_opposite_ipgregen(new_ip)
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "5":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[Geneve]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_geneve = new_ip
                save_stuff_gengrenosec3(
                    private_ip_geneve,
                    None,
                    remote_ip_geneve,
                    is_gre6=False,
                    is_geneve=True,
                )
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mKharej [3]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input("\033[93mEnter \033[92mIRAN\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "6":
            save_stuff_gengrenosec3(
                private_ip_private, local_ip_private, remote_ip_private, is_gre6=False
            )
            save_stuff_gengrenosec3(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            save_stuff_gengrenosec3(
                private_ip_geneve, None, remote_ip_geneve, is_gre6=False, is_geneve=True
            )
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Invalid choice. Please select a valid option.")


# server 4
def get_current_private_ipsgregen4():
    private_ip_private = private_ip1("/etc/private4.sh")
    private_ip_gre6 = private_gre6multi("/etc/gre64.sh")
    private_ip_geneve = private_genmulti("/etc/sys4.sh")
    return {
        "private": private_ip_private,
        "gre6": private_ip_gre6,
        "geneve": private_ip_geneve,
    }


def update_ipfilegengre_nosec4(name, new_ip, update_type):
    try:
        with open(name, "r") as f:
            content = f.read()

        if update_type == "private":
            new_content = re.sub(
                r"ip (-6 )?addr add [^ ]+/64 dev azumi?",
                f"ip -6 addr add {new_ip}/64 dev azumi",
                content,
            )
            ip_parts = new_ip.split(":")
            if new_ip.endswith(":2"):
                ip_parts[-1] = "1"
            else:
                ip_parts[-1] = "2"
            counterpart_ip = ":".join(ip_parts)
            new_content = re.sub(
                r"ip (-6 )?route add [^ ]+/64 dev azumi?",
                f"ip -6 route add {counterpart_ip}/64 dev azumi",
                new_content,
            )

            update_ipfilegengre_nosec4(
                "/etc/gre64.sh", new_ip, update_type="gre6_local"
            )
            update_ipfilegengre_nosec4(
                "/etc/gre64.sh", counterpart_ip, update_type="gre6_remote"
            )
        elif update_type == "local":
            new_content = re.sub(r"local \S+", f"local {new_ip}", content)
        elif update_type == "remote":
            new_content = re.sub(r"remote \S+", f"remote {new_ip}", content)
        elif update_type == "gre6_local":
            new_content = re.sub(r"local \S+", f"local {new_ip}", content)
        elif update_type == "gre6_remote":
            new_content = re.sub(r"remote \S+", f"remote {new_ip}", content)
        elif update_type == "geneve_remote":
            new_content = re.sub(r"remote \S+", f"remote {new_ip}", content)
        elif update_type == "geneve_private":
            new_content = re.sub(
                r"ip addr add \S+/64 dev azumigen?",
                f"ip addr add {new_ip}/64 dev azumigen",
                content,
            )
            counterpart_ip = wtb_opposite_ip_gengrenosec(new_ip)
            new_content = re.sub(
                r"ip route add \S+/64 dev azumigen?",
                f"ip route add {counterpart_ip}/64 dev azumigen",
                new_content,
            )

        with open(name, "w") as f:
            f.write(new_content)
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def save_stuff_gengrenosec4(
    new_private_ip, local_ip, remote_ip, is_gre6, is_geneve=False
):
    current_ips = get_current_private_ipsgregen4()

    if is_gre6:
        current_ip = current_ips["gre6"]
    elif is_geneve:
        current_ip = current_ips["geneve"]
    else:
        current_ip = current_ips["private"]

    if current_ip:
        delete_ufw_rules(current_ip)

    add_ufw_rules(new_private_ip)

    counterpart_ip = wtb_opposite_ip_gengrenosec(new_private_ip)

    try:
        if is_gre6:
            update_pingfile_gengrenosec(
                "/etc/ping_ip4.sh", counterpart_ip, update_type="ping_ip"
            )
            update_ipfilegengre_nosec4(
                "/etc/gre64.sh", new_private_ip, update_type="private"
            )
            update_ipfilegengre_nosec4("/etc/gre64.sh", remote_ip, update_type="remote")
            update_ipfilegengre_nosec4(
                "/etc/sys4.sh", counterpart_ip, update_type="geneve_remote"
            )
            update_pingfile_gengrenosec(
                "/etc/ping4_sys.sh", remote_ip, update_type="geneve"
            )
            update_pingfile_gengrenosec(
                "/etc/ping4_sys.sh", counterpart_ip, update_type="geneve_opposite"
            )
        elif is_geneve:
            update_ipfilegengre_nosec4(
                "/etc/sys4.sh", new_private_ip, update_type="geneve_private"
            )
            update_pingfile_gengrenosec(
                "/etc/ping4_sys.sh", counterpart_ip, update_type="ping_sys_opposite"
            )
        else:
            update_pingfile_gengrenosec(
                "/etc/ping_v64.sh", counterpart_ip, update_type="ping_v6"
            )
            update_ipfilegengre_nosec4(
                "/etc/private4.sh", new_private_ip, update_type="private"
            )
            update_ipfilegengre_nosec4(
                "/etc/private4.sh", local_ip, update_type="local"
            )
            update_ipfilegengre_nosec4(
                "/etc/private4.sh", remote_ip, update_type="remote"
            )
            update_ipfilegengre_nosec4(
                "/etc/gre64.sh", counterpart_ip, update_type="gre6_remote"
            )
            update_pingfile_gengrenosec(
                "/etc/ping4_sys.sh", counterpart_ip, update_type="ping_sys_opposite"
            )

        interface = "azumig64" if is_gre6 else "azumi4"
        if is_geneve:
            interface = "azumigen4"
        try:
            subprocess.run(["ip", "link", "set", "dev", interface, "down"], check=True)
            subprocess.run(["ip", "link", "delete", interface], check=True)
        except subprocess.CalledProcessError:
            print("\033[91merror bringing interface down or deleting it\033[0m")

        script = "/etc/gre64.sh" if is_gre6 else "/etc/private4.sh"
        if is_geneve:
            script = "/etc/sys4.sh"
        result = subprocess.run(["/bin/bash", script], capture_output=True, text=True)
        if "RTNETLINK answers: File exists" in result.stderr:
            print("\033[91madditional ip already exists. Ignoring this error\033[0m")
        else:
            result.check_returncode()
        subprocess.run(["sudo", "systemctl", "daemon-reload"], check=True)

        try:
            subprocess.run(["systemctl", "restart", "ping_v64"], check=True)
            display_checkmark("\033[92mping_v64 service restarted successfully!\033[0m")
        except subprocess.CalledProcessError as e:
            if "Unit ping_v64 not found" in (e.stderr or ""):
                print("\033[91mcouldn't restart ping_v64\033[0m")

        try:
            subprocess.run(["sudo", "systemctl", "restart", "ping4_gen"], check=True)
            display_checkmark(
                "\033[92mSystem services reloaded and restarted successfully!\033[0m"
            )
        except subprocess.CalledProcessError as e:
            if "Unit ping4_gen.service not found" in (e.stderr or ""):
                print("\033[91mcouldn't restart ping4_gen\033[0m")

        try:
            subprocess.run(["sudo", "systemctl", "restart", "ping_ip4"], check=True)
            display_checkmark("\033[92mping_ip4 service restarted successfully!\033[0m")
        except subprocess.CalledProcessError as e:
            if "Unit ping_ip4 not found" in (e.stderr or ""):
                print("\033[91mcouldn't restart ping_ip4\033[0m")

        display_checkmark(
            f"\033[92mChanges saved and {interface} interface updated successfully!\033[0m"
        )
    except subprocess.CalledProcessError:
        print("\033[91merror in applying network changes: don't mind this error\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def gengreir4nosec_editmulti_local():
    local_ip_private = local_ip("/etc/private4.sh")
    remote_ip_private = remote_ip("/etc/private4.sh")
    private_ip_private = private_ip1("/etc/private4.sh")

    local_ip_gre6 = local_ip("/etc/gre64.sh")
    remote_ip_gre6 = remote_ip("/etc/gre64.sh")
    private_ip_gre6 = private_gre6multi("/etc/gre64.sh")

    remote_ip_geneve = remote_ip("/etc/sys4.sh")
    private_ip_geneve = private_genmulti("/etc/sys4.sh")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("couldn't retrieve IP addresses from private file")
    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("couldn't retrieve IP addresses from gre6 file")
    if not remote_ip_geneve or not private_ip_geneve:
        print("couldn't retrieve IP addresses from geneve file")

    if (
        not local_ip_private
        or not remote_ip_private
        or not private_ip_private
        or not local_ip_gre6
        or not remote_ip_gre6
        or not private_ip_gre6
        or not remote_ip_geneve
        or not private_ip_geneve
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_privateiran4(
            local_ip_private, remote_ip_private, private_ip_private
        )
        display_stuff_gre6(local_ip_gre6, remote_ip_gre6, private_ip_gre6)
        display_stuff_geneve_greiran(remote_ip_geneve, private_ip_geneve)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mGeneve GRE6\033[93m IRAN Menu\033[0m")
        print('\033[92m "-"\033[93m═══════════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN \033[92m IPV4\033[0m")
        print("2. \033[93mChange \033[97mKharej [4] \033[92m IPV4\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[93mChange \033[97mGRE6 \033[93mPrivate IPV6\033[0m")
        print("5. \033[93mChange \033[97mGeneve \033[93mPrivate IPV6\033[0m")
        print("6. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to edit local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_private = new_ip
                ip_parts = new_ip.split(":")
                if new_ip.endswith(":2"):
                    ip_parts[-1] = "1"
                else:
                    ip_parts[-1] = "2"
                counterpart_ip = ":".join(ip_parts)
                local_ip_gre6 = new_ip
                remote_ip_gre6 = counterpart_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[GRE6]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_gre6 = new_ip
                remote_ip_geneve = wtb_opposite_ip_gengrenosec(new_ip)
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "5":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[Geneve]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_geneve = new_ip
                save_stuff_gengrenosec4(
                    private_ip_geneve,
                    None,
                    remote_ip_geneve,
                    is_gre6=False,
                    is_geneve=True,
                )
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mIRAN\033[93m Public IP :\033[0m ")
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mKharej [4]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "6":
            save_stuff_gengrenosec4(
                private_ip_private, local_ip_private, remote_ip_private, is_gre6=False
            )
            save_stuff_gengrenosec4(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            save_stuff_gengrenosec4(
                private_ip_geneve, None, remote_ip_geneve, is_gre6=False, is_geneve=True
            )
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Invalid choice. Please select a valid option.")


def gengrekharej4nosec_editmulti_local():
    local_ip_private = local_ip("/etc/private4.sh")
    remote_ip_private = remote_ip("/etc/private4.sh")
    private_ip_private = private_ip1("/etc/private4.sh")

    local_ip_gre6 = local_ip("/etc/gre64.sh")
    remote_ip_gre6 = remote_ip("/etc/gre64.sh")
    private_ip_gre6 = private_gre6multi("/etc/gre64.sh")

    remote_ip_geneve = remote_ip("/etc/sys4.sh")
    private_ip_geneve = private_genmulti("/etc/sys4.sh")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("couldn't retrieve IP addresses from private file")
    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("couldn't retrieve IP addresses from gre6 file")
    if not remote_ip_geneve or not private_ip_geneve:
        print("couldn't retrieve IP addresses from geneve file")

    if (
        not local_ip_private
        or not remote_ip_private
        or not private_ip_private
        or not local_ip_gre6
        or not remote_ip_gre6
        or not private_ip_gre6
        or not remote_ip_geneve
        or not private_ip_geneve
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_privatekharej4(
            local_ip_private, remote_ip_private, private_ip_private
        )
        display_stuff_gre6(local_ip_gre6, remote_ip_gre6, private_ip_gre6)
        display_stuff_geneve_greiran(remote_ip_geneve, private_ip_geneve)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mGeneve GRE6\033[93m Kharej [4] Menu\033[0m")
        print('\033[92m "-"\033[93m═══════════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej [4] \033[92m IPV4\033[0m")
        print("2. \033[93mChange \033[97mIRAN \033[92m IPV4\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[93mChange \033[97mGRE6 \033[93mPrivate IPV6\033[0m")
        print("5. \033[93mChange \033[97mGeneve \033[93mPrivate IPV6\033[0m")
        print("6. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to edit local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_private = new_ip
                ip_parts = new_ip.split(":")
                if new_ip.endswith(":2"):
                    ip_parts[-1] = "1"
                else:
                    ip_parts[-1] = "2"
                counterpart_ip = ":".join(ip_parts)
                local_ip_gre6 = new_ip
                remote_ip_gre6 = counterpart_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[GRE6]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_gre6 = new_ip
                remote_ip_geneve = wtb_opposite_ipgregen(new_ip)
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "5":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[Geneve]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_geneve = new_ip
                save_stuff_gengrenosec4(
                    private_ip_geneve,
                    None,
                    remote_ip_geneve,
                    is_gre6=False,
                    is_geneve=True,
                )
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mKharej [4]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input("\033[93mEnter \033[92mIRAN\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "6":
            save_stuff_gengrenosec4(
                private_ip_private, local_ip_private, remote_ip_private, is_gre6=False
            )
            save_stuff_gengrenosec4(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            save_stuff_gengrenosec4(
                private_ip_geneve, None, remote_ip_geneve, is_gre6=False, is_geneve=True
            )
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Invalid choice. Please select a valid option.")


# server 5
def get_current_private_ipsgregen5():
    private_ip_private = private_ip1("/etc/private5.sh")
    private_ip_gre6 = private_gre6multi("/etc/gre65.sh")
    private_ip_geneve = private_genmulti("/etc/sys5.sh")
    return {
        "private": private_ip_private,
        "gre6": private_ip_gre6,
        "geneve": private_ip_geneve,
    }


def update_ipfilegengre_nosec5(name, new_ip, update_type):
    try:
        with open(name, "r") as f:
            content = f.read()

        if update_type == "private":
            new_content = re.sub(
                r"ip (-6 )?addr add [^ ]+/64 dev azumi?",
                f"ip -6 addr add {new_ip}/64 dev azumi",
                content,
            )
            ip_parts = new_ip.split(":")
            if new_ip.endswith(":2"):
                ip_parts[-1] = "1"
            else:
                ip_parts[-1] = "2"
            counterpart_ip = ":".join(ip_parts)
            new_content = re.sub(
                r"ip (-6 )?route add [^ ]+/64 dev azumi?",
                f"ip -6 route add {counterpart_ip}/64 dev azumi",
                new_content,
            )

            update_ipfilegengre_nosec5(
                "/etc/gre65.sh", new_ip, update_type="gre6_local"
            )
            update_ipfilegengre_nosec5(
                "/etc/gre65.sh", counterpart_ip, update_type="gre6_remote"
            )
        elif update_type == "local":
            new_content = re.sub(r"local \S+", f"local {new_ip}", content)
        elif update_type == "remote":
            new_content = re.sub(r"remote \S+", f"remote {new_ip}", content)
        elif update_type == "gre6_local":
            new_content = re.sub(r"local \S+", f"local {new_ip}", content)
        elif update_type == "gre6_remote":
            new_content = re.sub(r"remote \S+", f"remote {new_ip}", content)
        elif update_type == "geneve_remote":
            new_content = re.sub(r"remote \S+", f"remote {new_ip}", content)
        elif update_type == "geneve_private":
            new_content = re.sub(
                r"ip addr add \S+/64 dev azumigen?",
                f"ip addr add {new_ip}/64 dev azumigen",
                content,
            )
            counterpart_ip = wtb_opposite_ip_gengrenosec(new_ip)
            new_content = re.sub(
                r"ip route add \S+/64 dev azumigen?",
                f"ip route add {counterpart_ip}/64 dev azumigen",
                new_content,
            )

        with open(name, "w") as f:
            f.write(new_content)
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def save_stuff_gengrenosec5(
    new_private_ip, local_ip, remote_ip, is_gre6, is_geneve=False
):
    current_ips = get_current_private_ipsgregen5()

    if is_gre6:
        current_ip = current_ips["gre6"]
    elif is_geneve:
        current_ip = current_ips["geneve"]
    else:
        current_ip = current_ips["private"]

    if current_ip:
        delete_ufw_rules(current_ip)

    add_ufw_rules(new_private_ip)

    counterpart_ip = wtb_opposite_ip_gengrenosec(new_private_ip)

    try:
        if is_gre6:
            update_pingfile_gengrenosec(
                "/etc/ping_ip5.sh", counterpart_ip, update_type="ping_ip"
            )
            update_ipfilegengre_nosec5(
                "/etc/gre65.sh", new_private_ip, update_type="private"
            )
            update_ipfilegengre_nosec5("/etc/gre65.sh", remote_ip, update_type="remote")
            update_ipfilegengre_nosec5(
                "/etc/sys5.sh", counterpart_ip, update_type="geneve_remote"
            )
            update_pingfile_gengrenosec(
                "/etc/ping5_sys.sh", remote_ip, update_type="geneve"
            )
            update_pingfile_gengrenosec(
                "/etc/ping5_sys.sh", counterpart_ip, update_type="geneve_opposite"
            )
        elif is_geneve:
            update_ipfilegengre_nosec5(
                "/etc/sys5.sh", new_private_ip, update_type="geneve_private"
            )
            update_pingfile_gengrenosec(
                "/etc/ping5_sys.sh", counterpart_ip, update_type="ping_sys_opposite"
            )
        else:
            update_pingfile_gengrenosec(
                "/etc/ping_v65.sh", counterpart_ip, update_type="ping_v6"
            )
            update_ipfilegengre_nosec5(
                "/etc/private5.sh", new_private_ip, update_type="private"
            )
            update_ipfilegengre_nosec5(
                "/etc/private5.sh", local_ip, update_type="local"
            )
            update_ipfilegengre_nosec5(
                "/etc/private5.sh", remote_ip, update_type="remote"
            )
            update_ipfilegengre_nosec5(
                "/etc/gre65.sh", counterpart_ip, update_type="gre6_remote"
            )
            update_pingfile_gengrenosec(
                "/etc/ping4_sys.sh", counterpart_ip, update_type="ping_sys_opposite"
            )

        interface = "azumig65" if is_gre6 else "azumi5"
        if is_geneve:
            interface = "azumigen5"
        try:
            subprocess.run(["ip", "link", "set", "dev", interface, "down"], check=True)
            subprocess.run(["ip", "link", "delete", interface], check=True)
        except subprocess.CalledProcessError:
            print("\033[91merror bringing interface down or deleting it\033[0m")

        script = "/etc/gre65.sh" if is_gre6 else "/etc/private5.sh"
        if is_geneve:
            script = "/etc/sys5.sh"
        result = subprocess.run(["/bin/bash", script], capture_output=True, text=True)
        if "RTNETLINK answers: File exists" in result.stderr:
            print("\033[91madditional ip already exists. Ignoring this error\033[0m")
        else:
            result.check_returncode()
        subprocess.run(["sudo", "systemctl", "daemon-reload"], check=True)

        try:
            subprocess.run(["systemctl", "restart", "ping_v65"], check=True)
            display_checkmark("\033[92mping_v65 service restarted successfully!\033[0m")
        except subprocess.CalledProcessError as e:
            if "Unit ping_v65 not found" in (e.stderr or ""):
                print("\033[91mcouldn't restart ping_v65\033[0m")

        try:
            subprocess.run(["sudo", "systemctl", "restart", "ping5_gen"], check=True)
            display_checkmark(
                "\033[92mSystem services reloaded and restarted successfully!\033[0m"
            )
        except subprocess.CalledProcessError as e:
            if "Unit ping5_gen.service not found" in (e.stderr or ""):
                print("\033[91mcouldn't restart ping5_gen\033[0m")

        try:
            subprocess.run(["sudo", "systemctl", "restart", "ping_ip5"], check=True)
            display_checkmark("\033[92mping_ip5 service restarted successfully!\033[0m")
        except subprocess.CalledProcessError as e:
            if "Unit ping_ip4 not found" in (e.stderr or ""):
                print("\033[91mcouldn't restart ping_ip5\033[0m")

        display_checkmark(
            f"\033[92mChanges saved and {interface} interface updated successfully!\033[0m"
        )
    except subprocess.CalledProcessError:
        print("\033[91merror in applying network changes: don't mind this error\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def gengreir5nosec_editmulti_local():
    local_ip_private = local_ip("/etc/private5.sh")
    remote_ip_private = remote_ip("/etc/private5.sh")
    private_ip_private = private_ip1("/etc/private5.sh")

    local_ip_gre6 = local_ip("/etc/gre65.sh")
    remote_ip_gre6 = remote_ip("/etc/gre65.sh")
    private_ip_gre6 = private_gre6multi("/etc/gre65.sh")

    remote_ip_geneve = remote_ip("/etc/sys5.sh")
    private_ip_geneve = private_genmulti("/etc/sys5.sh")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("couldn't retrieve IP addresses from private file")
    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("couldn't retrieve IP addresses from gre6 file")
    if not remote_ip_geneve or not private_ip_geneve:
        print("couldn't retrieve IP addresses from geneve file")

    if (
        not local_ip_private
        or not remote_ip_private
        or not private_ip_private
        or not local_ip_gre6
        or not remote_ip_gre6
        or not private_ip_gre6
        or not remote_ip_geneve
        or not private_ip_geneve
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_privateiran5(
            local_ip_private, remote_ip_private, private_ip_private
        )
        display_stuff_gre6(local_ip_gre6, remote_ip_gre6, private_ip_gre6)
        display_stuff_geneve_greiran(remote_ip_geneve, private_ip_geneve)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mGeneve GRE6\033[93m IRAN Menu\033[0m")
        print('\033[92m "-"\033[93m═══════════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN \033[92m IPV4\033[0m")
        print("2. \033[93mChange \033[97mKharej [5] \033[92m IPV4\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[93mChange \033[97mGRE6 \033[93mPrivate IPV6\033[0m")
        print("5. \033[93mChange \033[97mGeneve \033[93mPrivate IPV6\033[0m")
        print("6. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to edit local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_private = new_ip
                ip_parts = new_ip.split(":")
                if new_ip.endswith(":2"):
                    ip_parts[-1] = "1"
                else:
                    ip_parts[-1] = "2"
                counterpart_ip = ":".join(ip_parts)
                local_ip_gre6 = new_ip
                remote_ip_gre6 = counterpart_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[GRE6]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_gre6 = new_ip
                remote_ip_geneve = wtb_opposite_ip_gengrenosec(new_ip)
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "5":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[Geneve]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_geneve = new_ip
                save_stuff_gengrenosec5(
                    private_ip_geneve,
                    None,
                    remote_ip_geneve,
                    is_gre6=False,
                    is_geneve=True,
                )
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mIRAN\033[93m Public IP :\033[0m ")
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mKharej [5]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "6":
            save_stuff_gengrenosec5(
                private_ip_private, local_ip_private, remote_ip_private, is_gre6=False
            )
            save_stuff_gengrenosec5(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            save_stuff_gengrenosec5(
                private_ip_geneve, None, remote_ip_geneve, is_gre6=False, is_geneve=True
            )
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Invalid choice. Please select a valid option.")


def gengrekharej5nosec_editmulti_local():
    local_ip_private = local_ip("/etc/private5.sh")
    remote_ip_private = remote_ip("/etc/private5.sh")
    private_ip_private = private_ip1("/etc/private5.sh")

    local_ip_gre6 = local_ip("/etc/gre65.sh")
    remote_ip_gre6 = remote_ip("/etc/gre65.sh")
    private_ip_gre6 = private_gre6multi("/etc/gre65.sh")

    remote_ip_geneve = remote_ip("/etc/sys5.sh")
    private_ip_geneve = private_genmulti("/etc/sys5.sh")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("couldn't retrieve IP addresses from private file")
    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("couldn't retrieve IP addresses from gre6 file")
    if not remote_ip_geneve or not private_ip_geneve:
        print("couldn't retrieve IP addresses from geneve file")

    if (
        not local_ip_private
        or not remote_ip_private
        or not private_ip_private
        or not local_ip_gre6
        or not remote_ip_gre6
        or not private_ip_gre6
        or not remote_ip_geneve
        or not private_ip_geneve
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_privatekharej5(
            local_ip_private, remote_ip_private, private_ip_private
        )
        display_stuff_gre6(local_ip_gre6, remote_ip_gre6, private_ip_gre6)
        display_stuff_geneve_greiran(remote_ip_geneve, private_ip_geneve)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mGeneve GRE6\033[93m Kharej [5] Menu\033[0m")
        print('\033[92m "-"\033[93m═══════════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej [5] \033[92m IPV4\033[0m")
        print("2. \033[93mChange \033[97mIRAN \033[92m IPV4\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[93mChange \033[97mGRE6 \033[93mPrivate IPV6\033[0m")
        print("5. \033[93mChange \033[97mGeneve \033[93mPrivate IPV6\033[0m")
        print("6. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to edit local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_private = new_ip
                ip_parts = new_ip.split(":")
                if new_ip.endswith(":2"):
                    ip_parts[-1] = "1"
                else:
                    ip_parts[-1] = "2"
                counterpart_ip = ":".join(ip_parts)
                local_ip_gre6 = new_ip
                remote_ip_gre6 = counterpart_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[GRE6]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_gre6 = new_ip
                remote_ip_geneve = wtb_opposite_ipgregen(new_ip)
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "5":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[Geneve]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_geneve = new_ip
                save_stuff_gengrenosec5(
                    private_ip_geneve,
                    None,
                    remote_ip_geneve,
                    is_gre6=False,
                    is_geneve=True,
                )
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mKharej [5]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input("\033[93mEnter \033[92mIRAN\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "6":
            save_stuff_gengrenosec5(
                private_ip_private, local_ip_private, remote_ip_private, is_gre6=False
            )
            save_stuff_gengrenosec5(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            save_stuff_gengrenosec5(
                private_ip_geneve, None, remote_ip_geneve, is_gre6=False, is_geneve=True
            )
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Invalid choice. Please select a valid option.")


# 5 iran 1 kharej gen gre6

# server 1


def gengrekharejone1nosec_editmulti_local():
    local_ip_private = local_ip("/etc/private1.sh")
    remote_ip_private = remote_ip("/etc/private1.sh")
    private_ip_private = private_ip1("/etc/private1.sh")

    local_ip_gre6 = local_ip("/etc/gre61.sh")
    remote_ip_gre6 = remote_ip("/etc/gre61.sh")
    private_ip_gre6 = private_gre6multi("/etc/gre61.sh")

    remote_ip_geneve = remote_ip("/etc/sys1.sh")
    private_ip_geneve = private_genmulti("/etc/sys1.sh")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("couldn't retrieve IP addresses from private file")
    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("couldn't retrieve IP addresses from gre6 file")
    if not remote_ip_geneve or not private_ip_geneve:
        print("couldn't retrieve IP addresses from geneve file")

    if (
        not local_ip_private
        or not remote_ip_private
        or not private_ip_private
        or not local_ip_gre6
        or not remote_ip_gre6
        or not private_ip_gre6
        or not remote_ip_geneve
        or not private_ip_geneve
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_privatekharejone1(
            local_ip_private, remote_ip_private, private_ip_private
        )
        display_stuff_gre6(local_ip_gre6, remote_ip_gre6, private_ip_gre6)
        display_stuff_geneve_greiran(remote_ip_geneve, private_ip_geneve)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mGeneve GRE6\033[93m Kharej Menu\033[0m")
        print('\033[92m "-"\033[93m═══════════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej \033[92m IPV4\033[0m")
        print("2. \033[93mChange \033[97mIRAN [1] \033[92m IPV4\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[93mChange \033[97mGRE6 \033[93mPrivate IPV6\033[0m")
        print("5. \033[93mChange \033[97mGeneve \033[93mPrivate IPV6\033[0m")
        print("6. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to edit local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_private = new_ip
                ip_parts = new_ip.split(":")
                if new_ip.endswith(":2"):
                    ip_parts[-1] = "1"
                else:
                    ip_parts[-1] = "2"
                counterpart_ip = ":".join(ip_parts)
                local_ip_gre6 = new_ip
                remote_ip_gre6 = counterpart_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[GRE6]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_gre6 = new_ip
                remote_ip_geneve = wtb_opposite_ip_gengrenosec(new_ip)
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "5":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[Geneve]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_geneve = new_ip
                save_stuff_gengrenosec1(
                    private_ip_geneve,
                    None,
                    remote_ip_geneve,
                    is_gre6=False,
                    is_geneve=True,
                )
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mKharej\033[93m Public IP :\033[0m ")
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input("\033[93mEnter \033[92mIRAN [1]\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "6":
            save_stuff_gengrenosec1(
                private_ip_private, local_ip_private, remote_ip_private, is_gre6=False
            )
            save_stuff_gengrenosec1(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            save_stuff_gengrenosec1(
                private_ip_geneve, None, remote_ip_geneve, is_gre6=False, is_geneve=True
            )
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Invalid choice. Please select a valid option.")


def gengreiranfive1nosec_editmulti_local():
    local_ip_private = local_ip("/etc/private1.sh")
    remote_ip_private = remote_ip("/etc/private1.sh")
    private_ip_private = private_ip1("/etc/private1.sh")

    local_ip_gre6 = local_ip("/etc/gre61.sh")
    remote_ip_gre6 = remote_ip("/etc/gre61.sh")
    private_ip_gre6 = private_gre6multi("/etc/gre61.sh")

    remote_ip_geneve = remote_ip("/etc/sys1.sh")
    private_ip_geneve = private_genmulti("/etc/sys1.sh")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("couldn't retrieve IP addresses from private file")
    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("couldn't retrieve IP addresses from gre6 file")
    if not remote_ip_geneve or not private_ip_geneve:
        print("couldn't retrieve IP addresses from geneve file")

    if (
        not local_ip_private
        or not remote_ip_private
        or not private_ip_private
        or not local_ip_gre6
        or not remote_ip_gre6
        or not private_ip_gre6
        or not remote_ip_geneve
        or not private_ip_geneve
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_privateiranfive1(
            local_ip_private, remote_ip_private, private_ip_private
        )
        display_stuff_gre6(local_ip_gre6, remote_ip_gre6, private_ip_gre6)
        display_stuff_geneve_greiran(remote_ip_geneve, private_ip_geneve)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mGeneve GRE6\033[93m IRAN [1] Menu\033[0m")
        print('\033[92m "-"\033[93m═══════════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN [1] \033[92m IPV4\033[0m")
        print("2. \033[93mChange \033[97mKharej \033[92m IPV4\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[93mChange \033[97mGRE6 \033[93mPrivate IPV6\033[0m")
        print("5. \033[93mChange \033[97mGeneve \033[93mPrivate IPV6\033[0m")
        print("6. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to edit local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_private = new_ip
                ip_parts = new_ip.split(":")
                if new_ip.endswith(":2"):
                    ip_parts[-1] = "1"
                else:
                    ip_parts[-1] = "2"
                counterpart_ip = ":".join(ip_parts)
                local_ip_gre6 = new_ip
                remote_ip_gre6 = counterpart_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[GRE6]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_gre6 = new_ip
                remote_ip_geneve = wtb_opposite_ipgregen(new_ip)
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "5":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[Geneve]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_geneve = new_ip
                save_stuff_gengrenosec1(
                    private_ip_geneve,
                    None,
                    remote_ip_geneve,
                    is_gre6=False,
                    is_geneve=True,
                )
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mIRAN [1]\033[93m Public IP :\033[0m ")
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input("\033[93mEnter \033[92mKharej\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "6":
            save_stuff_gengrenosec1(
                private_ip_private, local_ip_private, remote_ip_private, is_gre6=False
            )
            save_stuff_gengrenosec1(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            save_stuff_gengrenosec1(
                private_ip_geneve, None, remote_ip_geneve, is_gre6=False, is_geneve=True
            )
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Invalid choice. Please select a valid option.")


# server 2


def gengrekharejone2nosec_editmulti_local():
    local_ip_private = local_ip("/etc/private2.sh")
    remote_ip_private = remote_ip("/etc/private2.sh")
    private_ip_private = private_ip1("/etc/private2.sh")

    local_ip_gre6 = local_ip("/etc/gre62.sh")
    remote_ip_gre6 = remote_ip("/etc/gre62.sh")
    private_ip_gre6 = private_gre6multi("/etc/gre62.sh")

    remote_ip_geneve = remote_ip("/etc/sys2.sh")
    private_ip_geneve = private_genmulti("/etc/sys2.sh")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("couldn't retrieve IP addresses from private file")
    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("couldn't retrieve IP addresses from gre6 file")
    if not remote_ip_geneve or not private_ip_geneve:
        print("couldn't retrieve IP addresses from geneve file")

    if (
        not local_ip_private
        or not remote_ip_private
        or not private_ip_private
        or not local_ip_gre6
        or not remote_ip_gre6
        or not private_ip_gre6
        or not remote_ip_geneve
        or not private_ip_geneve
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_privatekharejone2(
            local_ip_private, remote_ip_private, private_ip_private
        )
        display_stuff_gre6(local_ip_gre6, remote_ip_gre6, private_ip_gre6)
        display_stuff_geneve_greiran(remote_ip_geneve, private_ip_geneve)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mGeneve GRE6\033[93m Kharej Menu\033[0m")
        print('\033[92m "-"\033[93m═══════════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej \033[92m IPV4\033[0m")
        print("2. \033[93mChange \033[97mIRAN [2] \033[92m IPV4\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[93mChange \033[97mGRE6 \033[93mPrivate IPV6\033[0m")
        print("5. \033[93mChange \033[97mGeneve \033[93mPrivate IPV6\033[0m")
        print("6. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to edit local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_private = new_ip
                ip_parts = new_ip.split(":")
                if new_ip.endswith(":2"):
                    ip_parts[-1] = "1"
                else:
                    ip_parts[-1] = "2"
                counterpart_ip = ":".join(ip_parts)
                local_ip_gre6 = new_ip
                remote_ip_gre6 = counterpart_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[GRE6]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_gre6 = new_ip
                remote_ip_geneve = wtb_opposite_ip_gengrenosec(new_ip)
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "5":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[Geneve]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_geneve = new_ip
                save_stuff_gengrenosec2(
                    private_ip_geneve,
                    None,
                    remote_ip_geneve,
                    is_gre6=False,
                    is_geneve=True,
                )
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mKharej\033[93m Public IP :\033[0m ")
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input("\033[93mEnter \033[92mIRAN [2]\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "6":
            save_stuff_gengrenosec2(
                private_ip_private, local_ip_private, remote_ip_private, is_gre6=False
            )
            save_stuff_gengrenosec2(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            save_stuff_gengrenosec2(
                private_ip_geneve, None, remote_ip_geneve, is_gre6=False, is_geneve=True
            )
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Invalid choice. Please select a valid option.")


def gengreiranfive2nosec_editmulti_local():
    local_ip_private = local_ip("/etc/private2.sh")
    remote_ip_private = remote_ip("/etc/private2.sh")
    private_ip_private = private_ip1("/etc/private2.sh")

    local_ip_gre6 = local_ip("/etc/gre62.sh")
    remote_ip_gre6 = remote_ip("/etc/gre62.sh")
    private_ip_gre6 = private_gre6multi("/etc/gre62.sh")

    remote_ip_geneve = remote_ip("/etc/sys2.sh")
    private_ip_geneve = private_genmulti("/etc/sys2.sh")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("couldn't retrieve IP addresses from private file")
    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("couldn't retrieve IP addresses from gre6 file")
    if not remote_ip_geneve or not private_ip_geneve:
        print("couldn't retrieve IP addresses from geneve file")

    if (
        not local_ip_private
        or not remote_ip_private
        or not private_ip_private
        or not local_ip_gre6
        or not remote_ip_gre6
        or not private_ip_gre6
        or not remote_ip_geneve
        or not private_ip_geneve
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_privateiranfive2(
            local_ip_private, remote_ip_private, private_ip_private
        )
        display_stuff_gre6(local_ip_gre6, remote_ip_gre6, private_ip_gre6)
        display_stuff_geneve_greiran(remote_ip_geneve, private_ip_geneve)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mGeneve GRE6\033[93m IRAN [2] Menu\033[0m")
        print('\033[92m "-"\033[93m═══════════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN [2] \033[92m IPV4\033[0m")
        print("2. \033[93mChange \033[97mKharej \033[92m IPV4\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[93mChange \033[97mGRE6 \033[93mPrivate IPV6\033[0m")
        print("5. \033[93mChange \033[97mGeneve \033[93mPrivate IPV6\033[0m")
        print("6. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to edit local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_private = new_ip
                ip_parts = new_ip.split(":")
                if new_ip.endswith(":2"):
                    ip_parts[-1] = "1"
                else:
                    ip_parts[-1] = "2"
                counterpart_ip = ":".join(ip_parts)
                local_ip_gre6 = new_ip
                remote_ip_gre6 = counterpart_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[GRE6]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_gre6 = new_ip
                remote_ip_geneve = wtb_opposite_ipgregen(new_ip)
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "5":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[Geneve]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_geneve = new_ip
                save_stuff_gengrenosec2(
                    private_ip_geneve,
                    None,
                    remote_ip_geneve,
                    is_gre6=False,
                    is_geneve=True,
                )
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mIRAN [2]\033[93m Public IP :\033[0m ")
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input("\033[93mEnter \033[92mKharej\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "6":
            save_stuff_gengrenosec2(
                private_ip_private, local_ip_private, remote_ip_private, is_gre6=False
            )
            save_stuff_gengrenosec2(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            save_stuff_gengrenosec2(
                private_ip_geneve, None, remote_ip_geneve, is_gre6=False, is_geneve=True
            )
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Invalid choice. Please select a valid option.")

# server 3


def gengrekharejone3nosec_editmulti_local():
    local_ip_private = local_ip("/etc/private3.sh")
    remote_ip_private = remote_ip("/etc/private3.sh")
    private_ip_private = private_ip1("/etc/private3.sh")

    local_ip_gre6 = local_ip("/etc/gre63.sh")
    remote_ip_gre6 = remote_ip("/etc/gre63.sh")
    private_ip_gre6 = private_gre6multi("/etc/gre63.sh")

    remote_ip_geneve = remote_ip("/etc/sys3.sh")
    private_ip_geneve = private_genmulti("/etc/sys3.sh")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("couldn't retrieve IP addresses from private file")
    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("couldn't retrieve IP addresses from gre6 file")
    if not remote_ip_geneve or not private_ip_geneve:
        print("couldn't retrieve IP addresses from geneve file")

    if (
        not local_ip_private
        or not remote_ip_private
        or not private_ip_private
        or not local_ip_gre6
        or not remote_ip_gre6
        or not private_ip_gre6
        or not remote_ip_geneve
        or not private_ip_geneve
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_privatekharejone3(
            local_ip_private, remote_ip_private, private_ip_private
        )
        display_stuff_gre6(local_ip_gre6, remote_ip_gre6, private_ip_gre6)
        display_stuff_geneve_greiran(remote_ip_geneve, private_ip_geneve)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mGeneve GRE6\033[93m Kharej Menu\033[0m")
        print('\033[92m "-"\033[93m═══════════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej \033[92m IPV4\033[0m")
        print("2. \033[93mChange \033[97mIRAN [3] \033[92m IPV4\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[93mChange \033[97mGRE6 \033[93mPrivate IPV6\033[0m")
        print("5. \033[93mChange \033[97mGeneve \033[93mPrivate IPV6\033[0m")
        print("6. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to edit local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_private = new_ip
                ip_parts = new_ip.split(":")
                if new_ip.endswith(":2"):
                    ip_parts[-1] = "1"
                else:
                    ip_parts[-1] = "2"
                counterpart_ip = ":".join(ip_parts)
                local_ip_gre6 = new_ip
                remote_ip_gre6 = counterpart_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[GRE6]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_gre6 = new_ip
                remote_ip_geneve = wtb_opposite_ip_gengrenosec(new_ip)
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "5":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[Geneve]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_geneve = new_ip
                save_stuff_gengrenosec3(
                    private_ip_geneve,
                    None,
                    remote_ip_geneve,
                    is_gre6=False,
                    is_geneve=True,
                )
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mKharej\033[93m Public IP :\033[0m ")
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input("\033[93mEnter \033[92mIRAN [3]\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "6":
            save_stuff_gengrenosec3(
                private_ip_private, local_ip_private, remote_ip_private, is_gre6=False
            )
            save_stuff_gengrenosec3(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            save_stuff_gengrenosec3(
                private_ip_geneve, None, remote_ip_geneve, is_gre6=False, is_geneve=True
            )
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Invalid choice. Please select a valid option.")


def gengreiranfive3nosec_editmulti_local():
    local_ip_private = local_ip("/etc/private3.sh")
    remote_ip_private = remote_ip("/etc/private3.sh")
    private_ip_private = private_ip1("/etc/private3.sh")

    local_ip_gre6 = local_ip("/etc/gre63.sh")
    remote_ip_gre6 = remote_ip("/etc/gre63.sh")
    private_ip_gre6 = private_gre6multi("/etc/gre63.sh")

    remote_ip_geneve = remote_ip("/etc/sys3.sh")
    private_ip_geneve = private_genmulti("/etc/sys3.sh")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("couldn't retrieve IP addresses from private file")
    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("couldn't retrieve IP addresses from gre6 file")
    if not remote_ip_geneve or not private_ip_geneve:
        print("couldn't retrieve IP addresses from geneve file")

    if (
        not local_ip_private
        or not remote_ip_private
        or not private_ip_private
        or not local_ip_gre6
        or not remote_ip_gre6
        or not private_ip_gre6
        or not remote_ip_geneve
        or not private_ip_geneve
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_privateiranfive3(
            local_ip_private, remote_ip_private, private_ip_private
        )
        display_stuff_gre6(local_ip_gre6, remote_ip_gre6, private_ip_gre6)
        display_stuff_geneve_greiran(remote_ip_geneve, private_ip_geneve)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mGeneve GRE6\033[93m IRAN [3] Menu\033[0m")
        print('\033[92m "-"\033[93m═══════════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN [3] \033[92m IPV4\033[0m")
        print("2. \033[93mChange \033[97mKharej \033[92m IPV4\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[93mChange \033[97mGRE6 \033[93mPrivate IPV6\033[0m")
        print("5. \033[93mChange \033[97mGeneve \033[93mPrivate IPV6\033[0m")
        print("6. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to edit local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_private = new_ip
                ip_parts = new_ip.split(":")
                if new_ip.endswith(":2"):
                    ip_parts[-1] = "1"
                else:
                    ip_parts[-1] = "2"
                counterpart_ip = ":".join(ip_parts)
                local_ip_gre6 = new_ip
                remote_ip_gre6 = counterpart_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[GRE6]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_gre6 = new_ip
                remote_ip_geneve = wtb_opposite_ipgregen(new_ip)
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "5":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[Geneve]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_geneve = new_ip
                save_stuff_gengrenosec3(
                    private_ip_geneve,
                    None,
                    remote_ip_geneve,
                    is_gre6=False,
                    is_geneve=True,
                )
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mIRAN [3]\033[93m Public IP :\033[0m ")
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input("\033[93mEnter \033[92mKharej\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "6":
            save_stuff_gengrenosec3(
                private_ip_private, local_ip_private, remote_ip_private, is_gre6=False
            )
            save_stuff_gengrenosec3(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            save_stuff_gengrenosec3(
                private_ip_geneve, None, remote_ip_geneve, is_gre6=False, is_geneve=True
            )
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Invalid choice. Please select a valid option.")


# server 4


def gengrekharejone4nosec_editmulti_local():
    local_ip_private = local_ip("/etc/private4.sh")
    remote_ip_private = remote_ip("/etc/private4.sh")
    private_ip_private = private_ip1("/etc/private4.sh")

    local_ip_gre6 = local_ip("/etc/gre64.sh")
    remote_ip_gre6 = remote_ip("/etc/gre64.sh")
    private_ip_gre6 = private_gre6multi("/etc/gre64.sh")

    remote_ip_geneve = remote_ip("/etc/sys4.sh")
    private_ip_geneve = private_genmulti("/etc/sys4.sh")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("couldn't retrieve IP addresses from private file")
    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("couldn't retrieve IP addresses from gre6 file")
    if not remote_ip_geneve or not private_ip_geneve:
        print("couldn't retrieve IP addresses from geneve file")

    if (
        not local_ip_private
        or not remote_ip_private
        or not private_ip_private
        or not local_ip_gre6
        or not remote_ip_gre6
        or not private_ip_gre6
        or not remote_ip_geneve
        or not private_ip_geneve
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_privatekharejone4(
            local_ip_private, remote_ip_private, private_ip_private
        )
        display_stuff_gre6(local_ip_gre6, remote_ip_gre6, private_ip_gre6)
        display_stuff_geneve_greiran(remote_ip_geneve, private_ip_geneve)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mGeneve GRE6\033[93m Kharej Menu\033[0m")
        print('\033[92m "-"\033[93m═══════════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej \033[92m IPV4\033[0m")
        print("2. \033[93mChange \033[97mIRAN [4] \033[92m IPV4\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[93mChange \033[97mGRE6 \033[93mPrivate IPV6\033[0m")
        print("5. \033[93mChange \033[97mGeneve \033[93mPrivate IPV6\033[0m")
        print("6. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to edit local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_private = new_ip
                ip_parts = new_ip.split(":")
                if new_ip.endswith(":2"):
                    ip_parts[-1] = "1"
                else:
                    ip_parts[-1] = "2"
                counterpart_ip = ":".join(ip_parts)
                local_ip_gre6 = new_ip
                remote_ip_gre6 = counterpart_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[GRE6]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_gre6 = new_ip
                remote_ip_geneve = wtb_opposite_ip_gengrenosec(new_ip)
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "5":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[Geneve]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_geneve = new_ip
                save_stuff_gengrenosec4(
                    private_ip_geneve,
                    None,
                    remote_ip_geneve,
                    is_gre6=False,
                    is_geneve=True,
                )
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mKharej\033[93m Public IP :\033[0m ")
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input("\033[93mEnter \033[92mIRAN [4]\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "6":
            save_stuff_gengrenosec4(
                private_ip_private, local_ip_private, remote_ip_private, is_gre6=False
            )
            save_stuff_gengrenosec4(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            save_stuff_gengrenosec4(
                private_ip_geneve, None, remote_ip_geneve, is_gre6=False, is_geneve=True
            )
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Invalid choice. Please select a valid option.")


def gengreiranfive4nosec_editmulti_local():
    local_ip_private = local_ip("/etc/private4.sh")
    remote_ip_private = remote_ip("/etc/private4.sh")
    private_ip_private = private_ip1("/etc/private4.sh")

    local_ip_gre6 = local_ip("/etc/gre64.sh")
    remote_ip_gre6 = remote_ip("/etc/gre64.sh")
    private_ip_gre6 = private_gre6multi("/etc/gre64.sh")

    remote_ip_geneve = remote_ip("/etc/sys4.sh")
    private_ip_geneve = private_genmulti("/etc/sys4.sh")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("couldn't retrieve IP addresses from private file")
    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("couldn't retrieve IP addresses from gre6 file")
    if not remote_ip_geneve or not private_ip_geneve:
        print("couldn't retrieve IP addresses from geneve file")

    if (
        not local_ip_private
        or not remote_ip_private
        or not private_ip_private
        or not local_ip_gre6
        or not remote_ip_gre6
        or not private_ip_gre6
        or not remote_ip_geneve
        or not private_ip_geneve
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_privateiranfive4(
            local_ip_private, remote_ip_private, private_ip_private
        )
        display_stuff_gre6(local_ip_gre6, remote_ip_gre6, private_ip_gre6)
        display_stuff_geneve_greiran(remote_ip_geneve, private_ip_geneve)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mGeneve GRE6\033[93m IRAN [4] Menu\033[0m")
        print('\033[92m "-"\033[93m═══════════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN [4] \033[92m IPV4\033[0m")
        print("2. \033[93mChange \033[97mKharej \033[92m IPV4\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[93mChange \033[97mGRE6 \033[93mPrivate IPV6\033[0m")
        print("5. \033[93mChange \033[97mGeneve \033[93mPrivate IPV6\033[0m")
        print("6. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to edit local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_private = new_ip
                ip_parts = new_ip.split(":")
                if new_ip.endswith(":2"):
                    ip_parts[-1] = "1"
                else:
                    ip_parts[-1] = "2"
                counterpart_ip = ":".join(ip_parts)
                local_ip_gre6 = new_ip
                remote_ip_gre6 = counterpart_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[GRE6]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_gre6 = new_ip
                remote_ip_geneve = wtb_opposite_ipgregen(new_ip)
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "5":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[Geneve]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_geneve = new_ip
                save_stuff_gengrenosec4(
                    private_ip_geneve,
                    None,
                    remote_ip_geneve,
                    is_gre6=False,
                    is_geneve=True,
                )
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mIRAN [4]\033[93m Public IP :\033[0m ")
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input("\033[93mEnter \033[92mKharej\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "6":
            save_stuff_gengrenosec4(
                private_ip_private, local_ip_private, remote_ip_private, is_gre6=False
            )
            save_stuff_gengrenosec4(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            save_stuff_gengrenosec4(
                private_ip_geneve, None, remote_ip_geneve, is_gre6=False, is_geneve=True
            )
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Invalid choice. Please select a valid option.")


# server 5


def gengrekharejone5nosec_editmulti_local():
    local_ip_private = local_ip("/etc/private5.sh")
    remote_ip_private = remote_ip("/etc/private5.sh")
    private_ip_private = private_ip1("/etc/private5.sh")

    local_ip_gre6 = local_ip("/etc/gre65.sh")
    remote_ip_gre6 = remote_ip("/etc/gre65.sh")
    private_ip_gre6 = private_gre6multi("/etc/gre65.sh")

    remote_ip_geneve = remote_ip("/etc/sys5.sh")
    private_ip_geneve = private_genmulti("/etc/sys5.sh")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("couldn't retrieve IP addresses from private file")
    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("couldn't retrieve IP addresses from gre6 file")
    if not remote_ip_geneve or not private_ip_geneve:
        print("couldn't retrieve IP addresses from geneve file")

    if (
        not local_ip_private
        or not remote_ip_private
        or not private_ip_private
        or not local_ip_gre6
        or not remote_ip_gre6
        or not private_ip_gre6
        or not remote_ip_geneve
        or not private_ip_geneve
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_privatekharejone5(
            local_ip_private, remote_ip_private, private_ip_private
        )
        display_stuff_gre6(local_ip_gre6, remote_ip_gre6, private_ip_gre6)
        display_stuff_geneve_greiran(remote_ip_geneve, private_ip_geneve)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mGeneve GRE6\033[93m Kharej Menu\033[0m")
        print('\033[92m "-"\033[93m═══════════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej \033[92m IPV4\033[0m")
        print("2. \033[93mChange \033[97mIRAN [5] \033[92m IPV4\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[93mChange \033[97mGRE6 \033[93mPrivate IPV6\033[0m")
        print("5. \033[93mChange \033[97mGeneve \033[93mPrivate IPV6\033[0m")
        print("6. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to edit local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_private = new_ip
                ip_parts = new_ip.split(":")
                if new_ip.endswith(":2"):
                    ip_parts[-1] = "1"
                else:
                    ip_parts[-1] = "2"
                counterpart_ip = ":".join(ip_parts)
                local_ip_gre6 = new_ip
                remote_ip_gre6 = counterpart_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[GRE6]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_gre6 = new_ip
                remote_ip_geneve = wtb_opposite_ip_gengrenosec(new_ip)
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "5":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[Geneve]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_geneve = new_ip
                save_stuff_gengrenosec5(
                    private_ip_geneve,
                    None,
                    remote_ip_geneve,
                    is_gre6=False,
                    is_geneve=True,
                )
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mKharej\033[93m Public IP :\033[0m ")
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input("\033[93mEnter \033[92mIRAN [5]\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "6":
            save_stuff_gengrenosec5(
                private_ip_private, local_ip_private, remote_ip_private, is_gre6=False
            )
            save_stuff_gengrenosec5(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            save_stuff_gengrenosec5(
                private_ip_geneve, None, remote_ip_geneve, is_gre6=False, is_geneve=True
            )
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Invalid choice. Please select a valid option.")


def gengreiranfive5nosec_editmulti_local():
    local_ip_private = local_ip("/etc/private5.sh")
    remote_ip_private = remote_ip("/etc/private5.sh")
    private_ip_private = private_ip1("/etc/private5.sh")

    local_ip_gre6 = local_ip("/etc/gre65.sh")
    remote_ip_gre6 = remote_ip("/etc/gre65.sh")
    private_ip_gre6 = private_gre6multi("/etc/gre65.sh")

    remote_ip_geneve = remote_ip("/etc/sys5.sh")
    private_ip_geneve = private_genmulti("/etc/sys5.sh")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("couldn't retrieve IP addresses from private file")
    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("couldn't retrieve IP addresses from gre6 file")
    if not remote_ip_geneve or not private_ip_geneve:
        print("couldn't retrieve IP addresses from geneve file")

    if (
        not local_ip_private
        or not remote_ip_private
        or not private_ip_private
        or not local_ip_gre6
        or not remote_ip_gre6
        or not private_ip_gre6
        or not remote_ip_geneve
        or not private_ip_geneve
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_privateiranfive5(
            local_ip_private, remote_ip_private, private_ip_private
        )
        display_stuff_gre6(local_ip_gre6, remote_ip_gre6, private_ip_gre6)
        display_stuff_geneve_greiran(remote_ip_geneve, private_ip_geneve)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mGeneve GRE6\033[93m IRAN [5] Menu\033[0m")
        print('\033[92m "-"\033[93m═══════════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN [5] \033[92m IPV4\033[0m")
        print("2. \033[93mChange \033[97mKharej \033[92m IPV4\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[93mChange \033[97mGRE6 \033[93mPrivate IPV6\033[0m")
        print("5. \033[93mChange \033[97mGeneve \033[93mPrivate IPV6\033[0m")
        print("6. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to edit local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_private = new_ip
                ip_parts = new_ip.split(":")
                if new_ip.endswith(":2"):
                    ip_parts[-1] = "1"
                else:
                    ip_parts[-1] = "2"
                counterpart_ip = ":".join(ip_parts)
                local_ip_gre6 = new_ip
                remote_ip_gre6 = counterpart_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[GRE6]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_gre6 = new_ip
                remote_ip_geneve = wtb_opposite_ipgregen(new_ip)
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "5":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[Geneve]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_geneve = new_ip
                save_stuff_gengrenosec5(
                    private_ip_geneve,
                    None,
                    remote_ip_geneve,
                    is_gre6=False,
                    is_geneve=True,
                )
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mIRAN [5]\033[93m Public IP :\033[0m ")
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input("\033[93mEnter \033[92mKharej\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "6":
            save_stuff_gengrenosec5(
                private_ip_private, local_ip_private, remote_ip_private, is_gre6=False
            )
            save_stuff_gengrenosec5(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            save_stuff_gengrenosec5(
                private_ip_geneve, None, remote_ip_geneve, is_gre6=False, is_geneve=True
            )
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Invalid choice. Please select a valid option.")


def gengresec_multiedit_local():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print("\033[92m(   ) \033[92mEdit local\033[93m Geneve Gre6 IPSEC Menu\033[0m")
    print('\033[92m "-"\033[93m═════════════════════════════════════════════\033[0m')
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[96mKharej\033[92m[5] \033[93mIRAN\033[92m[1]\033[0m")
    print("2. \033[96mKharej\033[92m[1] \033[93mIRAN\033[92m[5]  \033[0m")
    print("3. \033[94mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        choice = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if choice == "1":
            gengresec_edit_localkharej_multi()
            break
        elif choice == "2":
            gengresec_edit_localiran_multi()
            break
        elif choice == "3":
            clear()
            gengre_multiedit_local()
            break
        else:
            print("Invalid choice.")


def gengresec_edit_localiran_multi():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print(
        "\033[92m(   ) \033[93mGeneve GRE6 IPSEC \033[92m[5]IRAN\033[96m [1]Kharej\033[93m Menu\033[0m"
    )
    print(
        '\033[92m "-"\033[93m══════════════════════════════════════════════════════════\033[0m'
    )
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[92mIRAN[1]\033[0m")
    print("2. \033[92mIRAN[2]\033[0m")
    print("3. \033[93mIRAN[3]\033[0m")
    print("4. \033[92mIRAN[4]\033[0m")
    print("5. \033[92mIRAN[5]\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    print("6. \033[93mKharej Menu\033[0m")
    print("0. \033[94mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if server_type == "1":
            gengreiranfive1sec_editmulti_local()
            break
        elif server_type == "2":
            gengreiranfive2sec_editmulti_local()
            break
        elif server_type == "3":
            gengreiranfive3sec_editmulti_local()
            break
        elif server_type == "4":
            gengreiranfive4sec_editmulti_local()
            break
        elif server_type == "5":
            gengreiranfive5sec_editmulti_local()
            break
        elif server_type == "6":
            gengrekharejonesec_editmulti_localmenu()
            break
        elif server_type == "0":
            os.system("clear")
            gengresec_multiedit_local()
            break
        else:
            print("Invalid choice.")


def gengrekharejonesec_editmulti_localmenu():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print(
        "\033[92m(   ) \033[93mGenve GRE6 IPSEC \033[92m[5]IRAN\033[96m [1]Kharej\033[93m Menu\033[0m"
    )
    print(
        '\033[92m "-"\033[93m══════════════════════════════════════════════════════════\033[0m'
    )
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mThis is Kharej menu:\033[0m")
    print("1. \033[92mServer[1]\033[0m")
    print("2. \033[92mServer[2]\033[0m")
    print("3. \033[93mServer[3]\033[0m")
    print("4. \033[92mServer[4]\033[0m")
    print("5. \033[92mServer[5]\033[0m")
    print("0. \033[94mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if server_type == "1":
            gengrekharejone1sec_editmulti_local()
            break
        elif server_type == "2":
            gengrekharejone2sec_editmulti_local()
            break
        elif server_type == "3":
            gengrekharejone3sec_editmulti_local()
            break
        elif server_type == "4":
            gengrekharejone4sec_editmulti_local()
            break
        elif server_type == "5":
            gengrekharejone5sec_editmulti_local()
            break
        elif server_type == "0":
            os.system("clear")
            gengresec_multiedit_local()
            break
        else:
            print("Invalid choice.")


def gengresec_edit_localkharej_multi():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print(
        "\033[92m(   ) \033[93mGeneve GRE6 IPSEC \033[92m[5]Kharej\033[96m [1]IRAN\033[93m Menu\033[0m"
    )
    print(
        '\033[92m "-"\033[93m══════════════════════════════════════════════════════════\033[0m'
    )
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[92mKharej[1]\033[0m")
    print("2. \033[92mKharej[2]\033[0m")
    print("3. \033[93mKharej[3]\033[0m")
    print("4. \033[92mKharej[4]\033[0m")
    print("5. \033[92mKharej[5]\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    print("6.\033[93mIRAN Menu\033[0m")
    print("0. \033[94mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if server_type == "1":
            gengrekharej1sec_editmulti_local()
            break
        elif server_type == "2":
            gengrekharej2sec_editmulti_local()
            break
        elif server_type == "3":
            gengrekharej3sec_editmulti_local()
            break
        elif server_type == "4":
            gengrekharej4sec_editmulti_local()
            break
        elif server_type == "5":
            gengrekharej5sec_editmulti_local()
            break
        elif server_type == "6":
            gengreiransec_editmulti_local()
            break
        elif server_type == "0":
            os.system("clear")
            gengresec_multiedit_local()
            break
        else:
            print("Invalid choice.")


def gengreiransec_editmulti_local():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print(
        "\033[92m(   ) \033[93mGeneve GRE6 IPSEC \033[92m[5]Kharej\033[96m [1]IRAN\033[93m Menu\033[0m"
    )
    print(
        '\033[92m "-"\033[93m══════════════════════════════════════════════════════════\033[0m'
    )
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mThis is IRAN menu:\033[0m")
    print("1. \033[92mServer[1]\033[0m")
    print("2. \033[92mServer[2]\033[0m")
    print("3. \033[93mServer[3]\033[0m")
    print("4. \033[92mServer[4]\033[0m")
    print("5. \033[92mServer[5]\033[0m")
    print("0. \033[94mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if server_type == "1":
            gengreir1sec_editmulti_local()
            break
        elif server_type == "2":
            gengreir2sec_editmulti_local()
            break
        elif server_type == "3":
            gengreir3sec_editmulti_local()
            break
        elif server_type == "4":
            gengreir4sec_editmulti_local()
            break
        elif server_type == "5":
            gengreir5sec_editmulti_local()
            break
        elif server_type == "0":
            os.system("clear")
            gengresec_multiedit_local()
            break
        else:
            print("Invalid choice.")


def update_pingfilegregen(name, ip, update_type):
    try:
        with open(name, "r") as f:
            content = f.read()

        if update_type == "geneve":
            new_content = re.sub(r"remote \S+", f"remote {ip}", content)
        elif update_type == "geneve_opposite":
            opposite_ip = wtb_opposite_ipgregen(ip)
            new_content = re.sub(r"remote \S+", f"remote {opposite_ip}", content)
        elif update_type == "ping_ip":
            new_content = re.sub(r'ip_address="[^"]+"', f'ip_address="{ip}"', content)
        elif update_type == "ping_v6":
            new_content = re.sub(r'ip_address="[^"]+"', f'ip_address="{ip}"', content)
        elif update_type == "ping_sys_opposite":
            new_content = re.sub(r'ip_address="[^"]+"', f'ip_address="{ip}"', content)
        else:
            print("\033[91mInvalid update type for pingfile\033[0m")
            return

        with open(name, "w") as f:
            f.write(new_content)
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def wtb_opposite_ipgregen(ip):
    ip_parts = ip.split(":")
    if ip.endswith(":1"):
        ip_parts[-1] = "2"
    else:
        ip_parts[-1] = "1"
    return ":".join(ip_parts)


def display_ipsecsecretgengre(secret_key):
    print(f"\033[97m──────────────────────────────────────\033[0m")
    print(f"\033[93m IPsec Key:  \033[97m{secret_key}\033[0m")
    print(f"\033[97m──────────────────────────────────────\033[0m")


def update_ipsecsecret(name, new_key):
    try:
        with open(name, "r") as f:
            content = f.read()

        new_content = re.sub(r'PSK ".*"', f'PSK "{new_key}"', content)

        with open(name, "w") as f:
            f.write(new_content)
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def update_ipsec_config_leftsubnet(name, new_private_ip):
    try:
        with open(name, "r") as f:
            content = f.readlines()

        ip_parts = new_private_ip.split(":")
        if new_private_ip.endswith(":2"):
            ip_parts[-1] = "1"
        else:
            ip_parts[-1] = "2"
        counterpart_ip = ":".join(ip_parts)

        new_content = []
        for line in content:
            line = re.sub(r"leftsubnet=\S+", f"leftsubnet={new_private_ip}/64", line)
            line = re.sub(r"leftid=\S+", f"leftid={new_private_ip}", line)
            line = re.sub(r"right=\S+", f"right={counterpart_ip}", line)
            line = re.sub(r"rightsubnet=\S+", f"rightsubnet={counterpart_ip}/64", line)
            new_content.append(line)

        with open(name, "w") as f:
            f.writelines(new_content)

        print(f"\033[92mIPsec configuration updated successfully\033[0m")
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mUnexpected error: {e}\033[0m")


# server 1
def get_current_private_ipsgregen1():
    private_ip_private = private_ip1("/etc/private1.sh")
    private_ip_gre6 = private_gre6multi("/etc/gre61.sh")
    private_ip_geneve = private_genmulti("/etc/sys1.sh")
    return {
        "private": private_ip_private,
        "gre6": private_ip_gre6,
        "geneve": private_ip_geneve,
    }


def update_ipfilegregen1(name, new_ip, update_type):
    try:
        with open(name, "r") as f:
            content = f.read()

        if update_type == "private":
            new_content = re.sub(
                r"ip (-6 )?addr add [^ ]+/64 dev azumi?",
                f"ip -6 addr add {new_ip}/64 dev azumi",
                content,
            )
            ip_parts = new_ip.split(":")
            if new_ip.endswith(":2"):
                ip_parts[-1] = "1"
            else:
                ip_parts[-1] = "2"
            counterpart_ip = ":".join(ip_parts)
            new_content = re.sub(
                r"ip (-6 )?route add [^ ]+/64 dev azumi?",
                f"ip -6 route add {counterpart_ip}/64 dev azumi",
                new_content,
            )

            update_ipfilegregen1("/etc/gre61.sh", new_ip, update_type="gre6_local")
            update_ipfilegregen1(
                "/etc/gre61.sh", counterpart_ip, update_type="gre6_remote"
            )
        elif update_type == "local":
            new_content = re.sub(r"local \S+", f"local {new_ip}", content)
        elif update_type == "remote":
            new_content = re.sub(r"remote \S+", f"remote {new_ip}", content)
        elif update_type == "gre6_local":
            new_content = re.sub(r"local \S+", f"local {new_ip}", content)
        elif update_type == "gre6_remote":
            new_content = re.sub(r"remote \S+", f"remote {new_ip}", content)
        elif update_type == "geneve_remote":
            new_content = re.sub(r"remote \S+", f"remote {new_ip}", content)
        elif update_type == "geneve_private":
            new_content = re.sub(
                r"ip addr add \S+/64 dev azumigen?",
                f"ip addr add {new_ip}/64 dev azumigen",
                content,
            )
            counterpart_ip = wtb_opposite_ipgregen(new_ip)
            new_content = re.sub(
                r"ip route add \S+/64 dev azumigen?",
                f"ip route add {counterpart_ip}/64 dev azumigen",
                new_content,
            )

        with open(name, "w") as f:
            f.write(new_content)
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def update_ipsec_confgengre1(name, new_private_ip):
    try:
        with open(name, "r") as f:
            content = f.readlines()

        start_idx, end_idx = None, None
        for i, line in enumerate(content):
            if line.strip() == "conn Geneve1":
                start_idx = i
            elif start_idx is not None and line.strip().startswith("conn "):
                end_idx = i
                break

        if start_idx is None:
            print("\033[91m'conn Geneve1' section not found\033[0m")
            return

        if end_idx is None:
            end_idx = len(content)

        section = content[start_idx:end_idx]
        ip_parts = new_private_ip.split(":")
        if new_private_ip.endswith(":2"):
            ip_parts[-1] = "1"
        else:
            ip_parts[-1] = "2"
        counterpart_ip = ":".join(ip_parts)

        new_section = []
        for line in section:
            line = re.sub(r"leftsubnet=\S+", f"leftsubnet={new_private_ip}/64", line)
            line = re.sub(r"leftid=\S+", f"leftid={new_private_ip}", line)
            line = re.sub(r"right=\S+", f"right={counterpart_ip}", line)
            line = re.sub(r"rightsubnet=\S+", f"rightsubnet={counterpart_ip}/64", line)
            new_section.append(line)

        new_content = content[:start_idx] + new_section + content[end_idx:]

        with open(name, "w") as f:
            f.writelines(new_content)

        print(f"\033[92m'conn Geneve1' section updated successfully\033[0m")
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def save_stuff_gregen1_iran(
    new_private_ip, local_ip, remote_ip, is_gre6, is_geneve=False
):
    current_ips = get_current_private_ipsgregen1()

    if is_gre6:
        current_ip = current_ips["gre6"]
    elif is_geneve:
        current_ip = current_ips["geneve"]
    else:
        current_ip = current_ips["private"]

    if current_ip:
        delete_ufw_rules(current_ip)

    add_ufw_rules(new_private_ip)

    counterpart_ip = wtb_opposite_ipgregen(new_private_ip)

    try:
        if is_gre6:
            update_pingfilegregen(
                "/etc/ping_ip1.sh", counterpart_ip, update_type="ping_ip"
            )
            update_ipfilegregen1("/etc/gre61.sh", new_private_ip, update_type="private")
            update_ipfilegregen1("/etc/gre61.sh", remote_ip, update_type="remote")
            update_ipfilegregen1(
                "/etc/sys1.sh", counterpart_ip, update_type="geneve_remote"
            )
            update_pingfilegregen("/etc/ping1_sys.sh", remote_ip, update_type="geneve")
            update_pingfilegregen(
                "/etc/ping1_sys.sh", counterpart_ip, update_type="geneve_opposite"
            )
        elif is_geneve:
            update_ipfilegregen1(
                "/etc/sys1.sh", new_private_ip, update_type="geneve_private"
            )
            update_pingfilegregen(
                "/etc/ping1_sys.sh", counterpart_ip, update_type="ping_sys_opposite"
            )
            update_ipsec_confgengre1("/etc/ipsec1.conf", new_private_ip)
        else:
            update_pingfilegregen(
                "/etc/ping_v61.sh", counterpart_ip, update_type="ping_v6"
            )
            update_ipfilegregen1(
                "/etc/private1.sh", new_private_ip, update_type="private"
            )
            update_ipfilegregen1("/etc/private1.sh", local_ip, update_type="local")
            update_ipfilegregen1("/etc/private1.sh", remote_ip, update_type="remote")
            update_ipfilegregen1(
                "/etc/gre61.sh", counterpart_ip, update_type="gre6_remote"
            )
            update_pingfilegregen(
                "/etc/ping1_sys.sh", counterpart_ip, update_type="ping_sys_opposite"
            )

        interface = "azumig61" if is_gre6 else "azumi1"
        if is_geneve:
            interface = "azumigen1"

        try:
            subprocess.run(["ip", "link", "set", "dev", interface, "down"], check=True)
            subprocess.run(["ip", "link", "delete", interface], check=True)
        except subprocess.CalledProcessError:
            print("\033[91merror bringing interface down or deleting it\033[0m")

        script = "/etc/gre61.sh" if is_gre6 else "/etc/private1.sh"
        if is_geneve:
            script = "/etc/sys1.sh"
        result = subprocess.run(["/bin/bash", script], capture_output=True, text=True)
        if "RTNETLINK answers: File exists" in result.stderr:
            print("\033[91madditional ip already exists. Ignoring this error\033[0m")
        else:
            result.check_returncode()

        subprocess.run(["sudo", "systemctl", "daemon-reload"], check=True)

        try:
            subprocess.run(["systemctl", "restart", "ping_v61"], check=True)
            print("\033[92m✔ ping_v61 service restarted successfully!\033[0m")
        except subprocess.CalledProcessError as e:
            if "Unit ping_v61 not found" in (e.stderr or ""):
                print("\033[91mcouldn't restart ping_v61\033[0m")

        try:
            subprocess.run(["sudo", "systemctl", "restart", "ping1_gen"], check=True)
            print("\033[92m✔ ping1_gen service restarted successfully!\033[0m")
        except subprocess.CalledProcessError as e:
            if "Unit ping1_gen not found" in (e.stderr or ""):
                print("\033[91mcouldn't restart ping_gen\033[0m")

        try:
            subprocess.run(["sudo", "systemctl", "restart", "ping_ip1"], check=True)
            print("\033[92m✔ ping_ip1 service restarted successfully!\033[0m")
        except subprocess.CalledProcessError as e:
            if "Unit ping_ip1 not found" in (e.stderr or ""):
                print("\033[91mcouldn't restart ping_ip1\033[0m")

        subprocess.run(["systemctl", "restart", "strong-azumi1"], check=True)

        result = subprocess.run(
            ["systemctl", "list-units", "--full", "--all", "strong-azumi1.service"],
            capture_output=True,
            text=True,
        )
        if "strong-azumi1.service" in result.stdout:
            subprocess.run(["systemctl", "restart", "strong-azumi1"], check=True)
        else:
            print("\033[91mstrong service not found. don't mind this error\033[0m")

    except subprocess.CalledProcessError:
        print(
            "\033[91merror in applying network changes : gen gre related error\033[0m"
        )
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")
    print(
        f"\033[92m✔ Changes saved and {interface} interface updated successfully!\033[0m"
    )


def save_stuff_gregen1_kharej(
    new_private_ip, local_ip, remote_ip, is_gre6, is_geneve=False
):
    current_ips = get_current_private_ipsgregen1()

    if is_gre6:
        current_ip = current_ips["gre6"]
    elif is_geneve:
        current_ip = current_ips["geneve"]
    else:
        current_ip = current_ips["private"]

    if current_ip:
        delete_ufw_rules(current_ip)

    add_ufw_rules(new_private_ip)

    counterpart_ip = wtb_opposite_ipgregen(new_private_ip)

    try:
        if is_gre6:
            update_pingfilegregen(
                "/etc/ping_ip1.sh", counterpart_ip, update_type="ping_ip"
            )
            update_ipfilegregen1("/etc/gre61.sh", new_private_ip, update_type="private")
            update_ipfilegregen1("/etc/gre61.sh", remote_ip, update_type="remote")
            update_ipfilegregen1(
                "/etc/sys1.sh", counterpart_ip, update_type="geneve_remote"
            )
            update_pingfilegregen("/etc/ping1_sys.sh", remote_ip, update_type="geneve")
            update_pingfilegregen(
                "/etc/ping1_sys.sh", counterpart_ip, update_type="geneve_opposite"
            )
        elif is_geneve:
            update_ipfilegregen1(
                "/etc/sys1.sh", new_private_ip, update_type="geneve_private"
            )
            update_pingfilegregen(
                "/etc/ping1_sys.sh", counterpart_ip, update_type="ping_sys_opposite"
            )
            update_ipsec_config_leftsubnet("/etc/ipsec1.conf", new_private_ip)
        else:
            update_pingfilegregen(
                "/etc/ping_v61.sh", counterpart_ip, update_type="ping_v6"
            )
            update_ipfilegregen1(
                "/etc/private1.sh", new_private_ip, update_type="private"
            )
            update_ipfilegregen1("/etc/private1.sh", local_ip, update_type="local")
            update_ipfilegregen1("/etc/private1.sh", remote_ip, update_type="remote")
            update_ipfilegregen1(
                "/etc/gre61.sh", counterpart_ip, update_type="gre6_remote"
            )
            update_pingfilegregen(
                "/etc/ping1_sys.sh", counterpart_ip, update_type="ping_sys_opposite"
            )

        interface = "azumig61" if is_gre6 else "azumi1"
        if is_geneve:
            interface = "azumigen1"

        try:
            subprocess.run(["ip", "link", "set", "dev", interface, "down"], check=True)
            subprocess.run(["ip", "link", "delete", interface], check=True)
        except subprocess.CalledProcessError:
            print("\033[91merror bringing interface down or deleting it\033[0m")

        script = "/etc/gre61.sh" if is_gre6 else "/etc/private1.sh"
        if is_geneve:
            script = "/etc/sys1.sh"
        result = subprocess.run(["/bin/bash", script], capture_output=True, text=True)
        if "RTNETLINK answers: File exists" in result.stderr:
            print("\033[91madditional ip already exists. Ignoring this error\033[0m")
        else:
            result.check_returncode()

        subprocess.run(["sudo", "systemctl", "daemon-reload"], check=True)

        try:
            subprocess.run(["systemctl", "restart", "ping_v61"], check=True)
            print("\033[92m✔ ping_v61 service restarted successfully!\033[0m")
        except subprocess.CalledProcessError as e:
            if "Unit ping_v61 not found" in (e.stderr or ""):
                print("\033[91mcouldn't restart ping_v61\033[0m")

        try:
            subprocess.run(["sudo", "systemctl", "restart", "ping1_gen"], check=True)
            print("\033[92m✔ ping1_gen service restarted successfully!\033[0m")
        except subprocess.CalledProcessError as e:
            if "Unit ping1_gen not found" in (e.stderr or ""):
                print("\033[91mcouldn't restart ping_gen\033[0m")

        try:
            subprocess.run(["sudo", "systemctl", "restart", "ping_ip1"], check=True)
            print("\033[92m✔ ping_ip1 service restarted successfully!\033[0m")
        except subprocess.CalledProcessError as e:
            if "Unit ping_ip1 not found" in (e.stderr or ""):
                print("\033[91mcouldn't restart ping_ip1\033[0m")

        subprocess.run(["systemctl", "restart", "strong-azumi1"], check=True)

        result = subprocess.run(
            ["systemctl", "list-units", "--full", "--all", "strong-azumi1.service"],
            capture_output=True,
            text=True,
        )
        if "strong-azumi1.service" in result.stdout:
            subprocess.run(["systemctl", "restart", "strong-azumi1"], check=True)
        else:
            print("\033[91mstrong service not found. don't mind this error\033[0m")

    except subprocess.CalledProcessError:
        print(
            "\033[91merror in applying network changes : gen gre related error\033[0m"
        )
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")
    print(
        f"\033[92m✔ Changes saved and {interface} interface updated successfully!\033[0m"
    )


def gengreir1sec_editmulti_local():
    local_ip_private = local_ip("/etc/private1.sh")
    remote_ip_private = remote_ip("/etc/private1.sh")
    private_ip_private = private_ip1("/etc/private1.sh")

    local_ip_gre6 = local_ip("/etc/gre61.sh")
    remote_ip_gre6 = remote_ip("/etc/gre61.sh")
    private_ip_gre6 = private_gre6multi("/etc/gre61.sh")

    remote_ip_geneve = remote_ip("/etc/sys1.sh")
    private_ip_geneve = private_genmulti("/etc/sys1.sh")
    ipsecsecret = get_ipsecsecret("/etc/ipsec.secrets")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("couldn't retrieve IP addresses from private file")
    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("couldn't retrieve IP addresses from gre6 file")
    if not remote_ip_geneve or not private_ip_geneve:
        print("couldn't retrieve IP addresses from geneve file")

    if (
        not local_ip_private
        or not remote_ip_private
        or not private_ip_private
        or not local_ip_gre6
        or not remote_ip_gre6
        or not private_ip_gre6
        or not remote_ip_geneve
        or not private_ip_geneve
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_privateiran1(
            local_ip_private, remote_ip_private, private_ip_private
        )
        display_stuff_gre6(local_ip_gre6, remote_ip_gre6, private_ip_gre6)
        display_stuff_geneve_greiran(remote_ip_geneve, private_ip_geneve)
        display_ipsecsecretgengre(ipsecsecret)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mGeneve GRE6 + IPSEC\033[93m IRAN Menu\033[0m")
        print('\033[92m "-"\033[93m═══════════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN \033[92m IPV4\033[0m")
        print("2. \033[93mChange \033[97mKharej [1] \033[92m IPV4\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[93mChange \033[97mGRE6 \033[93mPrivate IPV6\033[0m")
        print("5. \033[93mChange \033[97mGeneve \033[93mPrivate IPV6\033[0m")
        print("6. \033[93mChange IPsec \033[92mSecret Key\033[0m")
        print("7. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to edit local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_private = new_ip
                ip_parts = new_ip.split(":")
                if new_ip.endswith(":2"):
                    ip_parts[-1] = "1"
                else:
                    ip_parts[-1] = "2"
                counterpart_ip = ":".join(ip_parts)
                local_ip_gre6 = new_ip
                remote_ip_gre6 = counterpart_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[GRE6]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_gre6 = new_ip
                remote_ip_geneve = wtb_opposite_ipgregen(new_ip)
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "5":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[Geneve]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_geneve = new_ip
                save_stuff_gregen1_iran(
                    private_ip_geneve,
                    None,
                    remote_ip_geneve,
                    ipsec_secret,
                    is_geneve=True,
                )
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mIRAN\033[93m Public IP :\033[0m ")
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mKharej [1]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "6":
            new_key = input(
                "\033[93mEnter new \033[92mIPsec \033[93mSecret Key: \033[0m"
            )
            if new_key:
                update_ipsecsecret("/etc/ipsec.secrets", new_key)
                ipsecsecret = new_key
            else:
                print("\033[91mCrazy Secret Key\033[0m")
        elif choice == "7":
            save_stuff_gregen1_iran(
                private_ip_private, local_ip_private, remote_ip_private, is_gre6=False
            )
            save_stuff_gregen1_iran(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            save_stuff_gregen1_iran(
                private_ip_geneve, None, remote_ip_geneve, is_gre6=False, is_geneve=True
            )
            update_ipsec_ip_multi(private_ip_geneve)
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Invalid choice. Please select a valid option.")


def gengrekharej1sec_editmulti_local():
    local_ip_private = local_ip("/etc/private1.sh")
    remote_ip_private = remote_ip("/etc/private1.sh")
    private_ip_private = private_ip1("/etc/private1.sh")

    local_ip_gre6 = local_ip("/etc/gre61.sh")
    remote_ip_gre6 = remote_ip("/etc/gre61.sh")
    private_ip_gre6 = private_gre6multi("/etc/gre61.sh")

    remote_ip_geneve = remote_ip("/etc/sys1.sh")
    private_ip_geneve = private_genmulti("/etc/sys1.sh")
    ipsecsecret = get_ipsecsecret("/etc/ipsec.secrets")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("couldn't retrieve IP addresses from private file")
    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("couldn't retrieve IP addresses from gre6 file")
    if not remote_ip_geneve or not private_ip_geneve:
        print("couldn't retrieve IP addresses from geneve file")

    if (
        not local_ip_private
        or not remote_ip_private
        or not private_ip_private
        or not local_ip_gre6
        or not remote_ip_gre6
        or not private_ip_gre6
        or not remote_ip_geneve
        or not private_ip_geneve
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_privatekharej1(
            local_ip_private, remote_ip_private, private_ip_private
        )
        display_stuff_gre6(local_ip_gre6, remote_ip_gre6, private_ip_gre6)
        display_stuff_geneve_greiran(remote_ip_geneve, private_ip_geneve)
        display_ipsecsecretgengre(ipsecsecret)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mGeneve GRE6 + IPSEC\033[93m Kharej [1] Menu\033[0m"
        )
        print('\033[92m "-"\033[93m═══════════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej [1] \033[92m IPV4\033[0m")
        print("2. \033[93mChange \033[97mIRAN \033[92m IPV4\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[93mChange \033[97mGRE6 \033[93mPrivate IPV6\033[0m")
        print("5. \033[93mChange \033[97mGeneve \033[93mPrivate IPV6\033[0m")
        print("6. \033[93mChange IPsec \033[92mSecret Key\033[0m")
        print("7. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to edit local single menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_private = new_ip
                ip_parts = new_ip.split(":")
                if new_ip.endswith(":2"):
                    ip_parts[-1] = "1"
                else:
                    ip_parts[-1] = "2"
                counterpart_ip = ":".join(ip_parts)
                local_ip_gre6 = new_ip
                remote_ip_gre6 = counterpart_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[GRE6]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_gre6 = new_ip
                remote_ip_geneve = wtb_opposite_ipgregen(new_ip)
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "5":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[Geneve]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_geneve = new_ip
                save_stuff_gregen1_kharej(
                    private_ip_geneve,
                    None,
                    remote_ip_geneve,
                    ipsec_secret,
                    is_geneve=True,
                )
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mKharej [1]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input("\033[93mEnter \033[92mIRAN\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "6":
            new_key = input(
                "\033[93mEnter new \033[92mIPsec \033[93mSecret Key: \033[0m"
            )
            if new_key:
                update_ipsecsecret("/etc/ipsec.secrets", new_key)
                ipsecsecret = new_key
            else:
                print("\033[91mCrazy Secret Key\033[0m")
        elif choice == "7":
            save_stuff_gregen1_kharej(
                private_ip_private, local_ip_private, remote_ip_private, is_gre6=False
            )
            save_stuff_gregen1_kharej(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            save_stuff_gregen1_kharej(
                private_ip_geneve, None, remote_ip_geneve, is_gre6=False, is_geneve=True
            )
            update_ipsec_ip(private_ip_geneve)
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Invalid choice. Please select a valid option.")


# server 2
def get_current_private_ipsgregen2():
    private_ip_private = private_ip1("/etc/private2.sh")
    private_ip_gre6 = private_gre6multi("/etc/gre62.sh")
    private_ip_geneve = private_genmulti("/etc/sys2.sh")
    return {
        "private": private_ip_private,
        "gre6": private_ip_gre6,
        "geneve": private_ip_geneve,
    }


def update_ipfilegregen2(name, new_ip, update_type):
    try:
        with open(name, "r") as f:
            content = f.read()

        if update_type == "private":
            new_content = re.sub(
                r"ip (-6 )?addr add [^ ]+/64 dev azumi?",
                f"ip -6 addr add {new_ip}/64 dev azumi",
                content,
            )
            ip_parts = new_ip.split(":")
            if new_ip.endswith(":2"):
                ip_parts[-1] = "1"
            else:
                ip_parts[-1] = "2"
            counterpart_ip = ":".join(ip_parts)
            new_content = re.sub(
                r"ip (-6 )?route add [^ ]+/64 dev azumi?",
                f"ip -6 route add {counterpart_ip}/64 dev azumi",
                new_content,
            )

            update_ipfilegregen2("/etc/gre62.sh", new_ip, update_type="gre6_local")
            update_ipfilegregen2(
                "/etc/gre62.sh", counterpart_ip, update_type="gre6_remote"
            )
        elif update_type == "local":
            new_content = re.sub(r"local \S+", f"local {new_ip}", content)
        elif update_type == "remote":
            new_content = re.sub(r"remote \S+", f"remote {new_ip}", content)
        elif update_type == "gre6_local":
            new_content = re.sub(r"local \S+", f"local {new_ip}", content)
        elif update_type == "gre6_remote":
            new_content = re.sub(r"remote \S+", f"remote {new_ip}", content)
        elif update_type == "geneve_remote":
            new_content = re.sub(r"remote \S+", f"remote {new_ip}", content)
        elif update_type == "geneve_private":
            new_content = re.sub(
                r"ip addr add \S+/64 dev azumigen?",
                f"ip addr add {new_ip}/64 dev azumigen",
                content,
            )
            counterpart_ip = wtb_opposite_ipgregen(new_ip)
            new_content = re.sub(
                r"ip route add \S+/64 dev azumigen?",
                f"ip route add {counterpart_ip}/64 dev azumigen",
                new_content,
            )

        with open(name, "w") as f:
            f.write(new_content)
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def update_ipsec_confgengre2(name, new_private_ip):
    try:
        with open(name, "r") as f:
            content = f.readlines()

        start_idx, end_idx = None, None
        for i, line in enumerate(content):
            if line.strip() == "conn Geneve2":
                start_idx = i
            elif start_idx is not None and line.strip().startswith("conn "):
                end_idx = i
                break

        if start_idx is None:
            print("\033[91m'conn Geneve2' section not found\033[0m")
            return

        if end_idx is None:
            end_idx = len(content)

        section = content[start_idx:end_idx]
        ip_parts = new_private_ip.split(":")
        if new_private_ip.endswith(":2"):
            ip_parts[-1] = "1"
        else:
            ip_parts[-1] = "2"
        counterpart_ip = ":".join(ip_parts)

        new_section = []
        for line in section:
            line = re.sub(r"leftsubnet=\S+", f"leftsubnet={new_private_ip}/64", line)
            line = re.sub(r"leftid=\S+", f"leftid={new_private_ip}", line)
            line = re.sub(r"right=\S+", f"right={counterpart_ip}", line)
            line = re.sub(r"rightsubnet=\S+", f"rightsubnet={counterpart_ip}/64", line)
            new_section.append(line)

        new_content = content[:start_idx] + new_section + content[end_idx:]

        with open(name, "w") as f:
            f.writelines(new_content)

        print(f"\033[92m'conn Geneve2' section updated successfully\033[0m")
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def save_stuff_gregen2_iran(
    new_private_ip, local_ip, remote_ip, is_gre6, is_geneve=False
):
    current_ips = get_current_private_ipsgregen2()

    if is_gre6:
        current_ip = current_ips["gre6"]
    elif is_geneve:
        current_ip = current_ips["geneve"]
    else:
        current_ip = current_ips["private"]

    if current_ip:
        delete_ufw_rules(current_ip)

    add_ufw_rules(new_private_ip)

    counterpart_ip = wtb_opposite_ipgregen(new_private_ip)

    try:
        if is_gre6:
            update_pingfilegregen(
                "/etc/ping_ip2.sh", counterpart_ip, update_type="ping_ip"
            )
            update_ipfilegregen2("/etc/gre62.sh", new_private_ip, update_type="private")
            update_ipfilegregen2("/etc/gre62.sh", remote_ip, update_type="remote")
            update_ipfilegregen2(
                "/etc/sys2.sh", counterpart_ip, update_type="geneve_remote"
            )
            update_pingfilegregen("/etc/ping2_sys.sh", remote_ip, update_type="geneve")
            update_pingfilegregen(
                "/etc/ping2_sys.sh", counterpart_ip, update_type="geneve_opposite"
            )
        elif is_geneve:
            update_ipfilegregen2(
                "/etc/sys2.sh", new_private_ip, update_type="geneve_private"
            )
            update_pingfilegregen(
                "/etc/ping2_sys.sh", counterpart_ip, update_type="ping_sys_opposite"
            )
            update_ipsec_confgengre2("/etc/ipsec1.conf", new_private_ip)
        else:
            update_pingfilegregen(
                "/etc/ping_v62.sh", counterpart_ip, update_type="ping_v6"
            )
            update_ipfilegregen2(
                "/etc/private2.sh", new_private_ip, update_type="private"
            )
            update_ipfilegregen2("/etc/private2.sh", local_ip, update_type="local")
            update_ipfilegregen2("/etc/private2.sh", remote_ip, update_type="remote")
            update_ipfilegregen2(
                "/etc/gre62.sh", counterpart_ip, update_type="gre6_remote"
            )
            update_pingfilegregen(
                "/etc/ping2_sys.sh", counterpart_ip, update_type="ping_sys_opposite"
            )

        interface = "azumig62" if is_gre6 else "azumi2"
        if is_geneve:
            interface = "azumigen2"

        try:
            subprocess.run(["ip", "link", "set", "dev", interface, "down"], check=True)
            subprocess.run(["ip", "link", "delete", interface], check=True)
        except subprocess.CalledProcessError:
            print("\033[91merror bringing interface down or deleting it\033[0m")

        script = "/etc/gre62.sh" if is_gre6 else "/etc/private2.sh"
        if is_geneve:
            script = "/etc/sys2.sh"
        result = subprocess.run(["/bin/bash", script], capture_output=True, text=True)
        if "RTNETLINK answers: File exists" in result.stderr:
            print("\033[91madditional ip already exists. Ignoring this error\033[0m")
        else:
            result.check_returncode()

        subprocess.run(["sudo", "systemctl", "daemon-reload"], check=True)

        try:
            subprocess.run(["systemctl", "restart", "ping_v62"], check=True)
            print("\033[92m✔ ping_v62 service restarted successfully!\033[0m")
        except subprocess.CalledProcessError as e:
            if "Unit ping_v62 not found" in (e.stderr or ""):
                print("\033[91mcouldn't restart ping_v62\033[0m")

        try:
            subprocess.run(["sudo", "systemctl", "restart", "ping2_gen"], check=True)
            print("\033[92m✔ ping2_gen service restarted successfully!\033[0m")
        except subprocess.CalledProcessError as e:
            if "Unit ping2_gen not found" in (e.stderr or ""):
                print("\033[91mcouldn't restart ping2_gen\033[0m")

        try:
            subprocess.run(["sudo", "systemctl", "restart", "ping_ip2"], check=True)
            print("\033[92m✔ ping_ip2 service restarted successfully!\033[0m")
        except subprocess.CalledProcessError as e:
            if "Unit ping_ip2 not found" in (e.stderr or ""):
                print("\033[91mcouldn't restart ping_ip2\033[0m")

        subprocess.run(["systemctl", "restart", "strong-azumi1"], check=True)

        result = subprocess.run(
            ["systemctl", "list-units", "--full", "--all", "strong-azumi1.service"],
            capture_output=True,
            text=True,
        )
        if "strong-azumi1.service" in result.stdout:
            subprocess.run(["systemctl", "restart", "strong-azumi1"], check=True)
        else:
            print("\033[91mstrong service not found. don't mind this error\033[0m")

    except subprocess.CalledProcessError:
        print(
            "\033[91merror in applying network changes : gen gre related error\033[0m"
        )
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")
    print(
        f"\033[92m✔ Changes saved and {interface} interface updated successfully!\033[0m"
    )

def save_stuff_gregen2_kharej(
    new_private_ip, local_ip, remote_ip, is_gre6, is_geneve=False
):
    current_ips = get_current_private_ipsgregen2()

    if is_gre6:
        current_ip = current_ips["gre6"]
    elif is_geneve:
        current_ip = current_ips["geneve"]
    else:
        current_ip = current_ips["private"]

    if current_ip:
        delete_ufw_rules(current_ip)

    add_ufw_rules(new_private_ip)

    counterpart_ip = wtb_opposite_ipgregen(new_private_ip)

    try:
        if is_gre6:
            update_pingfilegregen(
                "/etc/ping_ip2.sh", counterpart_ip, update_type="ping_ip"
            )
            update_ipfilegregen2("/etc/gre62.sh", new_private_ip, update_type="private")
            update_ipfilegregen2("/etc/gre62.sh", remote_ip, update_type="remote")
            update_ipfilegregen2(
                "/etc/sys2.sh", counterpart_ip, update_type="geneve_remote"
            )
            update_pingfilegregen("/etc/ping2_sys.sh", remote_ip, update_type="geneve")
            update_pingfilegregen(
                "/etc/ping2_sys.sh", counterpart_ip, update_type="geneve_opposite"
            )
        elif is_geneve:
            update_ipfilegregen2(
                "/etc/sys2.sh", new_private_ip, update_type="geneve_private"
            )
            update_pingfilegregen(
                "/etc/ping2_sys.sh", counterpart_ip, update_type="ping_sys_opposite"
            )
            update_ipsec_config_leftsubnet("/etc/ipsec1.conf", new_private_ip)
        else:
            update_pingfilegregen(
                "/etc/ping_v62.sh", counterpart_ip, update_type="ping_v6"
            )
            update_ipfilegregen2(
                "/etc/private2.sh", new_private_ip, update_type="private"
            )
            update_ipfilegregen2("/etc/private2.sh", local_ip, update_type="local")
            update_ipfilegregen2("/etc/private2.sh", remote_ip, update_type="remote")
            update_ipfilegregen2(
                "/etc/gre62.sh", counterpart_ip, update_type="gre6_remote"
            )
            update_pingfilegregen(
                "/etc/ping2_sys.sh", counterpart_ip, update_type="ping_sys_opposite"
            )

        interface = "azumig62" if is_gre6 else "azumi2"
        if is_geneve:
            interface = "azumigen2"

        try:
            subprocess.run(["ip", "link", "set", "dev", interface, "down"], check=True)
            subprocess.run(["ip", "link", "delete", interface], check=True)
        except subprocess.CalledProcessError:
            print("\033[91merror bringing interface down or deleting it\033[0m")

        script = "/etc/gre62.sh" if is_gre6 else "/etc/private2.sh"
        if is_geneve:
            script = "/etc/sys2.sh"
        result = subprocess.run(["/bin/bash", script], capture_output=True, text=True)
        if "RTNETLINK answers: File exists" in result.stderr:
            print("\033[91madditional ip already exists. Ignoring this error\033[0m")
        else:
            result.check_returncode()

        subprocess.run(["sudo", "systemctl", "daemon-reload"], check=True)

        try:
            subprocess.run(["systemctl", "restart", "ping_v62"], check=True)
            print("\033[92m✔ ping_v62 service restarted successfully!\033[0m")
        except subprocess.CalledProcessError as e:
            if "Unit ping_v62 not found" in (e.stderr or ""):
                print("\033[91mcouldn't restart ping_v62\033[0m")

        try:
            subprocess.run(["sudo", "systemctl", "restart", "ping2_gen"], check=True)
            print("\033[92m✔ ping2_gen service restarted successfully!\033[0m")
        except subprocess.CalledProcessError as e:
            if "Unit ping2_gen not found" in (e.stderr or ""):
                print("\033[91mcouldn't restart ping2_gen\033[0m")

        try:
            subprocess.run(["sudo", "systemctl", "restart", "ping_ip2"], check=True)
            print("\033[92m✔ ping_ip2 service restarted successfully!\033[0m")
        except subprocess.CalledProcessError as e:
            if "Unit ping_ip2 not found" in (e.stderr or ""):
                print("\033[91mcouldn't restart ping_ip2\033[0m")

        subprocess.run(["systemctl", "restart", "strong-azumi1"], check=True)

        result = subprocess.run(
            ["systemctl", "list-units", "--full", "--all", "strong-azumi1.service"],
            capture_output=True,
            text=True,
        )
        if "strong-azumi1.service" in result.stdout:
            subprocess.run(["systemctl", "restart", "strong-azumi1"], check=True)
        else:
            print("\033[91mstrong service not found. don't mind this error\033[0m")

    except subprocess.CalledProcessError:
        print(
            "\033[91merror in applying network changes : gen gre related error\033[0m"
        )
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")
    print(
        f"\033[92m✔ Changes saved and {interface} interface updated successfully!\033[0m"
    )


def gengreir2sec_editmulti_local():
    local_ip_private = local_ip("/etc/private2.sh")
    remote_ip_private = remote_ip("/etc/private2.sh")
    private_ip_private = private_ip1("/etc/private2.sh")

    local_ip_gre6 = local_ip("/etc/gre62.sh")
    remote_ip_gre6 = remote_ip("/etc/gre62.sh")
    private_ip_gre6 = private_gre6multi("/etc/gre62.sh")

    remote_ip_geneve = remote_ip("/etc/sys2.sh")
    private_ip_geneve = private_genmulti("/etc/sys2.sh")
    ipsecsecret = get_ipsecsecret("/etc/ipsec.secrets")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("couldn't retrieve IP addresses from private file")
    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("couldn't retrieve IP addresses from gre6 file")
    if not remote_ip_geneve or not private_ip_geneve:
        print("couldn't retrieve IP addresses from geneve file")

    if (
        not local_ip_private
        or not remote_ip_private
        or not private_ip_private
        or not local_ip_gre6
        or not remote_ip_gre6
        or not private_ip_gre6
        or not remote_ip_geneve
        or not private_ip_geneve
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_privateiran2(
            local_ip_private, remote_ip_private, private_ip_private
        )
        display_stuff_gre6(local_ip_gre6, remote_ip_gre6, private_ip_gre6)
        display_stuff_geneve_greiran(remote_ip_geneve, private_ip_geneve)
        display_ipsecsecretgengre(ipsecsecret)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mGeneve GRE6 + IPSEC\033[93m IRAN Menu\033[0m")
        print('\033[92m "-"\033[93m═══════════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN \033[92m IPV4\033[0m")
        print("2. \033[93mChange \033[97mKharej [2] \033[92m IPV4\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[93mChange \033[97mGRE6 \033[93mPrivate IPV6\033[0m")
        print("5. \033[93mChange \033[97mGeneve \033[93mPrivate IPV6\033[0m")
        print("6. \033[93mChange IPsec \033[92mSecret Key\033[0m")
        print("7. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to edit local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_private = new_ip
                ip_parts = new_ip.split(":")
                if new_ip.endswith(":2"):
                    ip_parts[-1] = "1"
                else:
                    ip_parts[-1] = "2"
                counterpart_ip = ":".join(ip_parts)
                local_ip_gre6 = new_ip
                remote_ip_gre6 = counterpart_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[GRE6]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_gre6 = new_ip
                remote_ip_geneve = wtb_opposite_ipgregen(new_ip)
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "5":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[Geneve]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_geneve = new_ip
                save_stuff_gregen2_iran(
                    private_ip_geneve,
                    None,
                    remote_ip_geneve,
                    ipsec_secret,
                    is_geneve=True,
                )
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mIRAN\033[93m Public IP :\033[0m ")
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mKharej [2]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "6":
            new_key = input(
                "\033[93mEnter new \033[92mIPsec \033[93mSecret Key: \033[0m"
            )
            if new_key:
                update_ipsecsecret("/etc/ipsec.secrets", new_key)
                ipsecsecret = new_key
            else:
                print("\033[91mCrazy Secret Key\033[0m")
        elif choice == "7":
            save_stuff_gregen2_iran(
                private_ip_private, local_ip_private, remote_ip_private, is_gre6=False
            )
            save_stuff_gregen2_iran(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            save_stuff_gregen2_iran(
                private_ip_geneve, None, remote_ip_geneve, is_gre6=False, is_geneve=True
            )
            update_ipsec_ip_multi2(private_ip_geneve)
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Invalid choice. Please select a valid option.")


def gengrekharej2sec_editmulti_local():
    local_ip_private = local_ip("/etc/private2.sh")
    remote_ip_private = remote_ip("/etc/private2.sh")
    private_ip_private = private_ip1("/etc/private2.sh")

    local_ip_gre6 = local_ip("/etc/gre62.sh")
    remote_ip_gre6 = remote_ip("/etc/gre62.sh")
    private_ip_gre6 = private_gre6multi("/etc/gre62.sh")

    remote_ip_geneve = remote_ip("/etc/sys2.sh")
    private_ip_geneve = private_genmulti("/etc/sys2.sh")
    ipsecsecret = get_ipsecsecret("/etc/ipsec.secrets")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("couldn't retrieve IP addresses from private file")
    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("couldn't retrieve IP addresses from gre6 file")
    if not remote_ip_geneve or not private_ip_geneve:
        print("couldn't retrieve IP addresses from geneve file")

    if (
        not local_ip_private
        or not remote_ip_private
        or not private_ip_private
        or not local_ip_gre6
        or not remote_ip_gre6
        or not private_ip_gre6
        or not remote_ip_geneve
        or not private_ip_geneve
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_privatekharej2(
            local_ip_private, remote_ip_private, private_ip_private
        )
        display_stuff_gre6(local_ip_gre6, remote_ip_gre6, private_ip_gre6)
        display_stuff_geneve_greiran(remote_ip_geneve, private_ip_geneve)
        display_ipsecsecretgengre(ipsecsecret)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mGeneve GRE6 + IPSEC\033[93m Kharej [2] Menu\033[0m"
        )
        print('\033[92m "-"\033[93m═══════════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej [2] \033[92m IPV4\033[0m")
        print("2. \033[93mChange \033[97mIRAN \033[92m IPV4\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[93mChange \033[97mGRE6 \033[93mPrivate IPV6\033[0m")
        print("5. \033[93mChange \033[97mGeneve \033[93mPrivate IPV6\033[0m")
        print("6. \033[93mChange IPsec \033[92mSecret Key\033[0m")
        print("7. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to edit local single menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_private = new_ip
                ip_parts = new_ip.split(":")
                if new_ip.endswith(":2"):
                    ip_parts[-1] = "1"
                else:
                    ip_parts[-1] = "2"
                counterpart_ip = ":".join(ip_parts)
                local_ip_gre6 = new_ip
                remote_ip_gre6 = counterpart_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[GRE6]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_gre6 = new_ip
                remote_ip_geneve = wtb_opposite_ipgregen(new_ip)
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "5":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[Geneve]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_geneve = new_ip
                save_stuff_gregen2_kharej(
                    private_ip_geneve,
                    None,
                    remote_ip_geneve,
                    ipsec_secret,
                    is_geneve=True,
                )
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mKharej [2]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input("\033[93mEnter \033[92mIRAN\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "6":
            new_key = input(
                "\033[93mEnter new \033[92mIPsec \033[93mSecret Key: \033[0m"
            )
            if new_key:
                update_ipsecsecret("/etc/ipsec.secrets", new_key)
                ipsecsecret = new_key
            else:
                print("\033[91mCrazy Secret Key\033[0m")
        elif choice == "7":
            save_stuff_gregen2_kharej(
                private_ip_private, local_ip_private, remote_ip_private, is_gre6=False
            )
            save_stuff_gregen2_kharej(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            save_stuff_gregen2_kharej(
                private_ip_geneve, None, remote_ip_geneve, is_gre6=False, is_geneve=True
            )
            update_ipsec_ip(private_ip_geneve)
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Invalid choice. Please select a valid option.")


# server3
def get_current_private_ipsgregen3():
    private_ip_private = private_ip1("/etc/private3.sh")
    private_ip_gre6 = private_gre6multi("/etc/gre63.sh")
    private_ip_geneve = private_genmulti("/etc/sys3.sh")
    return {
        "private": private_ip_private,
        "gre6": private_ip_gre6,
        "geneve": private_ip_geneve,
    }


def update_ipfilegregen3(name, new_ip, update_type):
    try:
        with open(name, "r") as f:
            content = f.read()

        if update_type == "private":
            new_content = re.sub(
                r"ip (-6 )?addr add [^ ]+/64 dev azumi?",
                f"ip -6 addr add {new_ip}/64 dev azumi",
                content,
            )
            ip_parts = new_ip.split(":")
            if new_ip.endswith(":2"):
                ip_parts[-1] = "1"
            else:
                ip_parts[-1] = "2"
            counterpart_ip = ":".join(ip_parts)
            new_content = re.sub(
                r"ip (-6 )?route add [^ ]+/64 dev azumi?",
                f"ip -6 route add {counterpart_ip}/64 dev azumi",
                new_content,
            )

            update_ipfilegregen3("/etc/gre63.sh", new_ip, update_type="gre6_local")
            update_ipfilegregen3(
                "/etc/gre63.sh", counterpart_ip, update_type="gre6_remote"
            )
        elif update_type == "local":
            new_content = re.sub(r"local \S+", f"local {new_ip}", content)
        elif update_type == "remote":
            new_content = re.sub(r"remote \S+", f"remote {new_ip}", content)
        elif update_type == "gre6_local":
            new_content = re.sub(r"local \S+", f"local {new_ip}", content)
        elif update_type == "gre6_remote":
            new_content = re.sub(r"remote \S+", f"remote {new_ip}", content)
        elif update_type == "geneve_remote":
            new_content = re.sub(r"remote \S+", f"remote {new_ip}", content)
        elif update_type == "geneve_private":
            new_content = re.sub(
                r"ip addr add \S+/64 dev azumigen?",
                f"ip addr add {new_ip}/64 dev azumigen",
                content,
            )
            counterpart_ip = wtb_opposite_ipgregen(new_ip)
            new_content = re.sub(
                r"ip route add \S+/64 dev azumigen?",
                f"ip route add {counterpart_ip}/64 dev azumigen",
                new_content,
            )

        with open(name, "w") as f:
            f.write(new_content)
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def update_ipsec_confgengre3(name, new_private_ip):
    try:
        with open(name, "r") as f:
            content = f.readlines()

        start_idx, end_idx = None, None
        for i, line in enumerate(content):
            if line.strip() == "conn Geneve3":
                start_idx = i
            elif start_idx is not None and line.strip().startswith("conn "):
                end_idx = i
                break

        if start_idx is None:
            print("\033[91m'conn Geneve3' section not found\033[0m")
            return

        if end_idx is None:
            end_idx = len(content)

        section = content[start_idx:end_idx]
        ip_parts = new_private_ip.split(":")
        if new_private_ip.endswith(":2"):
            ip_parts[-1] = "1"
        else:
            ip_parts[-1] = "2"
        counterpart_ip = ":".join(ip_parts)

        new_section = []
        for line in section:
            line = re.sub(r"leftsubnet=\S+", f"leftsubnet={new_private_ip}/64", line)
            line = re.sub(r"leftid=\S+", f"leftid={new_private_ip}", line)
            line = re.sub(r"right=\S+", f"right={counterpart_ip}", line)
            line = re.sub(r"rightsubnet=\S+", f"rightsubnet={counterpart_ip}/64", line)
            new_section.append(line)

        new_content = content[:start_idx] + new_section + content[end_idx:]

        with open(name, "w") as f:
            f.writelines(new_content)

        print(f"\033[92m'conn Geneve3' section updated successfully\033[0m")
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def save_stuff_gregen3_iran(
    new_private_ip, local_ip, remote_ip, is_gre6, is_geneve=False
):
    current_ips = get_current_private_ipsgregen3()

    if is_gre6:
        current_ip = current_ips["gre6"]
    elif is_geneve:
        current_ip = current_ips["geneve"]
    else:
        current_ip = current_ips["private"]

    if current_ip:
        delete_ufw_rules(current_ip)

    add_ufw_rules(new_private_ip)

    counterpart_ip = wtb_opposite_ipgregen(new_private_ip)

    try:
        if is_gre6:
            update_pingfilegregen(
                "/etc/ping_ip3.sh", counterpart_ip, update_type="ping_ip"
            )
            update_ipfilegregen3("/etc/gre63.sh", new_private_ip, update_type="private")
            update_ipfilegregen3("/etc/gre63.sh", remote_ip, update_type="remote")
            update_ipfilegregen3(
                "/etc/sys3.sh", counterpart_ip, update_type="geneve_remote"
            )
            update_pingfilegregen("/etc/ping3_sys.sh", remote_ip, update_type="geneve")
            update_pingfilegregen(
                "/etc/ping3_sys.sh", counterpart_ip, update_type="geneve_opposite"
            )
        elif is_geneve:
            update_ipfilegregen3(
                "/etc/sys3.sh", new_private_ip, update_type="geneve_private"
            )
            update_pingfilegregen(
                "/etc/ping3_sys.sh", counterpart_ip, update_type="ping_sys_opposite"
            )
            update_ipsec_confgengre3("/etc/ipsec1.conf", new_private_ip)
        else:
            update_pingfilegregen(
                "/etc/ping_v63.sh", counterpart_ip, update_type="ping_v6"
            )
            update_ipfilegregen3(
                "/etc/private3.sh", new_private_ip, update_type="private"
            )
            update_ipfilegregen3("/etc/private3.sh", local_ip, update_type="local")
            update_ipfilegregen3("/etc/private3.sh", remote_ip, update_type="remote")
            update_ipfilegregen3(
                "/etc/gre63.sh", counterpart_ip, update_type="gre6_remote"
            )
            update_pingfilegregen(
                "/etc/ping3_sys.sh", counterpart_ip, update_type="ping_sys_opposite"
            )

        interface = "azumig63" if is_gre6 else "azumi3"
        if is_geneve:
            interface = "azumigen3"

        try:
            subprocess.run(["ip", "link", "set", "dev", interface, "down"], check=True)
            subprocess.run(["ip", "link", "delete", interface], check=True)
        except subprocess.CalledProcessError:
            print("\033[91merror bringing interface down or deleting it\033[0m")

        script = "/etc/gre63.sh" if is_gre6 else "/etc/private3.sh"
        if is_geneve:
            script = "/etc/sys3.sh"
        result = subprocess.run(["/bin/bash", script], capture_output=True, text=True)
        if "RTNETLINK answers: File exists" in result.stderr:
            print("\033[91madditional ip already exists. Ignoring this error\033[0m")
        else:
            result.check_returncode()

        subprocess.run(["sudo", "systemctl", "daemon-reload"], check=True)

        try:
            subprocess.run(["systemctl", "restart", "ping_v63"], check=True)
            print("\033[92m✔ ping_v63 service restarted successfully!\033[0m")
        except subprocess.CalledProcessError as e:
            if "Unit ping_v63 not found" in (e.stderr or ""):
                print("\033[91mcouldn't restart ping_v63\033[0m")

        try:
            subprocess.run(["sudo", "systemctl", "restart", "ping3_gen"], check=True)
            print("\033[92m✔ ping3_gen service restarted successfully!\033[0m")
        except subprocess.CalledProcessError as e:
            if "Unit ping3_gen not found" in (e.stderr or ""):
                print("\033[91mcouldn't restart ping3_gen\033[0m")

        try:
            subprocess.run(["sudo", "systemctl", "restart", "ping_ip3"], check=True)
            print("\033[92m✔ ping_ip3 service restarted successfully!\033[0m")
        except subprocess.CalledProcessError as e:
            if "Unit ping_ip3 not found" in (e.stderr or ""):
                print("\033[91mcouldn't restart ping_ip3\033[0m")

        subprocess.run(["systemctl", "restart", "strong-azumi1"], check=True)

        result = subprocess.run(
            ["systemctl", "list-units", "--full", "--all", "strong-azumi1.service"],
            capture_output=True,
            text=True,
        )
        if "strong-azumi1.service" in result.stdout:
            subprocess.run(["systemctl", "restart", "strong-azumi1"], check=True)
        else:
            print("\033[91mstrong service not found. don't mind this error\033[0m")

    except subprocess.CalledProcessError:
        print(
            "\033[91merror in applying network changes : gen gre related error\033[0m"
        )
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")
    print(
        f"\033[92m✔ Changes saved and {interface} interface updated successfully!\033[0m"
    )


def save_stuff_gregen3_kharej(
    new_private_ip, local_ip, remote_ip, is_gre6, is_geneve=False
):
    current_ips = get_current_private_ipsgregen3()

    if is_gre6:
        current_ip = current_ips["gre6"]
    elif is_geneve:
        current_ip = current_ips["geneve"]
    else:
        current_ip = current_ips["private"]

    if current_ip:
        delete_ufw_rules(current_ip)

    add_ufw_rules(new_private_ip)

    counterpart_ip = wtb_opposite_ipgregen(new_private_ip)

    try:
        if is_gre6:
            update_pingfilegregen(
                "/etc/ping_ip3.sh", counterpart_ip, update_type="ping_ip"
            )
            update_ipfilegregen3("/etc/gre63.sh", new_private_ip, update_type="private")
            update_ipfilegregen3("/etc/gre63.sh", remote_ip, update_type="remote")
            update_ipfilegregen3(
                "/etc/sys3.sh", counterpart_ip, update_type="geneve_remote"
            )
            update_pingfilegregen("/etc/ping3_sys.sh", remote_ip, update_type="geneve")
            update_pingfilegregen(
                "/etc/ping3_sys.sh", counterpart_ip, update_type="geneve_opposite"
            )
        elif is_geneve:
            update_ipfilegregen3(
                "/etc/sys3.sh", new_private_ip, update_type="geneve_private"
            )
            update_pingfilegregen(
                "/etc/ping3_sys.sh", counterpart_ip, update_type="ping_sys_opposite"
            )
            update_ipsec_config_leftsubnet("/etc/ipsec1.conf", new_private_ip)
        else:
            update_pingfilegregen(
                "/etc/ping_v63.sh", counterpart_ip, update_type="ping_v6"
            )
            update_ipfilegregen3(
                "/etc/private3.sh", new_private_ip, update_type="private"
            )
            update_ipfilegregen3("/etc/private3.sh", local_ip, update_type="local")
            update_ipfilegregen3("/etc/private3.sh", remote_ip, update_type="remote")
            update_ipfilegregen3(
                "/etc/gre63.sh", counterpart_ip, update_type="gre6_remote"
            )
            update_pingfilegregen(
                "/etc/ping3_sys.sh", counterpart_ip, update_type="ping_sys_opposite"
            )

        interface = "azumig63" if is_gre6 else "azumi3"
        if is_geneve:
            interface = "azumigen3"

        try:
            subprocess.run(["ip", "link", "set", "dev", interface, "down"], check=True)
            subprocess.run(["ip", "link", "delete", interface], check=True)
        except subprocess.CalledProcessError:
            print("\033[91merror bringing interface down or deleting it\033[0m")

        script = "/etc/gre63.sh" if is_gre6 else "/etc/private3.sh"
        if is_geneve:
            script = "/etc/sys3.sh"
        result = subprocess.run(["/bin/bash", script], capture_output=True, text=True)
        if "RTNETLINK answers: File exists" in result.stderr:
            print("\033[91madditional ip already exists. Ignoring this error\033[0m")
        else:
            result.check_returncode()

        subprocess.run(["sudo", "systemctl", "daemon-reload"], check=True)

        try:
            subprocess.run(["systemctl", "restart", "ping_v63"], check=True)
            print("\033[92m✔ ping_v63 service restarted successfully!\033[0m")
        except subprocess.CalledProcessError as e:
            if "Unit ping_v63 not found" in (e.stderr or ""):
                print("\033[91mcouldn't restart ping_v63\033[0m")

        try:
            subprocess.run(["sudo", "systemctl", "restart", "ping3_gen"], check=True)
            print("\033[92m✔ ping3_gen service restarted successfully!\033[0m")
        except subprocess.CalledProcessError as e:
            if "Unit ping3_gen not found" in (e.stderr or ""):
                print("\033[91mcouldn't restart ping3_gen\033[0m")

        try:
            subprocess.run(["sudo", "systemctl", "restart", "ping_ip3"], check=True)
            print("\033[92m✔ ping_ip3 service restarted successfully!\033[0m")
        except subprocess.CalledProcessError as e:
            if "Unit ping_ip3 not found" in (e.stderr or ""):
                print("\033[91mcouldn't restart ping_ip3\033[0m")

        subprocess.run(["systemctl", "restart", "strong-azumi1"], check=True)

        result = subprocess.run(
            ["systemctl", "list-units", "--full", "--all", "strong-azumi1.service"],
            capture_output=True,
            text=True,
        )
        if "strong-azumi1.service" in result.stdout:
            subprocess.run(["systemctl", "restart", "strong-azumi1"], check=True)
        else:
            print("\033[91mstrong service not found. don't mind this error\033[0m")

    except subprocess.CalledProcessError:
        print(
            "\033[91merror in applying network changes : gen gre related error\033[0m"
        )
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")
    print(
        f"\033[92m✔ Changes saved and {interface} interface updated successfully!\033[0m"
    )


def gengreir3sec_editmulti_local():
    local_ip_private = local_ip("/etc/private3.sh")
    remote_ip_private = remote_ip("/etc/private3.sh")
    private_ip_private = private_ip1("/etc/private3.sh")

    local_ip_gre6 = local_ip("/etc/gre63.sh")
    remote_ip_gre6 = remote_ip("/etc/gre63.sh")
    private_ip_gre6 = private_gre6multi("/etc/gre63.sh")

    remote_ip_geneve = remote_ip("/etc/sys3.sh")
    private_ip_geneve = private_genmulti("/etc/sys3.sh")
    ipsecsecret = get_ipsecsecret("/etc/ipsec.secrets")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("couldn't retrieve IP addresses from private file")
    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("couldn't retrieve IP addresses from gre6 file")
    if not remote_ip_geneve or not private_ip_geneve:
        print("couldn't retrieve IP addresses from geneve file")

    if (
        not local_ip_private
        or not remote_ip_private
        or not private_ip_private
        or not local_ip_gre6
        or not remote_ip_gre6
        or not private_ip_gre6
        or not remote_ip_geneve
        or not private_ip_geneve
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_privateiran3(
            local_ip_private, remote_ip_private, private_ip_private
        )
        display_stuff_gre6(local_ip_gre6, remote_ip_gre6, private_ip_gre6)
        display_stuff_geneve_greiran(remote_ip_geneve, private_ip_geneve)
        display_ipsecsecretgengre(ipsecsecret)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mGeneve GRE6 + IPSEC\033[93m IRAN Menu\033[0m")
        print('\033[92m "-"\033[93m═══════════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN \033[92m IPV4\033[0m")
        print("2. \033[93mChange \033[97mKharej [3] \033[92m IPV4\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[93mChange \033[97mGRE6 \033[93mPrivate IPV6\033[0m")
        print("5. \033[93mChange \033[97mGeneve \033[93mPrivate IPV6\033[0m")
        print("6. \033[93mChange IPsec \033[92mSecret Key\033[0m")
        print("7. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to edit local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_private = new_ip
                ip_parts = new_ip.split(":")
                if new_ip.endswith(":2"):
                    ip_parts[-1] = "1"
                else:
                    ip_parts[-1] = "2"
                counterpart_ip = ":".join(ip_parts)
                local_ip_gre6 = new_ip
                remote_ip_gre6 = counterpart_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[GRE6]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_gre6 = new_ip
                remote_ip_geneve = wtb_opposite_ipgregen(new_ip)
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "5":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[Geneve]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_geneve = new_ip
                save_stuff_gregen3_iran(
                    private_ip_geneve,
                    None,
                    remote_ip_geneve,
                    ipsec_secret,
                    is_geneve=True,
                )
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mIRAN\033[93m Public IP :\033[0m ")
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mKharej [3]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "6":
            new_key = input(
                "\033[93mEnter new \033[92mIPsec \033[93mSecret Key: \033[0m"
            )
            if new_key:
                update_ipsecsecret("/etc/ipsec.secrets", new_key)
                ipsecsecret = new_key
            else:
                print("\033[91mCrazy Secret Key\033[0m")
        elif choice == "7":
            save_stuff_gregen3_iran(
                private_ip_private, local_ip_private, remote_ip_private, is_gre6=False
            )
            save_stuff_gregen3_iran(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            save_stuff_gregen3_iran(
                private_ip_geneve, None, remote_ip_geneve, is_gre6=False, is_geneve=True
            )
            update_ipsec_ip_multi3(private_ip_geneve)
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Invalid choice. Please select a valid option.")


def gengrekharej3sec_editmulti_local():
    local_ip_private = local_ip("/etc/private3.sh")
    remote_ip_private = remote_ip("/etc/private3.sh")
    private_ip_private = private_ip1("/etc/private3.sh")

    local_ip_gre6 = local_ip("/etc/gre63.sh")
    remote_ip_gre6 = remote_ip("/etc/gre63.sh")
    private_ip_gre6 = private_gre6multi("/etc/gre63.sh")

    remote_ip_geneve = remote_ip("/etc/sys3.sh")
    private_ip_geneve = private_genmulti("/etc/sys3.sh")
    ipsecsecret = get_ipsecsecret("/etc/ipsec.secrets")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("couldn't retrieve IP addresses from private file")
    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("couldn't retrieve IP addresses from gre6 file")
    if not remote_ip_geneve or not private_ip_geneve:
        print("couldn't retrieve IP addresses from geneve file")

    if (
        not local_ip_private
        or not remote_ip_private
        or not private_ip_private
        or not local_ip_gre6
        or not remote_ip_gre6
        or not private_ip_gre6
        or not remote_ip_geneve
        or not private_ip_geneve
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_privatekharej3(
            local_ip_private, remote_ip_private, private_ip_private
        )
        display_stuff_gre6(local_ip_gre6, remote_ip_gre6, private_ip_gre6)
        display_stuff_geneve_greiran(remote_ip_geneve, private_ip_geneve)
        display_ipsecsecretgengre(ipsecsecret)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mGeneve GRE6 + IPSEC\033[93m Kharej [3] Menu\033[0m"
        )
        print('\033[92m "-"\033[93m═══════════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej [3] \033[92m IPV4\033[0m")
        print("2. \033[93mChange \033[97mIRAN \033[92m IPV4\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[93mChange \033[97mGRE6 \033[93mPrivate IPV6\033[0m")
        print("5. \033[93mChange \033[97mGeneve \033[93mPrivate IPV6\033[0m")
        print("6. \033[93mChange IPsec \033[92mSecret Key\033[0m")
        print("7. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to edit local single menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_private = new_ip
                ip_parts = new_ip.split(":")
                if new_ip.endswith(":2"):
                    ip_parts[-1] = "1"
                else:
                    ip_parts[-1] = "2"
                counterpart_ip = ":".join(ip_parts)
                local_ip_gre6 = new_ip
                remote_ip_gre6 = counterpart_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[GRE6]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_gre6 = new_ip
                remote_ip_geneve = wtb_opposite_ipgregen(new_ip)
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "5":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[Geneve]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_geneve = new_ip
                save_stuff_gregen3_kharej(
                    private_ip_geneve,
                    None,
                    remote_ip_geneve,
                    ipsec_secret,
                    is_geneve=True,
                )
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mKharej [3]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input("\033[93mEnter \033[92mIRAN\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "6":
            new_key = input(
                "\033[93mEnter new \033[92mIPsec \033[93mSecret Key: \033[0m"
            )
            if new_key:
                update_ipsecsecret("/etc/ipsec.secrets", new_key)
                ipsecsecret = new_key
            else:
                print("\033[91mCrazy Secret Key\033[0m")
        elif choice == "7":
            save_stuff_gregen3_kharej(
                private_ip_private, local_ip_private, remote_ip_private, is_gre6=False
            )
            save_stuff_gregen3_kharej(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            save_stuff_gregen3_kharej(
                private_ip_geneve, None, remote_ip_geneve, is_gre6=False, is_geneve=True
            )
            update_ipsec_ip(private_ip_geneve)
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Invalid choice. Please select a valid option.")


# server4
def get_current_private_ipsgregen4():
    private_ip_private = private_ip1("/etc/private4.sh")
    private_ip_gre6 = private_gre6multi("/etc/gre64.sh")
    private_ip_geneve = private_genmulti("/etc/sys4.sh")
    return {
        "private": private_ip_private,
        "gre6": private_ip_gre6,
        "geneve": private_ip_geneve,
    }


def update_ipfilegregen4(name, new_ip, update_type):
    try:
        with open(name, "r") as f:
            content = f.read()

        if update_type == "private":
            new_content = re.sub(
                r"ip (-6 )?addr add [^ ]+/64 dev azumi?",
                f"ip -6 addr add {new_ip}/64 dev azumi",
                content,
            )
            ip_parts = new_ip.split(":")
            if new_ip.endswith(":2"):
                ip_parts[-1] = "1"
            else:
                ip_parts[-1] = "2"
            counterpart_ip = ":".join(ip_parts)
            new_content = re.sub(
                r"ip (-6 )?route add [^ ]+/64 dev azumi?",
                f"ip -6 route add {counterpart_ip}/64 dev azumi",
                new_content,
            )

            update_ipfilegregen4("/etc/gre64.sh", new_ip, update_type="gre6_local")
            update_ipfilegregen4(
                "/etc/gre64.sh", counterpart_ip, update_type="gre6_remote"
            )
        elif update_type == "local":
            new_content = re.sub(r"local \S+", f"local {new_ip}", content)
        elif update_type == "remote":
            new_content = re.sub(r"remote \S+", f"remote {new_ip}", content)
        elif update_type == "gre6_local":
            new_content = re.sub(r"local \S+", f"local {new_ip}", content)
        elif update_type == "gre6_remote":
            new_content = re.sub(r"remote \S+", f"remote {new_ip}", content)
        elif update_type == "geneve_remote":
            new_content = re.sub(r"remote \S+", f"remote {new_ip}", content)
        elif update_type == "geneve_private":
            new_content = re.sub(
                r"ip addr add \S+/64 dev azumigen?",
                f"ip addr add {new_ip}/64 dev azumigen",
                content,
            )
            counterpart_ip = wtb_opposite_ipgregen(new_ip)
            new_content = re.sub(
                r"ip route add \S+/64 dev azumigen?",
                f"ip route add {counterpart_ip}/64 dev azumigen",
                new_content,
            )

        with open(name, "w") as f:
            f.write(new_content)
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def update_ipsec_confgengre4(name, new_private_ip):
    try:
        with open(name, "r") as f:
            content = f.readlines()

        start_idx, end_idx = None, None
        for i, line in enumerate(content):
            if line.strip() == "conn Geneve4":
                start_idx = i
            elif start_idx is not None and line.strip().startswith("conn "):
                end_idx = i
                break

        if start_idx is None:
            print("\033[91m'conn Geneve4' section not found\033[0m")
            return

        if end_idx is None:
            end_idx = len(content)

        section = content[start_idx:end_idx]
        ip_parts = new_private_ip.split(":")
        if new_private_ip.endswith(":2"):
            ip_parts[-1] = "1"
        else:
            ip_parts[-1] = "2"
        counterpart_ip = ":".join(ip_parts)

        new_section = []
        for line in section:
            line = re.sub(r"leftsubnet=\S+", f"leftsubnet={new_private_ip}/64", line)
            line = re.sub(r"leftid=\S+", f"leftid={new_private_ip}", line)
            line = re.sub(r"right=\S+", f"right={counterpart_ip}", line)
            line = re.sub(r"rightsubnet=\S+", f"rightsubnet={counterpart_ip}/64", line)
            new_section.append(line)

        new_content = content[:start_idx] + new_section + content[end_idx:]

        with open(name, "w") as f:
            f.writelines(new_content)

        print(f"\033[92m'conn Geneve4' section updated successfully\033[0m")
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def save_stuff_gregen4_iran(
    new_private_ip, local_ip, remote_ip, is_gre6, is_geneve=False
):
    current_ips = get_current_private_ipsgregen4()

    if is_gre6:
        current_ip = current_ips["gre6"]
    elif is_geneve:
        current_ip = current_ips["geneve"]
    else:
        current_ip = current_ips["private"]

    if current_ip:
        delete_ufw_rules(current_ip)

    add_ufw_rules(new_private_ip)

    counterpart_ip = wtb_opposite_ipgregen(new_private_ip)

    try:
        if is_gre6:
            update_pingfilegregen(
                "/etc/ping_ip4.sh", counterpart_ip, update_type="ping_ip"
            )
            update_ipfilegregen4("/etc/gre64.sh", new_private_ip, update_type="private")
            update_ipfilegregen4("/etc/gre64.sh", remote_ip, update_type="remote")
            update_ipfilegregen4(
                "/etc/sys4.sh", counterpart_ip, update_type="geneve_remote"
            )
            update_pingfilegregen("/etc/ping4_sys.sh", remote_ip, update_type="geneve")
            update_pingfilegregen(
                "/etc/ping4_sys.sh", counterpart_ip, update_type="geneve_opposite"
            )
        elif is_geneve:
            update_ipfilegregen4(
                "/etc/sys4.sh", new_private_ip, update_type="geneve_private"
            )
            update_pingfilegregen(
                "/etc/ping4_sys.sh", counterpart_ip, update_type="ping_sys_opposite"
            )
            update_ipsec_confgengre4("/etc/ipsec1.conf", new_private_ip)
        else:
            update_pingfilegregen(
                "/etc/ping_v64.sh", counterpart_ip, update_type="ping_v6"
            )
            update_ipfilegregen4(
                "/etc/private4.sh", new_private_ip, update_type="private"
            )
            update_ipfilegregen4("/etc/private4.sh", local_ip, update_type="local")
            update_ipfilegregen4("/etc/private4.sh", remote_ip, update_type="remote")
            update_ipfilegregen4(
                "/etc/gre64.sh", counterpart_ip, update_type="gre6_remote"
            )
            update_pingfilegregen(
                "/etc/ping4_sys.sh", counterpart_ip, update_type="ping_sys_opposite"
            )

        interface = "azumig64" if is_gre6 else "azumi4"
        if is_geneve:
            interface = "azumigen4"

        try:
            subprocess.run(["ip", "link", "set", "dev", interface, "down"], check=True)
            subprocess.run(["ip", "link", "delete", interface], check=True)
        except subprocess.CalledProcessError:
            print("\033[91merror bringing interface down or deleting it\033[0m")

        script = "/etc/gre64.sh" if is_gre6 else "/etc/private4.sh"
        if is_geneve:
            script = "/etc/sys4.sh"
        result = subprocess.run(["/bin/bash", script], capture_output=True, text=True)
        if "RTNETLINK answers: File exists" in result.stderr:
            print("\033[91madditional ip already exists. Ignoring this error\033[0m")
        else:
            result.check_returncode()

        subprocess.run(["sudo", "systemctl", "daemon-reload"], check=True)

        try:
            subprocess.run(["systemctl", "restart", "ping_v64"], check=True)
            print("\033[92m✔ ping_v64 service restarted successfully!\033[0m")
        except subprocess.CalledProcessError as e:
            if "Unit ping_v64 not found" in (e.stderr or ""):
                print("\033[91mcouldn't restart ping_v64\033[0m")

        try:
            subprocess.run(["sudo", "systemctl", "restart", "ping4_gen"], check=True)
            print("\033[92m✔ ping4_gen service restarted successfully!\033[0m")
        except subprocess.CalledProcessError as e:
            if "Unit ping4_gen not found" in (e.stderr or ""):
                print("\033[91mcouldn't restart ping4_gen\033[0m")

        try:
            subprocess.run(["sudo", "systemctl", "restart", "ping_ip4"], check=True)
            print("\033[92m✔ ping_ip4 service restarted successfully!\033[0m")
        except subprocess.CalledProcessError as e:
            if "Unit ping_ip4 not found" in (e.stderr or ""):
                print("\033[91mcouldn't restart ping_ip4\033[0m")

        subprocess.run(["systemctl", "restart", "strong-azumi1"], check=True)

        result = subprocess.run(
            ["systemctl", "list-units", "--full", "--all", "strong-azumi1.service"],
            capture_output=True,
            text=True,
        )
        if "strong-azumi1.service" in result.stdout:
            subprocess.run(["systemctl", "restart", "strong-azumi1"], check=True)
        else:
            print("\033[91mstrong service not found. don't mind this error\033[0m")

    except subprocess.CalledProcessError:
        print(
            "\033[91merror in applying network changes : gen gre related error\033[0m"
        )
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")
    print(
        f"\033[92m✔ Changes saved and {interface} interface updated successfully!\033[0m"
    )


def save_stuff_gregen4_kharej(
    new_private_ip, local_ip, remote_ip, is_gre6, is_geneve=False
):
    current_ips = get_current_private_ipsgregen4()

    if is_gre6:
        current_ip = current_ips["gre6"]
    elif is_geneve:
        current_ip = current_ips["geneve"]
    else:
        current_ip = current_ips["private"]

    if current_ip:
        delete_ufw_rules(current_ip)

    add_ufw_rules(new_private_ip)

    counterpart_ip = wtb_opposite_ipgregen(new_private_ip)

    try:
        if is_gre6:
            update_pingfilegregen(
                "/etc/ping_ip4.sh", counterpart_ip, update_type="ping_ip"
            )
            update_ipfilegregen4("/etc/gre64.sh", new_private_ip, update_type="private")
            update_ipfilegregen4("/etc/gre64.sh", remote_ip, update_type="remote")
            update_ipfilegregen4(
                "/etc/sys4.sh", counterpart_ip, update_type="geneve_remote"
            )
            update_pingfilegregen("/etc/ping4_sys.sh", remote_ip, update_type="geneve")
            update_pingfilegregen(
                "/etc/ping4_sys.sh", counterpart_ip, update_type="geneve_opposite"
            )
        elif is_geneve:
            update_ipfilegregen4(
                "/etc/sys4.sh", new_private_ip, update_type="geneve_private"
            )
            update_pingfilegregen(
                "/etc/ping4_sys.sh", counterpart_ip, update_type="ping_sys_opposite"
            )
            update_ipsec_config_leftsubnet("/etc/ipsec1.conf", new_private_ip)
        else:
            update_pingfilegregen(
                "/etc/ping_v64.sh", counterpart_ip, update_type="ping_v6"
            )
            update_ipfilegregen4(
                "/etc/private4.sh", new_private_ip, update_type="private"
            )
            update_ipfilegregen4("/etc/private4.sh", local_ip, update_type="local")
            update_ipfilegregen4("/etc/private4.sh", remote_ip, update_type="remote")
            update_ipfilegregen4(
                "/etc/gre64.sh", counterpart_ip, update_type="gre6_remote"
            )
            update_pingfilegregen(
                "/etc/ping4_sys.sh", counterpart_ip, update_type="ping_sys_opposite"
            )

        interface = "azumig64" if is_gre6 else "azumi4"
        if is_geneve:
            interface = "azumigen4"

        try:
            subprocess.run(["ip", "link", "set", "dev", interface, "down"], check=True)
            subprocess.run(["ip", "link", "delete", interface], check=True)
        except subprocess.CalledProcessError:
            print("\033[91merror bringing interface down or deleting it\033[0m")

        script = "/etc/gre64.sh" if is_gre6 else "/etc/private4.sh"
        if is_geneve:
            script = "/etc/sys4.sh"
        result = subprocess.run(["/bin/bash", script], capture_output=True, text=True)
        if "RTNETLINK answers: File exists" in result.stderr:
            print("\033[91madditional ip already exists. Ignoring this error\033[0m")
        else:
            result.check_returncode()

        subprocess.run(["sudo", "systemctl", "daemon-reload"], check=True)

        try:
            subprocess.run(["systemctl", "restart", "ping_v64"], check=True)
            print("\033[92m✔ ping_v64 service restarted successfully!\033[0m")
        except subprocess.CalledProcessError as e:
            if "Unit ping_v64 not found" in (e.stderr or ""):
                print("\033[91mcouldn't restart ping_v64\033[0m")

        try:
            subprocess.run(["sudo", "systemctl", "restart", "ping4_gen"], check=True)
            print("\033[92m✔ ping4_gen service restarted successfully!\033[0m")
        except subprocess.CalledProcessError as e:
            if "Unit ping4_gen not found" in (e.stderr or ""):
                print("\033[91mcouldn't restart ping4_gen\033[0m")

        try:
            subprocess.run(["sudo", "systemctl", "restart", "ping_ip4"], check=True)
            print("\033[92m✔ ping_ip4 service restarted successfully!\033[0m")
        except subprocess.CalledProcessError as e:
            if "Unit ping_ip4 not found" in (e.stderr or ""):
                print("\033[91mcouldn't restart ping_ip4\033[0m")

        subprocess.run(["systemctl", "restart", "strong-azumi1"], check=True)

        result = subprocess.run(
            ["systemctl", "list-units", "--full", "--all", "strong-azumi1.service"],
            capture_output=True,
            text=True,
        )
        if "strong-azumi1.service" in result.stdout:
            subprocess.run(["systemctl", "restart", "strong-azumi1"], check=True)
        else:
            print("\033[91mstrong service not found. don't mind this error\033[0m")

    except subprocess.CalledProcessError:
        print(
            "\033[91merror in applying network changes : gen gre related error\033[0m"
        )
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")
    print(
        f"\033[92m✔ Changes saved and {interface} interface updated successfully!\033[0m"
    )


def gengreir4sec_editmulti_local():
    local_ip_private = local_ip("/etc/private4.sh")
    remote_ip_private = remote_ip("/etc/private4.sh")
    private_ip_private = private_ip1("/etc/private4.sh")

    local_ip_gre6 = local_ip("/etc/gre64.sh")
    remote_ip_gre6 = remote_ip("/etc/gre64.sh")
    private_ip_gre6 = private_gre6multi("/etc/gre64.sh")

    remote_ip_geneve = remote_ip("/etc/sys4.sh")
    private_ip_geneve = private_genmulti("/etc/sys4.sh")
    ipsecsecret = get_ipsecsecret("/etc/ipsec.secrets")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("couldn't retrieve IP addresses from private file")
    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("couldn't retrieve IP addresses from gre6 file")
    if not remote_ip_geneve or not private_ip_geneve:
        print("couldn't retrieve IP addresses from geneve file")

    if (
        not local_ip_private
        or not remote_ip_private
        or not private_ip_private
        or not local_ip_gre6
        or not remote_ip_gre6
        or not private_ip_gre6
        or not remote_ip_geneve
        or not private_ip_geneve
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_privateiran4(
            local_ip_private, remote_ip_private, private_ip_private
        )
        display_stuff_gre6(local_ip_gre6, remote_ip_gre6, private_ip_gre6)
        display_stuff_geneve_greiran(remote_ip_geneve, private_ip_geneve)
        display_ipsecsecretgengre(ipsecsecret)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mGeneve GRE6 + IPSEC\033[93m IRAN Menu\033[0m")
        print('\033[92m "-"\033[93m═══════════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN \033[92m IPV4\033[0m")
        print("2. \033[93mChange \033[97mKharej [4] \033[92m IPV4\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[93mChange \033[97mGRE6 \033[93mPrivate IPV6\033[0m")
        print("5. \033[93mChange \033[97mGeneve \033[93mPrivate IPV6\033[0m")
        print("6. \033[93mChange IPsec \033[92mSecret Key\033[0m")
        print("7. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to edit local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_private = new_ip
                ip_parts = new_ip.split(":")
                if new_ip.endswith(":2"):
                    ip_parts[-1] = "1"
                else:
                    ip_parts[-1] = "2"
                counterpart_ip = ":".join(ip_parts)
                local_ip_gre6 = new_ip
                remote_ip_gre6 = counterpart_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[GRE6]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_gre6 = new_ip
                remote_ip_geneve = wtb_opposite_ipgregen(new_ip)
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "5":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[Geneve]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_geneve = new_ip
                save_stuff_gregen4_iran(
                    private_ip_geneve,
                    None,
                    remote_ip_geneve,
                    ipsec_secret,
                    is_geneve=True,
                )
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mIRAN\033[93m Public IP :\033[0m ")
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mKharej [4]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "6":
            new_key = input(
                "\033[93mEnter new \033[92mIPsec \033[93mSecret Key: \033[0m"
            )
            if new_key:
                update_ipsecsecret("/etc/ipsec.secrets", new_key)
                ipsecsecret = new_key
            else:
                print("\033[91mCrazy Secret Key\033[0m")
        elif choice == "7":
            save_stuff_gregen4_iran(
                private_ip_private, local_ip_private, remote_ip_private, is_gre6=False
            )
            save_stuff_gregen4_iran(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            save_stuff_gregen4_iran(
                private_ip_geneve, None, remote_ip_geneve, is_gre6=False, is_geneve=True
            )
            update_ipsec_ip_multi4(private_ip_geneve)
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Invalid choice. Please select a valid option.")


def gengrekharej4sec_editmulti_local():
    local_ip_private = local_ip("/etc/private4.sh")
    remote_ip_private = remote_ip("/etc/private4.sh")
    private_ip_private = private_ip1("/etc/private4.sh")

    local_ip_gre6 = local_ip("/etc/gre64.sh")
    remote_ip_gre6 = remote_ip("/etc/gre64.sh")
    private_ip_gre6 = private_gre6multi("/etc/gre64.sh")

    remote_ip_geneve = remote_ip("/etc/sys4.sh")
    private_ip_geneve = private_genmulti("/etc/sys4.sh")
    ipsecsecret = get_ipsecsecret("/etc/ipsec.secrets")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("couldn't retrieve IP addresses from private file")
    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("couldn't retrieve IP addresses from gre6 file")
    if not remote_ip_geneve or not private_ip_geneve:
        print("couldn't retrieve IP addresses from geneve file")

    if (
        not local_ip_private
        or not remote_ip_private
        or not private_ip_private
        or not local_ip_gre6
        or not remote_ip_gre6
        or not private_ip_gre6
        or not remote_ip_geneve
        or not private_ip_geneve
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_privatekharej4(
            local_ip_private, remote_ip_private, private_ip_private
        )
        display_stuff_gre6(local_ip_gre6, remote_ip_gre6, private_ip_gre6)
        display_stuff_geneve_greiran(remote_ip_geneve, private_ip_geneve)
        display_ipsecsecretgengre(ipsecsecret)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mGeneve GRE6 + IPSEC\033[93m Kharej [4] Menu\033[0m"
        )
        print('\033[92m "-"\033[93m═══════════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej [4] \033[92m IPV4\033[0m")
        print("2. \033[93mChange \033[97mIRAN \033[92m IPV4\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[93mChange \033[97mGRE6 \033[93mPrivate IPV6\033[0m")
        print("5. \033[93mChange \033[97mGeneve \033[93mPrivate IPV6\033[0m")
        print("6. \033[93mChange IPsec \033[92mSecret Key\033[0m")
        print("7. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to edit local single menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_private = new_ip
                ip_parts = new_ip.split(":")
                if new_ip.endswith(":2"):
                    ip_parts[-1] = "1"
                else:
                    ip_parts[-1] = "2"
                counterpart_ip = ":".join(ip_parts)
                local_ip_gre6 = new_ip
                remote_ip_gre6 = counterpart_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[GRE6]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_gre6 = new_ip
                remote_ip_geneve = wtb_opposite_ipgregen(new_ip)
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "5":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[Geneve]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_geneve = new_ip
                save_stuff_gregen4_kharej(
                    private_ip_geneve,
                    None,
                    remote_ip_geneve,
                    ipsec_secret,
                    is_geneve=True,
                )
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mKharej [4]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input("\033[93mEnter \033[92mIRAN\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "6":
            new_key = input(
                "\033[93mEnter new \033[92mIPsec \033[93mSecret Key: \033[0m"
            )
            if new_key:
                update_ipsecsecret("/etc/ipsec.secrets", new_key)
                ipsecsecret = new_key
            else:
                print("\033[91mCrazy Secret Key\033[0m")
        elif choice == "7":
            save_stuff_gregen4_kharej(
                private_ip_private, local_ip_private, remote_ip_private, is_gre6=False
            )
            save_stuff_gregen4_kharej(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            save_stuff_gregen4_kharej(
                private_ip_geneve, None, remote_ip_geneve, is_gre6=False, is_geneve=True
            )
            update_ipsec_ip(private_ip_geneve)
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Invalid choice. Please select a valid option.")


# server5
def get_current_private_ipsgregen5():
    private_ip_private = private_ip1("/etc/private5.sh")
    private_ip_gre6 = private_gre6multi("/etc/gre65.sh")
    private_ip_geneve = private_genmulti("/etc/sys5.sh")
    return {
        "private": private_ip_private,
        "gre6": private_ip_gre6,
        "geneve": private_ip_geneve,
    }


def update_ipfilegregen5(name, new_ip, update_type):
    try:
        with open(name, "r") as f:
            content = f.read()

        if update_type == "private":
            new_content = re.sub(
                r"ip (-6 )?addr add [^ ]+/64 dev azumi?",
                f"ip -6 addr add {new_ip}/64 dev azumi",
                content,
            )
            ip_parts = new_ip.split(":")
            if new_ip.endswith(":2"):
                ip_parts[-1] = "1"
            else:
                ip_parts[-1] = "2"
            counterpart_ip = ":".join(ip_parts)
            new_content = re.sub(
                r"ip (-6 )?route add [^ ]+/64 dev azumi?",
                f"ip -6 route add {counterpart_ip}/64 dev azumi",
                new_content,
            )

            update_ipfilegregen5("/etc/gre65.sh", new_ip, update_type="gre6_local")
            update_ipfilegregen5(
                "/etc/gre65.sh", counterpart_ip, update_type="gre6_remote"
            )
        elif update_type == "local":
            new_content = re.sub(r"local \S+", f"local {new_ip}", content)
        elif update_type == "remote":
            new_content = re.sub(r"remote \S+", f"remote {new_ip}", content)
        elif update_type == "gre6_local":
            new_content = re.sub(r"local \S+", f"local {new_ip}", content)
        elif update_type == "gre6_remote":
            new_content = re.sub(r"remote \S+", f"remote {new_ip}", content)
        elif update_type == "geneve_remote":
            new_content = re.sub(r"remote \S+", f"remote {new_ip}", content)
        elif update_type == "geneve_private":
            new_content = re.sub(
                r"ip addr add \S+/64 dev azumigen?",
                f"ip addr add {new_ip}/64 dev azumigen",
                content,
            )
            counterpart_ip = wtb_opposite_ipgregen(new_ip)
            new_content = re.sub(
                r"ip route add \S+/64 dev azumigen?",
                f"ip route add {counterpart_ip}/64 dev azumigen",
                new_content,
            )

        with open(name, "w") as f:
            f.write(new_content)
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def update_ipsec_confgengre5(name, new_private_ip):
    try:
        with open(name, "r") as f:
            content = f.readlines()

        start_idx, end_idx = None, None
        for i, line in enumerate(content):
            if line.strip() == "conn Geneve5":
                start_idx = i
            elif start_idx is not None and line.strip().startswith("conn "):
                end_idx = i
                break

        if start_idx is None:
            print("\033[91m'conn Geneve5' section not found\033[0m")
            return

        if end_idx is None:
            end_idx = len(content)

        section = content[start_idx:end_idx]
        ip_parts = new_private_ip.split(":")
        if new_private_ip.endswith(":2"):
            ip_parts[-1] = "1"
        else:
            ip_parts[-1] = "2"
        counterpart_ip = ":".join(ip_parts)

        new_section = []
        for line in section:
            line = re.sub(r"leftsubnet=\S+", f"leftsubnet={new_private_ip}/64", line)
            line = re.sub(r"leftid=\S+", f"leftid={new_private_ip}", line)
            line = re.sub(r"right=\S+", f"right={counterpart_ip}", line)
            line = re.sub(r"rightsubnet=\S+", f"rightsubnet={counterpart_ip}/64", line)
            new_section.append(line)

        new_content = content[:start_idx] + new_section + content[end_idx:]

        with open(name, "w") as f:
            f.writelines(new_content)

        print(f"\033[92m'conn Geneve5' section updated successfully\033[0m")
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def save_stuff_gregen5_iran(
    new_private_ip, local_ip, remote_ip, is_gre6, is_geneve=False
):
    current_ips = get_current_private_ipsgregen5()

    if is_gre6:
        current_ip = current_ips["gre6"]
    elif is_geneve:
        current_ip = current_ips["geneve"]
    else:
        current_ip = current_ips["private"]

    if current_ip:
        delete_ufw_rules(current_ip)

    add_ufw_rules(new_private_ip)

    counterpart_ip = wtb_opposite_ipgregen(new_private_ip)

    try:
        if is_gre6:
            update_pingfilegregen(
                "/etc/ping_ip5.sh", counterpart_ip, update_type="ping_ip"
            )
            update_ipfilegregen5("/etc/gre65.sh", new_private_ip, update_type="private")
            update_ipfilegregen5("/etc/gre65.sh", remote_ip, update_type="remote")
            update_ipfilegregen5(
                "/etc/sys5.sh", counterpart_ip, update_type="geneve_remote"
            )
            update_pingfilegregen("/etc/ping5_sys.sh", remote_ip, update_type="geneve")
            update_pingfilegregen(
                "/etc/ping5_sys.sh", counterpart_ip, update_type="geneve_opposite"
            )
        elif is_geneve:
            update_ipfilegregen5(
                "/etc/sys5.sh", new_private_ip, update_type="geneve_private"
            )
            update_pingfilegregen(
                "/etc/ping5_sys.sh", counterpart_ip, update_type="ping_sys_opposite"
            )
            update_ipsec_confgengre5("/etc/ipsec1.conf", new_private_ip)
        else:
            update_pingfilegregen(
                "/etc/ping_v65.sh", counterpart_ip, update_type="ping_v6"
            )
            update_ipfilegregen5(
                "/etc/private5.sh", new_private_ip, update_type="private"
            )
            update_ipfilegregen5("/etc/private5.sh", local_ip, update_type="local")
            update_ipfilegregen5("/etc/private5.sh", remote_ip, update_type="remote")
            update_ipfilegregen5(
                "/etc/gre65.sh", counterpart_ip, update_type="gre6_remote"
            )
            update_pingfilegregen(
                "/etc/ping5_sys.sh", counterpart_ip, update_type="ping_sys_opposite"
            )

        interface = "azumig65" if is_gre6 else "azumi5"
        if is_geneve:
            interface = "azumigen5"

        try:
            subprocess.run(["ip", "link", "set", "dev", interface, "down"], check=True)
            subprocess.run(["ip", "link", "delete", interface], check=True)
        except subprocess.CalledProcessError:
            print("\033[91merror bringing interface down or deleting it\033[0m")

        script = "/etc/gre65.sh" if is_gre6 else "/etc/private5.sh"
        if is_geneve:
            script = "/etc/sys5.sh"
        result = subprocess.run(["/bin/bash", script], capture_output=True, text=True)
        if "RTNETLINK answers: File exists" in result.stderr:
            print("\033[91madditional ip already exists. Ignoring this error\033[0m")
        else:
            result.check_returncode()

        subprocess.run(["sudo", "systemctl", "daemon-reload"], check=True)

        try:
            subprocess.run(["systemctl", "restart", "ping_v65"], check=True)
            print("\033[92m✔ ping_v65 service restarted successfully!\033[0m")
        except subprocess.CalledProcessError as e:
            if "Unit ping_v65 not found" in (e.stderr or ""):
                print("\033[91mcouldn't restart ping_v65\033[0m")

        try:
            subprocess.run(["sudo", "systemctl", "restart", "ping5_gen"], check=True)
            print("\033[92m✔ ping5_gen service restarted successfully!\033[0m")
        except subprocess.CalledProcessError as e:
            if "Unit ping5_gen not found" in (e.stderr or ""):
                print("\033[91mcouldn't restart ping5_gen\033[0m")

        try:
            subprocess.run(["sudo", "systemctl", "restart", "ping_ip5"], check=True)
            print("\033[92m✔ ping_ip5 service restarted successfully!\033[0m")
        except subprocess.CalledProcessError as e:
            if "Unit ping_ip5 not found" in (e.stderr or ""):
                print("\033[91mcouldn't restart ping_ip5\033[0m")

        subprocess.run(["systemctl", "restart", "strong-azumi1"], check=True)

        result = subprocess.run(
            ["systemctl", "list-units", "--full", "--all", "strong-azumi1.service"],
            capture_output=True,
            text=True,
        )
        if "strong-azumi1.service" in result.stdout:
            subprocess.run(["systemctl", "restart", "strong-azumi1"], check=True)
        else:
            print("\033[91mstrong service not found. don't mind this error\033[0m")

    except subprocess.CalledProcessError:
        print(
            "\033[91merror in applying network changes : gen gre related error\033[0m"
        )
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")
    print(
        f"\033[92m✔ Changes saved and {interface} interface updated successfully!\033[0m"
    )


def save_stuff_gregen5_kharej(
    new_private_ip, local_ip, remote_ip, is_gre6, is_geneve=False
):
    current_ips = get_current_private_ipsgregen5()

    if is_gre6:
        current_ip = current_ips["gre6"]
    elif is_geneve:
        current_ip = current_ips["geneve"]
    else:
        current_ip = current_ips["private"]

    if current_ip:
        delete_ufw_rules(current_ip)

    add_ufw_rules(new_private_ip)

    counterpart_ip = wtb_opposite_ipgregen(new_private_ip)

    try:
        if is_gre6:
            update_pingfilegregen(
                "/etc/ping_ip5.sh", counterpart_ip, update_type="ping_ip"
            )
            update_ipfilegregen5("/etc/gre65.sh", new_private_ip, update_type="private")
            update_ipfilegregen5("/etc/gre65.sh", remote_ip, update_type="remote")
            update_ipfilegregen5(
                "/etc/sys5.sh", counterpart_ip, update_type="geneve_remote"
            )
            update_pingfilegregen("/etc/ping5_sys.sh", remote_ip, update_type="geneve")
            update_pingfilegregen(
                "/etc/ping5_sys.sh", counterpart_ip, update_type="geneve_opposite"
            )
        elif is_geneve:
            update_ipfilegregen5(
                "/etc/sys5.sh", new_private_ip, update_type="geneve_private"
            )
            update_pingfilegregen(
                "/etc/ping5_sys.sh", counterpart_ip, update_type="ping_sys_opposite"
            )
            update_ipsec_config_leftsubnet("/etc/ipsec1.conf", new_private_ip)
        else:
            update_pingfilegregen(
                "/etc/ping_v65.sh", counterpart_ip, update_type="ping_v6"
            )
            update_ipfilegregen5(
                "/etc/private5.sh", new_private_ip, update_type="private"
            )
            update_ipfilegregen5("/etc/private5.sh", local_ip, update_type="local")
            update_ipfilegregen5("/etc/private5.sh", remote_ip, update_type="remote")
            update_ipfilegregen5(
                "/etc/gre65.sh", counterpart_ip, update_type="gre6_remote"
            )
            update_pingfilegregen(
                "/etc/ping5_sys.sh", counterpart_ip, update_type="ping_sys_opposite"
            )

        interface = "azumig65" if is_gre6 else "azumi5"
        if is_geneve:
            interface = "azumigen5"

        try:
            subprocess.run(["ip", "link", "set", "dev", interface, "down"], check=True)
            subprocess.run(["ip", "link", "delete", interface], check=True)
        except subprocess.CalledProcessError:
            print("\033[91merror bringing interface down or deleting it\033[0m")

        script = "/etc/gre65.sh" if is_gre6 else "/etc/private5.sh"
        if is_geneve:
            script = "/etc/sys5.sh"
        result = subprocess.run(["/bin/bash", script], capture_output=True, text=True)
        if "RTNETLINK answers: File exists" in result.stderr:
            print("\033[91madditional ip already exists. Ignoring this error\033[0m")
        else:
            result.check_returncode()

        subprocess.run(["sudo", "systemctl", "daemon-reload"], check=True)

        try:
            subprocess.run(["systemctl", "restart", "ping_v65"], check=True)
            print("\033[92m✔ ping_v65 service restarted successfully!\033[0m")
        except subprocess.CalledProcessError as e:
            if "Unit ping_v65 not found" in (e.stderr or ""):
                print("\033[91mcouldn't restart ping_v65\033[0m")

        try:
            subprocess.run(["sudo", "systemctl", "restart", "ping5_gen"], check=True)
            print("\033[92m✔ ping5_gen service restarted successfully!\033[0m")
        except subprocess.CalledProcessError as e:
            if "Unit ping5_gen not found" in (e.stderr or ""):
                print("\033[91mcouldn't restart ping5_gen\033[0m")

        try:
            subprocess.run(["sudo", "systemctl", "restart", "ping_ip5"], check=True)
            print("\033[92m✔ ping_ip5 service restarted successfully!\033[0m")
        except subprocess.CalledProcessError as e:
            if "Unit ping_ip5 not found" in (e.stderr or ""):
                print("\033[91mcouldn't restart ping_ip5\033[0m")

        subprocess.run(["systemctl", "restart", "strong-azumi1"], check=True)

        result = subprocess.run(
            ["systemctl", "list-units", "--full", "--all", "strong-azumi1.service"],
            capture_output=True,
            text=True,
        )
        if "strong-azumi1.service" in result.stdout:
            subprocess.run(["systemctl", "restart", "strong-azumi1"], check=True)
        else:
            print("\033[91mstrong service not found. don't mind this error\033[0m")

    except subprocess.CalledProcessError:
        print(
            "\033[91merror in applying network changes : gen gre related error\033[0m"
        )
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")
    print(
        f"\033[92m✔ Changes saved and {interface} interface updated successfully!\033[0m"
    )


def gengreir5sec_editmulti_local():
    local_ip_private = local_ip("/etc/private5.sh")
    remote_ip_private = remote_ip("/etc/private5.sh")
    private_ip_private = private_ip1("/etc/private5.sh")

    local_ip_gre6 = local_ip("/etc/gre65.sh")
    remote_ip_gre6 = remote_ip("/etc/gre65.sh")
    private_ip_gre6 = private_gre6multi("/etc/gre65.sh")

    remote_ip_geneve = remote_ip("/etc/sys5.sh")
    private_ip_geneve = private_genmulti("/etc/sys5.sh")
    ipsecsecret = get_ipsecsecret("/etc/ipsec.secrets")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("couldn't retrieve IP addresses from private file")
    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("couldn't retrieve IP addresses from gre6 file")
    if not remote_ip_geneve or not private_ip_geneve:
        print("couldn't retrieve IP addresses from geneve file")

    if (
        not local_ip_private
        or not remote_ip_private
        or not private_ip_private
        or not local_ip_gre6
        or not remote_ip_gre6
        or not private_ip_gre6
        or not remote_ip_geneve
        or not private_ip_geneve
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_privateiran5(
            local_ip_private, remote_ip_private, private_ip_private
        )
        display_stuff_gre6(local_ip_gre6, remote_ip_gre6, private_ip_gre6)
        display_stuff_geneve_greiran(remote_ip_geneve, private_ip_geneve)
        display_ipsecsecretgengre(ipsecsecret)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mGeneve GRE6 + IPSEC\033[93m IRAN Menu\033[0m")
        print('\033[92m "-"\033[93m═══════════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN \033[92m IPV4\033[0m")
        print("2. \033[93mChange \033[97mKharej [5] \033[92m IPV4\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[93mChange \033[97mGRE6 \033[93mPrivate IPV6\033[0m")
        print("5. \033[93mChange \033[97mGeneve \033[93mPrivate IPV6\033[0m")
        print("6. \033[93mChange IPsec \033[92mSecret Key\033[0m")
        print("7. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to edit local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_private = new_ip
                ip_parts = new_ip.split(":")
                if new_ip.endswith(":2"):
                    ip_parts[-1] = "1"
                else:
                    ip_parts[-1] = "2"
                counterpart_ip = ":".join(ip_parts)
                local_ip_gre6 = new_ip
                remote_ip_gre6 = counterpart_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[GRE6]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_gre6 = new_ip
                remote_ip_geneve = wtb_opposite_ipgregen(new_ip)
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "5":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[Geneve]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_geneve = new_ip
                save_stuff_gregen5_iran(
                    private_ip_geneve,
                    None,
                    remote_ip_geneve,
                    ipsec_secret,
                    is_geneve=True,
                )
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mIRAN\033[93m Public IP :\033[0m ")
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mKharej [5]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "6":
            new_key = input(
                "\033[93mEnter new \033[92mIPsec \033[93mSecret Key: \033[0m"
            )
            if new_key:
                update_ipsecsecret("/etc/ipsec.secrets", new_key)
                ipsecsecret = new_key
            else:
                print("\033[91mCrazy Secret Key\033[0m")
        elif choice == "7":
            save_stuff_gregen5_iran(
                private_ip_private, local_ip_private, remote_ip_private, is_gre6=False
            )
            save_stuff_gregen5_iran(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            save_stuff_gregen5_iran(
                private_ip_geneve, None, remote_ip_geneve, is_gre6=False, is_geneve=True
            )
            update_ipsec_ip_multi5(private_ip_geneve)
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Invalid choice. Please select a valid option.")


def gengrekharej5sec_editmulti_local():
    local_ip_private = local_ip("/etc/private5.sh")
    remote_ip_private = remote_ip("/etc/private5.sh")
    private_ip_private = private_ip1("/etc/private5.sh")

    local_ip_gre6 = local_ip("/etc/gre65.sh")
    remote_ip_gre6 = remote_ip("/etc/gre65.sh")
    private_ip_gre6 = private_gre6multi("/etc/gre65.sh")

    remote_ip_geneve = remote_ip("/etc/sys5.sh")
    private_ip_geneve = private_genmulti("/etc/sys5.sh")
    ipsecsecret = get_ipsecsecret("/etc/ipsec.secrets")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("couldn't retrieve IP addresses from private file")
    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("couldn't retrieve IP addresses from gre6 file")
    if not remote_ip_geneve or not private_ip_geneve:
        print("couldn't retrieve IP addresses from geneve file")

    if (
        not local_ip_private
        or not remote_ip_private
        or not private_ip_private
        or not local_ip_gre6
        or not remote_ip_gre6
        or not private_ip_gre6
        or not remote_ip_geneve
        or not private_ip_geneve
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_privatekharej5(
            local_ip_private, remote_ip_private, private_ip_private
        )
        display_stuff_gre6(local_ip_gre6, remote_ip_gre6, private_ip_gre6)
        display_stuff_geneve_greiran(remote_ip_geneve, private_ip_geneve)
        display_ipsecsecretgengre(ipsecsecret)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mGeneve GRE6 + IPSEC\033[93m Kharej [5] Menu\033[0m"
        )
        print('\033[92m "-"\033[93m═══════════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej [5] \033[92m IPV4\033[0m")
        print("2. \033[93mChange \033[97mIRAN \033[92m IPV4\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[93mChange \033[97mGRE6 \033[93mPrivate IPV6\033[0m")
        print("5. \033[93mChange \033[97mGeneve \033[93mPrivate IPV6\033[0m")
        print("6. \033[93mChange IPsec \033[92mSecret Key\033[0m")
        print("7. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to edit local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_private = new_ip
                ip_parts = new_ip.split(":")
                if new_ip.endswith(":2"):
                    ip_parts[-1] = "1"
                else:
                    ip_parts[-1] = "2"
                counterpart_ip = ":".join(ip_parts)
                local_ip_gre6 = new_ip
                remote_ip_gre6 = counterpart_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[GRE6]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_gre6 = new_ip
                remote_ip_geneve = wtb_opposite_ipgregen(new_ip)
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "5":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[Geneve]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_geneve = new_ip
                save_stuff_gregen5_kharej(
                    private_ip_geneve,
                    None,
                    remote_ip_geneve,
                    ipsec_secret,
                    is_geneve=True,
                )
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mKharej [5]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input("\033[93mEnter \033[92mIRAN\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "6":
            new_key = input(
                "\033[93mEnter new \033[92mIPsec \033[93mSecret Key: \033[0m"
            )
            if new_key:
                update_ipsecsecret("/etc/ipsec.secrets", new_key)
                ipsecsecret = new_key
            else:
                print("\033[91mCrazy Secret Key\033[0m")
        elif choice == "7":
            save_stuff_gregen5_kharej(
                private_ip_private, local_ip_private, remote_ip_private, is_gre6=False
            )
            save_stuff_gregen5_kharej(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            save_stuff_gregen5_kharej(
                private_ip_geneve, None, remote_ip_geneve, is_gre6=False, is_geneve=True
            )
            update_ipsec_ip(private_ip_geneve)
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Invalid choice. Please select a valid option.")


# iran5 kharej 1


def gengrekharejone1sec_editmulti_local():
    local_ip_private = local_ip("/etc/private1.sh")
    remote_ip_private = remote_ip("/etc/private1.sh")
    private_ip_private = private_ip1("/etc/private1.sh")

    local_ip_gre6 = local_ip("/etc/gre61.sh")
    remote_ip_gre6 = remote_ip("/etc/gre61.sh")
    private_ip_gre6 = private_gre6multi("/etc/gre61.sh")

    remote_ip_geneve = remote_ip("/etc/sys1.sh")
    private_ip_geneve = private_genmulti("/etc/sys1.sh")
    ipsecsecret = get_ipsecsecret("/etc/ipsec.secrets")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("couldn't retrieve IP addresses from private file")
    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("couldn't retrieve IP addresses from gre6 file")
    if not remote_ip_geneve or not private_ip_geneve:
        print("couldn't retrieve IP addresses from geneve file")

    if (
        not local_ip_private
        or not remote_ip_private
        or not private_ip_private
        or not local_ip_gre6
        or not remote_ip_gre6
        or not private_ip_gre6
        or not remote_ip_geneve
        or not private_ip_geneve
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_privatekharejone1(
            local_ip_private, remote_ip_private, private_ip_private
        )
        display_stuff_gre6(local_ip_gre6, remote_ip_gre6, private_ip_gre6)
        display_stuff_geneve_greiran(remote_ip_geneve, private_ip_geneve)
        display_ipsecsecretgengre(ipsecsecret)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mGeneve GRE6 + IPSEC\033[93m Kharej Menu\033[0m")
        print('\033[92m "-"\033[93m═══════════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej \033[92m IPV4\033[0m")
        print("2. \033[93mChange \033[97mIRAN [1] \033[92m IPV4\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[93mChange \033[97mGRE6 \033[93mPrivate IPV6\033[0m")
        print("5. \033[93mChange \033[97mGeneve \033[93mPrivate IPV6\033[0m")
        print("6. \033[93mChange IPsec \033[92mSecret Key\033[0m")
        print("7. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to edit local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_private = new_ip
                ip_parts = new_ip.split(":")
                if new_ip.endswith(":2"):
                    ip_parts[-1] = "1"
                else:
                    ip_parts[-1] = "2"
                counterpart_ip = ":".join(ip_parts)
                local_ip_gre6 = new_ip
                remote_ip_gre6 = counterpart_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[GRE6]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_gre6 = new_ip
                remote_ip_geneve = wtb_opposite_ipgregen(new_ip)
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "5":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[Geneve]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_geneve = new_ip
                save_stuff_gregen1_iran(
                    private_ip_geneve,
                    None,
                    remote_ip_geneve,
                    ipsec_secret,
                    is_geneve=True,
                )
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mKharej\033[93m Public IP :\033[0m ")
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input("\033[93mEnter \033[92mIRAN [1]\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "6":
            new_key = input(
                "\033[93mEnter new \033[92mIPsec \033[93mSecret Key: \033[0m"
            )
            if new_key:
                update_ipsecsecret("/etc/ipsec.secrets", new_key)
                ipsecsecret = new_key
            else:
                print("\033[91mCrazy Secret Key\033[0m")
        elif choice == "7":
            save_stuff_gregen1_iran(
                private_ip_private, local_ip_private, remote_ip_private, is_gre6=False
            )
            save_stuff_gregen1_iran(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            save_stuff_gregen1_iran(
                private_ip_geneve, None, remote_ip_geneve, is_gre6=False, is_geneve=True
            )
            update_ipsec_ip_multi(private_ip_geneve)
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Invalid choice. Please select a valid option.")


def gengreiranfive1sec_editmulti_local():
    local_ip_private = local_ip("/etc/private1.sh")
    remote_ip_private = remote_ip("/etc/private1.sh")
    private_ip_private = private_ip1("/etc/private1.sh")

    local_ip_gre6 = local_ip("/etc/gre61.sh")
    remote_ip_gre6 = remote_ip("/etc/gre61.sh")
    private_ip_gre6 = private_gre6multi("/etc/gre61.sh")

    remote_ip_geneve = remote_ip("/etc/sys1.sh")
    private_ip_geneve = private_genmulti("/etc/sys1.sh")
    ipsecsecret = get_ipsecsecret("/etc/ipsec.secrets")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("couldn't retrieve IP addresses from private file")
    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("couldn't retrieve IP addresses from gre6 file")
    if not remote_ip_geneve or not private_ip_geneve:
        print("couldn't retrieve IP addresses from geneve file")

    if (
        not local_ip_private
        or not remote_ip_private
        or not private_ip_private
        or not local_ip_gre6
        or not remote_ip_gre6
        or not private_ip_gre6
        or not remote_ip_geneve
        or not private_ip_geneve
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_privateiranfive1(
            local_ip_private, remote_ip_private, private_ip_private
        )
        display_stuff_gre6(local_ip_gre6, remote_ip_gre6, private_ip_gre6)
        display_stuff_geneve_greiran(remote_ip_geneve, private_ip_geneve)
        display_ipsecsecretgengre(ipsecsecret)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mGeneve GRE6 + IPSEC\033[93m IRAN [1] Menu\033[0m")
        print('\033[92m "-"\033[93m═══════════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN [1] \033[92m IPV4\033[0m")
        print("2. \033[93mChange \033[97mKharej\033[92m IPV4\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[93mChange \033[97mGRE6 \033[93mPrivate IPV6\033[0m")
        print("5. \033[93mChange \033[97mGeneve \033[93mPrivate IPV6\033[0m")
        print("6. \033[93mChange IPsec \033[92mSecret Key\033[0m")
        print("7. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to edit local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_private = new_ip
                ip_parts = new_ip.split(":")
                if new_ip.endswith(":2"):
                    ip_parts[-1] = "1"
                else:
                    ip_parts[-1] = "2"
                counterpart_ip = ":".join(ip_parts)
                local_ip_gre6 = new_ip
                remote_ip_gre6 = counterpart_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[GRE6]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_gre6 = new_ip
                remote_ip_geneve = wtb_opposite_ipgregen(new_ip)
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "5":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[Geneve]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_geneve = new_ip
                save_stuff_gregen1_kharej(
                    private_ip_geneve,
                    None,
                    remote_ip_geneve,
                    ipsec_secret,
                    is_geneve=True,
                )
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mIRAN [1]\033[93m Public IP :\033[0m ")
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input("\033[93mEnter \033[92mKharej\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "6":
            new_key = input(
                "\033[93mEnter new \033[92mIPsec \033[93mSecret Key: \033[0m"
            )
            if new_key:
                update_ipsecsecret("/etc/ipsec.secrets", new_key)
                ipsecsecret = new_key
            else:
                print("\033[91mCrazy Secret Key\033[0m")
        elif choice == "7":
            save_stuff_gregen1_kharej(
                private_ip_private, local_ip_private, remote_ip_private, is_gre6=False
            )
            save_stuff_gregen1_kharej(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            save_stuff_gregen1_kharej(
                private_ip_geneve, None, remote_ip_geneve, is_gre6=False, is_geneve=True
            )
            update_ipsec_ip(private_ip_geneve)
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Invalid choice. Please select a valid option.")


# iran5 kharej 2


def gengrekharejone2sec_editmulti_local():
    local_ip_private = local_ip("/etc/private2.sh")
    remote_ip_private = remote_ip("/etc/private2.sh")
    private_ip_private = private_ip1("/etc/private2.sh")

    local_ip_gre6 = local_ip("/etc/gre62.sh")
    remote_ip_gre6 = remote_ip("/etc/gre62.sh")
    private_ip_gre6 = private_gre6multi("/etc/gre62.sh")

    remote_ip_geneve = remote_ip("/etc/sys2.sh")
    private_ip_geneve = private_genmulti("/etc/sys2.sh")
    ipsecsecret = get_ipsecsecret("/etc/ipsec.secrets")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("couldn't retrieve IP addresses from private file")
    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("couldn't retrieve IP addresses from gre6 file")
    if not remote_ip_geneve or not private_ip_geneve:
        print("couldn't retrieve IP addresses from geneve file")

    if (
        not local_ip_private
        or not remote_ip_private
        or not private_ip_private
        or not local_ip_gre6
        or not remote_ip_gre6
        or not private_ip_gre6
        or not remote_ip_geneve
        or not private_ip_geneve
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_privatekharejone2(
            local_ip_private, remote_ip_private, private_ip_private
        )
        display_stuff_gre6(local_ip_gre6, remote_ip_gre6, private_ip_gre6)
        display_stuff_geneve_greiran(remote_ip_geneve, private_ip_geneve)
        display_ipsecsecretgengre(ipsecsecret)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mGeneve GRE6 + IPSEC\033[93m Kharej Menu\033[0m")
        print('\033[92m "-"\033[93m═══════════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej \033[92m IPV4\033[0m")
        print("2. \033[93mChange \033[97mIRAN [2] \033[92m IPV4\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[93mChange \033[97mGRE6 \033[93mPrivate IPV6\033[0m")
        print("5. \033[93mChange \033[97mGeneve \033[93mPrivate IPV6\033[0m")
        print("6. \033[93mChange IPsec \033[92mSecret Key\033[0m")
        print("7. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to edit local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_private = new_ip
                ip_parts = new_ip.split(":")
                if new_ip.endswith(":2"):
                    ip_parts[-1] = "1"
                else:
                    ip_parts[-1] = "2"
                counterpart_ip = ":".join(ip_parts)
                local_ip_gre6 = new_ip
                remote_ip_gre6 = counterpart_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[GRE6]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_gre6 = new_ip
                remote_ip_geneve = wtb_opposite_ipgregen(new_ip)
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "5":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[Geneve]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_geneve = new_ip
                save_stuff_gregen2_iran(
                    private_ip_geneve,
                    None,
                    remote_ip_geneve,
                    ipsec_secret,
                    is_geneve=True,
                )
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mKharej\033[93m Public IP :\033[0m ")
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input("\033[93mEnter \033[92mIRAN [2]\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "6":
            new_key = input(
                "\033[93mEnter new \033[92mIPsec \033[93mSecret Key: \033[0m"
            )
            if new_key:
                update_ipsecsecret("/etc/ipsec.secrets", new_key)
                ipsecsecret = new_key
            else:
                print("\033[91mCrazy Secret Key\033[0m")
        elif choice == "7":
            save_stuff_gregen2_iran(
                private_ip_private, local_ip_private, remote_ip_private, is_gre6=False
            )
            save_stuff_gregen2_iran(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            save_stuff_gregen2_iran(
                private_ip_geneve, None, remote_ip_geneve, is_gre6=False, is_geneve=True
            )
            update_ipsec_ip_multi2(private_ip_geneve)
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Invalid choice. Please select a valid option.")


def gengreiranfive2sec_editmulti_local():
    local_ip_private = local_ip("/etc/private2.sh")
    remote_ip_private = remote_ip("/etc/private2.sh")
    private_ip_private = private_ip1("/etc/private2.sh")

    local_ip_gre6 = local_ip("/etc/gre62.sh")
    remote_ip_gre6 = remote_ip("/etc/gre62.sh")
    private_ip_gre6 = private_gre6multi("/etc/gre62.sh")

    remote_ip_geneve = remote_ip("/etc/sys2.sh")
    private_ip_geneve = private_genmulti("/etc/sys2.sh")
    ipsecsecret = get_ipsecsecret("/etc/ipsec.secrets")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("couldn't retrieve IP addresses from private file")
    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("couldn't retrieve IP addresses from gre6 file")
    if not remote_ip_geneve or not private_ip_geneve:
        print("couldn't retrieve IP addresses from geneve file")

    if (
        not local_ip_private
        or not remote_ip_private
        or not private_ip_private
        or not local_ip_gre6
        or not remote_ip_gre6
        or not private_ip_gre6
        or not remote_ip_geneve
        or not private_ip_geneve
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_privateiranfive2(
            local_ip_private, remote_ip_private, private_ip_private
        )
        display_stuff_gre6(local_ip_gre6, remote_ip_gre6, private_ip_gre6)
        display_stuff_geneve_greiran(remote_ip_geneve, private_ip_geneve)
        display_ipsecsecretgengre(ipsecsecret)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mGeneve GRE6 + IPSEC\033[93m IRAN [2] Menu\033[0m")
        print('\033[92m "-"\033[93m═══════════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN [2] \033[92m IPV4\033[0m")
        print("2. \033[93mChange \033[97mKharej\033[92m IPV4\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[93mChange \033[97mGRE6 \033[93mPrivate IPV6\033[0m")
        print("5. \033[93mChange \033[97mGeneve \033[93mPrivate IPV6\033[0m")
        print("6. \033[93mChange IPsec \033[92mSecret Key\033[0m")
        print("7. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to edit local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_private = new_ip
                ip_parts = new_ip.split(":")
                if new_ip.endswith(":2"):
                    ip_parts[-1] = "1"
                else:
                    ip_parts[-1] = "2"
                counterpart_ip = ":".join(ip_parts)
                local_ip_gre6 = new_ip
                remote_ip_gre6 = counterpart_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[GRE6]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_gre6 = new_ip
                remote_ip_geneve = wtb_opposite_ipgregen(new_ip)
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "5":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[Geneve]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_geneve = new_ip
                save_stuff_gregen2_kharej(
                    private_ip_geneve,
                    None,
                    remote_ip_geneve,
                    ipsec_secret,
                    is_geneve=True,
                )
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mIRAN [2]\033[93m Public IP :\033[0m ")
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input("\033[93mEnter \033[92mKharej\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "6":
            new_key = input(
                "\033[93mEnter new \033[92mIPsec \033[93mSecret Key: \033[0m"
            )
            if new_key:
                update_ipsecsecret("/etc/ipsec.secrets", new_key)
                ipsecsecret = new_key
            else:
                print("\033[91mCrazy Secret Key\033[0m")
        elif choice == "7":
            save_stuff_gregen2_kharej(
                private_ip_private, local_ip_private, remote_ip_private, is_gre6=False
            )
            save_stuff_gregen2_kharej(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            save_stuff_gregen2_kharej(
                private_ip_geneve, None, remote_ip_geneve, is_gre6=False, is_geneve=True
            )
            update_ipsec_ip(private_ip_geneve)
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Invalid choice. Please select a valid option.")


# iran5 kharej 3


def gengrekharejone3sec_editmulti_local():
    local_ip_private = local_ip("/etc/private3.sh")
    remote_ip_private = remote_ip("/etc/private3.sh")
    private_ip_private = private_ip1("/etc/private3.sh")

    local_ip_gre6 = local_ip("/etc/gre63.sh")
    remote_ip_gre6 = remote_ip("/etc/gre63.sh")
    private_ip_gre6 = private_gre6multi("/etc/gre63.sh")

    remote_ip_geneve = remote_ip("/etc/sys3.sh")
    private_ip_geneve = private_genmulti("/etc/sys3.sh")
    ipsecsecret = get_ipsecsecret("/etc/ipsec.secrets")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("couldn't retrieve IP addresses from private file")
    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("couldn't retrieve IP addresses from gre6 file")
    if not remote_ip_geneve or not private_ip_geneve:
        print("couldn't retrieve IP addresses from geneve file")

    if (
        not local_ip_private
        or not remote_ip_private
        or not private_ip_private
        or not local_ip_gre6
        or not remote_ip_gre6
        or not private_ip_gre6
        or not remote_ip_geneve
        or not private_ip_geneve
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_privatekharejone3(
            local_ip_private, remote_ip_private, private_ip_private
        )
        display_stuff_gre6(local_ip_gre6, remote_ip_gre6, private_ip_gre6)
        display_stuff_geneve_greiran(remote_ip_geneve, private_ip_geneve)
        display_ipsecsecretgengre(ipsecsecret)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mGeneve GRE6 + IPSEC\033[93m Kharej Menu\033[0m")
        print('\033[92m "-"\033[93m═══════════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej \033[92m IPV4\033[0m")
        print("2. \033[93mChange \033[97mIRAN [3] \033[92m IPV4\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[93mChange \033[97mGRE6 \033[93mPrivate IPV6\033[0m")
        print("5. \033[93mChange \033[97mGeneve \033[93mPrivate IPV6\033[0m")
        print("6. \033[93mChange IPsec \033[92mSecret Key\033[0m")
        print("7. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to edit local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_private = new_ip
                ip_parts = new_ip.split(":")
                if new_ip.endswith(":2"):
                    ip_parts[-1] = "1"
                else:
                    ip_parts[-1] = "2"
                counterpart_ip = ":".join(ip_parts)
                local_ip_gre6 = new_ip
                remote_ip_gre6 = counterpart_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[GRE6]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_gre6 = new_ip
                remote_ip_geneve = wtb_opposite_ipgregen(new_ip)
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "5":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[Geneve]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_geneve = new_ip
                save_stuff_gregen3_iran(
                    private_ip_geneve,
                    None,
                    remote_ip_geneve,
                    ipsec_secret,
                    is_geneve=True,
                )
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mKharej\033[93m Public IP :\033[0m ")
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input("\033[93mEnter \033[92mIRAN [3]\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "6":
            new_key = input(
                "\033[93mEnter new \033[92mIPsec \033[93mSecret Key: \033[0m"
            )
            if new_key:
                update_ipsecsecret("/etc/ipsec.secrets", new_key)
                ipsecsecret = new_key
            else:
                print("\033[91mCrazy Secret Key\033[0m")
        elif choice == "7":
            save_stuff_gregen3_iran(
                private_ip_private, local_ip_private, remote_ip_private, is_gre6=False
            )
            save_stuff_gregen3_iran(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            save_stuff_gregen3_iran(
                private_ip_geneve, None, remote_ip_geneve, is_gre6=False, is_geneve=True
            )
            update_ipsec_ip_multi3(private_ip_geneve)
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Invalid choice. Please select a valid option.")


def gengreiranfive3sec_editmulti_local():
    local_ip_private = local_ip("/etc/private3.sh")
    remote_ip_private = remote_ip("/etc/private3.sh")
    private_ip_private = private_ip1("/etc/private3.sh")

    local_ip_gre6 = local_ip("/etc/gre63.sh")
    remote_ip_gre6 = remote_ip("/etc/gre63.sh")
    private_ip_gre6 = private_gre6multi("/etc/gre63.sh")

    remote_ip_geneve = remote_ip("/etc/sys3.sh")
    private_ip_geneve = private_genmulti("/etc/sys3.sh")
    ipsecsecret = get_ipsecsecret("/etc/ipsec.secrets")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("couldn't retrieve IP addresses from private file")
    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("couldn't retrieve IP addresses from gre6 file")
    if not remote_ip_geneve or not private_ip_geneve:
        print("couldn't retrieve IP addresses from geneve file")

    if (
        not local_ip_private
        or not remote_ip_private
        or not private_ip_private
        or not local_ip_gre6
        or not remote_ip_gre6
        or not private_ip_gre6
        or not remote_ip_geneve
        or not private_ip_geneve
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_privateiranfive3(
            local_ip_private, remote_ip_private, private_ip_private
        )
        display_stuff_gre6(local_ip_gre6, remote_ip_gre6, private_ip_gre6)
        display_stuff_geneve_greiran(remote_ip_geneve, private_ip_geneve)
        display_ipsecsecretgengre(ipsecsecret)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mGeneve GRE6 + IPSEC\033[93m IRAN [3] Menu\033[0m")
        print('\033[92m "-"\033[93m═══════════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN [3] \033[92m IPV4\033[0m")
        print("2. \033[93mChange \033[97mKharej\033[92m IPV4\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[93mChange \033[97mGRE6 \033[93mPrivate IPV6\033[0m")
        print("5. \033[93mChange \033[97mGeneve \033[93mPrivate IPV6\033[0m")
        print("6. \033[93mChange IPsec \033[92mSecret Key\033[0m")
        print("7. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to edit local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_private = new_ip
                ip_parts = new_ip.split(":")
                if new_ip.endswith(":2"):
                    ip_parts[-1] = "1"
                else:
                    ip_parts[-1] = "2"
                counterpart_ip = ":".join(ip_parts)
                local_ip_gre6 = new_ip
                remote_ip_gre6 = counterpart_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[GRE6]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_gre6 = new_ip
                remote_ip_geneve = wtb_opposite_ipgregen(new_ip)
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "5":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[Geneve]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_geneve = new_ip
                save_stuff_gregen3_kharej(
                    private_ip_geneve,
                    None,
                    remote_ip_geneve,
                    ipsec_secret,
                    is_geneve=True,
                )
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mIRAN [3]\033[93m Public IP :\033[0m ")
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input("\033[93mEnter \033[92mKharej\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "6":
            new_key = input(
                "\033[93mEnter new \033[92mIPsec \033[93mSecret Key: \033[0m"
            )
            if new_key:
                update_ipsecsecret("/etc/ipsec.secrets", new_key)
                ipsecsecret = new_key
            else:
                print("\033[91mCrazy Secret Key\033[0m")
        elif choice == "7":
            save_stuff_gregen3_kharej(
                private_ip_private, local_ip_private, remote_ip_private, is_gre6=False
            )
            save_stuff_gregen3_kharej(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            save_stuff_gregen3_kharej(
                private_ip_geneve, None, remote_ip_geneve, is_gre6=False, is_geneve=True
            )
            update_ipsec_ip(private_ip_geneve)
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Invalid choice. Please select a valid option.")


# iran5 kharej 4


def gengrekharejone4sec_editmulti_local():
    local_ip_private = local_ip("/etc/private4.sh")
    remote_ip_private = remote_ip("/etc/private4.sh")
    private_ip_private = private_ip1("/etc/private4.sh")

    local_ip_gre6 = local_ip("/etc/gre64.sh")
    remote_ip_gre6 = remote_ip("/etc/gre64.sh")
    private_ip_gre6 = private_gre6multi("/etc/gre64.sh")

    remote_ip_geneve = remote_ip("/etc/sys4.sh")
    private_ip_geneve = private_genmulti("/etc/sys4.sh")
    ipsecsecret = get_ipsecsecret("/etc/ipsec.secrets")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("couldn't retrieve IP addresses from private file")
    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("couldn't retrieve IP addresses from gre6 file")
    if not remote_ip_geneve or not private_ip_geneve:
        print("couldn't retrieve IP addresses from geneve file")

    if (
        not local_ip_private
        or not remote_ip_private
        or not private_ip_private
        or not local_ip_gre6
        or not remote_ip_gre6
        or not private_ip_gre6
        or not remote_ip_geneve
        or not private_ip_geneve
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_privatekharejone4(
            local_ip_private, remote_ip_private, private_ip_private
        )
        display_stuff_gre6(local_ip_gre6, remote_ip_gre6, private_ip_gre6)
        display_stuff_geneve_greiran(remote_ip_geneve, private_ip_geneve)
        display_ipsecsecretgengre(ipsecsecret)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mGeneve GRE6 + IPSEC\033[93m Kharej Menu\033[0m")
        print('\033[92m "-"\033[93m═══════════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej \033[92m IPV4\033[0m")
        print("2. \033[93mChange \033[97mIRAN [4] \033[92m IPV4\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[93mChange \033[97mGRE6 \033[93mPrivate IPV6\033[0m")
        print("5. \033[93mChange \033[97mGeneve \033[93mPrivate IPV6\033[0m")
        print("6. \033[93mChange IPsec \033[92mSecret Key\033[0m")
        print("7. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to edit local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_private = new_ip
                ip_parts = new_ip.split(":")
                if new_ip.endswith(":2"):
                    ip_parts[-1] = "1"
                else:
                    ip_parts[-1] = "2"
                counterpart_ip = ":".join(ip_parts)
                local_ip_gre6 = new_ip
                remote_ip_gre6 = counterpart_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[GRE6]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_gre6 = new_ip
                remote_ip_geneve = wtb_opposite_ipgregen(new_ip)
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "5":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[Geneve]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_geneve = new_ip
                save_stuff_gregen4_iran(
                    private_ip_geneve,
                    None,
                    remote_ip_geneve,
                    ipsec_secret,
                    is_geneve=True,
                )
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mKharej\033[93m Public IP :\033[0m ")
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input("\033[93mEnter \033[92mIRAN [4]\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "6":
            new_key = input(
                "\033[93mEnter new \033[92mIPsec \033[93mSecret Key: \033[0m"
            )
            if new_key:
                update_ipsecsecret("/etc/ipsec.secrets", new_key)
                ipsecsecret = new_key
            else:
                print("\033[91mCrazy Secret Key\033[0m")
        elif choice == "7":
            save_stuff_gregen4_iran(
                private_ip_private, local_ip_private, remote_ip_private, is_gre6=False
            )
            save_stuff_gregen4_iran(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            save_stuff_gregen4_iran(
                private_ip_geneve, None, remote_ip_geneve, is_gre6=False, is_geneve=True
            )
            update_ipsec_ip_multi4(private_ip_geneve)
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Invalid choice. Please select a valid option.")


def gengreiranfive4sec_editmulti_local():
    local_ip_private = local_ip("/etc/private4.sh")
    remote_ip_private = remote_ip("/etc/private4.sh")
    private_ip_private = private_ip1("/etc/private4.sh")

    local_ip_gre6 = local_ip("/etc/gre64.sh")
    remote_ip_gre6 = remote_ip("/etc/gre64.sh")
    private_ip_gre6 = private_gre6multi("/etc/gre64.sh")

    remote_ip_geneve = remote_ip("/etc/sys4.sh")
    private_ip_geneve = private_genmulti("/etc/sys4.sh")
    ipsecsecret = get_ipsecsecret("/etc/ipsec.secrets")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("couldn't retrieve IP addresses from private file")
    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("couldn't retrieve IP addresses from gre6 file")
    if not remote_ip_geneve or not private_ip_geneve:
        print("couldn't retrieve IP addresses from geneve file")

    if (
        not local_ip_private
        or not remote_ip_private
        or not private_ip_private
        or not local_ip_gre6
        or not remote_ip_gre6
        or not private_ip_gre6
        or not remote_ip_geneve
        or not private_ip_geneve
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_privateiranfive4(
            local_ip_private, remote_ip_private, private_ip_private
        )
        display_stuff_gre6(local_ip_gre6, remote_ip_gre6, private_ip_gre6)
        display_stuff_geneve_greiran(remote_ip_geneve, private_ip_geneve)
        display_ipsecsecretgengre(ipsecsecret)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mGeneve GRE6 + IPSEC\033[93m IRAN [4] Menu\033[0m")
        print('\033[92m "-"\033[93m═══════════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN [4] \033[92m IPV4\033[0m")
        print("2. \033[93mChange \033[97mKharej\033[92m IPV4\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[93mChange \033[97mGRE6 \033[93mPrivate IPV6\033[0m")
        print("5. \033[93mChange \033[97mGeneve \033[93mPrivate IPV6\033[0m")
        print("6. \033[93mChange IPsec \033[92mSecret Key\033[0m")
        print("7. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to edit local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_private = new_ip
                ip_parts = new_ip.split(":")
                if new_ip.endswith(":2"):
                    ip_parts[-1] = "1"
                else:
                    ip_parts[-1] = "2"
                counterpart_ip = ":".join(ip_parts)
                local_ip_gre6 = new_ip
                remote_ip_gre6 = counterpart_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[GRE6]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_gre6 = new_ip
                remote_ip_geneve = wtb_opposite_ipgregen(new_ip)
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "5":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[Geneve]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_geneve = new_ip
                save_stuff_gregen4_kharej(
                    private_ip_geneve,
                    None,
                    remote_ip_geneve,
                    ipsec_secret,
                    is_geneve=True,
                )
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mIRAN [4]\033[93m Public IP :\033[0m ")
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input("\033[93mEnter \033[92mKharej\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "6":
            new_key = input(
                "\033[93mEnter new \033[92mIPsec \033[93mSecret Key: \033[0m"
            )
            if new_key:
                update_ipsecsecret("/etc/ipsec.secrets", new_key)
                ipsecsecret = new_key
            else:
                print("\033[91mCrazy Secret Key\033[0m")
        elif choice == "7":
            save_stuff_gregen4_kharej(
                private_ip_private, local_ip_private, remote_ip_private, is_gre6=False
            )
            save_stuff_gregen4_kharej(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            save_stuff_gregen4_kharej(
                private_ip_geneve, None, remote_ip_geneve, is_gre6=False, is_geneve=True
            )
            update_ipsec_ip(private_ip_geneve)
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Invalid choice. Please select a valid option.")


# iran5 kharej 5


def gengrekharejone5sec_editmulti_local():
    local_ip_private = local_ip("/etc/private5.sh")
    remote_ip_private = remote_ip("/etc/private5.sh")
    private_ip_private = private_ip1("/etc/private5.sh")

    local_ip_gre6 = local_ip("/etc/gre65.sh")
    remote_ip_gre6 = remote_ip("/etc/gre65.sh")
    private_ip_gre6 = private_gre6multi("/etc/gre65.sh")

    remote_ip_geneve = remote_ip("/etc/sys5.sh")
    private_ip_geneve = private_genmulti("/etc/sys5.sh")
    ipsecsecret = get_ipsecsecret("/etc/ipsec.secrets")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("couldn't retrieve IP addresses from private file")
    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("couldn't retrieve IP addresses from gre6 file")
    if not remote_ip_geneve or not private_ip_geneve:
        print("couldn't retrieve IP addresses from geneve file")

    if (
        not local_ip_private
        or not remote_ip_private
        or not private_ip_private
        or not local_ip_gre6
        or not remote_ip_gre6
        or not private_ip_gre6
        or not remote_ip_geneve
        or not private_ip_geneve
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_privatekharejone5(
            local_ip_private, remote_ip_private, private_ip_private
        )
        display_stuff_gre6(local_ip_gre6, remote_ip_gre6, private_ip_gre6)
        display_stuff_geneve_greiran(remote_ip_geneve, private_ip_geneve)
        display_ipsecsecretgengre(ipsecsecret)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mGeneve GRE6 + IPSEC\033[93m Kharej Menu\033[0m")
        print('\033[92m "-"\033[93m═══════════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej \033[92m IPV4\033[0m")
        print("2. \033[93mChange \033[97mIRAN [5] \033[92m IPV4\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[93mChange \033[97mGRE6 \033[93mPrivate IPV6\033[0m")
        print("5. \033[93mChange \033[97mGeneve \033[93mPrivate IPV6\033[0m")
        print("6. \033[93mChange IPsec \033[92mSecret Key\033[0m")
        print("7. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to edit local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_private = new_ip
                ip_parts = new_ip.split(":")
                if new_ip.endswith(":2"):
                    ip_parts[-1] = "1"
                else:
                    ip_parts[-1] = "2"
                counterpart_ip = ":".join(ip_parts)
                local_ip_gre6 = new_ip
                remote_ip_gre6 = counterpart_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[GRE6]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_gre6 = new_ip
                remote_ip_geneve = wtb_opposite_ipgregen(new_ip)
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "5":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[Geneve]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_geneve = new_ip
                save_stuff_gregen5_iran(
                    private_ip_geneve,
                    None,
                    remote_ip_geneve,
                    ipsec_secret,
                    is_geneve=True,
                )
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mKharej\033[93m Public IP :\033[0m ")
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input("\033[93mEnter \033[92mIRAN [5]\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "6":
            new_key = input(
                "\033[93mEnter new \033[92mIPsec \033[93mSecret Key: \033[0m"
            )
            if new_key:
                update_ipsecsecret("/etc/ipsec.secrets", new_key)
                ipsecsecret = new_key
            else:
                print("\033[91mCrazy Secret Key\033[0m")
        elif choice == "7":
            save_stuff_gregen5_iran(
                private_ip_private, local_ip_private, remote_ip_private, is_gre6=False
            )
            save_stuff_gregen5_iran(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            save_stuff_gregen5_iran(
                private_ip_geneve, None, remote_ip_geneve, is_gre6=False, is_geneve=True
            )
            update_ipsec_ip_multi5(private_ip_geneve)
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Invalid choice. Please select a valid option.")


def gengreiranfive5sec_editmulti_local():
    local_ip_private = local_ip("/etc/private5.sh")
    remote_ip_private = remote_ip("/etc/private5.sh")
    private_ip_private = private_ip1("/etc/private5.sh")

    local_ip_gre6 = local_ip("/etc/gre65.sh")
    remote_ip_gre6 = remote_ip("/etc/gre65.sh")
    private_ip_gre6 = private_gre6multi("/etc/gre65.sh")

    remote_ip_geneve = remote_ip("/etc/sys5.sh")
    private_ip_geneve = private_genmulti("/etc/sys5.sh")
    ipsecsecret = get_ipsecsecret("/etc/ipsec.secrets")

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("couldn't retrieve IP addresses from private file")
    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("couldn't retrieve IP addresses from gre6 file")
    if not remote_ip_geneve or not private_ip_geneve:
        print("couldn't retrieve IP addresses from geneve file")

    if (
        not local_ip_private
        or not remote_ip_private
        or not private_ip_private
        or not local_ip_gre6
        or not remote_ip_gre6
        or not private_ip_gre6
        or not remote_ip_geneve
        or not private_ip_geneve
    ):
        print("couldn't retrieve the required IP addresses")
        return

    while True:
        os.system("clear")
        display_stuff_privateiranfive5(
            local_ip_private, remote_ip_private, private_ip_private
        )
        display_stuff_gre6(local_ip_gre6, remote_ip_gre6, private_ip_gre6)
        display_stuff_geneve_greiran(remote_ip_geneve, private_ip_geneve)
        display_ipsecsecretgengre(ipsecsecret)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print("\033[92m(   ) \033[92mGeneve GRE6 + IPSEC\033[93m IRAN [5] Menu\033[0m")
        print('\033[92m "-"\033[93m═══════════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN [5] \033[92m IPV4\033[0m")
        print("2. \033[93mChange \033[97mKharej\033[92m IPV4\033[0m")
        print("3.\033[93m Change \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[93mChange \033[97mGRE6 \033[93mPrivate IPV6\033[0m")
        print("5. \033[93mChange \033[97mGeneve \033[93mPrivate IPV6\033[0m")
        print("6. \033[93mChange IPsec \033[92mSecret Key\033[0m")
        print("7. \033[96mSave Stuff\033[0m")
        print("0. \033[97mback to edit local multi menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_private = new_ip
                ip_parts = new_ip.split(":")
                if new_ip.endswith(":2"):
                    ip_parts[-1] = "1"
                else:
                    ip_parts[-1] = "2"
                counterpart_ip = ":".join(ip_parts)
                local_ip_gre6 = new_ip
                remote_ip_gre6 = counterpart_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[GRE6]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_gre6 = new_ip
                remote_ip_geneve = wtb_opposite_ipgregen(new_ip)
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "5":
            new_ip = input(
                "\033[93mEnter New Private IPv6 address \033[96m[Geneve]\033[93m :\033[0m "
            )
            if new_ip:
                private_ip_geneve = new_ip
                save_stuff_gregen5_kharej(
                    private_ip_geneve,
                    None,
                    remote_ip_geneve,
                    ipsec_secret,
                    is_geneve=True,
                )
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input("\033[93mEnter \033[92mIRAN [5]\033[93m Public IP :\033[0m ")
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input("\033[93mEnter \033[92mKharej\033[93m Public IP :\033[0m ")
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "6":
            new_key = input(
                "\033[93mEnter new \033[92mIPsec \033[93mSecret Key: \033[0m"
            )
            if new_key:
                update_ipsecsecret("/etc/ipsec.secrets", new_key)
                ipsecsecret = new_key
            else:
                print("\033[91mCrazy Secret Key\033[0m")
        elif choice == "7":
            save_stuff_gregen5_kharej(
                private_ip_private, local_ip_private, remote_ip_private, is_gre6=False
            )
            save_stuff_gregen5_kharej(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            save_stuff_gregen5_kharej(
                private_ip_geneve, None, remote_ip_geneve, is_gre6=False, is_geneve=True
            )
            update_ipsec_ip(private_ip_geneve)
            break
        elif choice == "0":
            clear()
            multi_edit_local()
            break
        else:
            print("Invalid choice. Please select a valid option.")

def wireguard_edit_server():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print("\033[92m(   ) \033[93mWireguard Edit local\033[97mMenu\033[0m")
    print(
        '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
    )
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[92mWireguard UDP\033[0m")
    print("2. \033[93mSit + Wireguard\033[0m")
    print("3. \033[92mGre6tap [Native] + Wireguard\033[0m")
    print("4. \033[93mWireguard + Gre6tap\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    print("0.\033[97mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")
    while True:
        server_type = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if server_type == "1":
            wireguardeditserver_mnu()
            break
        elif server_type == "2":
            wireguardsiteditserver_mnu()
            break
        elif server_type == "3":
            gre6tapwireguardeditserver_mnu()
            break
        elif server_type == "4":
            wireguardgre6tapeditserver_mnu()
            break
        elif server_type == "0":
            os.system("clear")
            multi_edit_local()
            break
        else:
            print("Invalid choice.")


def wireguardeditserver_mnu():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print("\033[92m(   ) \033[93mWireguard \033[93m Edit Menu\033[0m")
    print(
        '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
    )
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[92mNo IPSEC\033[0m")
    print("2. \033[93mWith IPSEC\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    print("0.\033[97mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")
    while True:
        server_type = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if server_type == "1":
            wireguardeditserver_nosec_mnu()
            break
        elif server_type == "2":
            wireguardeditserver_sec_mnu()
            break
        elif server_type == "0":
            os.system("clear")
            wireguard_edit_server()
            break
        else:
            print("Invalid choice.")


def wireguardeditserver_nosec_mnu():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print("\033[92m(   ) \033[93mWireguard \033[93m Edit Menu\033[0m")
    print(
        '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
    )
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[92mWireguard - [1]Kharej Server [5]IRAN Clients\033[0m")
    print("2. \033[93mWireguard - [1]IRAN   Server [5]Kharej Clients\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    print("0.\033[97mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")
    while True:
        server_type = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if server_type == "1":
            wireguardedit_noconjuction_kharej1_5iran()
            break
        elif server_type == "2":
            wireguardedit_noconjuction_1iran_5kharej()
            break
        elif server_type == "0":
            os.system("clear")
            wireguardeditserver_mnu()
            break
        else:
            print("Invalid choice.")


def wireguardedit_noconjuction_kharej1_5iran():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print(
        "\033[92m(   ) \033[93mWireguard \033[92m[1]Kharej Server\033[96m [5]IRAN Client\033[93m Edit Menu\033[0m"
    )
    print(
        '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
    )
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[92mIRAN Client [1] Config\033[0m")
    print("2. \033[92mIRAN Client [2] Config\033[0m")
    print("3. \033[92mIRAN Client [3] Config\033[0m")
    print("4. \033[93mIRAN Client [4] Config\033[0m")
    print("5. \033[92mIRAN Client [5] Config\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    print("6. \033[96mKharej Server Config\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    print("0.\033[97mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")
    while True:
        server_type = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if server_type == "1":
            wireguardudp_iran_client1()
            break
        elif server_type == "2":
            wireguardudp_iran_client2()
            break
        elif server_type == "3":
            wireguardudp_iran_client3()
            break
        elif server_type == "4":
            wireguardudp_iran_client4()
            break
        elif server_type == "5":
            wireguardudp_iran_client5()
            break
        elif server_type == "6":
            wireguardudpedit_kharej_server()
            break
        elif server_type == "0":
            os.system("clear")
            wireguardeditserver_mnu()
            break
        else:
            print("Invalid choice.")


def wireguardudpedit_kharej_server():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print(
        "\033[92m(   ) \033[93mWireguard \033[92m[1]Kharej Server\033[96m [5]IRAN Client\033[93m Edit Menu\033[0m"
    )
    print(
        '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
    )
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[92mKharej Server Config [1] \033[0m")
    print("2. \033[92mKharej Server Config [2]\033[0m")
    print("3. \033[93mKharej Server Config [3]\033[0m")
    print("4. \033[92mKharej Server Config [4]\033[0m")
    print("5. \033[92mKharej Server Config [5]\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    print("0.\033[97mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")
    while True:
        server_type = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if server_type == "1":
            wireguardedit_kharejconfig_1()
            break
        elif server_type == "2":
            wireguardedit_kharejconfig_2()
            break
        elif server_type == "3":
            wireguardedit_kharejconfig_3()
            break
        elif server_type == "4":
            wireguardedit_kharejconfig_4()
            break
        elif server_type == "5":
            wireguardedit_kharejconfig_5()
            break
        elif server_type == "0":
            os.system("clear")
            wireguardedit_noconjuction_kharej1_5iran()
            break
        else:
            print("Invalid choice.")


def wtb_opposite_ip_wireguard(ip):
    if ":" in ip:
        ip_parts = ip.split(":")
        if ip_parts[-1] == "1":
            ip_parts[-1] = "2"
        elif ip_parts[-1] == "2":
            ip_parts[-1] = "1"
        else:
            ip_parts[-1] = "2"
        return ":".join(ip_parts)
    else:
        ip_parts = ip.split(".")
        ip_parts[-1] = "1" if ip_parts[-1] == "2" else "2"
        return ".".join(ip_parts)


def load_wireguardconfig(file_path):
    try:
        with open(file_path, "r") as file:
            content = file.read()

        address_match = re.search(r"Address = ([^\s]+)", content)
        listen_port_match = re.search(r"ListenPort = (\d+)", content)
        endpoint_match = re.search(r"Endpoint = ([^\s]+):\d+", content)
        allowed_ips_match = re.search(r"AllowedIPs = ([^\s]+)", content)

        address = address_match.group(1) if address_match else "N/A"
        listen_port = listen_port_match.group(1) if listen_port_match else "N/A"
        endpoint = endpoint_match.group(1) if endpoint_match else "N/A"
        allowed_ips = allowed_ips_match.group(1) if allowed_ips_match else "N/A"

        return address, address.split("/")[0], listen_port, endpoint, allowed_ips
    except FileNotFoundError:
        print("\033[91mWireGuard configuration file not found.\033[0m")
        return None, None, None, None, None
    except Exception as e:
        print(f"\033[91mAn error occurred: {e}\033[0m")
        return None, None, None, None, None


def display_checkmark(message):
    print("\u2714 " + message)


def save_wireguardconfig1(file_path, new_config):
    try:
        with open(file_path, "r") as f:
            config = f.read()

        listen_port_pattern = r"ListenPort\s*=\s*\d+"
        endpoint_pattern = r"Endpoint\s*=\s*([^\s]+:\d+)?"
        address_pattern = r"Address\s*=\s*[^\s]+"
        allowed_ips_pattern = r"AllowedIPs\s*=\s*[^\s]+"

        new_config_content = re.sub(
            listen_port_pattern, f'ListenPort = {new_config["ListenPort"]}', config
        )
        new_config_content = re.sub(
            address_pattern, f'Address = {new_config["Address"]}', new_config_content
        )
        new_config_content = re.sub(
            allowed_ips_pattern,
            f'AllowedIPs = {new_config["AllowedIPs"]}',
            new_config_content,
        )
        existing_endpoint_match = re.search(endpoint_pattern, config)
        if existing_endpoint_match:
            existing_endpoint = existing_endpoint_match.group(1)
            if ":" not in new_config["Endpoint"]:
                new_config["Endpoint"] += f":{existing_endpoint.split(':')[1]}"

        new_config_content = re.sub(
            endpoint_pattern, f'Endpoint = {new_config["Endpoint"]}', new_config_content
        )

        with open(file_path, "w") as f:
            f.write(new_config_content)

        subprocess.run(["systemctl", "daemon-reload"], check=True)
        service_name = "wireguardping_1.service"
        service_status = subprocess.run(
            ["systemctl", "is-active", service_name],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
        )

        if service_status.returncode != 0:
            print(f"\033[91mService {service_name} doesn't exist or is inactive\033[0m")

        subprocess.run(
            ["wg-quick", "down", "/etc/wireguard/wireserver1.conf"], check=True
        )
        subprocess.run(
            ["wg-quick", "up", "/etc/wireguard/wireserver1.conf"], check=True
        )

        display_checkmark(f"\033[92mConfiguration updated successfully!\033[0m")

    except FileNotFoundError:
        print(f"\033[91mfile {file_path} not found.\033[0m")
    except subprocess.CalledProcessError as e:
        print(f"\033[91merror in restarting services: {e}\033[0m")
    except Exception as e:
        print(f"\033[91merror in saving the config: {e}\033[0m")


def save_wireguardconfig2(file_path, new_config):
    try:
        with open(file_path, "r") as f:
            config = f.read()

        listen_port_pattern = r"ListenPort\s*=\s*\d+"
        endpoint_pattern = r"Endpoint\s*=\s*([^\s]+:\d+)?"
        address_pattern = r"Address\s*=\s*[^\s]+"
        allowed_ips_pattern = r"AllowedIPs\s*=\s*[^\s]+"

        new_config_content = re.sub(
            listen_port_pattern, f'ListenPort = {new_config["ListenPort"]}', config
        )
        new_config_content = re.sub(
            address_pattern, f'Address = {new_config["Address"]}', new_config_content
        )
        new_config_content = re.sub(
            allowed_ips_pattern,
            f'AllowedIPs = {new_config["AllowedIPs"]}',
            new_config_content,
        )
        existing_endpoint_match = re.search(endpoint_pattern, config)
        if existing_endpoint_match:
            existing_endpoint = existing_endpoint_match.group(1)
            if ":" not in new_config["Endpoint"]:
                new_config["Endpoint"] += f":{existing_endpoint.split(':')[1]}"

        new_config_content = re.sub(
            endpoint_pattern, f'Endpoint = {new_config["Endpoint"]}', new_config_content
        )

        with open(file_path, "w") as f:
            f.write(new_config_content)

        subprocess.run(["systemctl", "daemon-reload"], check=True)
        service_name = "wireguardping_2.service"
        service_status = subprocess.run(
            ["systemctl", "is-active", service_name],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
        )

        if service_status.returncode != 0:
            print(f"\033[91mService {service_name} doesn't exist or is inactive\033[0m")

        subprocess.run(
            ["wg-quick", "down", "/etc/wireguard/wireserver2.conf"], check=True
        )
        subprocess.run(
            ["wg-quick", "up", "/etc/wireguard/wireserver2.conf"], check=True
        )

        display_checkmark(f"\033[92mConfiguration updated successfully!\033[0m")

    except FileNotFoundError:
        print(f"\033[91mfile {file_path} not found.\033[0m")
    except subprocess.CalledProcessError as e:
        print(f"\033[91merror in restarting services: {e}\033[0m")
    except Exception as e:
        print(f"\033[91merror in saving the config: {e}\033[0m")


def save_wireguardconfig3(file_path, new_config):
    try:
        with open(file_path, "r") as f:
            config = f.read()

        listen_port_pattern = r"ListenPort\s*=\s*\d+"
        endpoint_pattern = r"Endpoint\s*=\s*([^\s]+:\d+)?"
        address_pattern = r"Address\s*=\s*[^\s]+"
        allowed_ips_pattern = r"AllowedIPs\s*=\s*[^\s]+"

        new_config_content = re.sub(
            listen_port_pattern, f'ListenPort = {new_config["ListenPort"]}', config
        )
        new_config_content = re.sub(
            address_pattern, f'Address = {new_config["Address"]}', new_config_content
        )
        new_config_content = re.sub(
            allowed_ips_pattern,
            f'AllowedIPs = {new_config["AllowedIPs"]}',
            new_config_content,
        )
        existing_endpoint_match = re.search(endpoint_pattern, config)
        if existing_endpoint_match:
            existing_endpoint = existing_endpoint_match.group(1)
            if ":" not in new_config["Endpoint"]:
                new_config["Endpoint"] += f":{existing_endpoint.split(':')[1]}"

        new_config_content = re.sub(
            endpoint_pattern, f'Endpoint = {new_config["Endpoint"]}', new_config_content
        )

        with open(file_path, "w") as f:
            f.write(new_config_content)

        subprocess.run(["systemctl", "daemon-reload"], check=True)
        service_name = "wireguardping_3.service"
        service_status = subprocess.run(
            ["systemctl", "is-active", service_name],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
        )

        if service_status.returncode != 0:
            print(f"\033[91mService {service_name} doesn't exist or is inactive\033[0m")

        subprocess.run(
            ["wg-quick", "down", "/etc/wireguard/wireserver3.conf"], check=True
        )
        subprocess.run(
            ["wg-quick", "up", "/etc/wireguard/wireserver3.conf"], check=True
        )

        display_checkmark(f"\033[92mConfiguration updated successfully!\033[0m")

    except FileNotFoundError:
        print(f"\033[91mfile {file_path} not found.\033[0m")
    except subprocess.CalledProcessError as e:
        print(f"\033[91merror in restarting services: {e}\033[0m")
    except Exception as e:
        print(f"\033[91merror in saving the config: {e}\033[0m")


def save_wireguardconfig4(file_path, new_config):
    try:
        with open(file_path, "r") as f:
            config = f.read()

        listen_port_pattern = r"ListenPort\s*=\s*\d+"
        endpoint_pattern = r"Endpoint\s*=\s*([^\s]+:\d+)?"
        address_pattern = r"Address\s*=\s*[^\s]+"
        allowed_ips_pattern = r"AllowedIPs\s*=\s*[^\s]+"

        new_config_content = re.sub(
            listen_port_pattern, f'ListenPort = {new_config["ListenPort"]}', config
        )
        new_config_content = re.sub(
            address_pattern, f'Address = {new_config["Address"]}', new_config_content
        )
        new_config_content = re.sub(
            allowed_ips_pattern,
            f'AllowedIPs = {new_config["AllowedIPs"]}',
            new_config_content,
        )
        existing_endpoint_match = re.search(endpoint_pattern, config)
        if existing_endpoint_match:
            existing_endpoint = existing_endpoint_match.group(1)
            if ":" not in new_config["Endpoint"]:
                new_config["Endpoint"] += f":{existing_endpoint.split(':')[1]}"

        new_config_content = re.sub(
            endpoint_pattern, f'Endpoint = {new_config["Endpoint"]}', new_config_content
        )

        with open(file_path, "w") as f:
            f.write(new_config_content)

        subprocess.run(["systemctl", "daemon-reload"], check=True)
        service_name = "wireguardping_4.service"
        service_status = subprocess.run(
            ["systemctl", "is-active", service_name],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
        )

        if service_status.returncode != 0:
            print(f"\033[91mService {service_name} doesn't exist or is inactive\033[0m")

        subprocess.run(
            ["wg-quick", "down", "/etc/wireguard/wireserver4.conf"], check=True
        )
        subprocess.run(
            ["wg-quick", "up", "/etc/wireguard/wireserver4.conf"], check=True
        )

        display_checkmark(f"\033[92mConfiguration updated successfully!\033[0m")

    except FileNotFoundError:
        print(f"\033[91mfile {file_path} not found.\033[0m")
    except subprocess.CalledProcessError as e:
        print(f"\033[91merror in restarting services: {e}\033[0m")
    except Exception as e:
        print(f"\033[91merror in saving the config: {e}\033[0m")


def save_wireguardconfig5(file_path, new_config):
    try:
        with open(file_path, "r") as f:
            config = f.read()

        listen_port_pattern = r"ListenPort\s*=\s*\d+"
        endpoint_pattern = r"Endpoint\s*=\s*([^\s]+:\d+)?"
        address_pattern = r"Address\s*=\s*[^\s]+"
        allowed_ips_pattern = r"AllowedIPs\s*=\s*[^\s]+"

        new_config_content = re.sub(
            listen_port_pattern, f'ListenPort = {new_config["ListenPort"]}', config
        )
        new_config_content = re.sub(
            address_pattern, f'Address = {new_config["Address"]}', new_config_content
        )
        new_config_content = re.sub(
            allowed_ips_pattern,
            f'AllowedIPs = {new_config["AllowedIPs"]}',
            new_config_content,
        )
        existing_endpoint_match = re.search(endpoint_pattern, config)
        if existing_endpoint_match:
            existing_endpoint = existing_endpoint_match.group(1)
            if ":" not in new_config["Endpoint"]:
                new_config["Endpoint"] += f":{existing_endpoint.split(':')[1]}"

        new_config_content = re.sub(
            endpoint_pattern, f'Endpoint = {new_config["Endpoint"]}', new_config_content
        )

        with open(file_path, "w") as f:
            f.write(new_config_content)

        subprocess.run(["systemctl", "daemon-reload"], check=True)
        service_name = "wireguardping_5.service"
        service_status = subprocess.run(
            ["systemctl", "is-active", service_name],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
        )

        if service_status.returncode != 0:
            print(f"\033[91mService {service_name} doesn't exist or is inactive\033[0m")

        subprocess.run(
            ["wg-quick", "down", "/etc/wireguard/wireserver5.conf"], check=True
        )
        subprocess.run(
            ["wg-quick", "up", "/etc/wireguard/wireserver5.conf"], check=True
        )

        display_checkmark(f"\033[92mConfiguration updated successfully!\033[0m")

    except FileNotFoundError:
        print(f"\033[91mfile {file_path} not found.\033[0m")
    except subprocess.CalledProcessError as e:
        print(f"\033[91merror in restarting services: {e}\033[0m")
    except Exception as e:
        print(f"\033[91merror in saving the config: {e}\033[0m")


def save_wireguardconfig_client(file_path, new_config):
    try:
        with open(file_path, "r") as f:
            config = f.read()

        listen_port_pattern = r"ListenPort\s*=\s*\d+"
        endpoint_pattern = r"Endpoint\s*=\s*([^\s]+:\d+)?"
        address_pattern = r"Address\s*=\s*[^\s]+"
        allowed_ips_pattern = r"AllowedIPs\s*=\s*[^\s]+"

        new_config_content = re.sub(
            listen_port_pattern, f'ListenPort = {new_config["ListenPort"]}', config
        )
        new_config_content = re.sub(
            address_pattern, f'Address = {new_config["Address"]}', new_config_content
        )
        new_config_content = re.sub(
            allowed_ips_pattern,
            f'AllowedIPs = {new_config["AllowedIPs"]}',
            new_config_content,
        )
        existing_endpoint_match = re.search(endpoint_pattern, config)
        if existing_endpoint_match:
            existing_endpoint = existing_endpoint_match.group(1)
            if ":" not in new_config["Endpoint"]:
                new_config["Endpoint"] += f":{existing_endpoint.split(':')[1]}"

        new_config_content = re.sub(
            endpoint_pattern, f'Endpoint = {new_config["Endpoint"]}', new_config_content
        )

        with open(file_path, "w") as f:
            f.write(new_config_content)

        subprocess.run(["systemctl", "daemon-reload"], check=True)
        service_name = "wireguardping.service"
        service_status = subprocess.run(
            ["systemctl", "is-active", service_name],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
        )

        if service_status.returncode != 0:
            print(f"\033[91mService {service_name} doesn't exist or is inactive\033[0m")

        subprocess.run(
            ["wg-quick", "down", "/etc/wireguard/wireclient.conf"], check=True
        )
        subprocess.run(["wg-quick", "up", "/etc/wireguard/wireclient.conf"], check=True)

        display_checkmark(f"\033[92mConfiguration updated successfully!\033[0m")

    except FileNotFoundError:
        print(f"\033[91mfile {file_path} not found.\033[0m")
    except subprocess.CalledProcessError as e:
        print(f"\033[91merror in restarting services: {e}\033[0m")
    except Exception as e:
        print(f"\033[91merror in saving the config: {e}\033[0m")


def update_ufw_ruleswireguard(old_ip, new_ip, old_port=None, new_port=None):
    if old_port:
        delete_ufw_rules(old_ip, old_port)
        delete_ufw_rules(wtb_opposite_ip_wireguard(old_ip), old_port)
    add_ufw_ruleswireguard(new_ip, new_port)
    add_ufw_ruleswireguard(wtb_opposite_ip_wireguard(new_ip), new_port)


def delete_ufw_rules(ip, port):
    try:
        subprocess.run(
            ["sudo", "ufw", "delete", "allow", "from", ip, "to", "any", "port", port],
            check=False,
        )
    except subprocess.CalledProcessError as e:
        print(f"\033[91mError deleting UFW rule for {ip} on port {port}: {e}\033[0m")


def add_ufw_ruleswireguard(ip, port):
    try:
        subprocess.run(
            ["sudo", "ufw", "allow", "from", ip, "to", "any", "port", port], check=True
        )
    except subprocess.CalledProcessError as e:
        print(f"\033[91mError adding UFW rule for {ip} on port {port}: {e}\033[0m")


def display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips):
    lines = [
        f"\033[97m──────────────────────────────────────\033[0m",
        f"\033[93mTitle:         Wireguard Configuration\033[0m",
        f"\033[97m──────────────────────────────────────\033[0m",
        f"\033[92mAddress:           \033[97m{address_no_subnet}\033[0m",
        f"\033[92mListenPort:        \033[97m{listen_port}\033[0m",
        f"\033[92mEndpoint:          \033[97m{endpoint}\033[0m",
        f"\033[92mAllowedIPs:        \033[97m{allowed_ips}\033[0m",
    ]
    box_width = 50

    print("\033[93m╭" + "─" * (box_width - 2) + "╮\033[0m")

    for line in lines:
        print(f"\033[93m {line:<{box_width - 4}} \033[0m")

    print("\033[93m╰" + "─" * (box_width - 2) + "╯\033[0m")


def update_ping_script_opposite_ip_wirenosec_client(new_opposite_ip):
    script_path = "/etc/ping_wireguard.sh"
    try:
        with open(script_path, "r") as f:
            script_content = f.read()

        updated_script_content = re.sub(
            r'ip_address="[^"]+"', f'ip_address="{new_opposite_ip}"', script_content
        )

        with open(script_path, "w") as f:
            f.write(updated_script_content)

        display_checkmark(
            "\033[92mPing script updated with new opposite IP address!\033[0m"
        )
    except FileNotFoundError:
        print(f"\033[91mPing script {script_path} not found.\033[0m")
    except Exception as e:
        print(f"\033[91mError updating ping script: {e}\033[0m")


def update_ping_script_opposite_ip_wirenosec1(new_opposite_ip):
    script_path = "/etc/ping_wireguard_1.sh"
    try:
        with open(script_path, "r") as f:
            script_content = f.read()

        updated_script_content = re.sub(
            r'ip_address="[^"]+"', f'ip_address="{new_opposite_ip}"', script_content
        )

        with open(script_path, "w") as f:
            f.write(updated_script_content)

        display_checkmark(
            "\033[92mPing script updated with new opposite IP address!\033[0m"
        )
    except FileNotFoundError:
        print(f"\033[91mPing script {script_path} not found.\033[0m")
    except Exception as e:
        print(f"\033[91mError updating ping script: {e}\033[0m")


def update_ping_script_opposite_ip_wirenosec2(new_opposite_ip):
    script_path = "/etc/ping_wireguard_2.sh"
    try:
        with open(script_path, "r") as f:
            script_content = f.read()

        updated_script_content = re.sub(
            r'ip_address="[^"]+"', f'ip_address="{new_opposite_ip}"', script_content
        )

        with open(script_path, "w") as f:
            f.write(updated_script_content)

        display_checkmark(
            "\033[92mPing script updated with new opposite IP address!\033[0m"
        )
    except FileNotFoundError:
        print(f"\033[91mPing script {script_path} not found.\033[0m")
    except Exception as e:
        print(f"\033[91mError updating ping script: {e}\033[0m")


def update_ping_script_opposite_ip_wirenosec3(new_opposite_ip):
    script_path = "/etc/ping_wireguard_3.sh"
    try:
        with open(script_path, "r") as f:
            script_content = f.read()

        updated_script_content = re.sub(
            r'ip_address="[^"]+"', f'ip_address="{new_opposite_ip}"', script_content
        )

        with open(script_path, "w") as f:
            f.write(updated_script_content)

        display_checkmark(
            "\033[92mPing script updated with new opposite IP address!\033[0m"
        )
    except FileNotFoundError:
        print(f"\033[91mPing script {script_path} not found.\033[0m")
    except Exception as e:
        print(f"\033[91mError updating ping script: {e}\033[0m")


def update_ping_script_opposite_ip_wirenosec4(new_opposite_ip):
    script_path = "/etc/ping_wireguard_4.sh"
    try:
        with open(script_path, "r") as f:
            script_content = f.read()

        updated_script_content = re.sub(
            r'ip_address="[^"]+"', f'ip_address="{new_opposite_ip}"', script_content
        )

        with open(script_path, "w") as f:
            f.write(updated_script_content)

        display_checkmark(
            "\033[92mPing script updated with new opposite IP address!\033[0m"
        )
    except FileNotFoundError:
        print(f"\033[91mPing script {script_path} not found.\033[0m")
    except Exception as e:
        print(f"\033[91mError updating ping script: {e}\033[0m")


def update_ping_script_opposite_ip_wirenosec5(new_opposite_ip):
    script_path = "/etc/ping_wireguard_5.sh"
    try:
        with open(script_path, "r") as f:
            script_content = f.read()

        updated_script_content = re.sub(
            r'ip_address="[^"]+"', f'ip_address="{new_opposite_ip}"', script_content
        )

        with open(script_path, "w") as f:
            f.write(updated_script_content)

        display_checkmark(
            "\033[92mPing script updated with new opposite IP address!\033[0m"
        )
    except FileNotFoundError:
        print(f"\033[91mPing script {script_path} not found.\033[0m")
    except Exception as e:
        print(f"\033[91mError updating ping script: {e}\033[0m")


def listen_port(config_path):
    """Extracts the ListenPort from the WireGuard configuration file."""
    try:
        with open(config_path, "r") as file:
            content = file.read()
            match = re.search(r"^ListenPort\s*=\s*(\d+)", content, re.MULTILINE)
            if match:
                return match.group(1)
            else:
                print("\033[91mPort not found in the config file.\033[0m")
                return "51820"
    except FileNotFoundError:
        print(f"\033[91mError: Configuration file '{config_path}' not found.\033[0m")
        return "51820"


def update_endpoint_ip1(endpoint, config_path="/etc/wireguard/wireserver1.conf"):
    default_port = listen_port(config_path)

    if ":" in endpoint:
        current_ip, current_port = endpoint.split(":")
    else:
        current_ip = endpoint
        current_port = default_port

    new_endpoint_ip = input(
        f"\033[93mEnter\033[92m New Endpoint IP \033[97m(IRAN Client [1]) \033[93m({current_ip}): \033[0m"
    )

    if new_endpoint_ip:
        new_endpoint = f"{new_endpoint_ip}:{current_port}"
        return new_endpoint
    else:
        print("\033[91mNo IP entered, keeping the existing Endpoint unchanged\033[0m")
        return endpoint


def update_endpoint_ip2(endpoint, config_path="/etc/wireguard/wireserver2.conf"):
    default_port = listen_port(config_path)

    if ":" in endpoint:
        current_ip, current_port = endpoint.split(":")
    else:
        current_ip = endpoint
        current_port = default_port

    new_endpoint_ip = input(
        f"\033[93mEnter\033[92m New Endpoint IP \033[97m(IRAN Client [2]) \033[93m({current_ip}): \033[0m"
    )

    if new_endpoint_ip:
        new_endpoint = f"{new_endpoint_ip}:{current_port}"
        return new_endpoint
    else:
        print("\033[91mNo IP entered, keeping the existing Endpoint unchanged\033[0m")
        return endpoint


def update_endpoint_ip3(endpoint, config_path="/etc/wireguard/wireserver3.conf"):
    default_port = listen_port(config_path)

    if ":" in endpoint:
        current_ip, current_port = endpoint.split(":")
    else:
        current_ip = endpoint
        current_port = default_port

    new_endpoint_ip = input(
        f"\033[93mEnter\033[92m New Endpoint IP \033[97m(IRAN Client [3]) \033[93m({current_ip}): \033[0m"
    )

    if new_endpoint_ip:
        new_endpoint = f"{new_endpoint_ip}:{current_port}"
        return new_endpoint
    else:
        print("\033[91mNo IP entered, keeping the existing Endpoint unchanged\033[0m")
        return endpoint


def update_endpoint_ip4(endpoint, config_path="/etc/wireguard/wireserver4.conf"):
    default_port = listen_port(config_path)

    if ":" in endpoint:
        current_ip, current_port = endpoint.split(":")
    else:
        current_ip = endpoint
        current_port = default_port

    new_endpoint_ip = input(
        f"\033[93mEnter\033[92m New Endpoint IP \033[97m(IRAN Client [4]) \033[93m({current_ip}): \033[0m"
    )

    if new_endpoint_ip:
        new_endpoint = f"{new_endpoint_ip}:{current_port}"
        return new_endpoint
    else:
        print("\033[91mNo IP entered, keeping the existing Endpoint unchanged\033[0m")
        return endpoint


def update_endpoint_ip5(endpoint, config_path="/etc/wireguard/wireserver5.conf"):
    default_port = listen_port(config_path)

    if ":" in endpoint:
        current_ip, current_port = endpoint.split(":")
    else:
        current_ip = endpoint
        current_port = default_port

    new_endpoint_ip = input(
        f"\033[93mEnter\033[92m New Endpoint IP \033[97m(IRAN Client [5]) \033[93m({current_ip}): \033[0m"
    )

    if new_endpoint_ip:
        new_endpoint = f"{new_endpoint_ip}:{current_port}"
        return new_endpoint
    else:
        print("\033[91mNo IP entered, keeping the existing Endpoint unchanged\033[0m")
        return endpoint


def update_endpoint_ip_server(endpoint, config_path="/etc/wireguard/wireclient.conf"):
    default_port = listen_port(config_path)

    if ":" in endpoint:
        current_ip, current_port = endpoint.split(":")
    else:
        current_ip = endpoint
        current_port = default_port

    new_endpoint_ip = input(
        f"\033[93mEnter\033[92m New Endpoint IP \033[97m(Kharej Server) \033[93m({current_ip}): \033[0m"
    )

    if new_endpoint_ip:
        new_endpoint = f"{new_endpoint_ip}:{current_port}"
        return new_endpoint
    else:
        print("\033[91mNo IP entered, keeping the existing Endpoint unchanged\033[0m")
        return endpoint


def update_tunnel_port(listen_port, endpoint):
    new_port = input(
        f"\033[93mEnter \033[92mNew Tunnel Port \033[93m({listen_port}): \033[0m"
    )

    if new_port.isdigit():
        if ":" in endpoint:
            endpoint_ip, _ = endpoint.split(":")
        else:
            endpoint_ip = endpoint
        new_endpoint = f"{endpoint_ip}:{new_port}"
        return new_port, new_endpoint
    else:
        print("\033[91mInvalid Port!\033[0m")
        return listen_port, endpoint


def update_endpoint_ir_ip1(endpoint, config_path="/etc/wireguard/wireserver1.conf"):
    default_port = listen_port(config_path)

    if ":" in endpoint:
        current_ip, current_port = endpoint.split(":")
    else:
        current_ip = endpoint
        current_port = default_port

    new_endpoint_ip = input(
        f"\033[93mEnter\033[92m New Endpoint IP \033[97m(Kharej Client [1]) \033[93m({current_ip}): \033[0m"
    )

    if new_endpoint_ip:
        new_endpoint = f"{new_endpoint_ip}:{current_port}"
        return new_endpoint
    else:
        print("\033[91mNo IP entered, keeping the existing Endpoint unchanged\033[0m")
        return endpoint


def update_endpoint_ir_ip2(endpoint, config_path="/etc/wireguard/wireserver2.conf"):
    default_port = listen_port(config_path)

    if ":" in endpoint:
        current_ip, current_port = endpoint.split(":")
    else:
        current_ip = endpoint
        current_port = default_port

    new_endpoint_ip = input(
        f"\033[93mEnter\033[92m New Endpoint IP \033[97m(Kharej Client [2]) \033[93m({current_ip}): \033[0m"
    )

    if new_endpoint_ip:
        new_endpoint = f"{new_endpoint_ip}:{current_port}"
        return new_endpoint
    else:
        print("\033[91mNo IP entered, keeping the existing Endpoint unchanged\033[0m")
        return endpoint


def update_endpoint_ir_ip3(endpoint, config_path="/etc/wireguard/wireserver3.conf"):
    default_port = listen_port(config_path)

    if ":" in endpoint:
        current_ip, current_port = endpoint.split(":")
    else:
        current_ip = endpoint
        current_port = default_port

    new_endpoint_ip = input(
        f"\033[93mEnter\033[92m New Endpoint IP \033[97m(Kharej Client [3]) \033[93m({current_ip}): \033[0m"
    )

    if new_endpoint_ip:
        new_endpoint = f"{new_endpoint_ip}:{current_port}"
        return new_endpoint
    else:
        print("\033[91mNo IP entered, keeping the existing Endpoint unchanged\033[0m")
        return endpoint


def update_endpoint_ir_ip4(endpoint, config_path="/etc/wireguard/wireserver4.conf"):
    default_port = listen_port(config_path)

    if ":" in endpoint:
        current_ip, current_port = endpoint.split(":")
    else:
        current_ip = endpoint
        current_port = default_port

    new_endpoint_ip = input(
        f"\033[93mEnter\033[92m New Endpoint IP \033[97m(Kharej Client [4]) \033[93m({current_ip}): \033[0m"
    )

    if new_endpoint_ip:
        new_endpoint = f"{new_endpoint_ip}:{current_port}"
        return new_endpoint
    else:
        print("\033[91mNo IP entered, keeping the existing Endpoint unchanged\033[0m")
        return endpoint


def update_endpoint_ir_ip5(endpoint, config_path="/etc/wireguard/wireserver5.conf"):
    default_port = listen_port(config_path)

    if ":" in endpoint:
        current_ip, current_port = endpoint.split(":")
    else:
        current_ip = endpoint
        current_port = default_port

    new_endpoint_ip = input(
        f"\033[93mEnter\033[92m New Endpoint IP \033[97m(Kharej Client [5]) \033[93m({current_ip}): \033[0m"
    )

    if new_endpoint_ip:
        new_endpoint = f"{new_endpoint_ip}:{current_port}"
        return new_endpoint
    else:
        print("\033[91mNo IP entered, keeping the existing Endpoint unchanged\033[0m")
        return endpoint


def update_endpoint_ir_server(endpoint, config_path="/etc/wireguard/wireclient.conf"):
    default_port = listen_port(config_path)

    if ":" in endpoint:
        current_ip, current_port = endpoint.split(":")
    else:
        current_ip = endpoint
        current_port = default_port

    new_endpoint_ip = input(
        f"\033[93mEnter\033[92m New Endpoint IP \033[97m(IRAN Server) \033[93m({current_ip}): \033[0m"
    )

    if new_endpoint_ip:
        new_endpoint = f"{new_endpoint_ip}:{current_port}"
        return new_endpoint
    else:
        print("\033[91mNo IP entered, keeping the existing Endpoint unchanged\033[0m")
        return endpoint


def wireguardedit_kharejconfig_1():
    config_path = "/etc/wireguard/wireserver1.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig(config_path)
    )

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCould not retrieve the WireGuard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[93mWireguard Edit local\033[97m Kharej Server Config\033[92m [1]\033[93m Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("\033[93mThis is Kharej Server - \033[97mConfig [1]\033[0m")
        print("1.\033[92m Change \033[97mPrivate IP\033[92m Address\033[0m")
        print("2.\033[96m Change Tunnel Port\033[0m")
        print(
            "3.\033[93m Change \033[92mIRAN Client [1]\033[93m IP \033[96m(Endpoint IP)\033[0m"
        )
        print("4.\033[92m Save and Exit\033[0m")
        print("0. back to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice: ")

        if choice == "1":
            new_ip = input(
                "\033[93mEnter\033[92m New Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec1(opposite_ip)
            else:
                print("\033[91mInvalid IP Address!\033[0m")

        elif choice == "2":
            listen_port, endpoint = update_tunnel_port(listen_port, endpoint)
            update_ufw_ruleswireguard(
                address_no_subnet, address_no_subnet, listen_port, listen_port
            )

        elif choice == "3":
            endpoint = update_endpoint_ip1(endpoint)

        elif choice == "4":
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "Endpoint": endpoint,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig1(config_path, new_config)
            break

        elif choice == "0":
            wireguardedit_noconjuction_kharej1_5iran()
        else:
            print("\033[91mPlease select a valid option.\033[0m")


def wireguardedit_kharejconfig_2():
    config_path = "/etc/wireguard/wireserver2.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig(config_path)
    )

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCould not retrieve the WireGuard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[93mWireguard Edit local\033[97m Kharej Server Config\033[92m [2]\033[93m Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("\033[93mThis is Kharej Server - \033[97mConfig [2]\033[0m")
        print("1.\033[92m Change \033[97mPrivate IP\033[92m Address\033[0m")
        print("2.\033[96m Change Tunnel Port\033[0m")
        print(
            "3.\033[93m Change \033[92mIRAN Client [2]\033[93m IP \033[96m(Endpoint IP)\033[0m"
        )
        print("4.\033[92m Save and Exit\033[0m")
        print("0. back to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice: ")

        if choice == "1":
            new_ip = input(
                "\033[93mEnter\033[92m New Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec2(opposite_ip)
            else:
                print("\033[91mInvalid IP Address!\033[0m")

        elif choice == "2":
            listen_port, endpoint = update_tunnel_port(listen_port, endpoint)
            update_ufw_ruleswireguard(
                address_no_subnet, address_no_subnet, listen_port, listen_port
            )

        elif choice == "3":
            endpoint = update_endpoint_ip2(endpoint)

        elif choice == "4":
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "Endpoint": endpoint,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig2(config_path, new_config)
            break

        elif choice == "0":
            wireguardedit_noconjuction_kharej1_5iran()
        else:
            print("\033[91mPlease select a valid option.\033[0m")


def wireguardedit_kharejconfig_3():
    config_path = "/etc/wireguard/wireserver3.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig(config_path)
    )

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCould not retrieve the WireGuard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[93mWireguard Edit local\033[97m Kharej Server Config\033[92m [3]\033[93m Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("\033[93mThis is Kharej Server - \033[97mConfig [3]\033[0m")
        print("1.\033[92m Change \033[97mPrivate IP\033[92m Address\033[0m")
        print("2.\033[96m Change Tunnel Port\033[0m")
        print(
            "3.\033[93m Change \033[92mIRAN Client [3]\033[93m IP \033[96m(Endpoint IP)\033[0m"
        )
        print("4.\033[92m Save and Exit\033[0m")
        print("0. back to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice: ")

        if choice == "1":
            new_ip = input(
                "\033[93mEnter\033[92m New Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec3(opposite_ip)
            else:
                print("\033[91mInvalid IP Address!\033[0m")

        elif choice == "2":
            listen_port, endpoint = update_tunnel_port(listen_port, endpoint)
            update_ufw_ruleswireguard(
                address_no_subnet, address_no_subnet, listen_port, listen_port
            )

        elif choice == "3":
            endpoint = update_endpoint_ip3(endpoint)

        elif choice == "4":
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "Endpoint": endpoint,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig3(config_path, new_config)
            break

        elif choice == "0":
            wireguardedit_noconjuction_kharej1_5iran()
        else:
            print("\033[91mPlease select a valid option.\033[0m")


def wireguardedit_kharejconfig_4():
    config_path = "/etc/wireguard/wireserver4.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig(config_path)
    )

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCould not retrieve the WireGuard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[93mWireguard Edit local\033[97m Kharej Server Config\033[92m [4]\033[93m Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("\033[93mThis is Kharej Server - \033[97mConfig [4]\033[0m")
        print("1.\033[92m Change \033[97mPrivate IP\033[92m Address\033[0m")
        print("2.\033[96m Change Tunnel Port\033[0m")
        print(
            "3.\033[93m Change \033[92mIRAN Client [4]\033[93m IP \033[96m(Endpoint IP)\033[0m"
        )
        print("4.\033[92m Save and Exit\033[0m")
        print("0. back to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice: ")

        if choice == "1":
            new_ip = input(
                "\033[93mEnter\033[92m New Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec4(opposite_ip)
            else:
                print("\033[91mInvalid IP Address!\033[0m")

        elif choice == "2":
            listen_port, endpoint = update_tunnel_port(listen_port, endpoint)
            update_ufw_ruleswireguard(
                address_no_subnet, address_no_subnet, listen_port, listen_port
            )

        elif choice == "3":
            endpoint = update_endpoint_ip4(endpoint)

        elif choice == "4":
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "Endpoint": endpoint,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig4(config_path, new_config)
            break

        elif choice == "0":
            wireguardedit_noconjuction_kharej1_5iran()
        else:
            print("\033[91mPlease select a valid option.\033[0m")


def wireguardedit_kharejconfig_5():
    config_path = "/etc/wireguard/wireserver5.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig(config_path)
    )

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCould not retrieve the WireGuard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[93mWireguard Edit local\033[97m Kharej Server Config\033[92m [5]\033[93m Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("\033[93mThis is Kharej Server - \033[97mConfig [5]\033[0m")
        print("1.\033[92m Change \033[97mPrivate IP\033[92m Address\033[0m")
        print("2.\033[96m Change Tunnel Port\033[0m")
        print(
            "3.\033[93m Change \033[92mIRAN Client [5]\033[93m IP \033[96m(Endpoint IP)\033[0m"
        )
        print("4.\033[92m Save and Exit\033[0m")
        print("0. back to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice: ")

        if choice == "1":
            new_ip = input(
                "\033[93mEnter\033[92m New Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec5(opposite_ip)
            else:
                print("\033[91mInvalid IP Address!\033[0m")

        elif choice == "2":
            listen_port, endpoint = update_tunnel_port(listen_port, endpoint)
            update_ufw_ruleswireguard(
                address_no_subnet, address_no_subnet, listen_port, listen_port
            )

        elif choice == "3":
            endpoint = update_endpoint_ip5(endpoint)

        elif choice == "4":
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "Endpoint": endpoint,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig5(config_path, new_config)
            break

        elif choice == "0":
            wireguardedit_noconjuction_kharej1_5iran()
        else:
            print("\033[91mPlease select a valid option.\033[0m")


def wireguardudp_iran_client1():
    config_path = "/etc/wireguard/wireclient.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig(config_path)
    )

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCould not retrieve the WireGuard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[93mWireguard Edit local\033[97m IRAN Client\033[92m [1]\033[93m Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("\033[93mThis is IRAN Client - \033[97m[1]\033[0m")
        print("1.\033[92m Change \033[97mPrivate IP\033[92m Address\033[0m")
        print("2.\033[96m Change Tunnel Port\033[0m")
        print(
            "3.\033[93m Change \033[92mKharej Server\033[93m IP \033[96m(Endpoint IP)\033[0m"
        )
        print("4.\033[92m Save and Exit\033[0m")
        print("0. back to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice: ")

        if choice == "1":
            new_ip = input(
                "\033[93mEnter\033[92m New Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec_client(opposite_ip)
            else:
                print("\033[91mInvalid IP Address!\033[0m")

        elif choice == "2":
            listen_port, endpoint = update_tunnel_port(listen_port, endpoint)
            update_ufw_ruleswireguard(
                address_no_subnet, address_no_subnet, listen_port, listen_port
            )

        elif choice == "3":
            endpoint = update_endpoint_ip_server(endpoint)

        elif choice == "4":
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "Endpoint": endpoint,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_client(config_path, new_config)
            break

        elif choice == "0":
            wireguardedit_noconjuction_kharej1_5iran()
        else:
            print("\033[91mPlease select a valid option.\033[0m")


def wireguardudp_iran_client2():
    config_path = "/etc/wireguard/wireclient.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig(config_path)
    )

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCould not retrieve the WireGuard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[93mWireguard Edit local\033[97m IRAN Client\033[92m [2]\033[93m Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("\033[93mThis is IRAN Client - \033[97m[2]\033[0m")
        print("1.\033[92m Change \033[97mPrivate IP\033[92m Address\033[0m")
        print("2.\033[96m Change Tunnel Port\033[0m")
        print(
            "3.\033[93m Change \033[92mKharej Server\033[93m IP \033[96m(Endpoint IP)\033[0m"
        )
        print("4.\033[92m Save and Exit\033[0m")
        print("0. back to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice: ")

        if choice == "1":
            new_ip = input(
                "\033[93mEnter\033[92m New Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec_client(opposite_ip)
            else:
                print("\033[91mInvalid IP Address!\033[0m")

        elif choice == "2":
            listen_port, endpoint = update_tunnel_port(listen_port, endpoint)
            update_ufw_ruleswireguard(
                address_no_subnet, address_no_subnet, listen_port, listen_port
            )

        elif choice == "3":
            endpoint = update_endpoint_ip_server(endpoint)

        elif choice == "4":
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "Endpoint": endpoint,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_client(config_path, new_config)
            break

        elif choice == "0":
            wireguardedit_noconjuction_kharej1_5iran()
        else:
            print("\033[91mPlease select a valid option.\033[0m")


def wireguardudp_iran_client3():
    config_path = "/etc/wireguard/wireclient.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig(config_path)
    )

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCould not retrieve the WireGuard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[93mWireguard Edit local\033[97m IRAN Client\033[92m [3]\033[93m Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("\033[93mThis is IRAN Client - \033[97m[3]\033[0m")
        print("1.\033[92m Change \033[97mPrivate IP\033[92m Address\033[0m")
        print("2.\033[96m Change Tunnel Port\033[0m")
        print(
            "3.\033[93m Change \033[92mKharej Server\033[93m IP \033[96m(Endpoint IP)\033[0m"
        )
        print("4.\033[92m Save and Exit\033[0m")
        print("0. back to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice: ")

        if choice == "1":
            new_ip = input(
                "\033[93mEnter\033[92m New Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec_client(opposite_ip)
            else:
                print("\033[91mInvalid IP Address!\033[0m")

        elif choice == "2":
            listen_port, endpoint = update_tunnel_port(listen_port, endpoint)
            update_ufw_ruleswireguard(
                address_no_subnet, address_no_subnet, listen_port, listen_port
            )

        elif choice == "3":
            endpoint = update_endpoint_ip_server(endpoint)

        elif choice == "4":
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "Endpoint": endpoint,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_client(config_path, new_config)
            break

        elif choice == "0":
            wireguardedit_noconjuction_kharej1_5iran()
        else:
            print("\033[91mPlease select a valid option.\033[0m")


def wireguardudp_iran_client4():
    config_path = "/etc/wireguard/wireclient.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig(config_path)
    )

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCould not retrieve the WireGuard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[93mWireguard Edit local\033[97m IRAN Client\033[92m [4]\033[93m Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("\033[93mThis is IRAN Client - \033[97m[4]\033[0m")
        print("1.\033[92m Change \033[97mPrivate IP\033[92m Address\033[0m")
        print("2.\033[96m Change Tunnel Port\033[0m")
        print(
            "3.\033[93m Change \033[92mKharej Server\033[93m IP \033[96m(Endpoint IP)\033[0m"
        )
        print("4.\033[92m Save and Exit\033[0m")
        print("0. back to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice: ")

        if choice == "1":
            new_ip = input(
                "\033[93mEnter\033[92m New Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec_client(opposite_ip)
            else:
                print("\033[91mInvalid IP Address!\033[0m")

        elif choice == "2":
            listen_port, endpoint = update_tunnel_port(listen_port, endpoint)
            update_ufw_ruleswireguard(
                address_no_subnet, address_no_subnet, listen_port, listen_port
            )

        elif choice == "3":
            endpoint = update_endpoint_ip_server(endpoint)

        elif choice == "4":
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "Endpoint": endpoint,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_client(config_path, new_config)
            break

        elif choice == "0":
            wireguardedit_noconjuction_kharej1_5iran()
        else:
            print("\033[91mPlease select a valid option.\033[0m")


def wireguardudp_iran_client5():
    config_path = "/etc/wireguard/wireclient.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig(config_path)
    )

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCould not retrieve the WireGuard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[93mWireguard Edit local\033[97m IRAN Client\033[92m [5]\033[93m Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("\033[93mThis is IRAN Client - \033[97m[5]\033[0m")
        print("1.\033[92m Change \033[97mPrivate IP\033[92m Address\033[0m")
        print("2.\033[96m Change Tunnel Port\033[0m")
        print(
            "3.\033[93m Change \033[92mKharej Server\033[93m IP \033[96m(Endpoint IP)\033[0m"
        )
        print("4.\033[92m Save and Exit\033[0m")
        print("0. back to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice: ")

        if choice == "1":
            new_ip = input(
                "\033[93mEnter\033[92m New Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec_client(opposite_ip)
            else:
                print("\033[91mInvalid IP Address!\033[0m")

        elif choice == "2":
            listen_port, endpoint = update_tunnel_port(listen_port, endpoint)
            update_ufw_ruleswireguard(
                address_no_subnet, address_no_subnet, listen_port, listen_port
            )

        elif choice == "3":
            endpoint = update_endpoint_ip_server(endpoint)

        elif choice == "4":
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "Endpoint": endpoint,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_client(config_path, new_config)
            break

        elif choice == "0":
            wireguardedit_noconjuction_kharej1_5iran()
        else:
            print("\033[91mPlease select a valid option.\033[0m")


def wireguardedit_noconjuction_1iran_5kharej():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print(
        "\033[92m(   ) \033[93mWireguard \033[92m[1]IRAN Server\033[96m [5]Kharej Client\033[93m Edit Menu\033[0m"
    )
    print(
        '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
    )
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[92mKharej Client [1] Config\033[0m")
    print("2. \033[92mKharej Client [2] Config\033[0m")
    print("3. \033[92mKharej Client [3] Config\033[0m")
    print("4. \033[93mKharej Client [4] Config\033[0m")
    print("5. \033[92mKharej Client [5] Config\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    print("6. \033[96mIRAN Server Config\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    print("0.\033[97mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")
    while True:
        server_type = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if server_type == "1":
            wireguardudp_kharej_client1()
            break
        elif server_type == "2":
            wireguardudp_kharej_client2()
            break
        elif server_type == "3":
            wireguardudp_kharej_client3()
            break
        elif server_type == "4":
            wireguardudp_kharej_client4()
            break
        elif server_type == "5":
            wireguardudp_kharej_client5()
            break
        elif server_type == "6":
            wireguardudpedit_iran_server()
            break
        elif server_type == "0":
            os.system("clear")
            wireguardeditserver_mnu()
            break
        else:
            print("Invalid choice.")


def wireguardudpedit_iran_server():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print("\033[92m(   ) \033[93mWireguard \033[92mIRAN Server Menu\033[0m")
    print(
        '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
    )
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[92mIRAN Server Config [1] \033[0m")
    print("2. \033[92mIRAN Server Config [2]\033[0m")
    print("3. \033[93mIRAN Server Config [3]\033[0m")
    print("4. \033[92mIRAN Server Config [4]\033[0m")
    print("5. \033[92mIRAN Server Config [5]\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    print("0.\033[97mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")
    while True:
        server_type = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if server_type == "1":
            wireguardedit_iranconfig_1()
            break
        elif server_type == "2":
            wireguardedit_iranconfig_2()
            break
        elif server_type == "3":
            wireguardedit_iranconfig_3()
            break
        elif server_type == "4":
            wireguardedit_iranconfig_4()
            break
        elif server_type == "5":
            wireguardedit_iranconfig_5()
            break
        elif server_type == "0":
            os.system("clear")
            wireguardedit_noconjuction_1iran_5kharej()
            break
        else:
            print("Invalid choice.")


def wireguardedit_iranconfig_1():
    config_path = "/etc/wireguard/wireserver1.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig(config_path)
    )

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCould not retrieve the WireGuard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[93mWireguard Edit local\033[97m IRAN Server Config\033[92m [1]\033[93m Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("\033[93mThis is IRAN Server - \033[97mConfig [1]\033[0m")
        print("1.\033[92m Change \033[97mPrivate IP\033[92m Address\033[0m")
        print("2.\033[96m Change Tunnel Port\033[0m")
        print(
            "3.\033[93m Change \033[92mKharej Client [1]\033[93m IP \033[96m(Endpoint IP)\033[0m"
        )
        print("4.\033[92m Save and Exit\033[0m")
        print("0. back to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice: ")

        if choice == "1":
            new_ip = input(
                "\033[93mEnter\033[92m New Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec1(opposite_ip)
            else:
                print("\033[91mInvalid IP Address!\033[0m")

        elif choice == "2":
            listen_port, endpoint = update_tunnel_port(listen_port, endpoint)
            update_ufw_ruleswireguard(
                address_no_subnet, address_no_subnet, listen_port, listen_port
            )

        elif choice == "3":
            endpoint = update_endpoint_ir_ip1(endpoint)

        elif choice == "4":
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "Endpoint": endpoint,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig1(config_path, new_config)
            break

        elif choice == "0":
            wireguardedit_noconjuction_1iran_5kharej()
        else:
            print("\033[91mPlease select a valid option.\033[0m")


def wireguardedit_iranconfig_2():
    config_path = "/etc/wireguard/wireserver2.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig(config_path)
    )

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCould not retrieve the WireGuard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[93mWireguard Edit local\033[97m IRAN Server Config\033[92m [2]\033[93m Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("\033[93mThis is IRAN Server - \033[97mConfig [2]\033[0m")
        print("1.\033[92m Change \033[97mPrivate IP\033[92m Address\033[0m")
        print("2.\033[96m Change Tunnel Port\033[0m")
        print(
            "3.\033[93m Change \033[92mKharej Client [2]\033[93m IP \033[96m(Endpoint IP)\033[0m"
        )
        print("4.\033[92m Save and Exit\033[0m")
        print("0. back to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice: ")

        if choice == "1":
            new_ip = input(
                "\033[93mEnter\033[92m New Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec2(opposite_ip)
            else:
                print("\033[91mInvalid IP Address!\033[0m")

        elif choice == "2":
            listen_port, endpoint = update_tunnel_port(listen_port, endpoint)
            update_ufw_ruleswireguard(
                address_no_subnet, address_no_subnet, listen_port, listen_port
            )

        elif choice == "3":
            endpoint = update_endpoint_ir_ip2(endpoint)

        elif choice == "4":
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "Endpoint": endpoint,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig2(config_path, new_config)
            break

        elif choice == "0":
            wireguardedit_noconjuction_1iran_5kharej()
        else:
            print("\033[91mPlease select a valid option.\033[0m")


def wireguardedit_iranconfig_3():
    config_path = "/etc/wireguard/wireserver3.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig(config_path)
    )

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCould not retrieve the WireGuard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[93mWireguard Edit local\033[97m IRAN Server Config\033[92m [3]\033[93m Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("\033[93mThis is IRAN Server - \033[97mConfig [3]\033[0m")
        print("1.\033[92m Change \033[97mPrivate IP\033[92m Address\033[0m")
        print("2.\033[96m Change Tunnel Port\033[0m")
        print(
            "3.\033[93m Change \033[92mKharej Client [3]\033[93m IP \033[96m(Endpoint IP)\033[0m"
        )
        print("4.\033[92m Save and Exit\033[0m")
        print("0. back to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice: ")

        if choice == "1":
            new_ip = input(
                "\033[93mEnter\033[92m New Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec3(opposite_ip)
            else:
                print("\033[91mInvalid IP Address!\033[0m")

        elif choice == "2":
            listen_port, endpoint = update_tunnel_port(listen_port, endpoint)
            update_ufw_ruleswireguard(
                address_no_subnet, address_no_subnet, listen_port, listen_port
            )

        elif choice == "3":
            endpoint = update_endpoint_ir_ip3(endpoint)

        elif choice == "4":
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "Endpoint": endpoint,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig3(config_path, new_config)
            break

        elif choice == "0":
            wireguardedit_noconjuction_1iran_5kharej()
        else:
            print("\033[91mPlease select a valid option.\033[0m")


def wireguardedit_iranconfig_4():
    config_path = "/etc/wireguard/wireserver4.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig(config_path)
    )

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCould not retrieve the WireGuard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[93mWireguard Edit local\033[97m IRAN Server Config\033[92m [4]\033[93m Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("\033[93mThis is IRAN Server - \033[97mConfig [4]\033[0m")
        print("1.\033[92m Change \033[97mPrivate IP\033[92m Address\033[0m")
        print("2.\033[96m Change Tunnel Port\033[0m")
        print(
            "3.\033[93m Change \033[92mKharej Client [4]\033[93m IP \033[96m(Endpoint IP)\033[0m"
        )
        print("4.\033[92m Save and Exit\033[0m")
        print("0. back to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice: ")

        if choice == "1":
            new_ip = input(
                "\033[93mEnter\033[92m New Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec4(opposite_ip)
            else:
                print("\033[91mInvalid IP Address!\033[0m")

        elif choice == "2":
            listen_port, endpoint = update_tunnel_port(listen_port, endpoint)
            update_ufw_ruleswireguard(
                address_no_subnet, address_no_subnet, listen_port, listen_port
            )

        elif choice == "3":
            endpoint = update_endpoint_ir_ip4(endpoint)

        elif choice == "4":
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "Endpoint": endpoint,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig4(config_path, new_config)
            break

        elif choice == "0":
            wireguardedit_noconjuction_1iran_5kharej()
        else:
            print("\033[91mPlease select a valid option.\033[0m")


def wireguardedit_iranconfig_5():
    config_path = "/etc/wireguard/wireserver5.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig(config_path)
    )

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCould not retrieve the WireGuard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[93mWireguard Edit local\033[97m IRAN Server Config\033[92m [5]\033[93m Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("\033[93mThis is IRAN Server - \033[97mConfig [5]\033[0m")
        print("1.\033[92m Change \033[97mPrivate IP\033[92m Address\033[0m")
        print("2.\033[96m Change Tunnel Port\033[0m")
        print(
            "3.\033[93m Change \033[92mKharej Client [5]\033[93m IP \033[96m(Endpoint IP)\033[0m"
        )
        print("4.\033[92m Save and Exit\033[0m")
        print("0. back to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice: ")

        if choice == "1":
            new_ip = input(
                "\033[93mEnter\033[92m New Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec5(opposite_ip)
            else:
                print("\033[91mInvalid IP Address!\033[0m")

        elif choice == "2":
            listen_port, endpoint = update_tunnel_port(listen_port, endpoint)
            update_ufw_ruleswireguard(
                address_no_subnet, address_no_subnet, listen_port, listen_port
            )

        elif choice == "3":
            endpoint = update_endpoint_ir_ip5(endpoint)

        elif choice == "4":
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "Endpoint": endpoint,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig5(config_path, new_config)
            break

        elif choice == "0":
            wireguardedit_noconjuction_1iran_5kharej()
        else:
            print("\033[91mPlease select a valid option.\033[0m")


def wireguardudp_kharej_client1():
    config_path = "/etc/wireguard/wireclient.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig(config_path)
    )

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCould not retrieve the WireGuard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[93mWireguard Edit local\033[97m Kharej Client\033[92m [1]\033[93m Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("\033[93mThis is Kharej Client - \033[97m[1]\033[0m")
        print("1.\033[92m Change \033[97mPrivate IP\033[92m Address\033[0m")
        print("2.\033[96m Change Tunnel Port\033[0m")
        print(
            "3.\033[93m Change \033[92mIRAN Server\033[93m IP \033[96m(Endpoint IP)\033[0m"
        )
        print("4.\033[92m Save and Exit\033[0m")
        print("0. back to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice: ")

        if choice == "1":
            new_ip = input(
                "\033[93mEnter\033[92m New Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec_client(opposite_ip)
            else:
                print("\033[91mInvalid IP Address!\033[0m")

        elif choice == "2":
            listen_port, endpoint = update_tunnel_port(listen_port, endpoint)
            update_ufw_ruleswireguard(
                address_no_subnet, address_no_subnet, listen_port, listen_port
            )

        elif choice == "3":
            endpoint = update_endpoint_ir_server(endpoint)

        elif choice == "4":
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "Endpoint": endpoint,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_client(config_path, new_config)
            break

        elif choice == "0":
            wireguardedit_noconjuction_1iran_5kharej()
        else:
            print("\033[91mPlease select a valid option.\033[0m")


def wireguardudp_kharej_client2():
    config_path = "/etc/wireguard/wireclient.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig(config_path)
    )

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCould not retrieve the WireGuard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[93mWireguard Edit local\033[97m Kharej Client\033[92m [2]\033[93m Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("\033[93mThis is Kharej Client - \033[97m[2]\033[0m")
        print("1.\033[92m Change \033[97mPrivate IP\033[92m Address\033[0m")
        print("2.\033[96m Change Tunnel Port\033[0m")
        print(
            "3.\033[93m Change \033[92mIRAN Server\033[93m IP \033[96m(Endpoint IP)\033[0m"
        )
        print("4.\033[92m Save and Exit\033[0m")
        print("0. back to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice: ")

        if choice == "1":
            new_ip = input(
                "\033[93mEnter\033[92m New Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec_client(opposite_ip)
            else:
                print("\033[91mInvalid IP Address!\033[0m")

        elif choice == "2":
            listen_port, endpoint = update_tunnel_port(listen_port, endpoint)
            update_ufw_ruleswireguard(
                address_no_subnet, address_no_subnet, listen_port, listen_port
            )

        elif choice == "3":
            endpoint = update_endpoint_ir_server(endpoint)

        elif choice == "4":
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "Endpoint": endpoint,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_client(config_path, new_config)
            break

        elif choice == "0":
            wireguardedit_noconjuction_1iran_5kharej()
        else:
            print("\033[91mPlease select a valid option.\033[0m")


def wireguardudp_kharej_client3():
    config_path = "/etc/wireguard/wireclient.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig(config_path)
    )

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCould not retrieve the WireGuard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[93mWireguard Edit local\033[97m Kharej Client\033[92m [3]\033[93m Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("\033[93mThis is Kharej Client - \033[97m[3]\033[0m")
        print("1.\033[92m Change \033[97mPrivate IP\033[92m Address\033[0m")
        print("2.\033[96m Change Tunnel Port\033[0m")
        print(
            "3.\033[93m Change \033[92mIRAN Server\033[93m IP \033[96m(Endpoint IP)\033[0m"
        )
        print("4.\033[92m Save and Exit\033[0m")
        print("0. back to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice: ")

        if choice == "1":
            new_ip = input(
                "\033[93mEnter\033[92m New Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec_client(opposite_ip)
            else:
                print("\033[91mInvalid IP Address!\033[0m")

        elif choice == "2":
            listen_port, endpoint = update_tunnel_port(listen_port, endpoint)
            update_ufw_ruleswireguard(
                address_no_subnet, address_no_subnet, listen_port, listen_port
            )

        elif choice == "3":
            endpoint = update_endpoint_ir_server(endpoint)

        elif choice == "4":
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "Endpoint": endpoint,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_client(config_path, new_config)
            break

        elif choice == "0":
            wireguardedit_noconjuction_1iran_5kharej()
        else:
            print("\033[91mPlease select a valid option.\033[0m")


def wireguardudp_kharej_client4():
    config_path = "/etc/wireguard/wireclient.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig(config_path)
    )

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCould not retrieve the WireGuard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[93mWireguard Edit local\033[97m Kharej Client\033[92m [4]\033[93m Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("\033[93mThis is Kharej Client - \033[97m[4]\033[0m")
        print("1.\033[92m Change \033[97mPrivate IP\033[92m Address\033[0m")
        print("2.\033[96m Change Tunnel Port\033[0m")
        print(
            "3.\033[93m Change \033[92mIRAN Server\033[93m IP \033[96m(Endpoint IP)\033[0m"
        )
        print("4.\033[92m Save and Exit\033[0m")
        print("0. back to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice: ")

        if choice == "1":
            new_ip = input(
                "\033[93mEnter\033[92m New Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec_client(opposite_ip)
            else:
                print("\033[91mInvalid IP Address!\033[0m")

        elif choice == "2":
            listen_port, endpoint = update_tunnel_port(listen_port, endpoint)
            update_ufw_ruleswireguard(
                address_no_subnet, address_no_subnet, listen_port, listen_port
            )

        elif choice == "3":
            endpoint = update_endpoint_ir_server(endpoint)

        elif choice == "4":
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "Endpoint": endpoint,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_client(config_path, new_config)
            break

        elif choice == "0":
            wireguardedit_noconjuction_1iran_5kharej()
        else:
            print("\033[91mPlease select a valid option.\033[0m")


def wireguardudp_kharej_client5():
    config_path = "/etc/wireguard/wireclient.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig(config_path)
    )

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCould not retrieve the WireGuard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[93mWireguard Edit local\033[97m Kharej Client\033[92m [5]\033[93m Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("\033[93mThis is Kharej Client - \033[97m[5]\033[0m")
        print("1.\033[92m Change \033[97mPrivate IP\033[92m Address\033[0m")
        print("2.\033[96m Change Tunnel Port\033[0m")
        print(
            "3.\033[93m Change \033[92mIRAN Server\033[93m IP \033[96m(Endpoint IP)\033[0m"
        )
        print("4.\033[92m Save and Exit\033[0m")
        print("0. back to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice: ")

        if choice == "1":
            new_ip = input(
                "\033[93mEnter\033[92m New Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec_client(opposite_ip)
            else:
                print("\033[91mInvalid IP Address!\033[0m")

        elif choice == "2":
            listen_port, endpoint = update_tunnel_port(listen_port, endpoint)
            update_ufw_ruleswireguard(
                address_no_subnet, address_no_subnet, listen_port, listen_port
            )

        elif choice == "3":
            endpoint = update_endpoint_ir_server(endpoint)

        elif choice == "4":
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "Endpoint": endpoint,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_client(config_path, new_config)
            break

        elif choice == "0":
            wireguardedit_noconjuction_1iran_5kharej()
        else:
            print("\033[91mPlease select a valid option.\033[0m")


# wireguard ipsec


def wireguardeditserver_sec_mnu():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print("\033[92m(   ) \033[93mWireguard + IPSEC \033[93m Edit Menu\033[0m")
    print(
        '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
    )
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[92mWireguard - [1]Kharej Server [5]IRAN Clients\033[0m")
    print("2. \033[93mWireguard - [1]IRAN   Server [5]Kharej Clients\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    print("0.\033[97mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")
    while True:
        server_type = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if server_type == "1":
            wireguardedit_noconjuction_kharej1_5iransec()
            break
        elif server_type == "2":
            wireguardedit_noconjuction_1iran_5kharejsec()
            break
        elif server_type == "0":
            os.system("clear")
            wireguardeditserver_mnu()
            break
        else:
            print("Invalid choice.")


def wireguardedit_noconjuction_kharej1_5iransec():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print(
        "\033[92m(   ) \033[93mWireguard + IPSEC \033[92m[1]Kharej Server\033[96m [5]IRAN Client\033[93m Edit Menu\033[0m"
    )
    print(
        '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
    )
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[92mIRAN Client [1] Config\033[0m")
    print("2. \033[92mIRAN Client [2] Config\033[0m")
    print("3. \033[92mIRAN Client [3] Config\033[0m")
    print("4. \033[93mIRAN Client [4] Config\033[0m")
    print("5. \033[92mIRAN Client [5] Config\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    print("6. \033[96mKharej Server Config\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    print("0.\033[97mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")
    while True:
        server_type = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if server_type == "1":
            wireguardudp_iran_client1sec()
            break
        elif server_type == "2":
            wireguardudp_iran_client2sec()
            break
        elif server_type == "3":
            wireguardudp_iran_client3sec()
            break
        elif server_type == "4":
            wireguardudp_iran_client4sec()
            break
        elif server_type == "5":
            wireguardudp_iran_client5sec()
            break
        elif server_type == "6":
            wireguardudpedit_kharej_serversec()
            break
        elif server_type == "0":
            os.system("clear")
            wireguardeditserver_sec_mnu()
            break
        else:
            print("Invalid choice.")


def wireguardudpedit_kharej_serversec():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print(
        "\033[92m(   ) \033[93mWireguard + IPSEC \033[92m[1]Kharej Server\033[96m [5]IRAN Client\033[93m Edit Menu\033[0m"
    )
    print(
        '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
    )
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[92mKharej Server Config [1] \033[0m")
    print("2. \033[92mKharej Server Config [2]\033[0m")
    print("3. \033[93mKharej Server Config [3]\033[0m")
    print("4. \033[92mKharej Server Config [4]\033[0m")
    print("5. \033[92mKharej Server Config [5]\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    print("0.\033[97mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")
    while True:
        server_type = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if server_type == "1":
            wireguardedit_kharejconfig_1sec()
            break
        elif server_type == "2":
            wireguardedit_kharejconfig_2sec()
            break
        elif server_type == "3":
            wireguardedit_kharejconfig_3sec()
            break
        elif server_type == "4":
            wireguardedit_kharejconfig_4sec()
            break
        elif server_type == "5":
            wireguardedit_kharejconfig_5sec()
            break
        elif server_type == "0":
            os.system("clear")
            wireguardedit_noconjuction_kharej1_5iransec()
            break
        else:
            print("Invalid choice.")


def wireguardedit_noconjuction_1iran_5kharejsec():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print(
        "\033[92m(   ) \033[93mWireguard + IPSEC \033[92m[1]IRAN Server\033[96m [5]Kharej Client\033[93m Edit Menu\033[0m"
    )
    print(
        '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
    )
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[92mKharej Client [1] Config\033[0m")
    print("2. \033[92mKharej Client [2] Config\033[0m")
    print("3. \033[92mKharej Client [3] Config\033[0m")
    print("4. \033[93mKharej Client [4] Config\033[0m")
    print("5. \033[92mKharej Client [5] Config\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    print("6. \033[96mIRAN Server Config\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    print("0.\033[97mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")
    while True:
        server_type = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if server_type == "1":
            wireguardudp_kharej_client1sec()
            break
        elif server_type == "2":
            wireguardudp_kharej_client2sec()
            break
        elif server_type == "3":
            wireguardudp_kharej_client3sec()
            break
        elif server_type == "4":
            wireguardudp_kharej_client4sec()
            break
        elif server_type == "5":
            wireguardudp_kharej_client5sec()
            break
        elif server_type == "6":
            wireguardudpedit_iran_serversec()
            break
        elif server_type == "0":
            os.system("clear")
            wireguardeditserver_sec_mnu()
            break
        else:
            print("Invalid choice.")


def wireguardudpedit_iran_serversec():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print("\033[92m(   ) \033[93mWireguard + IPSEC \033[92mIRAN Server Menu\033[0m")
    print(
        '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
    )
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[92mIRAN Server Config [1] \033[0m")
    print("2. \033[92mIRAN Server Config [2]\033[0m")
    print("3. \033[93mIRAN Server Config [3]\033[0m")
    print("4. \033[92mIRAN Server Config [4]\033[0m")
    print("5. \033[92mIRAN Server Config [5]\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    print("0.\033[97mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")
    while True:
        server_type = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if server_type == "1":
            wireguardedit_iranconfig_1sec()
            break
        elif server_type == "2":
            wireguardedit_iranconfig_2sec()
            break
        elif server_type == "3":
            wireguardedit_iranconfig_3sec()
            break
        elif server_type == "4":
            wireguardedit_iranconfig_4sec()
            break
        elif server_type == "5":
            wireguardedit_iranconfig_5sec()
            break
        elif server_type == "0":
            os.system("clear")
            wireguardedit_noconjuction_1iran_5kharejsec()
            break
        else:
            print("Invalid choice.")


def wtb_opposite_ip_wireguardsec(ip):
    if ":" in ip:
        ip_parts = ip.split(":")
        if ip_parts[-1] == "1":
            ip_parts[-1] = "2"
        elif ip_parts[-1] == "2":
            ip_parts[-1] = "1"
        else:
            ip_parts[-1] = "2"
        return ":".join(ip_parts)
    else:
        ip_parts = ip.split(".")
        ip_parts[-1] = "1" if ip_parts[-1] == "2" else "2"
        return ".".join(ip_parts)


def load_wireguardconfigsec(file_path):
    try:
        with open(file_path, "r") as file:
            content = file.read()

        address_match = re.search(r"Address = ([^\s]+)", content)
        listen_port_match = re.search(r"ListenPort = (\d+)", content)
        endpoint_match = re.search(r"Endpoint = ([^\s]+):\d+", content)
        allowed_ips_match = re.search(r"AllowedIPs = ([^\s]+)", content)

        address = address_match.group(1) if address_match else "N/A"
        listen_port = listen_port_match.group(1) if listen_port_match else "N/A"
        endpoint = endpoint_match.group(1) if endpoint_match else "N/A"
        allowed_ips = allowed_ips_match.group(1) if allowed_ips_match else "N/A"

        return address, address.split("/")[0], listen_port, endpoint, allowed_ips
    except FileNotFoundError:
        print("\033[91mWireguard configuration file not found\033[0m")
        return None, None, None, None, None
    except Exception as e:
        print(f"\033[91mAn error occurred: {e}\033[0m")
        return None, None, None, None, None


def save_wireguardconfigsec1(file_path, new_config):
    try:
        with open(file_path, "r") as f:
            config = f.read()

        listen_port_pattern = r"ListenPort\s*=\s*\d+"
        endpoint_pattern = r"Endpoint\s*=\s*([^\s]+:\d+)?"
        address_pattern = r"Address\s*=\s*[^\s]+"
        allowed_ips_pattern = r"AllowedIPs\s*=\s*[^\s]+"

        new_config_content = re.sub(
            listen_port_pattern, f'ListenPort = {new_config["ListenPort"]}', config
        )

        new_config_content = re.sub(
            address_pattern, f'Address = {new_config["Address"]}', new_config_content
        )

        new_config_content = re.sub(
            allowed_ips_pattern,
            f'AllowedIPs = {new_config["AllowedIPs"]}',
            new_config_content,
        )

        existing_endpoint_match = re.search(endpoint_pattern, config)
        if existing_endpoint_match:
            existing_endpoint = existing_endpoint_match.group(1)
            if ":" not in new_config["Endpoint"]:

                new_config["Endpoint"] += f":{existing_endpoint.split(':')[1]}"

        new_config_content = re.sub(
            endpoint_pattern, f'Endpoint = {new_config["Endpoint"]}', new_config_content
        )

        with open(file_path, "w") as f:
            f.write(new_config_content)

        subprocess.run(["systemctl", "daemon-reload"], check=True)

        services_to_restart = [
            "strong-azumi1",
            "wireguardping_1.service",
        ]

        wg_quick_interface = "/etc/wireguard/wireserver1.conf"
        wg_quick_down = subprocess.run(
            ["wg-quick", "down", wg_quick_interface],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
        )

        if wg_quick_down.returncode == 0:
            subprocess.run(["wg-quick", "up", wg_quick_interface], check=True)
            display_checkmark(
                f"\033[92mInterface {wg_quick_interface} brought down and up successfully!\033[0m"
            )
        else:
            print(
                f"\033[93mFailed to bring down interface {wg_quick_interface}.\033[0m"
            )

        for service_name in services_to_restart:
            service_status = subprocess.run(
                ["systemctl", "is-active", service_name],
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
            )

            if service_status.returncode == 0:
                subprocess.run(["systemctl", "restart", service_name], check=True)
                display_checkmark(
                    f"\033[92mService {service_name} restarted successfully!\033[0m"
                )
            else:
                print(
                    f"\033[93mService {service_name} doesn't exist or is inactive.\033[0m"
                )

        display_checkmark(f"\033[92mConfiguration updated successfully!\033[0m")

    except FileNotFoundError:
        print(f"\033[91mfile {file_path} not found.\033[0m")
    except subprocess.CalledProcessError as e:
        print(f"\033[91merror in managing services: {e}\033[0m")
    except Exception as e:
        print(f"\033[91merror in saving the config: {e}\033[0m")


def save_wireguardconfigsec2(file_path, new_config):
    try:
        with open(file_path, "r") as f:
            config = f.read()

        listen_port_pattern = r"ListenPort\s*=\s*\d+"
        endpoint_pattern = r"Endpoint\s*=\s*([^\s]+:\d+)?"
        address_pattern = r"Address\s*=\s*[^\s]+"
        allowed_ips_pattern = r"AllowedIPs\s*=\s*[^\s]+"

        new_config_content = re.sub(
            listen_port_pattern, f'ListenPort = {new_config["ListenPort"]}', config
        )

        new_config_content = re.sub(
            address_pattern, f'Address = {new_config["Address"]}', new_config_content
        )

        new_config_content = re.sub(
            allowed_ips_pattern,
            f'AllowedIPs = {new_config["AllowedIPs"]}',
            new_config_content,
        )

        existing_endpoint_match = re.search(endpoint_pattern, config)
        if existing_endpoint_match:
            existing_endpoint = existing_endpoint_match.group(1)
            if ":" not in new_config["Endpoint"]:

                new_config["Endpoint"] += f":{existing_endpoint.split(':')[1]}"

        new_config_content = re.sub(
            endpoint_pattern, f'Endpoint = {new_config["Endpoint"]}', new_config_content
        )

        with open(file_path, "w") as f:
            f.write(new_config_content)

        subprocess.run(["systemctl", "daemon-reload"], check=True)

        services_to_restart = [
            "strong-azumi1",
            "wireguardping_2.service",
        ]

        wg_quick_interface = "/etc/wireguard/wireserver2.conf"
        wg_quick_down = subprocess.run(
            ["wg-quick", "down", wg_quick_interface],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
        )

        if wg_quick_down.returncode == 0:
            subprocess.run(["wg-quick", "up", wg_quick_interface], check=True)
            display_checkmark(
                f"\033[92mInterface {wg_quick_interface} brought down and up successfully!\033[0m"
            )
        else:
            print(
                f"\033[93mFailed to bring down interface {wg_quick_interface}.\033[0m"
            )

        for service_name in services_to_restart:
            service_status = subprocess.run(
                ["systemctl", "is-active", service_name],
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
            )

            if service_status.returncode == 0:
                subprocess.run(["systemctl", "restart", service_name], check=True)
                display_checkmark(
                    f"\033[92mService {service_name} restarted successfully!\033[0m"
                )
            else:
                print(
                    f"\033[93mService {service_name} doesn't exist or is inactive.\033[0m"
                )

        display_checkmark(f"\033[92mConfiguration updated successfully!\033[0m")

    except FileNotFoundError:
        print(f"\033[91mfile {file_path} not found.\033[0m")
    except subprocess.CalledProcessError as e:
        print(f"\033[91merror in managing services: {e}\033[0m")
    except Exception as e:
        print(f"\033[91merror in saving the config: {e}\033[0m")


def save_wireguardconfigsec3(file_path, new_config):
    try:
        with open(file_path, "r") as f:
            config = f.read()

        listen_port_pattern = r"ListenPort\s*=\s*\d+"
        endpoint_pattern = r"Endpoint\s*=\s*([^\s]+:\d+)?"
        address_pattern = r"Address\s*=\s*[^\s]+"
        allowed_ips_pattern = r"AllowedIPs\s*=\s*[^\s]+"

        new_config_content = re.sub(
            listen_port_pattern, f'ListenPort = {new_config["ListenPort"]}', config
        )

        new_config_content = re.sub(
            address_pattern, f'Address = {new_config["Address"]}', new_config_content
        )

        new_config_content = re.sub(
            allowed_ips_pattern,
            f'AllowedIPs = {new_config["AllowedIPs"]}',
            new_config_content,
        )

        existing_endpoint_match = re.search(endpoint_pattern, config)
        if existing_endpoint_match:
            existing_endpoint = existing_endpoint_match.group(1)
            if ":" not in new_config["Endpoint"]:

                new_config["Endpoint"] += f":{existing_endpoint.split(':')[1]}"

        new_config_content = re.sub(
            endpoint_pattern, f'Endpoint = {new_config["Endpoint"]}', new_config_content
        )

        with open(file_path, "w") as f:
            f.write(new_config_content)

        subprocess.run(["systemctl", "daemon-reload"], check=True)

        services_to_restart = [
            "strong-azumi1",
            "wireguardping_3.service",
        ]

        wg_quick_interface = "/etc/wireguard/wireserver3.conf"
        wg_quick_down = subprocess.run(
            ["wg-quick", "down", wg_quick_interface],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
        )

        if wg_quick_down.returncode == 0:
            subprocess.run(["wg-quick", "up", wg_quick_interface], check=True)
            display_checkmark(
                f"\033[92mInterface {wg_quick_interface} brought down and up successfully!\033[0m"
            )
        else:
            print(
                f"\033[93mFailed to bring down interface {wg_quick_interface}.\033[0m"
            )

        for service_name in services_to_restart:
            service_status = subprocess.run(
                ["systemctl", "is-active", service_name],
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
            )

            if service_status.returncode == 0:
                subprocess.run(["systemctl", "restart", service_name], check=True)
                display_checkmark(
                    f"\033[92mService {service_name} restarted successfully!\033[0m"
                )
            else:
                print(
                    f"\033[93mService {service_name} doesn't exist or is inactive.\033[0m"
                )

        display_checkmark(f"\033[92mConfiguration updated successfully!\033[0m")

    except FileNotFoundError:
        print(f"\033[91mfile {file_path} not found.\033[0m")
    except subprocess.CalledProcessError as e:
        print(f"\033[91merror in managing services: {e}\033[0m")
    except Exception as e:
        print(f"\033[91merror in saving the config: {e}\033[0m")


def save_wireguardconfigsec4(file_path, new_config):
    try:
        with open(file_path, "r") as f:
            config = f.read()

        listen_port_pattern = r"ListenPort\s*=\s*\d+"
        endpoint_pattern = r"Endpoint\s*=\s*([^\s]+:\d+)?"
        address_pattern = r"Address\s*=\s*[^\s]+"
        allowed_ips_pattern = r"AllowedIPs\s*=\s*[^\s]+"

        new_config_content = re.sub(
            listen_port_pattern, f'ListenPort = {new_config["ListenPort"]}', config
        )

        new_config_content = re.sub(
            address_pattern, f'Address = {new_config["Address"]}', new_config_content
        )

        new_config_content = re.sub(
            allowed_ips_pattern,
            f'AllowedIPs = {new_config["AllowedIPs"]}',
            new_config_content,
        )

        existing_endpoint_match = re.search(endpoint_pattern, config)
        if existing_endpoint_match:
            existing_endpoint = existing_endpoint_match.group(1)
            if ":" not in new_config["Endpoint"]:

                new_config["Endpoint"] += f":{existing_endpoint.split(':')[1]}"

        new_config_content = re.sub(
            endpoint_pattern, f'Endpoint = {new_config["Endpoint"]}', new_config_content
        )

        with open(file_path, "w") as f:
            f.write(new_config_content)

        subprocess.run(["systemctl", "daemon-reload"], check=True)

        services_to_restart = [
            "strong-azumi1",
            "wireguardping_4.service",
        ]

        wg_quick_interface = "/etc/wireguard/wireserver4.conf"
        wg_quick_down = subprocess.run(
            ["wg-quick", "down", wg_quick_interface],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
        )

        if wg_quick_down.returncode == 0:
            subprocess.run(["wg-quick", "up", wg_quick_interface], check=True)
            display_checkmark(
                f"\033[92mInterface {wg_quick_interface} brought down and up successfully!\033[0m"
            )
        else:
            print(
                f"\033[93mFailed to bring down interface {wg_quick_interface}.\033[0m"
            )

        for service_name in services_to_restart:
            service_status = subprocess.run(
                ["systemctl", "is-active", service_name],
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
            )

            if service_status.returncode == 0:
                subprocess.run(["systemctl", "restart", service_name], check=True)
                display_checkmark(
                    f"\033[92mService {service_name} restarted successfully!\033[0m"
                )
            else:
                print(
                    f"\033[93mService {service_name} doesn't exist or is inactive.\033[0m"
                )

        display_checkmark(f"\033[92mConfiguration updated successfully!\033[0m")

    except FileNotFoundError:
        print(f"\033[91mfile {file_path} not found.\033[0m")
    except subprocess.CalledProcessError as e:
        print(f"\033[91merror in managing services: {e}\033[0m")
    except Exception as e:
        print(f"\033[91merror in saving the config: {e}\033[0m")


def save_wireguardconfigsec5(file_path, new_config):
    try:
        with open(file_path, "r") as f:
            config = f.read()

        listen_port_pattern = r"ListenPort\s*=\s*\d+"
        endpoint_pattern = r"Endpoint\s*=\s*([^\s]+:\d+)?"
        address_pattern = r"Address\s*=\s*[^\s]+"
        allowed_ips_pattern = r"AllowedIPs\s*=\s*[^\s]+"

        new_config_content = re.sub(
            listen_port_pattern, f'ListenPort = {new_config["ListenPort"]}', config
        )

        new_config_content = re.sub(
            address_pattern, f'Address = {new_config["Address"]}', new_config_content
        )

        new_config_content = re.sub(
            allowed_ips_pattern,
            f'AllowedIPs = {new_config["AllowedIPs"]}',
            new_config_content,
        )

        existing_endpoint_match = re.search(endpoint_pattern, config)
        if existing_endpoint_match:
            existing_endpoint = existing_endpoint_match.group(1)
            if ":" not in new_config["Endpoint"]:

                new_config["Endpoint"] += f":{existing_endpoint.split(':')[1]}"

        new_config_content = re.sub(
            endpoint_pattern, f'Endpoint = {new_config["Endpoint"]}', new_config_content
        )

        with open(file_path, "w") as f:
            f.write(new_config_content)

        subprocess.run(["systemctl", "daemon-reload"], check=True)

        services_to_restart = [
            "strong-azumi1",
            "wireguardping_5.service",
        ]

        wg_quick_interface = "/etc/wireguard/wireserver5.conf"
        wg_quick_down = subprocess.run(
            ["wg-quick", "down", wg_quick_interface],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
        )

        if wg_quick_down.returncode == 0:
            subprocess.run(["wg-quick", "up", wg_quick_interface], check=True)
            display_checkmark(
                f"\033[92mInterface {wg_quick_interface} brought down and up successfully!\033[0m"
            )
        else:
            print(
                f"\033[93mFailed to bring down interface {wg_quick_interface}.\033[0m"
            )

        for service_name in services_to_restart:
            service_status = subprocess.run(
                ["systemctl", "is-active", service_name],
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
            )

            if service_status.returncode == 0:
                subprocess.run(["systemctl", "restart", service_name], check=True)
                display_checkmark(
                    f"\033[92mService {service_name} restarted successfully!\033[0m"
                )
            else:
                print(
                    f"\033[93mService {service_name} doesn't exist or is inactive.\033[0m"
                )

        display_checkmark(f"\033[92mConfiguration updated successfully!\033[0m")

    except FileNotFoundError:
        print(f"\033[91mfile {file_path} not found.\033[0m")
    except subprocess.CalledProcessError as e:
        print(f"\033[91merror in managing services: {e}\033[0m")
    except Exception as e:
        print(f"\033[91merror in saving the config: {e}\033[0m")


def save_wireguardconfigsec_client(file_path, new_config):
    try:
        with open(file_path, "r") as f:
            config = f.read()

        listen_port_pattern = r"ListenPort\s*=\s*\d+"
        endpoint_pattern = r"Endpoint\s*=\s*([^\s]+:\d+)?"
        address_pattern = r"Address\s*=\s*[^\s]+"
        allowed_ips_pattern = r"AllowedIPs\s*=\s*[^\s]+"

        new_config_content = re.sub(
            listen_port_pattern, f'ListenPort = {new_config["ListenPort"]}', config
        )

        new_config_content = re.sub(
            address_pattern, f'Address = {new_config["Address"]}', new_config_content
        )

        new_config_content = re.sub(
            allowed_ips_pattern,
            f'AllowedIPs = {new_config["AllowedIPs"]}',
            new_config_content,
        )

        existing_endpoint_match = re.search(endpoint_pattern, config)
        if existing_endpoint_match:
            existing_endpoint = existing_endpoint_match.group(1)
            if ":" not in new_config["Endpoint"]:

                new_config["Endpoint"] += f":{existing_endpoint.split(':')[1]}"

        new_config_content = re.sub(
            endpoint_pattern, f'Endpoint = {new_config["Endpoint"]}', new_config_content
        )

        with open(file_path, "w") as f:
            f.write(new_config_content)

        subprocess.run(["systemctl", "daemon-reload"], check=True)

        services_to_restart = [
            "strong-azumi1",
            "wireguardping.service",
        ]

        wg_quick_interface = "/etc/wireguard/wireclient.conf"
        wg_quick_down = subprocess.run(
            ["wg-quick", "down", wg_quick_interface],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
        )

        if wg_quick_down.returncode == 0:
            subprocess.run(["wg-quick", "up", wg_quick_interface], check=True)
            display_checkmark(
                f"\033[92mInterface {wg_quick_interface} brought down and up successfully!\033[0m"
            )
        else:
            print(
                f"\033[93mFailed to bring down interface {wg_quick_interface}.\033[0m"
            )

        for service_name in services_to_restart:
            service_status = subprocess.run(
                ["systemctl", "is-active", service_name],
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
            )

            if service_status.returncode == 0:
                subprocess.run(["systemctl", "restart", service_name], check=True)
                display_checkmark(
                    f"\033[92mService {service_name} restarted successfully!\033[0m"
                )
            else:
                print(
                    f"\033[93mService {service_name} doesn't exist or is inactive.\033[0m"
                )

        display_checkmark(f"\033[92mConfiguration updated successfully!\033[0m")

    except FileNotFoundError:
        print(f"\033[91mfile {file_path} not found.\033[0m")
    except subprocess.CalledProcessError as e:
        print(f"\033[91merror in managing services: {e}\033[0m")
    except Exception as e:
        print(f"\033[91merror in saving the config: {e}\033[0m")


def update_ufw_ruleswireguardsec(old_ip, new_ip, old_port=None, new_port=None):
    if old_port:
        delete_ufw_rulessec(old_ip, old_port)
        delete_ufw_rulessec(wtb_opposite_ip_wireguardsec(old_ip), old_port)
    add_ufw_ruleswireguardsec(new_ip, new_port)
    add_ufw_ruleswireguardsec(wtb_opposite_ip_wireguardsec(new_ip), new_port)


def delete_ufw_rulessec(ip, port):
    try:
        subprocess.run(
            ["sudo", "ufw", "delete", "allow", "from", ip, "to", "any", "port", port],
            check=False,
        )
    except subprocess.CalledProcessError as e:
        print(f"\033[91mError deleting UFW rule for {ip} on port {port}: {e}\033[0m")


def add_ufw_ruleswireguardsec(ip, port):
    try:
        subprocess.run(
            ["sudo", "ufw", "allow", "from", ip, "to", "any", "port", port], check=True
        )
    except subprocess.CalledProcessError as e:
        print(f"\033[91mError adding UFW rule for {ip} on port {port}: {e}\033[0m")


def display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips):
    lines = [
        f"\033[97m──────────────────────────────────────\033[0m",
        f"\033[93mTitle:         Wireguard Configuration\033[0m",
        f"\033[97m──────────────────────────────────────\033[0m",
        f"\033[92mAddress:           \033[97m{address_no_subnet}\033[0m",
        f"\033[92mListenPort:        \033[97m{listen_port}\033[0m",
        f"\033[92mEndpoint:          \033[97m{endpoint}\033[0m",
        f"\033[92mAllowedIPs:        \033[97m{allowed_ips}\033[0m",
    ]
    box_width = 50

    print("\033[93m╭" + "─" * (box_width - 2) + "╮\033[0m")

    for line in lines:
        print(f"\033[93m {line:<{box_width - 4}} \033[0m")

    print("\033[93m╰" + "─" * (box_width - 2) + "╯\033[0m")


def update_ping_script_opposite_ip_wireguard1(new_opposite_ip):
    script_path = "/etc/ping_wireguard_1.sh"
    try:
        with open(script_path, "r") as f:
            script_content = f.read()

        updated_script_content = re.sub(
            r'ip_address="[^"]+"', f'ip_address="{new_opposite_ip}"', script_content
        )

        with open(script_path, "w") as f:
            f.write(updated_script_content)

        display_checkmark(
            "\033[92mPing script updated with new opposite IP address!\033[0m"
        )
    except FileNotFoundError:
        print(f"\033[91mPing script {script_path} not found.\033[0m")
    except Exception as e:
        print(f"\033[91mError updating ping script: {e}\033[0m")


def update_ping_script_opposite_ip_wireguard_client(new_opposite_ip):
    script_path = "/etc/ping_wireguard.sh"
    try:
        with open(script_path, "r") as f:
            script_content = f.read()

        updated_script_content = re.sub(
            r'ip_address="[^"]+"', f'ip_address="{new_opposite_ip}"', script_content
        )

        with open(script_path, "w") as f:
            f.write(updated_script_content)

        display_checkmark(
            "\033[92mPing script updated with new opposite IP address!\033[0m"
        )
    except FileNotFoundError:
        print(f"\033[91mPing script {script_path} not found.\033[0m")
    except Exception as e:
        print(f"\033[91mError updating ping script: {e}\033[0m")


def update_ping_script_opposite_ip_wireguard2(new_opposite_ip):
    script_path = "/etc/ping_wireguard_2.sh"
    try:
        with open(script_path, "r") as f:
            script_content = f.read()

        updated_script_content = re.sub(
            r'ip_address="[^"]+"', f'ip_address="{new_opposite_ip}"', script_content
        )

        with open(script_path, "w") as f:
            f.write(updated_script_content)

        display_checkmark(
            "\033[92mPing script updated with new opposite IP address!\033[0m"
        )
    except FileNotFoundError:
        print(f"\033[91mPing script {script_path} not found.\033[0m")
    except Exception as e:
        print(f"\033[91mError updating ping script: {e}\033[0m")


def update_ping_script_opposite_ip_wireguard3(new_opposite_ip):
    script_path = "/etc/ping_wireguard_3.sh"
    try:
        with open(script_path, "r") as f:
            script_content = f.read()

        updated_script_content = re.sub(
            r'ip_address="[^"]+"', f'ip_address="{new_opposite_ip}"', script_content
        )

        with open(script_path, "w") as f:
            f.write(updated_script_content)

        display_checkmark(
            "\033[92mPing script updated with new opposite IP address!\033[0m"
        )
    except FileNotFoundError:
        print(f"\033[91mPing script {script_path} not found.\033[0m")
    except Exception as e:
        print(f"\033[91mError updating ping script: {e}\033[0m")


def update_ping_script_opposite_ip_wireguard4(new_opposite_ip):
    script_path = "/etc/ping_wireguard_4.sh"
    try:
        with open(script_path, "r") as f:
            script_content = f.read()

        updated_script_content = re.sub(
            r'ip_address="[^"]+"', f'ip_address="{new_opposite_ip}"', script_content
        )

        with open(script_path, "w") as f:
            f.write(updated_script_content)

        display_checkmark(
            "\033[92mPing script updated with new opposite IP address!\033[0m"
        )
    except FileNotFoundError:
        print(f"\033[91mPing script {script_path} not found.\033[0m")
    except Exception as e:
        print(f"\033[91mError updating ping script: {e}\033[0m")


def update_ping_script_opposite_ip_wireguard5(new_opposite_ip):
    script_path = "/etc/ping_wireguard_5.sh"
    try:
        with open(script_path, "r") as f:
            script_content = f.read()

        updated_script_content = re.sub(
            r'ip_address="[^"]+"', f'ip_address="{new_opposite_ip}"', script_content
        )

        with open(script_path, "w") as f:
            f.write(updated_script_content)

        display_checkmark(
            "\033[92mPing script updated with new opposite IP address!\033[0m"
        )
    except FileNotFoundError:
        print(f"\033[91mPing script {script_path} not found.\033[0m")
    except Exception as e:
        print(f"\033[91mError updating ping script: {e}\033[0m")


def ipsecsecret_key_wire(name):
    try:
        with open(name, "r") as f:
            content = f.read()
        match = re.search(r'PSK "(\S+)"', content)
        if match:
            return match.group(1)
        else:
            print("\033[91mNo IPsec key found\033[0m")
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mOut of ordinary error: {e}\033[0m")
    return None


def update_ipsecsecret_wire(name, new_secret):
    try:
        with open(name, "r") as f:
            content = f.read()

        new_content = re.sub(r'PSK "\S+"', f'PSK "{new_secret}"', content)

        with open(name, "w") as f:
            f.write(new_content)

        display_checkmark("\033[92mIPsec secret key updated successfully!\033[0m")
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mOut of ordinary error: {e}\033[0m")


def update_ipsec_conf_wireguard_46(name, new_private_ip):
    try:
        with open(name, "r") as f:
            content = f.read()

        if ":" in new_private_ip:
            ip_parts = new_private_ip.split(":")
            ip_parts[-1] = "1" if ip_parts[-1].endswith("2") else "2"
            counterpart_ip = ":".join(ip_parts)
            subnet_suffix = "/64"
        else:
            ip_parts = new_private_ip.split(".")
            ip_parts[-1] = "1" if ip_parts[-1] == "2" else "2"
            counterpart_ip = ".".join(ip_parts)
            subnet_suffix = "/24"

        new_content = re.sub(
            r"leftsubnet=\S+", f"leftsubnet={new_private_ip}{subnet_suffix}", content
        )
        new_content = re.sub(r"leftid=\S+", f"leftid={new_private_ip}", new_content)
        new_content = re.sub(r"right=\S+", f"right={counterpart_ip}", new_content)
        new_content = re.sub(
            r"rightsubnet=\S+",
            f"rightsubnet={counterpart_ip}{subnet_suffix}",
            new_content,
        )

        with open(name, "w") as f:
            f.write(new_content)

        display_checkmark("\033[92mIPsec configuration updated successfully!\033[0m")

    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mOut of ordinary error: {e}\033[0m")


def display_ipsecsecret_wire(secret_key):
    box_width = 50
    print("\033[93m╭" + "─" * (box_width - 2) + "╮\033[0m")
    print(f"\033[93m Title:        \033[93m IPsec Secret Key\033[0m")
    print(f"\033[97m──────────────────────────────────────\033[0m")
    print(f"\033[93m IPsec Key:  \033[97m{secret_key}\033[0m")
    print("\033[93m╰" + "─" * (box_width - 2) + "╯\033[0m")


def update_ipsec_ip_wire(new_vxlan_ip):
    def opposite_ip(ip):
        if ":" in ip:
            parts = ip.split(":")
            parts[-1] = "1" if parts[-1].endswith("2") else "2"
            return ":".join(parts)
        else:
            octets = ip.split(".")
            octets[-1] = "1" if octets[-1] == "2" else "2"
            return ".".join(octets)

    secrets_file = "/etc/ipsec.secrets"
    opposite_ip_addr = opposite_ip(new_vxlan_ip)

    try:
        with open(secrets_file, "r") as file:
            lines = file.readlines()

        new_lines = []
        for line in lines:
            if ": PSK" in line:
                parts = line.split()
                if len(parts) > 2:
                    new_line = (
                        f'{opposite_ip_addr} {new_vxlan_ip} : PSK "{parts[-1][1:-1]}"'
                    )
                    new_lines.append(new_line + "\n")
                else:
                    new_lines.append(line)
            else:
                new_lines.append(line)

        with open(secrets_file, "w") as file:
            file.writelines(new_lines)

        display_checkmark("\033[92mIPsec secrets updated successfully!\033[0m")

    except FileNotFoundError:
        print("\033[91mFile not found\033[0m")
    except Exception as e:
        print(f"\033[91mOut of ordinary error: {e}\033[0m")


def update_ipsec_conf_wireguard_server1(name, new_private_ip):
    try:
        with open(name, "r") as f:
            content = f.readlines()

        start_idx, end_idx = None, None
        for i, line in enumerate(content):
            if line.strip() == "conn wireguard_server1":
                start_idx = i
            elif start_idx is not None and line.strip().startswith("conn "):
                end_idx = i
                break

        if start_idx is None:
            print("\033[91m'conn wireguard_server1' section not found\033[0m")
            return

        if end_idx is None:
            end_idx = len(content)

        section = content[start_idx:end_idx]

        ip_type = (
            "ipv6"
            if isinstance(ipaddress.ip_address(new_private_ip), ipaddress.IPv6Address)
            else "ipv4"
        )

        if ip_type == "ipv6":
            subnet = "/64"
        else:
            subnet = "/32"

        ip_parts = (
            new_private_ip.split(".")
            if ip_type == "ipv4"
            else new_private_ip.split(":")
        )
        if new_private_ip.endswith(".2") or new_private_ip.endswith(":2"):
            ip_parts[-1] = "1"
        else:
            ip_parts[-1] = "2"
        counterpart_ip = ".".join(ip_parts) if ip_type == "ipv4" else ":".join(ip_parts)

        new_section = []
        for line in section:
            line = re.sub(
                r"leftsubnet=\S+", f"leftsubnet={new_private_ip}{subnet}", line
            )
            line = re.sub(r"leftid=\S+", f"leftid={new_private_ip}", line)
            line = re.sub(r"right=\S+", f"right={counterpart_ip}", line)
            line = re.sub(
                r"rightsubnet=\S+", f"rightsubnet={counterpart_ip}{subnet}", line
            )
            new_section.append(line)

        new_content = content[:start_idx] + new_section + content[end_idx:]

        with open(name, "w") as f:
            f.writelines(new_content)

        print(f"\033[92m'conn wireguard_server1' section updated successfully\033[0m")
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def wireguardedit_kharejconfig_1sec():
    config_path = "/etc/wireguard/wireserver1.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfigsec(config_path)
    )

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCould not retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips)

        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[93mWireguard + IPSEC Edit local\033[97m Kharej Server Config\033[92m [1]\033[93m Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("\033[93mThis is Kharej Server - \033[97mConfig [1]\033[0m")
        print("1.\033[92m Change \033[97mPrivate IP\033[92m Address\033[0m")
        print("2.\033[94m Change Tunnel Port\033[0m")
        print("3.\033[93m Change \033[92mIRAN Client [1] \033[96m(Endpoint IP)\033[0m")
        print("4.\033[94m Change IPsec Secret Key\033[0m")
        print("5.\033[92m Save and Exit\033[0m")
        print("0. back to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice: ")

        if choice == "1":
            new_ip = input(
                "\033[93mEnter\033[92m New Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguardsec(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguardsec(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wireguard1(opposite_ip)
                update_ipsec_conf_wireguard_server1("/etc/ipsec1.conf", new_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "2":
            listen_port, endpoint = update_tunnel_port(listen_port, endpoint)
            update_ufw_ruleswireguard(
                address_no_subnet, address_no_subnet, listen_port, listen_port
            )
        elif choice == "3":
            endpoint = update_endpoint_ip1(endpoint)
        elif choice == "4":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secret Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")
        elif choice == "5":
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "Endpoint": endpoint,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfigsec1(config_path, new_config)
            update_ipsec_ip_multi(address_no_subnet)
            return
        elif choice == "0":
            wireguardedit_noconjuction_kharej1_5iransec()
        else:
            print("\033[91mPlease select a valid option.\033[0m")


def update_ipsec_conf_wireguard_server2(name, new_private_ip):
    try:
        with open(name, "r") as f:
            content = f.readlines()

        start_idx, end_idx = None, None
        for i, line in enumerate(content):
            if line.strip() == "conn wireguard_server2":
                start_idx = i
            elif start_idx is not None and line.strip().startswith("conn "):
                end_idx = i
                break

        if start_idx is None:
            print("\033[91m'conn wireguard_server2' section not found\033[0m")
            return

        if end_idx is None:
            end_idx = len(content)

        section = content[start_idx:end_idx]

        ip_type = (
            "ipv6"
            if isinstance(ipaddress.ip_address(new_private_ip), ipaddress.IPv6Address)
            else "ipv4"
        )

        if ip_type == "ipv6":
            subnet = "/64"
        else:
            subnet = "/32"

        ip_parts = (
            new_private_ip.split(".")
            if ip_type == "ipv4"
            else new_private_ip.split(":")
        )
        if new_private_ip.endswith(".2") or new_private_ip.endswith(":2"):
            ip_parts[-1] = "1"
        else:
            ip_parts[-1] = "2"
        counterpart_ip = ".".join(ip_parts) if ip_type == "ipv4" else ":".join(ip_parts)

        new_section = []
        for line in section:
            line = re.sub(
                r"leftsubnet=\S+", f"leftsubnet={new_private_ip}{subnet}", line
            )
            line = re.sub(r"leftid=\S+", f"leftid={new_private_ip}", line)
            line = re.sub(r"right=\S+", f"right={counterpart_ip}", line)
            line = re.sub(
                r"rightsubnet=\S+", f"rightsubnet={counterpart_ip}{subnet}", line
            )
            new_section.append(line)

        new_content = content[:start_idx] + new_section + content[end_idx:]

        with open(name, "w") as f:
            f.writelines(new_content)

        print(f"\033[92m'conn wireguard_server2' section updated successfully\033[0m")
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def wireguardedit_kharejconfig_2sec():
    config_path = "/etc/wireguard/wireserver2.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfigsec(config_path)
    )

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCould not retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips)

        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[93mWireguard + IPSEC Edit local\033[97m Kharej Server Config\033[92m [2]\033[93m Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("\033[93mThis is Kharej Server - \033[97mConfig [2]\033[0m")
        print("1.\033[92m Change \033[97mPrivate IP\033[92m Address\033[0m")
        print("2.\033[94m Change Tunnel Port\033[0m")
        print("3.\033[93m Change \033[92mIRAN Client [2] \033[96m(Endpoint IP)\033[0m")
        print("4.\033[94m Change IPsec Secret Key\033[0m")
        print("5.\033[92m Save and Exit\033[0m")
        print("0. back to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice: ")

        if choice == "1":
            new_ip = input(
                "\033[93mEnter\033[92m New Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguardsec(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguardsec(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wireguard2(opposite_ip)
                update_ipsec_conf_wireguard_server2("/etc/ipsec1.conf", new_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "2":
            listen_port, endpoint = update_tunnel_port(listen_port, endpoint)
            update_ufw_ruleswireguard(
                address_no_subnet, address_no_subnet, listen_port, listen_port
            )
        elif choice == "3":
            endpoint = update_endpoint_ip2(endpoint)
        elif choice == "4":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secret Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")
        elif choice == "5":
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "Endpoint": endpoint,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfigsec2(config_path, new_config)
            update_ipsec_ip_multi2(new_ip)
            return
        elif choice == "0":
            wireguardedit_noconjuction_kharej1_5iransec()
        else:
            print("\033[91mPlease select a valid option.\033[0m")


def update_ipsec_conf_wireguard_server3(name, new_private_ip):
    try:
        with open(name, "r") as f:
            content = f.readlines()

        start_idx, end_idx = None, None
        for i, line in enumerate(content):
            if line.strip() == "conn wireguard_server3":
                start_idx = i
            elif start_idx is not None and line.strip().startswith("conn "):
                end_idx = i
                break

        if start_idx is None:
            print("\033[91m'conn wireguard_server3' section not found\033[0m")
            return

        if end_idx is None:
            end_idx = len(content)

        section = content[start_idx:end_idx]

        ip_type = (
            "ipv6"
            if isinstance(ipaddress.ip_address(new_private_ip), ipaddress.IPv6Address)
            else "ipv4"
        )

        if ip_type == "ipv6":
            subnet = "/64"
        else:
            subnet = "/32"

        ip_parts = (
            new_private_ip.split(".")
            if ip_type == "ipv4"
            else new_private_ip.split(":")
        )
        if new_private_ip.endswith(".2") or new_private_ip.endswith(":2"):
            ip_parts[-1] = "1"
        else:
            ip_parts[-1] = "2"
        counterpart_ip = ".".join(ip_parts) if ip_type == "ipv4" else ":".join(ip_parts)

        new_section = []
        for line in section:
            line = re.sub(
                r"leftsubnet=\S+", f"leftsubnet={new_private_ip}{subnet}", line
            )
            line = re.sub(r"leftid=\S+", f"leftid={new_private_ip}", line)
            line = re.sub(r"right=\S+", f"right={counterpart_ip}", line)
            line = re.sub(
                r"rightsubnet=\S+", f"rightsubnet={counterpart_ip}{subnet}", line
            )
            new_section.append(line)

        new_content = content[:start_idx] + new_section + content[end_idx:]

        with open(name, "w") as f:
            f.writelines(new_content)

        print(f"\033[92m'conn wireguard_server3' section updated successfully\033[0m")
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def wireguardedit_kharejconfig_3sec():
    config_path = "/etc/wireguard/wireserver3.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfigsec(config_path)
    )

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCould not retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips)

        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[93mWireguard + IPSEC Edit local\033[97m Kharej Server Config\033[92m [3]\033[93m Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("\033[93mThis is Kharej Server - \033[97mConfig [3]\033[0m")
        print("1.\033[92m Change \033[97mPrivate IP\033[92m Address\033[0m")
        print("2.\033[94m Change Tunnel Port\033[0m")
        print("3.\033[93m Change IRAN Client [3] \033[96m(Endpoint IP)\033[0m")
        print("4.\033[94m Change IPsec Secret Key\033[0m")
        print("5.\033[92m Save and Exit\033[0m")
        print("0. back to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice: ")

        if choice == "1":
            new_ip = input(
                "\033[93mEnter\033[92m New Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguardsec(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguardsec(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wireguard3(opposite_ip)
                update_ipsec_conf_wireguard_server3("/etc/ipsec1.conf", new_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "2":
            listen_port, endpoint = update_tunnel_port(listen_port, endpoint)
            update_ufw_ruleswireguard(
                address_no_subnet, address_no_subnet, listen_port, listen_port
            )
        elif choice == "3":
            endpoint = update_endpoint_ip3(endpoint)
        elif choice == "4":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secret Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")
        elif choice == "5":
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "Endpoint": endpoint,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfigsec3(config_path, new_config)
            update_ipsec_ip_multi3(new_ip)
            return
        elif choice == "0":
            wireguardedit_noconjuction_kharej1_5iransec()
        else:
            print("\033[91mPlease select a valid option.\033[0m")


def update_ipsec_conf_wireguard_server4(name, new_private_ip):
    try:
        with open(name, "r") as f:
            content = f.readlines()

        start_idx, end_idx = None, None
        for i, line in enumerate(content):
            if line.strip() == "conn wireguard_server4":
                start_idx = i
            elif start_idx is not None and line.strip().startswith("conn "):
                end_idx = i
                break

        if start_idx is None:
            print("\033[91m'conn wireguard_server4' section not found\033[0m")
            return

        if end_idx is None:
            end_idx = len(content)

        section = content[start_idx:end_idx]

        ip_type = (
            "ipv6"
            if isinstance(ipaddress.ip_address(new_private_ip), ipaddress.IPv6Address)
            else "ipv4"
        )

        if ip_type == "ipv6":
            subnet = "/64"
        else:
            subnet = "/32"

        ip_parts = (
            new_private_ip.split(".")
            if ip_type == "ipv4"
            else new_private_ip.split(":")
        )
        if new_private_ip.endswith(".2") or new_private_ip.endswith(":2"):
            ip_parts[-1] = "1"
        else:
            ip_parts[-1] = "2"
        counterpart_ip = ".".join(ip_parts) if ip_type == "ipv4" else ":".join(ip_parts)

        new_section = []
        for line in section:
            line = re.sub(
                r"leftsubnet=\S+", f"leftsubnet={new_private_ip}{subnet}", line
            )
            line = re.sub(r"leftid=\S+", f"leftid={new_private_ip}", line)
            line = re.sub(r"right=\S+", f"right={counterpart_ip}", line)
            line = re.sub(
                r"rightsubnet=\S+", f"rightsubnet={counterpart_ip}{subnet}", line
            )
            new_section.append(line)

        new_content = content[:start_idx] + new_section + content[end_idx:]

        with open(name, "w") as f:
            f.writelines(new_content)

        print(f"\033[92m'conn wireguard_server4' section updated successfully\033[0m")
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def wireguardedit_kharejconfig_4sec():
    config_path = "/etc/wireguard/wireserver4.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfigsec(config_path)
    )

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCould not retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips)

        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[93mWireguard + IPSEC Edit local\033[97m Kharej Server Config\033[92m [4]\033[93m Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("\033[93mThis is Kharej Server - \033[97mConfig [4]\033[0m")
        print("1.\033[92m Change \033[97mPrivate IP\033[92m Address\033[0m")
        print("2.\033[94m Change Tunnel Port\033[0m")
        print("3.\033[93m Change IRAN Client [4] \033[96m(Endpoint IP)\033[0m")
        print("4.\033[94m Change IPsec Secret Key\033[0m")
        print("5.\033[92m Save and Exit\033[0m")
        print("0. back to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice: ")

        if choice == "1":
            new_ip = input(
                "\033[93mEnter\033[92m New Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguardsec(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguardsec(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wireguard4(opposite_ip)
                update_ipsec_conf_wireguard_server4("/etc/ipsec1.conf", new_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "2":
            listen_port, endpoint = update_tunnel_port(listen_port, endpoint)
            update_ufw_ruleswireguard(
                address_no_subnet, address_no_subnet, listen_port, listen_port
            )
        elif choice == "3":
            endpoint = update_endpoint_ip4(endpoint)
        elif choice == "4":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secret Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")
        elif choice == "5":
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "Endpoint": endpoint,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfigsec4(config_path, new_config)
            update_ipsec_ip_multi4(new_ip)
            return
        elif choice == "0":
            wireguardedit_noconjuction_kharej1_5iransec()
        else:
            print("\033[91mPlease select a valid option.\033[0m")


def update_ipsec_conf_wireguard_server5(name, new_private_ip):
    try:
        with open(name, "r") as f:
            content = f.readlines()

        start_idx, end_idx = None, None
        for i, line in enumerate(content):
            if line.strip() == "conn wireguard_server5":
                start_idx = i
            elif start_idx is not None and line.strip().startswith("conn "):
                end_idx = i
                break

        if start_idx is None:
            print("\033[91m'conn wireguard_server5' section not found\033[0m")
            return

        if end_idx is None:
            end_idx = len(content)

        section = content[start_idx:end_idx]

        ip_type = (
            "ipv6"
            if isinstance(ipaddress.ip_address(new_private_ip), ipaddress.IPv6Address)
            else "ipv4"
        )

        if ip_type == "ipv6":
            subnet = "/64"
        else:
            subnet = "/32"

        ip_parts = (
            new_private_ip.split(".")
            if ip_type == "ipv4"
            else new_private_ip.split(":")
        )
        if new_private_ip.endswith(".2") or new_private_ip.endswith(":2"):
            ip_parts[-1] = "1"
        else:
            ip_parts[-1] = "2"
        counterpart_ip = ".".join(ip_parts) if ip_type == "ipv4" else ":".join(ip_parts)

        new_section = []
        for line in section:
            line = re.sub(
                r"leftsubnet=\S+", f"leftsubnet={new_private_ip}{subnet}", line
            )
            line = re.sub(r"leftid=\S+", f"leftid={new_private_ip}", line)
            line = re.sub(r"right=\S+", f"right={counterpart_ip}", line)
            line = re.sub(
                r"rightsubnet=\S+", f"rightsubnet={counterpart_ip}{subnet}", line
            )
            new_section.append(line)

        new_content = content[:start_idx] + new_section + content[end_idx:]

        with open(name, "w") as f:
            f.writelines(new_content)

        print(f"\033[92m'conn wireguard_server5' section updated successfully\033[0m")
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def wireguardedit_kharejconfig_5sec():
    config_path = "/etc/wireguard/wireserver5.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfigsec(config_path)
    )

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCould not retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips)

        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[93mWireguard + IPSEC Edit local\033[97m Kharej Server Config\033[92m [5]\033[93m Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("\033[93mThis is Kharej Server - \033[97mConfig [5]\033[0m")
        print("1.\033[92m Change \033[97mPrivate IP\033[92m Address\033[0m")
        print("2.\033[94m Change Tunnel Port\033[0m")
        print("3.\033[93m Change IRAN Client [5] \033[96m(Endpoint IP)\033[0m")
        print("4.\033[94m Change IPsec Secret Key\033[0m")
        print("5.\033[92m Save and Exit\033[0m")
        print("0. back to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice: ")

        if choice == "1":
            new_ip = input(
                "\033[93mEnter\033[92m New Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguardsec(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguardsec(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wireguard5(opposite_ip)
                update_ipsec_conf_wireguard_server5("/etc/ipsec1.conf", new_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "2":
            listen_port, endpoint = update_tunnel_port(listen_port, endpoint)
            update_ufw_ruleswireguard(
                address_no_subnet, address_no_subnet, listen_port, listen_port
            )
        elif choice == "3":
            endpoint = update_endpoint_ip5(endpoint)
        elif choice == "4":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secret Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")
        elif choice == "5":
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "Endpoint": endpoint,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfigsec5(config_path, new_config)
            update_ipsec_ip_multi5(new_ip)
            return
        elif choice == "0":
            wireguardedit_noconjuction_kharej1_5iransec()
        else:
            print("\033[91mPlease select a valid option.\033[0m")


def save_wireguardconfigsec_client(file_path, new_config):
    try:
        with open(file_path, "r") as f:
            config = f.read()

        listen_port_pattern = r"ListenPort\s*=\s*\d+"
        endpoint_pattern = r"Endpoint\s*=\s*([^\s]+):\d+"
        address_pattern = r"Address\s*=\s*[^\s]+"
        allowed_ips_pattern = r"AllowedIPs\s*=\s*[^\s]+"

        new_config_content = re.sub(
            listen_port_pattern, f'ListenPort = {new_config["ListenPort"]}', config
        )
        new_config_content = re.sub(
            address_pattern, f'Address = {new_config["Address"]}', new_config_content
        )
        new_config_content = re.sub(
            allowed_ips_pattern,
            f'AllowedIPs = {new_config["AllowedIPs"]}',
            new_config_content,
        )

        def replace_endpoint_port(match):
            endpoint_ip = match.group(1)
            return f'Endpoint = {endpoint_ip}:{new_config["ListenPort"]}'

        new_config_content = re.sub(
            endpoint_pattern, replace_endpoint_port, new_config_content
        )

        with open(file_path, "w") as f:
            f.write(new_config_content)

        subprocess.run(["systemctl", "daemon-reload"], check=True)

        services_to_restart = [
            "strong-azumi1",
            "wireguardping.service",
        ]

        wg_quick_interface = "/etc/wireguard/wireclient.conf"
        wg_quick_down = subprocess.run(
            ["wg-quick", "down", wg_quick_interface],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
        )

        if wg_quick_down.returncode == 0:
            subprocess.run(["wg-quick", "up", wg_quick_interface], check=True)
            display_checkmark(
                f"\033[92mInterface {wg_quick_interface} brought down and up successfully!\033[0m"
            )
        else:
            print(
                f"\033[93mFailed to bring down interface {wg_quick_interface}.\033[0m"
            )

        for service_name in services_to_restart:
            service_status = subprocess.run(
                ["systemctl", "is-active", service_name],
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
            )

            if service_status.returncode == 0:
                subprocess.run(["systemctl", "restart", service_name], check=True)
                display_checkmark(
                    f"\033[92mService {service_name} restarted successfully!\033[0m"
                )
            else:
                print(
                    f"\033[93mService {service_name} doesn't exist or is inactive.\033[0m"
                )

        display_checkmark(f"\033[92mConfiguration updated successfully!\033[0m")

    except FileNotFoundError:
        print(f"\033[91mfile {file_path} not found.\033[0m")
    except subprocess.CalledProcessError as e:
        print(f"\033[91merror in managing services: {e}\033[0m")
    except Exception as e:
        print(f"\033[91merror in saving the config: {e}\033[0m")


def update_ipsec_conf_wireguard_46(name, new_private_ip):
    try:
        with open(name, "r") as f:
            content = f.read()

        ip_obj = ipaddress.ip_address(new_private_ip)
        if isinstance(ip_obj, ipaddress.IPv6Address):
            ip_parts = new_private_ip.split(":")
            subnet_suffix = "/64"
        else:
            ip_parts = new_private_ip.split(".")
            subnet_suffix = "/32"

        ip_parts[-1] = "1" if ip_parts[-1].endswith("2") else "2"
        counterpart_ip = (
            ":".join(ip_parts)
            if isinstance(ip_obj, ipaddress.IPv6Address)
            else ".".join(ip_parts)
        )

        new_content = re.sub(
            r"leftsubnet=\S+", f"leftsubnet={new_private_ip}{subnet_suffix}", content
        )
        new_content = re.sub(r"leftid=\S+", f"leftid={new_private_ip}", new_content)
        new_content = re.sub(r"right=\S+", f"right={counterpart_ip}", new_content)
        new_content = re.sub(
            r"rightsubnet=\S+",
            f"rightsubnet={counterpart_ip}{subnet_suffix}",
            new_content,
        )

        with open(name, "w") as f:
            f.write(new_content)

        print("\033[92mIPsec configuration updated successfully!\033[0m")

    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mOut of ordinary error: {e}\033[0m")


def wireguardudp_iran_client1sec():
    config_path = "/etc/wireguard/wireclient.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfigsec(config_path)
    )

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCould not retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips)

        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[93mWireguard + IPSEC Edit local\033[97m IRAN Client\033[92m [1]\033[93m Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("\033[93mThis is IRAN Client - \033[97m[1]\033[0m")
        print("1.\033[92m Change \033[97mPrivate IP\033[92m Address\033[0m")
        print("2.\033[94m Change Tunnel Port\033[0m")
        print("3.\033[93m Change \033[92mKharej Server IP\033[96m (Endpoint IP)\033[0m")
        print("4.\033[94m Change IPsec Secret Key\033[0m")
        print("5.\033[92m Save and Exit\033[0m")
        print("0. back to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice: ")

        if choice == "1":
            new_ip = input(
                "\033[93mEnter\033[92m New Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguardsec(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguardsec(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wireguard_client(opposite_ip)
                update_ipsec_conf_wireguard_46("/etc/ipsec1.conf", new_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "2":
            listen_port, endpoint = update_tunnel_port(listen_port, endpoint)
            update_ufw_ruleswireguard(
                address_no_subnet, address_no_subnet, listen_port, listen_port
            )
        elif choice == "3":
            endpoint = update_endpoint_ip_server(endpoint)
        elif choice == "4":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secret Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")
        elif choice == "5":
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "Endpoint": endpoint,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfigsec_client(config_path, new_config)
            update_ipsec_ip(new_ip)
            return
        elif choice == "0":
            wireguardedit_noconjuction_kharej1_5iran()
        else:
            print("\033[91mPlease select a valid option.\033[0m")


def wireguardudp_iran_client2sec():
    config_path = "/etc/wireguard/wireclient.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfigsec(config_path)
    )

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCould not retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips)

        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[93mWireguard + IPSEC Edit local\033[97m IRAN Client\033[92m [2]\033[93m Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("\033[93mThis is IRAN Client - \033[97m[2]\033[0m")
        print("1.\033[92m Change \033[97mPrivate IP\033[92m Address\033[0m")
        print("2.\033[94m Change Tunnel Port\033[0m")
        print("3.\033[93m Change \033[92mKharej Server IP\033[96m (Endpoint IP)\033[0m")
        print("4.\033[94m Change IPsec Secret Key\033[0m")
        print("5.\033[92m Save and Exit\033[0m")
        print("0. back to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice: ")

        if choice == "1":
            new_ip = input(
                "\033[93mEnter\033[92m New Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguardsec(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguardsec(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wireguard_client(opposite_ip)
                update_ipsec_conf_wireguard_46("/etc/ipsec1.conf", new_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "2":
            listen_port, endpoint = update_tunnel_port(listen_port, endpoint)
            update_ufw_ruleswireguard(
                address_no_subnet, address_no_subnet, listen_port, listen_port
            )
        elif choice == "3":
            endpoint = update_endpoint_ip_server(endpoint)
        elif choice == "4":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secret Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")
        elif choice == "5":
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "Endpoint": endpoint,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfigsec_client(config_path, new_config)
            update_ipsec_ip(new_ip)
            return
        elif choice == "0":
            wireguardedit_noconjuction_kharej1_5iran()
        else:
            print("\033[91mPlease select a valid option.\033[0m")


def wireguardudp_iran_client3sec():
    config_path = "/etc/wireguard/wireclient.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfigsec(config_path)
    )

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCould not retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips)

        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[93mWireguard + IPSEC Edit local\033[97m IRAN Client\033[92m [3]\033[93m Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("\033[93mThis is IRAN Client - \033[97m[3]\033[0m")
        print("1.\033[92m Change \033[97mPrivate IP\033[92m Address\033[0m")
        print("2.\033[94m Change Tunnel Port\033[0m")
        print("3.\033[93m Change \033[92mKharej Server IP\033[96m (Endpoint IP)\033[0m")
        print("4.\033[94m Change IPsec Secret Key\033[0m")
        print("5.\033[92m Save and Exit\033[0m")
        print("0. back to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice: ")

        if choice == "1":
            new_ip = input(
                "\033[93mEnter\033[92m New Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguardsec(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguardsec(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wireguard_client(opposite_ip)
                update_ipsec_conf_wireguard_46("/etc/ipsec1.conf", new_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "2":
            listen_port, endpoint = update_tunnel_port(listen_port, endpoint)
            update_ufw_ruleswireguard(
                address_no_subnet, address_no_subnet, listen_port, listen_port
            )
        elif choice == "3":
            endpoint = update_endpoint_ip_server(endpoint)
        elif choice == "4":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secret Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")
        elif choice == "5":
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "Endpoint": endpoint,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfigsec_client(config_path, new_config)
            update_ipsec_ip(new_ip)
            return
        elif choice == "0":
            wireguardedit_noconjuction_kharej1_5iran()
        else:
            print("\033[91mPlease select a valid option.\033[0m")


def wireguardudp_iran_client4sec():
    config_path = "/etc/wireguard/wireclient.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfigsec(config_path)
    )

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCould not retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips)

        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[93mWireguard + IPSEC Edit local\033[97m IRAN Client\033[92m [4]\033[93m Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("\033[93mThis is IRAN Client - \033[97m[4]\033[0m")
        print("1.\033[92m Change \033[97mPrivate IP\033[92m Address\033[0m")
        print("2.\033[94m Change Tunnel Port\033[0m")
        print("3.\033[93m Change \033[92mKharej Server IP\033[96m (Endpoint IP)\033[0m")
        print("4.\033[94m Change IPsec Secret Key\033[0m")
        print("5.\033[92m Save and Exit\033[0m")
        print("0. back to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice: ")

        if choice == "1":
            new_ip = input(
                "\033[93mEnter\033[92m New Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguardsec(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguardsec(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wireguard_client(opposite_ip)
                update_ipsec_conf_wireguard_46("/etc/ipsec1.conf", new_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "2":
            listen_port, endpoint = update_tunnel_port(listen_port, endpoint)
            update_ufw_ruleswireguard(
                address_no_subnet, address_no_subnet, listen_port, listen_port
            )
        elif choice == "3":
            endpoint = update_endpoint_ip_server(endpoint)
        elif choice == "4":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secret Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")
        elif choice == "5":
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "Endpoint": endpoint,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfigsec_client(config_path, new_config)
            update_ipsec_ip(new_ip)
            return
        elif choice == "0":
            wireguardedit_noconjuction_kharej1_5iran()
        else:
            print("\033[91mPlease select a valid option.\033[0m")


def wireguardudp_iran_client5sec():
    config_path = "/etc/wireguard/wireclient.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfigsec(config_path)
    )

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCould not retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips)

        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[93mWireguard + IPSEC Edit local\033[97m IRAN Client\033[92m [5]\033[93m Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("\033[93mThis is IRAN Client - \033[97m[5]\033[0m")
        print("1.\033[92m Change \033[97mPrivate IP\033[92m Address\033[0m")
        print("2.\033[94m Change Tunnel Port\033[0m")
        print("3.\033[93m Change \033[92mKharej Server IP\033[96m (Endpoint IP)\033[0m")
        print("4.\033[94m Change IPsec Secret Key\033[0m")
        print("5.\033[92m Save and Exit\033[0m")
        print("0. back to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice: ")

        if choice == "1":
            new_ip = input(
                "\033[93mEnter\033[92m New Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguardsec(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguardsec(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wireguard_client(opposite_ip)
                update_ipsec_conf_wireguard_46("/etc/ipsec1.conf", new_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "2":
            listen_port, endpoint = update_tunnel_port(listen_port, endpoint)
            update_ufw_ruleswireguard(
                address_no_subnet, address_no_subnet, listen_port, listen_port
            )
        elif choice == "3":
            endpoint = update_endpoint_ip_server(endpoint)
        elif choice == "4":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secret Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")
        elif choice == "5":
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "Endpoint": endpoint,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfigsec_client(config_path, new_config)
            update_ipsec_ip(new_ip)
            return
        elif choice == "0":
            wireguardedit_noconjuction_kharej1_5iran()
        else:
            print("\033[91mPlease select a valid option.\033[0m")


def wireguardedit_iranconfig_1sec():
    config_path = "/etc/wireguard/wireserver1.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfigsec(config_path)
    )

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCould not retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips)

        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[93mWireguard + IPSEC Edit local\033[97m IRAN Server Config\033[92m [1]\033[93m Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("\033[93mThis is IRAN Server - \033[97mConfig [1]\033[0m")
        print("1.\033[92m Change \033[97mPrivate IP\033[92m Address\033[0m")
        print("2.\033[94m Change Tunnel Port\033[0m")
        print(
            "3.\033[93m Change \033[92mKharej Client [1] \033[96m(Endpoint IP)\033[0m"
        )
        print("4.\033[94m Change IPsec Secret Key\033[0m")
        print("5.\033[92m Save and Exit\033[0m")
        print("0. back to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice: ")

        if choice == "1":
            new_ip = input(
                "\033[93mEnter\033[92m New Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguardsec(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguardsec(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wireguard1(opposite_ip)
                update_ipsec_conf_wireguard_server1("/etc/ipsec1.conf", new_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "2":
            listen_port, endpoint = update_tunnel_port(listen_port, endpoint)
            update_ufw_ruleswireguard(
                address_no_subnet, address_no_subnet, listen_port, listen_port
            )
        elif choice == "3":
            endpoint = update_endpoint_ir_ip1(endpoint)
        elif choice == "4":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secret Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")
        elif choice == "5":
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "Endpoint": endpoint,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfigsec1(config_path, new_config)
            update_ipsec_ip_multi(address_no_subnet)
            return
        elif choice == "0":
            wireguardedit_noconjuction_1iran_5kharejsec()
        else:
            print("\033[91mPlease select a valid option.\033[0m")


def wireguardedit_iranconfig_2sec():
    config_path = "/etc/wireguard/wireserver2.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfigsec(config_path)
    )

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCould not retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips)

        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[93mWireguard + IPSEC Edit local\033[97m IRAN Server Config\033[92m [2]\033[93m Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("\033[93mThis is IRAN Server - \033[97mConfig [2]\033[0m")
        print("1.\033[92m Change \033[97mPrivate IP\033[92m Address\033[0m")
        print("2.\033[94m Change Tunnel Port\033[0m")
        print(
            "3.\033[93m Change \033[92mKharej Client [2] \033[96m(Endpoint IP)\033[0m"
        )
        print("4.\033[94m Change IPsec Secret Key\033[0m")
        print("5.\033[92m Save and Exit\033[0m")
        print("0. back to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice: ")

        if choice == "1":
            new_ip = input(
                "\033[93mEnter\033[92m New Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguardsec(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguardsec(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wireguard2(opposite_ip)
                update_ipsec_conf_wireguard_server2("/etc/ipsec1.conf", new_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "2":
            listen_port, endpoint = update_tunnel_port(listen_port, endpoint)
            update_ufw_ruleswireguard(
                address_no_subnet, address_no_subnet, listen_port, listen_port
            )
        elif choice == "3":
            endpoint = update_endpoint_ir_ip2(endpoint)
        elif choice == "4":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secret Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")
        elif choice == "5":
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "Endpoint": endpoint,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfigsec2(config_path, new_config)
            update_ipsec_ip_multi2(new_ip)
            return
        elif choice == "0":
            wireguardedit_noconjuction_1iran_5kharejsec()
        else:
            print("\033[91mPlease select a valid option.\033[0m")


def wireguardedit_iranconfig_3sec():
    config_path = "/etc/wireguard/wireserver3.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfigsec(config_path)
    )

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCould not retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips)

        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[93mWireguard + IPSEC Edit local\033[97m IRAN Server Config\033[92m [3]\033[93m Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("\033[93mThis is IRAN Server - \033[97mConfig [3]\033[0m")
        print("1.\033[92m Change \033[97mPrivate IP\033[92m Address\033[0m")
        print("2.\033[94m Change Tunnel Port\033[0m")
        print(
            "3.\033[93m Change \033[92mKharej Client [3] \033[96m(Endpoint IP)\033[0m"
        )
        print("4.\033[94m Change IPsec Secret Key\033[0m")
        print("5.\033[92m Save and Exit\033[0m")
        print("0. back to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice: ")

        if choice == "1":
            new_ip = input(
                "\033[93mEnter\033[92m New Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguardsec(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguardsec(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wireguard3(opposite_ip)
                update_ipsec_conf_wireguard_server3("/etc/ipsec1.conf", new_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "2":
            listen_port, endpoint = update_tunnel_port(listen_port, endpoint)
            update_ufw_ruleswireguard(
                address_no_subnet, address_no_subnet, listen_port, listen_port
            )
        elif choice == "3":
            endpoint = update_endpoint_ir_ip3(endpoint)
        elif choice == "4":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secret Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")
        elif choice == "5":
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "Endpoint": endpoint,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfigsec3(config_path, new_config)
            update_ipsec_ip_multi3(new_ip)
            return
        elif choice == "0":
            wireguardedit_noconjuction_1iran_5kharejsec()
        else:
            print("\033[91mPlease select a valid option.\033[0m")


def wireguardedit_iranconfig_4sec():
    config_path = "/etc/wireguard/wireserver4.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfigsec(config_path)
    )

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCould not retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips)

        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[93mWireguard + IPSEC Edit local\033[97m IRAN Server Config\033[92m [4]\033[93m Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("\033[93mThis is IRAN Server - \033[97mConfig [4]\033[0m")
        print("1.\033[92m Change \033[97mPrivate IP\033[92m Address\033[0m")
        print("2.\033[94m Change Tunnel Port\033[0m")
        print(
            "3.\033[93m Change \033[92mKharej Client [4] \033[96m(Endpoint IP)\033[0m"
        )
        print("4.\033[94m Change IPsec Secret Key\033[0m")
        print("5.\033[92m Save and Exit\033[0m")
        print("0. back to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice: ")

        if choice == "1":
            new_ip = input(
                "\033[93mEnter\033[92m New Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguardsec(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguardsec(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wireguard4(opposite_ip)
                update_ipsec_conf_wireguard_server4("/etc/ipsec1.conf", new_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "2":
            listen_port, endpoint = update_tunnel_port(listen_port, endpoint)
            update_ufw_ruleswireguard(
                address_no_subnet, address_no_subnet, listen_port, listen_port
            )
        elif choice == "3":
            endpoint = update_endpoint_ir_ip4(endpoint)
        elif choice == "4":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secret Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")
        elif choice == "5":
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "Endpoint": endpoint,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfigsec4(config_path, new_config)
            update_ipsec_ip_multi4(new_ip)
            return
        elif choice == "0":
            wireguardedit_noconjuction_1iran_5kharejsec()
        else:
            print("\033[91mPlease select a valid option.\033[0m")


def wireguardedit_iranconfig_5sec():
    config_path = "/etc/wireguard/wireserver5.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfigsec(config_path)
    )

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCould not retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips)

        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[93mWireguard + IPSEC Edit local\033[97m IRAN Server Config\033[92m [5]\033[93m Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("\033[93mThis is IRAN Server - \033[97mConfig [5]\033[0m")
        print("1.\033[92m Change \033[97mPrivate IP\033[92m Address\033[0m")
        print("2.\033[94m Change Tunnel Port\033[0m")
        print(
            "3.\033[93m Change \033[92mKharej Client [5] \033[96m(Endpoint IP)\033[0m"
        )
        print("4.\033[94m Change IPsec Secret Key\033[0m")
        print("5.\033[92m Save and Exit\033[0m")
        print("0. back to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice: ")

        if choice == "1":
            new_ip = input(
                "\033[93mEnter\033[92m New Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguardsec(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguardsec(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wireguard5(opposite_ip)
                update_ipsec_conf_wireguard_server5("/etc/ipsec1.conf", new_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "2":
            listen_port, endpoint = update_tunnel_port(listen_port, endpoint)
            update_ufw_ruleswireguard(
                address_no_subnet, address_no_subnet, listen_port, listen_port
            )
        elif choice == "3":
            endpoint = update_endpoint_ir_ip5(endpoint)
        elif choice == "4":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secret Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")
        elif choice == "5":
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "Endpoint": endpoint,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfigsec5(config_path, new_config)
            update_ipsec_ip_multi5(new_ip)
            return
        elif choice == "0":
            wireguardedit_noconjuction_1iran_5kharejsec()
        else:
            print("\033[91mPlease select a valid option.\033[0m")


def wireguardudp_kharej_client1sec():
    config_path = "/etc/wireguard/wireclient.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfigsec(config_path)
    )

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCould not retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips)

        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[93mWireguard + IPSEC Edit local\033[97m Kharej Client\033[92m [1]\033[93m Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("\033[93mThis is Kharej Client - \033[97m[1]\033[0m")
        print("1.\033[92m Change \033[97mPrivate IP\033[92m Address\033[0m")
        print("2.\033[94m Change Tunnel Port\033[0m")
        print("3.\033[93m Change \033[92mIRAN Server IP \033[96m(Endpoint IP)\033[0m")
        print("4.\033[94m Change IPsec Secret Key\033[0m")
        print("5.\033[92m Save and Exit\033[0m")
        print("0. back to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice: ")

        if choice == "1":
            new_ip = input(
                "\033[93mEnter\033[92m New Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguardsec(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguardsec(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wireguard_client(opposite_ip)
                update_ipsec_conf_wireguard_46("/etc/ipsec1.conf", new_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "2":
            listen_port, endpoint = update_tunnel_port(listen_port, endpoint)
            update_ufw_ruleswireguard(
                address_no_subnet, address_no_subnet, listen_port, listen_port
            )
        elif choice == "3":
            endpoint = update_endpoint_ir_server(endpoint)
        elif choice == "4":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secret Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")
        elif choice == "5":
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "Endpoint": endpoint,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfigsec_client(config_path, new_config)
            update_ipsec_ip(new_ip)
            return
        elif choice == "0":
            wireguardedit_noconjuction_1iran_5kharej()
        else:
            print("\033[91mPlease select a valid option.\033[0m")


def wireguardudp_kharej_client2sec():
    config_path = "/etc/wireguard/wireclient.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfigsec(config_path)
    )

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCould not retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips)

        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[93mWireguard + IPSEC Edit local\033[97m Kharej Client\033[92m [2]\033[93m Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("\033[93mThis is Kharej Client - \033[97m[2]\033[0m")
        print("1.\033[92m Change \033[97mPrivate IP\033[92m Address\033[0m")
        print("2.\033[94m Change Tunnel Port\033[0m")
        print("3.\033[93m Change \033[92mIRAN Server IP \033[96m(Endpoint IP)\033[0m")
        print("4.\033[94m Change IPsec Secret Key\033[0m")
        print("5.\033[92m Save and Exit\033[0m")
        print("0. back to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice: ")

        if choice == "1":
            new_ip = input(
                "\033[93mEnter\033[92m New Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguardsec(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguardsec(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wireguard_client(opposite_ip)
                update_ipsec_conf_wireguard_46("/etc/ipsec1.conf", new_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "2":
            listen_port, endpoint = update_tunnel_port(listen_port, endpoint)
            update_ufw_ruleswireguard(
                address_no_subnet, address_no_subnet, listen_port, listen_port
            )
        elif choice == "3":
            endpoint = update_endpoint_ir_server(endpoint)
        elif choice == "4":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secret Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")
        elif choice == "5":
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "Endpoint": endpoint,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfigsec_client(config_path, new_config)
            update_ipsec_ip(new_ip)
            return
        elif choice == "0":
            wireguardedit_noconjuction_1iran_5kharej()
        else:
            print("\033[91mPlease select a valid option.\033[0m")


def wireguardudp_kharej_client3sec():
    config_path = "/etc/wireguard/wireclient.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfigsec(config_path)
    )

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCould not retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips)

        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[93mWireguard + IPSEC Edit local\033[97m Kharej Client\033[92m [3]\033[93m Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("\033[93mThis is Kharej Client - \033[97m[3]\033[0m")
        print("1.\033[92m Change \033[97mPrivate IP\033[92m Address\033[0m")
        print("2.\033[94m Change Tunnel Port\033[0m")
        print("3.\033[93m Change \033[92mIRAN Server IP \033[96m(Endpoint IP)\033[0m")
        print("4.\033[94m Change IPsec Secret Key\033[0m")
        print("5.\033[92m Save and Exit\033[0m")
        print("0. back to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice: ")

        if choice == "1":
            new_ip = input(
                "\033[93mEnter\033[92m New Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguardsec(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguardsec(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wireguard_client(opposite_ip)
                update_ipsec_conf_wireguard_46("/etc/ipsec1.conf", new_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "2":
            listen_port, endpoint = update_tunnel_port(listen_port, endpoint)
            update_ufw_ruleswireguard(
                address_no_subnet, address_no_subnet, listen_port, listen_port
            )
        elif choice == "3":
            endpoint = update_endpoint_ir_server(endpoint)
        elif choice == "4":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secret Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")
        elif choice == "5":
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "Endpoint": endpoint,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfigsec_client(config_path, new_config)
            update_ipsec_ip(new_ip)
            return
        elif choice == "0":
            wireguardedit_noconjuction_1iran_5kharej()
        else:
            print("\033[91mPlease select a valid option.\033[0m")


def wireguardudp_kharej_client4sec():
    config_path = "/etc/wireguard/wireclient.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfigsec(config_path)
    )

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCould not retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips)

        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[93mWireguard + IPSEC Edit local\033[97m Kharej Client\033[92m [4]\033[93m Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("\033[93mThis is Kharej Client - \033[97m[4]\033[0m")
        print("1.\033[92m Change \033[97mPrivate IP\033[92m Address\033[0m")
        print("2.\033[94m Change Tunnel Port\033[0m")
        print("3.\033[93m Change \033[92mIRAN Server IP \033[96m(Endpoint IP)\033[0m")
        print("4.\033[94m Change IPsec Secret Key\033[0m")
        print("5.\033[92m Save and Exit\033[0m")
        print("0. back to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice: ")

        if choice == "1":
            new_ip = input(
                "\033[93mEnter\033[92m New Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguardsec(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguardsec(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wireguard_client(opposite_ip)
                update_ipsec_conf_wireguard_46("/etc/ipsec1.conf", new_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "2":
            listen_port, endpoint = update_tunnel_port(listen_port, endpoint)
            update_ufw_ruleswireguard(
                address_no_subnet, address_no_subnet, listen_port, listen_port
            )
        elif choice == "3":
            endpoint = update_endpoint_ir_server(endpoint)
        elif choice == "4":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secret Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")
        elif choice == "5":
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "Endpoint": endpoint,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfigsec_client(config_path, new_config)
            update_ipsec_ip(new_ip)
            return
        elif choice == "0":
            wireguardedit_noconjuction_1iran_5kharej()
        else:
            print("\033[91mPlease select a valid option.\033[0m")


def wireguardudp_kharej_client5sec():
    config_path = "/etc/wireguard/wireclient.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfigsec(config_path)
    )

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCould not retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips)

        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[93mWireguard + IPSEC Edit local\033[97m Kharej Client\033[92m [5]\033[93m Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("\033[93mThis is Kharej Client - \033[97m[5]\033[0m")
        print("1.\033[92m Change \033[97mPrivate IP\033[92m Address\033[0m")
        print("2.\033[94m Change Tunnel Port\033[0m")
        print("3.\033[93m Change \033[92mIRAN Server IP \033[96m(Endpoint IP)\033[0m")
        print("4.\033[94m Change IPsec Secret Key\033[0m")
        print("5.\033[92m Save and Exit\033[0m")
        print("0. back to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice: ")

        if choice == "1":
            new_ip = input(
                "\033[93mEnter\033[92m New Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguardsec(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguardsec(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wireguard_client(opposite_ip)
                update_ipsec_conf_wireguard_46("/etc/ipsec1.conf", new_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "2":
            listen_port, endpoint = update_tunnel_port(listen_port, endpoint)
            update_ufw_ruleswireguard(
                address_no_subnet, address_no_subnet, listen_port, listen_port
            )
        elif choice == "3":
            endpoint = update_endpoint_ir_server(endpoint)
        elif choice == "4":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secret Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")
        elif choice == "5":
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "Endpoint": endpoint,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfigsec_client(config_path, new_config)
            update_ipsec_ip(new_ip)
            return
        elif choice == "0":
            wireguardedit_noconjuction_1iran_5kharej()
        else:
            print("\033[91mPlease select a valid option.\033[0m")


# wire + gre6tap


def private_native(name):
    try:
        with open(name, "r") as f:
            content = f.read()
        match = re.search(r"ip -6 addr add (\S+)/64 dev azumi?", content)
        if match:
            return match.group(1)
        else:
            print("\033[91mno private IP found\033[0m")
    except FileNotFoundError:
        print("\033[91mPrivate file not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")
    return None


def get_current_native_ipsgretap61():
    private_ip_gre6 = private_gre61("/etc/gre61.sh")
    return {
        "gre6": private_ip_gre6,
    }


def get_current_native_ipsgretap62():
    private_ip_gre6 = private_gre61("/etc/gre62.sh")
    return {
        "gre6": private_ip_gre6,
    }


def get_current_native_ipsgretap63():
    private_ip_gre6 = private_gre6tap("/etc/gre63.sh")
    return {
        "gre6": private_ip_gre6,
    }


def get_current_native_ipsgretap64():
    private_ip_gre6 = private_gre6tap("/etc/gre64.sh")
    return {
        "gre6": private_ip_gre6,
    }


def get_current_native_ipsgretap65():
    private_ip_gre6 = private_gre6tap("/etc/gre65.sh")
    return {
        "gre6": private_ip_gre6,
    }


def update_pingfile_sit(name, new_ip):
    try:
        with open(name, "r") as f:
            content = f.read()

        new_content = re.sub(r'ip_address="[^"]+"', f'ip_address="{new_ip}"', content)

        with open(name, "w") as f:
            f.write(new_content)
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def update_ipfile_gre6_wire1(name, new_ip, update_type):
    try:
        with open(name, "r") as f:
            content = f.read()

        if update_type == "private":
            new_content = re.sub(
                r"ip (-6 )?addr add [^ ]+/64 dev azumi?",
                f"ip -6 addr add {new_ip}/64 dev azumi",
                content,
            )
            ip_parts = new_ip.split(":")
            if new_ip.endswith(":2"):
                ip_parts[-1] = "1"
            else:
                ip_parts[-1] = "2"
            counterpart_ip = ":".join(ip_parts)
            new_content = re.sub(
                r"ip (-6 )?route add [^ ]+/64 dev azumi?",
                f"ip -6 route add {counterpart_ip}/64 dev azumi",
                new_content,
            )
            update_ipfile_gre6_wire1("/etc/gre61.sh", new_ip, update_type="gre6_local")
            update_ipfile_gre6_wire1(
                "/etc/gre61.sh", counterpart_ip, update_type="gre6_remote"
            )
        elif update_type == "local":
            new_content = re.sub(r"local \S+", f"local {new_ip}", content)
        elif update_type == "remote":
            new_content = re.sub(r"remote \S+", f"remote {new_ip}", content)
        elif update_type == "gre6_local":
            new_content = re.sub(r"local \S+", f"local {new_ip}", content)
        elif update_type == "gre6_remote":
            new_content = re.sub(r"remote \S+", f"remote {new_ip}", content)
        elif update_type == "ipsec":
            new_content = re.sub(r"leftsubnet=\S+", f"leftsubnet={new_ip}/64", content)
            new_content = re.sub(r"leftid=\S+", f"leftid={new_ip}", new_content)

            ip_parts = new_ip.split(":")
            if new_ip.endswith(":1"):
                ip_parts[-1] = "2"
            else:
                ip_parts[-1] = "1"
            counterpart_ip = ":".join(ip_parts)
            new_content = re.sub(r"right=\S+", f"right={counterpart_ip}", new_content)
            new_content = re.sub(
                r"rightsubnet=\S+", f"rightsubnet={counterpart_ip}/64", new_content
            )

        with open(name, "w") as f:
            f.write(new_content)
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def update_ipfile_gre6_wire2(name, new_ip, update_type):
    try:
        with open(name, "r") as f:
            content = f.read()

        if update_type == "private":
            new_content = re.sub(
                r"ip (-6 )?addr add [^ ]+/64 dev azumi?",
                f"ip -6 addr add {new_ip}/64 dev azumi",
                content,
            )
            ip_parts = new_ip.split(":")
            if new_ip.endswith(":2"):
                ip_parts[-1] = "1"
            else:
                ip_parts[-1] = "2"
            counterpart_ip = ":".join(ip_parts)
            new_content = re.sub(
                r"ip (-6 )?route add [^ ]+/64 dev azumi?",
                f"ip -6 route add {counterpart_ip}/64 dev azumi",
                new_content,
            )
            update_ipfile_gre6_wire2("/etc/gre62.sh", new_ip, update_type="gre6_local")
            update_ipfile_gre6_wire2(
                "/etc/gre62.sh", counterpart_ip, update_type="gre6_remote"
            )
        elif update_type == "local":
            new_content = re.sub(r"local \S+", f"local {new_ip}", content)
        elif update_type == "remote":
            new_content = re.sub(r"remote \S+", f"remote {new_ip}", content)
        elif update_type == "gre6_local":
            new_content = re.sub(r"local \S+", f"local {new_ip}", content)
        elif update_type == "gre6_remote":
            new_content = re.sub(r"remote \S+", f"remote {new_ip}", content)
        elif update_type == "ipsec":
            new_content = re.sub(r"leftsubnet=\S+", f"leftsubnet={new_ip}/64", content)
            new_content = re.sub(r"leftid=\S+", f"leftid={new_ip}", new_content)

            ip_parts = new_ip.split(":")
            if new_ip.endswith(":1"):
                ip_parts[-1] = "2"
            else:
                ip_parts[-1] = "1"
            counterpart_ip = ":".join(ip_parts)
            new_content = re.sub(r"right=\S+", f"right={counterpart_ip}", new_content)
            new_content = re.sub(
                r"rightsubnet=\S+", f"rightsubnet={counterpart_ip}/64", new_content
            )

        with open(name, "w") as f:
            f.write(new_content)
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def update_ipfile_gre6_wire3(name, new_ip, update_type):
    try:
        with open(name, "r") as f:
            content = f.read()

        if update_type == "private":
            new_content = re.sub(
                r"ip (-6 )?addr add [^ ]+/64 dev azumi?",
                f"ip -6 addr add {new_ip}/64 dev azumi",
                content,
            )
            ip_parts = new_ip.split(":")
            if new_ip.endswith(":2"):
                ip_parts[-1] = "1"
            else:
                ip_parts[-1] = "2"
            counterpart_ip = ":".join(ip_parts)
            new_content = re.sub(
                r"ip (-6 )?route add [^ ]+/64 dev azumi?",
                f"ip -6 route add {counterpart_ip}/64 dev azumi",
                new_content,
            )
            update_ipfile_gre6_wire3("/etc/gre63.sh", new_ip, update_type="gre6_local")
            update_ipfile_gre6_wire3(
                "/etc/gre63.sh", counterpart_ip, update_type="gre6_remote"
            )
        elif update_type == "local":
            new_content = re.sub(r"local \S+", f"local {new_ip}", content)
        elif update_type == "remote":
            new_content = re.sub(r"remote \S+", f"remote {new_ip}", content)
        elif update_type == "gre6_local":
            new_content = re.sub(r"local \S+", f"local {new_ip}", content)
        elif update_type == "gre6_remote":
            new_content = re.sub(r"remote \S+", f"remote {new_ip}", content)
        elif update_type == "ipsec":
            new_content = re.sub(r"leftsubnet=\S+", f"leftsubnet={new_ip}/64", content)
            new_content = re.sub(r"leftid=\S+", f"leftid={new_ip}", new_content)

            ip_parts = new_ip.split(":")
            if new_ip.endswith(":1"):
                ip_parts[-1] = "2"
            else:
                ip_parts[-1] = "1"
            counterpart_ip = ":".join(ip_parts)
            new_content = re.sub(r"right=\S+", f"right={counterpart_ip}", new_content)
            new_content = re.sub(
                r"rightsubnet=\S+", f"rightsubnet={counterpart_ip}/64", new_content
            )

        with open(name, "w") as f:
            f.write(new_content)
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def update_ipfile_gre6_wire4(name, new_ip, update_type):
    try:
        with open(name, "r") as f:
            content = f.read()

        if update_type == "private":
            new_content = re.sub(
                r"ip (-6 )?addr add [^ ]+/64 dev azumi?",
                f"ip -6 addr add {new_ip}/64 dev azumi",
                content,
            )
            ip_parts = new_ip.split(":")
            if new_ip.endswith(":2"):
                ip_parts[-1] = "1"
            else:
                ip_parts[-1] = "2"
            counterpart_ip = ":".join(ip_parts)
            new_content = re.sub(
                r"ip (-6 )?route add [^ ]+/64 dev azumi?",
                f"ip -6 route add {counterpart_ip}/64 dev azumi",
                new_content,
            )
            update_ipfile_gre6_wire4("/etc/gre64.sh", new_ip, update_type="gre6_local")
            update_ipfile_gre6_wire4(
                "/etc/gre64.sh", counterpart_ip, update_type="gre6_remote"
            )
        elif update_type == "local":
            new_content = re.sub(r"local \S+", f"local {new_ip}", content)
        elif update_type == "remote":
            new_content = re.sub(r"remote \S+", f"remote {new_ip}", content)
        elif update_type == "gre6_local":
            new_content = re.sub(r"local \S+", f"local {new_ip}", content)
        elif update_type == "gre6_remote":
            new_content = re.sub(r"remote \S+", f"remote {new_ip}", content)
        elif update_type == "ipsec":
            new_content = re.sub(r"leftsubnet=\S+", f"leftsubnet={new_ip}/64", content)
            new_content = re.sub(r"leftid=\S+", f"leftid={new_ip}", new_content)

            ip_parts = new_ip.split(":")
            if new_ip.endswith(":1"):
                ip_parts[-1] = "2"
            else:
                ip_parts[-1] = "1"
            counterpart_ip = ":".join(ip_parts)
            new_content = re.sub(r"right=\S+", f"right={counterpart_ip}", new_content)
            new_content = re.sub(
                r"rightsubnet=\S+", f"rightsubnet={counterpart_ip}/64", new_content
            )

        with open(name, "w") as f:
            f.write(new_content)
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def update_ipfile_gre6_wire5(name, new_ip, update_type):
    try:
        with open(name, "r") as f:
            content = f.read()

        if update_type == "private":
            new_content = re.sub(
                r"ip (-6 )?addr add [^ ]+/64 dev azumi?",
                f"ip -6 addr add {new_ip}/64 dev azumi",
                content,
            )
            ip_parts = new_ip.split(":")
            if new_ip.endswith(":2"):
                ip_parts[-1] = "1"
            else:
                ip_parts[-1] = "2"
            counterpart_ip = ":".join(ip_parts)
            new_content = re.sub(
                r"ip (-6 )?route add [^ ]+/64 dev azumi?",
                f"ip -6 route add {counterpart_ip}/64 dev azumi",
                new_content,
            )
            update_ipfile_gre6_wire5("/etc/gre65.sh", new_ip, update_type="gre6_local")
            update_ipfile_gre6_wire5(
                "/etc/gre65.sh", counterpart_ip, update_type="gre6_remote"
            )
        elif update_type == "local":
            new_content = re.sub(r"local \S+", f"local {new_ip}", content)
        elif update_type == "remote":
            new_content = re.sub(r"remote \S+", f"remote {new_ip}", content)
        elif update_type == "gre6_local":
            new_content = re.sub(r"local \S+", f"local {new_ip}", content)
        elif update_type == "gre6_remote":
            new_content = re.sub(r"remote \S+", f"remote {new_ip}", content)
        elif update_type == "ipsec":
            new_content = re.sub(r"leftsubnet=\S+", f"leftsubnet={new_ip}/64", content)
            new_content = re.sub(r"leftid=\S+", f"leftid={new_ip}", new_content)

            ip_parts = new_ip.split(":")
            if new_ip.endswith(":1"):
                ip_parts[-1] = "2"
            else:
                ip_parts[-1] = "1"
            counterpart_ip = ":".join(ip_parts)
            new_content = re.sub(r"right=\S+", f"right={counterpart_ip}", new_content)
            new_content = re.sub(
                r"rightsubnet=\S+", f"rightsubnet={counterpart_ip}/64", new_content
            )

        with open(name, "w") as f:
            f.write(new_content)
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def add_ufw_rules(ip, port=None):
    counterpart_ip = wtb_opposite_ip_sitwire(ip)
    try:
        if port:
            subprocess.run(
                ["sudo", "ufw", "allow", "from", ip, "to", "any", "port", port],
                check=True,
            )
            subprocess.run(
                [
                    "sudo",
                    "ufw",
                    "allow",
                    "from",
                    counterpart_ip,
                    "to",
                    "any",
                    "port",
                    port,
                ],
                check=True,
            )
        else:
            subprocess.run(["sudo", "ufw", "allow", "from", ip], check=True)
            subprocess.run(["sudo", "ufw", "allow", "from", counterpart_ip], check=True)
    except subprocess.CalledProcessError as e:
        print(f"\033[91merror adding UFW rules: {e}\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def wtb_opposite_ip_sitwire(ip):
    if ":" in ip:  # IPv6
        ip_parts = ip.split(":")
        ip_parts[-1] = "1" if ip_parts[-1] == "2" else "2"
        return ":".join(ip_parts)
    else:  # IPv4
        ip_parts = ip.split(".")
        ip_parts[-1] = "1" if ip_parts[-1] == "2" else "2"
        return ".".join(ip_parts)


def save_stuff_gretap61(private_ip, local_ip, remote_ip, is_gre6):
    current_ips = get_current_native_ipsgretap61()
    current_ip = current_ips["gre6"] if is_gre6 else current_ips["private"]

    if current_ip:
        delete_ufw_rules(current_ip)

    add_ufw_rules(private_ip)

    counterpart_ip = wtb_opposite_ip_sitwire(private_ip)
    try:
        if is_gre6:
            update_pingfile_sit("/etc/ping_ip1.sh", counterpart_ip)
            update_ipfile_gre6_wire1("/etc/gre61.sh", private_ip, update_type="private")
            update_ipfile_gre6_wire1("/etc/gre61.sh", remote_ip, update_type="remote")
        else:
            update_pingfile_sit("/etc/ping_v61.sh", counterpart_ip)
            update_ipfile_gre6_wire1(
                "/etc/private1.sh", private_ip, update_type="private"
            )
            update_ipfile_gre6_wire1("/etc/private1.sh", local_ip, update_type="local")
            update_ipfile_gre6_wire1(
                "/etc/private1.sh", remote_ip, update_type="remote"
            )

        interface = "azumig61" if is_gre6 else "azumi1"
        subprocess.run(["ip", "link", "set", "dev", interface, "down"], check=True)
        subprocess.run(["ip", "link", "delete", interface], check=True)
    except subprocess.CalledProcessError as e:
        print(f"\033[91merror bringing interface down or deleting it: {e}\033[0m")

    try:
        script = "/etc/gre61.sh" if is_gre6 else "/etc/private1.sh"
        result = subprocess.run(["/bin/bash", script], capture_output=True, text=True)
        if "RTNETLINK answers: File exists" in result.stderr:
            print("\033[91madditional ip already exists. Ignoring this error\033[0m")
        else:
            result.check_returncode()
        display_checkmark(
            f"\033[92mChanges saved and {interface} interface updated successfully!\033[0m"
        )
        subprocess.run(["sudo", "systemctl", "daemon-reload"], check=True)
        subprocess.run(["sudo", "systemctl", "restart", "ping_ip1"], check=True)

        # display_checkmark("\033[92mSystem services reloaded and restarted successfully!\033[0m")
    except subprocess.CalledProcessError as e:
        print(
            f"\033[91merror applying network changes: {e.stderr.strip() if e.stderr else str(e)}\033[0m"
        )
    except FileNotFoundError:
        print(f"\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def save_stuff_gretap62(private_ip, local_ip, remote_ip, is_gre6):
    current_ips = get_current_native_ipsgretap62()
    current_ip = current_ips["gre6"] if is_gre6 else current_ips["private"]

    if current_ip:
        delete_ufw_rules(current_ip)

    add_ufw_rules(private_ip)

    counterpart_ip = wtb_opposite_ip_sitwire(private_ip)
    try:
        if is_gre6:
            update_pingfile_sit("/etc/ping_ip2.sh", counterpart_ip)
            update_ipfile_gre6_wire2("/etc/gre62.sh", private_ip, update_type="private")
            update_ipfile_gre6_wire2("/etc/gre62.sh", remote_ip, update_type="remote")
        else:
            update_pingfile_sit("/etc/ping_v62.sh", counterpart_ip)
            update_ipfile_gre6_wire2(
                "/etc/private2.sh", private_ip, update_type="private"
            )
            update_ipfile_gre6_wire2("/etc/private2.sh", local_ip, update_type="local")
            update_ipfile_gre6_wire2(
                "/etc/private2.sh", remote_ip, update_type="remote"
            )

        interface = "azumig62" if is_gre6 else "azumi2"
        subprocess.run(["ip", "link", "set", "dev", interface, "down"], check=True)
        subprocess.run(["ip", "link", "delete", interface], check=True)
    except subprocess.CalledProcessError as e:
        print(f"\033[91merror bringing interface down or deleting it: {e}\033[0m")

    try:
        script = "/etc/gre62.sh" if is_gre6 else "/etc/private2.sh"
        result = subprocess.run(["/bin/bash", script], capture_output=True, text=True)
        if "RTNETLINK answers: File exists" in result.stderr:
            print("\033[91madditional ip already exists. Ignoring this error\033[0m")
        else:
            result.check_returncode()
        display_checkmark(
            f"\033[92mChanges saved and {interface} interface updated successfully!\033[0m"
        )
        subprocess.run(["sudo", "systemctl", "daemon-reload"], check=True)
        subprocess.run(["sudo", "systemctl", "restart", "ping_ip2"], check=True)

        # display_checkmark("\033[92mSystem services reloaded and restarted successfully!\033[0m")
    except subprocess.CalledProcessError as e:
        print(
            f"\033[91merror applying network changes: {e.stderr.strip() if e.stderr else str(e)}\033[0m"
        )
    except FileNotFoundError:
        print(f"\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def save_stuff_gretap63(private_ip, local_ip, remote_ip, is_gre6):
    current_ips = get_current_native_ipsgretap63()
    current_ip = current_ips["gre6"] if is_gre6 else current_ips["private"]

    if current_ip:
        delete_ufw_rules(current_ip)

    add_ufw_rules(private_ip)

    counterpart_ip = wtb_opposite_ip_sitwire(private_ip)
    try:
        if is_gre6:
            update_pingfile_sit("/etc/ping_ip3.sh", counterpart_ip)
            update_ipfile_gre6_wire3("/etc/gre63.sh", private_ip, update_type="private")
            update_ipfile_gre6_wire3("/etc/gre63.sh", remote_ip, update_type="remote")
        else:
            update_pingfile_sit("/etc/ping_v63.sh", counterpart_ip)
            update_ipfile_gre6_wire3(
                "/etc/private3.sh", private_ip, update_type="private"
            )
            update_ipfile_gre6_wire3("/etc/private3.sh", local_ip, update_type="local")
            update_ipfile_gre6_wire3(
                "/etc/private3.sh", remote_ip, update_type="remote"
            )

        interface = "azumig63" if is_gre6 else "azumi3"
        subprocess.run(["ip", "link", "set", "dev", interface, "down"], check=True)
        subprocess.run(["ip", "link", "delete", interface], check=True)
    except subprocess.CalledProcessError as e:
        print(f"\033[91merror bringing interface down or deleting it: {e}\033[0m")

    try:
        script = "/etc/gre63.sh" if is_gre6 else "/etc/private3.sh"
        result = subprocess.run(["/bin/bash", script], capture_output=True, text=True)
        if "RTNETLINK answers: File exists" in result.stderr:
            print("\033[91madditional ip already exists. Ignoring this error\033[0m")
        else:
            result.check_returncode()
        display_checkmark(
            f"\033[92mChanges saved and {interface} interface updated successfully!\033[0m"
        )
        subprocess.run(["sudo", "systemctl", "daemon-reload"], check=True)
        subprocess.run(["sudo", "systemctl", "restart", "ping_ip3"], check=True)

        # display_checkmark("\033[92mSystem services reloaded and restarted successfully!\033[0m")
    except subprocess.CalledProcessError as e:
        print(
            f"\033[91merror applying network changes: {e.stderr.strip() if e.stderr else str(e)}\033[0m"
        )
    except FileNotFoundError:
        print(f"\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def save_stuff_gretap64(private_ip, local_ip, remote_ip, is_gre6):
    current_ips = get_current_native_ipsgretap64()
    current_ip = current_ips["gre6"] if is_gre6 else current_ips["private"]

    if current_ip:
        delete_ufw_rules(current_ip)

    add_ufw_rules(private_ip)

    counterpart_ip = wtb_opposite_ip_sitwire(private_ip)
    try:
        if is_gre6:
            update_pingfile_sit("/etc/ping_ip4.sh", counterpart_ip)
            update_ipfile_gre6_wire4("/etc/gre64.sh", private_ip, update_type="private")
            update_ipfile_gre6_wire4("/etc/gre64.sh", remote_ip, update_type="remote")
        else:
            update_pingfile_sit("/etc/ping_v64.sh", counterpart_ip)
            update_ipfile_gre6_wire4(
                "/etc/private4.sh", private_ip, update_type="private"
            )
            update_ipfile_gre6_wire4("/etc/private4.sh", local_ip, update_type="local")
            update_ipfile_gre6_wire4(
                "/etc/private4.sh", remote_ip, update_type="remote"
            )

        interface = "azumig64" if is_gre6 else "azumi4"
        subprocess.run(["ip", "link", "set", "dev", interface, "down"], check=True)
        subprocess.run(["ip", "link", "delete", interface], check=True)
    except subprocess.CalledProcessError as e:
        print(f"\033[91merror bringing interface down or deleting it: {e}\033[0m")

    try:
        script = "/etc/gre64.sh" if is_gre6 else "/etc/private4.sh"
        result = subprocess.run(["/bin/bash", script], capture_output=True, text=True)
        if "RTNETLINK answers: File exists" in result.stderr:
            print("\033[91madditional ip already exists. Ignoring this error\033[0m")
        else:
            result.check_returncode()
        display_checkmark(
            f"\033[92mChanges saved and {interface} interface updated successfully!\033[0m"
        )
        subprocess.run(["sudo", "systemctl", "daemon-reload"], check=True)
        subprocess.run(["sudo", "systemctl", "restart", "ping_ip4"], check=True)

        # display_checkmark("\033[92mSystem services reloaded and restarted successfully!\033[0m")
    except subprocess.CalledProcessError as e:
        print(
            f"\033[91merror applying network changes: {e.stderr.strip() if e.stderr else str(e)}\033[0m"
        )
    except FileNotFoundError:
        print(f"\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def save_stuff_gretap65(private_ip, local_ip, remote_ip, is_gre6):
    current_ips = get_current_native_ipsgretap65()
    current_ip = current_ips["gre6"] if is_gre6 else current_ips["private"]

    if current_ip:
        delete_ufw_rules(current_ip)

    add_ufw_rules(private_ip)

    counterpart_ip = wtb_opposite_ip_sitwire(private_ip)
    try:
        if is_gre6:
            update_pingfile_sit("/etc/ping_ip5.sh", counterpart_ip)
            update_ipfile_gre6_wire5("/etc/gre65.sh", private_ip, update_type="private")
            update_ipfile_gre6_wire5("/etc/gre65.sh", remote_ip, update_type="remote")
        else:
            update_pingfile_sit("/etc/ping_v65.sh", counterpart_ip)
            update_ipfile_gre6_wire5(
                "/etc/private5.sh", private_ip, update_type="private"
            )
            update_ipfile_gre6_wire5("/etc/private5.sh", local_ip, update_type="local")
            update_ipfile_gre6_wire5(
                "/etc/private5.sh", remote_ip, update_type="remote"
            )

        interface = "azumig65" if is_gre6 else "azumi5"
        subprocess.run(["ip", "link", "set", "dev", interface, "down"], check=True)
        subprocess.run(["ip", "link", "delete", interface], check=True)
    except subprocess.CalledProcessError as e:
        print(f"\033[91merror bringing interface down or deleting it: {e}\033[0m")

    try:
        script = "/etc/gre65.sh" if is_gre6 else "/etc/private5.sh"
        result = subprocess.run(["/bin/bash", script], capture_output=True, text=True)
        if "RTNETLINK answers: File exists" in result.stderr:
            print("\033[91madditional ip already exists. Ignoring this error\033[0m")
        else:
            result.check_returncode()
        display_checkmark(
            f"\033[92mChanges saved and {interface} interface updated successfully!\033[0m"
        )
        subprocess.run(["sudo", "systemctl", "daemon-reload"], check=True)
        subprocess.run(["sudo", "systemctl", "restart", "ping_ip5"], check=True)

        # display_checkmark("\033[92mSystem services reloaded and restarted successfully!\033[0m")
    except subprocess.CalledProcessError as e:
        print(
            f"\033[91merror applying network changes: {e.stderr.strip() if e.stderr else str(e)}\033[0m"
        )
    except FileNotFoundError:
        print(f"\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def private_gre6tap(name):
    try:
        with open(name, "r") as f:
            content = f.read()
        match = re.search(r"ip -6 addr add (\S+)/64 dev azumig6?", content)
        if match:
            return match.group(1)
        else:
            print("\033[91mNo private IP found\033[0m")
    except FileNotFoundError:
        print("\033[91mPrivate file not found\033[0m")
    except Exception as e:
        print(f"\033[91mOut of ordinary error: {e}\033[0m")
    return None


def display_stuff_gre6tapn(local_ip, remote_ip, private_ip):
    lines = [
        f"\033[93mTitle:         GRE6TAP Configuration\033[0m",
        f"\033[97m──────────────────────────────────────\033[0m",
        f"\033[92mLocal IP:        \033[97m{local_ip}\033[0m",
        f"\033[92mKharej IPV6:     \033[97m{remote_ip}\033[0m",
        f"\033[93mPrivate IP:      \033[97m{private_ip}\033[0m",
    ]
    box_width = 50

    print("\033[93m╭" + "─" * (box_width - 2) + "╮\033[0m")

    for line in lines:
        print(f"\033[93m {line:<{box_width - 4}} \033[0m")

    print("\033[93m╰" + "─" * (box_width - 2) + "╯\033[0m")


def local_ip(name):
    try:
        with open(name, "r") as f:
            content = f.read()
        match = re.search(r"local (\S+)", content)
        if match:
            return match.group(1)
        else:
            print(f"\033[91mno local IP found\033[0m")
    except FileNotFoundError:
        print(f"file {name} doesn't exist")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")
    return None


def remote_ip(name):
    try:
        with open(name, "r") as f:
            content = f.read()
        match = re.search(r"remote (\S+)", content)
        if match:
            return match.group(1)
        else:
            print("\033[91mno remote IP found \033[0m")
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")
    return None


def wireguardgre6tapeditserver_mnu():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print("\033[92m(   ) \033[92mEdit local\033[93m Wireguard + GRE6TAP Menu\033[0m")
    print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[92mNo IPSEC\033[0m")
    print("2. \033[93mWith IPSEC\033[0m")
    print("3. \033[94mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        choice = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if choice == "1":
            wireguardgre6tap_nosec_edit_local()
            break
        elif choice == "2":
            wireguardgre6tap_sec_edit_local()
            break
        elif choice == "3":
            clear()
            wireguard_edit_server()
            break
        else:
            print("Invalid choice.")


def wireguardgre6tap_nosec_edit_local():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print("\033[92m(   ) \033[93mWireguard + GRE6TAP\033[93m Edit Menu\033[0m")
    print(
        '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
    )
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[92mWireguard + GRE6TAP - [1]Kharej Server [5]IRAN Clients\033[0m")
    print("2. \033[93mWireguard + GRE6TAP - [1]IRAN   Server [5]Kharej Clients\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    print("0.\033[97mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")
    while True:
        server_type = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if server_type == "1":
            wireguard_gre6tap_noconjuction_kharej1_5iran()
            break
        elif server_type == "2":
            wireguard_gre6tap_noconjuction_1iran_5kharej()
            break
        elif server_type == "0":
            os.system("clear")
            wireguardgre6tapeditserver_mnu()
            break
        else:
            print("Invalid choice.")


def wireguard_gre6tap_noconjuction_1iran_5kharej():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print(
        "\033[92m(   ) \033[93mWireguard + GRE6TAP \033[92m[1]IRAN Server\033[96m [5]Kharej Client\033[93m Edit Menu\033[0m"
    )
    print(
        '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
    )
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[92mKharej Client [1] Config\033[0m")
    print("2. \033[92mKharej Client [2] Config\033[0m")
    print("3. \033[92mKharej Client [3] Config\033[0m")
    print("4. \033[93mKharej Client [4] Config\033[0m")
    print("5. \033[92mKharej Client [5] Config\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    print("6. \033[96mIRAN Server Config\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    print("0.\033[97mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")
    while True:
        server_type = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if server_type == "1":
            wireguardafter_gre6tapn_kharej_client1()
            break
        elif server_type == "2":
            wireguardafter_gre6tapn_kharej_client2()
            break
        elif server_type == "3":
            wireguardafter_gre6tapn_kharej_client3()
            break
        elif server_type == "4":
            wireguardafter_gre6tapn_kharej_client4()
            break
        elif server_type == "5":
            wireguardafter_gre6tapn_kharej_client5()
            break
        elif server_type == "6":
            wireguardafter_gre6tapn_iran_server()
            break
        elif server_type == "0":
            os.system("clear")
            wireguardgre6tap_nosec_edit_local()
            break
        else:
            print("Invalid choice.")


def wireguardafter_gre6tapn_iran_server():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print(
        "\033[92m(   ) \033[93mWireguard + GRE6TAP \033[92m[1]IRAN Server\033[96m [5]Kharej Client\033[93m Edit Menu\033[0m"
    )
    print(
        '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
    )
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[92mIRAN Server Config [1] \033[0m")
    print("2. \033[92mIRAN Server Config [2]\033[0m")
    print("3. \033[93mIRAN Server Config [3]\033[0m")
    print("4. \033[92mIRAN Server Config [4]\033[0m")
    print("5. \033[92mIRAN Server Config [5]\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    print("0.\033[97mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")
    while True:
        server_type = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if server_type == "1":
            wireguardafter_gre6tapn_iranconfig_1()
            break
        elif server_type == "2":
            wireguardafter_gre6tapn_iranconfig_2()
            break
        elif server_type == "3":
            wireguardafter_gre6tapn_iranconfig_3()
            break
        elif server_type == "4":
            wireguardafter_gre6tapn_iranconfig_4()
            break
        elif server_type == "5":
            wireguardafter_gre6tapn_iranconfig_5()
            break
        elif server_type == "0":
            os.system("clear")
            wireguard_gre6tap_noconjuction_1iran_5kharej()
            break
        else:
            print("Invalid choice.")


def wireguard_gre6tap_noconjuction_kharej1_5iran():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print(
        "\033[92m(   ) \033[93mWireguard + GRE6TAP \033[92m[1]Kharej Server\033[96m [5]IRAN Client\033[93m Edit Menu\033[0m"
    )
    print(
        '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
    )
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[92mIRAN Client [1] Config\033[0m")
    print("2. \033[92mIRAN Client [2] Config\033[0m")
    print("3. \033[92mIRAN Client [3] Config\033[0m")
    print("4. \033[93mIRAN Client [4] Config\033[0m")
    print("5. \033[92mIRAN Client [5] Config\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    print("6. \033[96mKharej Server Config\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    print("0.\033[97mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")
    while True:
        server_type = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if server_type == "1":
            wireguardafter_gre6tapn_iran_client1()
            break
        elif server_type == "2":
            wireguardafter_gre6tapn_iran_client2()
            break
        elif server_type == "3":
            wireguardafter_gre6tapn_iran_client3()
            break
        elif server_type == "4":
            wireguardafter_gre6tapn_iran_client4()
            break
        elif server_type == "5":
            wireguardafter_gre6tapn_iran_client5()
            break
        elif server_type == "6":
            wireguardafter_gre6tapn_kharej_server()
            break
        elif server_type == "0":
            os.system("clear")
            wireguardgre6tap_nosec_edit_local()
            break
        else:
            print("Invalid choice.")


def wireguardafter_gre6tapn_kharej_server():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print(
        "\033[92m(   ) \033[93mWireguard + GRE6TAP IPSEC \033[92m[1]Kharej Server\033[96m [5]IRAN Client\033[93m Edit Menu\033[0m"
    )
    print(
        '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
    )
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[92mKharej Server Config [1] \033[0m")
    print("2. \033[92mKharej Server Config [2]\033[0m")
    print("3. \033[93mKharej Server Config [3]\033[0m")
    print("4. \033[92mKharej Server Config [4]\033[0m")
    print("5. \033[92mKharej Server Config [5]\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    print("0.\033[97mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")
    while True:
        server_type = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if server_type == "1":
            wireguardafter_gre6tapn_kharejconfig_1()
            break
        elif server_type == "2":
            wireguardafter_gre6tapn_kharejconfig_2()
            break
        elif server_type == "3":
            wireguardafter_gre6tapn_kharejconfig_3()
            break
        elif server_type == "4":
            wireguardafter_gre6tapn_kharejconfig_4()
            break
        elif server_type == "5":
            wireguardafter_gre6tapn_kharejconfig_5()
            break
        elif server_type == "0":
            os.system("clear")
            wireguard_gre6tap_noconjuction_kharej1_5iran()
            break
        else:
            print("Invalid choice.")


# gre6tap ipsec menu


def wireguardgre6tap_sec_edit_local():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print("\033[92m(   ) \033[93mWireguard + GRE6TAP + IPSEC\033[93m Edit Menu\033[0m")
    print(
        '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
    )
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[92mWireguard + GRE6TAP - [1]Kharej Server [5]IRAN Clients\033[0m")
    print("2. \033[93mWireguard + GRE6TAP - [1]IRAN   Server [5]Kharej Clients\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    print("0.\033[97mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")
    while True:
        server_type = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if server_type == "1":
            wireguard_gre6tapsec_noconjuction_kharej1_5iran()
            break
        elif server_type == "2":
            wireguard_gre6tapsec_noconjuction_1iran_5kharej()
            break
        elif server_type == "0":
            os.system("clear")
            wireguardgre6tapeditserver_mnu()
            break
        else:
            print("Invalid choice.")


def wireguard_gre6tapsec_noconjuction_1iran_5kharej():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print(
        "\033[92m(   ) \033[93mWireguard + GRE6TAP IPSEC \033[92m[1]IRAN Server\033[96m [5]Kharej Client\033[93m Edit Menu\033[0m"
    )
    print(
        '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
    )
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[92mKharej Client [1] Config\033[0m")
    print("2. \033[92mKharej Client [2] Config\033[0m")
    print("3. \033[92mKharej Client [3] Config\033[0m")
    print("4. \033[93mKharej Client [4] Config\033[0m")
    print("5. \033[92mKharej Client [5] Config\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    print("6. \033[96mIRAN Server Config\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    print("0.\033[97mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")
    while True:
        server_type = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if server_type == "1":
            wireguardafter_gre6tapnsec_kharej_client1()
            break
        elif server_type == "2":
            wireguardafter_gre6tapnsec_kharej_client2()
            break
        elif server_type == "3":
            wireguardafter_gre6tapnsec_kharej_client3()
            break
        elif server_type == "4":
            wireguardafter_gre6tapnsec_kharej_client4()
            break
        elif server_type == "5":
            wireguardafter_gre6tapnsec_kharej_client5()
            break
        elif server_type == "6":
            wireguardafter_gre6tapnsec_iran_server()
            break
        elif server_type == "0":
            os.system("clear")
            wireguardgre6tap_sec_edit_local()
            break
        else:
            print("Invalid choice.")


def wireguardafter_gre6tapnsec_iran_server():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print(
        "\033[92m(   ) \033[93mWireguard + GRE6TAP IPSEC \033[92m[1]IRAN Server\033[96m [5]Kharej Client\033[93m Edit Menu\033[0m"
    )
    print(
        '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
    )
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[92mIRAN Server Config [1] \033[0m")
    print("2. \033[92mIRAN Server Config [2]\033[0m")
    print("3. \033[93mIRAN Server Config [3]\033[0m")
    print("4. \033[92mIRAN Server Config [4]\033[0m")
    print("5. \033[92mIRAN Server Config [5]\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    print("0.\033[97mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")
    while True:
        server_type = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if server_type == "1":
            wireguardafter_gre6tapnsec_iranconfig_1()
            break
        elif server_type == "2":
            wireguardafter_gre6tapnsec_iranconfig_2()
            break
        elif server_type == "3":
            wireguardafter_gre6tapnsec_iranconfig_3()
            break
        elif server_type == "4":
            wireguardafter_gre6tapnsec_iranconfig_4()
            break
        elif server_type == "5":
            wireguardafter_gre6tapnsec_iranconfig_5()
            break
        elif server_type == "0":
            os.system("clear")
            wireguard_gre6tapsec_noconjuction_1iran_5kharej()
            break
        else:
            print("Invalid choice.")


def wireguard_gre6tapsec_noconjuction_kharej1_5iran():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print(
        "\033[92m(   ) \033[93mWireguard + GRE6TAP IPSEC \033[92m[1]Kharej Server\033[96m [5]IRAN Client\033[93m Edit Menu\033[0m"
    )
    print(
        '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
    )
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[92mIRAN Client [1] Config\033[0m")
    print("2. \033[92mIRAN Client [2] Config\033[0m")
    print("3. \033[92mIRAN Client [3] Config\033[0m")
    print("4. \033[93mIRAN Client [4] Config\033[0m")
    print("5. \033[92mIRAN Client [5] Config\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    print("6. \033[96mKharej Server Config\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    print("0.\033[97mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")
    while True:
        server_type = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if server_type == "1":
            wireguardafter_gre6tapnsec_iran_client1()
            break
        elif server_type == "2":
            wireguardafter_gre6tapnsec_iran_client2()
            break
        elif server_type == "3":
            wireguardafter_gre6tapnsec_iran_client3()
            break
        elif server_type == "4":
            wireguardafter_gre6tapnsec_iran_client4()
            break
        elif server_type == "5":
            wireguardafter_gre6tapnsec_iran_client5()
            break
        elif server_type == "6":
            wireguardafter_gre6tapnsec_kharej_server()
            break
        elif server_type == "0":
            os.system("clear")
            wireguardgre6tap_sec_edit_local()
            break
        else:
            print("Invalid choice.")


def wireguardafter_gre6tapnsec_kharej_server():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print(
        "\033[92m(   ) \033[93mWireguard + GRE6TAP IPSEC \033[92m[1]Kharej Server\033[96m [5]IRAN Client\033[93m Edit Menu\033[0m"
    )
    print(
        '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
    )
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[92mKharej Server Config [1] \033[0m")
    print("2. \033[92mKharej Server Config [2]\033[0m")
    print("3. \033[93mKharej Server Config [3]\033[0m")
    print("4. \033[92mKharej Server Config [4]\033[0m")
    print("5. \033[92mKharej Server Config [5]\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    print("0.\033[97mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")
    while True:
        server_type = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if server_type == "1":
            wireguardafter_gre6tapnsec_kharejconfig_1()
            break
        elif server_type == "2":
            wireguardafter_gre6tapnsec_kharejconfig_2()
            break
        elif server_type == "3":
            wireguardafter_gre6tapnsec_kharejconfig_3()
            break
        elif server_type == "4":
            wireguardafter_gre6tapnsec_kharejconfig_4()
            break
        elif server_type == "5":
            wireguardafter_gre6tapnsec_kharejconfig_5()
            break
        elif server_type == "0":
            os.system("clear")
            wireguard_gre6tapsec_noconjuction_kharej1_5iran()
            break
        else:
            print("Invalid choice.")


def wireguardafter_gre6tapn_kharejconfig_1():
    wireguard_config_path = "/etc/wireguard/wireserver1.conf"
    gre6_path = "/etc/gre61.sh"
    new_gre6_private_ip = None

    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig(wireguard_config_path)
    )

    local_ip_gre6 = local_ip(gre6_path)
    remote_ip_gre6 = remote_ip(gre6_path)
    private_ip_gre6 = private_gre6tap(gre6_path)

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCould not retrieve the WireGuard configuration.\033[0m")
        return

    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("Could not retrieve the GRE6TAP IP addresses from gre6 file.")
        return

    while True:
        os.system("clear")
        display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips)
        display_stuff_gre6tapn(local_ip_gre6, remote_ip_gre6, private_ip_gre6)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[93mWireGuard & GRE6TAP\033[97m Kharej Server Config\033[92m [1]\033[93m Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print(" \033[93mThis is Kharej Server \033[97mConfig [1]\033[0m")
        print("1. \033[93mChange \033[97mWireGuard Private IP Address\033[0m")
        print("2. \033[93mChange \033[97mGRE6TAP\033[93m Private IP Address\033[0m")
        print("3. \033[93mChange \033[92mTunnel Port\033[0m")
        print(
            "4.\033[93m Change \033[92mIRAN Client [1] IP \033[96m(Endpoint IP)\033[0m"
        )
        print("5. \033[92mSave and Exit\033[0m")
        print("0. Back to the previous menu")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice: ")

        if choice == "1":
            new_ip = input("\033[93mEnter New WireGuard Private IP Address : \033[0m")
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                local_ip_gre6 = new_ip
                remote_ip_gre6 = wtb_opposite_ip_wireguard(new_ip)
                allowed_ips = (
                    f"{remote_ip_gre6}/128" if ":" in new_ip else f"{remote_ip_gre6}/32"
                )

                update_gre6tap_ips(
                    gre6_path, new_local_ip=new_ip, new_remote_ip=remote_ip_gre6
                )
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec1(remote_ip_gre6)

            else:
                print("\033[91mInvalid IP Address!\033[0m")

        elif choice == "2":
            new_gre6_private_ip = input(
                "\033[93mEnter New GRE6TAP Private IP Address : \033[0m"
            )
            if new_gre6_private_ip:
                private_ip_gre6 = new_gre6_private_ip
                update_gre6tap_ips(gre6_path, new_private_ip=private_ip_gre6)
            else:
                print("\033[91mInvalid GRE6TAP Private IP Address!\033[0m")

        elif choice == "3":
            listen_port, endpoint = update_tunnel_port(listen_port, endpoint)
            update_ufw_ruleswireguard(
                address_no_subnet, address_no_subnet, listen_port, listen_port
            )
        elif choice == "4":
            endpoint = update_endpoint_ip1(endpoint)

        elif choice == "5":
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "Endpoint": endpoint,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig1(wireguard_config_path, new_config)

            save_stuff_gretap61(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            break

        elif choice == "0":
            wireguard_gre6tap_noconjuction_kharej1_5iran()
            break

        else:
            print("\033[91mPlease select a valid option.\033[0m")


def wireguardafter_gre6tapn_kharejconfig_2():
    wireguard_config_path = "/etc/wireguard/wireserver2.conf"
    gre6_path = "/etc/gre62.sh"
    new_gre6_private_ip = None

    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig(wireguard_config_path)
    )

    local_ip_gre6 = local_ip(gre6_path)
    remote_ip_gre6 = remote_ip(gre6_path)
    private_ip_gre6 = private_gre6tap(gre6_path)

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCould not retrieve the WireGuard configuration.\033[0m")
        return

    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("Could not retrieve the GRE6TAP IP addresses from gre6 file.")
        return

    while True:
        os.system("clear")
        display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips)
        display_stuff_gre6tapn(local_ip_gre6, remote_ip_gre6, private_ip_gre6)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[93mWireGuard & GRE6TAP\033[97m Kharej Server Config\033[92m [2]\033[93m Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print(" \033[93mThis is Kharej Server \033[97mConfig [2]\033[0m")
        print("1. \033[93mChange \033[97mWireGuard Private IP Address\033[0m")
        print("2. \033[93mChange \033[97mGRE6TAP\033[93m Private IP Address\033[0m")
        print("3. \033[93mChange \033[92mTunnel Port\033[0m")
        print(
            "4.\033[93m Change \033[92mIRAN Client [2] IP \033[96m(Endpoint IP)\033[0m"
        )
        print("5. \033[92mSave and Exit\033[0m")
        print("0. Back to the previous menu")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice: ")

        if choice == "1":
            new_ip = input("\033[93mEnter New WireGuard Private IP Address : \033[0m")
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                local_ip_gre6 = new_ip
                remote_ip_gre6 = wtb_opposite_ip_wireguard(new_ip)
                allowed_ips = (
                    f"{remote_ip_gre6}/128" if ":" in new_ip else f"{remote_ip_gre6}/32"
                )

                update_gre6tap_ips(
                    gre6_path, new_local_ip=new_ip, new_remote_ip=remote_ip_gre6
                )
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec2(remote_ip_gre6)

            else:
                print("\033[91mInvalid IP Address!\033[0m")

        elif choice == "2":
            new_gre6_private_ip = input(
                "\033[93mEnter New GRE6TAP Private IP Address : \033[0m"
            )
            if new_gre6_private_ip:
                private_ip_gre6 = new_gre6_private_ip
                update_gre6tap_ips(gre6_path, new_private_ip=private_ip_gre6)
            else:
                print("\033[91mInvalid GRE6TAP Private IP Address!\033[0m")

        elif choice == "3":
            listen_port, endpoint = update_tunnel_port(listen_port, endpoint)
            update_ufw_ruleswireguard(
                address_no_subnet, address_no_subnet, listen_port, listen_port
            )
        elif choice == "4":
            endpoint = update_endpoint_ip2(endpoint)

        elif choice == "5":
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "Endpoint": endpoint,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig2(wireguard_config_path, new_config)

            save_stuff_gretap62(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            break

        elif choice == "0":
            wireguard_gre6tap_noconjuction_kharej1_5iran()
            break

        else:
            print("\033[91mPlease select a valid option.\033[0m")


def wireguardafter_gre6tapn_kharejconfig_3():
    wireguard_config_path = "/etc/wireguard/wireserver3.conf"
    gre6_path = "/etc/gre63.sh"
    new_gre6_private_ip = None

    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig(wireguard_config_path)
    )

    local_ip_gre6 = local_ip(gre6_path)
    remote_ip_gre6 = remote_ip(gre6_path)
    private_ip_gre6 = private_gre6tap(gre6_path)

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCould not retrieve the WireGuard configuration.\033[0m")
        return

    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("Could not retrieve the GRE6TAP IP addresses from gre6 file.")
        return

    while True:
        os.system("clear")
        display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips)
        display_stuff_gre6tapn(local_ip_gre6, remote_ip_gre6, private_ip_gre6)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[93mWireGuard & GRE6TAP\033[97m Kharej Server Config\033[92m [3]\033[93m Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print(" \033[93mThis is Kharej Server \033[97mConfig [3]\033[0m")
        print("1. \033[93mChange \033[97mWireGuard Private IP Address\033[0m")
        print("2. \033[93mChange \033[97mGRE6TAP\033[93m Private IP Address\033[0m")
        print("3. \033[93mChange \033[92mTunnel Port\033[0m")
        print(
            "4.\033[93m Change \033[92mIRAN Client [3] IP \033[96m(Endpoint IP)\033[0m"
        )
        print("5. \033[92mSave and Exit\033[0m")
        print("0. Back to the previous menu")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice: ")

        if choice == "1":
            new_ip = input("\033[93mEnter New WireGuard Private IP Address : \033[0m")
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                local_ip_gre6 = new_ip
                remote_ip_gre6 = wtb_opposite_ip_wireguard(new_ip)
                allowed_ips = (
                    f"{remote_ip_gre6}/128" if ":" in new_ip else f"{remote_ip_gre6}/32"
                )

                update_gre6tap_ips(
                    gre6_path, new_local_ip=new_ip, new_remote_ip=remote_ip_gre6
                )
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec3(remote_ip_gre6)

            else:
                print("\033[91mInvalid IP Address!\033[0m")

        elif choice == "2":
            new_gre6_private_ip = input(
                "\033[93mEnter New GRE6TAP Private IP Address : \033[0m"
            )
            if new_gre6_private_ip:
                private_ip_gre6 = new_gre6_private_ip
                update_gre6tap_ips(gre6_path, new_private_ip=private_ip_gre6)
            else:
                print("\033[91mInvalid GRE6TAP Private IP Address!\033[0m")

        elif choice == "3":
            listen_port, endpoint = update_tunnel_port(listen_port, endpoint)
            update_ufw_ruleswireguard(
                address_no_subnet, address_no_subnet, listen_port, listen_port
            )
        elif choice == "4":
            endpoint = update_endpoint_ip3(endpoint)

        elif choice == "5":
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "Endpoint": endpoint,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig3(wireguard_config_path, new_config)

            save_stuff_gretap63(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            break

        elif choice == "0":
            wireguard_gre6tap_noconjuction_kharej1_5iran()
            break

        else:
            print("\033[91mPlease select a valid option.\033[0m")


def wireguardafter_gre6tapn_kharejconfig_4():
    wireguard_config_path = "/etc/wireguard/wireserver4.conf"
    gre6_path = "/etc/gre64.sh"
    new_gre6_private_ip = None

    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig(wireguard_config_path)
    )

    local_ip_gre6 = local_ip(gre6_path)
    remote_ip_gre6 = remote_ip(gre6_path)
    private_ip_gre6 = private_gre6tap(gre6_path)

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCould not retrieve the WireGuard configuration.\033[0m")
        return

    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("Could not retrieve the GRE6TAP IP addresses from gre6 file.")
        return

    while True:
        os.system("clear")
        display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips)
        display_stuff_gre6tapn(local_ip_gre6, remote_ip_gre6, private_ip_gre6)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[93mWireGuard & GRE6TAP\033[97m Kharej Server Config\033[92m [4]\033[93m Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print(" \033[93mThis is Kharej Server \033[97mConfig [4]\033[0m")
        print("1. \033[93mChange \033[97mWireGuard Private IP Address\033[0m")
        print("2. \033[93mChange \033[97mGRE6TAP\033[93m Private IP Address\033[0m")
        print("3. \033[93mChange \033[92mTunnel Port\033[0m")
        print(
            "4.\033[93m Change \033[92mIRAN Client [4] IP \033[96m(Endpoint IP)\033[0m"
        )
        print("5. \033[92mSave and Exit\033[0m")
        print("0. Back to the previous menu")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice: ")

        if choice == "1":
            new_ip = input("\033[93mEnter New WireGuard Private IP Address : \033[0m")
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                local_ip_gre6 = new_ip
                remote_ip_gre6 = wtb_opposite_ip_wireguard(new_ip)
                allowed_ips = (
                    f"{remote_ip_gre6}/128" if ":" in new_ip else f"{remote_ip_gre6}/32"
                )

                update_gre6tap_ips(
                    gre6_path, new_local_ip=new_ip, new_remote_ip=remote_ip_gre6
                )
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec4(remote_ip_gre6)

            else:
                print("\033[91mInvalid IP Address!\033[0m")

        elif choice == "2":
            new_gre6_private_ip = input(
                "\033[93mEnter New GRE6TAP Private IP Address : \033[0m"
            )
            if new_gre6_private_ip:
                private_ip_gre6 = new_gre6_private_ip
                update_gre6tap_ips(gre6_path, new_private_ip=private_ip_gre6)
            else:
                print("\033[91mInvalid GRE6TAP Private IP Address!\033[0m")

        elif choice == "3":
            listen_port, endpoint = update_tunnel_port(listen_port, endpoint)
            update_ufw_ruleswireguard(
                address_no_subnet, address_no_subnet, listen_port, listen_port
            )
        elif choice == "4":
            endpoint = update_endpoint_ip4(endpoint)

        elif choice == "5":
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "Endpoint": endpoint,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig4(wireguard_config_path, new_config)

            save_stuff_gretap64(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            break

        elif choice == "0":
            wireguard_gre6tap_noconjuction_kharej1_5iran()
            break

        else:
            print("\033[91mPlease select a valid option.\033[0m")


def wireguardafter_gre6tapn_kharejconfig_5():
    wireguard_config_path = "/etc/wireguard/wireserver5.conf"
    gre6_path = "/etc/gre65.sh"
    new_gre6_private_ip = None

    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig(wireguard_config_path)
    )

    local_ip_gre6 = local_ip(gre6_path)
    remote_ip_gre6 = remote_ip(gre6_path)
    private_ip_gre6 = private_gre6tap(gre6_path)

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCould not retrieve the WireGuard configuration.\033[0m")
        return

    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("Could not retrieve the GRE6TAP IP addresses from gre6 file.")
        return

    while True:
        os.system("clear")
        display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips)
        display_stuff_gre6tapn(local_ip_gre6, remote_ip_gre6, private_ip_gre6)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[93mWireGuard & GRE6TAP\033[97m Kharej Server Config\033[92m [5]\033[93m Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print(" \033[93mThis is Kharej Server \033[97mConfig [5]\033[0m")
        print("1. \033[93mChange \033[97mWireGuard Private IP Address\033[0m")
        print("2. \033[93mChange \033[97mGRE6TAP\033[93m Private IP Address\033[0m")
        print("3. \033[93mChange \033[92mTunnel Port\033[0m")
        print(
            "4.\033[93m Change \033[92mIRAN Client [5] IP \033[96m(Endpoint IP)\033[0m"
        )
        print("5. \033[92mSave and Exit\033[0m")
        print("0. Back to the previous menu")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice: ")

        if choice == "1":
            new_ip = input("\033[93mEnter New WireGuard Private IP Address : \033[0m")
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                local_ip_gre6 = new_ip
                remote_ip_gre6 = wtb_opposite_ip_wireguard(new_ip)
                allowed_ips = (
                    f"{remote_ip_gre6}/128" if ":" in new_ip else f"{remote_ip_gre6}/32"
                )

                update_gre6tap_ips(
                    gre6_path, new_local_ip=new_ip, new_remote_ip=remote_ip_gre6
                )
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec5(remote_ip_gre6)

            else:
                print("\033[91mInvalid IP Address!\033[0m")

        elif choice == "2":
            new_gre6_private_ip = input(
                "\033[93mEnter New GRE6TAP Private IP Address : \033[0m"
            )
            if new_gre6_private_ip:
                private_ip_gre6 = new_gre6_private_ip
                update_gre6tap_ips(gre6_path, new_private_ip=private_ip_gre6)
            else:
                print("\033[91mInvalid GRE6TAP Private IP Address!\033[0m")

        elif choice == "3":
            listen_port, endpoint = update_tunnel_port(listen_port, endpoint)
            update_ufw_ruleswireguard(
                address_no_subnet, address_no_subnet, listen_port, listen_port
            )
        elif choice == "4":
            endpoint = update_endpoint_ip5(endpoint)

        elif choice == "5":
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "Endpoint": endpoint,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig5(wireguard_config_path, new_config)

            save_stuff_gretap65(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            break

        elif choice == "0":
            wireguard_gre6tap_noconjuction_kharej1_5iran()
            break

        else:
            print("\033[91mPlease select a valid option.\033[0m")


def wireguardafter_gre6tapn_iran_client1():
    wireguard_config_path = "/etc/wireguard/wireclient.conf"
    gre6_path = "/etc/gre61.sh"
    new_gre6_private_ip = None

    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig(wireguard_config_path)
    )

    local_ip_gre6 = local_ip(gre6_path)
    remote_ip_gre6 = remote_ip(gre6_path)
    private_ip_gre6 = private_gre6tap(gre6_path)

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCould not retrieve the WireGuard configuration.\033[0m")
        return

    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("Could not retrieve the GRE6TAP IP addresses from gre6 file.")
        return

    while True:
        os.system("clear")
        display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips)
        display_stuff_gre6tapn(local_ip_gre6, remote_ip_gre6, private_ip_gre6)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[93mWireGuard & GRE6TAP\033[97m IRAN Client\033[92m [1]\033[93m Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print(" \033[93mThis is IRAN Client \033[97m[1]\033[0m")
        print("1. \033[93mChange \033[97mWireGuard Private IP Address\033[0m")
        print("2. \033[93mChange \033[97mGRE6TAP\033[93m Private IP Address\033[0m")
        print("3. \033[93mChange \033[92mTunnel Port\033[0m")
        print("4.\033[93m Change \033[92mKharej Server IP \033[96m(Endpoint IP)\033[0m")
        print("5. \033[92mSave and Exit\033[0m")
        print("0. Back to the previous menu")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice: ")

        if choice == "1":
            new_ip = input("\033[93mEnter New WireGuard Private IP Address : \033[0m")
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                local_ip_gre6 = new_ip
                remote_ip_gre6 = wtb_opposite_ip_wireguard(new_ip)
                allowed_ips = (
                    f"{remote_ip_gre6}/128" if ":" in new_ip else f"{remote_ip_gre6}/32"
                )

                update_gre6tap_ips(
                    gre6_path, new_local_ip=new_ip, new_remote_ip=remote_ip_gre6
                )
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec_client(remote_ip_gre6)

            else:
                print("\033[91mInvalid IP Address!\033[0m")

        elif choice == "2":
            new_gre6_private_ip = input(
                "\033[93mEnter New GRE6TAP Private IP Address : \033[0m"
            )
            if new_gre6_private_ip:
                private_ip_gre6 = new_gre6_private_ip
                update_gre6tap_ips(gre6_path, new_private_ip=private_ip_gre6)
            else:
                print("\033[91mInvalid GRE6TAP Private IP Address!\033[0m")

        elif choice == "3":
            listen_port, endpoint = update_tunnel_port(listen_port, endpoint)
            update_ufw_ruleswireguard(
                address_no_subnet, address_no_subnet, listen_port, listen_port
            )
        elif choice == "4":
            endpoint = update_endpoint_ip_server(endpoint)

        elif choice == "5":
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "Endpoint": endpoint,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_client(wireguard_config_path, new_config)

            save_stuff_gretap61(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            break

        elif choice == "0":
            wireguard_gre6tap_noconjuction_kharej1_5iran()
            break

        else:
            print("\033[91mPlease select a valid option.\033[0m")


def wireguardafter_gre6tapn_iran_client2():
    wireguard_config_path = "/etc/wireguard/wireclient.conf"
    gre6_path = "/etc/gre62.sh"
    new_gre6_private_ip = None

    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig(wireguard_config_path)
    )

    local_ip_gre6 = local_ip(gre6_path)
    remote_ip_gre6 = remote_ip(gre6_path)
    private_ip_gre6 = private_gre6tap(gre6_path)

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCould not retrieve the WireGuard configuration.\033[0m")
        return

    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("Could not retrieve the GRE6TAP IP addresses from gre6 file.")
        return

    while True:
        os.system("clear")
        display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips)
        display_stuff_gre6tapn(local_ip_gre6, remote_ip_gre6, private_ip_gre6)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[93mWireGuard & GRE6TAP\033[97m IRAN Client\033[92m [2]\033[93m Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print(" \033[93mThis is IRAN Client \033[97m[2]\033[0m")
        print("1. \033[93mChange \033[97mWireGuard Private IP Address\033[0m")
        print("2. \033[93mChange \033[97mGRE6TAP\033[93m Private IP Address\033[0m")
        print("3. \033[93mChange \033[92mTunnel Port\033[0m")
        print("4.\033[93m Change \033[92mKharej Server IP \033[96m(Endpoint IP)\033[0m")
        print("5. \033[92mSave and Exit\033[0m")
        print("0. Back to the previous menu")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice: ")

        if choice == "1":
            new_ip = input("\033[93mEnter New WireGuard Private IP Address : \033[0m")
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                local_ip_gre6 = new_ip
                remote_ip_gre6 = wtb_opposite_ip_wireguard(new_ip)
                allowed_ips = (
                    f"{remote_ip_gre6}/128" if ":" in new_ip else f"{remote_ip_gre6}/32"
                )

                update_gre6tap_ips(
                    gre6_path, new_local_ip=new_ip, new_remote_ip=remote_ip_gre6
                )
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec_client(remote_ip_gre6)

            else:
                print("\033[91mInvalid IP Address!\033[0m")

        elif choice == "2":
            new_gre6_private_ip = input(
                "\033[93mEnter New GRE6TAP Private IP Address : \033[0m"
            )
            if new_gre6_private_ip:
                private_ip_gre6 = new_gre6_private_ip
                update_gre6tap_ips(gre6_path, new_private_ip=private_ip_gre6)
            else:
                print("\033[91mInvalid GRE6TAP Private IP Address!\033[0m")

        elif choice == "3":
            listen_port, endpoint = update_tunnel_port(listen_port, endpoint)
            update_ufw_ruleswireguard(
                address_no_subnet, address_no_subnet, listen_port, listen_port
            )
        elif choice == "4":
            endpoint = update_endpoint_ip_server(endpoint)

        elif choice == "5":
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "Endpoint": endpoint,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_client(wireguard_config_path, new_config)

            save_stuff_gretap62(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            break

        elif choice == "0":
            wireguard_gre6tap_noconjuction_kharej1_5iran()
            break

        else:
            print("\033[91mPlease select a valid option.\033[0m")


def wireguardafter_gre6tapn_iran_client3():
    wireguard_config_path = "/etc/wireguard/wireclient.conf"
    gre6_path = "/etc/gre63.sh"
    new_gre6_private_ip = None

    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig(wireguard_config_path)
    )

    local_ip_gre6 = local_ip(gre6_path)
    remote_ip_gre6 = remote_ip(gre6_path)
    private_ip_gre6 = private_gre6tap(gre6_path)

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCould not retrieve the WireGuard configuration.\033[0m")
        return

    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("Could not retrieve the GRE6TAP IP addresses from gre6 file.")
        return

    while True:
        os.system("clear")
        display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips)
        display_stuff_gre6tapn(local_ip_gre6, remote_ip_gre6, private_ip_gre6)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[93mWireGuard & GRE6TAP\033[97m IRAN Client\033[92m [3]\033[93m Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print(" \033[93mThis is IRAN Client \033[97m[3]\033[0m")
        print("1. \033[93mChange \033[97mWireGuard Private IP Address\033[0m")
        print("2. \033[93mChange \033[97mGRE6TAP\033[93m Private IP Address\033[0m")
        print("3. \033[93mChange \033[92mTunnel Port\033[0m")
        print("4.\033[93m Change \033[92mKharej Server IP \033[96m(Endpoint IP)\033[0m")
        print("5. \033[92mSave and Exit\033[0m")
        print("0. Back to the previous menu")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice: ")

        if choice == "1":
            new_ip = input("\033[93mEnter New WireGuard Private IP Address : \033[0m")
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                local_ip_gre6 = new_ip
                remote_ip_gre6 = wtb_opposite_ip_wireguard(new_ip)
                allowed_ips = (
                    f"{remote_ip_gre6}/128" if ":" in new_ip else f"{remote_ip_gre6}/32"
                )

                update_gre6tap_ips(
                    gre6_path, new_local_ip=new_ip, new_remote_ip=remote_ip_gre6
                )
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec_client(remote_ip_gre6)

            else:
                print("\033[91mInvalid IP Address!\033[0m")

        elif choice == "2":
            new_gre6_private_ip = input(
                "\033[93mEnter New GRE6TAP Private IP Address : \033[0m"
            )
            if new_gre6_private_ip:
                private_ip_gre6 = new_gre6_private_ip
                update_gre6tap_ips(gre6_path, new_private_ip=private_ip_gre6)
            else:
                print("\033[91mInvalid GRE6TAP Private IP Address!\033[0m")

        elif choice == "3":
            listen_port, endpoint = update_tunnel_port(listen_port, endpoint)
            update_ufw_ruleswireguard(
                address_no_subnet, address_no_subnet, listen_port, listen_port
            )
        elif choice == "4":
            endpoint = update_endpoint_ip_server(endpoint)

        elif choice == "5":
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "Endpoint": endpoint,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_client(wireguard_config_path, new_config)

            save_stuff_gretap63(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            break

        elif choice == "0":
            wireguard_gre6tap_noconjuction_kharej1_5iran()
            break

        else:
            print("\033[91mPlease select a valid option.\033[0m")


def wireguardafter_gre6tapn_iran_client4():
    wireguard_config_path = "/etc/wireguard/wireclient.conf"
    gre6_path = "/etc/gre64.sh"
    new_gre6_private_ip = None

    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig(wireguard_config_path)
    )

    local_ip_gre6 = local_ip(gre6_path)
    remote_ip_gre6 = remote_ip(gre6_path)
    private_ip_gre6 = private_gre6tap(gre6_path)

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCould not retrieve the WireGuard configuration.\033[0m")
        return

    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("Could not retrieve the GRE6TAP IP addresses from gre6 file.")
        return

    while True:
        os.system("clear")
        display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips)
        display_stuff_gre6tapn(local_ip_gre6, remote_ip_gre6, private_ip_gre6)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[93mWireGuard & GRE6TAP\033[97m IRAN Client\033[92m [4]\033[93m Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print(" \033[93mThis is IRAN Client \033[97m[4]\033[0m")
        print("1. \033[93mChange \033[97mWireGuard Private IP Address\033[0m")
        print("2. \033[93mChange \033[97mGRE6TAP\033[93m Private IP Address\033[0m")
        print("3. \033[93mChange \033[92mTunnel Port\033[0m")
        print("4.\033[93m Change \033[92mKharej Server IP \033[96m(Endpoint IP)\033[0m")
        print("5. \033[92mSave and Exit\033[0m")
        print("0. Back to the previous menu")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice: ")

        if choice == "1":
            new_ip = input("\033[93mEnter New WireGuard Private IP Address : \033[0m")
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                local_ip_gre6 = new_ip
                remote_ip_gre6 = wtb_opposite_ip_wireguard(new_ip)
                allowed_ips = (
                    f"{remote_ip_gre6}/128" if ":" in new_ip else f"{remote_ip_gre6}/32"
                )

                update_gre6tap_ips(
                    gre6_path, new_local_ip=new_ip, new_remote_ip=remote_ip_gre6
                )
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec_client(remote_ip_gre6)

            else:
                print("\033[91mInvalid IP Address!\033[0m")

        elif choice == "2":
            new_gre6_private_ip = input(
                "\033[93mEnter New GRE6TAP Private IP Address : \033[0m"
            )
            if new_gre6_private_ip:
                private_ip_gre6 = new_gre6_private_ip
                update_gre6tap_ips(gre6_path, new_private_ip=private_ip_gre6)
            else:
                print("\033[91mInvalid GRE6TAP Private IP Address!\033[0m")

        elif choice == "3":
            listen_port, endpoint = update_tunnel_port(listen_port, endpoint)
            update_ufw_ruleswireguard(
                address_no_subnet, address_no_subnet, listen_port, listen_port
            )
        elif choice == "4":
            endpoint = update_endpoint_ip_server(endpoint)

        elif choice == "5":
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "Endpoint": endpoint,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_client(wireguard_config_path, new_config)

            save_stuff_gretap64(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            break

        elif choice == "0":
            wireguard_gre6tap_noconjuction_kharej1_5iran()
            break

        else:
            print("\033[91mPlease select a valid option.\033[0m")


def wireguardafter_gre6tapn_iran_client5():
    wireguard_config_path = "/etc/wireguard/wireclient.conf"
    gre6_path = "/etc/gre65.sh"
    new_gre6_private_ip = None

    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig(wireguard_config_path)
    )

    local_ip_gre6 = local_ip(gre6_path)
    remote_ip_gre6 = remote_ip(gre6_path)
    private_ip_gre6 = private_gre6tap(gre6_path)

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCould not retrieve the WireGuard configuration.\033[0m")
        return

    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("Could not retrieve the GRE6TAP IP addresses from gre6 file.")
        return

    while True:
        os.system("clear")
        display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips)
        display_stuff_gre6tapn(local_ip_gre6, remote_ip_gre6, private_ip_gre6)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[93mWireGuard & GRE6TAP\033[97m IRAN Client\033[92m [5]\033[93m Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print(" \033[93mThis is IRAN Client \033[97m[5]\033[0m")
        print("1. \033[93mChange \033[97mWireGuard Private IP Address\033[0m")
        print("2. \033[93mChange \033[97mGRE6TAP\033[93m Private IP Address\033[0m")
        print("3. \033[93mChange \033[92mTunnel Port\033[0m")
        print("4.\033[93m Change \033[92mKharej Server IP \033[96m(Endpoint IP)\033[0m")
        print("5. \033[92mSave and Exit\033[0m")
        print("0. Back to the previous menu")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice: ")

        if choice == "1":
            new_ip = input("\033[93mEnter New WireGuard Private IP Address : \033[0m")
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                local_ip_gre6 = new_ip
                remote_ip_gre6 = wtb_opposite_ip_wireguard(new_ip)
                allowed_ips = (
                    f"{remote_ip_gre6}/128" if ":" in new_ip else f"{remote_ip_gre6}/32"
                )

                update_gre6tap_ips(
                    gre6_path, new_local_ip=new_ip, new_remote_ip=remote_ip_gre6
                )
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec_client(remote_ip_gre6)

            else:
                print("\033[91mInvalid IP Address!\033[0m")

        elif choice == "2":
            new_gre6_private_ip = input(
                "\033[93mEnter New GRE6TAP Private IP Address : \033[0m"
            )
            if new_gre6_private_ip:
                private_ip_gre6 = new_gre6_private_ip
                update_gre6tap_ips(gre6_path, new_private_ip=private_ip_gre6)
            else:
                print("\033[91mInvalid GRE6TAP Private IP Address!\033[0m")

        elif choice == "3":
            listen_port, endpoint = update_tunnel_port(listen_port, endpoint)
            update_ufw_ruleswireguard(
                address_no_subnet, address_no_subnet, listen_port, listen_port
            )
        elif choice == "4":
            endpoint = update_endpoint_ip_server(endpoint)

        elif choice == "5":
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "Endpoint": endpoint,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_client(wireguard_config_path, new_config)

            save_stuff_gretap65(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            break

        elif choice == "0":
            wireguard_gre6tap_noconjuction_kharej1_5iran()
            break

        else:
            print("\033[91mPlease select a valid option.\033[0m")


# 1 iran 5 kharej client


def wireguardafter_gre6tapn_iranconfig_1():
    wireguard_config_path = "/etc/wireguard/wireserver1.conf"
    gre6_path = "/etc/gre61.sh"
    new_gre6_private_ip = None

    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig(wireguard_config_path)
    )

    local_ip_gre6 = local_ip(gre6_path)
    remote_ip_gre6 = remote_ip(gre6_path)
    private_ip_gre6 = private_gre6tap(gre6_path)

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCould not retrieve the WireGuard configuration.\033[0m")
        return

    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("Could not retrieve the GRE6TAP IP addresses from gre6 file.")
        return

    while True:
        os.system("clear")
        display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips)
        display_stuff_gre6tapn(local_ip_gre6, remote_ip_gre6, private_ip_gre6)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[93mWireGuard & GRE6TAP\033[97m IRAN Server Config\033[92m [1]\033[93m Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print(" \033[93mThis is IRAN Server \033[97mConfig [1]\033[0m")
        print("1. \033[93mChange \033[97mWireGuard Private IP Address\033[0m")
        print("2. \033[93mChange \033[97mGRE6TAP\033[93m Private IP Address\033[0m")
        print("3. \033[93mChange \033[92mTunnel Port\033[0m")
        print(
            "4.\033[93m Change \033[92mKharej Client [1] IP \033[96m(Endpoint IP)\033[0m"
        )
        print("5. \033[92mSave and Exit\033[0m")
        print("0. Back to the previous menu")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice: ")

        if choice == "1":
            new_ip = input("\033[93mEnter New WireGuard Private IP Address : \033[0m")
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                local_ip_gre6 = new_ip
                remote_ip_gre6 = wtb_opposite_ip_wireguard(new_ip)
                allowed_ips = (
                    f"{remote_ip_gre6}/128" if ":" in new_ip else f"{remote_ip_gre6}/32"
                )

                update_gre6tap_ips(
                    gre6_path, new_local_ip=new_ip, new_remote_ip=remote_ip_gre6
                )
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec1(remote_ip_gre6)

            else:
                print("\033[91mInvalid IP Address!\033[0m")

        elif choice == "2":
            new_gre6_private_ip = input(
                "\033[93mEnter New GRE6TAP Private IP Address : \033[0m"
            )
            if new_gre6_private_ip:
                private_ip_gre6 = new_gre6_private_ip
                update_gre6tap_ips(gre6_path, new_private_ip=private_ip_gre6)
            else:
                print("\033[91mInvalid GRE6TAP Private IP Address!\033[0m")

        elif choice == "3":
            listen_port, endpoint = update_tunnel_port(listen_port, endpoint)
            update_ufw_ruleswireguard(
                address_no_subnet, address_no_subnet, listen_port, listen_port
            )
        elif choice == "4":
            endpoint = update_endpoint_ir_ip1(endpoint)

        elif choice == "5":
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "Endpoint": endpoint,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig1(wireguard_config_path, new_config)

            save_stuff_gretap61(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            break

        elif choice == "0":
            wireguard_gre6tap_noconjuction_kharej1_5iran()
            break

        else:
            print("\033[91mPlease select a valid option.\033[0m")


def wireguardafter_gre6tapn_iranconfig_2():
    wireguard_config_path = "/etc/wireguard/wireserver2.conf"
    gre6_path = "/etc/gre62.sh"
    new_gre6_private_ip = None

    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig(wireguard_config_path)
    )

    local_ip_gre6 = local_ip(gre6_path)
    remote_ip_gre6 = remote_ip(gre6_path)
    private_ip_gre6 = private_gre6tap(gre6_path)

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCould not retrieve the WireGuard configuration.\033[0m")
        return

    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("Could not retrieve the GRE6TAP IP addresses from gre6 file.")
        return

    while True:
        os.system("clear")
        display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips)
        display_stuff_gre6tapn(local_ip_gre6, remote_ip_gre6, private_ip_gre6)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[93mWireGuard & GRE6TAP\033[97m IRAN Server Config\033[92m [2]\033[93m Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print(" \033[93mThis is IRAN Server \033[97mConfig [2]\033[0m")
        print("1. \033[93mChange \033[97mWireGuard Private IP Address\033[0m")
        print("2. \033[93mChange \033[97mGRE6TAP\033[93m Private IP Address\033[0m")
        print("3. \033[93mChange \033[92mTunnel Port\033[0m")
        print(
            "4.\033[93m Change \033[92mKharej Client [2] IP \033[96m(Endpoint IP)\033[0m"
        )
        print("5. \033[92mSave and Exit\033[0m")
        print("0. Back to the previous menu")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice: ")

        if choice == "1":
            new_ip = input("\033[93mEnter New WireGuard Private IP Address : \033[0m")
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                local_ip_gre6 = new_ip
                remote_ip_gre6 = wtb_opposite_ip_wireguard(new_ip)
                allowed_ips = (
                    f"{remote_ip_gre6}/128" if ":" in new_ip else f"{remote_ip_gre6}/32"
                )

                update_gre6tap_ips(
                    gre6_path, new_local_ip=new_ip, new_remote_ip=remote_ip_gre6
                )
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec2(remote_ip_gre6)

            else:
                print("\033[91mInvalid IP Address!\033[0m")

        elif choice == "2":
            new_gre6_private_ip = input(
                "\033[93mEnter New GRE6TAP Private IP Address : \033[0m"
            )
            if new_gre6_private_ip:
                private_ip_gre6 = new_gre6_private_ip
                update_gre6tap_ips(gre6_path, new_private_ip=private_ip_gre6)
            else:
                print("\033[91mInvalid GRE6TAP Private IP Address!\033[0m")

        elif choice == "3":
            listen_port, endpoint = update_tunnel_port(listen_port, endpoint)
            update_ufw_ruleswireguard(
                address_no_subnet, address_no_subnet, listen_port, listen_port
            )
        elif choice == "4":
            endpoint = update_endpoint_ir_ip2(endpoint)

        elif choice == "5":
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "Endpoint": endpoint,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig2(wireguard_config_path, new_config)

            save_stuff_gretap62(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            break

        elif choice == "0":
            wireguard_gre6tap_noconjuction_kharej1_5iran()
            break

        else:
            print("\033[91mPlease select a valid option.\033[0m")


def wireguardafter_gre6tapn_iranconfig_3():
    wireguard_config_path = "/etc/wireguard/wireserver3.conf"
    gre6_path = "/etc/gre63.sh"
    new_gre6_private_ip = None

    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig(wireguard_config_path)
    )

    local_ip_gre6 = local_ip(gre6_path)
    remote_ip_gre6 = remote_ip(gre6_path)
    private_ip_gre6 = private_gre6tap(gre6_path)

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCould not retrieve the WireGuard configuration.\033[0m")
        return

    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("Could not retrieve the GRE6TAP IP addresses from gre6 file.")
        return

    while True:
        os.system("clear")
        display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips)
        display_stuff_gre6tapn(local_ip_gre6, remote_ip_gre6, private_ip_gre6)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[93mWireGuard & GRE6TAP\033[97m IRAN Server Config\033[92m [3]\033[93m Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print(" \033[93mThis is IRAN Server \033[97mConfig [3]\033[0m")
        print("1. \033[93mChange \033[97mWireGuard Private IP Address\033[0m")
        print("2. \033[93mChange \033[97mGRE6TAP\033[93m Private IP Address\033[0m")
        print("3. \033[93mChange \033[92mTunnel Port\033[0m")
        print(
            "4.\033[93m Change \033[92mKharej Client [3] IP \033[96m(Endpoint IP)\033[0m"
        )
        print("5. \033[92mSave and Exit\033[0m")
        print("0. Back to the previous menu")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice: ")

        if choice == "1":
            new_ip = input("\033[93mEnter New WireGuard Private IP Address : \033[0m")
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                local_ip_gre6 = new_ip
                remote_ip_gre6 = wtb_opposite_ip_wireguard(new_ip)
                allowed_ips = (
                    f"{remote_ip_gre6}/128" if ":" in new_ip else f"{remote_ip_gre6}/32"
                )

                update_gre6tap_ips(
                    gre6_path, new_local_ip=new_ip, new_remote_ip=remote_ip_gre6
                )
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec3(remote_ip_gre6)

            else:
                print("\033[91mInvalid IP Address!\033[0m")

        elif choice == "2":
            new_gre6_private_ip = input(
                "\033[93mEnter New GRE6TAP Private IP Address : \033[0m"
            )
            if new_gre6_private_ip:
                private_ip_gre6 = new_gre6_private_ip
                update_gre6tap_ips(gre6_path, new_private_ip=private_ip_gre6)
            else:
                print("\033[91mInvalid GRE6TAP Private IP Address!\033[0m")

        elif choice == "3":
            listen_port, endpoint = update_tunnel_port(listen_port, endpoint)
            update_ufw_ruleswireguard(
                address_no_subnet, address_no_subnet, listen_port, listen_port
            )
        elif choice == "4":
            endpoint = update_endpoint_ir_ip3(endpoint)

        elif choice == "5":
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "Endpoint": endpoint,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig3(wireguard_config_path, new_config)

            save_stuff_gretap63(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            break

        elif choice == "0":
            wireguard_gre6tap_noconjuction_kharej1_5iran()
            break

        else:
            print("\033[91mPlease select a valid option.\033[0m")


def wireguardafter_gre6tapn_iranconfig_4():
    wireguard_config_path = "/etc/wireguard/wireserver4.conf"
    gre6_path = "/etc/gre64.sh"
    new_gre6_private_ip = None

    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig(wireguard_config_path)
    )

    local_ip_gre6 = local_ip(gre6_path)
    remote_ip_gre6 = remote_ip(gre6_path)
    private_ip_gre6 = private_gre6tap(gre6_path)

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCould not retrieve the WireGuard configuration.\033[0m")
        return

    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("Could not retrieve the GRE6TAP IP addresses from gre6 file.")
        return

    while True:
        os.system("clear")
        display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips)
        display_stuff_gre6tapn(local_ip_gre6, remote_ip_gre6, private_ip_gre6)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[93mWireGuard & GRE6TAP\033[97m IRAN Server Config\033[92m [4]\033[93m Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print(" \033[93mThis is IRAN Server \033[97mConfig [4]\033[0m")
        print("1. \033[93mChange \033[97mWireGuard Private IP Address\033[0m")
        print("2. \033[93mChange \033[97mGRE6TAP\033[93m Private IP Address\033[0m")
        print("3. \033[93mChange \033[92mTunnel Port\033[0m")
        print(
            "4.\033[93m Change \033[92mKharej Client [4] IP \033[96m(Endpoint IP)\033[0m"
        )
        print("5. \033[92mSave and Exit\033[0m")
        print("0. Back to the previous menu")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice: ")

        if choice == "1":
            new_ip = input("\033[93mEnter New WireGuard Private IP Address : \033[0m")
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                local_ip_gre6 = new_ip
                remote_ip_gre6 = wtb_opposite_ip_wireguard(new_ip)
                allowed_ips = (
                    f"{remote_ip_gre6}/128" if ":" in new_ip else f"{remote_ip_gre6}/32"
                )

                update_gre6tap_ips(
                    gre6_path, new_local_ip=new_ip, new_remote_ip=remote_ip_gre6
                )
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec4(remote_ip_gre6)

            else:
                print("\033[91mInvalid IP Address!\033[0m")

        elif choice == "2":
            new_gre6_private_ip = input(
                "\033[93mEnter New GRE6TAP Private IP Address : \033[0m"
            )
            if new_gre6_private_ip:
                private_ip_gre6 = new_gre6_private_ip
                update_gre6tap_ips(gre6_path, new_private_ip=private_ip_gre6)
            else:
                print("\033[91mInvalid GRE6TAP Private IP Address!\033[0m")

        elif choice == "3":
            listen_port, endpoint = update_tunnel_port(listen_port, endpoint)
            update_ufw_ruleswireguard(
                address_no_subnet, address_no_subnet, listen_port, listen_port
            )
        elif choice == "4":
            endpoint = update_endpoint_ir_ip4(endpoint)

        elif choice == "5":
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "Endpoint": endpoint,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig4(wireguard_config_path, new_config)

            save_stuff_gretap64(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            break

        elif choice == "0":
            wireguard_gre6tap_noconjuction_kharej1_5iran()
            break

        else:
            print("\033[91mPlease select a valid option.\033[0m")


def wireguardafter_gre6tapn_iranconfig_5():
    wireguard_config_path = "/etc/wireguard/wireserver5.conf"
    gre6_path = "/etc/gre65.sh"
    new_gre6_private_ip = None

    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig(wireguard_config_path)
    )

    local_ip_gre6 = local_ip(gre6_path)
    remote_ip_gre6 = remote_ip(gre6_path)
    private_ip_gre6 = private_gre6tap(gre6_path)

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCould not retrieve the WireGuard configuration.\033[0m")
        return

    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("Could not retrieve the GRE6TAP IP addresses from gre6 file.")
        return

    while True:
        os.system("clear")
        display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips)
        display_stuff_gre6tapn(local_ip_gre6, remote_ip_gre6, private_ip_gre6)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[93mWireGuard & GRE6TAP\033[97m IRAN Server Config\033[92m [5]\033[93m Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print(" \033[93mThis is IRAN Server \033[97mConfig [5]\033[0m")
        print("1. \033[93mChange \033[97mWireGuard Private IP Address\033[0m")
        print("2. \033[93mChange \033[97mGRE6TAP\033[93m Private IP Address\033[0m")
        print("3. \033[93mChange \033[92mTunnel Port\033[0m")
        print(
            "4.\033[93m Change \033[92mKharej Client [5] IP \033[96m(Endpoint IP)\033[0m"
        )
        print("5. \033[92mSave and Exit\033[0m")
        print("0. Back to the previous menu")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice: ")

        if choice == "1":
            new_ip = input("\033[93mEnter New WireGuard Private IP Address : \033[0m")
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                local_ip_gre6 = new_ip
                remote_ip_gre6 = wtb_opposite_ip_wireguard(new_ip)
                allowed_ips = (
                    f"{remote_ip_gre6}/128" if ":" in new_ip else f"{remote_ip_gre6}/32"
                )

                update_gre6tap_ips(
                    gre6_path, new_local_ip=new_ip, new_remote_ip=remote_ip_gre6
                )
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec5(remote_ip_gre6)

            else:
                print("\033[91mInvalid IP Address!\033[0m")

        elif choice == "2":
            new_gre6_private_ip = input(
                "\033[93mEnter New GRE6TAP Private IP Address : \033[0m"
            )
            if new_gre6_private_ip:
                private_ip_gre6 = new_gre6_private_ip
                update_gre6tap_ips(gre6_path, new_private_ip=private_ip_gre6)
            else:
                print("\033[91mInvalid GRE6TAP Private IP Address!\033[0m")

        elif choice == "3":
            listen_port, endpoint = update_tunnel_port(listen_port, endpoint)
            update_ufw_ruleswireguard(
                address_no_subnet, address_no_subnet, listen_port, listen_port
            )
        elif choice == "4":
            endpoint = update_endpoint_ir_ip5(endpoint)

        elif choice == "5":
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "Endpoint": endpoint,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig5(wireguard_config_path, new_config)

            save_stuff_gretap65(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            break

        elif choice == "0":
            wireguard_gre6tap_noconjuction_kharej1_5iran()
            break

        else:
            print("\033[91mPlease select a valid option.\033[0m")


def wireguardafter_gre6tapn_kharej_client1():
    wireguard_config_path = "/etc/wireguard/wireclient.conf"
    gre6_path = "/etc/gre61.sh"
    new_gre6_private_ip = None

    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig(wireguard_config_path)
    )

    local_ip_gre6 = local_ip(gre6_path)
    remote_ip_gre6 = remote_ip(gre6_path)
    private_ip_gre6 = private_gre6tap(gre6_path)

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCould not retrieve the WireGuard configuration.\033[0m")
        return

    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("Could not retrieve the GRE6TAP IP addresses from gre6 file.")
        return

    while True:
        os.system("clear")
        display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips)
        display_stuff_gre6tapn(local_ip_gre6, remote_ip_gre6, private_ip_gre6)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[93mWireGuard & GRE6TAP\033[97m Kharej Client\033[92m [1]\033[93m Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print(" \033[93mThis is Kharej Client \033[97m[1]\033[0m")
        print("1. \033[93mChange \033[97mWireGuard Private IP Address\033[0m")
        print("2. \033[93mChange \033[97mGRE6TAP\033[93m Private IP Address\033[0m")
        print("3. \033[93mChange \033[92mTunnel Port\033[0m")
        print("4.\033[93m Change \033[92mIRAN Server IP \033[96m(Endpoint IP)\033[0m")
        print("5. \033[92mSave and Exit\033[0m")
        print("0. Back to the previous menu")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice: ")

        if choice == "1":
            new_ip = input("\033[93mEnter New WireGuard Private IP Address : \033[0m")
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                local_ip_gre6 = new_ip
                remote_ip_gre6 = wtb_opposite_ip_wireguard(new_ip)
                allowed_ips = (
                    f"{remote_ip_gre6}/128" if ":" in new_ip else f"{remote_ip_gre6}/32"
                )

                update_gre6tap_ips(
                    gre6_path, new_local_ip=new_ip, new_remote_ip=remote_ip_gre6
                )
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec_client(remote_ip_gre6)

            else:
                print("\033[91mInvalid IP Address!\033[0m")

        elif choice == "2":
            new_gre6_private_ip = input(
                "\033[93mEnter New GRE6TAP Private IP Address : \033[0m"
            )
            if new_gre6_private_ip:
                private_ip_gre6 = new_gre6_private_ip
                update_gre6tap_ips(gre6_path, new_private_ip=private_ip_gre6)
            else:
                print("\033[91mInvalid GRE6TAP Private IP Address!\033[0m")

        elif choice == "3":
            listen_port, endpoint = update_tunnel_port(listen_port, endpoint)
            update_ufw_ruleswireguard(
                address_no_subnet, address_no_subnet, listen_port, listen_port
            )
        elif choice == "4":
            endpoint = update_endpoint_ir_server(endpoint)

        elif choice == "5":
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "Endpoint": endpoint,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_client(wireguard_config_path, new_config)

            save_stuff_gretap61(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            break

        elif choice == "0":
            wireguard_gre6tap_noconjuction_kharej1_5iran()
            break

        else:
            print("\033[91mPlease select a valid option.\033[0m")


def wireguardafter_gre6tapn_kharej_client2():
    wireguard_config_path = "/etc/wireguard/wireclient.conf"
    gre6_path = "/etc/gre62.sh"
    new_gre6_private_ip = None

    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig(wireguard_config_path)
    )

    local_ip_gre6 = local_ip(gre6_path)
    remote_ip_gre6 = remote_ip(gre6_path)
    private_ip_gre6 = private_gre6tap(gre6_path)

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCould not retrieve the WireGuard configuration.\033[0m")
        return

    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("Could not retrieve the GRE6TAP IP addresses from gre6 file.")
        return

    while True:
        os.system("clear")
        display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips)
        display_stuff_gre6tapn(local_ip_gre6, remote_ip_gre6, private_ip_gre6)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[93mWireGuard & GRE6TAP\033[97m Kharej Client\033[92m [2]\033[93m Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print(" \033[93mThis is Kharej Client \033[97m[2]\033[0m")
        print("1. \033[93mChange \033[97mWireGuard Private IP Address\033[0m")
        print("2. \033[93mChange \033[97mGRE6TAP\033[93m Private IP Address\033[0m")
        print("3. \033[93mChange \033[92mTunnel Port\033[0m")
        print("4.\033[93m Change \033[92mIRAN Server IP \033[96m(Endpoint IP)\033[0m")
        print("5. \033[92mSave and Exit\033[0m")
        print("0. Back to the previous menu")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice: ")

        if choice == "1":
            new_ip = input("\033[93mEnter New WireGuard Private IP Address : \033[0m")
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                local_ip_gre6 = new_ip
                remote_ip_gre6 = wtb_opposite_ip_wireguard(new_ip)
                allowed_ips = (
                    f"{remote_ip_gre6}/128" if ":" in new_ip else f"{remote_ip_gre6}/32"
                )

                update_gre6tap_ips(
                    gre6_path, new_local_ip=new_ip, new_remote_ip=remote_ip_gre6
                )
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec_client(remote_ip_gre6)

            else:
                print("\033[91mInvalid IP Address!\033[0m")

        elif choice == "2":
            new_gre6_private_ip = input(
                "\033[93mEnter New GRE6TAP Private IP Address : \033[0m"
            )
            if new_gre6_private_ip:
                private_ip_gre6 = new_gre6_private_ip
                update_gre6tap_ips(gre6_path, new_private_ip=private_ip_gre6)
            else:
                print("\033[91mInvalid GRE6TAP Private IP Address!\033[0m")

        elif choice == "3":
            listen_port, endpoint = update_tunnel_port(listen_port, endpoint)
            update_ufw_ruleswireguard(
                address_no_subnet, address_no_subnet, listen_port, listen_port
            )
        elif choice == "4":
            endpoint = update_endpoint_ir_server(endpoint)

        elif choice == "5":
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "Endpoint": endpoint,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_client(wireguard_config_path, new_config)

            save_stuff_gretap62(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            break

        elif choice == "0":
            wireguard_gre6tap_noconjuction_kharej1_5iran()
            break

        else:
            print("\033[91mPlease select a valid option.\033[0m")


def wireguardafter_gre6tapn_kharej_client3():
    wireguard_config_path = "/etc/wireguard/wireclient.conf"
    gre6_path = "/etc/gre63.sh"
    new_gre6_private_ip = None

    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig(wireguard_config_path)
    )

    local_ip_gre6 = local_ip(gre6_path)
    remote_ip_gre6 = remote_ip(gre6_path)
    private_ip_gre6 = private_gre6tap(gre6_path)

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCould not retrieve the WireGuard configuration.\033[0m")
        return

    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("Could not retrieve the GRE6TAP IP addresses from gre6 file.")
        return

    while True:
        os.system("clear")
        display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips)
        display_stuff_gre6tapn(local_ip_gre6, remote_ip_gre6, private_ip_gre6)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[93mWireGuard & GRE6TAP\033[97m Kharej Client\033[92m [3]\033[93m Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print(" \033[93mThis is Kharej Client \033[97m[3]\033[0m")
        print("1. \033[93mChange \033[97mWireGuard Private IP Address\033[0m")
        print("2. \033[93mChange \033[97mGRE6TAP\033[93m Private IP Address\033[0m")
        print("3. \033[93mChange \033[92mTunnel Port\033[0m")
        print("4.\033[93m Change \033[92mIRAN Server IP \033[96m(Endpoint IP)\033[0m")
        print("5. \033[92mSave and Exit\033[0m")
        print("0. Back to the previous menu")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice: ")

        if choice == "1":
            new_ip = input("\033[93mEnter New WireGuard Private IP Address : \033[0m")
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                local_ip_gre6 = new_ip
                remote_ip_gre6 = wtb_opposite_ip_wireguard(new_ip)
                allowed_ips = (
                    f"{remote_ip_gre6}/128" if ":" in new_ip else f"{remote_ip_gre6}/32"
                )

                update_gre6tap_ips(
                    gre6_path, new_local_ip=new_ip, new_remote_ip=remote_ip_gre6
                )
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec_client(remote_ip_gre6)

            else:
                print("\033[91mInvalid IP Address!\033[0m")

        elif choice == "2":
            new_gre6_private_ip = input(
                "\033[93mEnter New GRE6TAP Private IP Address : \033[0m"
            )
            if new_gre6_private_ip:
                private_ip_gre6 = new_gre6_private_ip
                update_gre6tap_ips(gre6_path, new_private_ip=private_ip_gre6)
            else:
                print("\033[91mInvalid GRE6TAP Private IP Address!\033[0m")

        elif choice == "3":
            listen_port, endpoint = update_tunnel_port(listen_port, endpoint)
            update_ufw_ruleswireguard(
                address_no_subnet, address_no_subnet, listen_port, listen_port
            )
        elif choice == "4":
            endpoint = update_endpoint_ir_server(endpoint)

        elif choice == "5":
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "Endpoint": endpoint,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_client(wireguard_config_path, new_config)

            save_stuff_gretap63(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            break

        elif choice == "0":
            wireguard_gre6tap_noconjuction_kharej1_5iran()
            break

        else:
            print("\033[91mPlease select a valid option.\033[0m")


def wireguardafter_gre6tapn_kharej_client4():
    wireguard_config_path = "/etc/wireguard/wireclient.conf"
    gre6_path = "/etc/gre64.sh"
    new_gre6_private_ip = None

    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig(wireguard_config_path)
    )

    local_ip_gre6 = local_ip(gre6_path)
    remote_ip_gre6 = remote_ip(gre6_path)
    private_ip_gre6 = private_gre6tap(gre6_path)

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCould not retrieve the WireGuard configuration.\033[0m")
        return

    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("Could not retrieve the GRE6TAP IP addresses from gre6 file.")
        return

    while True:
        os.system("clear")
        display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips)
        display_stuff_gre6tapn(local_ip_gre6, remote_ip_gre6, private_ip_gre6)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[93mWireGuard & GRE6TAP\033[97m Kharej Client\033[92m [4]\033[93m Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print(" \033[93mThis is Kharej Client \033[97m[4]\033[0m")
        print("1. \033[93mChange \033[97mWireGuard Private IP Address\033[0m")
        print("2. \033[93mChange \033[97mGRE6TAP\033[93m Private IP Address\033[0m")
        print("3. \033[93mChange \033[92mTunnel Port\033[0m")
        print("4.\033[93m Change \033[92mIRAN Server IP \033[96m(Endpoint IP)\033[0m")
        print("5. \033[92mSave and Exit\033[0m")
        print("0. Back to the previous menu")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice: ")

        if choice == "1":
            new_ip = input("\033[93mEnter New WireGuard Private IP Address : \033[0m")
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                local_ip_gre6 = new_ip
                remote_ip_gre6 = wtb_opposite_ip_wireguard(new_ip)
                allowed_ips = (
                    f"{remote_ip_gre6}/128" if ":" in new_ip else f"{remote_ip_gre6}/32"
                )

                update_gre6tap_ips(
                    gre6_path, new_local_ip=new_ip, new_remote_ip=remote_ip_gre6
                )
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec_client(remote_ip_gre6)

            else:
                print("\033[91mInvalid IP Address!\033[0m")

        elif choice == "2":
            new_gre6_private_ip = input(
                "\033[93mEnter New GRE6TAP Private IP Address : \033[0m"
            )
            if new_gre6_private_ip:
                private_ip_gre6 = new_gre6_private_ip
                update_gre6tap_ips(gre6_path, new_private_ip=private_ip_gre6)
            else:
                print("\033[91mInvalid GRE6TAP Private IP Address!\033[0m")

        elif choice == "3":
            listen_port, endpoint = update_tunnel_port(listen_port, endpoint)
            update_ufw_ruleswireguard(
                address_no_subnet, address_no_subnet, listen_port, listen_port
            )
        elif choice == "4":
            endpoint = update_endpoint_ir_server(endpoint)

        elif choice == "5":
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "Endpoint": endpoint,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_client(wireguard_config_path, new_config)

            save_stuff_gretap64(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            break

        elif choice == "0":
            wireguard_gre6tap_noconjuction_kharej1_5iran()
            break

        else:
            print("\033[91mPlease select a valid option.\033[0m")


def wireguardafter_gre6tapn_kharej_client5():
    wireguard_config_path = "/etc/wireguard/wireclient.conf"
    gre6_path = "/etc/gre65.sh"
    new_gre6_private_ip = None

    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig(wireguard_config_path)
    )

    local_ip_gre6 = local_ip(gre6_path)
    remote_ip_gre6 = remote_ip(gre6_path)
    private_ip_gre6 = private_gre6tap(gre6_path)

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCould not retrieve the WireGuard configuration.\033[0m")
        return

    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("Could not retrieve the GRE6TAP IP addresses from gre6 file.")
        return

    while True:
        os.system("clear")
        display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips)
        display_stuff_gre6tapn(local_ip_gre6, remote_ip_gre6, private_ip_gre6)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[93mWireGuard & GRE6TAP\033[97m Kharej Client\033[92m [5]\033[93m Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print(" \033[93mThis is Kharej Client \033[97m[5]\033[0m")
        print("1. \033[93mChange \033[97mWireGuard Private IP Address\033[0m")
        print("2. \033[93mChange \033[97mGRE6TAP\033[93m Private IP Address\033[0m")
        print("3. \033[93mChange \033[92mTunnel Port\033[0m")
        print("4.\033[93m Change \033[92mIRAN Server IP \033[96m(Endpoint IP)\033[0m")
        print("5. \033[92mSave and Exit\033[0m")
        print("0. Back to the previous menu")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice: ")

        if choice == "1":
            new_ip = input("\033[93mEnter New WireGuard Private IP Address : \033[0m")
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                local_ip_gre6 = new_ip
                remote_ip_gre6 = wtb_opposite_ip_wireguard(new_ip)
                allowed_ips = (
                    f"{remote_ip_gre6}/128" if ":" in new_ip else f"{remote_ip_gre6}/32"
                )

                update_gre6tap_ips(
                    gre6_path, new_local_ip=new_ip, new_remote_ip=remote_ip_gre6
                )
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec_client(remote_ip_gre6)

            else:
                print("\033[91mInvalid IP Address!\033[0m")

        elif choice == "2":
            new_gre6_private_ip = input(
                "\033[93mEnter New GRE6TAP Private IP Address : \033[0m"
            )
            if new_gre6_private_ip:
                private_ip_gre6 = new_gre6_private_ip
                update_gre6tap_ips(gre6_path, new_private_ip=private_ip_gre6)
            else:
                print("\033[91mInvalid GRE6TAP Private IP Address!\033[0m")

        elif choice == "3":
            listen_port, endpoint = update_tunnel_port(listen_port, endpoint)
            update_ufw_ruleswireguard(
                address_no_subnet, address_no_subnet, listen_port, listen_port
            )
        elif choice == "4":
            endpoint = update_endpoint_ir_server(endpoint)

        elif choice == "5":
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "Endpoint": endpoint,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_client(wireguard_config_path, new_config)

            save_stuff_gretap65(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            break

        elif choice == "0":
            wireguard_gre6tap_noconjuction_kharej1_5iran()
            break

        else:
            print("\033[91mPlease select a valid option.\033[0m")


# gre6tap ipsec
def update_ipsec_conf_wireguard_gre6tapserver1(name, new_private_ip):
    try:
        with open(name, "r") as f:
            content = f.readlines()

        start_idx, end_idx = None, None
        for i, line in enumerate(content):
            if line.strip() == "conn GRE61":
                start_idx = i
            elif start_idx is not None and line.strip().startswith("conn "):
                end_idx = i
                break

        if start_idx is None:
            print("\033[91m'conn GRE61' section not found\033[0m")
            return

        if end_idx is None:
            end_idx = len(content)

        section = content[start_idx:end_idx]

        ip_type = (
            "ipv6"
            if isinstance(ipaddress.ip_address(new_private_ip), ipaddress.IPv6Address)
            else "ipv4"
        )

        if ip_type == "ipv6":
            subnet = "/64"
        else:
            subnet = "/32"

        ip_parts = (
            new_private_ip.split(".")
            if ip_type == "ipv4"
            else new_private_ip.split(":")
        )
        if new_private_ip.endswith(".2") or new_private_ip.endswith(":2"):
            ip_parts[-1] = "1"
        else:
            ip_parts[-1] = "2"
        counterpart_ip = ".".join(ip_parts) if ip_type == "ipv4" else ":".join(ip_parts)

        new_section = []
        for line in section:
            line = re.sub(
                r"leftsubnet=\S+", f"leftsubnet={new_private_ip}{subnet}", line
            )
            line = re.sub(r"leftid=\S+", f"leftid={new_private_ip}", line)
            line = re.sub(r"right=\S+", f"right={counterpart_ip}", line)
            line = re.sub(
                r"rightsubnet=\S+", f"rightsubnet={counterpart_ip}{subnet}", line
            )
            new_section.append(line)

        new_content = content[:start_idx] + new_section + content[end_idx:]

        with open(name, "w") as f:
            f.writelines(new_content)

        print(f"\033[92m'conn GRE61' section updated successfully\033[0m")
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def update_ipsec_conf_wireguard_gre6tapserver2(name, new_private_ip):
    try:
        with open(name, "r") as f:
            content = f.readlines()

        start_idx, end_idx = None, None
        for i, line in enumerate(content):
            if line.strip() == "conn GRE62":
                start_idx = i
            elif start_idx is not None and line.strip().startswith("conn "):
                end_idx = i
                break

        if start_idx is None:
            print("\033[91m'conn GRE62' section not found\033[0m")
            return

        if end_idx is None:
            end_idx = len(content)

        section = content[start_idx:end_idx]

        ip_type = (
            "ipv6"
            if isinstance(ipaddress.ip_address(new_private_ip), ipaddress.IPv6Address)
            else "ipv4"
        )

        if ip_type == "ipv6":
            subnet = "/64"
        else:
            subnet = "/32"

        ip_parts = (
            new_private_ip.split(".")
            if ip_type == "ipv4"
            else new_private_ip.split(":")
        )
        if new_private_ip.endswith(".2") or new_private_ip.endswith(":2"):
            ip_parts[-1] = "1"
        else:
            ip_parts[-1] = "2"
        counterpart_ip = ".".join(ip_parts) if ip_type == "ipv4" else ":".join(ip_parts)

        new_section = []
        for line in section:
            line = re.sub(
                r"leftsubnet=\S+", f"leftsubnet={new_private_ip}{subnet}", line
            )
            line = re.sub(r"leftid=\S+", f"leftid={new_private_ip}", line)
            line = re.sub(r"right=\S+", f"right={counterpart_ip}", line)
            line = re.sub(
                r"rightsubnet=\S+", f"rightsubnet={counterpart_ip}{subnet}", line
            )
            new_section.append(line)

        new_content = content[:start_idx] + new_section + content[end_idx:]

        with open(name, "w") as f:
            f.writelines(new_content)

        print(f"\033[92m'conn GRE62' section updated successfully\033[0m")
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def update_ipsec_conf_wireguard_gre6tapserver3(name, new_private_ip):
    try:
        with open(name, "r") as f:
            content = f.readlines()

        start_idx, end_idx = None, None
        for i, line in enumerate(content):
            if line.strip() == "conn GRE63":
                start_idx = i
            elif start_idx is not None and line.strip().startswith("conn "):
                end_idx = i
                break

        if start_idx is None:
            print("\033[91m'conn GRE63' section not found\033[0m")
            return

        if end_idx is None:
            end_idx = len(content)

        section = content[start_idx:end_idx]

        ip_type = (
            "ipv6"
            if isinstance(ipaddress.ip_address(new_private_ip), ipaddress.IPv6Address)
            else "ipv4"
        )

        if ip_type == "ipv6":
            subnet = "/64"
        else:
            subnet = "/32"

        ip_parts = (
            new_private_ip.split(".")
            if ip_type == "ipv4"
            else new_private_ip.split(":")
        )
        if new_private_ip.endswith(".2") or new_private_ip.endswith(":2"):
            ip_parts[-1] = "1"
        else:
            ip_parts[-1] = "2"
        counterpart_ip = ".".join(ip_parts) if ip_type == "ipv4" else ":".join(ip_parts)

        new_section = []
        for line in section:
            line = re.sub(
                r"leftsubnet=\S+", f"leftsubnet={new_private_ip}{subnet}", line
            )
            line = re.sub(r"leftid=\S+", f"leftid={new_private_ip}", line)
            line = re.sub(r"right=\S+", f"right={counterpart_ip}", line)
            line = re.sub(
                r"rightsubnet=\S+", f"rightsubnet={counterpart_ip}{subnet}", line
            )
            new_section.append(line)

        new_content = content[:start_idx] + new_section + content[end_idx:]

        with open(name, "w") as f:
            f.writelines(new_content)

        print(f"\033[92m'conn GRE63' section updated successfully\033[0m")
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def update_ipsec_conf_wireguard_gre6tapserver4(name, new_private_ip):
    try:
        with open(name, "r") as f:
            content = f.readlines()

        start_idx, end_idx = None, None
        for i, line in enumerate(content):
            if line.strip() == "conn GRE64":
                start_idx = i
            elif start_idx is not None and line.strip().startswith("conn "):
                end_idx = i
                break

        if start_idx is None:
            print("\033[91m'conn GRE64' section not found\033[0m")
            return

        if end_idx is None:
            end_idx = len(content)

        section = content[start_idx:end_idx]

        ip_type = (
            "ipv6"
            if isinstance(ipaddress.ip_address(new_private_ip), ipaddress.IPv6Address)
            else "ipv4"
        )

        if ip_type == "ipv6":
            subnet = "/64"
        else:
            subnet = "/32"

        ip_parts = (
            new_private_ip.split(".")
            if ip_type == "ipv4"
            else new_private_ip.split(":")
        )
        if new_private_ip.endswith(".2") or new_private_ip.endswith(":2"):
            ip_parts[-1] = "1"
        else:
            ip_parts[-1] = "2"
        counterpart_ip = ".".join(ip_parts) if ip_type == "ipv4" else ":".join(ip_parts)

        new_section = []
        for line in section:
            line = re.sub(
                r"leftsubnet=\S+", f"leftsubnet={new_private_ip}{subnet}", line
            )
            line = re.sub(r"leftid=\S+", f"leftid={new_private_ip}", line)
            line = re.sub(r"right=\S+", f"right={counterpart_ip}", line)
            line = re.sub(
                r"rightsubnet=\S+", f"rightsubnet={counterpart_ip}{subnet}", line
            )
            new_section.append(line)

        new_content = content[:start_idx] + new_section + content[end_idx:]

        with open(name, "w") as f:
            f.writelines(new_content)

        print(f"\033[92m'conn GRE64' section updated successfully\033[0m")
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def update_ipsec_conf_wireguard_gre6tapserver5(name, new_private_ip):
    try:
        with open(name, "r") as f:
            content = f.readlines()

        start_idx, end_idx = None, None
        for i, line in enumerate(content):
            if line.strip() == "conn GRE65":
                start_idx = i
            elif start_idx is not None and line.strip().startswith("conn "):
                end_idx = i
                break

        if start_idx is None:
            print("\033[91m'conn GRE65' section not found\033[0m")
            return

        if end_idx is None:
            end_idx = len(content)

        section = content[start_idx:end_idx]

        ip_type = (
            "ipv6"
            if isinstance(ipaddress.ip_address(new_private_ip), ipaddress.IPv6Address)
            else "ipv4"
        )

        if ip_type == "ipv6":
            subnet = "/64"
        else:
            subnet = "/32"

        ip_parts = (
            new_private_ip.split(".")
            if ip_type == "ipv4"
            else new_private_ip.split(":")
        )
        if new_private_ip.endswith(".2") or new_private_ip.endswith(":2"):
            ip_parts[-1] = "1"
        else:
            ip_parts[-1] = "2"
        counterpart_ip = ".".join(ip_parts) if ip_type == "ipv4" else ":".join(ip_parts)

        new_section = []
        for line in section:
            line = re.sub(
                r"leftsubnet=\S+", f"leftsubnet={new_private_ip}{subnet}", line
            )
            line = re.sub(r"leftid=\S+", f"leftid={new_private_ip}", line)
            line = re.sub(r"right=\S+", f"right={counterpart_ip}", line)
            line = re.sub(
                r"rightsubnet=\S+", f"rightsubnet={counterpart_ip}{subnet}", line
            )
            new_section.append(line)

        new_content = content[:start_idx] + new_section + content[end_idx:]

        with open(name, "w") as f:
            f.writelines(new_content)

        print(f"\033[92m'conn GRE65' section updated successfully\033[0m")
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def update_ipsec_conf_wireguard_gre6tap(name, new_private_ip):
    try:
        with open(name, "r") as f:
            content = f.read()

        if ":" in new_private_ip:
            ip_parts = new_private_ip.split(":")
            ip_parts[-1] = "1" if ip_parts[-1].endswith("2") else "2"
            counterpart_ip = ":".join(ip_parts)
            subnet_suffix = "/64"
        else:
            ip_parts = new_private_ip.split(".")
            ip_parts[-1] = "1" if ip_parts[-1] == "2" else "2"
            counterpart_ip = ".".join(ip_parts)
            subnet_suffix = "/24"

        new_content = re.sub(
            r"leftsubnet=\S+", f"leftsubnet={new_private_ip}{subnet_suffix}", content
        )
        new_content = re.sub(r"leftid=\S+", f"leftid={new_private_ip}", new_content)
        new_content = re.sub(r"right=\S+", f"right={counterpart_ip}", new_content)
        new_content = re.sub(
            r"rightsubnet=\S+",
            f"rightsubnet={counterpart_ip}{subnet_suffix}",
            new_content,
        )

        with open(name, "w") as f:
            f.write(new_content)

        display_checkmark("\033[92mIPsec configuration updated successfully!\033[0m")

    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mOut of ordinary error: {e}\033[0m")

def wireguardafter_gre6tapnsec_kharejconfig_1():
    wireguard_config_path = "/etc/wireguard/wireserver1.conf"
    gre6_path = "/etc/gre61.sh"
    new_gre6_private_ip = None

    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig(wireguard_config_path)
    )

    local_ip_gre6 = local_ip(gre6_path)
    remote_ip_gre6 = remote_ip(gre6_path)
    private_ip_gre6 = private_gre6tap(gre6_path)

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCould not retrieve the WireGuard configuration.\033[0m")
        return

    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("Could not retrieve the GRE6TAP IP addresses from gre6 file.")
        return

    while True:
        os.system("clear")
        display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips)
        display_stuff_gre6tapn(local_ip_gre6, remote_ip_gre6, private_ip_gre6)
        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[93mWireGuard & GRE6TAP IPSEC\033[97m Kharej Server Config\033[92m [1]\033[93m Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print(" \033[93mThis is Kharej Server \033[97mConfig [1]\033[0m")
        print("1. \033[93mChange \033[97mWireGuard Private IP Address\033[0m")
        print("2. \033[93mChange \033[97mGRE6TAP\033[93m Private IP Address\033[0m")
        print("3. \033[93mChange \033[92mTunnel Port\033[0m")
        print(
            "4.\033[93m Change \033[92mIRAN Client [1] IP \033[96m(Endpoint IP)\033[0m"
        )
        print("5.\033[94m Change IPsec Secret Key\033[0m")
        print("6. \033[92mSave and Exit\033[0m")
        print("0. Back to the previous menu")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice: ")

        if choice == "1":
            new_ip = input("\033[93mEnter New WireGuard Private IP Address : \033[0m")
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                local_ip_gre6 = new_ip
                remote_ip_gre6 = wtb_opposite_ip_wireguard(new_ip)
                allowed_ips = (
                    f"{remote_ip_gre6}/128" if ":" in new_ip else f"{remote_ip_gre6}/32"
                )

                update_gre6tap_ips(
                    gre6_path, new_local_ip=new_ip, new_remote_ip=remote_ip_gre6
                )
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec1(remote_ip_gre6)

            else:
                print("\033[91mInvalid IP Address!\033[0m")

        elif choice == "2":
            new_gre6_private_ip = input(
                "\033[93mEnter New GRE6TAP Private IP Address : \033[0m"
            )
            if new_gre6_private_ip:
                private_ip_gre6 = new_gre6_private_ip
                update_gre6tap_ips(gre6_path, new_private_ip=private_ip_gre6)
                update_ipsec_conf_wireguard_gre6tapserver1(
                    "/etc/ipsec1.conf", new_gre6_private_ip
                )
            else:
                print("\033[91mInvalid GRE6TAP Private IP Address!\033[0m")

        elif choice == "3":
            listen_port, endpoint = update_tunnel_port(listen_port, endpoint)
            update_ufw_ruleswireguard(
                address_no_subnet, address_no_subnet, listen_port, listen_port
            )

        elif choice == "4":
            endpoint = update_endpoint_ip1(endpoint)

        elif choice == "5":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secret Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")

        elif choice == "6":
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "Endpoint": endpoint,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfigsec1(wireguard_config_path, new_config)

            save_stuff_gretap61(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            if new_gre6_private_ip:
                update_ipsec_ip_multi(new_gre6_private_ip)
            break

        elif choice == "0":
            wireguard_gre6tapsec_noconjuction_kharej1_5iran()
            break

        else:
            print("\033[91mPlease select a valid option.\033[0m")


def wireguardafter_gre6tapnsec_kharejconfig_2():
    wireguard_config_path = "/etc/wireguard/wireserver2.conf"
    gre6_path = "/etc/gre62.sh"
    new_gre6_private_ip = None

    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig(wireguard_config_path)
    )

    local_ip_gre6 = local_ip(gre6_path)
    remote_ip_gre6 = remote_ip(gre6_path)
    private_ip_gre6 = private_gre6tap(gre6_path)

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCould not retrieve the WireGuard configuration.\033[0m")
        return

    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("Could not retrieve the GRE6TAP IP addresses from gre6 file.")
        return

    while True:
        os.system("clear")
        display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips)
        display_stuff_gre6tapn(local_ip_gre6, remote_ip_gre6, private_ip_gre6)
        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[93mWireGuard & GRE6TAP IPSEC\033[97m Kharej Server Config\033[92m [2]\033[93m Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print(" \033[93mThis is Kharej Server \033[97mConfig [2]\033[0m")
        print("1. \033[93mChange \033[97mWireGuard Private IP Address\033[0m")
        print("2. \033[93mChange \033[97mGRE6TAP\033[93m Private IP Address\033[0m")
        print("3. \033[93mChange \033[92mTunnel Port\033[0m")
        print(
            "4.\033[93m Change \033[92mIRAN Client [2] IP \033[96m(Endpoint IP)\033[0m"
        )
        print("5.\033[94m Change IPsec Secret Key\033[0m")
        print("6. \033[92mSave and Exit\033[0m")
        print("0. Back to the previous menu")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice: ")

        if choice == "1":
            new_ip = input("\033[93mEnter New WireGuard Private IP Address : \033[0m")
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                local_ip_gre6 = new_ip
                remote_ip_gre6 = wtb_opposite_ip_wireguard(new_ip)
                allowed_ips = (
                    f"{remote_ip_gre6}/128" if ":" in new_ip else f"{remote_ip_gre6}/32"
                )

                update_gre6tap_ips(
                    gre6_path, new_local_ip=new_ip, new_remote_ip=remote_ip_gre6
                )
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec2(remote_ip_gre6)

            else:
                print("\033[91mInvalid IP Address!\033[0m")

        elif choice == "2":
            new_gre6_private_ip = input(
                "\033[93mEnter New GRE6TAP Private IP Address : \033[0m"
            )
            if new_gre6_private_ip:
                private_ip_gre6 = new_gre6_private_ip
                update_gre6tap_ips(gre6_path, new_private_ip=private_ip_gre6)
                update_ipsec_conf_wireguard_gre6tapserver2(
                    "/etc/ipsec1.conf", new_gre6_private_ip
                )
            else:
                print("\033[91mInvalid GRE6TAP Private IP Address!\033[0m")

        elif choice == "3":
            listen_port, endpoint = update_tunnel_port(listen_port, endpoint)
            update_ufw_ruleswireguard(
                address_no_subnet, address_no_subnet, listen_port, listen_port
            )

        elif choice == "4":
            endpoint = update_endpoint_ip2(endpoint)

        elif choice == "5":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secret Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")

        elif choice == "6":
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "Endpoint": endpoint,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfigsec2(wireguard_config_path, new_config)

            save_stuff_gretap62(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            if new_gre6_private_ip:
                update_ipsec_ip_multi2(new_gre6_private_ip)
            break

        elif choice == "0":
            wireguard_gre6tapsec_noconjuction_kharej1_5iran()
            break

        else:
            print("\033[91mPlease select a valid option.\033[0m")


def wireguardafter_gre6tapnsec_kharejconfig_3():
    wireguard_config_path = "/etc/wireguard/wireserver3.conf"
    gre6_path = "/etc/gre63.sh"
    new_gre6_private_ip = None

    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig(wireguard_config_path)
    )

    local_ip_gre6 = local_ip(gre6_path)
    remote_ip_gre6 = remote_ip(gre6_path)
    private_ip_gre6 = private_gre6tap(gre6_path)

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCould not retrieve the WireGuard configuration.\033[0m")
        return

    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("Could not retrieve the GRE6TAP IP addresses from gre6 file.")
        return

    while True:
        os.system("clear")
        display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips)
        display_stuff_gre6tapn(local_ip_gre6, remote_ip_gre6, private_ip_gre6)
        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[93mWireGuard & GRE6TAP IPSEC\033[97m Kharej Server Config\033[92m [3]\033[93m Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print(" \033[93mThis is Kharej Server \033[97mConfig [3]\033[0m")
        print("1. \033[93mChange \033[97mWireGuard Private IP Address\033[0m")
        print("2. \033[93mChange \033[97mGRE6TAP\033[93m Private IP Address\033[0m")
        print("3. \033[93mChange \033[92mTunnel Port\033[0m")
        print(
            "4.\033[93m Change \033[92mIRAN Client [3] IP \033[96m(Endpoint IP)\033[0m"
        )
        print("5.\033[94m Change IPsec Secret Key\033[0m")
        print("6. \033[92mSave and Exit\033[0m")
        print("0. Back to the previous menu")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice: ")

        if choice == "1":
            new_ip = input("\033[93mEnter New WireGuard Private IP Address : \033[0m")
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                local_ip_gre6 = new_ip
                remote_ip_gre6 = wtb_opposite_ip_wireguard(new_ip)
                allowed_ips = (
                    f"{remote_ip_gre6}/128" if ":" in new_ip else f"{remote_ip_gre6}/32"
                )

                update_gre6tap_ips(
                    gre6_path, new_local_ip=new_ip, new_remote_ip=remote_ip_gre6
                )
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec3(remote_ip_gre6)

            else:
                print("\033[91mInvalid IP Address!\033[0m")

        elif choice == "2":
            new_gre6_private_ip = input(
                "\033[93mEnter New GRE6TAP Private IP Address : \033[0m"
            )
            if new_gre6_private_ip:
                private_ip_gre6 = new_gre6_private_ip
                update_gre6tap_ips(gre6_path, new_private_ip=private_ip_gre6)
                update_ipsec_conf_wireguard_gre6tapserver3(
                    "/etc/ipsec1.conf", new_gre6_private_ip
                )
            else:
                print("\033[91mInvalid GRE6TAP Private IP Address!\033[0m")

        elif choice == "3":
            listen_port, endpoint = update_tunnel_port(listen_port, endpoint)
            update_ufw_ruleswireguard(
                address_no_subnet, address_no_subnet, listen_port, listen_port
            )

        elif choice == "4":
            endpoint = update_endpoint_ip3(endpoint)

        elif choice == "5":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secret Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")

        elif choice == "6":
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "Endpoint": endpoint,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfigsec3(wireguard_config_path, new_config)

            save_stuff_gretap63(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            if new_gre6_private_ip:
                update_ipsec_ip_multi3(new_gre6_private_ip)
            break

        elif choice == "0":
            wireguard_gre6tapsec_noconjuction_kharej1_5iran()
            break

        else:
            print("\033[91mPlease select a valid option.\033[0m")


def wireguardafter_gre6tapnsec_kharejconfig_4():
    wireguard_config_path = "/etc/wireguard/wireserver4.conf"
    gre6_path = "/etc/gre64.sh"
    new_gre6_private_ip = None

    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig(wireguard_config_path)
    )

    local_ip_gre6 = local_ip(gre6_path)
    remote_ip_gre6 = remote_ip(gre6_path)
    private_ip_gre6 = private_gre6tap(gre6_path)

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCould not retrieve the WireGuard configuration.\033[0m")
        return

    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("Could not retrieve the GRE6TAP IP addresses from gre6 file.")
        return

    while True:
        os.system("clear")
        display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips)
        display_stuff_gre6tapn(local_ip_gre6, remote_ip_gre6, private_ip_gre6)
        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[93mWireGuard & GRE6TAP IPSEC\033[97m Kharej Server Config\033[92m [4]\033[93m Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print(" \033[93mThis is Kharej Server \033[97mConfig [4]\033[0m")
        print("1. \033[93mChange \033[97mWireGuard Private IP Address\033[0m")
        print("2. \033[93mChange \033[97mGRE6TAP\033[93m Private IP Address\033[0m")
        print("3. \033[93mChange \033[92mTunnel Port\033[0m")
        print(
            "4.\033[93m Change \033[92mIRAN Client [4] IP \033[96m(Endpoint IP)\033[0m"
        )
        print("5.\033[94m Change IPsec Secret Key\033[0m")
        print("6. \033[92mSave and Exit\033[0m")
        print("0. Back to the previous menu")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice: ")

        if choice == "1":
            new_ip = input("\033[93mEnter New WireGuard Private IP Address : \033[0m")
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                local_ip_gre6 = new_ip
                remote_ip_gre6 = wtb_opposite_ip_wireguard(new_ip)
                allowed_ips = (
                    f"{remote_ip_gre6}/128" if ":" in new_ip else f"{remote_ip_gre6}/32"
                )

                update_gre6tap_ips(
                    gre6_path, new_local_ip=new_ip, new_remote_ip=remote_ip_gre6
                )
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec4(remote_ip_gre6)

            else:
                print("\033[91mInvalid IP Address!\033[0m")

        elif choice == "2":
            new_gre6_private_ip = input(
                "\033[93mEnter New GRE6TAP Private IP Address : \033[0m"
            )
            if new_gre6_private_ip:
                private_ip_gre6 = new_gre6_private_ip
                update_gre6tap_ips(gre6_path, new_private_ip=private_ip_gre6)
                update_ipsec_conf_wireguard_gre6tapserver4(
                    "/etc/ipsec1.conf", new_gre6_private_ip
                )
            else:
                print("\033[91mInvalid GRE6TAP Private IP Address!\033[0m")

        elif choice == "3":
            listen_port, endpoint = update_tunnel_port(listen_port, endpoint)
            update_ufw_ruleswireguard(
                address_no_subnet, address_no_subnet, listen_port, listen_port
            )

        elif choice == "4":
            endpoint = update_endpoint_ip4(endpoint)

        elif choice == "5":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secret Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")

        elif choice == "6":
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "Endpoint": endpoint,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfigsec4(wireguard_config_path, new_config)

            save_stuff_gretap64(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            if new_gre6_private_ip:
                update_ipsec_ip_multi4(new_gre6_private_ip)
            break

        elif choice == "0":
            wireguard_gre6tapsec_noconjuction_kharej1_5iran()
            break

        else:
            print("\033[91mPlease select a valid option.\033[0m")


def wireguardafter_gre6tapnsec_kharejconfig_5():
    wireguard_config_path = "/etc/wireguard/wireserver5.conf"
    gre6_path = "/etc/gre65.sh"
    new_gre6_private_ip = None

    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig(wireguard_config_path)
    )

    local_ip_gre6 = local_ip(gre6_path)
    remote_ip_gre6 = remote_ip(gre6_path)
    private_ip_gre6 = private_gre6tap(gre6_path)

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCould not retrieve the WireGuard configuration.\033[0m")
        return

    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("Could not retrieve the GRE6TAP IP addresses from gre6 file.")
        return

    while True:
        os.system("clear")
        display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips)
        display_stuff_gre6tapn(local_ip_gre6, remote_ip_gre6, private_ip_gre6)
        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[93mWireGuard & GRE6TAP IPSEC\033[97m Kharej Server Config\033[92m [5]\033[93m Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print(" \033[93mThis is Kharej Server \033[97mConfig [5]\033[0m")
        print("1. \033[93mChange \033[97mWireGuard Private IP Address\033[0m")
        print("2. \033[93mChange \033[97mGRE6TAP\033[93m Private IP Address\033[0m")
        print("3. \033[93mChange \033[92mTunnel Port\033[0m")
        print(
            "4.\033[93m Change \033[92mIRAN Client [5] IP \033[96m(Endpoint IP)\033[0m"
        )
        print("5.\033[94m Change IPsec Secret Key\033[0m")
        print("6. \033[92mSave and Exit\033[0m")
        print("0. Back to the previous menu")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice: ")

        if choice == "1":
            new_ip = input("\033[93mEnter New WireGuard Private IP Address : \033[0m")
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                local_ip_gre6 = new_ip
                remote_ip_gre6 = wtb_opposite_ip_wireguard(new_ip)
                allowed_ips = (
                    f"{remote_ip_gre6}/128" if ":" in new_ip else f"{remote_ip_gre6}/32"
                )

                update_gre6tap_ips(
                    gre6_path, new_local_ip=new_ip, new_remote_ip=remote_ip_gre6
                )
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec5(remote_ip_gre6)

            else:
                print("\033[91mInvalid IP Address!\033[0m")

        elif choice == "2":
            new_gre6_private_ip = input(
                "\033[93mEnter New GRE6TAP Private IP Address : \033[0m"
            )
            if new_gre6_private_ip:
                private_ip_gre6 = new_gre6_private_ip
                update_gre6tap_ips(gre6_path, new_private_ip=private_ip_gre6)
                update_ipsec_conf_wireguard_gre6tapserver5(
                    "/etc/ipsec1.conf", new_gre6_private_ip
                )
            else:
                print("\033[91mInvalid GRE6TAP Private IP Address!\033[0m")

        elif choice == "3":
            listen_port, endpoint = update_tunnel_port(listen_port, endpoint)
            update_ufw_ruleswireguard(
                address_no_subnet, address_no_subnet, listen_port, listen_port
            )

        elif choice == "4":
            endpoint = update_endpoint_ip5(endpoint)

        elif choice == "5":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secret Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")

        elif choice == "6":
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "Endpoint": endpoint,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfigsec5(wireguard_config_path, new_config)

            save_stuff_gretap65(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            if new_gre6_private_ip:
                update_ipsec_ip_multi5(new_gre6_private_ip)
            break

        elif choice == "0":
            wireguard_gre6tapsec_noconjuction_kharej1_5iran()
            break

        else:
            print("\033[91mPlease select a valid option.\033[0m")


def wireguardafter_gre6tapnsec_iran_client1():
    wireguard_config_path = "/etc/wireguard/wireclient.conf"
    gre6_path = "/etc/gre61.sh"
    new_gre6_private_ip = None

    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig(wireguard_config_path)
    )

    local_ip_gre6 = local_ip(gre6_path)
    remote_ip_gre6 = remote_ip(gre6_path)
    private_ip_gre6 = private_gre6tap(gre6_path)

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCould not retrieve the WireGuard configuration.\033[0m")
        return

    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("Could not retrieve the GRE6TAP IP addresses from gre6 file.")
        return

    while True:
        os.system("clear")
        display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips)
        display_stuff_gre6tapn(local_ip_gre6, remote_ip_gre6, private_ip_gre6)
        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[93mWireGuard & GRE6TAP IPSEC\033[97m IRAN Client\033[92m [1]\033[93m Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print(" \033[93mThis is IRAN Client \033[97m[1]\033[0m")
        print("1. \033[93mChange \033[97mWireGuard Private IP Address\033[0m")
        print("2. \033[93mChange \033[97mGRE6TAP\033[93m Private IP Address\033[0m")
        print("3. \033[93mChange \033[92mTunnel Port\033[0m")
        print("4.\033[93m Change \033[92mKharej Server IP \033[96m(Endpoint IP)\033[0m")
        print("5.\033[94m Change IPsec Secret Key\033[0m")
        print("6. \033[92mSave and Exit\033[0m")
        print("0. Back to the previous menu")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice: ")

        if choice == "1":
            new_ip = input("\033[93mEnter New WireGuard Private IP Address : \033[0m")
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                local_ip_gre6 = new_ip
                remote_ip_gre6 = wtb_opposite_ip_wireguard(new_ip)
                allowed_ips = (
                    f"{remote_ip_gre6}/128" if ":" in new_ip else f"{remote_ip_gre6}/32"
                )

                update_gre6tap_ips(
                    gre6_path, new_local_ip=new_ip, new_remote_ip=remote_ip_gre6
                )
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec_client(remote_ip_gre6)

            else:
                print("\033[91mInvalid IP Address!\033[0m")

        elif choice == "2":
            new_gre6_private_ip = input(
                "\033[93mEnter New GRE6TAP Private IP Address : \033[0m"
            )
            if new_gre6_private_ip:
                private_ip_gre6 = new_gre6_private_ip
                update_gre6tap_ips(gre6_path, new_private_ip=private_ip_gre6)
                update_ipsec_conf_wireguard_gre6tap(
                    "/etc/ipsec1.conf", new_gre6_private_ip
                )
            else:
                print("\033[91mInvalid GRE6TAP Private IP Address!\033[0m")

        elif choice == "3":
            listen_port, endpoint = update_tunnel_port(listen_port, endpoint)
            update_ufw_ruleswireguard(
                address_no_subnet, address_no_subnet, listen_port, listen_port
            )

        elif choice == "4":
            endpoint = update_endpoint_ip_server(endpoint)

        elif choice == "5":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secret Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")

        elif choice == "6":
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "Endpoint": endpoint,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfigsec_client(wireguard_config_path, new_config)

            save_stuff_gretap61(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            if new_gre6_private_ip:
                update_ipsec_ip(new_gre6_private_ip)
            break

        elif choice == "0":
            wireguard_gre6tapsec_noconjuction_kharej1_5iran()
            break

        else:
            print("\033[91mPlease select a valid option.\033[0m")


def wireguardafter_gre6tapnsec_iran_client2():
    wireguard_config_path = "/etc/wireguard/wireclient.conf"
    gre6_path = "/etc/gre62.sh"
    new_gre6_private_ip = None

    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig(wireguard_config_path)
    )

    local_ip_gre6 = local_ip(gre6_path)
    remote_ip_gre6 = remote_ip(gre6_path)
    private_ip_gre6 = private_gre6tap(gre6_path)

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCould not retrieve the WireGuard configuration.\033[0m")
        return

    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("Could not retrieve the GRE6TAP IP addresses from gre6 file.")
        return

    while True:
        os.system("clear")
        display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips)
        display_stuff_gre6tapn(local_ip_gre6, remote_ip_gre6, private_ip_gre6)
        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[93mWireGuard & GRE6TAP IPSEC\033[97m IRAN Client\033[92m [2]\033[93m Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print(" \033[93mThis is IRAN Client \033[97m[2]\033[0m")
        print("1. \033[93mChange \033[97mWireGuard Private IP Address\033[0m")
        print("2. \033[93mChange \033[97mGRE6TAP\033[93m Private IP Address\033[0m")
        print("3. \033[93mChange \033[92mTunnel Port\033[0m")
        print("4.\033[93m Change \033[92mKharej Server IP \033[96m(Endpoint IP)\033[0m")
        print("5.\033[94m Change IPsec Secret Key\033[0m")
        print("6. \033[92mSave and Exit\033[0m")
        print("0. Back to the previous menu")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice: ")

        if choice == "1":
            new_ip = input("\033[93mEnter New WireGuard Private IP Address : \033[0m")
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                local_ip_gre6 = new_ip
                remote_ip_gre6 = wtb_opposite_ip_wireguard(new_ip)
                allowed_ips = (
                    f"{remote_ip_gre6}/128" if ":" in new_ip else f"{remote_ip_gre6}/32"
                )

                update_gre6tap_ips(
                    gre6_path, new_local_ip=new_ip, new_remote_ip=remote_ip_gre6
                )
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec_client(remote_ip_gre6)

            else:
                print("\033[91mInvalid IP Address!\033[0m")

        elif choice == "2":
            new_gre6_private_ip = input(
                "\033[93mEnter New GRE6TAP Private IP Address : \033[0m"
            )
            if new_gre6_private_ip:
                private_ip_gre6 = new_gre6_private_ip
                update_gre6tap_ips(gre6_path, new_private_ip=private_ip_gre6)
                update_ipsec_conf_wireguard_gre6tap(
                    "/etc/ipsec1.conf", new_gre6_private_ip
                )
            else:
                print("\033[91mInvalid GRE6TAP Private IP Address!\033[0m")

        elif choice == "3":
            listen_port, endpoint = update_tunnel_port(listen_port, endpoint)
            update_ufw_ruleswireguard(
                address_no_subnet, address_no_subnet, listen_port, listen_port
            )

        elif choice == "4":
            endpoint = update_endpoint_ip_server(endpoint)

        elif choice == "5":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secret Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")

        elif choice == "6":
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "Endpoint": endpoint,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfigsec_client(wireguard_config_path, new_config)

            save_stuff_gretap62(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            if new_gre6_private_ip:
                update_ipsec_ip(new_gre6_private_ip)
            break

        elif choice == "0":
            wireguard_gre6tapsec_noconjuction_kharej1_5iran()
            break

        else:
            print("\033[91mPlease select a valid option.\033[0m")


def wireguardafter_gre6tapnsec_iran_client3():
    wireguard_config_path = "/etc/wireguard/wireclient.conf"
    gre6_path = "/etc/gre63.sh"
    new_gre6_private_ip = None

    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig(wireguard_config_path)
    )

    local_ip_gre6 = local_ip(gre6_path)
    remote_ip_gre6 = remote_ip(gre6_path)
    private_ip_gre6 = private_gre6tap(gre6_path)

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCould not retrieve the WireGuard configuration.\033[0m")
        return

    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("Could not retrieve the GRE6TAP IP addresses from gre6 file.")
        return

    while True:
        os.system("clear")
        display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips)
        display_stuff_gre6tapn(local_ip_gre6, remote_ip_gre6, private_ip_gre6)
        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[93mWireGuard & GRE6TAP IPSEC\033[97m IRAN Client\033[92m [3]\033[93m Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print(" \033[93mThis is IRAN Client \033[97m[3]\033[0m")
        print("1. \033[93mChange \033[97mWireGuard Private IP Address\033[0m")
        print("2. \033[93mChange \033[97mGRE6TAP\033[93m Private IP Address\033[0m")
        print("3. \033[93mChange \033[92mTunnel Port\033[0m")
        print("4.\033[93m Change \033[92mKharej Server IP \033[96m(Endpoint IP)\033[0m")
        print("5.\033[94m Change IPsec Secret Key\033[0m")
        print("6. \033[92mSave and Exit\033[0m")
        print("0. Back to the previous menu")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice: ")

        if choice == "1":
            new_ip = input("\033[93mEnter New WireGuard Private IP Address : \033[0m")
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                local_ip_gre6 = new_ip
                remote_ip_gre6 = wtb_opposite_ip_wireguard(new_ip)
                allowed_ips = (
                    f"{remote_ip_gre6}/128" if ":" in new_ip else f"{remote_ip_gre6}/32"
                )

                update_gre6tap_ips(
                    gre6_path, new_local_ip=new_ip, new_remote_ip=remote_ip_gre6
                )
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec_client(remote_ip_gre6)

            else:
                print("\033[91mInvalid IP Address!\033[0m")

        elif choice == "2":
            new_gre6_private_ip = input(
                "\033[93mEnter New GRE6TAP Private IP Address : \033[0m"
            )
            if new_gre6_private_ip:
                private_ip_gre6 = new_gre6_private_ip
                update_gre6tap_ips(gre6_path, new_private_ip=private_ip_gre6)
                update_ipsec_conf_wireguard_gre6tap(
                    "/etc/ipsec1.conf", new_gre6_private_ip
                )
            else:
                print("\033[91mInvalid GRE6TAP Private IP Address!\033[0m")

        elif choice == "3":
            listen_port, endpoint = update_tunnel_port(listen_port, endpoint)
            update_ufw_ruleswireguard(
                address_no_subnet, address_no_subnet, listen_port, listen_port
            )

        elif choice == "4":
            endpoint = update_endpoint_ip_server(endpoint)

        elif choice == "5":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secret Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")

        elif choice == "6":
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "Endpoint": endpoint,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfigsec_client(wireguard_config_path, new_config)

            save_stuff_gretap63(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            if new_gre6_private_ip:
                update_ipsec_ip(new_gre6_private_ip)
            break

        elif choice == "0":
            wireguard_gre6tapsec_noconjuction_kharej1_5iran()
            break

        else:
            print("\033[91mPlease select a valid option.\033[0m")


def wireguardafter_gre6tapnsec_iran_client4():
    wireguard_config_path = "/etc/wireguard/wireclient.conf"
    gre6_path = "/etc/gre64.sh"
    new_gre6_private_ip = None

    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig(wireguard_config_path)
    )

    local_ip_gre6 = local_ip(gre6_path)
    remote_ip_gre6 = remote_ip(gre6_path)
    private_ip_gre6 = private_gre6tap(gre6_path)

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCould not retrieve the WireGuard configuration.\033[0m")
        return

    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("Could not retrieve the GRE6TAP IP addresses from gre6 file.")
        return

    while True:
        os.system("clear")
        display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips)
        display_stuff_gre6tapn(local_ip_gre6, remote_ip_gre6, private_ip_gre6)
        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[93mWireGuard & GRE6TAP IPSEC\033[97m IRAN Client\033[92m [4]\033[93m Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print(" \033[93mThis is IRAN Client \033[97m[4]\033[0m")
        print("1. \033[93mChange \033[97mWireGuard Private IP Address\033[0m")
        print("2. \033[93mChange \033[97mGRE6TAP\033[93m Private IP Address\033[0m")
        print("3. \033[93mChange \033[92mTunnel Port\033[0m")
        print("4.\033[93m Change \033[92mKharej Server IP \033[96m(Endpoint IP)\033[0m")
        print("5.\033[94m Change IPsec Secret Key\033[0m")
        print("6. \033[92mSave and Exit\033[0m")
        print("0. Back to the previous menu")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice: ")

        if choice == "1":
            new_ip = input("\033[93mEnter New WireGuard Private IP Address : \033[0m")
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                local_ip_gre6 = new_ip
                remote_ip_gre6 = wtb_opposite_ip_wireguard(new_ip)
                allowed_ips = (
                    f"{remote_ip_gre6}/128" if ":" in new_ip else f"{remote_ip_gre6}/32"
                )

                update_gre6tap_ips(
                    gre6_path, new_local_ip=new_ip, new_remote_ip=remote_ip_gre6
                )
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec_client(remote_ip_gre6)

            else:
                print("\033[91mInvalid IP Address!\033[0m")

        elif choice == "2":
            new_gre6_private_ip = input(
                "\033[93mEnter New GRE6TAP Private IP Address : \033[0m"
            )
            if new_gre6_private_ip:
                private_ip_gre6 = new_gre6_private_ip
                update_gre6tap_ips(gre6_path, new_private_ip=private_ip_gre6)
                update_ipsec_conf_wireguard_gre6tap(
                    "/etc/ipsec1.conf", new_gre6_private_ip
                )
            else:
                print("\033[91mInvalid GRE6TAP Private IP Address!\033[0m")

        elif choice == "3":
            listen_port, endpoint = update_tunnel_port(listen_port, endpoint)
            update_ufw_ruleswireguard(
                address_no_subnet, address_no_subnet, listen_port, listen_port
            )

        elif choice == "4":
            endpoint = update_endpoint_ip_server(endpoint)

        elif choice == "5":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secret Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")

        elif choice == "6":
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "Endpoint": endpoint,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfigsec_client(wireguard_config_path, new_config)

            save_stuff_gretap64(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            if new_gre6_private_ip:
                update_ipsec_ip(new_gre6_private_ip)
            break

        elif choice == "0":
            wireguard_gre6tapsec_noconjuction_kharej1_5iran()
            break

        else:
            print("\033[91mPlease select a valid option.\033[0m")


def wireguardafter_gre6tapnsec_iran_client5():
    wireguard_config_path = "/etc/wireguard/wireclient.conf"
    gre6_path = "/etc/gre65.sh"
    new_gre6_private_ip = None

    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig(wireguard_config_path)
    )

    local_ip_gre6 = local_ip(gre6_path)
    remote_ip_gre6 = remote_ip(gre6_path)
    private_ip_gre6 = private_gre6tap(gre6_path)

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCould not retrieve the WireGuard configuration.\033[0m")
        return

    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("Could not retrieve the GRE6TAP IP addresses from gre6 file.")
        return

    while True:
        os.system("clear")
        display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips)
        display_stuff_gre6tapn(local_ip_gre6, remote_ip_gre6, private_ip_gre6)
        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[93mWireGuard & GRE6TAP IPSEC\033[97m IRAN Client\033[92m [5]\033[93m Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print(" \033[93mThis is IRAN Client \033[97m[5]\033[0m")
        print("1. \033[93mChange \033[97mWireGuard Private IP Address\033[0m")
        print("2. \033[93mChange \033[97mGRE6TAP\033[93m Private IP Address\033[0m")
        print("3. \033[93mChange \033[92mTunnel Port\033[0m")
        print("4.\033[93m Change \033[92mKharej Server IP \033[96m(Endpoint IP)\033[0m")
        print("5.\033[94m Change IPsec Secret Key\033[0m")
        print("6. \033[92mSave and Exit\033[0m")
        print("0. Back to the previous menu")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice: ")

        if choice == "1":
            new_ip = input("\033[93mEnter New WireGuard Private IP Address : \033[0m")
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                local_ip_gre6 = new_ip
                remote_ip_gre6 = wtb_opposite_ip_wireguard(new_ip)
                allowed_ips = (
                    f"{remote_ip_gre6}/128" if ":" in new_ip else f"{remote_ip_gre6}/32"
                )

                update_gre6tap_ips(
                    gre6_path, new_local_ip=new_ip, new_remote_ip=remote_ip_gre6
                )
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec_client(remote_ip_gre6)

            else:
                print("\033[91mInvalid IP Address!\033[0m")

        elif choice == "2":
            new_gre6_private_ip = input(
                "\033[93mEnter New GRE6TAP Private IP Address : \033[0m"
            )
            if new_gre6_private_ip:
                private_ip_gre6 = new_gre6_private_ip
                update_gre6tap_ips(gre6_path, new_private_ip=private_ip_gre6)
                update_ipsec_conf_wireguard_gre6tap(
                    "/etc/ipsec1.conf", new_gre6_private_ip
                )
            else:
                print("\033[91mInvalid GRE6TAP Private IP Address!\033[0m")

        elif choice == "3":
            listen_port, endpoint = update_tunnel_port(listen_port, endpoint)
            update_ufw_ruleswireguard(
                address_no_subnet, address_no_subnet, listen_port, listen_port
            )

        elif choice == "4":
            endpoint = update_endpoint_ip_server(endpoint)

        elif choice == "5":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secret Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")

        elif choice == "6":
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "Endpoint": endpoint,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfigsec_client(wireguard_config_path, new_config)

            save_stuff_gretap65(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            if new_gre6_private_ip:
                update_ipsec_ip(new_gre6_private_ip)
            break

        elif choice == "0":
            wireguard_gre6tapsec_noconjuction_kharej1_5iran()
            break

        else:
            print("\033[91mPlease select a valid option.\033[0m")


# 1 iran 5 kharej client


def update_gre6tap_ips(
    gre6_path, new_local_ip=None, new_remote_ip=None, new_private_ip=None
):
    try:
        with open(gre6_path, "r") as f:
            content = f.read()

        if new_local_ip:
            content = re.sub(r"local (\S+)", f"local {new_local_ip}", content)
        if new_remote_ip:
            content = re.sub(r"remote (\S+)", f"remote {new_remote_ip}", content)
        if new_private_ip:
            content = re.sub(
                r"ip -6 addr add \S+/64 dev azumig6?",
                f"ip -6 addr add {new_private_ip}/64 dev azumig6",
                content,
            )

        with open(gre6_path, "w") as f:
            f.write(content)

    except FileNotFoundError:
        print(f"\033[91mFile {gre6_path} doesn't exist\033[0m")
    except Exception as e:
        print(f"\033[91mOut of ordinary error: {e}\033[0m")


def wireguardafter_gre6tapnsec_iranconfig_1():
    wireguard_config_path = "/etc/wireguard/wireserver1.conf"
    gre6_path = "/etc/gre61.sh"
    new_gre6_private_ip = None

    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig(wireguard_config_path)
    )

    local_ip_gre6 = local_ip(gre6_path)
    remote_ip_gre6 = remote_ip(gre6_path)
    private_ip_gre6 = private_gre6tap(gre6_path)

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCould not retrieve the WireGuard configuration.\033[0m")
        return

    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("Could not retrieve the GRE6TAP IP addresses from gre6 file.")
        return

    while True:
        os.system("clear")
        display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips)
        display_stuff_gre6tapn(local_ip_gre6, remote_ip_gre6, private_ip_gre6)
        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[93mWireGuard & GRE6TAP IPSEC\033[97m IRAN Server Config\033[92m [1]\033[93m Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print(" \033[93mThis is IRAN Server \033[97mConfig [1]\033[0m")
        print("1. \033[93mChange \033[97mWireGuard Private IP Address\033[0m")
        print("2. \033[93mChange \033[97mGRE6TAP\033[93m Private IP Address\033[0m")
        print("3. \033[93mChange \033[92mTunnel Port\033[0m")
        print(
            "4.\033[93m Change \033[92mKharej Client [1] IP \033[96m(Endpoint IP)\033[0m"
        )
        print("5.\033[94m Change IPsec Secret Key\033[0m")
        print("6. \033[92mSave and Exit\033[0m")
        print("0. Back to the previous menu")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice: ")

        if choice == "1":
            new_ip = input("\033[93mEnter New WireGuard Private IP Address : \033[0m")
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                local_ip_gre6 = new_ip
                remote_ip_gre6 = wtb_opposite_ip_wireguard(new_ip)
                allowed_ips = (
                    f"{remote_ip_gre6}/128" if ":" in new_ip else f"{remote_ip_gre6}/32"
                )

                update_gre6tap_ips(
                    gre6_path, new_local_ip=new_ip, new_remote_ip=remote_ip_gre6
                )
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec1(remote_ip_gre6)

            else:
                print("\033[91mInvalid IP Address!\033[0m")

        elif choice == "2":
            new_gre6_private_ip = input(
                "\033[93mEnter New GRE6TAP Private IP Address : \033[0m"
            )
            if new_gre6_private_ip:
                private_ip_gre6 = new_gre6_private_ip
                update_gre6tap_ips(gre6_path, new_private_ip=private_ip_gre6)
                update_ipsec_conf_wireguard_gre6tapserver1(
                    "/etc/ipsec1.conf", new_gre6_private_ip
                )
            else:
                print("\033[91mInvalid GRE6TAP Private IP Address!\033[0m")

        elif choice == "3":
            listen_port, endpoint = update_tunnel_port(listen_port, endpoint)
            update_ufw_ruleswireguard(
                address_no_subnet, address_no_subnet, listen_port, listen_port
            )

        elif choice == "4":
            endpoint = update_endpoint_ir_ip1(endpoint)

        elif choice == "5":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secret Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")

        elif choice == "6":
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "Endpoint": endpoint,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfigsec1(wireguard_config_path, new_config)

            save_stuff_gretap61(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            if new_gre6_private_ip:
                update_ipsec_ip_multi(new_gre6_private_ip)
            break

        elif choice == "0":
            wireguard_gre6tapsec_noconjuction_1iran_5kharej()
            break

        else:
            print("\033[91mPlease select a valid option.\033[0m")


def wireguardafter_gre6tapnsec_iranconfig_2():
    wireguard_config_path = "/etc/wireguard/wireserver2.conf"
    gre6_path = "/etc/gre62.sh"
    new_gre6_private_ip = None

    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig(wireguard_config_path)
    )

    local_ip_gre6 = local_ip(gre6_path)
    remote_ip_gre6 = remote_ip(gre6_path)
    private_ip_gre6 = private_gre6tap(gre6_path)

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCould not retrieve the WireGuard configuration.\033[0m")
        return

    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("Could not retrieve the GRE6TAP IP addresses from gre6 file.")
        return

    while True:
        os.system("clear")
        display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips)
        display_stuff_gre6tapn(local_ip_gre6, remote_ip_gre6, private_ip_gre6)
        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[93mWireGuard & GRE6TAP IPSEC\033[97m IRAN Server Config\033[92m [2]\033[93m Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print(" \033[93mThis is IRAN Server \033[97mConfig [2]\033[0m")
        print("1. \033[93mChange \033[97mWireGuard Private IP Address\033[0m")
        print("2. \033[93mChange \033[97mGRE6TAP\033[93m Private IP Address\033[0m")
        print("3. \033[93mChange \033[92mTunnel Port\033[0m")
        print(
            "4.\033[93m Change \033[92mKharej Client [2] IP \033[96m(Endpoint IP)\033[0m"
        )
        print("5.\033[94m Change IPsec Secret Key\033[0m")
        print("6. \033[92mSave and Exit\033[0m")
        print("0. Back to the previous menu")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice: ")

        if choice == "1":
            new_ip = input("\033[93mEnter New WireGuard Private IP Address : \033[0m")
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                local_ip_gre6 = new_ip
                remote_ip_gre6 = wtb_opposite_ip_wireguard(new_ip)
                allowed_ips = (
                    f"{remote_ip_gre6}/128" if ":" in new_ip else f"{remote_ip_gre6}/32"
                )

                update_gre6tap_ips(
                    gre6_path, new_local_ip=new_ip, new_remote_ip=remote_ip_gre6
                )
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec2(remote_ip_gre6)

            else:
                print("\033[91mInvalid IP Address!\033[0m")

        elif choice == "2":
            new_gre6_private_ip = input(
                "\033[93mEnter New GRE6TAP Private IP Address : \033[0m"
            )
            if new_gre6_private_ip:
                private_ip_gre6 = new_gre6_private_ip
                update_gre6tap_ips(gre6_path, new_private_ip=private_ip_gre6)
                update_ipsec_conf_wireguard_gre6tapserver2(
                    "/etc/ipsec1.conf", new_gre6_private_ip
                )
            else:
                print("\033[91mInvalid GRE6TAP Private IP Address!\033[0m")

        elif choice == "3":
            listen_port, endpoint = update_tunnel_port(listen_port, endpoint)
            update_ufw_ruleswireguard(
                address_no_subnet, address_no_subnet, listen_port, listen_port
            )

        elif choice == "4":
            endpoint = update_endpoint_ir_ip2(endpoint)

        elif choice == "5":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secret Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")

        elif choice == "6":
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "Endpoint": endpoint,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfigsec2(wireguard_config_path, new_config)

            save_stuff_gretap62(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            if new_gre6_private_ip:
                update_ipsec_ip_multi2(new_gre6_private_ip)
            break

        elif choice == "0":
            wireguard_gre6tapsec_noconjuction_1iran_5kharej()
            break

        else:
            print("\033[91mPlease select a valid option.\033[0m")


def wireguardafter_gre6tapnsec_iranconfig_3():
    wireguard_config_path = "/etc/wireguard/wireserver3.conf"
    gre6_path = "/etc/gre63.sh"
    new_gre6_private_ip = None

    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig(wireguard_config_path)
    )

    local_ip_gre6 = local_ip(gre6_path)
    remote_ip_gre6 = remote_ip(gre6_path)
    private_ip_gre6 = private_gre6tap(gre6_path)

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCould not retrieve the WireGuard configuration.\033[0m")
        return

    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("Could not retrieve the GRE6TAP IP addresses from gre6 file.")
        return

    while True:
        os.system("clear")
        display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips)
        display_stuff_gre6tapn(local_ip_gre6, remote_ip_gre6, private_ip_gre6)
        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[93mWireGuard & GRE6TAP IPSEC\033[97m IRAN Server Config\033[92m [3]\033[93m Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print(" \033[93mThis is IRAN Server \033[97mConfig [3]\033[0m")
        print("1. \033[93mChange \033[97mWireGuard Private IP Address\033[0m")
        print("2. \033[93mChange \033[97mGRE6TAP\033[93m Private IP Address\033[0m")
        print("3. \033[93mChange \033[92mTunnel Port\033[0m")
        print(
            "4.\033[93m Change \033[92mKharej Client [3] IP \033[96m(Endpoint IP)\033[0m"
        )
        print("5.\033[94m Change IPsec Secret Key\033[0m")
        print("6. \033[92mSave and Exit\033[0m")
        print("0. Back to the previous menu")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice: ")

        if choice == "1":
            new_ip = input("\033[93mEnter New WireGuard Private IP Address : \033[0m")
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                local_ip_gre6 = new_ip
                remote_ip_gre6 = wtb_opposite_ip_wireguard(new_ip)
                allowed_ips = (
                    f"{remote_ip_gre6}/128" if ":" in new_ip else f"{remote_ip_gre6}/32"
                )

                update_gre6tap_ips(
                    gre6_path, new_local_ip=new_ip, new_remote_ip=remote_ip_gre6
                )
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec3(remote_ip_gre6)

            else:
                print("\033[91mInvalid IP Address!\033[0m")

        elif choice == "2":
            new_gre6_private_ip = input(
                "\033[93mEnter New GRE6TAP Private IP Address : \033[0m"
            )
            if new_gre6_private_ip:
                private_ip_gre6 = new_gre6_private_ip
                update_gre6tap_ips(gre6_path, new_private_ip=private_ip_gre6)
                update_ipsec_conf_wireguard_gre6tapserver3(
                    "/etc/ipsec1.conf", new_gre6_private_ip
                )
            else:
                print("\033[91mInvalid GRE6TAP Private IP Address!\033[0m")

        elif choice == "3":
            listen_port, endpoint = update_tunnel_port(listen_port, endpoint)
            update_ufw_ruleswireguard(
                address_no_subnet, address_no_subnet, listen_port, listen_port
            )

        elif choice == "4":
            endpoint = update_endpoint_ir_ip3(endpoint)

        elif choice == "5":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secret Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")

        elif choice == "6":
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "Endpoint": endpoint,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfigsec3(wireguard_config_path, new_config)

            save_stuff_gretap63(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            if new_gre6_private_ip:
                update_ipsec_ip_multi3(new_gre6_private_ip)
            break

        elif choice == "0":
            wireguard_gre6tapsec_noconjuction_1iran_5kharej()
            break

        else:
            print("\033[91mPlease select a valid option.\033[0m")


def wireguardafter_gre6tapnsec_iranconfig_4():
    wireguard_config_path = "/etc/wireguard/wireserver4.conf"
    gre6_path = "/etc/gre64.sh"
    new_gre6_private_ip = None

    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig(wireguard_config_path)
    )

    local_ip_gre6 = local_ip(gre6_path)
    remote_ip_gre6 = remote_ip(gre6_path)
    private_ip_gre6 = private_gre6tap(gre6_path)

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCould not retrieve the WireGuard configuration.\033[0m")
        return

    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("Could not retrieve the GRE6TAP IP addresses from gre6 file.")
        return

    while True:
        os.system("clear")
        display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips)
        display_stuff_gre6tapn(local_ip_gre6, remote_ip_gre6, private_ip_gre6)
        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[93mWireGuard & GRE6TAP IPSEC\033[97m IRAN Server Config\033[92m [4]\033[93m Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print(" \033[93mThis is IRAN Server \033[97mConfig [4]\033[0m")
        print("1. \033[93mChange \033[97mWireGuard Private IP Address\033[0m")
        print("2. \033[93mChange \033[97mGRE6TAP\033[93m Private IP Address\033[0m")
        print("3. \033[93mChange \033[92mTunnel Port\033[0m")
        print(
            "4.\033[93m Change \033[92mKharej Client [4] IP \033[96m(Endpoint IP)\033[0m"
        )
        print("5.\033[94m Change IPsec Secret Key\033[0m")
        print("6. \033[92mSave and Exit\033[0m")
        print("0. Back to the previous menu")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice: ")

        if choice == "1":
            new_ip = input("\033[93mEnter New WireGuard Private IP Address : \033[0m")
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                local_ip_gre6 = new_ip
                remote_ip_gre6 = wtb_opposite_ip_wireguard(new_ip)
                allowed_ips = (
                    f"{remote_ip_gre6}/128" if ":" in new_ip else f"{remote_ip_gre6}/32"
                )

                update_gre6tap_ips(
                    gre6_path, new_local_ip=new_ip, new_remote_ip=remote_ip_gre6
                )
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec4(remote_ip_gre6)

            else:
                print("\033[91mInvalid IP Address!\033[0m")

        elif choice == "2":
            new_gre6_private_ip = input(
                "\033[93mEnter New GRE6TAP Private IP Address : \033[0m"
            )
            if new_gre6_private_ip:
                private_ip_gre6 = new_gre6_private_ip
                update_gre6tap_ips(gre6_path, new_private_ip=private_ip_gre6)
                update_ipsec_conf_wireguard_gre6tapserver4(
                    "/etc/ipsec1.conf", new_gre6_private_ip
                )
            else:
                print("\033[91mInvalid GRE6TAP Private IP Address!\033[0m")

        elif choice == "3":
            listen_port, endpoint = update_tunnel_port(listen_port, endpoint)
            update_ufw_ruleswireguard(
                address_no_subnet, address_no_subnet, listen_port, listen_port
            )

        elif choice == "4":
            endpoint = update_endpoint_ir_ip4(endpoint)

        elif choice == "5":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secrett Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")

        elif choice == "6":
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "Endpoint": endpoint,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfigsec4(wireguard_config_path, new_config)

            save_stuff_gretap64(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            if new_gre6_private_ip:
                update_ipsec_ip_multi4(new_gre6_private_ip)
            break

        elif choice == "0":
            wireguard_gre6tapsec_noconjuction_1iran_5kharej()
            break

        else:
            print("\033[91mPlease select a valid option.\033[0m")


def wireguardafter_gre6tapnsec_iranconfig_5():
    wireguard_config_path = "/etc/wireguard/wireserver5.conf"
    gre6_path = "/etc/gre65.sh"
    new_gre6_private_ip = None

    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig(wireguard_config_path)
    )

    local_ip_gre6 = local_ip(gre6_path)
    remote_ip_gre6 = remote_ip(gre6_path)
    private_ip_gre6 = private_gre6tap(gre6_path)

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCould not retrieve the WireGuard configuration.\033[0m")
        return

    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("Could not retrieve the GRE6TAP IP addresses from gre6 file.")
        return

    while True:
        os.system("clear")
        display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips)
        display_stuff_gre6tapn(local_ip_gre6, remote_ip_gre6, private_ip_gre6)
        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[93mWireGuard & GRE6TAP IPSEC\033[97m IRAN Server Config\033[92m [5]\033[93m Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print(" \033[93mThis is IRAN Server \033[97mConfig [5]\033[0m")
        print("1. \033[93mChange \033[97mWireGuard Private IP Address\033[0m")
        print("2. \033[93mChange \033[97mGRE6TAP\033[93m Private IP Address\033[0m")
        print("3. \033[93mChange \033[92mTunnel Port\033[0m")
        print(
            "4.\033[93m Change \033[92mKharej Client [5] IP \033[96m(Endpoint IP)\033[0m"
        )
        print("5.\033[94m Change IPsec Secret Key\033[0m")
        print("6. \033[92mSave and Exit\033[0m")
        print("0. Back to the previous menu")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice: ")

        if choice == "1":
            new_ip = input("\033[93mEnter New WireGuard Private IP Address : \033[0m")
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                local_ip_gre6 = new_ip
                remote_ip_gre6 = wtb_opposite_ip_wireguard(new_ip)
                allowed_ips = (
                    f"{remote_ip_gre6}/128" if ":" in new_ip else f"{remote_ip_gre6}/32"
                )

                update_gre6tap_ips(
                    gre6_path, new_local_ip=new_ip, new_remote_ip=remote_ip_gre6
                )
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec5(remote_ip_gre6)

            else:
                print("\033[91mInvalid IP Address!\033[0m")

        elif choice == "2":
            new_gre6_private_ip = input(
                "\033[93mEnter New GRE6TAP Private IP Address : \033[0m"
            )
            if new_gre6_private_ip:
                private_ip_gre6 = new_gre6_private_ip
                update_gre6tap_ips(gre6_path, new_private_ip=private_ip_gre6)
                update_ipsec_conf_wireguard_gre6tapserver5(
                    "/etc/ipsec1.conf", new_gre6_private_ip
                )
            else:
                print("\033[91mInvalid GRE6TAP Private IP Address!\033[0m")

        elif choice == "3":
            listen_port, endpoint = update_tunnel_port(listen_port, endpoint)
            update_ufw_ruleswireguard(
                address_no_subnet, address_no_subnet, listen_port, listen_port
            )

        elif choice == "4":
            endpoint = update_endpoint_ir_ip5(endpoint)

        elif choice == "5":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secret Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")

        elif choice == "6":
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "Endpoint": endpoint,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfigsec5(wireguard_config_path, new_config)

            save_stuff_gretap65(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            if new_gre6_private_ip:
                update_ipsec_ip_multi5(new_gre6_private_ip)
            break

        elif choice == "0":
            wireguard_gre6tapsec_noconjuction_1iran_5kharej()
            break

        else:
            print("\033[91mPlease select a valid option.\033[0m")


def wireguardafter_gre6tapnsec_kharej_client1():
    wireguard_config_path = "/etc/wireguard/wireclient.conf"
    gre6_path = "/etc/gre61.sh"
    new_gre6_private_ip = None

    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig(wireguard_config_path)
    )

    local_ip_gre6 = local_ip(gre6_path)
    remote_ip_gre6 = remote_ip(gre6_path)
    private_ip_gre6 = private_gre6tap(gre6_path)

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCould not retrieve the WireGuard configuration.\033[0m")
        return

    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("Could not retrieve the GRE6TAP IP addresses from gre6 file.")
        return

    while True:
        os.system("clear")
        display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips)
        display_stuff_gre6tapn(local_ip_gre6, remote_ip_gre6, private_ip_gre6)
        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[93mWireGuard & GRE6TAP IPSEC\033[97m Kharej Client\033[92m [1]\033[93m Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print(" \033[93mThis is Kharej Client \033[97m[1]\033[0m")
        print("1. \033[93mChange \033[97mWireGuard Private IP Address\033[0m")
        print("2. \033[93mChange \033[97mGRE6TAP\033[93m Private IP Address\033[0m")
        print("3. \033[93mChange \033[92mTunnel Port\033[0m")
        print("4.\033[93m Change \033[92mIRAN Server IP \033[96m(Endpoint IP)\033[0m")
        print("5.\033[94m Change IPsec Secret Key\033[0m")
        print("6. \033[92mSave and Exit\033[0m")
        print("0. Back to the previous menu")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice: ")

        if choice == "1":
            new_ip = input("\033[93mEnter New WireGuard Private IP Address : \033[0m")
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                local_ip_gre6 = new_ip
                remote_ip_gre6 = wtb_opposite_ip_wireguard(new_ip)
                allowed_ips = (
                    f"{remote_ip_gre6}/128" if ":" in new_ip else f"{remote_ip_gre6}/32"
                )

                update_gre6tap_ips(
                    gre6_path, new_local_ip=new_ip, new_remote_ip=remote_ip_gre6
                )
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec_client(remote_ip_gre6)

            else:
                print("\033[91mInvalid IP Address!\033[0m")

        elif choice == "2":
            new_gre6_private_ip = input(
                "\033[93mEnter New GRE6TAP Private IP Address : \033[0m"
            )
            if new_gre6_private_ip:
                private_ip_gre6 = new_gre6_private_ip
                update_gre6tap_ips(gre6_path, new_private_ip=private_ip_gre6)
                update_ipsec_conf_wireguard_gre6tap(
                    "/etc/ipsec1.conf", new_gre6_private_ip
                )
            else:
                print("\033[91mInvalid GRE6TAP Private IP Address!\033[0m")

        elif choice == "3":
            listen_port, endpoint = update_tunnel_port(listen_port, endpoint)
            update_ufw_ruleswireguard(
                address_no_subnet, address_no_subnet, listen_port, listen_port
            )

        elif choice == "4":
            endpoint = update_endpoint_ir_server(endpoint)

        elif choice == "5":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secret Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")

        elif choice == "6":
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "Endpoint": endpoint,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfigsec_client(wireguard_config_path, new_config)

            save_stuff_gretap61(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            if new_gre6_private_ip:
                update_ipsec_ip(new_gre6_private_ip)
            break

        elif choice == "0":
            wireguard_gre6tapsec_noconjuction_1iran_5kharej()
            break

        else:
            print("\033[91mPlease select a valid option.\033[0m")


def wireguardafter_gre6tapnsec_kharej_client2():
    wireguard_config_path = "/etc/wireguard/wireclient.conf"
    gre6_path = "/etc/gre62.sh"
    new_gre6_private_ip = None

    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig(wireguard_config_path)
    )

    local_ip_gre6 = local_ip(gre6_path)
    remote_ip_gre6 = remote_ip(gre6_path)
    private_ip_gre6 = private_gre6tap(gre6_path)

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCould not retrieve the WireGuard configuration.\033[0m")
        return

    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("Could not retrieve the GRE6TAP IP addresses from gre6 file.")
        return

    while True:
        os.system("clear")
        display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips)
        display_stuff_gre6tapn(local_ip_gre6, remote_ip_gre6, private_ip_gre6)
        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[93mWireGuard & GRE6TAP IPSEC\033[97m Kharej Client\033[92m [2]\033[93m Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print(" \033[93mThis is Kharej Client \033[97m[2]\033[0m")
        print("1. \033[93mChange \033[97mWireGuard Private IP Address\033[0m")
        print("2. \033[93mChange \033[97mGRE6TAP\033[93m Private IP Address\033[0m")
        print("3. \033[93mChange \033[92mTunnel Port\033[0m")
        print("4.\033[93m Change \033[92mIRAN Server IP \033[96m(Endpoint IP)\033[0m")
        print("5.\033[94m Change IPsec Secret Key\033[0m")
        print("6. \033[92mSave and Exit\033[0m")
        print("0. Back to the previous menu")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice: ")

        if choice == "1":
            new_ip = input("\033[93mEnter New WireGuard Private IP Address : \033[0m")
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                local_ip_gre6 = new_ip
                remote_ip_gre6 = wtb_opposite_ip_wireguard(new_ip)
                allowed_ips = (
                    f"{remote_ip_gre6}/128" if ":" in new_ip else f"{remote_ip_gre6}/32"
                )

                update_gre6tap_ips(
                    gre6_path, new_local_ip=new_ip, new_remote_ip=remote_ip_gre6
                )
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec_client(remote_ip_gre6)

            else:
                print("\033[91mInvalid IP Address!\033[0m")

        elif choice == "2":
            new_gre6_private_ip = input(
                "\033[93mEnter New GRE6TAP Private IP Address : \033[0m"
            )
            if new_gre6_private_ip:
                private_ip_gre6 = new_gre6_private_ip
                update_gre6tap_ips(gre6_path, new_private_ip=private_ip_gre6)
                update_ipsec_conf_wireguard_gre6tap(
                    "/etc/ipsec1.conf", new_gre6_private_ip
                )
            else:
                print("\033[91mInvalid GRE6TAP Private IP Address!\033[0m")

        elif choice == "3":
            listen_port, endpoint = update_tunnel_port(listen_port, endpoint)
            update_ufw_ruleswireguard(
                address_no_subnet, address_no_subnet, listen_port, listen_port
            )

        elif choice == "4":
            endpoint = update_endpoint_ir_server(endpoint)

        elif choice == "5":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secret Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")

        elif choice == "6":
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "Endpoint": endpoint,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfigsec_client(wireguard_config_path, new_config)

            save_stuff_gretap62(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            if new_gre6_private_ip:
                update_ipsec_ip(new_gre6_private_ip)
            break

        elif choice == "0":
            wireguard_gre6tapsec_noconjuction_1iran_5kharej()
            break

        else:
            print("\033[91mPlease select a valid option.\033[0m")


def wireguardafter_gre6tapnsec_kharej_client3():
    wireguard_config_path = "/etc/wireguard/wireclient.conf"
    gre6_path = "/etc/gre63.sh"
    new_gre6_private_ip = None

    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig(wireguard_config_path)
    )

    local_ip_gre6 = local_ip(gre6_path)
    remote_ip_gre6 = remote_ip(gre6_path)
    private_ip_gre6 = private_gre6tap(gre6_path)

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCould not retrieve the WireGuard configuration.\033[0m")
        return

    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("Could not retrieve the GRE6TAP IP addresses from gre6 file.")
        return

    while True:
        os.system("clear")
        display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips)
        display_stuff_gre6tapn(local_ip_gre6, remote_ip_gre6, private_ip_gre6)
        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[93mWireGuard & GRE6TAP IPSEC\033[97m Kharej Client\033[92m [3]\033[93m Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print(" \033[93mThis is Kharej Client \033[97m[3]\033[0m")
        print("1. \033[93mChange \033[97mWireGuard Private IP Address\033[0m")
        print("2. \033[93mChange \033[97mGRE6TAP\033[93m Private IP Address\033[0m")
        print("3. \033[93mChange \033[92mTunnel Port\033[0m")
        print("4.\033[93m Change \033[92mIRAN Server IP \033[96m(Endpoint IP)\033[0m")
        print("5.\033[94m Change IPsec Secret Key\033[0m")
        print("6. \033[92mSave and Exit\033[0m")
        print("0. Back to the previous menu")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice: ")

        if choice == "1":
            new_ip = input("\033[93mEnter New WireGuard Private IP Address : \033[0m")
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                local_ip_gre6 = new_ip
                remote_ip_gre6 = wtb_opposite_ip_wireguard(new_ip)
                allowed_ips = (
                    f"{remote_ip_gre6}/128" if ":" in new_ip else f"{remote_ip_gre6}/32"
                )

                update_gre6tap_ips(
                    gre6_path, new_local_ip=new_ip, new_remote_ip=remote_ip_gre6
                )
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec_client(remote_ip_gre6)

            else:
                print("\033[91mInvalid IP Address!\033[0m")

        elif choice == "2":
            new_gre6_private_ip = input(
                "\033[93mEnter New GRE6TAP Private IP Address : \033[0m"
            )
            if new_gre6_private_ip:
                private_ip_gre6 = new_gre6_private_ip
                update_gre6tap_ips(gre6_path, new_private_ip=private_ip_gre6)
                update_ipsec_conf_wireguard_gre6tap(
                    "/etc/ipsec1.conf", new_gre6_private_ip
                )
            else:
                print("\033[91mInvalid GRE6TAP Private IP Address!\033[0m")

        elif choice == "3":
            listen_port, endpoint = update_tunnel_port(listen_port, endpoint)
            update_ufw_ruleswireguard(
                address_no_subnet, address_no_subnet, listen_port, listen_port
            )

        elif choice == "4":
            endpoint = update_endpoint_ir_server(endpoint)

        elif choice == "5":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secret Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")

        elif choice == "6":
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "Endpoint": endpoint,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfigsec_client(wireguard_config_path, new_config)

            save_stuff_gretap63(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            if new_gre6_private_ip:
                update_ipsec_ip(new_gre6_private_ip)
            break

        elif choice == "0":
            wireguard_gre6tapsec_noconjuction_1iran_5kharej()
            break

        else:
            print("\033[91mPlease select a valid option.\033[0m")


def wireguardafter_gre6tapnsec_kharej_client4():
    wireguard_config_path = "/etc/wireguard/wireclient.conf"
    gre6_path = "/etc/gre64.sh"
    new_gre6_private_ip = None

    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig(wireguard_config_path)
    )

    local_ip_gre6 = local_ip(gre6_path)
    remote_ip_gre6 = remote_ip(gre6_path)
    private_ip_gre6 = private_gre6tap(gre6_path)

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCould not retrieve the WireGuard configuration.\033[0m")
        return

    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("Could not retrieve the GRE6TAP IP addresses from gre6 file.")
        return

    while True:
        os.system("clear")
        display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips)
        display_stuff_gre6tapn(local_ip_gre6, remote_ip_gre6, private_ip_gre6)
        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[93mWireGuard & GRE6TAP IPSEC\033[97m Kharej Client\033[92m [4]\033[93m Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print(" \033[93mThis is Kharej Client \033[97m[4]\033[0m")
        print("1. \033[93mChange \033[97mWireGuard Private IP Address\033[0m")
        print("2. \033[93mChange \033[97mGRE6TAP\033[93m Private IP Address\033[0m")
        print("3. \033[93mChange \033[92mTunnel Port\033[0m")
        print("4.\033[93m Change \033[92mIRAN Server IP \033[96m(Endpoint IP)\033[0m")
        print("5.\033[94m Change IPsec Secret Key\033[0m")
        print("6. \033[92mSave and Exit\033[0m")
        print("0. Back to the previous menu")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice: ")

        if choice == "1":
            new_ip = input("\033[93mEnter New WireGuard Private IP Address : \033[0m")
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                local_ip_gre6 = new_ip
                remote_ip_gre6 = wtb_opposite_ip_wireguard(new_ip)
                allowed_ips = (
                    f"{remote_ip_gre6}/128" if ":" in new_ip else f"{remote_ip_gre6}/32"
                )

                update_gre6tap_ips(
                    gre6_path, new_local_ip=new_ip, new_remote_ip=remote_ip_gre6
                )
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec_client(remote_ip_gre6)

            else:
                print("\033[91mInvalid IP Address!\033[0m")

        elif choice == "2":
            new_gre6_private_ip = input(
                "\033[93mEnter New GRE6TAP Private IP Address : \033[0m"
            )
            if new_gre6_private_ip:
                private_ip_gre6 = new_gre6_private_ip
                update_gre6tap_ips(gre6_path, new_private_ip=private_ip_gre6)
                update_ipsec_conf_wireguard_gre6tap(
                    "/etc/ipsec1.conf", new_gre6_private_ip
                )
            else:
                print("\033[91mInvalid GRE6TAP Private IP Address!\033[0m")

        elif choice == "3":
            listen_port, endpoint = update_tunnel_port(listen_port, endpoint)
            update_ufw_ruleswireguard(
                address_no_subnet, address_no_subnet, listen_port, listen_port
            )

        elif choice == "4":
            endpoint = update_endpoint_ir_server(endpoint)

        elif choice == "5":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secret Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")

        elif choice == "6":
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "Endpoint": endpoint,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfigsec_client(wireguard_config_path, new_config)

            save_stuff_gretap64(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            if new_gre6_private_ip:
                update_ipsec_ip(new_gre6_private_ip)
            break

        elif choice == "0":
            wireguard_gre6tapsec_noconjuction_1iran_5kharej()
            break

        else:
            print("\033[91mPlease select a valid option.\033[0m")


def wireguardafter_gre6tapnsec_kharej_client5():
    wireguard_config_path = "/etc/wireguard/wireclient.conf"
    gre6_path = "/etc/gre65.sh"
    new_gre6_private_ip = None

    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig(wireguard_config_path)
    )

    local_ip_gre6 = local_ip(gre6_path)
    remote_ip_gre6 = remote_ip(gre6_path)
    private_ip_gre6 = private_gre6tap(gre6_path)

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCould not retrieve the WireGuard configuration.\033[0m")
        return

    if not local_ip_gre6 or not remote_ip_gre6 or not private_ip_gre6:
        print("Could not retrieve the GRE6TAP IP addresses from gre6 file.")
        return

    while True:
        os.system("clear")
        display_wireguard_config(address_no_subnet, listen_port, endpoint, allowed_ips)
        display_stuff_gre6tapn(local_ip_gre6, remote_ip_gre6, private_ip_gre6)
        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[93mWireGuard & GRE6TAP IPSEC\033[97m Kharej Client\033[92m [5]\033[93m Menu\033[0m"
        )
        print(
            '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
        )
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print(" \033[93mThis is Kharej Client \033[97m[5]\033[0m")
        print("1. \033[93mChange \033[97mWireGuard Private IP Address\033[0m")
        print("2. \033[93mChange \033[97mGRE6TAP\033[93m Private IP Address\033[0m")
        print("3. \033[93mChange \033[92mTunnel Port\033[0m")
        print("4.\033[93m Change \033[92mIRAN Server IP \033[96m(Endpoint IP)\033[0m")
        print("5.\033[94m Change IPsec Secret Key\033[0m")
        print("6. \033[92mSave and Exit\033[0m")
        print("0. Back to the previous menu")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice: ")

        if choice == "1":
            new_ip = input("\033[93mEnter New WireGuard Private IP Address : \033[0m")
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                local_ip_gre6 = new_ip
                remote_ip_gre6 = wtb_opposite_ip_wireguard(new_ip)
                allowed_ips = (
                    f"{remote_ip_gre6}/128" if ":" in new_ip else f"{remote_ip_gre6}/32"
                )

                update_gre6tap_ips(
                    gre6_path, new_local_ip=new_ip, new_remote_ip=remote_ip_gre6
                )
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec_client(remote_ip_gre6)

            else:
                print("\033[91mInvalid IP Address!\033[0m")

        elif choice == "2":
            new_gre6_private_ip = input(
                "\033[93mEnter New GRE6TAP Private IP Address : \033[0m"
            )
            if new_gre6_private_ip:
                private_ip_gre6 = new_gre6_private_ip
                update_gre6tap_ips(gre6_path, new_private_ip=private_ip_gre6)
                update_ipsec_conf_wireguard_gre6tap(
                    "/etc/ipsec1.conf", new_gre6_private_ip
                )
            else:
                print("\033[91mInvalid GRE6TAP Private IP Address!\033[0m")

        elif choice == "3":
            listen_port, endpoint = update_tunnel_port(listen_port, endpoint)
            update_ufw_ruleswireguard(
                address_no_subnet, address_no_subnet, listen_port, listen_port
            )

        elif choice == "4":
            endpoint = update_endpoint_ir_server(endpoint)

        elif choice == "5":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secret Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")

        elif choice == "6":
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "Endpoint": endpoint,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfigsec_client(wireguard_config_path, new_config)

            save_stuff_gretap65(
                private_ip_gre6, local_ip_gre6, remote_ip_gre6, is_gre6=True
            )
            if new_gre6_private_ip:
                update_ipsec_ip(new_gre6_private_ip)
            break

        elif choice == "0":
            wireguard_gre6tapsec_noconjuction_1iran_5kharej()
            break

        else:
            print("\033[91mPlease select a valid option.\033[0m")


def gre6tapwireguardeditserver_mnu():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print(
        "\033[92m(   ) \033[92mEdit local\033[93m GRE6TAP Native + Wireguard Menu\033[0m"
    )
    print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[92mNo IPSEC\033[0m")
    print("2. \033[93mWith IPSEC\033[0m")
    print("3. \033[94mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        choice = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if choice == "1":
            gre6tap_wireguard_nosec_edit_local()
            break
        elif choice == "2":
            gre6tap_wireguard_sec_edit_local()
            break
        elif choice == "3":
            clear()
            wireguard_edit_server()
            break
        else:
            print("Invalid choice.")


def gre6tap_wireguard_nosec_edit_local():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print("\033[92m(   ) \033[93mGre6tap[Native] + Wireguard \033[93m Edit Menu\033[0m")
    print(
        '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
    )
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print(
        "1. \033[92mGre6tap[native] + Wireguard - [1]Kharej Server [5]IRAN Clients\033[0m"
    )
    print(
        "2. \033[93mGre6tap[native] + Wireguard - [1]IRAN   Server [5]Kharej Clients\033[0m"
    )
    print("\033[93m───────────────────────────────────────\033[0m")
    print("0.\033[97mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")
    while True:
        server_type = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if server_type == "1":
            wireguardedit_gre6tap_noconjuction_kharej1_5iran()
            break
        elif server_type == "2":
            wireguardedit_gre6tap_noconjuction_1iran_5kharej()
            break
        elif server_type == "0":
            os.system("clear")
            gre6tapwireguardeditserver_mnu()
            break
        else:
            print("Invalid choice.")


def wireguardedit_gre6tap_noconjuction_1iran_5kharej():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print(
        "\033[92m(   ) \033[93mGre6tap[native] + Wireguard \033[92m[1]IRAN Server\033[96m [5]Kharej Client\033[93m Edit Menu\033[0m"
    )
    print(
        '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
    )
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[92mKharej Client [1] Config\033[0m")
    print("2. \033[92mKharej Client [2] Config\033[0m")
    print("3. \033[92mKharej Client [3] Config\033[0m")
    print("4. \033[93mKharej Client [4] Config\033[0m")
    print("5. \033[92mKharej Client [5] Config\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    print("6. \033[96mIRAN Server Config\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    print("0.\033[97mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")
    while True:
        server_type = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if server_type == "1":
            wireguard_gre6tapn_kharej_client1()
            break
        elif server_type == "2":
            wireguard_gre6tapn_kharej_client2()
            break
        elif server_type == "3":
            wireguard_gre6tapn_kharej_client3()
            break
        elif server_type == "4":
            wireguard_gre6tapn_kharej_client4()
            break
        elif server_type == "5":
            wireguard_gre6tapn_kharej_client5()
            break
        elif server_type == "6":
            wireguard_gre6tapn_iran_server()
            break
        elif server_type == "0":
            os.system("clear")
            gre6tap_wireguard_nosec_edit_local()
            break
        else:
            print("Invalid choice.")


def wireguard_gre6tapn_iran_server():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print(
        "\033[92m(   ) \033[93mGre6tap[native] + Wireguard \033[92m[1]IRAN Server\033[96m [5]Kharej Client\033[93m Edit Menu\033[0m"
    )
    print(
        '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
    )
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[92mIRAN Server Config [1] \033[0m")
    print("2. \033[92mIRAN Server Config [2]\033[0m")
    print("3. \033[93mIRAN Server Config [3]\033[0m")
    print("4. \033[92mIRAN Server Config [4]\033[0m")
    print("5. \033[92mIRAN Server Config [5]\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    print("0.\033[97mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")
    while True:
        server_type = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if server_type == "1":
            wireguard_gre6tapn_iranconfig_1()
            break
        elif server_type == "2":
            wireguard_gre6tapn_iranconfig_2()
            break
        elif server_type == "3":
            wireguard_gre6tapn_iranconfig_3()
            break
        elif server_type == "4":
            wireguard_gre6tapn_iranconfig_4()
            break
        elif server_type == "5":
            wireguard_gre6tapn_iranconfig_5()
            break
        elif server_type == "0":
            os.system("clear")
            wireguardedit_gre6tap_noconjuction_1iran_5kharej()
            break
        else:
            print("Invalid choice.")


def wireguardedit_gre6tap_noconjuction_kharej1_5iran():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print(
        "\033[92m(   ) \033[93mGre6tap[native] + Wireguard \033[92m[1]Kharej Server\033[96m [5]IRAN Client\033[93m Edit Menu\033[0m"
    )
    print(
        '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
    )
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[92mIRAN Client [1] Config\033[0m")
    print("2. \033[92mIRAN Client [2] Config\033[0m")
    print("3. \033[92mIRAN Client [3] Config\033[0m")
    print("4. \033[93mIRAN Client [4] Config\033[0m")
    print("5. \033[92mIRAN Client [5] Config\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    print("6. \033[96mKharej Server Config\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    print("0.\033[97mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")
    while True:
        server_type = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if server_type == "1":
            wireguard_gre6tapn_iran_client1()
            break
        elif server_type == "2":
            wireguard_gre6tapn_iran_client2()
            break
        elif server_type == "3":
            wireguard_gre6tapn_iran_client3()
            break
        elif server_type == "4":
            wireguard_gre6tapn_iran_client4()
            break
        elif server_type == "5":
            wireguard_gre6tapn_iran_client5()
            break
        elif server_type == "6":
            wireguard_gre6tapn_kharej_server()
            break
        elif server_type == "0":
            os.system("clear")
            gre6tap_wireguard_nosec_edit_local()
            break
        else:
            print("Invalid choice.")


def wireguard_gre6tapn_kharej_server():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print(
        "\033[92m(   ) \033[93mGre6tap[native] + Wireguard \033[92m[1]Kharej Server\033[96m [5]IRAN Client\033[93m Edit Menu\033[0m"
    )
    print(
        '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
    )
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[92mKharej Server Config [1] \033[0m")
    print("2. \033[92mKharej Server Config [2]\033[0m")
    print("3. \033[93mKharej Server Config [3]\033[0m")
    print("4. \033[92mKharej Server Config [4]\033[0m")
    print("5. \033[92mKharej Server Config [5]\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    print("0.\033[97mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")
    while True:
        server_type = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if server_type == "1":
            wireguard_gre6tapn_kharejconfig_1()
            break
        elif server_type == "2":
            wireguard_gre6tapn_kharejconfig_2()
            break
        elif server_type == "3":
            wireguard_gre6tapn_kharejconfig_3()
            break
        elif server_type == "4":
            wireguard_gre6tapn_kharejconfig_4()
            break
        elif server_type == "5":
            wireguard_gre6tapn_kharejconfig_5()
            break
        elif server_type == "0":
            os.system("clear")
            wireguardedit_gre6tap_noconjuction_kharej1_5iran()
            break
        else:
            print("Invalid choice.")


###


def display_stuff_gre6tapn_wire_iran1(local_ip, remote_ip, private_ip):
    lines = [
        f"\033[93mTitle:         GRE6TAP Configuration\033[0m",
        f"\033[97m──────────────────────────────────────\033[0m",
        f"\033[92mIRAN IPV6:       \033[97m{local_ip}\033[0m",
        f"\033[92mKharej [1] IPV6: \033[97m{remote_ip}\033[0m",
        f"\033[93mPrivate IP:      \033[97m{private_ip}\033[0m",
    ]
    box_width = 50

    print("\033[93m╭" + "─" * (box_width - 2) + "╮\033[0m")

    for line in lines:
        print(f"\033[93m {line:<{box_width - 4}} \033[0m")

    print("\033[93m╰" + "─" * (box_width - 2) + "╯\033[0m")


def display_stuff_gre6tapn_wire_iran2(local_ip, remote_ip, private_ip):
    lines = [
        f"\033[93mTitle:         GRE6TAP Configuration\033[0m",
        f"\033[97m──────────────────────────────────────\033[0m",
        f"\033[92mIRAN IPV6:       \033[97m{local_ip}\033[0m",
        f"\033[92mKharej [2] IPV6: \033[97m{remote_ip}\033[0m",
        f"\033[93mPrivate IP:      \033[97m{private_ip}\033[0m",
    ]
    box_width = 50

    print("\033[93m╭" + "─" * (box_width - 2) + "╮\033[0m")

    for line in lines:
        print(f"\033[93m {line:<{box_width - 4}} \033[0m")

    print("\033[93m╰" + "─" * (box_width - 2) + "╯\033[0m")


def display_stuff_gre6tapn_wire_iran3(local_ip, remote_ip, private_ip):
    lines = [
        f"\033[93mTitle:         GRE6TAP Configuration\033[0m",
        f"\033[97m──────────────────────────────────────\033[0m",
        f"\033[92mIRAN IPV6:       \033[97m{local_ip}\033[0m",
        f"\033[92mKharej [3] IPV6: \033[97m{remote_ip}\033[0m",
        f"\033[93mPrivate IP:      \033[97m{private_ip}\033[0m",
    ]
    box_width = 50

    print("\033[93m╭" + "─" * (box_width - 2) + "╮\033[0m")

    for line in lines:
        print(f"\033[93m {line:<{box_width - 4}} \033[0m")

    print("\033[93m╰" + "─" * (box_width - 2) + "╯\033[0m")


def display_stuff_gre6tapn_wire_iran4(local_ip, remote_ip, private_ip):
    lines = [
        f"\033[93mTitle:         GRE6TAP Configuration\033[0m",
        f"\033[97m──────────────────────────────────────\033[0m",
        f"\033[92mIRAN IPV6:       \033[97m{local_ip}\033[0m",
        f"\033[92mKharej [4] IPV6: \033[97m{remote_ip}\033[0m",
        f"\033[93mPrivate IP:      \033[97m{private_ip}\033[0m",
    ]
    box_width = 50

    print("\033[93m╭" + "─" * (box_width - 2) + "╮\033[0m")

    for line in lines:
        print(f"\033[93m {line:<{box_width - 4}} \033[0m")

    print("\033[93m╰" + "─" * (box_width - 2) + "╯\033[0m")


def display_stuff_gre6tapn_wire_iran5(local_ip, remote_ip, private_ip):
    lines = [
        f"\033[93mTitle:         GRE6TAP Configuration\033[0m",
        f"\033[97m──────────────────────────────────────\033[0m",
        f"\033[92mIRAN IPV6:       \033[97m{local_ip}\033[0m",
        f"\033[92mKharej [5] IPV6: \033[97m{remote_ip}\033[0m",
        f"\033[93mPrivate IP:      \033[97m{private_ip}\033[0m",
    ]
    box_width = 50

    print("\033[93m╭" + "─" * (box_width - 2) + "╮\033[0m")

    for line in lines:
        print(f"\033[93m {line:<{box_width - 4}} \033[0m")

    print("\033[93m╰" + "─" * (box_width - 2) + "╯\033[0m")


def display_stuff_gre6tapn_wire_iran_client1(local_ip, remote_ip, private_ip):
    lines = [
        f"\033[93mTitle:         GRE6TAP Configuration\033[0m",
        f"\033[97m──────────────────────────────────────\033[0m",
        f"\033[92mIRAN [1] IPV6:   \033[97m{local_ip}\033[0m",
        f"\033[92mKharej IPV6:     \033[97m{remote_ip}\033[0m",
        f"\033[93mPrivate IP:      \033[97m{private_ip}\033[0m",
    ]
    box_width = 50

    print("\033[93m╭" + "─" * (box_width - 2) + "╮\033[0m")

    for line in lines:
        print(f"\033[93m {line:<{box_width - 4}} \033[0m")

    print("\033[93m╰" + "─" * (box_width - 2) + "╯\033[0m")


def display_stuff_gre6tapn_wire_iran_client2(local_ip, remote_ip, private_ip):
    lines = [
        f"\033[93mTitle:         GRE6TAP Configuration\033[0m",
        f"\033[97m──────────────────────────────────────\033[0m",
        f"\033[92mIRAN [2] IPV6:   \033[97m{local_ip}\033[0m",
        f"\033[92mKharej IPV6:     \033[97m{remote_ip}\033[0m",
        f"\033[93mPrivate IP:      \033[97m{private_ip}\033[0m",
    ]
    box_width = 50

    print("\033[93m╭" + "─" * (box_width - 2) + "╮\033[0m")

    for line in lines:
        print(f"\033[93m {line:<{box_width - 4}} \033[0m")

    print("\033[93m╰" + "─" * (box_width - 2) + "╯\033[0m")


def display_stuff_gre6tapn_wire_iran_client3(local_ip, remote_ip, private_ip):
    lines = [
        f"\033[93mTitle:         GRE6TAP Configuration\033[0m",
        f"\033[97m──────────────────────────────────────\033[0m",
        f"\033[92mIRAN [3] IPV6:   \033[97m{local_ip}\033[0m",
        f"\033[92mKharej IPV6:     \033[97m{remote_ip}\033[0m",
        f"\033[93mPrivate IP:      \033[97m{private_ip}\033[0m",
    ]
    box_width = 50

    print("\033[93m╭" + "─" * (box_width - 2) + "╮\033[0m")

    for line in lines:
        print(f"\033[93m {line:<{box_width - 4}} \033[0m")

    print("\033[93m╰" + "─" * (box_width - 2) + "╯\033[0m")


def display_stuff_gre6tapn_wire_iran_client4(local_ip, remote_ip, private_ip):
    lines = [
        f"\033[93mTitle:         GRE6TAP Configuration\033[0m",
        f"\033[97m──────────────────────────────────────\033[0m",
        f"\033[92mIRAN [4] IPV6:   \033[97m{local_ip}\033[0m",
        f"\033[92mKharej IPV6:     \033[97m{remote_ip}\033[0m",
        f"\033[93mPrivate IP:      \033[97m{private_ip}\033[0m",
    ]
    box_width = 50

    print("\033[93m╭" + "─" * (box_width - 2) + "╮\033[0m")

    for line in lines:
        print(f"\033[93m {line:<{box_width - 4}} \033[0m")

    print("\033[93m╰" + "─" * (box_width - 2) + "╯\033[0m")


def display_stuff_gre6tapn_wire_iran_client5(local_ip, remote_ip, private_ip):
    lines = [
        f"\033[93mTitle:         GRE6TAP Configuration\033[0m",
        f"\033[97m──────────────────────────────────────\033[0m",
        f"\033[92mIRAN [5] IPV6:   \033[97m{local_ip}\033[0m",
        f"\033[92mKharej IPV6:     \033[97m{remote_ip}\033[0m",
        f"\033[93mPrivate IP:      \033[97m{private_ip}\033[0m",
    ]
    box_width = 50

    print("\033[93m╭" + "─" * (box_width - 2) + "╮\033[0m")

    for line in lines:
        print(f"\033[93m {line:<{box_width - 4}} \033[0m")

    print("\033[93m╰" + "─" * (box_width - 2) + "╯\033[0m")


def display_stuff_gre6tapn_wire_kharej1(local_ip, remote_ip, private_ip):
    lines = [
        f"\033[93mTitle:         GRE6TAP Configuration\033[0m",
        f"\033[97m──────────────────────────────────────\033[0m",
        f"\033[92mKharej [1] IPV6:   \033[97m{local_ip}\033[0m",
        f"\033[92mIRAN IPV6:         \033[97m{remote_ip}\033[0m",
        f"\033[93mPrivate IP:        \033[97m{private_ip}\033[0m",
    ]
    box_width = 50

    print("\033[93m╭" + "─" * (box_width - 2) + "╮\033[0m")

    for line in lines:
        print(f"\033[93m {line:<{box_width - 4}} \033[0m")

    print("\033[93m╰" + "─" * (box_width - 2) + "╯\033[0m")


def display_stuff_gre6tapn_wire_kharej2(local_ip, remote_ip, private_ip):
    lines = [
        f"\033[93mTitle:         GRE6TAP Configuration\033[0m",
        f"\033[97m──────────────────────────────────────\033[0m",
        f"\033[92mKharej [2] IPV6:   \033[97m{local_ip}\033[0m",
        f"\033[92mIRAN IPV6:         \033[97m{remote_ip}\033[0m",
        f"\033[93mPrivate IP:        \033[97m{private_ip}\033[0m",
    ]
    box_width = 50

    print("\033[93m╭" + "─" * (box_width - 2) + "╮\033[0m")

    for line in lines:
        print(f"\033[93m {line:<{box_width - 4}} \033[0m")

    print("\033[93m╰" + "─" * (box_width - 2) + "╯\033[0m")


def display_stuff_gre6tapn_wire_kharej3(local_ip, remote_ip, private_ip):
    lines = [
        f"\033[93mTitle:         GRE6TAP Configuration\033[0m",
        f"\033[97m──────────────────────────────────────\033[0m",
        f"\033[92mKharej [3] IPV6:   \033[97m{local_ip}\033[0m",
        f"\033[92mIRAN IPV6:         \033[97m{remote_ip}\033[0m",
        f"\033[93mPrivate IP:        \033[97m{private_ip}\033[0m",
    ]
    box_width = 50

    print("\033[93m╭" + "─" * (box_width - 2) + "╮\033[0m")

    for line in lines:
        print(f"\033[93m {line:<{box_width - 4}} \033[0m")

    print("\033[93m╰" + "─" * (box_width - 2) + "╯\033[0m")


def display_stuff_gre6tapn_wire_kharej4(local_ip, remote_ip, private_ip):
    lines = [
        f"\033[93mTitle:         GRE6TAP Configuration\033[0m",
        f"\033[97m──────────────────────────────────────\033[0m",
        f"\033[92mKharej [4] IPV6:   \033[97m{local_ip}\033[0m",
        f"\033[92mIRAN IPV6:         \033[97m{remote_ip}\033[0m",
        f"\033[93mPrivate IP:        \033[97m{private_ip}\033[0m",
    ]
    box_width = 50

    print("\033[93m╭" + "─" * (box_width - 2) + "╮\033[0m")

    for line in lines:
        print(f"\033[93m {line:<{box_width - 4}} \033[0m")

    print("\033[93m╰" + "─" * (box_width - 2) + "╯\033[0m")


def display_stuff_gre6tapn_wire_kharej5(local_ip, remote_ip, private_ip):
    lines = [
        f"\033[93mTitle:         GRE6TAP Configuration\033[0m",
        f"\033[97m──────────────────────────────────────\033[0m",
        f"\033[92mKharej [5] IPV6:   \033[97m{local_ip}\033[0m",
        f"\033[92mIRAN IPV6:         \033[97m{remote_ip}\033[0m",
        f"\033[93mPrivate IP:        \033[97m{private_ip}\033[0m",
    ]
    box_width = 50

    print("\033[93m╭" + "─" * (box_width - 2) + "╮\033[0m")

    for line in lines:
        print(f"\033[93m {line:<{box_width - 4}} \033[0m")

    print("\033[93m╰" + "─" * (box_width - 2) + "╯\033[0m")


def display_stuff_gre6tapn_wire_kharej_server1(local_ip, remote_ip, private_ip):
    lines = [
        f"\033[93mTitle:         GRE6TAP Configuration\033[0m",
        f"\033[97m──────────────────────────────────────\033[0m",
        f"\033[92mKharej IPV6:       \033[97m{local_ip}\033[0m",
        f"\033[92mIRAN [1] IPV6:     \033[97m{remote_ip}\033[0m",
        f"\033[93mPrivate IP:        \033[97m{private_ip}\033[0m",
    ]
    box_width = 50

    print("\033[93m╭" + "─" * (box_width - 2) + "╮\033[0m")

    for line in lines:
        print(f"\033[93m {line:<{box_width - 4}} \033[0m")

    print("\033[93m╰" + "─" * (box_width - 2) + "╯\033[0m")


def display_stuff_gre6tapn_wire_kharej_server2(local_ip, remote_ip, private_ip):
    lines = [
        f"\033[93mTitle:         GRE6TAP Configuration\033[0m",
        f"\033[97m──────────────────────────────────────\033[0m",
        f"\033[92mKharej IPV6:       \033[97m{local_ip}\033[0m",
        f"\033[92mIRAN [2] IPV6:     \033[97m{remote_ip}\033[0m",
        f"\033[93mPrivate IP:        \033[97m{private_ip}\033[0m",
    ]
    box_width = 50

    print("\033[93m╭" + "─" * (box_width - 2) + "╮\033[0m")

    for line in lines:
        print(f"\033[93m {line:<{box_width - 4}} \033[0m")

    print("\033[93m╰" + "─" * (box_width - 2) + "╯\033[0m")


def display_stuff_gre6tapn_wire_kharej_server3(local_ip, remote_ip, private_ip):
    lines = [
        f"\033[93mTitle:         GRE6TAP Configuration\033[0m",
        f"\033[97m──────────────────────────────────────\033[0m",
        f"\033[92mKharej IPV6:       \033[97m{local_ip}\033[0m",
        f"\033[92mIRAN [3] IPV6:     \033[97m{remote_ip}\033[0m",
        f"\033[93mPrivate IP:        \033[97m{private_ip}\033[0m",
    ]
    box_width = 50

    print("\033[93m╭" + "─" * (box_width - 2) + "╮\033[0m")

    for line in lines:
        print(f"\033[93m {line:<{box_width - 4}} \033[0m")

    print("\033[93m╰" + "─" * (box_width - 2) + "╯\033[0m")


def display_stuff_gre6tapn_wire_kharej_server4(local_ip, remote_ip, private_ip):
    lines = [
        f"\033[93mTitle:         GRE6TAP Configuration\033[0m",
        f"\033[97m──────────────────────────────────────\033[0m",
        f"\033[92mKharej IPV6:       \033[97m{local_ip}\033[0m",
        f"\033[92mIRAN [4] IPV6:     \033[97m{remote_ip}\033[0m",
        f"\033[93mPrivate IP:        \033[97m{private_ip}\033[0m",
    ]
    box_width = 50

    print("\033[93m╭" + "─" * (box_width - 2) + "╮\033[0m")

    for line in lines:
        print(f"\033[93m {line:<{box_width - 4}} \033[0m")

    print("\033[93m╰" + "─" * (box_width - 2) + "╯\033[0m")


def display_stuff_gre6tapn_wire_kharej_server5(local_ip, remote_ip, private_ip):
    lines = [
        f"\033[93mTitle:         GRE6TAP Configuration\033[0m",
        f"\033[97m──────────────────────────────────────\033[0m",
        f"\033[92mKharej IPV6:       \033[97m{local_ip}\033[0m",
        f"\033[92mIRAN [5] IPV6:     \033[97m{remote_ip}\033[0m",
        f"\033[93mPrivate IP:        \033[97m{private_ip}\033[0m",
    ]
    box_width = 50

    print("\033[93m╭" + "─" * (box_width - 2) + "╮\033[0m")

    for line in lines:
        print(f"\033[93m {line:<{box_width - 4}} \033[0m")

    print("\033[93m╰" + "─" * (box_width - 2) + "╯\033[0m")


# az inja


def update_pingfile_sit(name, new_ip):
    try:
        with open(name, "r") as f:
            content = f.read()

        new_content = re.sub(r'ip_address="[^"]+"', f'ip_address="{new_ip}"', content)

        with open(name, "w") as f:
            f.write(new_content)
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def wtb_opposite_ip_sitwire(ip):
    if ":" in ip:  # IPv6
        ip_parts = ip.split(":")
        ip_parts[-1] = "1" if ip_parts[-1] == "2" else "2"
        return ":".join(ip_parts)
    else:  # IPv4
        ip_parts = ip.split(".")
        ip_parts[-1] = "1" if ip_parts[-1] == "2" else "2"
        return ".".join(ip_parts)


def delete_ufw_rules(ip, port=None):
    counterpart_ip = wtb_opposite_ip_sitwire(ip)
    try:
        if port:
            subprocess.run(
                [
                    "sudo",
                    "ufw",
                    "delete",
                    "allow",
                    "from",
                    ip,
                    "to",
                    "any",
                    "port",
                    port,
                ],
                check=False,
            )
            subprocess.run(
                [
                    "sudo",
                    "ufw",
                    "delete",
                    "allow",
                    "from",
                    counterpart_ip,
                    "to",
                    "any",
                    "port",
                    port,
                ],
                check=False,
            )
        else:
            subprocess.run(["sudo", "ufw", "delete", "allow", "from", ip], check=False)
            subprocess.run(
                ["sudo", "ufw", "delete", "allow", "from", counterpart_ip], check=False
            )
    except subprocess.CalledProcessError as e:
        print(f"\033[91merror deleting UFW rules: {e}\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def add_ufw_rules(ip, port=None):
    counterpart_ip = wtb_opposite_ip_sitwire(ip)
    try:
        if port:
            subprocess.run(
                ["sudo", "ufw", "allow", "from", ip, "to", "any", "port", port],
                check=True,
            )
            subprocess.run(
                [
                    "sudo",
                    "ufw",
                    "allow",
                    "from",
                    counterpart_ip,
                    "to",
                    "any",
                    "port",
                    port,
                ],
                check=True,
            )
        else:
            subprocess.run(["sudo", "ufw", "allow", "from", ip], check=True)
            subprocess.run(["sudo", "ufw", "allow", "from", counterpart_ip], check=True)
    except subprocess.CalledProcessError as e:
        print(f"\033[91merror adding UFW rules: {e}\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def display_checkmark(message):
    print("\u2714 " + message)


def private_native(name):
    try:
        with open(name, "r") as f:
            content = f.read()
        match = re.search(r"ip -6 addr add (\S+)/64 dev azumi?", content)
        if match:
            return match.group(1)
        else:
            print("\033[91mno private IP found\033[0m")
    except FileNotFoundError:
        print("\033[91mPrivate file not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")
    return None


def get_current_native_ipsgre61():
    private_ip_private = private_native("/etc/private1.sh")
    private_ip_gre6 = private_gre61("/etc/gre61.sh")
    return {
        "private": private_ip_private,
        "gre6": private_ip_gre6,
    }


def get_current_native_ipsgre62():
    private_ip_private = private_native("/etc/private2.sh")
    private_ip_gre6 = private_gre61("/etc/gre62.sh")
    return {
        "private": private_ip_private,
        "gre6": private_ip_gre6,
    }


def get_current_native_ipsgre63():
    private_ip_private = private_native("/etc/private3.sh")
    private_ip_gre6 = private_gre61("/etc/gre63.sh")
    return {
        "private": private_ip_private,
        "gre6": private_ip_gre6,
    }


def get_current_native_ipsgre64():
    private_ip_private = private_native("/etc/private4.sh")
    private_ip_gre6 = private_gre61("/etc/gre64.sh")
    return {
        "private": private_ip_private,
        "gre6": private_ip_gre6,
    }


def get_current_native_ipsgre65():
    private_ip_private = private_native("/etc/private5.sh")
    private_ip_gre6 = private_gre61("/etc/gre65.sh")
    return {
        "private": private_ip_private,
        "gre6": private_ip_gre6,
    }


def wtb_opposite_ip(ip):
    if ":" in ip:  # IPv6
        ip_parts = ip.split(":")
        ip_parts[-1] = "1" if ip_parts[-1] == "2" else "2"
        return ":".join(ip_parts)
    else:  # IPv4
        ip_parts = ip.split(".")
        ip_parts[-1] = "1" if ip_parts[-1] == "2" else "2"
        return ".".join(ip_parts)


def update_ipfile_gre6_wire1(name, new_ip, update_type):
    try:
        with open(name, "r") as f:
            content = f.read()

        if update_type == "private":
            new_content = re.sub(
                r"ip (-6 )?addr add [^ ]+/64 dev azumi?",
                f"ip -6 addr add {new_ip}/64 dev azumi",
                content,
            )
            ip_parts = new_ip.split(":")
            if new_ip.endswith(":2"):
                ip_parts[-1] = "1"
            else:
                ip_parts[-1] = "2"
            counterpart_ip = ":".join(ip_parts)
            new_content = re.sub(
                r"ip (-6 )?route add [^ ]+/64 dev azumi?",
                f"ip -6 route add {counterpart_ip}/64 dev azumi",
                new_content,
            )
            update_ipfile_gre6_wire1("/etc/gre61.sh", new_ip, update_type="gre6_local")
            update_ipfile_gre6_wire1(
                "/etc/gre61.sh", counterpart_ip, update_type="gre6_remote"
            )
        elif update_type == "local":
            new_content = re.sub(r"local \S+", f"local {new_ip}", content)
        elif update_type == "remote":
            new_content = re.sub(r"remote \S+", f"remote {new_ip}", content)
        elif update_type == "gre6_local":
            new_content = re.sub(r"local \S+", f"local {new_ip}", content)
        elif update_type == "gre6_remote":
            new_content = re.sub(r"remote \S+", f"remote {new_ip}", content)
        elif update_type == "ipsec":
            new_content = re.sub(r"leftsubnet=\S+", f"leftsubnet={new_ip}/64", content)
            new_content = re.sub(r"leftid=\S+", f"leftid={new_ip}", new_content)

            ip_parts = new_ip.split(":")
            if new_ip.endswith(":1"):
                ip_parts[-1] = "2"
            else:
                ip_parts[-1] = "1"
            counterpart_ip = ":".join(ip_parts)
            new_content = re.sub(r"right=\S+", f"right={counterpart_ip}", new_content)
            new_content = re.sub(
                r"rightsubnet=\S+", f"rightsubnet={counterpart_ip}/64", new_content
            )

        with open(name, "w") as f:
            f.write(new_content)
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def update_ipfile_gre6_wire2(name, new_ip, update_type):
    try:
        with open(name, "r") as f:
            content = f.read()

        if update_type == "private":
            new_content = re.sub(
                r"ip (-6 )?addr add [^ ]+/64 dev azumi?",
                f"ip -6 addr add {new_ip}/64 dev azumi",
                content,
            )
            ip_parts = new_ip.split(":")
            if new_ip.endswith(":2"):
                ip_parts[-1] = "1"
            else:
                ip_parts[-1] = "2"
            counterpart_ip = ":".join(ip_parts)
            new_content = re.sub(
                r"ip (-6 )?route add [^ ]+/64 dev azumi?",
                f"ip -6 route add {counterpart_ip}/64 dev azumi",
                new_content,
            )
            update_ipfile_gre6_wire2("/etc/gre62.sh", new_ip, update_type="gre6_local")
            update_ipfile_gre6_wire2(
                "/etc/gre62.sh", counterpart_ip, update_type="gre6_remote"
            )
        elif update_type == "local":
            new_content = re.sub(r"local \S+", f"local {new_ip}", content)
        elif update_type == "remote":
            new_content = re.sub(r"remote \S+", f"remote {new_ip}", content)
        elif update_type == "gre6_local":
            new_content = re.sub(r"local \S+", f"local {new_ip}", content)
        elif update_type == "gre6_remote":
            new_content = re.sub(r"remote \S+", f"remote {new_ip}", content)
        elif update_type == "ipsec":
            new_content = re.sub(r"leftsubnet=\S+", f"leftsubnet={new_ip}/64", content)
            new_content = re.sub(r"leftid=\S+", f"leftid={new_ip}", new_content)

            ip_parts = new_ip.split(":")
            if new_ip.endswith(":1"):
                ip_parts[-1] = "2"
            else:
                ip_parts[-1] = "1"
            counterpart_ip = ":".join(ip_parts)
            new_content = re.sub(r"right=\S+", f"right={counterpart_ip}", new_content)
            new_content = re.sub(
                r"rightsubnet=\S+", f"rightsubnet={counterpart_ip}/64", new_content
            )

        with open(name, "w") as f:
            f.write(new_content)
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def update_ipfile_gre6_wire3(name, new_ip, update_type):
    try:
        with open(name, "r") as f:
            content = f.read()

        if update_type == "private":
            new_content = re.sub(
                r"ip (-6 )?addr add [^ ]+/64 dev azumi?",
                f"ip -6 addr add {new_ip}/64 dev azumi",
                content,
            )
            ip_parts = new_ip.split(":")
            if new_ip.endswith(":2"):
                ip_parts[-1] = "1"
            else:
                ip_parts[-1] = "2"
            counterpart_ip = ":".join(ip_parts)
            new_content = re.sub(
                r"ip (-6 )?route add [^ ]+/64 dev azumi?",
                f"ip -6 route add {counterpart_ip}/64 dev azumi",
                new_content,
            )
            update_ipfile_gre6_wire3("/etc/gre63.sh", new_ip, update_type="gre6_local")
            update_ipfile_gre6_wire3(
                "/etc/gre63.sh", counterpart_ip, update_type="gre6_remote"
            )
        elif update_type == "local":
            new_content = re.sub(r"local \S+", f"local {new_ip}", content)
        elif update_type == "remote":
            new_content = re.sub(r"remote \S+", f"remote {new_ip}", content)
        elif update_type == "gre6_local":
            new_content = re.sub(r"local \S+", f"local {new_ip}", content)
        elif update_type == "gre6_remote":
            new_content = re.sub(r"remote \S+", f"remote {new_ip}", content)
        elif update_type == "ipsec":
            new_content = re.sub(r"leftsubnet=\S+", f"leftsubnet={new_ip}/64", content)
            new_content = re.sub(r"leftid=\S+", f"leftid={new_ip}", new_content)

            ip_parts = new_ip.split(":")
            if new_ip.endswith(":1"):
                ip_parts[-1] = "2"
            else:
                ip_parts[-1] = "1"
            counterpart_ip = ":".join(ip_parts)
            new_content = re.sub(r"right=\S+", f"right={counterpart_ip}", new_content)
            new_content = re.sub(
                r"rightsubnet=\S+", f"rightsubnet={counterpart_ip}/64", new_content
            )

        with open(name, "w") as f:
            f.write(new_content)
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def update_ipfile_gre6_wire4(name, new_ip, update_type):
    try:
        with open(name, "r") as f:
            content = f.read()

        if update_type == "private":
            new_content = re.sub(
                r"ip (-6 )?addr add [^ ]+/64 dev azumi?",
                f"ip -6 addr add {new_ip}/64 dev azumi",
                content,
            )
            ip_parts = new_ip.split(":")
            if new_ip.endswith(":2"):
                ip_parts[-1] = "1"
            else:
                ip_parts[-1] = "2"
            counterpart_ip = ":".join(ip_parts)
            new_content = re.sub(
                r"ip (-6 )?route add [^ ]+/64 dev azumi?",
                f"ip -6 route add {counterpart_ip}/64 dev azumi",
                new_content,
            )
            update_ipfile_gre6_wire4("/etc/gre64.sh", new_ip, update_type="gre6_local")
            update_ipfile_gre6_wire4(
                "/etc/gre64.sh", counterpart_ip, update_type="gre6_remote"
            )
        elif update_type == "local":
            new_content = re.sub(r"local \S+", f"local {new_ip}", content)
        elif update_type == "remote":
            new_content = re.sub(r"remote \S+", f"remote {new_ip}", content)
        elif update_type == "gre6_local":
            new_content = re.sub(r"local \S+", f"local {new_ip}", content)
        elif update_type == "gre6_remote":
            new_content = re.sub(r"remote \S+", f"remote {new_ip}", content)
        elif update_type == "ipsec":
            new_content = re.sub(r"leftsubnet=\S+", f"leftsubnet={new_ip}/64", content)
            new_content = re.sub(r"leftid=\S+", f"leftid={new_ip}", new_content)

            ip_parts = new_ip.split(":")
            if new_ip.endswith(":1"):
                ip_parts[-1] = "2"
            else:
                ip_parts[-1] = "1"
            counterpart_ip = ":".join(ip_parts)
            new_content = re.sub(r"right=\S+", f"right={counterpart_ip}", new_content)
            new_content = re.sub(
                r"rightsubnet=\S+", f"rightsubnet={counterpart_ip}/64", new_content
            )

        with open(name, "w") as f:
            f.write(new_content)
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def update_ipfile_gre6_wire5(name, new_ip, update_type):
    try:
        with open(name, "r") as f:
            content = f.read()

        if update_type == "private":
            new_content = re.sub(
                r"ip (-6 )?addr add [^ ]+/64 dev azumi?",
                f"ip -6 addr add {new_ip}/64 dev azumi",
                content,
            )
            ip_parts = new_ip.split(":")
            if new_ip.endswith(":2"):
                ip_parts[-1] = "1"
            else:
                ip_parts[-1] = "2"
            counterpart_ip = ":".join(ip_parts)
            new_content = re.sub(
                r"ip (-6 )?route add [^ ]+/64 dev azumi?",
                f"ip -6 route add {counterpart_ip}/64 dev azumi",
                new_content,
            )
            update_ipfile_gre6_wire5("/etc/gre65.sh", new_ip, update_type="gre6_local")
            update_ipfile_gre6_wire5(
                "/etc/gre65.sh", counterpart_ip, update_type="gre6_remote"
            )
        elif update_type == "local":
            new_content = re.sub(r"local \S+", f"local {new_ip}", content)
        elif update_type == "remote":
            new_content = re.sub(r"remote \S+", f"remote {new_ip}", content)
        elif update_type == "gre6_local":
            new_content = re.sub(r"local \S+", f"local {new_ip}", content)
        elif update_type == "gre6_remote":
            new_content = re.sub(r"remote \S+", f"remote {new_ip}", content)
        elif update_type == "ipsec":
            new_content = re.sub(r"leftsubnet=\S+", f"leftsubnet={new_ip}/64", content)
            new_content = re.sub(r"leftid=\S+", f"leftid={new_ip}", new_content)

            ip_parts = new_ip.split(":")
            if new_ip.endswith(":1"):
                ip_parts[-1] = "2"
            else:
                ip_parts[-1] = "1"
            counterpart_ip = ":".join(ip_parts)
            new_content = re.sub(r"right=\S+", f"right={counterpart_ip}", new_content)
            new_content = re.sub(
                r"rightsubnet=\S+", f"rightsubnet={counterpart_ip}/64", new_content
            )

        with open(name, "w") as f:
            f.write(new_content)
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def save_stuff_gre61(private_ip, local_ip, remote_ip, is_gre6):
    current_ips = get_current_native_ipsgre61()
    current_ip = current_ips["gre6"] if is_gre6 else current_ips["private"]

    if current_ip:
        delete_ufw_rules(current_ip)

    add_ufw_rules(private_ip)

    counterpart_ip = wtb_opposite_ip(private_ip)
    try:
        if is_gre6:
            update_pingfile_sit("/etc/ping_ip1.sh", counterpart_ip)
            update_ipfile_gre6_wire1("/etc/gre61.sh", private_ip, update_type="private")
            update_ipfile_gre6_wire1("/etc/gre61.sh", local_ip, update_type="local")
            update_ipfile_gre6_wire1("/etc/gre61.sh", remote_ip, update_type="remote")
        else:
            update_pingfile_sit("/etc/ping_v61.sh", counterpart_ip)
            update_ipfile_gre6_wire1(
                "/etc/private1.sh", private_ip, update_type="private"
            )
            update_ipfile_gre6_wire1("/etc/private1.sh", local_ip, update_type="local")
            update_ipfile_gre6_wire1(
                "/etc/private1.sh", remote_ip, update_type="remote"
            )

        interface = "azumig61" if is_gre6 else "azumi1"
        subprocess.run(["ip", "link", "set", "dev", interface, "down"], check=True)
        subprocess.run(["ip", "link", "delete", interface], check=True)
    except subprocess.CalledProcessError as e:
        print(f"\033[91merror bringing interface down or deleting it: {e}\033[0m")

    try:
        script = "/etc/gre61.sh" if is_gre6 else "/etc/private1.sh"
        result = subprocess.run(["/bin/bash", script], capture_output=True, text=True)
        if "RTNETLINK answers: File exists" in result.stderr:
            print("\033[91madditional ip already exists. Ignoring this error\033[0m")
        else:
            result.check_returncode()
        display_checkmark(
            f"\033[92mChanges saved and {interface} interface updated successfully!\033[0m"
        )
        subprocess.run(["sudo", "systemctl", "daemon-reload"], check=True)
        subprocess.run(["sudo", "systemctl", "restart", "ping_ip1"], check=True)

        # display_checkmark("\033[92mSystem services reloaded and restarted successfully!\033[0m")
    except subprocess.CalledProcessError as e:
        print(
            f"\033[91merror applying network changes: {e.stderr.strip() if e.stderr else str(e)}\033[0m"
        )
    except FileNotFoundError:
        print(f"\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def save_stuff_gre62(private_ip, local_ip, remote_ip, is_gre6):
    current_ips = get_current_native_ipsgre62()
    current_ip = current_ips["gre6"] if is_gre6 else current_ips["private"]

    if current_ip:
        delete_ufw_rules(current_ip)

    add_ufw_rules(private_ip)

    counterpart_ip = wtb_opposite_ip(private_ip)
    try:
        if is_gre6:
            update_pingfile_sit("/etc/ping_ip2.sh", counterpart_ip)
            update_ipfile_gre6_wire2("/etc/gre62.sh", private_ip, update_type="private")
            update_ipfile_gre6_wire2("/etc/gre62.sh", local_ip, update_type="local")
            update_ipfile_gre6_wire2("/etc/gre62.sh", remote_ip, update_type="remote")
        else:
            update_pingfile_sit("/etc/ping_v62.sh", counterpart_ip)
            update_ipfile_gre6_wire2(
                "/etc/private2.sh", private_ip, update_type="private"
            )
            update_ipfile_gre6_wire2("/etc/private2.sh", local_ip, update_type="local")
            update_ipfile_gre6_wire2(
                "/etc/private2.sh", remote_ip, update_type="remote"
            )

        interface = "azumig62" if is_gre6 else "azumi2"
        subprocess.run(["ip", "link", "set", "dev", interface, "down"], check=True)
        subprocess.run(["ip", "link", "delete", interface], check=True)
    except subprocess.CalledProcessError as e:
        print(f"\033[91merror bringing interface down or deleting it: {e}\033[0m")

    try:
        script = "/etc/gre62.sh" if is_gre6 else "/etc/private2.sh"
        result = subprocess.run(["/bin/bash", script], capture_output=True, text=True)
        if "RTNETLINK answers: File exists" in result.stderr:
            print("\033[91madditional ip already exists. Ignoring this error\033[0m")
        else:
            result.check_returncode()
        display_checkmark(
            f"\033[92mChanges saved and {interface} interface updated successfully!\033[0m"
        )
        subprocess.run(["sudo", "systemctl", "daemon-reload"], check=True)
        subprocess.run(["sudo", "systemctl", "restart", "ping_ip2"], check=True)

        # display_checkmark("\033[92mSystem services reloaded and restarted successfully!\033[0m")
    except subprocess.CalledProcessError as e:
        print(
            f"\033[91merror applying network changes: {e.stderr.strip() if e.stderr else str(e)}\033[0m"
        )
    except FileNotFoundError:
        print(f"\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def save_stuff_gre63(private_ip, local_ip, remote_ip, is_gre6):
    current_ips = get_current_native_ipsgre63()
    current_ip = current_ips["gre6"] if is_gre6 else current_ips["private"]

    if current_ip:
        delete_ufw_rules(current_ip)

    add_ufw_rules(private_ip)

    counterpart_ip = wtb_opposite_ip(private_ip)
    try:
        if is_gre6:
            update_pingfile_sit("/etc/ping_ip3.sh", counterpart_ip)
            update_ipfile_gre6_wire3("/etc/gre63.sh", private_ip, update_type="private")
            update_ipfile_gre6_wire3("/etc/gre63.sh", local_ip, update_type="local")
            update_ipfile_gre6_wire3("/etc/gre63.sh", remote_ip, update_type="remote")
        else:
            update_pingfile_sit("/etc/ping_v63.sh", counterpart_ip)
            update_ipfile_gre6_wire3(
                "/etc/private3.sh", private_ip, update_type="private"
            )
            update_ipfile_gre6_wire3("/etc/private3.sh", local_ip, update_type="local")
            update_ipfile_gre6_wire3(
                "/etc/private3.sh", remote_ip, update_type="remote"
            )

        interface = "azumig63" if is_gre6 else "azumi3"
        subprocess.run(["ip", "link", "set", "dev", interface, "down"], check=True)
        subprocess.run(["ip", "link", "delete", interface], check=True)
    except subprocess.CalledProcessError as e:
        print(f"\033[91merror bringing interface down or deleting it: {e}\033[0m")

    try:
        script = "/etc/gre63.sh" if is_gre6 else "/etc/private3.sh"
        result = subprocess.run(["/bin/bash", script], capture_output=True, text=True)
        if "RTNETLINK answers: File exists" in result.stderr:
            print("\033[91madditional ip already exists. Ignoring this error\033[0m")
        else:
            result.check_returncode()
        display_checkmark(
            f"\033[92mChanges saved and {interface} interface updated successfully!\033[0m"
        )
        subprocess.run(["sudo", "systemctl", "daemon-reload"], check=True)
        subprocess.run(["sudo", "systemctl", "restart", "ping_ip3"], check=True)

        # display_checkmark("\033[92mSystem services reloaded and restarted successfully!\033[0m")
    except subprocess.CalledProcessError as e:
        print(
            f"\033[91merror applying network changes: {e.stderr.strip() if e.stderr else str(e)}\033[0m"
        )
    except FileNotFoundError:
        print(f"\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def save_stuff_gre64(private_ip, local_ip, remote_ip, is_gre6):
    current_ips = get_current_native_ipsgre64()
    current_ip = current_ips["gre6"] if is_gre6 else current_ips["private"]

    if current_ip:
        delete_ufw_rules(current_ip)

    add_ufw_rules(private_ip)

    counterpart_ip = wtb_opposite_ip(private_ip)
    try:
        if is_gre6:
            update_pingfile_sit("/etc/ping_ip4.sh", counterpart_ip)
            update_ipfile_gre6_wire4("/etc/gre64.sh", private_ip, update_type="private")
            update_ipfile_gre6_wire4("/etc/gre64.sh", local_ip, update_type="local")
            update_ipfile_gre6_wire4("/etc/gre64.sh", remote_ip, update_type="remote")
        else:
            update_pingfile_sit("/etc/ping_v64.sh", counterpart_ip)
            update_ipfile_gre6_wire4(
                "/etc/private4.sh", private_ip, update_type="private"
            )
            update_ipfile_gre6_wire4("/etc/private4.sh", local_ip, update_type="local")
            update_ipfile_gre6_wire4(
                "/etc/private4.sh", remote_ip, update_type="remote"
            )

        interface = "azumig64" if is_gre6 else "azumi4"
        subprocess.run(["ip", "link", "set", "dev", interface, "down"], check=True)
        subprocess.run(["ip", "link", "delete", interface], check=True)
    except subprocess.CalledProcessError as e:
        print(f"\033[91merror bringing interface down or deleting it: {e}\033[0m")

    try:
        script = "/etc/gre64.sh" if is_gre6 else "/etc/private4.sh"
        result = subprocess.run(["/bin/bash", script], capture_output=True, text=True)
        if "RTNETLINK answers: File exists" in result.stderr:
            print("\033[91madditional ip already exists. Ignoring this error\033[0m")
        else:
            result.check_returncode()
        display_checkmark(
            f"\033[92mChanges saved and {interface} interface updated successfully!\033[0m"
        )
        subprocess.run(["sudo", "systemctl", "daemon-reload"], check=True)
        subprocess.run(["sudo", "systemctl", "restart", "ping_ip4"], check=True)

        # display_checkmark("\033[92mSystem services reloaded and restarted successfully!\033[0m")
    except subprocess.CalledProcessError as e:
        print(
            f"\033[91merror applying network changes: {e.stderr.strip() if e.stderr else str(e)}\033[0m"
        )
    except FileNotFoundError:
        print(f"\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def save_stuff_gre65(private_ip, local_ip, remote_ip, is_gre6):
    current_ips = get_current_native_ipsgre65()
    current_ip = current_ips["gre6"] if is_gre6 else current_ips["private"]

    if current_ip:
        delete_ufw_rules(current_ip)

    add_ufw_rules(private_ip)

    counterpart_ip = wtb_opposite_ip(private_ip)
    try:
        if is_gre6:
            update_pingfile_sit("/etc/ping_ip5.sh", counterpart_ip)
            update_ipfile_gre6_wire5("/etc/gre65.sh", private_ip, update_type="private")
            update_ipfile_gre6_wire5("/etc/gre65.sh", local_ip, update_type="local")
            update_ipfile_gre6_wire5("/etc/gre65.sh", remote_ip, update_type="remote")
        else:
            update_pingfile_sit("/etc/ping_v65.sh", counterpart_ip)
            update_ipfile_gre6_wire5(
                "/etc/private5.sh", private_ip, update_type="private"
            )
            update_ipfile_gre6_wire5("/etc/private5.sh", local_ip, update_type="local")
            update_ipfile_gre6_wire5(
                "/etc/private5.sh", remote_ip, update_type="remote"
            )

        interface = "azumig65" if is_gre6 else "azumi5"
        subprocess.run(["ip", "link", "set", "dev", interface, "down"], check=True)
        subprocess.run(["ip", "link", "delete", interface], check=True)
    except subprocess.CalledProcessError as e:
        print(f"\033[91merror bringing interface down or deleting it: {e}\033[0m")

    try:
        script = "/etc/gre65.sh" if is_gre6 else "/etc/private5.sh"
        result = subprocess.run(["/bin/bash", script], capture_output=True, text=True)
        if "RTNETLINK answers: File exists" in result.stderr:
            print("\033[91madditional ip already exists. Ignoring this error\033[0m")
        else:
            result.check_returncode()
        display_checkmark(
            f"\033[92mChanges saved and {interface} interface updated successfully!\033[0m"
        )
        subprocess.run(["sudo", "systemctl", "daemon-reload"], check=True)
        subprocess.run(["sudo", "systemctl", "restart", "ping_ip5"], check=True)

        # display_checkmark("\033[92mSystem services reloaded and restarted successfully!\033[0m")
    except subprocess.CalledProcessError as e:
        print(
            f"\033[91merror applying network changes: {e.stderr.strip() if e.stderr else str(e)}\033[0m"
        )
    except FileNotFoundError:
        print(f"\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def local_ip(name):
    try:
        with open(name, "r") as f:
            content = f.read()
        match = re.search(r"local (\S+)", content)
        if match:
            return match.group(1)
        else:
            print(f"\033[91mno local IP found\033[0m")
    except FileNotFoundError:
        print(f"file {name} doesn't exist")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")
    return None


def remote_ip(name):
    try:
        with open(name, "r") as f:
            content = f.read()
        match = re.search(r"remote (\S+)", content)
        if match:
            return match.group(1)
        else:
            print("\033[91mno remote IP found \033[0m")
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")
    return None


def private_gre61(name):
    try:
        with open(name, "r") as f:
            content = f.read()
        match = re.search(r"ip -6 addr add (\S+)/64 dev azumig6?", content)
        if match:
            return match.group(1)
        else:
            print(f"\033[91mno private IP found\033[0m")
    except FileNotFoundError:
        print("\033[91mPrivate file not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")
    return None


def wtb_opposite_ip_wireguard(ip):
    return wtb_opposite_ip_sitwire(ip)


def load_wireguardconfig_sitwire(file_path):
    try:
        with open(file_path, "r") as file:
            content = file.read()

        address_match = re.search(r"Address = ([^\s]+)", content)
        listen_port_match = re.search(r"ListenPort = (\d+)", content)
        endpoint_match = re.search(r"Endpoint = ([^\s]+):\d+", content)
        allowed_ips_match = re.search(r"AllowedIPs = ([^\s]+)", content)

        address = address_match.group(1) if address_match else "N/A"
        listen_port = listen_port_match.group(1) if listen_port_match else "N/A"
        endpoint = endpoint_match.group(1) if endpoint_match else "N/A"
        allowed_ips = allowed_ips_match.group(1) if allowed_ips_match else "N/A"

        return address, address.split("/")[0], listen_port, endpoint, allowed_ips
    except FileNotFoundError:
        print("\033[91mWireguard configuration file not found.\033[0m")
        return None, None, None, None, None
    except Exception as e:
        print(f"\033[91mAn error occurred: {e}\033[0m")
        return None, None, None, None, None


def save_wireguardconfig_sitwire1sec(file_path, new_config):
    try:
        with open(file_path, "r") as f:
            config = f.read()

        listen_port_pattern = r"ListenPort\s*=\s*\d+"
        endpoint_pattern = r"Endpoint\s*=\s*([^\s]+):\d+"
        address_pattern = r"Address\s*=\s*[^\s]+"
        allowed_ips_pattern = r"AllowedIPs\s*=\s*[^\s]+"

        new_config_content = re.sub(
            listen_port_pattern, f'ListenPort = {new_config["ListenPort"]}', config
        )
        new_config_content = re.sub(
            address_pattern, f'Address = {new_config["Address"]}', new_config_content
        )
        new_config_content = re.sub(
            allowed_ips_pattern,
            f'AllowedIPs = {new_config["AllowedIPs"]}',
            new_config_content,
        )

        def replace_endpoint(match):
            endpoint_ip = new_config["EndpointIP"]
            return f'Endpoint = {endpoint_ip}:{new_config["ListenPort"]}'

        new_config_content = re.sub(
            endpoint_pattern, replace_endpoint, new_config_content
        )

        with open(file_path, "w") as f:
            f.write(new_config_content)

        subprocess.run(["systemctl", "daemon-reload"], check=True)

        services_to_restart = [
            "strong-azumi1",
            "wireguardping_1.service",
        ]

        wg_quick_interface = "/etc/wireguard/wireserver1.conf"
        wg_quick_down = subprocess.run(
            ["wg-quick", "down", wg_quick_interface],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
        )

        if wg_quick_down.returncode == 0:
            subprocess.run(["wg-quick", "up", wg_quick_interface], check=True)
            display_checkmark(
                f"\033[92mInterface {wg_quick_interface} brought down and up successfully!\033[0m"
            )
        else:
            print(
                f"\033[93mFailed to bring down interface {wg_quick_interface}.\033[0m"
            )

        for service_name in services_to_restart:
            service_status = subprocess.run(
                ["systemctl", "is-active", service_name],
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
            )

            if service_status.returncode == 0:
                subprocess.run(["systemctl", "restart", service_name], check=True)
                display_checkmark(
                    f"\033[92mService {service_name} restarted successfully!\033[0m"
                )
            else:
                print(
                    f"\033[93mService {service_name} doesn't exist or is inactive.\033[0m"
                )

        display_checkmark(f"\033[92mConfiguration updated successfully!\033[0m")

    except FileNotFoundError:
        print(f"\033[91mfile {file_path} not found.\033[0m")
    except subprocess.CalledProcessError as e:
        print(f"\033[91merror in managing services: {e}\033[0m")
    except Exception as e:
        print(f"\033[91merror in saving the config: {e}\033[0m")


def save_wireguardconfig_sitwire2sec(file_path, new_config):
    try:
        with open(file_path, "r") as f:
            config = f.read()

        listen_port_pattern = r"ListenPort\s*=\s*\d+"
        endpoint_pattern = r"Endpoint\s*=\s*([^\s]+):\d+"
        address_pattern = r"Address\s*=\s*[^\s]+"
        allowed_ips_pattern = r"AllowedIPs\s*=\s*[^\s]+"

        new_config_content = re.sub(
            listen_port_pattern, f'ListenPort = {new_config["ListenPort"]}', config
        )
        new_config_content = re.sub(
            address_pattern, f'Address = {new_config["Address"]}', new_config_content
        )
        new_config_content = re.sub(
            allowed_ips_pattern,
            f'AllowedIPs = {new_config["AllowedIPs"]}',
            new_config_content,
        )

        def replace_endpoint(match):
            endpoint_ip = new_config["EndpointIP"]
            return f'Endpoint = {endpoint_ip}:{new_config["ListenPort"]}'

        new_config_content = re.sub(
            endpoint_pattern, replace_endpoint, new_config_content
        )

        with open(file_path, "w") as f:
            f.write(new_config_content)

        subprocess.run(["systemctl", "daemon-reload"], check=True)

        services_to_restart = [
            "strong-azumi1",
            "wireguardping_2.service",
        ]

        wg_quick_interface = "/etc/wireguard/wireserver2.conf"
        wg_quick_down = subprocess.run(
            ["wg-quick", "down", wg_quick_interface],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
        )

        if wg_quick_down.returncode == 0:
            subprocess.run(["wg-quick", "up", wg_quick_interface], check=True)
            display_checkmark(
                f"\033[92mInterface {wg_quick_interface} brought down and up successfully!\033[0m"
            )
        else:
            print(
                f"\033[93mFailed to bring down interface {wg_quick_interface}.\033[0m"
            )

        for service_name in services_to_restart:
            service_status = subprocess.run(
                ["systemctl", "is-active", service_name],
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
            )

            if service_status.returncode == 0:
                subprocess.run(["systemctl", "restart", service_name], check=True)
                display_checkmark(
                    f"\033[92mService {service_name} restarted successfully!\033[0m"
                )
            else:
                print(
                    f"\033[93mService {service_name} doesn't exist or is inactive.\033[0m"
                )

        display_checkmark(f"\033[92mConfiguration updated successfully!\033[0m")

    except FileNotFoundError:
        print(f"\033[91mfile {file_path} not found.\033[0m")
    except subprocess.CalledProcessError as e:
        print(f"\033[91merror in managing services: {e}\033[0m")
    except Exception as e:
        print(f"\033[91merror in saving the config: {e}\033[0m")


def save_wireguardconfig_sitwire3sec(file_path, new_config):
    try:
        with open(file_path, "r") as f:
            config = f.read()

        listen_port_pattern = r"ListenPort\s*=\s*\d+"
        endpoint_pattern = r"Endpoint\s*=\s*([^\s]+):\d+"
        address_pattern = r"Address\s*=\s*[^\s]+"
        allowed_ips_pattern = r"AllowedIPs\s*=\s*[^\s]+"

        new_config_content = re.sub(
            listen_port_pattern, f'ListenPort = {new_config["ListenPort"]}', config
        )
        new_config_content = re.sub(
            address_pattern, f'Address = {new_config["Address"]}', new_config_content
        )
        new_config_content = re.sub(
            allowed_ips_pattern,
            f'AllowedIPs = {new_config["AllowedIPs"]}',
            new_config_content,
        )

        def replace_endpoint(match):
            endpoint_ip = new_config["EndpointIP"]
            return f'Endpoint = {endpoint_ip}:{new_config["ListenPort"]}'

        new_config_content = re.sub(
            endpoint_pattern, replace_endpoint, new_config_content
        )

        with open(file_path, "w") as f:
            f.write(new_config_content)

        subprocess.run(["systemctl", "daemon-reload"], check=True)

        services_to_restart = [
            "strong-azumi1",
            "wireguardping_3.service",
        ]

        wg_quick_interface = "/etc/wireguard/wireserver3.conf"
        wg_quick_down = subprocess.run(
            ["wg-quick", "down", wg_quick_interface],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
        )

        if wg_quick_down.returncode == 0:
            subprocess.run(["wg-quick", "up", wg_quick_interface], check=True)
            display_checkmark(
                f"\033[92mInterface {wg_quick_interface} brought down and up successfully!\033[0m"
            )
        else:
            print(
                f"\033[93mFailed to bring down interface {wg_quick_interface}.\033[0m"
            )

        for service_name in services_to_restart:
            service_status = subprocess.run(
                ["systemctl", "is-active", service_name],
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
            )

            if service_status.returncode == 0:
                subprocess.run(["systemctl", "restart", service_name], check=True)
                display_checkmark(
                    f"\033[92mService {service_name} restarted successfully!\033[0m"
                )
            else:
                print(
                    f"\033[93mService {service_name} doesn't exist or is inactive.\033[0m"
                )

        display_checkmark(f"\033[92mConfiguration updated successfully!\033[0m")

    except FileNotFoundError:
        print(f"\033[91mfile {file_path} not found.\033[0m")
    except subprocess.CalledProcessError as e:
        print(f"\033[91merror in managing services: {e}\033[0m")
    except Exception as e:
        print(f"\033[91merror in saving the config: {e}\033[0m")


def save_wireguardconfig_sitwire4sec(file_path, new_config):
    try:
        with open(file_path, "r") as f:
            config = f.read()

        listen_port_pattern = r"ListenPort\s*=\s*\d+"
        endpoint_pattern = r"Endpoint\s*=\s*([^\s]+):\d+"
        address_pattern = r"Address\s*=\s*[^\s]+"
        allowed_ips_pattern = r"AllowedIPs\s*=\s*[^\s]+"

        new_config_content = re.sub(
            listen_port_pattern, f'ListenPort = {new_config["ListenPort"]}', config
        )
        new_config_content = re.sub(
            address_pattern, f'Address = {new_config["Address"]}', new_config_content
        )
        new_config_content = re.sub(
            allowed_ips_pattern,
            f'AllowedIPs = {new_config["AllowedIPs"]}',
            new_config_content,
        )

        def replace_endpoint(match):
            endpoint_ip = new_config["EndpointIP"]
            return f'Endpoint = {endpoint_ip}:{new_config["ListenPort"]}'

        new_config_content = re.sub(
            endpoint_pattern, replace_endpoint, new_config_content
        )

        with open(file_path, "w") as f:
            f.write(new_config_content)

        subprocess.run(["systemctl", "daemon-reload"], check=True)

        services_to_restart = [
            "strong-azumi1",
            "wireguardping_4.service",
        ]

        wg_quick_interface = "/etc/wireguard/wireserver4.conf"
        wg_quick_down = subprocess.run(
            ["wg-quick", "down", wg_quick_interface],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
        )

        if wg_quick_down.returncode == 0:
            subprocess.run(["wg-quick", "up", wg_quick_interface], check=True)
            display_checkmark(
                f"\033[92mInterface {wg_quick_interface} brought down and up successfully!\033[0m"
            )
        else:
            print(
                f"\033[93mFailed to bring down interface {wg_quick_interface}.\033[0m"
            )

        for service_name in services_to_restart:
            service_status = subprocess.run(
                ["systemctl", "is-active", service_name],
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
            )

            if service_status.returncode == 0:
                subprocess.run(["systemctl", "restart", service_name], check=True)
                display_checkmark(
                    f"\033[92mService {service_name} restarted successfully!\033[0m"
                )
            else:
                print(
                    f"\033[93mService {service_name} doesn't exist or is inactive.\033[0m"
                )

        display_checkmark(f"\033[92mConfiguration updated successfully!\033[0m")

    except FileNotFoundError:
        print(f"\033[91mfile {file_path} not found.\033[0m")
    except subprocess.CalledProcessError as e:
        print(f"\033[91merror in managing services: {e}\033[0m")
    except Exception as e:
        print(f"\033[91merror in saving the config: {e}\033[0m")


def save_wireguardconfig_sitwire5sec(file_path, new_config):
    try:
        with open(file_path, "r") as f:
            config = f.read()

        listen_port_pattern = r"ListenPort\s*=\s*\d+"
        endpoint_pattern = r"Endpoint\s*=\s*([^\s]+):\d+"
        address_pattern = r"Address\s*=\s*[^\s]+"
        allowed_ips_pattern = r"AllowedIPs\s*=\s*[^\s]+"

        new_config_content = re.sub(
            listen_port_pattern, f'ListenPort = {new_config["ListenPort"]}', config
        )
        new_config_content = re.sub(
            address_pattern, f'Address = {new_config["Address"]}', new_config_content
        )
        new_config_content = re.sub(
            allowed_ips_pattern,
            f'AllowedIPs = {new_config["AllowedIPs"]}',
            new_config_content,
        )

        def replace_endpoint(match):
            endpoint_ip = new_config["EndpointIP"]
            return f'Endpoint = {endpoint_ip}:{new_config["ListenPort"]}'

        new_config_content = re.sub(
            endpoint_pattern, replace_endpoint, new_config_content
        )

        with open(file_path, "w") as f:
            f.write(new_config_content)

        subprocess.run(["systemctl", "daemon-reload"], check=True)

        services_to_restart = [
            "strong-azumi1",
            "wireguardping_5.service",
        ]

        wg_quick_interface = "/etc/wireguard/wireserver5.conf"
        wg_quick_down = subprocess.run(
            ["wg-quick", "down", wg_quick_interface],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
        )

        if wg_quick_down.returncode == 0:
            subprocess.run(["wg-quick", "up", wg_quick_interface], check=True)
            display_checkmark(
                f"\033[92mInterface {wg_quick_interface} brought down and up successfully!\033[0m"
            )
        else:
            print(
                f"\033[93mFailed to bring down interface {wg_quick_interface}.\033[0m"
            )

        for service_name in services_to_restart:
            service_status = subprocess.run(
                ["systemctl", "is-active", service_name],
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
            )

            if service_status.returncode == 0:
                subprocess.run(["systemctl", "restart", service_name], check=True)
                display_checkmark(
                    f"\033[92mService {service_name} restarted successfully!\033[0m"
                )
            else:
                print(
                    f"\033[93mService {service_name} doesn't exist or is inactive.\033[0m"
                )

        display_checkmark(f"\033[92mConfiguration updated successfully!\033[0m")

    except FileNotFoundError:
        print(f"\033[91mfile {file_path} not found.\033[0m")
    except subprocess.CalledProcessError as e:
        print(f"\033[91merror in managing services: {e}\033[0m")
    except Exception as e:
        print(f"\033[91merror in saving the config: {e}\033[0m")


def save_wireguardconfig_sitwiresec_client(file_path, new_config):
    try:
        with open(file_path, "r") as f:
            config = f.read()

        listen_port_pattern = r"ListenPort\s*=\s*\d+"
        endpoint_pattern = r"Endpoint\s*=\s*([^\s]+):\d+"
        address_pattern = r"Address\s*=\s*[^\s]+"
        allowed_ips_pattern = r"AllowedIPs\s*=\s*[^\s]+"

        new_config_content = re.sub(
            listen_port_pattern, f'ListenPort = {new_config["ListenPort"]}', config
        )
        new_config_content = re.sub(
            address_pattern, f'Address = {new_config["Address"]}', new_config_content
        )
        new_config_content = re.sub(
            allowed_ips_pattern,
            f'AllowedIPs = {new_config["AllowedIPs"]}',
            new_config_content,
        )

        def replace_endpoint(match):
            endpoint_ip = new_config["EndpointIP"]
            return f'Endpoint = {endpoint_ip}:{new_config["ListenPort"]}'

        new_config_content = re.sub(
            endpoint_pattern, replace_endpoint, new_config_content
        )

        with open(file_path, "w") as f:
            f.write(new_config_content)

        subprocess.run(["systemctl", "daemon-reload"], check=True)

        services_to_restart = [
            "strong-azumi1",
            "wireguardping.service",
        ]

        wg_quick_interface = "/etc/wireguard/wireclient.conf"
        wg_quick_down = subprocess.run(
            ["wg-quick", "down", wg_quick_interface],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
        )

        if wg_quick_down.returncode == 0:
            subprocess.run(["wg-quick", "up", wg_quick_interface], check=True)
            display_checkmark(
                f"\033[92mInterface {wg_quick_interface} brought down and up successfully!\033[0m"
            )
        else:
            print(
                f"\033[93mFailed to bring down interface {wg_quick_interface}.\033[0m"
            )

        for service_name in services_to_restart:
            service_status = subprocess.run(
                ["systemctl", "is-active", service_name],
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
            )

            if service_status.returncode == 0:
                subprocess.run(["systemctl", "restart", service_name], check=True)
                display_checkmark(
                    f"\033[92mService {service_name} restarted successfully!\033[0m"
                )
            else:
                print(
                    f"\033[93mService {service_name} doesn't exist or is inactive.\033[0m"
                )

        display_checkmark(f"\033[92mConfiguration updated successfully!\033[0m")

    except FileNotFoundError:
        print(f"\033[91mfile {file_path} not found.\033[0m")
    except subprocess.CalledProcessError as e:
        print(f"\033[91merror in managing services: {e}\033[0m")
    except Exception as e:
        print(f"\033[91merror in saving the config: {e}\033[0m")


def update_ufw_ruleswireguard(old_ip, new_ip, old_port=None, new_port=None):
    if old_port:
        delete_ufw_rules(old_ip, old_port)
        delete_ufw_rules(wtb_opposite_ip_wireguard(old_ip), old_port)
    add_ufw_rules(new_ip, new_port)
    add_ufw_rules(wtb_opposite_ip_wireguard(new_ip), new_port)


def update_ping_script_opposite_ip_wirenosec_client(new_opposite_ip):
    script_path = "/etc/ping_wireguard.sh"
    try:
        with open(script_path, "r") as f:
            script_content = f.read()

        updated_script_content = re.sub(
            r'ip_address="[^"]+"', f'ip_address="{new_opposite_ip}"', script_content
        )

        with open(script_path, "w") as f:
            f.write(updated_script_content)

        display_checkmark(
            "\033[92mPing script updated with new opposite IP address!\033[0m"
        )
    except FileNotFoundError:
        print(f"\033[91mPing script {script_path} not found.\033[0m")
    except Exception as e:
        print(f"\033[91mError updating ping script: {e}\033[0m")


def update_ping_script_opposite_ip_wirenosec1(new_opposite_ip):
    script_path = "/etc/ping_wireguard_1.sh"
    try:
        with open(script_path, "r") as f:
            script_content = f.read()

        updated_script_content = re.sub(
            r'ip_address="[^"]+"', f'ip_address="{new_opposite_ip}"', script_content
        )

        with open(script_path, "w") as f:
            f.write(updated_script_content)

        display_checkmark(
            "\033[92mPing script updated with new opposite IP address!\033[0m"
        )
    except FileNotFoundError:
        print(f"\033[91mPing script {script_path} not found.\033[0m")
    except Exception as e:
        print(f"\033[91mError updating ping script: {e}\033[0m")


def update_ping_script_opposite_ip_wirenosec2(new_opposite_ip):
    script_path = "/etc/ping_wireguard_2.sh"
    try:
        with open(script_path, "r") as f:
            script_content = f.read()

        updated_script_content = re.sub(
            r'ip_address="[^"]+"', f'ip_address="{new_opposite_ip}"', script_content
        )

        with open(script_path, "w") as f:
            f.write(updated_script_content)

        display_checkmark(
            "\033[92mPing script updated with new opposite IP address!\033[0m"
        )
    except FileNotFoundError:
        print(f"\033[91mPing script {script_path} not found.\033[0m")
    except Exception as e:
        print(f"\033[91mError updating ping script: {e}\033[0m")


def update_ping_script_opposite_ip_wirenosec3(new_opposite_ip):
    script_path = "/etc/ping_wireguard_3.sh"
    try:
        with open(script_path, "r") as f:
            script_content = f.read()

        updated_script_content = re.sub(
            r'ip_address="[^"]+"', f'ip_address="{new_opposite_ip}"', script_content
        )

        with open(script_path, "w") as f:
            f.write(updated_script_content)

        display_checkmark(
            "\033[92mPing script updated with new opposite IP address!\033[0m"
        )
    except FileNotFoundError:
        print(f"\033[91mPing script {script_path} not found.\033[0m")
    except Exception as e:
        print(f"\033[91mError updating ping script: {e}\033[0m")


def update_ping_script_opposite_ip_wirenosec4(new_opposite_ip):
    script_path = "/etc/ping_wireguard_4.sh"
    try:
        with open(script_path, "r") as f:
            script_content = f.read()

        updated_script_content = re.sub(
            r'ip_address="[^"]+"', f'ip_address="{new_opposite_ip}"', script_content
        )

        with open(script_path, "w") as f:
            f.write(updated_script_content)

        display_checkmark(
            "\033[92mPing script updated with new opposite IP address!\033[0m"
        )
    except FileNotFoundError:
        print(f"\033[91mPing script {script_path} not found.\033[0m")
    except Exception as e:
        print(f"\033[91mError updating ping script: {e}\033[0m")


def update_ping_script_opposite_ip_wirenosec5(new_opposite_ip):
    script_path = "/etc/ping_wireguard_5.sh"
    try:
        with open(script_path, "r") as f:
            script_content = f.read()

        updated_script_content = re.sub(
            r'ip_address="[^"]+"', f'ip_address="{new_opposite_ip}"', script_content
        )

        with open(script_path, "w") as f:
            f.write(updated_script_content)

        display_checkmark(
            "\033[92mPing script updated with new opposite IP address!\033[0m"
        )
    except FileNotFoundError:
        print(f"\033[91mPing script {script_path} not found.\033[0m")
    except Exception as e:
        print(f"\033[91mError updating ping script: {e}\033[0m")


def update_ping_script_opposite_ip_wirenosec_client(new_opposite_ip):
    script_path = "/etc/ping_wireguard.sh"
    try:
        with open(script_path, "r") as f:
            script_content = f.read()

        updated_script_content = re.sub(
            r'ip_address="[^"]+"', f'ip_address="{new_opposite_ip}"', script_content
        )

        with open(script_path, "w") as f:
            f.write(updated_script_content)

        display_checkmark(
            "\033[92mPing script updated with new opposite IP address!\033[0m"
        )
    except FileNotFoundError:
        print(f"\033[91mPing script {script_path} not found.\033[0m")
    except Exception as e:
        print(f"\033[91mError updating ping script: {e}\033[0m")


def display_wireguard_config_sitwire(
    address_no_subnet, listen_port, endpoint, allowed_ips
):
    lines = [
        f"\033[97m──────────────────────────────────────\033[0m",
        f"\033[93mTitle:         Wireguard Configuration\033[0m",
        f"\033[97m──────────────────────────────────────\033[0m",
        f"\033[92mAddress:           \033[97m{address_no_subnet}\033[0m",
        f"\033[92mListenPort:        \033[97m{listen_port}\033[0m",
        f"\033[92mEndpoint:          \033[97m{endpoint}\033[0m",
        f"\033[92mAllowedIPs:        \033[97m{allowed_ips}\033[0m",
    ]
    box_width = 50

    print("\033[93m╭" + "─" * (box_width - 2) + "╮\033[0m")

    for line in lines:
        print(f"\033[93m {line:<{box_width - 4}} \033[0m")

    print("\033[93m╰" + "─" * (box_width - 2) + "╯\033[0m")


def wireguard_gre6tapn_iranconfig_1():
    local_ip_private = local_ip("/etc/gre61.sh")
    remote_ip_private = remote_ip("/etc/gre61.sh")
    private_ip_private = private_gre61("/etc/gre61.sh")
    config_path = "/etc/wireguard/wireserver1.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_gre6tapn_wire_iran1(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mGre6tap[Native] + Wireguard\033[93m IRAN Server \033[96mConfig [1]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN Server\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mKharej Client [1] \033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mGRE6tap \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6. \033[92mSave All Changes\033[0m")
        print("0. \033[97mback to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[GRE6tap]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Client [1]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec1(opposite_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "6":
            save_stuff_gre61(
                private_ip_private, local_ip_private, remote_ip_private, is_gre6=True
            )
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwire1sec(config_path, new_config)
            break
        elif choice == "0":
            clear()
            wireguardedit_gre6tap_noconjuction_1iran_5kharej()
            break
        else:
            print("Please select a valid option.")


def wireguard_gre6tapn_iranconfig_2():
    local_ip_private = local_ip("/etc/gre62.sh")
    remote_ip_private = remote_ip("/etc/gre62.sh")
    private_ip_private = private_gre61("/etc/gre62.sh")
    config_path = "/etc/wireguard/wireserver2.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_gre6tapn_wire_iran2(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mGre6tap[Native] + Wireguard\033[93m IRAN Server \033[96mConfig [2]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN Server\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mKharej Client [2] \033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mGRE6tap \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6. \033[92mSave All Changes\033[0m")
        print("0. \033[97mback to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[GRE6tap]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Client [2]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec2(opposite_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "6":
            save_stuff_gre62(
                private_ip_private, local_ip_private, remote_ip_private, is_gre6=True
            )
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwire2sec(config_path, new_config)
            break
        elif choice == "0":
            clear()
            wireguardedit_gre6tap_noconjuction_1iran_5kharej()
            break
        else:
            print("Please select a valid option.")


def wireguard_gre6tapn_iranconfig_3():
    local_ip_private = local_ip("/etc/gre63.sh")
    remote_ip_private = remote_ip("/etc/gre63.sh")
    private_ip_private = private_gre61("/etc/gre63.sh")
    config_path = "/etc/wireguard/wireserver3.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_gre6tapn_wire_iran3(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mGre6tap[Native] + Wireguard\033[93m IRAN Server \033[96mConfig [3]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN Server\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mKharej Client [3] \033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mGRE6tap \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6. \033[92mSave All Changes\033[0m")
        print("0. \033[97mback to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[GRE6tap]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Client [3]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec3(opposite_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "6":
            save_stuff_gre63(
                private_ip_private, local_ip_private, remote_ip_private, is_gre6=True
            )
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwire3sec(config_path, new_config)
            break
        elif choice == "0":
            clear()
            wireguardedit_gre6tap_noconjuction_1iran_5kharej()
            break
        else:
            print("Please select a valid option.")


def wireguard_gre6tapn_iranconfig_4():
    local_ip_private = local_ip("/etc/gre64.sh")
    remote_ip_private = remote_ip("/etc/gre64.sh")
    private_ip_private = private_gre61("/etc/gre64.sh")
    config_path = "/etc/wireguard/wireserver4.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_gre6tapn_wire_iran4(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mGre6tap[Native] + Wireguard\033[93m IRAN Server \033[96mConfig [4]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN Server\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mKharej Client [4] \033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mGRE6tap \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6. \033[92mSave All Changes\033[0m")
        print("0. \033[97mback to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[GRE6tap]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Client [4]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec4(opposite_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "6":
            save_stuff_gre64(
                private_ip_private, local_ip_private, remote_ip_private, is_gre6=True
            )
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwire4sec(config_path, new_config)
            break
        elif choice == "0":
            clear()
            wireguardedit_gre6tap_noconjuction_1iran_5kharej()
            break
        else:
            print("Please select a valid option.")


def wireguard_gre6tapn_iranconfig_5():
    local_ip_private = local_ip("/etc/gre65.sh")
    remote_ip_private = remote_ip("/etc/gre65.sh")
    private_ip_private = private_gre61("/etc/gre65.sh")
    config_path = "/etc/wireguard/wireserver5.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_gre6tapn_wire_iran5(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mGre6tap[Native] + Wireguard\033[93m IRAN Server \033[96mConfig [5]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN Server\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mKharej Client [5] \033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mGRE6tap \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6. \033[92mSave All Changes\033[0m")
        print("0. \033[97mback to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[GRE6tap]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Client [5]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec5(opposite_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "6":
            save_stuff_gre65(
                private_ip_private, local_ip_private, remote_ip_private, is_gre6=True
            )
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwire5sec(config_path, new_config)
            break
        elif choice == "0":
            clear()
            wireguardedit_gre6tap_noconjuction_1iran_5kharej()
            break
        else:
            print("Please select a valid option.")


def wireguard_gre6tapn_kharej_client1():
    local_ip_private = local_ip("/etc/gre61.sh")
    remote_ip_private = remote_ip("/etc/gre61.sh")
    private_ip_private = private_gre61("/etc/gre61.sh")
    config_path = "/etc/wireguard/wireclient.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_gre6tapn_wire_kharej1(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mGre6tap[Native] + Wireguard\033[93m Kharej Client \033[96m[1]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej Client [1]\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mIRAN Server \033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mGRE6tap \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6. \033[92mSave All Changes\033[0m")
        print("0. \033[97mback to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[GRE6tap]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Client [1]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec_client(opposite_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "6":
            save_stuff_gre61(
                private_ip_private, local_ip_private, remote_ip_private, is_gre6=True
            )
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwiresec_client(config_path, new_config)
            break
        elif choice == "0":
            clear()
            wireguardedit_gre6tap_noconjuction_1iran_5kharej()
            break
        else:
            print("Please select a valid option.")


def wireguard_gre6tapn_kharej_client2():
    local_ip_private = local_ip("/etc/gre62.sh")
    remote_ip_private = remote_ip("/etc/gre62.sh")
    private_ip_private = private_gre61("/etc/gre62.sh")
    config_path = "/etc/wireguard/wireclient.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_gre6tapn_wire_kharej2(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mGre6tap[Native] + Wireguard\033[93m Kharej Client \033[96m[2]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej Client [2]\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mIRAN Server \033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mGRE6tap \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6. \033[92mSave All Changes\033[0m")
        print("0. \033[97mback to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[GRE6tap]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Client [2]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec_client(opposite_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "6":
            save_stuff_gre62(
                private_ip_private, local_ip_private, remote_ip_private, is_gre6=True
            )
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwiresec_client(config_path, new_config)
            break
        elif choice == "0":
            clear()
            wireguardedit_gre6tap_noconjuction_1iran_5kharej()
            break
        else:
            print("Please select a valid option.")


def wireguard_gre6tapn_kharej_client3():
    local_ip_private = local_ip("/etc/gre63.sh")
    remote_ip_private = remote_ip("/etc/gre63.sh")
    private_ip_private = private_gre61("/etc/gre63.sh")
    config_path = "/etc/wireguard/wireclient.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_gre6tapn_wire_kharej3(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mGre6tap[Native] + Wireguard\033[93m Kharej Client \033[96m[3]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej Client [3]\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mIRAN Server \033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mGRE6tap \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6. \033[92mSave All Changes\033[0m")
        print("0. \033[97mback to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[GRE6tap]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Client [3]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec_client(opposite_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "6":
            save_stuff_gre63(
                private_ip_private, local_ip_private, remote_ip_private, is_gre6=True
            )
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwiresec_client(config_path, new_config)
            break
        elif choice == "0":
            clear()
            wireguardedit_gre6tap_noconjuction_1iran_5kharej()
            break
        else:
            print("Please select a valid option.")


def wireguard_gre6tapn_kharej_client4():
    local_ip_private = local_ip("/etc/gre64.sh")
    remote_ip_private = remote_ip("/etc/gre64.sh")
    private_ip_private = private_gre61("/etc/gre64.sh")
    config_path = "/etc/wireguard/wireclient.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_gre6tapn_wire_kharej4(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mGre6tap[Native] + Wireguard\033[93m Kharej Client \033[96m[4]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej Client [4]\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mIRAN Server \033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mGRE6tap \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6. \033[92mSave All Changes\033[0m")
        print("0. \033[97mback to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[GRE6tap]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Client [4]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec_client(opposite_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "6":
            save_stuff_gre64(
                private_ip_private, local_ip_private, remote_ip_private, is_gre6=True
            )
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwiresec_client(config_path, new_config)
            break
        elif choice == "0":
            clear()
            wireguardedit_gre6tap_noconjuction_1iran_5kharej()
            break
        else:
            print("Please select a valid option.")


def wireguard_gre6tapn_kharej_client5():
    local_ip_private = local_ip("/etc/gre65.sh")
    remote_ip_private = remote_ip("/etc/gre65.sh")
    private_ip_private = private_gre61("/etc/gre65.sh")
    config_path = "/etc/wireguard/wireclient.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_gre6tapn_wire_kharej5(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mGre6tap[Native] + Wireguard\033[93m Kharej Client \033[96m[5]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej Client [5]\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mIRAN Server \033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mGRE6tap \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6. \033[92mSave All Changes\033[0m")
        print("0. \033[97mback to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[GRE6tap]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Client [5]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec_client(opposite_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "6":
            save_stuff_gre65(
                private_ip_private, local_ip_private, remote_ip_private, is_gre6=True
            )
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwiresec_client(config_path, new_config)
            break
        elif choice == "0":
            clear()
            wireguardedit_gre6tap_noconjuction_1iran_5kharej()
            break
        else:
            print("Please select a valid option.")
# 1 kharej server 5 iran client


def wireguard_gre6tapn_kharejconfig_1():
    local_ip_private = local_ip("/etc/gre61.sh")
    remote_ip_private = remote_ip("/etc/gre61.sh")
    private_ip_private = private_gre61("/etc/gre61.sh")
    config_path = "/etc/wireguard/wireserver1.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_gre6tapn_wire_kharej_server1(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mGre6tap[Native] + Wireguard\033[93m Kharej Server \033[96mConfig [1]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej Server\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mIRAN Client [1] \033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mGRE6tap \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6. \033[92mSave All Changes\033[0m")
        print("0. \033[97mback to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[GRE6tap]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Client [1]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec1(opposite_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "6":
            save_stuff_gre61(
                private_ip_private, local_ip_private, remote_ip_private, is_gre6=True
            )
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwire1sec(config_path, new_config)
            break
        elif choice == "0":
            clear()
            wireguardedit_gre6tap_noconjuction_kharej1_5iran()
            break
        else:
            print("Please select a valid option.")


def wireguard_gre6tapn_kharejconfig_2():
    local_ip_private = local_ip("/etc/gre62.sh")
    remote_ip_private = remote_ip("/etc/gre62.sh")
    private_ip_private = private_gre61("/etc/gre62.sh")
    config_path = "/etc/wireguard/wireserver2.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_gre6tapn_wire_kharej_server2(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mGre6tap[Native] + Wireguard\033[93m Kharej Server \033[96mConfig [2]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej Server\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mIRAN Client [2] \033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mGRE6tap \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6. \033[92mSave All Changes\033[0m")
        print("0. \033[97mback to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[GRE6tap]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Client [2]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec2(opposite_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "6":
            save_stuff_gre62(
                private_ip_private, local_ip_private, remote_ip_private, is_gre6=True
            )
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwire2sec(config_path, new_config)
            break
        elif choice == "0":
            clear()
            wireguardedit_gre6tap_noconjuction_kharej1_5iran()
            break
        else:
            print("Please select a valid option.")


def wireguard_gre6tapn_kharejconfig_3():
    local_ip_private = local_ip("/etc/gre63.sh")
    remote_ip_private = remote_ip("/etc/gre63.sh")
    private_ip_private = private_gre61("/etc/gre63.sh")
    config_path = "/etc/wireguard/wireserver3.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_gre6tapn_wire_kharej_server3(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mGre6tap[Native] + Wireguard\033[93m Kharej Server \033[96mConfig [3]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej Server\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mIRAN Client [3] \033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mGRE6tap \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6. \033[92mSave All Changes\033[0m")
        print("0. \033[97mback to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[GRE6tap]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Client [3]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec3(opposite_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "6":
            save_stuff_gre63(
                private_ip_private, local_ip_private, remote_ip_private, is_gre6=True
            )
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwire3sec(config_path, new_config)
            break
        elif choice == "0":
            clear()
            wireguardedit_gre6tap_noconjuction_kharej1_5iran()
            break
        else:
            print("Please select a valid option.")


def wireguard_gre6tapn_kharejconfig_4():
    local_ip_private = local_ip("/etc/gre64.sh")
    remote_ip_private = remote_ip("/etc/gre64.sh")
    private_ip_private = private_gre61("/etc/gre64.sh")
    config_path = "/etc/wireguard/wireserver4.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_gre6tapn_wire_kharej_server4(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mGre6tap[Native] + Wireguard\033[93m Kharej Server \033[96mConfig [4]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej Server\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mIRAN Client [4] \033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mGRE6tap \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6. \033[92mSave All Changes\033[0m")
        print("0. \033[97mback to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[GRE6tap]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Client [4]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec4(opposite_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "6":
            save_stuff_gre64(
                private_ip_private, local_ip_private, remote_ip_private, is_gre6=True
            )
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwire4sec(config_path, new_config)
            break
        elif choice == "0":
            clear()
            wireguardedit_gre6tap_noconjuction_kharej1_5iran()
            break
        else:
            print("Please select a valid option.")


def wireguard_gre6tapn_kharejconfig_5():
    local_ip_private = local_ip("/etc/gre65.sh")
    remote_ip_private = remote_ip("/etc/gre65.sh")
    private_ip_private = private_gre61("/etc/gre65.sh")
    config_path = "/etc/wireguard/wireserver5.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_gre6tapn_wire_kharej_server5(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mGre6tap[Native] + Wireguard\033[93m Kharej Server \033[96mConfig [5]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej Server\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mIRAN Client [5] \033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mGRE6tap \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6. \033[92mSave All Changes\033[0m")
        print("0. \033[97mback to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[GRE6tap]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Client [5]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec5(opposite_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "6":
            save_stuff_gre65(
                private_ip_private, local_ip_private, remote_ip_private, is_gre6=True
            )
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwire5sec(config_path, new_config)
            break
        elif choice == "0":
            clear()
            wireguardedit_gre6tap_noconjuction_kharej1_5iran()
            break
        else:
            print("Please select a valid option.")


def wireguard_gre6tapn_iran_client1():
    local_ip_private = local_ip("/etc/gre61.sh")
    remote_ip_private = remote_ip("/etc/gre61.sh")
    private_ip_private = private_gre61("/etc/gre61.sh")
    config_path = "/etc/wireguard/wireclient.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_gre6tapn_wire_iran_client1(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mGre6tap[Native] + Wireguard\033[93m IRAN Client \033[96m[1]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN Client [1]\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mKharej Server \033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mGRE6tap \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6. \033[92mSave All Changes\033[0m")
        print("0. \033[97mback to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[GRE6tap]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Client [1]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec_client(opposite_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "6":
            save_stuff_gre61(
                private_ip_private, local_ip_private, remote_ip_private, is_gre6=True
            )
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwiresec_client(config_path, new_config)
            break
        elif choice == "0":
            clear()
            wireguardedit_gre6tap_noconjuction_kharej1_5iran()
            break
        else:
            print("Please select a valid option.")


def wireguard_gre6tapn_iran_client2():
    local_ip_private = local_ip("/etc/gre62.sh")
    remote_ip_private = remote_ip("/etc/gre62.sh")
    private_ip_private = private_gre61("/etc/gre62.sh")
    config_path = "/etc/wireguard/wireclient.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_gre6tapn_wire_iran_client2(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mGre6tap[Native] + Wireguard\033[93m IRAN Client \033[96m[2]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN Client [2]\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mKharej Server \033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mGRE6tap \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6. \033[92mSave All Changes\033[0m")
        print("0. \033[97mback to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[GRE6tap]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Client [2]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec_client(opposite_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "6":
            save_stuff_gre62(
                private_ip_private, local_ip_private, remote_ip_private, is_gre6=True
            )
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwiresec_client(config_path, new_config)
            break
        elif choice == "0":
            clear()
            wireguardedit_gre6tap_noconjuction_kharej1_5iran()
            break
        else:
            print("Please select a valid option.")


def wireguard_gre6tapn_iran_client3():
    local_ip_private = local_ip("/etc/gre63.sh")
    remote_ip_private = remote_ip("/etc/gre63.sh")
    private_ip_private = private_gre61("/etc/gre63.sh")
    config_path = "/etc/wireguard/wireclient.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_gre6tapn_wire_iran_client3(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mGre6tap[Native] + Wireguard\033[93m IRAN Client \033[96m[3]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN Client [3]\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mKharej Server \033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mGRE6tap \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6. \033[92mSave All Changes\033[0m")
        print("0. \033[97mback to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[GRE6tap]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Client [3]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec_client(opposite_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "6":
            save_stuff_gre63(
                private_ip_private, local_ip_private, remote_ip_private, is_gre6=True
            )
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwiresec_client(config_path, new_config)
            break
        elif choice == "0":
            clear()
            wireguardedit_gre6tap_noconjuction_kharej1_5iran()
            break
        else:
            print("Please select a valid option.")


def wireguard_gre6tapn_iran_client4():
    local_ip_private = local_ip("/etc/gre64.sh")
    remote_ip_private = remote_ip("/etc/gre64.sh")
    private_ip_private = private_gre61("/etc/gre64.sh")
    config_path = "/etc/wireguard/wireclient.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_gre6tapn_wire_iran_client4(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mGre6tap[Native] + Wireguard\033[93m IRAN Client \033[96m[4]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN Client [4]\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mKharej Server \033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mGRE6tap \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6. \033[92mSave All Changes\033[0m")
        print("0. \033[97mback to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[GRE6tap]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Client [4]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec_client(opposite_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "6":
            save_stuff_gre64(
                private_ip_private, local_ip_private, remote_ip_private, is_gre6=True
            )
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwiresec_client(config_path, new_config)
            break
        elif choice == "0":
            clear()
            wireguardedit_gre6tap_noconjuction_kharej1_5iran()
            break
        else:
            print("Please select a valid option.")


def wireguard_gre6tapn_iran_client5():
    local_ip_private = local_ip("/etc/gre65.sh")
    remote_ip_private = remote_ip("/etc/gre65.sh")
    private_ip_private = private_gre61("/etc/gre65.sh")
    config_path = "/etc/wireguard/wireclient.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_gre6tapn_wire_iran_client5(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )

        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mGre6tap[Native] + Wireguard\033[93m IRAN Client \033[96m[5]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN Client [5]\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mKharej Server \033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mGRE6tap \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6. \033[92mSave All Changes\033[0m")
        print("0. \033[97mback to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[GRE6tap]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Client [5]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec_client(opposite_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "6":
            save_stuff_gre65(
                private_ip_private, local_ip_private, remote_ip_private, is_gre6=True
            )
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwiresec_client(config_path, new_config)
            break
        elif choice == "0":
            clear()
            wireguardedit_gre6tap_noconjuction_kharej1_5iran()
            break
        else:
            print("Please select a valid option.")


# ipsec
def gre6tap_wireguard_sec_edit_local():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print(
        "\033[92m(   ) \033[93mGre6tap[Native] + Wireguard + IPSEC \033[93m Edit Menu\033[0m"
    )
    print(
        '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
    )
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print(
        "1. \033[92mGre6tap[native] + Wireguard - [1]Kharej Server [5]IRAN Clients\033[0m"
    )
    print(
        "2. \033[93mGre6tap[native] + Wireguard - [1]IRAN   Server [5]Kharej Clients\033[0m"
    )
    print("\033[93m───────────────────────────────────────\033[0m")
    print("0.\033[97mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")
    while True:
        server_type = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if server_type == "1":
            wireguardedit_gre6tapsec_noconjuction_kharej1_5iran()
            break
        elif server_type == "2":
            wireguardedit_gre6tapsec_noconjuction_1iran_5kharej()
            break
        elif server_type == "0":
            os.system("clear")
            gre6tapwireguardeditserver_mnu()
            break
        else:
            print("Invalid choice.")


def wireguardedit_gre6tapsec_noconjuction_1iran_5kharej():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print(
        "\033[92m(   ) \033[93mGre6tap[native] + Wireguard + IPSEC \033[92m[1]IRAN Server\033[96m [5]Kharej Client\033[93m Edit Menu\033[0m"
    )
    print(
        '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
    )
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[92mKharej Client [1] Config\033[0m")
    print("2. \033[92mKharej Client [2] Config\033[0m")
    print("3. \033[92mKharej Client [3] Config\033[0m")
    print("4. \033[93mKharej Client [4] Config\033[0m")
    print("5. \033[92mKharej Client [5] Config\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    print("6. \033[96mIRAN Server Config\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    print("0.\033[97mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")
    while True:
        server_type = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if server_type == "1":
            wireguard_gre6tapnsec_kharej_client1()
            break
        elif server_type == "2":
            wireguard_gre6tapnsec_kharej_client2()
            break
        elif server_type == "3":
            wireguard_gre6tapnsec_kharej_client3()
            break
        elif server_type == "4":
            wireguard_gre6tapnsec_kharej_client4()
            break
        elif server_type == "5":
            wireguard_gre6tapnsec_kharej_client5()
            break
        elif server_type == "6":
            wireguard_gre6tapnsec_iran_server()
            break
        elif server_type == "0":
            os.system("clear")
            gre6tap_wireguard_sec_edit_local()
            break
        else:
            print("Invalid choice.")


def wireguard_gre6tapnsec_iran_server():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print(
        "\033[92m(   ) \033[93mGre6tap[native] + Wireguard + IPSEC \033[92m[1]IRAN Server\033[96m [5]Kharej Client\033[93m Edit Menu\033[0m"
    )
    print(
        '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
    )
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[92mIRAN Server Config [1] \033[0m")
    print("2. \033[92mIRAN Server Config [2]\033[0m")
    print("3. \033[93mIRAN Server Config [3]\033[0m")
    print("4. \033[92mIRAN Server Config [4]\033[0m")
    print("5. \033[92mIRAN Server Config [5]\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    print("0.\033[97mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")
    while True:
        server_type = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if server_type == "1":
            wireguard_gre6tapnsec_iranconfig_1()
            break
        elif server_type == "2":
            wireguard_gre6tapnsec_iranconfig_2()
            break
        elif server_type == "3":
            wireguard_gre6tapnsec_iranconfig_3()
            break
        elif server_type == "4":
            wireguard_gre6tapnsec_iranconfig_4()
            break
        elif server_type == "5":
            wireguard_gre6tapnsec_iranconfig_5()
            break
        elif server_type == "0":
            os.system("clear")
            wireguardedit_gre6tapsec_noconjuction_1iran_5kharej()
            break
        else:
            print("Invalid choice.")


def wireguardedit_gre6tapsec_noconjuction_kharej1_5iran():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print(
        "\033[92m(   ) \033[93mGre6tap[native] + Wireguard + IPSEC \033[92m[1]Kharej Server\033[96m [5]IRAN Client\033[93m Edit Menu\033[0m"
    )
    print(
        '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
    )
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[92mIRAN Client [1] Config\033[0m")
    print("2. \033[92mIRAN Client [2] Config\033[0m")
    print("3. \033[92mIRAN Client [3] Config\033[0m")
    print("4. \033[93mIRAN Client [4] Config\033[0m")
    print("5. \033[92mIRAN Client [5] Config\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    print("6. \033[96mKharej Server Config\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    print("0.\033[97mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")
    while True:
        server_type = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if server_type == "1":
            wireguard_gre6tapnsec_iran_client1()
            break
        elif server_type == "2":
            wireguard_gre6tapnsec_iran_client2()
            break
        elif server_type == "3":
            wireguard_gre6tapnsec_iran_client3()
            break
        elif server_type == "4":
            wireguard_gre6tapnsec_iran_client4()
            break
        elif server_type == "5":
            wireguard_gre6tapnsec_iran_client5()
            break
        elif server_type == "6":
            wireguard_gre6tapnsec_kharej_server()
            break
        elif server_type == "0":
            os.system("clear")
            gre6tap_wireguard_sec_edit_local()
            break
        else:
            print("Invalid choice.")


def wireguard_gre6tapnsec_kharej_server():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print(
        "\033[92m(   ) \033[93mGre6tap[native] + Wireguard + IPSEC \033[92m[1]Kharej Server\033[96m [5]IRAN Client\033[93m Edit Menu\033[0m"
    )
    print(
        '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
    )
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[92mKharej Server Config [1] \033[0m")
    print("2. \033[92mKharej Server Config [2]\033[0m")
    print("3. \033[93mKharej Server Config [3]\033[0m")
    print("4. \033[92mKharej Server Config [4]\033[0m")
    print("5. \033[92mKharej Server Config [5]\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    print("0.\033[97mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")
    while True:
        server_type = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if server_type == "1":
            wireguard_gre6tapnsec_kharejconfig_1()
            break
        elif server_type == "2":
            wireguard_gre6tapnsec_kharejconfig_2()
            break
        elif server_type == "3":
            wireguard_gre6tapnsec_kharejconfig_3()
            break
        elif server_type == "4":
            wireguard_gre6tapnsec_kharejconfig_4()
            break
        elif server_type == "5":
            wireguard_gre6tapnsec_kharejconfig_5()
            break
        elif server_type == "0":
            os.system("clear")
            wireguardedit_gre6tapsec_noconjuction_kharej1_5iran()
            break
        else:
            print("Invalid choice.")


# can be removed#
def update_ipsec_conf_wireguard_server1(name, new_private_ip):
    try:
        with open(name, "r") as f:
            content = f.readlines()

        start_idx, end_idx = None, None
        for i, line in enumerate(content):
            if line.strip() == "conn wireguard_server1":
                start_idx = i
            elif start_idx is not None and line.strip().startswith("conn "):
                end_idx = i
                break

        if start_idx is None:
            print("\033[91m'conn wireguard_server1' section not found\033[0m")
            return

        if end_idx is None:
            end_idx = len(content)

        section = content[start_idx:end_idx]

        ip_type = (
            "ipv6"
            if isinstance(ipaddress.ip_address(new_private_ip), ipaddress.IPv6Address)
            else "ipv4"
        )

        if ip_type == "ipv6":
            subnet = "/64"
        else:
            subnet = "/32"

        ip_parts = (
            new_private_ip.split(".")
            if ip_type == "ipv4"
            else new_private_ip.split(":")
        )
        if new_private_ip.endswith(".2") or new_private_ip.endswith(":2"):
            ip_parts[-1] = "1"
        else:
            ip_parts[-1] = "2"
        counterpart_ip = ".".join(ip_parts) if ip_type == "ipv4" else ":".join(ip_parts)

        new_section = []
        for line in section:
            line = re.sub(
                r"leftsubnet=\S+", f"leftsubnet={new_private_ip}{subnet}", line
            )
            line = re.sub(r"leftid=\S+", f"leftid={new_private_ip}", line)
            line = re.sub(r"right=\S+", f"right={counterpart_ip}", line)
            line = re.sub(
                r"rightsubnet=\S+", f"rightsubnet={counterpart_ip}{subnet}", line
            )
            new_section.append(line)

        new_content = content[:start_idx] + new_section + content[end_idx:]

        with open(name, "w") as f:
            f.writelines(new_content)

        print(f"\033[92m'conn wireguard_server1' section updated successfully\033[0m")
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def update_ipsec_conf_wireguard_server2(name, new_private_ip):
    try:
        with open(name, "r") as f:
            content = f.readlines()

        start_idx, end_idx = None, None
        for i, line in enumerate(content):
            if line.strip() == "conn wireguard_server2":
                start_idx = i
            elif start_idx is not None and line.strip().startswith("conn "):
                end_idx = i
                break

        if start_idx is None:
            print("\033[91m'conn wireguard_server2' section not found\033[0m")
            return

        if end_idx is None:
            end_idx = len(content)

        section = content[start_idx:end_idx]

        ip_type = (
            "ipv6"
            if isinstance(ipaddress.ip_address(new_private_ip), ipaddress.IPv6Address)
            else "ipv4"
        )

        if ip_type == "ipv6":
            subnet = "/64"
        else:
            subnet = "/32"

        ip_parts = (
            new_private_ip.split(".")
            if ip_type == "ipv4"
            else new_private_ip.split(":")
        )
        if new_private_ip.endswith(".2") or new_private_ip.endswith(":2"):
            ip_parts[-1] = "1"
        else:
            ip_parts[-1] = "2"
        counterpart_ip = ".".join(ip_parts) if ip_type == "ipv4" else ":".join(ip_parts)

        new_section = []
        for line in section:
            line = re.sub(
                r"leftsubnet=\S+", f"leftsubnet={new_private_ip}{subnet}", line
            )
            line = re.sub(r"leftid=\S+", f"leftid={new_private_ip}", line)
            line = re.sub(r"right=\S+", f"right={counterpart_ip}", line)
            line = re.sub(
                r"rightsubnet=\S+", f"rightsubnet={counterpart_ip}{subnet}", line
            )
            new_section.append(line)

        new_content = content[:start_idx] + new_section + content[end_idx:]

        with open(name, "w") as f:
            f.writelines(new_content)

        print(f"\033[92m'conn wireguard_server2' section updated successfully\033[0m")
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def update_ipsec_conf_wireguard_server3(name, new_private_ip):
    try:
        with open(name, "r") as f:
            content = f.readlines()

        start_idx, end_idx = None, None
        for i, line in enumerate(content):
            if line.strip() == "conn wireguard_server3":
                start_idx = i
            elif start_idx is not None and line.strip().startswith("conn "):
                end_idx = i
                break

        if start_idx is None:
            print("\033[91m'conn wireguard_server3' section not found\033[0m")
            return

        if end_idx is None:
            end_idx = len(content)

        section = content[start_idx:end_idx]

        ip_type = (
            "ipv6"
            if isinstance(ipaddress.ip_address(new_private_ip), ipaddress.IPv6Address)
            else "ipv4"
        )

        if ip_type == "ipv6":
            subnet = "/64"
        else:
            subnet = "/32"

        ip_parts = (
            new_private_ip.split(".")
            if ip_type == "ipv4"
            else new_private_ip.split(":")
        )
        if new_private_ip.endswith(".2") or new_private_ip.endswith(":2"):
            ip_parts[-1] = "1"
        else:
            ip_parts[-1] = "2"
        counterpart_ip = ".".join(ip_parts) if ip_type == "ipv4" else ":".join(ip_parts)

        new_section = []
        for line in section:
            line = re.sub(
                r"leftsubnet=\S+", f"leftsubnet={new_private_ip}{subnet}", line
            )
            line = re.sub(r"leftid=\S+", f"leftid={new_private_ip}", line)
            line = re.sub(r"right=\S+", f"right={counterpart_ip}", line)
            line = re.sub(
                r"rightsubnet=\S+", f"rightsubnet={counterpart_ip}{subnet}", line
            )
            new_section.append(line)

        new_content = content[:start_idx] + new_section + content[end_idx:]

        with open(name, "w") as f:
            f.writelines(new_content)

        print(f"\033[92m'conn wireguard_server3' section updated successfully\033[0m")
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def update_ipsec_conf_wireguard_server4(name, new_private_ip):
    try:
        with open(name, "r") as f:
            content = f.readlines()

        start_idx, end_idx = None, None
        for i, line in enumerate(content):
            if line.strip() == "conn wireguard_server4":
                start_idx = i
            elif start_idx is not None and line.strip().startswith("conn "):
                end_idx = i
                break

        if start_idx is None:
            print("\033[91m'conn wireguard_server4' section not found\033[0m")
            return

        if end_idx is None:
            end_idx = len(content)

        section = content[start_idx:end_idx]

        ip_type = (
            "ipv6"
            if isinstance(ipaddress.ip_address(new_private_ip), ipaddress.IPv6Address)
            else "ipv4"
        )

        if ip_type == "ipv6":
            subnet = "/64"
        else:
            subnet = "/32"

        ip_parts = (
            new_private_ip.split(".")
            if ip_type == "ipv4"
            else new_private_ip.split(":")
        )
        if new_private_ip.endswith(".2") or new_private_ip.endswith(":2"):
            ip_parts[-1] = "1"
        else:
            ip_parts[-1] = "2"
        counterpart_ip = ".".join(ip_parts) if ip_type == "ipv4" else ":".join(ip_parts)

        new_section = []
        for line in section:
            line = re.sub(
                r"leftsubnet=\S+", f"leftsubnet={new_private_ip}{subnet}", line
            )
            line = re.sub(r"leftid=\S+", f"leftid={new_private_ip}", line)
            line = re.sub(r"right=\S+", f"right={counterpart_ip}", line)
            line = re.sub(
                r"rightsubnet=\S+", f"rightsubnet={counterpart_ip}{subnet}", line
            )
            new_section.append(line)

        new_content = content[:start_idx] + new_section + content[end_idx:]

        with open(name, "w") as f:
            f.writelines(new_content)

        print(f"\033[92m'conn wireguard_server4' section updated successfully\033[0m")
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def update_ipsec_conf_wireguard_server5(name, new_private_ip):
    try:
        with open(name, "r") as f:
            content = f.readlines()

        start_idx, end_idx = None, None
        for i, line in enumerate(content):
            if line.strip() == "conn wireguard_server5":
                start_idx = i
            elif start_idx is not None and line.strip().startswith("conn "):
                end_idx = i
                break

        if start_idx is None:
            print("\033[91m'conn wireguard_server5' section not found\033[0m")
            return

        if end_idx is None:
            end_idx = len(content)

        section = content[start_idx:end_idx]

        ip_type = (
            "ipv6"
            if isinstance(ipaddress.ip_address(new_private_ip), ipaddress.IPv6Address)
            else "ipv4"
        )

        if ip_type == "ipv6":
            subnet = "/64"
        else:
            subnet = "/32"

        ip_parts = (
            new_private_ip.split(".")
            if ip_type == "ipv4"
            else new_private_ip.split(":")
        )
        if new_private_ip.endswith(".2") or new_private_ip.endswith(":2"):
            ip_parts[-1] = "1"
        else:
            ip_parts[-1] = "2"
        counterpart_ip = ".".join(ip_parts) if ip_type == "ipv4" else ":".join(ip_parts)

        new_section = []
        for line in section:
            line = re.sub(
                r"leftsubnet=\S+", f"leftsubnet={new_private_ip}{subnet}", line
            )
            line = re.sub(r"leftid=\S+", f"leftid={new_private_ip}", line)
            line = re.sub(r"right=\S+", f"right={counterpart_ip}", line)
            line = re.sub(
                r"rightsubnet=\S+", f"rightsubnet={counterpart_ip}{subnet}", line
            )
            new_section.append(line)

        new_content = content[:start_idx] + new_section + content[end_idx:]

        with open(name, "w") as f:
            f.writelines(new_content)

        print(f"\033[92m'conn wireguard_server5' section updated successfully\033[0m")
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def update_ipsec_conf_wireguard_46sec(name, new_private_ip):
    try:
        with open(name, "r") as f:
            content = f.read()

        ip_obj = ipaddress.ip_address(new_private_ip)
        if isinstance(ip_obj, ipaddress.IPv6Address):
            ip_parts = new_private_ip.split(":")
            subnet_suffix = "/64"
        else:
            ip_parts = new_private_ip.split(".")
            subnet_suffix = "/32"

        ip_parts[-1] = "1" if ip_parts[-1].endswith("2") else "2"
        counterpart_ip = (
            ":".join(ip_parts)
            if isinstance(ip_obj, ipaddress.IPv6Address)
            else ".".join(ip_parts)
        )

        new_content = re.sub(
            r"leftsubnet=\S+", f"leftsubnet={new_private_ip}{subnet_suffix}", content
        )
        new_content = re.sub(r"leftid=\S+", f"leftid={new_private_ip}", new_content)
        new_content = re.sub(r"right=\S+", f"right={counterpart_ip}", new_content)
        new_content = re.sub(
            r"rightsubnet=\S+",
            f"rightsubnet={counterpart_ip}{subnet_suffix}",
            new_content,
        )

        with open(name, "w") as f:
            f.write(new_content)

        print("\033[92mIPsec configuration updated successfully!\033[0m")

    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mOut of ordinary error: {e}\033[0m")


def update_ipsecsecret_wire(name, new_secret):
    try:
        with open(name, "r") as f:
            content = f.read()

        new_content = re.sub(r'PSK "\S+"', f'PSK "{new_secret}"', content)

        with open(name, "w") as f:
            f.write(new_content)

        display_checkmark("\033[92mIPsec secret key updated successfully!\033[0m")
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mOut of ordinary error: {e}\033[0m")


def ipsecsecret_key_wire(name):
    try:
        with open(name, "r") as f:
            content = f.read()
        match = re.search(r'PSK "(\S+)"', content)
        if match:
            return match.group(1)
        else:
            print("\033[91mNo IPsec key found\033[0m")
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mOut of ordinary error: {e}\033[0m")
    return None


def display_ipsecsecret_wire(secret_key):
    box_width = 50
    print("\033[93m╭" + "─" * (box_width - 2) + "╮\033[0m")
    print(f"\033[93m Title:        \033[93m IPsec Secret Key\033[0m")
    print(f"\033[97m──────────────────────────────────────\033[0m")
    print(f"\033[93m IPsec Key:  \033[97m{secret_key}\033[0m")
    print("\033[93m╰" + "─" * (box_width - 2) + "╯\033[0m")


# can be removed#


def wireguard_gre6tapnsec_kharejconfig_1():
    local_ip_private = local_ip("/etc/gre61.sh")
    remote_ip_private = remote_ip("/etc/gre61.sh")
    private_ip_private = private_gre61("/etc/gre61.sh")
    config_path = "/etc/wireguard/wireserver1.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_gre6tapn_wire_kharej_server1(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )
        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mGre6tap[Native] + Wireguard\033[93m Kharej Server \033[96mConfig [1]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej Server\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mIRAN Client [1] \033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mGRE6tap \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6.\033[94m Change IPsec Secret Key\033[0m")
        print("7. \033[92mSave All Changes\033[0m")
        print("0. \033[97mback to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[GRE6tap]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Client [1]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec1(opposite_ip)
                update_ipsec_conf_wireguard_server1("/etc/ipsec1.conf", new_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "6":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secret Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")
        elif choice == "7":
            save_stuff_gre61(
                private_ip_private, local_ip_private, remote_ip_private, is_gre6=True
            )
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwire1sec(config_path, new_config)
            update_ipsec_ip_multi(address_no_subnet)
            break
        elif choice == "0":
            clear()
            wireguardedit_gre6tapsec_noconjuction_kharej1_5iran()
            break
        else:
            print("Please select a valid option.")


def wireguard_gre6tapnsec_kharejconfig_2():
    local_ip_private = local_ip("/etc/gre62.sh")
    remote_ip_private = remote_ip("/etc/gre62.sh")
    private_ip_private = private_gre61("/etc/gre62.sh")
    config_path = "/etc/wireguard/wireserver2.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_gre6tapn_wire_kharej_server2(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )
        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mGre6tap[Native] + Wireguard\033[93m Kharej Server \033[96mConfig [2]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej Server\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mIRAN Client [2] \033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mGRE6tap \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6.\033[94m Change IPsec Secret Key\033[0m")
        print("7. \033[92mSave All Changes\033[0m")
        print("0. \033[97mback to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[GRE6tap]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Client [2]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec2(opposite_ip)
                update_ipsec_conf_wireguard_server2("/etc/ipsec1.conf", new_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "6":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secret Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")
        elif choice == "7":
            save_stuff_gre62(
                private_ip_private, local_ip_private, remote_ip_private, is_gre6=True
            )
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwire2sec(config_path, new_config)
            update_ipsec_ip_multi2(address_no_subnet)
            break
        elif choice == "0":
            clear()
            wireguardedit_gre6tapsec_noconjuction_kharej1_5iran()
            break
        else:
            print("Please select a valid option.")


def wireguard_gre6tapnsec_kharejconfig_3():
    local_ip_private = local_ip("/etc/gre63.sh")
    remote_ip_private = remote_ip("/etc/gre63.sh")
    private_ip_private = private_gre61("/etc/gre63.sh")
    config_path = "/etc/wireguard/wireserver3.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_gre6tapn_wire_kharej_server3(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )
        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mGre6tap[Native] + Wireguard\033[93m Kharej Server \033[96mConfig [3]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej Server\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mIRAN Client [3] \033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mGRE6tap \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6.\033[94m Change IPsec Secret Key\033[0m")
        print("7. \033[92mSave All Changes\033[0m")
        print("0. \033[97mback to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[GRE6tap]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Client [3]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec3(opposite_ip)
                update_ipsec_conf_wireguard_server3("/etc/ipsec1.conf", new_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "6":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secret Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")
        elif choice == "7":
            save_stuff_gre63(
                private_ip_private, local_ip_private, remote_ip_private, is_gre6=True
            )
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwire3sec(config_path, new_config)
            update_ipsec_ip_multi3(address_no_subnet)
            break
        elif choice == "0":
            clear()
            wireguardedit_gre6tapsec_noconjuction_kharej1_5iran()
            break
        else:
            print("Please select a valid option.")


def wireguard_gre6tapnsec_kharejconfig_4():
    local_ip_private = local_ip("/etc/gre64.sh")
    remote_ip_private = remote_ip("/etc/gre64.sh")
    private_ip_private = private_gre61("/etc/gre64.sh")
    config_path = "/etc/wireguard/wireserver4.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_gre6tapn_wire_kharej_server4(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )
        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mGre6tap[Native] + Wireguard\033[93m Kharej Server \033[96mConfig [4]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej Server\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mIRAN Client [4] \033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mGRE6tap \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6.\033[94m Change IPsec Secret Key\033[0m")
        print("7. \033[92mSave All Changes\033[0m")
        print("0. \033[97mback to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[GRE6tap]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Client [4]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec4(opposite_ip)
                update_ipsec_conf_wireguard_server4("/etc/ipsec1.conf", new_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "6":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secret Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")
        elif choice == "7":
            save_stuff_gre64(
                private_ip_private, local_ip_private, remote_ip_private, is_gre6=True
            )
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwire4sec(config_path, new_config)
            update_ipsec_ip_multi4(address_no_subnet)
            break
        elif choice == "0":
            clear()
            wireguardedit_gre6tapsec_noconjuction_kharej1_5iran()
            break
        else:
            print("Please select a valid option.")


def wireguard_gre6tapnsec_kharejconfig_5():
    local_ip_private = local_ip("/etc/gre65.sh")
    remote_ip_private = remote_ip("/etc/gre65.sh")
    private_ip_private = private_gre61("/etc/gre65.sh")
    config_path = "/etc/wireguard/wireserver5.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_gre6tapn_wire_kharej_server5(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )
        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mGre6tap[Native] + Wireguard\033[93m Kharej Server \033[96mConfig [5]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej Server\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mIRAN Client [5] \033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mGRE6tap \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6.\033[94m Change IPsec Secret Key\033[0m")
        print("7. \033[92mSave All Changes\033[0m")
        print("0. \033[97mback to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[GRE6tap]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Client [5]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec5(opposite_ip)
                update_ipsec_conf_wireguard_server5("/etc/ipsec1.conf", new_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "6":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secret Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")
        elif choice == "7":
            save_stuff_gre64(
                private_ip_private, local_ip_private, remote_ip_private, is_gre6=True
            )
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwire5sec(config_path, new_config)
            update_ipsec_ip_multi5(address_no_subnet)
            break
        elif choice == "0":
            clear()
            wireguardedit_gre6tapsec_noconjuction_kharej1_5iran()
            break
        else:
            print("Please select a valid option.")


def wireguard_gre6tapnsec_iran_client1():
    local_ip_private = local_ip("/etc/gre61.sh")
    remote_ip_private = remote_ip("/etc/gre61.sh")
    private_ip_private = private_gre61("/etc/gre61.sh")
    config_path = "/etc/wireguard/wireclient.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_gre6tapn_wire_iran_client1(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )
        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mGre6tap[Native] + Wireguard\033[93m IRAN Client \033[96m[1]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN Client [1]\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mKharej Server \033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mGRE6tap \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6.\033[94m Change IPsec Secret Key\033[0m")
        print("7. \033[92mSave All Changes\033[0m")
        print("0. \033[97mback to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[GRE6tap]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Client [1]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec_client(opposite_ip)
                update_ipsec_conf_wireguard_46sec("/etc/ipsec1.conf", new_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "6":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secret Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")
        elif choice == "7":
            save_stuff_gre61(
                private_ip_private, local_ip_private, remote_ip_private, is_gre6=True
            )
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwiresec_client(config_path, new_config)
            update_ipsec_ip(address_no_subnet)
            break
        elif choice == "0":
            clear()
            wireguardedit_gre6tapsec_noconjuction_kharej1_5iran()
            break
        else:
            print("Please select a valid option.")


def wireguard_gre6tapnsec_iran_client2():
    local_ip_private = local_ip("/etc/gre62.sh")
    remote_ip_private = remote_ip("/etc/gre62.sh")
    private_ip_private = private_gre61("/etc/gre62.sh")
    config_path = "/etc/wireguard/wireclient.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_gre6tapn_wire_iran_client2(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )
        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mGre6tap[Native] + Wireguard\033[93m IRAN Client \033[96m[2]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN Client [2]\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mKharej Server \033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mGRE6tap \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6.\033[94m Change IPsec Secret Key\033[0m")
        print("7. \033[92mSave All Changes\033[0m")
        print("0. \033[97mback to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[GRE6tap]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Client [2]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec_client(opposite_ip)
                update_ipsec_conf_wireguard_46sec("/etc/ipsec1.conf", new_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "6":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secret Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")
        elif choice == "7":
            save_stuff_gre62(
                private_ip_private, local_ip_private, remote_ip_private, is_gre6=True
            )
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwiresec_client(config_path, new_config)
            update_ipsec_ip(address_no_subnet)
            break
        elif choice == "0":
            clear()
            wireguardedit_gre6tapsec_noconjuction_kharej1_5iran()
            break
        else:
            print("Please select a valid option.")


def wireguard_gre6tapnsec_iran_client3():
    local_ip_private = local_ip("/etc/gre63.sh")
    remote_ip_private = remote_ip("/etc/gre63.sh")
    private_ip_private = private_gre61("/etc/gre63.sh")
    config_path = "/etc/wireguard/wireclient.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_gre6tapn_wire_iran_client3(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )
        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mGre6tap[Native] + Wireguard\033[93m IRAN Client \033[96m[3]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN Client [3]\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mKharej Server \033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mGRE6tap \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6.\033[94m Change IPsec Secret Key\033[0m")
        print("7. \033[92mSave All Changes\033[0m")
        print("0. \033[97mback to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[GRE6tap]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Client [3]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec_client(opposite_ip)
                update_ipsec_conf_wireguard_46sec("/etc/ipsec1.conf", new_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "6":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secret Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")
        elif choice == "7":
            save_stuff_gre63(
                private_ip_private, local_ip_private, remote_ip_private, is_gre6=True
            )
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwiresec_client(config_path, new_config)
            update_ipsec_ip(address_no_subnet)
            break
        elif choice == "0":
            clear()
            wireguardedit_gre6tapsec_noconjuction_kharej1_5iran()
            break
        else:
            print("Please select a valid option.")


def wireguard_gre6tapnsec_iran_client4():
    local_ip_private = local_ip("/etc/gre64.sh")
    remote_ip_private = remote_ip("/etc/gre64.sh")
    private_ip_private = private_gre61("/etc/gre64.sh")
    config_path = "/etc/wireguard/wireclient.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_gre6tapn_wire_iran_client4(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )
        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mGre6tap[Native] + Wireguard\033[93m IRAN Client \033[96m[4]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN Client [4]\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mKharej Server \033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mGRE6tap \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6.\033[94m Change IPsec Secret Key\033[0m")
        print("7. \033[92mSave All Changes\033[0m")
        print("0. \033[97mback to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[GRE6tap]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Client [4]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec_client(opposite_ip)
                update_ipsec_conf_wireguard_46sec("/etc/ipsec1.conf", new_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "6":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secret Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")
        elif choice == "7":
            save_stuff_gre64(
                private_ip_private, local_ip_private, remote_ip_private, is_gre6=True
            )
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwiresec_client(config_path, new_config)
            update_ipsec_ip(address_no_subnet)
            break
        elif choice == "0":
            clear()
            wireguardedit_gre6tapsec_noconjuction_kharej1_5iran()
            break
        else:
            print("Please select a valid option.")


def wireguard_gre6tapnsec_iran_client4():
    local_ip_private = local_ip("/etc/gre64.sh")
    remote_ip_private = remote_ip("/etc/gre64.sh")
    private_ip_private = private_gre61("/etc/gre64.sh")
    config_path = "/etc/wireguard/wireclient.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_gre6tapn_wire_iran_client4(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )
        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mGre6tap[Native] + Wireguard\033[93m IRAN Client \033[96m[4]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN Client [4]\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mKharej Server \033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mGRE6tap \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6.\033[94m Change IPsec Secret Key\033[0m")
        print("7. \033[92mSave All Changes\033[0m")
        print("0. \033[97mback to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[GRE6tap]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Client [4]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec_client(opposite_ip)
                update_ipsec_conf_wireguard_46sec("/etc/ipsec1.conf", new_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "6":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secret Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")
        elif choice == "7":
            save_stuff_gre64(
                private_ip_private, local_ip_private, remote_ip_private, is_gre6=True
            )
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwiresec_client(config_path, new_config)
            update_ipsec_ip(address_no_subnet)
            break
        elif choice == "0":
            clear()
            wireguardedit_gre6tapsec_noconjuction_kharej1_5iran()
            break
        else:
            print("Please select a valid option.")


def wireguard_gre6tapnsec_iran_client5():
    local_ip_private = local_ip("/etc/gre65.sh")
    remote_ip_private = remote_ip("/etc/gre65.sh")
    private_ip_private = private_gre61("/etc/gre65.sh")
    config_path = "/etc/wireguard/wireclient.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_gre6tapn_wire_iran_client5(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )
        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mGre6tap[Native] + Wireguard\033[93m IRAN Client \033[96m[5]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN Client [5]\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mKharej Server \033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mGRE6tap \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6.\033[94m Change IPsec Secret Key\033[0m")
        print("7. \033[92mSave All Changes\033[0m")
        print("0. \033[97mback to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[GRE6tap]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Client [5]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec_client(opposite_ip)
                update_ipsec_conf_wireguard_46sec("/etc/ipsec1.conf", new_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "6":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secret Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")
        elif choice == "7":
            save_stuff_gre65(
                private_ip_private, local_ip_private, remote_ip_private, is_gre6=True
            )
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwiresec_client(config_path, new_config)
            update_ipsec_ip(address_no_subnet)
            break
        elif choice == "0":
            clear()
            wireguardedit_gre6tapsec_noconjuction_kharej1_5iran()
            break
        else:
            print("Please select a valid option.")


# I iran 5 kharej client
def wireguard_gre6tapnsec_iranconfig_1():
    local_ip_private = local_ip("/etc/gre61.sh")
    remote_ip_private = remote_ip("/etc/gre61.sh")
    private_ip_private = private_gre61("/etc/gre61.sh")
    config_path = "/etc/wireguard/wireserver1.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_gre6tapn_wire_iran1(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )
        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mGre6tap[Native] + Wireguard\033[93m IRAN Server \033[96mConfig [1]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN Server\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mKharej Client [1] \033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mGRE6tap \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6.\033[94m Change IPsec Secret Key\033[0m")
        print("7. \033[92mSave All Changes\033[0m")
        print("0. \033[97mback to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[GRE6tap]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Client [1]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec1(opposite_ip)
                update_ipsec_conf_wireguard_server1("/etc/ipsec1.conf", new_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "6":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secret Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")
        elif choice == "7":
            save_stuff_gre61(
                private_ip_private, local_ip_private, remote_ip_private, is_gre6=True
            )
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwire1sec(config_path, new_config)
            update_ipsec_ip_multi(address_no_subnet)
            break
        elif choice == "0":
            clear()
            wireguardedit_gre6tapsec_noconjuction_1iran_5kharej()
            break
        else:
            print("Please select a valid option.")


def wireguard_gre6tapnsec_iranconfig_2():
    local_ip_private = local_ip("/etc/gre62.sh")
    remote_ip_private = remote_ip("/etc/gre62.sh")
    private_ip_private = private_gre61("/etc/gre62.sh")
    config_path = "/etc/wireguard/wireserver2.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_gre6tapn_wire_iran2(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )
        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mGre6tap[Native] + Wireguard\033[93m IRAN Server \033[96mConfig [2]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN Server\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mKharej Client [2] \033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mGRE6tap \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6.\033[94m Change IPsec Secret Key\033[0m")
        print("7. \033[92mSave All Changes\033[0m")
        print("0. \033[97mback to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[GRE6tap]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Client [2]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec2(opposite_ip)
                update_ipsec_conf_wireguard_server2("/etc/ipsec1.conf", new_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "6":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secret Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")
        elif choice == "7":
            save_stuff_gre62(
                private_ip_private, local_ip_private, remote_ip_private, is_gre6=True
            )
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwire2sec(config_path, new_config)
            update_ipsec_ip_multi2(address_no_subnet)
            break
        elif choice == "0":
            clear()
            wireguardedit_gre6tapsec_noconjuction_1iran_5kharej()
            break
        else:
            print("Please select a valid option.")


def wireguard_gre6tapnsec_iranconfig_3():
    local_ip_private = local_ip("/etc/gre63.sh")
    remote_ip_private = remote_ip("/etc/gre63.sh")
    private_ip_private = private_gre61("/etc/gre63.sh")
    config_path = "/etc/wireguard/wireserver3.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_gre6tapn_wire_iran3(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )
        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mGre6tap[Native] + Wireguard\033[93m IRAN Server \033[96mConfig [3]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN Server\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mKharej Client [3] \033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mGRE6tap \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6.\033[94m Change IPsec Secret Key\033[0m")
        print("7. \033[92mSave All Changes\033[0m")
        print("0. \033[97mback to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[GRE6tap]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Client [3]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec3(opposite_ip)
                update_ipsec_conf_wireguard_server3("/etc/ipsec1.conf", new_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "6":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secret Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")
        elif choice == "7":
            save_stuff_gre63(
                private_ip_private, local_ip_private, remote_ip_private, is_gre6=True
            )
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwire3sec(config_path, new_config)
            update_ipsec_ip_multi3(address_no_subnet)
            break
        elif choice == "0":
            clear()
            wireguardedit_gre6tapsec_noconjuction_1iran_5kharej()
            break
        else:
            print("Please select a valid option.")


def wireguard_gre6tapnsec_iranconfig_4():
    local_ip_private = local_ip("/etc/gre64.sh")
    remote_ip_private = remote_ip("/etc/gre64.sh")
    private_ip_private = private_gre61("/etc/gre64.sh")
    config_path = "/etc/wireguard/wireserver4.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_gre6tapn_wire_iran4(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )
        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mGre6tap[Native] + Wireguard\033[93m IRAN Server \033[96mConfig [4]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN Server\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mKharej Client [4] \033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mGRE6tap \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6.\033[94m Change IPsec Secret Key\033[0m")
        print("7. \033[92mSave All Changes\033[0m")
        print("0. \033[97mback to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[GRE6tap]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Client [4]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec4(opposite_ip)
                update_ipsec_conf_wireguard_server4("/etc/ipsec1.conf", new_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "6":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secret Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")
        elif choice == "7":
            save_stuff_gre64(
                private_ip_private, local_ip_private, remote_ip_private, is_gre6=True
            )
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwire4sec(config_path, new_config)
            update_ipsec_ip_multi4(address_no_subnet)
            break
        elif choice == "0":
            clear()
            wireguardedit_gre6tapsec_noconjuction_1iran_5kharej()
            break
        else:
            print("Please select a valid option.")


def wireguard_gre6tapnsec_iranconfig_5():
    local_ip_private = local_ip("/etc/gre65.sh")
    remote_ip_private = remote_ip("/etc/gre65.sh")
    private_ip_private = private_gre61("/etc/gre65.sh")
    config_path = "/etc/wireguard/wireserver5.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_gre6tapn_wire_iran5(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )
        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mGre6tap[Native] + Wireguard\033[93m IRAN Server \033[96mConfig [5]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN Server\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mKharej Client [5] \033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mGRE6tap \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6.\033[94m Change IPsec Secret Key\033[0m")
        print("7. \033[92mSave All Changes\033[0m")
        print("0. \033[97mback to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[GRE6tap]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Client [5]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec5(opposite_ip)
                update_ipsec_conf_wireguard_server5("/etc/ipsec1.conf", new_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "6":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secret Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")
        elif choice == "7":
            save_stuff_gre64(
                private_ip_private, local_ip_private, remote_ip_private, is_gre6=True
            )
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwire5sec(config_path, new_config)
            update_ipsec_ip_multi5(address_no_subnet)
            break
        elif choice == "0":
            clear()
            wireguardedit_gre6tapsec_noconjuction_1iran_5kharej()
            break
        else:
            print("Please select a valid option.")


def wireguard_gre6tapnsec_kharej_client1():
    local_ip_private = local_ip("/etc/gre61.sh")
    remote_ip_private = remote_ip("/etc/gre61.sh")
    private_ip_private = private_gre61("/etc/gre61.sh")
    config_path = "/etc/wireguard/wireclient.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_gre6tapn_wire_kharej1(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )
        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mGre6tap[Native] + Wireguard\033[93m Kharej Client \033[96m[1]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej Client [1]\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mIRAN Server \033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mGRE6tap \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6.\033[94m Change IPsec Secret Key\033[0m")
        print("7. \033[92mSave All Changes\033[0m")
        print("0. \033[97mback to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[GRE6tap]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Client [1]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec_client(opposite_ip)
                update_ipsec_conf_wireguard_46sec("/etc/ipsec1.conf", new_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "6":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secret Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")
        elif choice == "7":
            save_stuff_gre61(
                private_ip_private, local_ip_private, remote_ip_private, is_gre6=True
            )
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwiresec_client(config_path, new_config)
            update_ipsec_ip(address_no_subnet)
            break
        elif choice == "0":
            clear()
            wireguardedit_gre6tapsec_noconjuction_1iran_5kharej()
            break
        else:
            print("Please select a valid option.")


def wireguard_gre6tapnsec_kharej_client2():
    local_ip_private = local_ip("/etc/gre62.sh")
    remote_ip_private = remote_ip("/etc/gre62.sh")
    private_ip_private = private_gre61("/etc/gre62.sh")
    config_path = "/etc/wireguard/wireclient.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_gre6tapn_wire_kharej2(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )
        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mGre6tap[Native] + Wireguard\033[93m Kharej Client \033[96m[2]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej Client [2]\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mIRAN Server \033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mGRE6tap \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6.\033[94m Change IPsec Secret Key\033[0m")
        print("7. \033[92mSave All Changes\033[0m")
        print("0. \033[97mback to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[GRE6tap]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Client [2]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec_client(opposite_ip)
                update_ipsec_conf_wireguard_46sec("/etc/ipsec1.conf", new_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "6":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secret Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")
        elif choice == "7":
            save_stuff_gre62(
                private_ip_private, local_ip_private, remote_ip_private, is_gre6=True
            )
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwiresec_client(config_path, new_config)
            update_ipsec_ip(address_no_subnet)
            break
        elif choice == "0":
            clear()
            wireguardedit_gre6tapsec_noconjuction_1iran_5kharej()
            break
        else:
            print("Please select a valid option.")


def wireguard_gre6tapnsec_kharej_client3():
    local_ip_private = local_ip("/etc/gre63.sh")
    remote_ip_private = remote_ip("/etc/gre63.sh")
    private_ip_private = private_gre61("/etc/gre63.sh")
    config_path = "/etc/wireguard/wireclient.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_gre6tapn_wire_kharej3(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )
        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mGre6tap[Native] + Wireguard\033[93m Kharej Client \033[96m[3]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej Client [3]\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mIRAN Server \033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mGRE6tap \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6.\033[94m Change IPsec Secret Key\033[0m")
        print("7. \033[92mSave All Changes\033[0m")
        print("0. \033[97mback to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[GRE6tap]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Client [3]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec_client(opposite_ip)
                update_ipsec_conf_wireguard_46sec("/etc/ipsec1.conf", new_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "6":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secret Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")
        elif choice == "7":
            save_stuff_gre63(
                private_ip_private, local_ip_private, remote_ip_private, is_gre6=True
            )
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwiresec_client(config_path, new_config)
            update_ipsec_ip(address_no_subnet)
            break
        elif choice == "0":
            clear()
            wireguardedit_gre6tapsec_noconjuction_1iran_5kharej()
            break
        else:
            print("Please select a valid option.")


def wireguard_gre6tapnsec_kharej_client4():
    local_ip_private = local_ip("/etc/gre64.sh")
    remote_ip_private = remote_ip("/etc/gre64.sh")
    private_ip_private = private_gre61("/etc/gre64.sh")
    config_path = "/etc/wireguard/wireclient.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_gre6tapn_wire_kharej4(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )
        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mGre6tap[Native] + Wireguard\033[93m Kharej Client \033[96m[4]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej Client [4]\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mIRAN Server \033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mGRE6tap \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6.\033[94m Change IPsec Secret Key\033[0m")
        print("7. \033[92mSave All Changes\033[0m")
        print("0. \033[97mback to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[GRE6tap]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Client [4]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec_client(opposite_ip)
                update_ipsec_conf_wireguard_46sec("/etc/ipsec1.conf", new_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "6":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secret Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")
        elif choice == "7":
            save_stuff_gre64(
                private_ip_private, local_ip_private, remote_ip_private, is_gre6=True
            )
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwiresec_client(config_path, new_config)
            update_ipsec_ip(address_no_subnet)
            break
        elif choice == "0":
            clear()
            wireguardedit_gre6tapsec_noconjuction_1iran_5kharej()
            break
        else:
            print("Please select a valid option.")


def wireguard_gre6tapnsec_kharej_client5():
    local_ip_private = local_ip("/etc/gre65.sh")
    remote_ip_private = remote_ip("/etc/gre65.sh")
    private_ip_private = private_gre61("/etc/gre65.sh")
    config_path = "/etc/wireguard/wireclient.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_gre6tapn_wire_kharej5(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )
        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mGre6tap[Native] + Wireguard\033[93m Kharej Client \033[96m[5]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej Client [5]\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mIRAN Server \033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mGRE6tap \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6.\033[94m Change IPsec Secret Key\033[0m")
        print("7. \033[92mSave All Changes\033[0m")
        print("0. \033[97mback to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[GRE6tap]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Client [5]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec_client(opposite_ip)
                update_ipsec_conf_wireguard_46sec("/etc/ipsec1.conf", new_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "6":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secret Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")
        elif choice == "7":
            save_stuff_gre65(
                private_ip_private, local_ip_private, remote_ip_private, is_gre6=True
            )
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwiresec_client(config_path, new_config)
            update_ipsec_ip(address_no_subnet)
            break
        elif choice == "0":
            clear()
            wireguardedit_gre6tapsec_noconjuction_1iran_5kharej()
            break
        else:
            print("Please select a valid option.")


def wireguardsiteditserver_mnu():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print("\033[92m(   ) \033[93mWireguard + SIT \033[93m Edit Menu\033[0m")
    print(
        '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
    )
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[92mNo IPSEC\033[0m")
    print("2. \033[93mWith IPSEC\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    print("0.\033[97mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")
    while True:
        server_type = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if server_type == "1":
            wireguardeditserver_nosec_sit_mnu()
            break
        elif server_type == "2":
            wireguardeditserver_sec_sit_mnu()
            break
        elif server_type == "0":
            os.system("clear")
            wireguard_edit_server()
            break
        else:
            print("Invalid choice.")


def wireguardeditserver_nosec_sit_mnu():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print("\033[92m(   ) \033[93mWireguard + SIT \033[93m Edit Menu\033[0m")
    print(
        '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
    )
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[92mWireguard + SIT - [1]Kharej Server [5]IRAN Clients\033[0m")
    print("2. \033[93mWireguard + SIT - [1]IRAN   Server [5]Kharej Clients\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    print("0.\033[97mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")
    while True:
        server_type = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if server_type == "1":
            wireguardedit_noconjuction_sit_kharej1_5iran()
            break
        elif server_type == "2":
            wireguardedit_noconjuction_sit_1iran_5kharej()
            break
        elif server_type == "0":
            os.system("clear")
            wireguardsiteditserver_mnu()
            break
        else:
            print("Invalid choice.")


def wireguardedit_noconjuction_sit_kharej1_5iran():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print(
        "\033[92m(   ) \033[93mWireguard + SIT \033[92m[1]Kharej Server\033[96m [5]IRAN Client\033[93m Edit Menu\033[0m"
    )
    print(
        '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
    )
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[92mIRAN Client [1] Config\033[0m")
    print("2. \033[92mIRAN Client [2] Config\033[0m")
    print("3. \033[92mIRAN Client [3] Config\033[0m")
    print("4. \033[93mIRAN Client [4] Config\033[0m")
    print("5. \033[92mIRAN Client [5] Config\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    print("6. \033[96mKharej Server Config\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    print("0.\033[97mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")
    while True:
        server_type = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if server_type == "1":
            wireguardudp_sit_iran_client1()
            break
        elif server_type == "2":
            wireguardudp_sit_iran_client2()
            break
        elif server_type == "3":
            wireguardudp_sit_iran_client3()
            break
        elif server_type == "4":
            wireguardudp_sit_iran_client4()
            break
        elif server_type == "5":
            wireguardudp_sit_iran_client5()
            break
        elif server_type == "6":
            wireguardudpedit_sit_kharej_server()
            break
        elif server_type == "0":
            os.system("clear")
            wireguardeditserver_nosec_sit_mnu()
            break
        else:
            print("Invalid choice.")


def wireguardudpedit_sit_kharej_server():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print(
        "\033[92m(   ) \033[93mWireguard + SIT \033[92m[1]Kharej Server\033[96m [5]IRAN Client\033[93m Edit Menu\033[0m"
    )
    print(
        '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
    )
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[92mKharej Server Config [1] \033[0m")
    print("2. \033[92mKharej Server Config [2]\033[0m")
    print("3. \033[93mKharej Server Config [3]\033[0m")
    print("4. \033[92mKharej Server Config [4]\033[0m")
    print("5. \033[92mKharej Server Config [5]\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    print("0.\033[97mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")
    while True:
        server_type = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if server_type == "1":
            wireguardedit_sit_kharejconfig_1()
            break
        elif server_type == "2":
            wireguardedit_sit_kharejconfig_2()
            break
        elif server_type == "3":
            wireguardedit_sit_kharejconfig_3()
            break
        elif server_type == "4":
            wireguardedit_sit_kharejconfig_4()
            break
        elif server_type == "5":
            wireguardedit_sit_kharejconfig_5()
            break
        elif server_type == "0":
            os.system("clear")
            wireguardedit_noconjuction_sit_kharej1_5iran()
            break
        else:
            print("Invalid choice.")


def wireguardedit_noconjuction_sit_1iran_5kharej():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print(
        "\033[92m(   ) \033[93mWireguard + SIT \033[92m[1]IRAN Server\033[96m [5]Kharej Client\033[93m Edit Menu\033[0m"
    )
    print(
        '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
    )
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[92mKharej Client [1] Config\033[0m")
    print("2. \033[92mKharej Client [2] Config\033[0m")
    print("3. \033[92mKharej Client [3] Config\033[0m")
    print("4. \033[93mKharej Client [4] Config\033[0m")
    print("5. \033[92mKharej Client [5] Config\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    print("6. \033[96mIRAN Server Config\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    print("0.\033[97mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")
    while True:
        server_type = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if server_type == "1":
            wireguardudp_sit_kharej_client1()
            break
        elif server_type == "2":
            wireguardudp_sit_kharej_client2()
            break
        elif server_type == "3":
            wireguardudp_sit_kharej_client3()
            break
        elif server_type == "4":
            wireguardudp_sit_kharej_client4()
            break
        elif server_type == "5":
            wireguardudp_sit_kharej_client5()
            break
        elif server_type == "6":
            wireguardudpedit_sit_iran_server()
            break
        elif server_type == "0":
            os.system("clear")
            wireguardeditserver_nosec_sit_mnu()
            break
        else:
            print("Invalid choice.")


def wireguardudpedit_sit_iran_server():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print(
        "\033[92m(   ) \033[93mWireguard + SIT \033[92m[1]IRAN Server\033[96m [5]Kharej Client\033[93m Edit Menu\033[0m"
    )
    print(
        '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
    )
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[92mIRAN Server Config [1] \033[0m")
    print("2. \033[92mIRAN Server Config [2]\033[0m")
    print("3. \033[93mIRAN Server Config [3]\033[0m")
    print("4. \033[92mIRAN Server Config [4]\033[0m")
    print("5. \033[92mIRAN Server Config [5]\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    print("0.\033[97mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")
    while True:
        server_type = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if server_type == "1":
            wireguardedit_sit_iranconfig_1()
            break
        elif server_type == "2":
            wireguardedit_sit_iranconfig_2()
            break
        elif server_type == "3":
            wireguardedit_sit_iranconfig_3()
            break
        elif server_type == "4":
            wireguardedit_sit_iranconfig_4()
            break
        elif server_type == "5":
            wireguardedit_sit_iranconfig_5()
            break
        elif server_type == "0":
            os.system("clear")
            wireguardedit_noconjuction_sit_1iran_5kharej()
            break
        else:
            print("Invalid choice.")
def wtb_opposite_ip_sitwire(ip):
    if ":" in ip:  # IPv6
        ip_parts = ip.split(":")
        ip_parts[-1] = "1" if ip_parts[-1] == "2" else "2"
        return ":".join(ip_parts)
    else:  # IPv4
        ip_parts = ip.split(".")
        ip_parts[-1] = "1" if ip_parts[-1] == "2" else "2"
        return ".".join(ip_parts)


def delete_ufw_rules(ip, port=None):
    counterpart_ip = wtb_opposite_ip_sitwire(ip)
    try:
        if port:
            subprocess.run(
                [
                    "sudo",
                    "ufw",
                    "delete",
                    "allow",
                    "from",
                    ip,
                    "to",
                    "any",
                    "port",
                    port,
                ],
                check=False,
            )
            subprocess.run(
                [
                    "sudo",
                    "ufw",
                    "delete",
                    "allow",
                    "from",
                    counterpart_ip,
                    "to",
                    "any",
                    "port",
                    port,
                ],
                check=False,
            )
        else:
            subprocess.run(["sudo", "ufw", "delete", "allow", "from", ip], check=False)
            subprocess.run(
                ["sudo", "ufw", "delete", "allow", "from", counterpart_ip], check=False
            )
    except subprocess.CalledProcessError as e:
        print(f"\033[91merror deleting UFW rules: {e}\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def add_ufw_rules(ip, port=None):
    counterpart_ip = wtb_opposite_ip_sitwire(ip)
    try:
        if port:
            subprocess.run(
                ["sudo", "ufw", "allow", "from", ip, "to", "any", "port", port],
                check=True,
            )
            subprocess.run(
                [
                    "sudo",
                    "ufw",
                    "allow",
                    "from",
                    counterpart_ip,
                    "to",
                    "any",
                    "port",
                    port,
                ],
                check=True,
            )
        else:
            subprocess.run(["sudo", "ufw", "allow", "from", ip], check=True)
            subprocess.run(["sudo", "ufw", "allow", "from", counterpart_ip], check=True)
    except subprocess.CalledProcessError as e:
        print(f"\033[91merror adding UFW rules: {e}\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def display_checkmark(message):
    print("\u2714 " + message)


def local_ip(name):
    try:
        with open(name, "r") as f:
            content = f.read()
        match = re.search(r"local (\S+)", content)
        if match:
            return match.group(1)
        else:
            print(f"\033[91mno local IP found\033[0m")
    except FileNotFoundError:
        print(f"file {name} doesn't exist")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")
    return None


def remote_ip(name):
    try:
        with open(name, "r") as f:
            content = f.read()
        match = re.search(r"remote (\S+)", content)
        if match:
            return match.group(1)
        else:
            print("\033[91mno remote IP found \033[0m")
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")
    return None


def private_ip1(name):
    try:
        with open(name, "r") as f:
            content = f.read()
        match = re.search(r"ip (-6 )?addr add (\S+)/64 dev azumi?", content)
        if match:
            return match.group(2)
        else:
            print(f"\033[91mno private IP found\033[0m")
    except FileNotFoundError:
        print(f"file {name} doesn't exist")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")
    return None


def update_pingfile_sit(name, new_ip):
    try:
        with open(name, "r") as f:
            content = f.read()

        new_content = re.sub(r'ip_address="[^"]+"', f'ip_address="{new_ip}"', content)

        with open(name, "w") as f:
            f.write(new_content)
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def update_ipfile_sit1(name, new_ip, update_type):
    try:
        with open(name, "r") as f:
            content = f.read()

        if update_type == "private":
            new_content = re.sub(
                r"ip (-6 )?addr add [^ ]+/64 dev azumi1",
                f"ip -6 addr add {new_ip}/64 dev azumi1",
                content,
            )
            ip_parts = new_ip.split(":")
            if new_ip.endswith(":2"):
                ip_parts[-1] = "1"
            else:
                ip_parts[-1] = "2"
            counterpart_ip = ":".join(ip_parts)
            new_content = re.sub(
                r"ip (-6 )?route add [^ ]+/64 dev azumi1",
                f"ip -6 route add {counterpart_ip}/64 dev azumi1",
                new_content,
            )
        elif update_type == "local":
            new_content = re.sub(r"local \S+", f"local {new_ip}", content)
        elif update_type == "remote":
            new_content = re.sub(r"remote \S+", f"remote {new_ip}", content)

        with open(name, "w") as f:
            f.write(new_content)
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def update_ipfile_sit2(name, new_ip, update_type):
    try:
        with open(name, "r") as f:
            content = f.read()

        if update_type == "private":
            new_content = re.sub(
                r"ip (-6 )?addr add [^ ]+/64 dev azumi2",
                f"ip -6 addr add {new_ip}/64 dev azumi2",
                content,
            )
            ip_parts = new_ip.split(":")
            if new_ip.endswith(":2"):
                ip_parts[-1] = "1"
            else:
                ip_parts[-1] = "2"
            counterpart_ip = ":".join(ip_parts)
            new_content = re.sub(
                r"ip (-6 )?route add [^ ]+/64 dev azumi2",
                f"ip -6 route add {counterpart_ip}/64 dev azumi2",
                new_content,
            )
        elif update_type == "local":
            new_content = re.sub(r"local \S+", f"local {new_ip}", content)
        elif update_type == "remote":
            new_content = re.sub(r"remote \S+", f"remote {new_ip}", content)

        with open(name, "w") as f:
            f.write(new_content)
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def update_ipfile_sit3(name, new_ip, update_type):
    try:
        with open(name, "r") as f:
            content = f.read()

        if update_type == "private":
            new_content = re.sub(
                r"ip (-6 )?addr add [^ ]+/64 dev azumi3",
                f"ip -6 addr add {new_ip}/64 dev azumi3",
                content,
            )
            ip_parts = new_ip.split(":")
            if new_ip.endswith(":2"):
                ip_parts[-1] = "1"
            else:
                ip_parts[-1] = "2"
            counterpart_ip = ":".join(ip_parts)
            new_content = re.sub(
                r"ip (-6 )?route add [^ ]+/64 dev azumi3",
                f"ip -6 route add {counterpart_ip}/64 dev azumi3",
                new_content,
            )
        elif update_type == "local":
            new_content = re.sub(r"local \S+", f"local {new_ip}", content)
        elif update_type == "remote":
            new_content = re.sub(r"remote \S+", f"remote {new_ip}", content)

        with open(name, "w") as f:
            f.write(new_content)
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def update_ipfile_sit4(name, new_ip, update_type):
    try:
        with open(name, "r") as f:
            content = f.read()

        if update_type == "private":
            new_content = re.sub(
                r"ip (-6 )?addr add [^ ]+/64 dev azumi4",
                f"ip -6 addr add {new_ip}/64 dev azumi4",
                content,
            )
            ip_parts = new_ip.split(":")
            if new_ip.endswith(":2"):
                ip_parts[-1] = "1"
            else:
                ip_parts[-1] = "2"
            counterpart_ip = ":".join(ip_parts)
            new_content = re.sub(
                r"ip (-6 )?route add [^ ]+/64 dev azumi4",
                f"ip -6 route add {counterpart_ip}/64 dev azumi4",
                new_content,
            )
        elif update_type == "local":
            new_content = re.sub(r"local \S+", f"local {new_ip}", content)
        elif update_type == "remote":
            new_content = re.sub(r"remote \S+", f"remote {new_ip}", content)

        with open(name, "w") as f:
            f.write(new_content)
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def update_ipfile_sit5(name, new_ip, update_type):
    try:
        with open(name, "r") as f:
            content = f.read()

        if update_type == "private":
            new_content = re.sub(
                r"ip (-6 )?addr add [^ ]+/64 dev azumi5",
                f"ip -6 addr add {new_ip}/64 dev azumi5",
                content,
            )
            ip_parts = new_ip.split(":")
            if new_ip.endswith(":2"):
                ip_parts[-1] = "1"
            else:
                ip_parts[-1] = "2"
            counterpart_ip = ":".join(ip_parts)
            new_content = re.sub(
                r"ip (-6 )?route add [^ ]+/64 dev azumi5",
                f"ip -6 route add {counterpart_ip}/64 dev azumi5",
                new_content,
            )
        elif update_type == "local":
            new_content = re.sub(r"local \S+", f"local {new_ip}", content)
        elif update_type == "remote":
            new_content = re.sub(r"remote \S+", f"remote {new_ip}", content)

        with open(name, "w") as f:
            f.write(new_content)
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def save_stuff_sit1(private_ip, local_ip, remote_ip):
    current_ips = {"private": private_ip1("/etc/private1.sh")}
    current_ip = current_ips["private"]

    if current_ip:
        delete_ufw_rules(current_ip)

    add_ufw_rules(private_ip)

    counterpart_ip = wtb_opposite_ip_sitwire(private_ip)
    try:
        update_pingfile_sit("/etc/ping_v61.sh", counterpart_ip)
        update_ipfile_sit1("/etc/private1.sh", private_ip, update_type="private")
        update_ipfile_sit1("/etc/private1.sh", local_ip, update_type="local")
        update_ipfile_sit1("/etc/private1.sh", remote_ip, update_type="remote")

        interface = "azumi1"
        try:
            subprocess.run(["ip", "link", "set", "dev", interface, "down"], check=True)
            subprocess.run(["ip", "link", "delete", interface], check=True)
        except subprocess.CalledProcessError as e:
            print("\033[91merror bringing interface down or deleting it\033[0m")

        script = "/etc/private1.sh"
        result = subprocess.run(["/bin/bash", script], capture_output=True, text=True)
        if "RTNETLINK answers: File exists" in result.stderr:
            print("interface already exists, don't mind this")
        else:
            result.check_returncode()
        subprocess.run(["sudo", "systemctl", "daemon-reload"], check=True)
        subprocess.run(["systemctl", "restart", "ping_v61"], check=True)
        display_checkmark(
            f"\033[92mChanges saved and {interface} interface updated successfully!\033[0m"
        )
    except subprocess.CalledProcessError as e:
        print(f"\033[91merror applying network stuff\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def save_stuff_sit2(private_ip, local_ip, remote_ip):
    current_ips = {"private": private_ip1("/etc/private2.sh")}
    current_ip = current_ips["private"]

    if current_ip:
        delete_ufw_rules(current_ip)

    add_ufw_rules(private_ip)

    counterpart_ip = wtb_opposite_ip_sitwire(private_ip)
    try:
        update_pingfile_sit("/etc/ping_v62.sh", counterpart_ip)
        update_ipfile_sit2("/etc/private2.sh", private_ip, update_type="private")
        update_ipfile_sit2("/etc/private2.sh", local_ip, update_type="local")
        update_ipfile_sit2("/etc/private2.sh", remote_ip, update_type="remote")

        interface = "azumi2"
        try:
            subprocess.run(["ip", "link", "set", "dev", interface, "down"], check=True)
            subprocess.run(["ip", "link", "delete", interface], check=True)
        except subprocess.CalledProcessError as e:
            print("\033[91merror bringing interface down or deleting it\033[0m")

        script = "/etc/private2.sh"
        result = subprocess.run(["/bin/bash", script], capture_output=True, text=True)
        if "RTNETLINK answers: File exists" in result.stderr:
            print("interface already exists, don't mind this")
        else:
            result.check_returncode()
        subprocess.run(["sudo", "systemctl", "daemon-reload"], check=True)
        subprocess.run(["systemctl", "restart", "ping_v62"], check=True)
        display_checkmark(
            f"\033[92mChanges saved and {interface} interface updated successfully!\033[0m"
        )
    except subprocess.CalledProcessError as e:
        print(f"\033[91merror applying network stuff\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def save_stuff_sit3(private_ip, local_ip, remote_ip):
    current_ips = {"private": private_ip1("/etc/private3.sh")}
    current_ip = current_ips["private"]

    if current_ip:
        delete_ufw_rules(current_ip)

    add_ufw_rules(private_ip)

    counterpart_ip = wtb_opposite_ip_sitwire(private_ip)
    try:
        update_pingfile_sit("/etc/ping_v63.sh", counterpart_ip)
        update_ipfile_sit3("/etc/private3.sh", private_ip, update_type="private")
        update_ipfile_sit3("/etc/private3.sh", local_ip, update_type="local")
        update_ipfile_sit3("/etc/private3.sh", remote_ip, update_type="remote")

        interface = "azumi3"
        try:
            subprocess.run(["ip", "link", "set", "dev", interface, "down"], check=True)
            subprocess.run(["ip", "link", "delete", interface], check=True)
        except subprocess.CalledProcessError as e:
            print("\033[91merror bringing interface down or deleting it\033[0m")

        script = "/etc/private3.sh"
        result = subprocess.run(["/bin/bash", script], capture_output=True, text=True)
        if "RTNETLINK answers: File exists" in result.stderr:
            print("interface already exists, don't mind this")
        else:
            result.check_returncode()
        subprocess.run(["sudo", "systemctl", "daemon-reload"], check=True)
        subprocess.run(["systemctl", "restart", "ping_v63"], check=True)
        display_checkmark(
            f"\033[92mChanges saved and {interface} interface updated successfully!\033[0m"
        )
    except subprocess.CalledProcessError as e:
        print(f"\033[91merror applying network stuff\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def save_stuff_sit4(private_ip, local_ip, remote_ip):
    current_ips = {"private": private_ip1("/etc/private4.sh")}
    current_ip = current_ips["private"]

    if current_ip:
        delete_ufw_rules(current_ip)

    add_ufw_rules(private_ip)

    counterpart_ip = wtb_opposite_ip_sitwire(private_ip)
    try:
        update_pingfile_sit("/etc/ping_v64.sh", counterpart_ip)
        update_ipfile_sit4("/etc/private4.sh", private_ip, update_type="private")
        update_ipfile_sit4("/etc/private4.sh", local_ip, update_type="local")
        update_ipfile_sit4("/etc/private4.sh", remote_ip, update_type="remote")

        interface = "azumi4"
        try:
            subprocess.run(["ip", "link", "set", "dev", interface, "down"], check=True)
            subprocess.run(["ip", "link", "delete", interface], check=True)
        except subprocess.CalledProcessError as e:
            print("\033[91merror bringing interface down or deleting it\033[0m")

        script = "/etc/private4.sh"
        result = subprocess.run(["/bin/bash", script], capture_output=True, text=True)
        if "RTNETLINK answers: File exists" in result.stderr:
            print("interface already exists, don't mind this")
        else:
            result.check_returncode()
        subprocess.run(["sudo", "systemctl", "daemon-reload"], check=True)
        subprocess.run(["systemctl", "restart", "ping_v64"], check=True)
        display_checkmark(
            f"\033[92mChanges saved and {interface} interface updated successfully!\033[0m"
        )
    except subprocess.CalledProcessError as e:
        print(f"\033[91merror applying network stuff\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def save_stuff_sit5(private_ip, local_ip, remote_ip):
    current_ips = {"private": private_ip1("/etc/private5.sh")}
    current_ip = current_ips["private"]

    if current_ip:
        delete_ufw_rules(current_ip)

    add_ufw_rules(private_ip)

    counterpart_ip = wtb_opposite_ip_sitwire(private_ip)
    try:
        update_pingfile_sit("/etc/ping_v65.sh", counterpart_ip)
        update_ipfile_sit5("/etc/private5.sh", private_ip, update_type="private")
        update_ipfile_sit5("/etc/private5.sh", local_ip, update_type="local")
        update_ipfile_sit5("/etc/private5.sh", remote_ip, update_type="remote")

        interface = "azumi5"
        try:
            subprocess.run(["ip", "link", "set", "dev", interface, "down"], check=True)
            subprocess.run(["ip", "link", "delete", interface], check=True)
        except subprocess.CalledProcessError as e:
            print("\033[91merror bringing interface down or deleting it\033[0m")

        script = "/etc/private5.sh"
        result = subprocess.run(["/bin/bash", script], capture_output=True, text=True)
        if "RTNETLINK answers: File exists" in result.stderr:
            print("interface already exists, don't mind this")
        else:
            result.check_returncode()
        subprocess.run(["sudo", "systemctl", "daemon-reload"], check=True)
        subprocess.run(["systemctl", "restart", "ping_v65"], check=True)
        display_checkmark(
            f"\033[92mChanges saved and {interface} interface updated successfully!\033[0m"
        )
    except subprocess.CalledProcessError as e:
        print(f"\033[91merror applying network stuff\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def wtb_opposite_ip_wireguard(ip):
    return wtb_opposite_ip_sitwire(ip)


def load_wireguardconfig_sitwire(file_path):
    try:
        with open(file_path, "r") as file:
            content = file.read()

        address_match = re.search(r"Address = ([^\s]+)", content)
        listen_port_match = re.search(r"ListenPort = (\d+)", content)
        endpoint_match = re.search(r"Endpoint = ([^\s]+):\d+", content)
        allowed_ips_match = re.search(r"AllowedIPs = ([^\s]+)", content)

        address = address_match.group(1) if address_match else "N/A"
        listen_port = listen_port_match.group(1) if listen_port_match else "N/A"
        endpoint = endpoint_match.group(1) if endpoint_match else "N/A"
        allowed_ips = allowed_ips_match.group(1) if allowed_ips_match else "N/A"

        return address, address.split("/")[0], listen_port, endpoint, allowed_ips
    except FileNotFoundError:
        print("\033[91mWireguard configuration file not found.\033[0m")
        return None, None, None, None, None
    except Exception as e:
        print(f"\033[91mAn error occurred: {e}\033[0m")
        return None, None, None, None, None


def save_wireguardconfig_sitwire1(file_path, new_config):
    try:
        with open(file_path, "r") as f:
            config = f.read()

        listen_port_pattern = r"ListenPort\s*=\s*\d+"
        endpoint_pattern = r"Endpoint\s*=\s*([^\s]+):\d+"
        address_pattern = r"Address\s*=\s*[^\s]+"
        allowed_ips_pattern = r"AllowedIPs\s*=\s*[^\s]+"

        new_config_content = re.sub(
            listen_port_pattern, f'ListenPort = {new_config["ListenPort"]}', config
        )
        new_config_content = re.sub(
            address_pattern, f'Address = {new_config["Address"]}', new_config_content
        )
        new_config_content = re.sub(
            allowed_ips_pattern,
            f'AllowedIPs = {new_config["AllowedIPs"]}',
            new_config_content,
        )

        def replace_endpoint(match):
            endpoint_ip = new_config["EndpointIP"]
            return f'Endpoint = {endpoint_ip}:{new_config["ListenPort"]}'

        new_config_content = re.sub(
            endpoint_pattern, replace_endpoint, new_config_content
        )

        with open(file_path, "w") as f:
            f.write(new_config_content)

        subprocess.run(["systemctl", "daemon-reload"], check=True)
        service_name = "wireguardping_1.service"
        service_status = subprocess.run(
            ["systemctl", "is-active", service_name],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
        )

        if service_status.returncode != 0:
            print(f"\033[91mService {service_name} doesn't exist or is inactive\033[0m")

        subprocess.run(
            ["wg-quick", "down", "/etc/wireguard/wireserver1.conf"], check=True
        )
        subprocess.run(
            ["wg-quick", "up", "/etc/wireguard/wireserver1.conf"], check=True
        )

        display_checkmark(f"\033[92mConfiguration updated successfully!\033[0m")

    except FileNotFoundError:
        print(f"\033[91mfile {file_path} not found.\033[0m")
    except subprocess.CalledProcessError as e:
        print(f"\033[91merror in restating services: {e}\033[0m")
    except Exception as e:
        print(f"\033[91merror in saving da config: {e}\033[0m")


def save_wireguardconfig_sitwire2(file_path, new_config):
    try:
        with open(file_path, "r") as f:
            config = f.read()

        listen_port_pattern = r"ListenPort\s*=\s*\d+"
        endpoint_pattern = r"Endpoint\s*=\s*([^\s]+):\d+"
        address_pattern = r"Address\s*=\s*[^\s]+"
        allowed_ips_pattern = r"AllowedIPs\s*=\s*[^\s]+"

        new_config_content = re.sub(
            listen_port_pattern, f'ListenPort = {new_config["ListenPort"]}', config
        )
        new_config_content = re.sub(
            address_pattern, f'Address = {new_config["Address"]}', new_config_content
        )
        new_config_content = re.sub(
            allowed_ips_pattern,
            f'AllowedIPs = {new_config["AllowedIPs"]}',
            new_config_content,
        )

        def replace_endpoint(match):
            endpoint_ip = new_config["EndpointIP"]
            return f'Endpoint = {endpoint_ip}:{new_config["ListenPort"]}'

        new_config_content = re.sub(
            endpoint_pattern, replace_endpoint, new_config_content
        )

        with open(file_path, "w") as f:
            f.write(new_config_content)

        subprocess.run(["systemctl", "daemon-reload"], check=True)
        service_name = "wireguardping_2.service"
        service_status = subprocess.run(
            ["systemctl", "is-active", service_name],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
        )

        if service_status.returncode != 0:
            print(f"\033[91mService {service_name} doesn't exist or is inactive\033[0m")

        subprocess.run(
            ["wg-quick", "down", "/etc/wireguard/wireserver2.conf"], check=True
        )
        subprocess.run(
            ["wg-quick", "up", "/etc/wireguard/wireserver2.conf"], check=True
        )

        display_checkmark(f"\033[92mConfiguration updated successfully!\033[0m")

    except FileNotFoundError:
        print(f"\033[91mfile {file_path} not found.\033[0m")
    except subprocess.CalledProcessError as e:
        print(f"\033[91merror in restating services: {e}\033[0m")
    except Exception as e:
        print(f"\033[91merror in saving da config: {e}\033[0m")


def save_wireguardconfig_sitwire3(file_path, new_config):
    try:
        with open(file_path, "r") as f:
            config = f.read()

        listen_port_pattern = r"ListenPort\s*=\s*\d+"
        endpoint_pattern = r"Endpoint\s*=\s*([^\s]+):\d+"
        address_pattern = r"Address\s*=\s*[^\s]+"
        allowed_ips_pattern = r"AllowedIPs\s*=\s*[^\s]+"

        new_config_content = re.sub(
            listen_port_pattern, f'ListenPort = {new_config["ListenPort"]}', config
        )
        new_config_content = re.sub(
            address_pattern, f'Address = {new_config["Address"]}', new_config_content
        )
        new_config_content = re.sub(
            allowed_ips_pattern,
            f'AllowedIPs = {new_config["AllowedIPs"]}',
            new_config_content,
        )

        def replace_endpoint(match):
            endpoint_ip = new_config["EndpointIP"]
            return f'Endpoint = {endpoint_ip}:{new_config["ListenPort"]}'

        new_config_content = re.sub(
            endpoint_pattern, replace_endpoint, new_config_content
        )

        with open(file_path, "w") as f:
            f.write(new_config_content)

        subprocess.run(["systemctl", "daemon-reload"], check=True)
        service_name = "wireguardping_3.service"
        service_status = subprocess.run(
            ["systemctl", "is-active", service_name],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
        )

        if service_status.returncode != 0:
            print(f"\033[91mService {service_name} doesn't exist or is inactive\033[0m")

        subprocess.run(
            ["wg-quick", "down", "/etc/wireguard/wireserver3.conf"], check=True
        )
        subprocess.run(
            ["wg-quick", "up", "/etc/wireguard/wireserver3.conf"], check=True
        )

        display_checkmark(f"\033[92mConfiguration updated successfully!\033[0m")

    except FileNotFoundError:
        print(f"\033[91mfile {file_path} not found.\033[0m")
    except subprocess.CalledProcessError as e:
        print(f"\033[91merror in restating services: {e}\033[0m")
    except Exception as e:
        print(f"\033[91merror in saving da config: {e}\033[0m")


def save_wireguardconfig_sitwire4(file_path, new_config):
    try:
        with open(file_path, "r") as f:
            config = f.read()

        listen_port_pattern = r"ListenPort\s*=\s*\d+"
        endpoint_pattern = r"Endpoint\s*=\s*([^\s]+):\d+"
        address_pattern = r"Address\s*=\s*[^\s]+"
        allowed_ips_pattern = r"AllowedIPs\s*=\s*[^\s]+"

        new_config_content = re.sub(
            listen_port_pattern, f'ListenPort = {new_config["ListenPort"]}', config
        )
        new_config_content = re.sub(
            address_pattern, f'Address = {new_config["Address"]}', new_config_content
        )
        new_config_content = re.sub(
            allowed_ips_pattern,
            f'AllowedIPs = {new_config["AllowedIPs"]}',
            new_config_content,
        )

        def replace_endpoint(match):
            endpoint_ip = new_config["EndpointIP"]
            return f'Endpoint = {endpoint_ip}:{new_config["ListenPort"]}'

        new_config_content = re.sub(
            endpoint_pattern, replace_endpoint, new_config_content
        )

        with open(file_path, "w") as f:
            f.write(new_config_content)

        subprocess.run(["systemctl", "daemon-reload"], check=True)
        service_name = "wireguardping_4.service"
        service_status = subprocess.run(
            ["systemctl", "is-active", service_name],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
        )

        if service_status.returncode != 0:
            print(f"\033[91mService {service_name} doesn't exist or is inactive\033[0m")

        subprocess.run(
            ["wg-quick", "down", "/etc/wireguard/wireserver4.conf"], check=True
        )
        subprocess.run(
            ["wg-quick", "up", "/etc/wireguard/wireserver4.conf"], check=True
        )

        display_checkmark(f"\033[92mConfiguration updated successfully!\033[0m")

    except FileNotFoundError:
        print(f"\033[91mfile {file_path} not found.\033[0m")
    except subprocess.CalledProcessError as e:
        print(f"\033[91merror in restating services: {e}\033[0m")
    except Exception as e:
        print(f"\033[91merror in saving da config: {e}\033[0m")


def save_wireguardconfig_sitwire5(file_path, new_config):
    try:
        with open(file_path, "r") as f:
            config = f.read()

        listen_port_pattern = r"ListenPort\s*=\s*\d+"
        endpoint_pattern = r"Endpoint\s*=\s*([^\s]+):\d+"
        address_pattern = r"Address\s*=\s*[^\s]+"
        allowed_ips_pattern = r"AllowedIPs\s*=\s*[^\s]+"

        new_config_content = re.sub(
            listen_port_pattern, f'ListenPort = {new_config["ListenPort"]}', config
        )
        new_config_content = re.sub(
            address_pattern, f'Address = {new_config["Address"]}', new_config_content
        )
        new_config_content = re.sub(
            allowed_ips_pattern,
            f'AllowedIPs = {new_config["AllowedIPs"]}',
            new_config_content,
        )

        def replace_endpoint(match):
            endpoint_ip = new_config["EndpointIP"]
            return f'Endpoint = {endpoint_ip}:{new_config["ListenPort"]}'

        new_config_content = re.sub(
            endpoint_pattern, replace_endpoint, new_config_content
        )

        with open(file_path, "w") as f:
            f.write(new_config_content)

        subprocess.run(["systemctl", "daemon-reload"], check=True)
        service_name = "wireguardping_5.service"
        service_status = subprocess.run(
            ["systemctl", "is-active", service_name],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
        )

        if service_status.returncode != 0:
            print(f"\033[91mService {service_name} doesn't exist or is inactive\033[0m")

        subprocess.run(
            ["wg-quick", "down", "/etc/wireguard/wireserver5.conf"], check=True
        )
        subprocess.run(
            ["wg-quick", "up", "/etc/wireguard/wireserver5.conf"], check=True
        )

        display_checkmark(f"\033[92mConfiguration updated successfully!\033[0m")

    except FileNotFoundError:
        print(f"\033[91mfile {file_path} not found.\033[0m")
    except subprocess.CalledProcessError as e:
        print(f"\033[91merror in restating services: {e}\033[0m")
    except Exception as e:
        print(f"\033[91merror in saving da config: {e}\033[0m")


def save_wireguardconfig_sitwire_client(file_path, new_config):
    try:
        with open(file_path, "r") as f:
            config = f.read()

        listen_port_pattern = r"ListenPort\s*=\s*\d+"
        endpoint_pattern = r"Endpoint\s*=\s*([^\s]+):\d+"
        address_pattern = r"Address\s*=\s*[^\s]+"
        allowed_ips_pattern = r"AllowedIPs\s*=\s*[^\s]+"

        new_config_content = re.sub(
            listen_port_pattern, f'ListenPort = {new_config["ListenPort"]}', config
        )
        new_config_content = re.sub(
            address_pattern, f'Address = {new_config["Address"]}', new_config_content
        )
        new_config_content = re.sub(
            allowed_ips_pattern,
            f'AllowedIPs = {new_config["AllowedIPs"]}',
            new_config_content,
        )

        def replace_endpoint(match):
            endpoint_ip = new_config["EndpointIP"]
            return f'Endpoint = {endpoint_ip}:{new_config["ListenPort"]}'

        new_config_content = re.sub(
            endpoint_pattern, replace_endpoint, new_config_content
        )

        with open(file_path, "w") as f:
            f.write(new_config_content)

        subprocess.run(["systemctl", "daemon-reload"], check=True)
        service_name = "wireguardping.service"
        service_status = subprocess.run(
            ["systemctl", "is-active", service_name],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
        )

        if service_status.returncode != 0:
            print(f"\033[91mService {service_name} doesn't exist or is inactive\033[0m")

        subprocess.run(
            ["wg-quick", "down", "/etc/wireguard/wireclient.conf"], check=True
        )
        subprocess.run(["wg-quick", "up", "/etc/wireguard/wireclient.conf"], check=True)

        display_checkmark(f"\033[92mConfiguration updated successfully!\033[0m")

    except FileNotFoundError:
        print(f"\033[91mfile {file_path} not found.\033[0m")
    except subprocess.CalledProcessError as e:
        print(f"\033[91merror in restating services: {e}\033[0m")
    except Exception as e:
        print(f"\033[91merror in saving da config: {e}\033[0m")


def update_ufw_ruleswireguard(old_ip, new_ip, old_port=None, new_port=None):
    if old_port:
        delete_ufw_rules(old_ip, old_port)
        delete_ufw_rules(wtb_opposite_ip_wireguard(old_ip), old_port)
    add_ufw_rules(new_ip, new_port)
    add_ufw_rules(wtb_opposite_ip_wireguard(new_ip), new_port)


def update_ping_script_opposite_ip_wirenosec_client(new_opposite_ip):
    script_path = "/etc/ping_wireguard.sh"
    try:
        with open(script_path, "r") as f:
            script_content = f.read()

        updated_script_content = re.sub(
            r'ip_address="[^"]+"', f'ip_address="{new_opposite_ip}"', script_content
        )

        with open(script_path, "w") as f:
            f.write(updated_script_content)

        display_checkmark(
            "\033[92mPing script updated with new opposite IP address!\033[0m"
        )
    except FileNotFoundError:
        print(f"\033[91mPing script {script_path} not found.\033[0m")
    except Exception as e:
        print(f"\033[91mError updating ping script: {e}\033[0m")


def update_ping_script_opposite_ip_wirenosec1(new_opposite_ip):
    script_path = "/etc/ping_wireguard_1.sh"
    try:
        with open(script_path, "r") as f:
            script_content = f.read()

        updated_script_content = re.sub(
            r'ip_address="[^"]+"', f'ip_address="{new_opposite_ip}"', script_content
        )

        with open(script_path, "w") as f:
            f.write(updated_script_content)

        display_checkmark(
            "\033[92mPing script updated with new opposite IP address!\033[0m"
        )
    except FileNotFoundError:
        print(f"\033[91mPing script {script_path} not found.\033[0m")
    except Exception as e:
        print(f"\033[91mError updating ping script: {e}\033[0m")


def update_ping_script_opposite_ip_wirenosec2(new_opposite_ip):
    script_path = "/etc/ping_wireguard_2.sh"
    try:
        with open(script_path, "r") as f:
            script_content = f.read()

        updated_script_content = re.sub(
            r'ip_address="[^"]+"', f'ip_address="{new_opposite_ip}"', script_content
        )

        with open(script_path, "w") as f:
            f.write(updated_script_content)

        display_checkmark(
            "\033[92mPing script updated with new opposite IP address!\033[0m"
        )
    except FileNotFoundError:
        print(f"\033[91mPing script {script_path} not found.\033[0m")
    except Exception as e:
        print(f"\033[91mError updating ping script: {e}\033[0m")


def update_ping_script_opposite_ip_wirenosec3(new_opposite_ip):
    script_path = "/etc/ping_wireguard_3.sh"
    try:
        with open(script_path, "r") as f:
            script_content = f.read()

        updated_script_content = re.sub(
            r'ip_address="[^"]+"', f'ip_address="{new_opposite_ip}"', script_content
        )

        with open(script_path, "w") as f:
            f.write(updated_script_content)

        display_checkmark(
            "\033[92mPing script updated with new opposite IP address!\033[0m"
        )
    except FileNotFoundError:
        print(f"\033[91mPing script {script_path} not found.\033[0m")
    except Exception as e:
        print(f"\033[91mError updating ping script: {e}\033[0m")


def update_ping_script_opposite_ip_wirenosec4(new_opposite_ip):
    script_path = "/etc/ping_wireguard_4.sh"
    try:
        with open(script_path, "r") as f:
            script_content = f.read()

        updated_script_content = re.sub(
            r'ip_address="[^"]+"', f'ip_address="{new_opposite_ip}"', script_content
        )

        with open(script_path, "w") as f:
            f.write(updated_script_content)

        display_checkmark(
            "\033[92mPing script updated with new opposite IP address!\033[0m"
        )
    except FileNotFoundError:
        print(f"\033[91mPing script {script_path} not found.\033[0m")
    except Exception as e:
        print(f"\033[91mError updating ping script: {e}\033[0m")


def update_ping_script_opposite_ip_wirenosec5(new_opposite_ip):
    script_path = "/etc/ping_wireguard_5.sh"
    try:
        with open(script_path, "r") as f:
            script_content = f.read()

        updated_script_content = re.sub(
            r'ip_address="[^"]+"', f'ip_address="{new_opposite_ip}"', script_content
        )

        with open(script_path, "w") as f:
            f.write(updated_script_content)

        display_checkmark(
            "\033[92mPing script updated with new opposite IP address!\033[0m"
        )
    except FileNotFoundError:
        print(f"\033[91mPing script {script_path} not found.\033[0m")
    except Exception as e:
        print(f"\033[91mError updating ping script: {e}\033[0m")


def display_stuff_sitwire_privateiran1(local_ip, remote_ip, private_ip):
    lines = [
        f"\033[93mTitle:         SIT Configuration\033[0m",
        f"\033[97m──────────────────────────────────────\033[0m",
        f"\033[93mIRAN Public IP:         \033[97m{local_ip}\033[0m",
        f"\033[92mKharej \033[96m[1]\033[92m Public IP:   \033[97m{remote_ip}\033[0m",
        f"\033[93mSIT Private IP:         \033[97m{private_ip}\033[0m",
    ]
    box_width = 50

    print("\033[93m╭" + "─" * (box_width - 2) + "╮\033[0m")

    for line in lines:
        print(f"\033[93m {line:<{box_width - 4}} \033[0m")

    print("\033[93m╰" + "─" * (box_width - 2) + "╯\033[0m")


def display_stuff_sitwire_privateiran2(local_ip, remote_ip, private_ip):
    lines = [
        f"\033[93mTitle:         SIT Configuration\033[0m",
        f"\033[97m──────────────────────────────────────\033[0m",
        f"\033[93mIRAN Public IP:         \033[97m{local_ip}\033[0m",
        f"\033[92mKharej \033[96m[2]\033[92m Public IP:   \033[97m{remote_ip}\033[0m",
        f"\033[93mSIT Private IP:         \033[97m{private_ip}\033[0m",
    ]
    box_width = 50

    print("\033[93m╭" + "─" * (box_width - 2) + "╮\033[0m")

    for line in lines:
        print(f"\033[93m {line:<{box_width - 4}} \033[0m")

    print("\033[93m╰" + "─" * (box_width - 2) + "╯\033[0m")


def display_stuff_sitwire_privateiran3(local_ip, remote_ip, private_ip):
    lines = [
        f"\033[93mTitle:         SIT Configuration\033[0m",
        f"\033[97m──────────────────────────────────────\033[0m",
        f"\033[93mIRAN Public IP:         \033[97m{local_ip}\033[0m",
        f"\033[92mKharej \033[96m[3]\033[92m Public IP:   \033[97m{remote_ip}\033[0m",
        f"\033[93mSIT Private IP:         \033[97m{private_ip}\033[0m",
    ]
    box_width = 50

    print("\033[93m╭" + "─" * (box_width - 2) + "╮\033[0m")

    for line in lines:
        print(f"\033[93m {line:<{box_width - 4}} \033[0m")

    print("\033[93m╰" + "─" * (box_width - 2) + "╯\033[0m")


def display_stuff_sitwire_privateiran4(local_ip, remote_ip, private_ip):
    lines = [
        f"\033[93mTitle:         SIT Configuration\033[0m",
        f"\033[97m──────────────────────────────────────\033[0m",
        f"\033[93mIRAN Public IP:         \033[97m{local_ip}\033[0m",
        f"\033[92mKharej \033[96m[4]\033[92m Public IP:   \033[97m{remote_ip}\033[0m",
        f"\033[93mSIT Private IP:         \033[97m{private_ip}\033[0m",
    ]
    box_width = 50

    print("\033[93m╭" + "─" * (box_width - 2) + "╮\033[0m")

    for line in lines:
        print(f"\033[93m {line:<{box_width - 4}} \033[0m")

    print("\033[93m╰" + "─" * (box_width - 2) + "╯\033[0m")


def display_stuff_sitwire_privateiran5(local_ip, remote_ip, private_ip):
    lines = [
        f"\033[93mTitle:         SIT Configuration\033[0m",
        f"\033[97m──────────────────────────────────────\033[0m",
        f"\033[93mIRAN Public IP:         \033[97m{local_ip}\033[0m",
        f"\033[92mKharej \033[96m[5]\033[92m Public IP:   \033[97m{remote_ip}\033[0m",
        f"\033[93mSIT Private IP:         \033[97m{private_ip}\033[0m",
    ]
    box_width = 50

    print("\033[93m╭" + "─" * (box_width - 2) + "╮\033[0m")

    for line in lines:
        print(f"\033[93m {line:<{box_width - 4}} \033[0m")

    print("\033[93m╰" + "─" * (box_width - 2) + "╯\033[0m")


def display_stuff_sitwire_privatekharej1(local_ip, remote_ip, private_ip):
    lines = [
        f"\033[93mTitle:         SIT Configuration\033[0m",
        f"\033[97m──────────────────────────────────────\033[0m",
        f"\033[92mKharej \033[96m[1]\033[92m Public IP:   \033[97m{local_ip}\033[0m",
        f"\033[93mIRAN Public IP:         \033[97m{remote_ip}\033[0m",
        f"\033[93mSIT Private IP:         \033[97m{private_ip}\033[0m",
    ]
    box_width = 50

    print("\033[93m╭" + "─" * (box_width - 2) + "╮\033[0m")

    for line in lines:
        print(f"\033[93m {line:<{box_width - 4}} \033[0m")

    print("\033[93m╰" + "─" * (box_width - 2) + "╯\033[0m")


def display_stuff_sitwire_privatekharej2(local_ip, remote_ip, private_ip):
    lines = [
        f"\033[93mTitle:         SIT Configuration\033[0m",
        f"\033[97m──────────────────────────────────────\033[0m",
        f"\033[92mKharej \033[96m[2]\033[92m Public IP:   \033[97m{local_ip}\033[0m",
        f"\033[93mIRAN Public IP:         \033[97m{remote_ip}\033[0m",
        f"\033[93mSIT Private IP:         \033[97m{private_ip}\033[0m",
    ]
    box_width = 50

    print("\033[93m╭" + "─" * (box_width - 2) + "╮\033[0m")

    for line in lines:
        print(f"\033[93m {line:<{box_width - 4}} \033[0m")

    print("\033[93m╰" + "─" * (box_width - 2) + "╯\033[0m")


def display_stuff_sitwire_privatekharej3(local_ip, remote_ip, private_ip):
    lines = [
        f"\033[93mTitle:         SIT Configuration\033[0m",
        f"\033[97m──────────────────────────────────────\033[0m",
        f"\033[92mKharej \033[96m[3]\033[92m Public IP:   \033[97m{local_ip}\033[0m",
        f"\033[93mIRAN Public IP:         \033[97m{remote_ip}\033[0m",
        f"\033[93mSIT Private IP:         \033[97m{private_ip}\033[0m",
    ]
    box_width = 50

    print("\033[93m╭" + "─" * (box_width - 2) + "╮\033[0m")

    for line in lines:
        print(f"\033[93m {line:<{box_width - 4}} \033[0m")

    print("\033[93m╰" + "─" * (box_width - 2) + "╯\033[0m")


def display_stuff_sitwire_privatekharej4(local_ip, remote_ip, private_ip):
    lines = [
        f"\033[93mTitle:         SIT Configuration\033[0m",
        f"\033[97m──────────────────────────────────────\033[0m",
        f"\033[92mKharej \033[96m[4]\033[92m Public IP:   \033[97m{local_ip}\033[0m",
        f"\033[93mIRAN Public IP:         \033[97m{remote_ip}\033[0m",
        f"\033[93mSIT Private IP:         \033[97m{private_ip}\033[0m",
    ]
    box_width = 50

    print("\033[93m╭" + "─" * (box_width - 2) + "╮\033[0m")

    for line in lines:
        print(f"\033[93m {line:<{box_width - 4}} \033[0m")

    print("\033[93m╰" + "─" * (box_width - 2) + "╯\033[0m")


def display_stuff_sitwire_privatekharej5(local_ip, remote_ip, private_ip):
    lines = [
        f"\033[93mTitle:         SIT Configuration\033[0m",
        f"\033[97m──────────────────────────────────────\033[0m",
        f"\033[92mKharej \033[96m[5]\033[92m Public IP:   \033[97m{local_ip}\033[0m",
        f"\033[93mIRAN Public IP:         \033[97m{remote_ip}\033[0m",
        f"\033[93mSIT Private IP:         \033[97m{private_ip}\033[0m",
    ]
    box_width = 50

    print("\033[93m╭" + "─" * (box_width - 2) + "╮\033[0m")

    for line in lines:
        print(f"\033[93m {line:<{box_width - 4}} \033[0m")

    print("\033[93m╰" + "─" * (box_width - 2) + "╯\033[0m")


def display_wireguard_config_sitwire(
    address_no_subnet, listen_port, endpoint, allowed_ips
):
    lines = [
        f"\033[97m──────────────────────────────────────\033[0m",
        f"\033[93mTitle:         Wireguard Configuration\033[0m",
        f"\033[97m──────────────────────────────────────\033[0m",
        f"\033[92mAddress:           \033[97m{address_no_subnet}\033[0m",
        f"\033[92mListenPort:        \033[97m{listen_port}\033[0m",
        f"\033[92mEndpoint:          \033[97m{endpoint}\033[0m",
        f"\033[92mAllowedIPs:        \033[97m{allowed_ips}\033[0m",
    ]
    box_width = 50

    print("\033[93m╭" + "─" * (box_width - 2) + "╮\033[0m")

    for line in lines:
        print(f"\033[93m {line:<{box_width - 4}} \033[0m")

    print("\033[93m╰" + "─" * (box_width - 2) + "╯\033[0m")


def wireguardedit_sit_iranconfig_1():
    local_ip_private = local_ip("/etc/private1.sh")
    remote_ip_private = remote_ip("/etc/private1.sh")
    private_ip_private = private_ip1("/etc/private1.sh")
    config_path = "/etc/wireguard/wireserver1.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_sitwire_privateiran1(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mPrivate[SIT] + Wireguard\033[93m IRAN Server \033[96mConfig [1]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN Server\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mKharej Client [1] \033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6. \033[93mChange WireGuard Endpoint IP\033[0m")
        print("7. \033[92mSave All Stuff\033[0m")
        print("0. \033[97mback to the related menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Client [1]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec1(opposite_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "6":
            new_endpoint = input(
                "\033[93mEnter New \033[92mWireGuard Endpoint\033[93m Address:\033[0m "
            )
            if new_endpoint:
                try:
                    endpoint_ip, new_port = new_endpoint.rsplit(":", 1)
                    if endpoint.startswith(endpoint_ip):
                        endpoint = f"{endpoint_ip}:{new_port}"
                    else:
                        print(
                            "\033[97mSince Endpoint IP doesn't match with the original one, only port will be updated\033[0m"
                        )
                except ValueError:
                    print("\033[91minvalid Endpoint format\033[0m")
            else:
                print("\033[91minvalid Endpoint Address!\033[0m")
        elif choice == "7":
            save_stuff_sit1(private_ip_private, local_ip_private, remote_ip_private)
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwire1(config_path, new_config)
            break
        elif choice == "0":
            clear()
            wireguardedit_noconjuction_sit_1iran_5kharej()
            break
        else:
            print("Please select a valid option.")


def wireguardedit_sit_iranconfig_2():
    local_ip_private = local_ip("/etc/private2.sh")
    remote_ip_private = remote_ip("/etc/private2.sh")
    private_ip_private = private_ip1("/etc/private2.sh")
    config_path = "/etc/wireguard/wireserver2.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_sitwire_privateiran2(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mPrivate[SIT] + Wireguard\033[93m IRAN Server \033[96mConfig [2]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN Server\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mKharej Client [2] \033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6. \033[93mChange WireGuard Endpoint IP\033[0m")
        print("7. \033[92mSave All Stuff\033[0m")
        print("0. \033[97mback to the related menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Client [2]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec2(opposite_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "6":
            new_endpoint = input(
                "\033[93mEnter New \033[92mWireGuard Endpoint\033[93m Address:\033[0m "
            )
            if new_endpoint:
                try:
                    endpoint_ip, new_port = new_endpoint.rsplit(":", 1)
                    if endpoint.startswith(endpoint_ip):
                        endpoint = f"{endpoint_ip}:{new_port}"
                    else:
                        print(
                            "\033[97mSince Endpoint IP doesn't match with the original one, only port will be updated\033[0m"
                        )
                except ValueError:
                    print("\033[91minvalid Endpoint format\033[0m")
            else:
                print("\033[91minvalid Endpoint Address!\033[0m")
        elif choice == "7":
            save_stuff_sit2(private_ip_private, local_ip_private, remote_ip_private)
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwire2(config_path, new_config)
            break
        elif choice == "0":
            clear()
            wireguardedit_noconjuction_sit_1iran_5kharej()
            break
        else:
            print("Please select a valid option.")


def wireguardedit_sit_iranconfig_3():
    local_ip_private = local_ip("/etc/private3.sh")
    remote_ip_private = remote_ip("/etc/private3.sh")
    private_ip_private = private_ip1("/etc/private3.sh")
    config_path = "/etc/wireguard/wireserver3.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_sitwire_privateiran3(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mPrivate[SIT] + Wireguard\033[93m IRAN Server \033[96mConfig [3]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN Server\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mKharej Client [3] \033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6. \033[93mChange WireGuard Endpoint IP\033[0m")
        print("7. \033[92mSave All Stuff\033[0m")
        print("0. \033[97mback to the related menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Client [3]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec3(opposite_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "6":
            new_endpoint = input(
                "\033[93mEnter New \033[92mWireGuard Endpoint\033[93m Address:\033[0m "
            )
            if new_endpoint:
                try:
                    endpoint_ip, new_port = new_endpoint.rsplit(":", 1)
                    if endpoint.startswith(endpoint_ip):
                        endpoint = f"{endpoint_ip}:{new_port}"
                    else:
                        print(
                            "\033[97mSince Endpoint IP doesn't match with the original one, only port will be updated\033[0m"
                        )
                except ValueError:
                    print("\033[91minvalid Endpoint format\033[0m")
            else:
                print("\033[91minvalid Endpoint Address!\033[0m")
        elif choice == "7":
            save_stuff_sit3(private_ip_private, local_ip_private, remote_ip_private)
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwire3(config_path, new_config)
            break
        elif choice == "0":
            clear()
            wireguardedit_noconjuction_sit_1iran_5kharej()
            break
        else:
            print("Please select a valid option.")


def wireguardedit_sit_iranconfig_4():
    local_ip_private = local_ip("/etc/private4.sh")
    remote_ip_private = remote_ip("/etc/private4.sh")
    private_ip_private = private_ip1("/etc/private4.sh")
    config_path = "/etc/wireguard/wireserver4.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_sitwire_privateiran4(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mPrivate[SIT] + Wireguard\033[93m IRAN Server \033[96mConfig [4]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN Server\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mKharej Client [4] \033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6. \033[93mChange WireGuard Endpoint IP\033[0m")
        print("7. \033[92mSave All Stuff\033[0m")
        print("0. \033[97mback to the related menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Client [4]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec4(opposite_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "6":
            new_endpoint = input(
                "\033[93mEnter New \033[92mWireGuard Endpoint\033[93m Address:\033[0m "
            )
            if new_endpoint:
                try:
                    endpoint_ip, new_port = new_endpoint.rsplit(":", 1)
                    if endpoint.startswith(endpoint_ip):
                        endpoint = f"{endpoint_ip}:{new_port}"
                    else:
                        print(
                            "\033[97mSince Endpoint IP doesn't match with the original one, only port will be updated\033[0m"
                        )
                except ValueError:
                    print("\033[91minvalid Endpoint format\033[0m")
            else:
                print("\033[91minvalid Endpoint Address!\033[0m")
        elif choice == "7":
            save_stuff_sit4(private_ip_private, local_ip_private, remote_ip_private)
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwire4(config_path, new_config)
            break
        elif choice == "0":
            clear()
            wireguardedit_noconjuction_sit_1iran_5kharej()
            break
        else:
            print("Please select a valid option.")


def wireguardedit_sit_iranconfig_5():
    local_ip_private = local_ip("/etc/private5.sh")
    remote_ip_private = remote_ip("/etc/private5.sh")
    private_ip_private = private_ip1("/etc/private5.sh")
    config_path = "/etc/wireguard/wireserver5.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_sitwire_privateiran5(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mPrivate[SIT] + Wireguard\033[93m IRAN Server \033[96mConfig [5]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN Server\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mKharej Client [5] \033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6. \033[93mChange WireGuard Endpoint IP\033[0m")
        print("7. \033[92mSave All Stuff\033[0m")
        print("0. \033[97mback to the related menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Client [5]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec5(opposite_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "6":
            new_endpoint = input(
                "\033[93mEnter New \033[92mWireGuard Endpoint\033[93m Address:\033[0m "
            )
            if new_endpoint:
                try:
                    endpoint_ip, new_port = new_endpoint.rsplit(":", 1)
                    if endpoint.startswith(endpoint_ip):
                        endpoint = f"{endpoint_ip}:{new_port}"
                    else:
                        print(
                            "\033[97mSince Endpoint IP doesn't match with the original one, only port will be updated\033[0m"
                        )
                except ValueError:
                    print("\033[91minvalid Endpoint format\033[0m")
            else:
                print("\033[91minvalid Endpoint Address!\033[0m")
        elif choice == "7":
            save_stuff_sit5(private_ip_private, local_ip_private, remote_ip_private)
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwire5(config_path, new_config)
            break
        elif choice == "0":
            clear()
            wireguardedit_noconjuction_sit_1iran_5kharej()
            break
        else:
            print("Please select a valid option.")


def wireguardudp_sit_kharej_client1():
    local_ip_private = local_ip("/etc/private1.sh")
    remote_ip_private = remote_ip("/etc/private1.sh")
    private_ip_private = private_ip1("/etc/private1.sh")
    config_path = "/etc/wireguard/wireclient.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_sitwire_privatekharej1(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mPrivate[SIT] + Wireguard\033[93m Kharej Client \033[96m[1]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej Client [1]\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mIRAN Server\033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6. \033[93mChange WireGuard Endpoint IP\033[0m")
        print("7. \033[92mSave All Stuff\033[0m")
        print("0. \033[97mback to the related menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Client [1]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec_client(opposite_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "6":
            new_endpoint = input(
                "\033[93mEnter New \033[92mWireGuard Endpoint\033[93m Address:\033[0m "
            )
            if new_endpoint:
                try:
                    endpoint_ip, new_port = new_endpoint.rsplit(":", 1)
                    if endpoint.startswith(endpoint_ip):
                        endpoint = f"{endpoint_ip}:{new_port}"
                    else:
                        print(
                            "\033[97mSince Endpoint IP doesn't match with the original one, only port will be updated\033[0m"
                        )
                except ValueError:
                    print("\033[91minvalid Endpoint format\033[0m")
            else:
                print("\033[91minvalid Endpoint Address!\033[0m")
        elif choice == "7":
            save_stuff_sit1(private_ip_private, local_ip_private, remote_ip_private)
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwire_client(config_path, new_config)
            break
        elif choice == "0":
            clear()
            wireguardedit_noconjuction_sit_1iran_5kharej()
            break
        else:
            print("Please select a valid option.")


def wireguardudp_sit_kharej_client2():
    local_ip_private = local_ip("/etc/private2.sh")
    remote_ip_private = remote_ip("/etc/private2.sh")
    private_ip_private = private_ip1("/etc/private2.sh")
    config_path = "/etc/wireguard/wireclient.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_sitwire_privatekharej2(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mPrivate[SIT] + Wireguard\033[93m Kharej Client \033[96m[2]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej Client [2]\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mIRAN Server\033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6. \033[93mChange WireGuard Endpoint IP\033[0m")
        print("7. \033[92mSave All Stuff\033[0m")
        print("0. \033[97mback to the related menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Client [2]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec_client(opposite_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "6":
            new_endpoint = input(
                "\033[93mEnter New \033[92mWireGuard Endpoint\033[93m Address:\033[0m "
            )
            if new_endpoint:
                try:
                    endpoint_ip, new_port = new_endpoint.rsplit(":", 1)
                    if endpoint.startswith(endpoint_ip):
                        endpoint = f"{endpoint_ip}:{new_port}"
                    else:
                        print(
                            "\033[97mSince Endpoint IP doesn't match with the original one, only port will be updated\033[0m"
                        )
                except ValueError:
                    print("\033[91minvalid Endpoint format\033[0m")
            else:
                print("\033[91minvalid Endpoint Address!\033[0m")
        elif choice == "7":
            save_stuff_sit2(private_ip_private, local_ip_private, remote_ip_private)
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwire_client(config_path, new_config)
            break
        elif choice == "0":
            clear()
            wireguardedit_noconjuction_sit_1iran_5kharej()
            break
        else:
            print("Please select a valid option.")


def wireguardudp_sit_kharej_client3():
    local_ip_private = local_ip("/etc/private3.sh")
    remote_ip_private = remote_ip("/etc/private3.sh")
    private_ip_private = private_ip1("/etc/private3.sh")
    config_path = "/etc/wireguard/wireclient.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_sitwire_privatekharej3(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mPrivate[SIT] + Wireguard\033[93m Kharej Client \033[96m[3]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej Client [3]\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mIRAN Server\033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6. \033[93mChange WireGuard Endpoint IP\033[0m")
        print("7. \033[92mSave All Stuff\033[0m")
        print("0. \033[97mback to the related menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Client [3]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec_client(opposite_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "6":
            new_endpoint = input(
                "\033[93mEnter New \033[92mWireGuard Endpoint\033[93m Address:\033[0m "
            )
            if new_endpoint:
                try:
                    endpoint_ip, new_port = new_endpoint.rsplit(":", 1)
                    if endpoint.startswith(endpoint_ip):
                        endpoint = f"{endpoint_ip}:{new_port}"
                    else:
                        print(
                            "\033[97mSince Endpoint IP doesn't match with the original one, only port will be updated\033[0m"
                        )
                except ValueError:
                    print("\033[91minvalid Endpoint format\033[0m")
            else:
                print("\033[91minvalid Endpoint Address!\033[0m")
        elif choice == "7":
            save_stuff_sit3(private_ip_private, local_ip_private, remote_ip_private)
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwire_client(config_path, new_config)
            break
        elif choice == "0":
            clear()
            wireguardedit_noconjuction_sit_1iran_5kharej()
            break
        else:
            print("Please select a valid option.")


def wireguardudp_sit_kharej_client4():
    local_ip_private = local_ip("/etc/private4.sh")
    remote_ip_private = remote_ip("/etc/private4.sh")
    private_ip_private = private_ip1("/etc/private4.sh")
    config_path = "/etc/wireguard/wireclient.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_sitwire_privatekharej4(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mPrivate[SIT] + Wireguard\033[93m Kharej Client \033[96m[4]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej Client [4]\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mIRAN Server\033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6. \033[93mChange WireGuard Endpoint IP\033[0m")
        print("7. \033[92mSave All Stuff\033[0m")
        print("0. \033[97mback to the related menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Client [4]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec_client(opposite_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "6":
            new_endpoint = input(
                "\033[93mEnter New \033[92mWireGuard Endpoint\033[93m Address:\033[0m "
            )
            if new_endpoint:
                try:
                    endpoint_ip, new_port = new_endpoint.rsplit(":", 1)
                    if endpoint.startswith(endpoint_ip):
                        endpoint = f"{endpoint_ip}:{new_port}"
                    else:
                        print(
                            "\033[97mSince Endpoint IP doesn't match with the original one, only port will be updated\033[0m"
                        )
                except ValueError:
                    print("\033[91minvalid Endpoint format\033[0m")
            else:
                print("\033[91minvalid Endpoint Address!\033[0m")
        elif choice == "7":
            save_stuff_sit4(private_ip_private, local_ip_private, remote_ip_private)
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwire_client(config_path, new_config)
            break
        elif choice == "0":
            clear()
            wireguardedit_noconjuction_sit_1iran_5kharej()
            break
        else:
            print("Please select a valid option.")


def wireguardudp_sit_kharej_client5():
    local_ip_private = local_ip("/etc/private5.sh")
    remote_ip_private = remote_ip("/etc/private5.sh")
    private_ip_private = private_ip1("/etc/private5.sh")
    config_path = "/etc/wireguard/wireclient.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_sitwire_privatekharej5(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mPrivate[SIT] + Wireguard\033[93m Kharej Client \033[96m[5]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej Client [5]\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mIRAN Server\033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6. \033[93mChange WireGuard Endpoint IP\033[0m")
        print("7. \033[92mSave All Stuff\033[0m")
        print("0. \033[97mback to the related menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Client [5]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec_client(opposite_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "6":
            new_endpoint = input(
                "\033[93mEnter New \033[92mWireGuard Endpoint\033[93m Address:\033[0m "
            )
            if new_endpoint:
                try:
                    endpoint_ip, new_port = new_endpoint.rsplit(":", 1)
                    if endpoint.startswith(endpoint_ip):
                        endpoint = f"{endpoint_ip}:{new_port}"
                    else:
                        print(
                            "\033[97mSince Endpoint IP doesn't match with the original one, only port will be updated\033[0m"
                        )
                except ValueError:
                    print("\033[91minvalid Endpoint format\033[0m")
            else:
                print("\033[91minvalid Endpoint Address!\033[0m")
        elif choice == "7":
            save_stuff_sit5(private_ip_private, local_ip_private, remote_ip_private)
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwire_client(config_path, new_config)
            break
        elif choice == "0":
            clear()
            wireguardedit_noconjuction_sit_1iran_5kharej()
            break
        else:
            print("Please select a valid option.")


def display_stuff_sitwire_privateiran_client1(local_ip, remote_ip, private_ip):
    lines = [
        f"\033[93mTitle:         SIT Configuration\033[0m",
        f"\033[97m──────────────────────────────────────\033[0m",
        f"\033[93mIRAN \033[96m[1] Public IP:         \033[97m{local_ip}\033[0m",
        f"\033[92mKharej Public IP:   \033[97m{remote_ip}\033[0m",
        f"\033[93mSIT Private IP:         \033[97m{private_ip}\033[0m",
    ]
    box_width = 50

    print("\033[93m╭" + "─" * (box_width - 2) + "╮\033[0m")

    for line in lines:
        print(f"\033[93m {line:<{box_width - 4}} \033[0m")

    print("\033[93m╰" + "─" * (box_width - 2) + "╯\033[0m")


def display_stuff_sitwire_privateiran_client2(local_ip, remote_ip, private_ip):
    lines = [
        f"\033[93mTitle:         SIT Configuration\033[0m",
        f"\033[97m──────────────────────────────────────\033[0m",
        f"\033[93mIRAN \033[96m[2] Public IP:         \033[97m{local_ip}\033[0m",
        f"\033[92mKharej Public IP:   \033[97m{remote_ip}\033[0m",
        f"\033[93mSIT Private IP:         \033[97m{private_ip}\033[0m",
    ]
    box_width = 50

    print("\033[93m╭" + "─" * (box_width - 2) + "╮\033[0m")

    for line in lines:
        print(f"\033[93m {line:<{box_width - 4}} \033[0m")

    print("\033[93m╰" + "─" * (box_width - 2) + "╯\033[0m")


def display_stuff_sitwire_privateiran_client3(local_ip, remote_ip, private_ip):
    lines = [
        f"\033[93mTitle:         SIT Configuration\033[0m",
        f"\033[97m──────────────────────────────────────\033[0m",
        f"\033[93mIRAN \033[96m[3] Public IP:         \033[97m{local_ip}\033[0m",
        f"\033[92mKharej Public IP:   \033[97m{remote_ip}\033[0m",
        f"\033[93mSIT Private IP:         \033[97m{private_ip}\033[0m",
    ]
    box_width = 50

    print("\033[93m╭" + "─" * (box_width - 2) + "╮\033[0m")

    for line in lines:
        print(f"\033[93m {line:<{box_width - 4}} \033[0m")

    print("\033[93m╰" + "─" * (box_width - 2) + "╯\033[0m")


def display_stuff_sitwire_privateiran_client4(local_ip, remote_ip, private_ip):
    lines = [
        f"\033[93mTitle:         SIT Configuration\033[0m",
        f"\033[97m──────────────────────────────────────\033[0m",
        f"\033[93mIRAN \033[96m[4] Public IP:         \033[97m{local_ip}\033[0m",
        f"\033[92mKharej Public IP:   \033[97m{remote_ip}\033[0m",
        f"\033[93mSIT Private IP:         \033[97m{private_ip}\033[0m",
    ]
    box_width = 50

    print("\033[93m╭" + "─" * (box_width - 2) + "╮\033[0m")

    for line in lines:
        print(f"\033[93m {line:<{box_width - 4}} \033[0m")

    print("\033[93m╰" + "─" * (box_width - 2) + "╯\033[0m")


def display_stuff_sitwire_privateiran_client5(local_ip, remote_ip, private_ip):
    lines = [
        f"\033[93mTitle:         SIT Configuration\033[0m",
        f"\033[97m──────────────────────────────────────\033[0m",
        f"\033[93mIRAN \033[96m[5] Public IP:         \033[97m{local_ip}\033[0m",
        f"\033[92mKharej Public IP:   \033[97m{remote_ip}\033[0m",
        f"\033[93mSIT Private IP:         \033[97m{private_ip}\033[0m",
    ]
    box_width = 50

    print("\033[93m╭" + "─" * (box_width - 2) + "╮\033[0m")

    for line in lines:
        print(f"\033[93m {line:<{box_width - 4}} \033[0m")

    print("\033[93m╰" + "─" * (box_width - 2) + "╯\033[0m")


def display_stuff_sitwire_privatekharej_server1(local_ip, remote_ip, private_ip):
    lines = [
        f"\033[93mTitle:         SIT Configuration\033[0m",
        f"\033[97m──────────────────────────────────────\033[0m",
        f"\033[92mKharej Public IP:   \033[97m{local_ip}\033[0m",
        f"\033[93mIRAN \033[96m[1]\033[93m Public IP:         \033[97m{remote_ip}\033[0m",
        f"\033[93mSIT Private IP:         \033[97m{private_ip}\033[0m",
    ]
    box_width = 50

    print("\033[93m╭" + "─" * (box_width - 2) + "╮\033[0m")

    for line in lines:
        print(f"\033[93m {line:<{box_width - 4}} \033[0m")

    print("\033[93m╰" + "─" * (box_width - 2) + "╯\033[0m")


def display_stuff_sitwire_privatekharej_server2(local_ip, remote_ip, private_ip):
    lines = [
        f"\033[93mTitle:         SIT Configuration\033[0m",
        f"\033[97m──────────────────────────────────────\033[0m",
        f"\033[92mKharej Public IP:   \033[97m{local_ip}\033[0m",
        f"\033[93mIRAN \033[96m[2]\033[93m Public IP:         \033[97m{remote_ip}\033[0m",
        f"\033[93mSIT Private IP:         \033[97m{private_ip}\033[0m",
    ]
    box_width = 50

    print("\033[93m╭" + "─" * (box_width - 2) + "╮\033[0m")

    for line in lines:
        print(f"\033[93m {line:<{box_width - 4}} \033[0m")

    print("\033[93m╰" + "─" * (box_width - 2) + "╯\033[0m")


def display_stuff_sitwire_privatekharej_server3(local_ip, remote_ip, private_ip):
    lines = [
        f"\033[93mTitle:         SIT Configuration\033[0m",
        f"\033[97m──────────────────────────────────────\033[0m",
        f"\033[92mKharej Public IP:   \033[97m{local_ip}\033[0m",
        f"\033[93mIRAN \033[96m[3]\033[93m Public IP:         \033[97m{remote_ip}\033[0m",
        f"\033[93mSIT Private IP:         \033[97m{private_ip}\033[0m",
    ]
    box_width = 50

    print("\033[93m╭" + "─" * (box_width - 2) + "╮\033[0m")

    for line in lines:
        print(f"\033[93m {line:<{box_width - 4}} \033[0m")

    print("\033[93m╰" + "─" * (box_width - 2) + "╯\033[0m")


def display_stuff_sitwire_privatekharej_server4(local_ip, remote_ip, private_ip):
    lines = [
        f"\033[93mTitle:         SIT Configuration\033[0m",
        f"\033[97m──────────────────────────────────────\033[0m",
        f"\033[92mKharej Public IP:   \033[97m{local_ip}\033[0m",
        f"\033[93mIRAN \033[96m[4]\033[93m Public IP:         \033[97m{remote_ip}\033[0m",
        f"\033[93mSIT Private IP:         \033[97m{private_ip}\033[0m",
    ]
    box_width = 50

    print("\033[93m╭" + "─" * (box_width - 2) + "╮\033[0m")

    for line in lines:
        print(f"\033[93m {line:<{box_width - 4}} \033[0m")

    print("\033[93m╰" + "─" * (box_width - 2) + "╯\033[0m")


def display_stuff_sitwire_privatekharej_server5(local_ip, remote_ip, private_ip):
    lines = [
        f"\033[93mTitle:         SIT Configuration\033[0m",
        f"\033[97m──────────────────────────────────────\033[0m",
        f"\033[92mKharej Public IP:   \033[97m{local_ip}\033[0m",
        f"\033[93mIRAN \033[96m[5]\033[93m Public IP:         \033[97m{remote_ip}\033[0m",
        f"\033[93mSIT Private IP:         \033[97m{private_ip}\033[0m",
    ]
    box_width = 50

    print("\033[93m╭" + "─" * (box_width - 2) + "╮\033[0m")

    for line in lines:
        print(f"\033[93m {line:<{box_width - 4}} \033[0m")

    print("\033[93m╰" + "─" * (box_width - 2) + "╯\033[0m")


def wireguardedit_sit_kharejconfig_1():
    local_ip_private = local_ip("/etc/private1.sh")
    remote_ip_private = remote_ip("/etc/private1.sh")
    private_ip_private = private_ip1("/etc/private1.sh")
    config_path = "/etc/wireguard/wireserver1.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_sitwire_privatekharej_server1(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mPrivate[SIT] + Wireguard\033[93m Kharej Server \033[96mConfig [1]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej Server\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mIRAN Client [1] \033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6. \033[93mChange WireGuard Endpoint IP\033[0m")
        print("7. \033[92mSave All Stuff\033[0m")
        print("0. \033[97mback to the related menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Client [1]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec1(opposite_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "6":
            new_endpoint = input(
                "\033[93mEnter New \033[92mWireGuard Endpoint\033[93m Address:\033[0m "
            )
            if new_endpoint:
                try:
                    endpoint_ip, new_port = new_endpoint.rsplit(":", 1)
                    if endpoint.startswith(endpoint_ip):
                        endpoint = f"{endpoint_ip}:{new_port}"
                    else:
                        print(
                            "\033[97mSince Endpoint IP doesn't match with the original one, only port will be updated\033[0m"
                        )
                except ValueError:
                    print("\033[91minvalid Endpoint format\033[0m")
            else:
                print("\033[91minvalid Endpoint Address!\033[0m")
        elif choice == "7":
            save_stuff_sit1(private_ip_private, local_ip_private, remote_ip_private)
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwire1(config_path, new_config)
            break
        elif choice == "0":
            clear()
            wireguardedit_noconjuction_sit_kharej1_5iran()
            break
        else:
            print("Please select a valid option.")


def wireguardedit_sit_kharejconfig_2():
    local_ip_private = local_ip("/etc/private2.sh")
    remote_ip_private = remote_ip("/etc/private2.sh")
    private_ip_private = private_ip1("/etc/private2.sh")
    config_path = "/etc/wireguard/wireserver2.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_sitwire_privatekharej_server2(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mPrivate[SIT] + Wireguard\033[93m Kharej Server \033[96mConfig [2]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej Server\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mIRAN Client [2] \033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6. \033[93mChange WireGuard Endpoint IP\033[0m")
        print("7. \033[92mSave All Stuff\033[0m")
        print("0. \033[97mback to the related menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Client [2]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec2(opposite_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "6":
            new_endpoint = input(
                "\033[93mEnter New \033[92mWireGuard Endpoint\033[93m Address:\033[0m "
            )
            if new_endpoint:
                try:
                    endpoint_ip, new_port = new_endpoint.rsplit(":", 1)
                    if endpoint.startswith(endpoint_ip):
                        endpoint = f"{endpoint_ip}:{new_port}"
                    else:
                        print(
                            "\033[97mSince Endpoint IP doesn't match with the original one, only port will be updated\033[0m"
                        )
                except ValueError:
                    print("\033[91minvalid Endpoint format\033[0m")
            else:
                print("\033[91minvalid Endpoint Address!\033[0m")
        elif choice == "7":
            save_stuff_sit2(private_ip_private, local_ip_private, remote_ip_private)
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwire2(config_path, new_config)
            break
        elif choice == "0":
            clear()
            wireguardedit_noconjuction_sit_kharej1_5iran()
            break
        else:
            print("Please select a valid option.")


def wireguardedit_sit_kharejconfig_3():
    local_ip_private = local_ip("/etc/private3.sh")
    remote_ip_private = remote_ip("/etc/private3.sh")
    private_ip_private = private_ip1("/etc/private3.sh")
    config_path = "/etc/wireguard/wireserver3.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_sitwire_privatekharej_server3(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mPrivate[SIT] + Wireguard\033[93m Kharej Server \033[96mConfig [3]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej Server\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mIRAN Client [3] \033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6. \033[93mChange WireGuard Endpoint IP\033[0m")
        print("7. \033[92mSave All Stuff\033[0m")
        print("0. \033[97mback to the related menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Client [3]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec3(opposite_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "6":
            new_endpoint = input(
                "\033[93mEnter New \033[92mWireGuard Endpoint\033[93m Address:\033[0m "
            )
            if new_endpoint:
                try:
                    endpoint_ip, new_port = new_endpoint.rsplit(":", 1)
                    if endpoint.startswith(endpoint_ip):
                        endpoint = f"{endpoint_ip}:{new_port}"
                    else:
                        print(
                            "\033[97mSince Endpoint IP doesn't match with the original one, only port will be updated\033[0m"
                        )
                except ValueError:
                    print("\033[91minvalid Endpoint format\033[0m")
            else:
                print("\033[91minvalid Endpoint Address!\033[0m")
        elif choice == "7":
            save_stuff_sit3(private_ip_private, local_ip_private, remote_ip_private)
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwire3(config_path, new_config)
            break
        elif choice == "0":
            clear()
            wireguardedit_noconjuction_sit_kharej1_5iran()
            break
        else:
            print("Please select a valid option.")


def wireguardedit_sit_kharejconfig_4():
    local_ip_private = local_ip("/etc/private4.sh")
    remote_ip_private = remote_ip("/etc/private4.sh")
    private_ip_private = private_ip1("/etc/private4.sh")
    config_path = "/etc/wireguard/wireserver4.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_sitwire_privatekharej_server4(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mPrivate[SIT] + Wireguard\033[93m Kharej Server \033[96mConfig [4]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej Server\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mIRAN Client [4] \033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6. \033[93mChange WireGuard Endpoint IP\033[0m")
        print("7. \033[92mSave All Stuff\033[0m")
        print("0. \033[97mback to the related menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Client [4]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec4(opposite_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "6":
            new_endpoint = input(
                "\033[93mEnter New \033[92mWireGuard Endpoint\033[93m Address:\033[0m "
            )
            if new_endpoint:
                try:
                    endpoint_ip, new_port = new_endpoint.rsplit(":", 1)
                    if endpoint.startswith(endpoint_ip):
                        endpoint = f"{endpoint_ip}:{new_port}"
                    else:
                        print(
                            "\033[97mSince Endpoint IP doesn't match with the original one, only port will be updated\033[0m"
                        )
                except ValueError:
                    print("\033[91minvalid Endpoint format\033[0m")
            else:
                print("\033[91minvalid Endpoint Address!\033[0m")
        elif choice == "7":
            save_stuff_sit4(private_ip_private, local_ip_private, remote_ip_private)
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwire4(config_path, new_config)
            break
        elif choice == "0":
            clear()
            wireguardedit_noconjuction_sit_1iran_5kharej()
            break
        else:
            print("Please select a valid option.")


def wireguardedit_sit_kharejconfig_5():
    local_ip_private = local_ip("/etc/private5.sh")
    remote_ip_private = remote_ip("/etc/private5.sh")
    private_ip_private = private_ip1("/etc/private5.sh")
    config_path = "/etc/wireguard/wireserver5.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_sitwire_privatekharej_server5(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mPrivate[SIT] + Wireguard\033[93m Kharej Server \033[96mConfig [5]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej Server\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mIRAN Client [5] \033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6. \033[93mChange WireGuard Endpoint IP\033[0m")
        print("7. \033[92mSave All Stuff\033[0m")
        print("0. \033[97mback to the related menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Client [5]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec5(opposite_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "6":
            new_endpoint = input(
                "\033[93mEnter New \033[92mWireGuard Endpoint\033[93m Address:\033[0m "
            )
            if new_endpoint:
                try:
                    endpoint_ip, new_port = new_endpoint.rsplit(":", 1)
                    if endpoint.startswith(endpoint_ip):
                        endpoint = f"{endpoint_ip}:{new_port}"
                    else:
                        print(
                            "\033[97mSince Endpoint IP doesn't match with the original one, only port will be updated\033[0m"
                        )
                except ValueError:
                    print("\033[91minvalid Endpoint format\033[0m")
            else:
                print("\033[91minvalid Endpoint Address!\033[0m")
        elif choice == "7":
            save_stuff_sit5(private_ip_private, local_ip_private, remote_ip_private)
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwire5(config_path, new_config)
            break
        elif choice == "0":
            clear()
            wireguardedit_noconjuction_sit_kharej1_5iran()
            break
        else:
            print("Please select a valid option.")

def wireguardudp_sit_iran_client1():
    local_ip_private = local_ip("/etc/private1.sh")
    remote_ip_private = remote_ip("/etc/private1.sh")
    private_ip_private = private_ip1("/etc/private1.sh")
    config_path = "/etc/wireguard/wireclient.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_sitwire_privateiran_client1(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mPrivate[SIT] + Wireguard\033[93m IRAN Client \033[96m[1]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN Client [1]\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mKharej Server\033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6. \033[93mChange WireGuard Endpoint IP\033[0m")
        print("7. \033[92mSave All Stuff\033[0m")
        print("0. \033[97mback to the related menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Client [1]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec_client(opposite_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "6":
            new_endpoint = input(
                "\033[93mEnter New \033[92mWireGuard Endpoint\033[93m Address:\033[0m "
            )
            if new_endpoint:
                try:
                    endpoint_ip, new_port = new_endpoint.rsplit(":", 1)
                    if endpoint.startswith(endpoint_ip):
                        endpoint = f"{endpoint_ip}:{new_port}"
                    else:
                        print(
                            "\033[97mSince Endpoint IP doesn't match with the original one, only port will be updated\033[0m"
                        )
                except ValueError:
                    print("\033[91minvalid Endpoint format\033[0m")
            else:
                print("\033[91minvalid Endpoint Address!\033[0m")
        elif choice == "7":
            save_stuff_sit1(private_ip_private, local_ip_private, remote_ip_private)
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwire_client(config_path, new_config)
            break
        elif choice == "0":
            clear()
            wireguardedit_noconjuction_sit_kharej1_5iran()
            break
        else:
            print("Please select a valid option.")


def wireguardudp_sit_iran_client2():
    local_ip_private = local_ip("/etc/private2.sh")
    remote_ip_private = remote_ip("/etc/private2.sh")
    private_ip_private = private_ip1("/etc/private2.sh")
    config_path = "/etc/wireguard/wireclient.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_sitwire_privateiran_client2(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mPrivate[SIT] + Wireguard\033[93m IRAN Client \033[96m[2]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN Client [2]\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mKharej Server\033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6. \033[93mChange WireGuard Endpoint IP\033[0m")
        print("7. \033[92mSave All Stuff\033[0m")
        print("0. \033[97mback to the related menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Client [2]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec_client(opposite_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "6":
            new_endpoint = input(
                "\033[93mEnter New \033[92mWireGuard Endpoint\033[93m Address:\033[0m "
            )
            if new_endpoint:
                try:
                    endpoint_ip, new_port = new_endpoint.rsplit(":", 1)
                    if endpoint.startswith(endpoint_ip):
                        endpoint = f"{endpoint_ip}:{new_port}"
                    else:
                        print(
                            "\033[97mSince Endpoint IP doesn't match with the original one, only port will be updated\033[0m"
                        )
                except ValueError:
                    print("\033[91minvalid Endpoint format\033[0m")
            else:
                print("\033[91minvalid Endpoint Address!\033[0m")
        elif choice == "7":
            save_stuff_sit2(private_ip_private, local_ip_private, remote_ip_private)
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwire_client(config_path, new_config)
            break
        elif choice == "0":
            clear()
            wireguardedit_noconjuction_sit_kharej1_5iran()
            break
        else:
            print("Please select a valid option.")


def wireguardudp_sit_iran_client3():
    local_ip_private = local_ip("/etc/private3.sh")
    remote_ip_private = remote_ip("/etc/private3.sh")
    private_ip_private = private_ip1("/etc/private3.sh")
    config_path = "/etc/wireguard/wireclient.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_sitwire_privateiran_client3(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mPrivate[SIT] + Wireguard\033[93m IRAN Client \033[96m[3]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN Client [3]\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mKharej Server\033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6. \033[93mChange WireGuard Endpoint IP\033[0m")
        print("7. \033[92mSave All Stuff\033[0m")
        print("0. \033[97mback to the related menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Client [3]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec_client(opposite_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "6":
            new_endpoint = input(
                "\033[93mEnter New \033[92mWireGuard Endpoint\033[93m Address:\033[0m "
            )
            if new_endpoint:
                try:
                    endpoint_ip, new_port = new_endpoint.rsplit(":", 1)
                    if endpoint.startswith(endpoint_ip):
                        endpoint = f"{endpoint_ip}:{new_port}"
                    else:
                        print(
                            "\033[97mSince Endpoint IP doesn't match with the original one, only port will be updated\033[0m"
                        )
                except ValueError:
                    print("\033[91minvalid Endpoint format\033[0m")
            else:
                print("\033[91minvalid Endpoint Address!\033[0m")
        elif choice == "7":
            save_stuff_sit3(private_ip_private, local_ip_private, remote_ip_private)
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwire_client(config_path, new_config)
            break
        elif choice == "0":
            clear()
            wireguardedit_noconjuction_sit_kharej1_5iran()
            break
        else:
            print("Please select a valid option.")


def wireguardudp_sit_iran_client4():
    local_ip_private = local_ip("/etc/private4.sh")
    remote_ip_private = remote_ip("/etc/private4.sh")
    private_ip_private = private_ip1("/etc/private4.sh")
    config_path = "/etc/wireguard/wireclient.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_sitwire_privateiran_client4(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mPrivate[SIT] + Wireguard\033[93m IRAN Client \033[96m[4]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN Client [4]\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mKharej Server\033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6. \033[93mChange WireGuard Endpoint IP\033[0m")
        print("7. \033[92mSave All Stuff\033[0m")
        print("0. \033[97mback to the related menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Client [4]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec_client(opposite_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "6":
            new_endpoint = input(
                "\033[93mEnter New \033[92mWireGuard Endpoint\033[93m Address:\033[0m "
            )
            if new_endpoint:
                try:
                    endpoint_ip, new_port = new_endpoint.rsplit(":", 1)
                    if endpoint.startswith(endpoint_ip):
                        endpoint = f"{endpoint_ip}:{new_port}"
                    else:
                        print(
                            "\033[97mSince Endpoint IP doesn't match with the original one, only port will be updated\033[0m"
                        )
                except ValueError:
                    print("\033[91minvalid Endpoint format\033[0m")
            else:
                print("\033[91minvalid Endpoint Address!\033[0m")
        elif choice == "7":
            save_stuff_sit4(private_ip_private, local_ip_private, remote_ip_private)
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwire_client(config_path, new_config)
            break
        elif choice == "0":
            clear()
            wireguardedit_noconjuction_sit_kharej1_5iran()
            break
        else:
            print("Please select a valid option.")


def wireguardudp_sit_iran_client5():
    local_ip_private = local_ip("/etc/private5.sh")
    remote_ip_private = remote_ip("/etc/private5.sh")
    private_ip_private = private_ip1("/etc/private5.sh")
    config_path = "/etc/wireguard/wireclient.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_sitwire_privateiran_client5(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mPrivate[SIT] + Wireguard\033[93m IRAN Client \033[96m[5]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN Client [5]\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mKharej Server\033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6. \033[93mChange WireGuard Endpoint IP\033[0m")
        print("7. \033[92mSave All Stuff\033[0m")
        print("0. \033[97mback to the related menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Client [5]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec_client(opposite_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "6":
            new_endpoint = input(
                "\033[93mEnter New \033[92mWireGuard Endpoint\033[93m Address:\033[0m "
            )
            if new_endpoint:
                try:
                    endpoint_ip, new_port = new_endpoint.rsplit(":", 1)
                    if endpoint.startswith(endpoint_ip):
                        endpoint = f"{endpoint_ip}:{new_port}"
                    else:
                        print(
                            "\033[97mSince Endpoint IP doesn't match with the original one, only port will be updated\033[0m"
                        )
                except ValueError:
                    print("\033[91minvalid Endpoint format\033[0m")
            else:
                print("\033[91minvalid Endpoint Address!\033[0m")
        elif choice == "7":
            save_stuff_sit5(private_ip_private, local_ip_private, remote_ip_private)
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwire_client(config_path, new_config)
            break
        elif choice == "0":
            clear()
            wireguardedit_noconjuction_sit_kharej1_5iran()
            break
        else:
            print("Please select a valid option.")


# ipsec
def wireguardeditserver_sec_sit_mnu():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print("\033[92m(   ) \033[93mWireguard + SIT + IPSEC \033[93m Edit Menu\033[0m")
    print(
        '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
    )
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print(
        "1. \033[92mWireguard + SIT + IPSEC - [1]Kharej Server [5]IRAN Clients\033[0m"
    )
    print(
        "2. \033[93mWireguard + SIT + IPSEC - [1]IRAN   Server [5]Kharej Clients\033[0m"
    )
    print("\033[93m───────────────────────────────────────\033[0m")
    print("0.\033[97mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")
    while True:
        server_type = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if server_type == "1":
            wireguardedit_noconjuction_sitsec_kharej1_5iran()
            break
        elif server_type == "2":
            wireguardedit_noconjuction_sitsec_1iran_5kharej()
            break
        elif server_type == "0":
            os.system("clear")
            wireguardsiteditserver_mnu()
            break
        else:
            print("Invalid choice.")


def wireguardedit_noconjuction_sitsec_kharej1_5iran():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print(
        "\033[92m(   ) \033[93mWireguard + SIT + IPSEC \033[92m[1]Kharej Server\033[96m [5]IRAN Client\033[93m Edit Menu\033[0m"
    )
    print(
        '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
    )
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[92mIRAN Client [1] Config\033[0m")
    print("2. \033[92mIRAN Client [2] Config\033[0m")
    print("3. \033[92mIRAN Client [3] Config\033[0m")
    print("4. \033[93mIRAN Client [4] Config\033[0m")
    print("5. \033[92mIRAN Client [5] Config\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    print("6. \033[96mKharej Server Config\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    print("0.\033[97mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")
    while True:
        server_type = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if server_type == "1":
            wireguardudp_sitsec_iran_client1()
            break
        elif server_type == "2":
            wireguardudp_sitsec_iran_client2()
            break
        elif server_type == "3":
            wireguardudp_sitsec_iran_client3()
            break
        elif server_type == "4":
            wireguardudp_sitsec_iran_client4()
            break
        elif server_type == "5":
            wireguardudp_sitsec_iran_client5()
            break
        elif server_type == "6":
            wireguardudpedit_sitsec_kharej_server()
            break
        elif server_type == "0":
            os.system("clear")
            wireguardeditserver_sec_sit_mnu()
            break
        else:
            print("Invalid choice.")


def wireguardudpedit_sitsec_kharej_server():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print(
        "\033[92m(   ) \033[93mWireguard + SIT + IPSEC \033[92m[1]Kharej Server\033[96m [5]IRAN Client\033[93m Edit Menu\033[0m"
    )
    print(
        '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
    )
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[92mKharej Server Config [1] \033[0m")
    print("2. \033[92mKharej Server Config [2]\033[0m")
    print("3. \033[93mKharej Server Config [3]\033[0m")
    print("4. \033[92mKharej Server Config [4]\033[0m")
    print("5. \033[92mKharej Server Config [5]\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    print("0.\033[97mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")
    while True:
        server_type = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if server_type == "1":
            wireguardedit_sitsec_kharejconfig_1()
            break
        elif server_type == "2":
            wireguardedit_sitsec_kharejconfig_2()
            break
        elif server_type == "3":
            wireguardedit_sitsec_kharejconfig_3()
            break
        elif server_type == "4":
            wireguardedit_sitsec_kharejconfig_4()
            break
        elif server_type == "5":
            wireguardedit_sitsec_kharejconfig_5()
            break
        elif server_type == "0":
            os.system("clear")
            wireguardedit_noconjuction_sitsec_kharej1_5iran()
            break
        else:
            print("Invalid choice.")


def wireguardedit_noconjuction_sitsec_1iran_5kharej():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print(
        "\033[92m(   ) \033[93mWireguard + SIT + IPSEC \033[92m[1]IRAN Server\033[96m [5]Kharej Client\033[93m Edit Menu\033[0m"
    )
    print(
        '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
    )
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[92mKharej Client [1] Config\033[0m")
    print("2. \033[92mKharej Client [2] Config\033[0m")
    print("3. \033[92mKharej Client [3] Config\033[0m")
    print("4. \033[93mKharej Client [4] Config\033[0m")
    print("5. \033[92mKharej Client [5] Config\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    print("6. \033[96mIRAN Server Config\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    print("0.\033[97mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")
    while True:
        server_type = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if server_type == "1":
            wireguardudp_sitsec_kharej_client1()
            break
        elif server_type == "2":
            wireguardudp_sitsec_kharej_client2()
            break
        elif server_type == "3":
            wireguardudp_sitsec_kharej_client3()
            break
        elif server_type == "4":
            wireguardudp_sitsec_kharej_client4()
            break
        elif server_type == "5":
            wireguardudp_sitsec_kharej_client5()
            break
        elif server_type == "6":
            wireguardudpedit_sitsec_iran_server()
            break
        elif server_type == "0":
            os.system("clear")
            wireguardeditserver_sec_sit_mnu()
            break
        else:
            print("Invalid choice.")


def wireguardudpedit_sitsec_iran_server():
    os.system("clear")
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print(
        "\033[92m(   ) \033[93mWireguard + SIT + IPSEC \033[92m[1]IRAN Server\033[96m [5]Kharej Client\033[93m Edit Menu\033[0m"
    )
    print(
        '\033[92m "-"\033[93m═══════════════════════════════════════════════════\033[0m'
    )
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[92mIRAN Server Config [1] \033[0m")
    print("2. \033[92mIRAN Server Config [2]\033[0m")
    print("3. \033[93mIRAN Server Config [3]\033[0m")
    print("4. \033[92mIRAN Server Config [4]\033[0m")
    print("5. \033[92mIRAN Server Config [5]\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    print("0.\033[97mback to the previous menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")
    while True:
        server_type = input("\033[38;5;205mEnter your choice Please: \033[0m")
        if server_type == "1":
            wireguardedit_sitsec_iranconfig_1()
            break
        elif server_type == "2":
            wireguardedit_sitsec_iranconfig_2()
            break
        elif server_type == "3":
            wireguardedit_sitsec_iranconfig_3()
            break
        elif server_type == "4":
            wireguardedit_sitsec_iranconfig_4()
            break
        elif server_type == "5":
            wireguardedit_sitsec_iranconfig_5()
            break
        elif server_type == "0":
            os.system("clear")
            wireguardedit_noconjuction_sitsec_1iran_5kharej()
            break
        else:
            print("Invalid choice.")


def update_ipsec_conf_wireguard_server1(name, new_private_ip):
    try:
        with open(name, "r") as f:
            content = f.readlines()

        start_idx, end_idx = None, None
        for i, line in enumerate(content):
            if line.strip() == "conn wireguard_server1":
                start_idx = i
            elif start_idx is not None and line.strip().startswith("conn "):
                end_idx = i
                break

        if start_idx is None:
            print("\033[91m'conn wireguard_server1' section not found\033[0m")
            return

        if end_idx is None:
            end_idx = len(content)

        section = content[start_idx:end_idx]

        ip_type = (
            "ipv6"
            if isinstance(ipaddress.ip_address(new_private_ip), ipaddress.IPv6Address)
            else "ipv4"
        )

        if ip_type == "ipv6":
            subnet = "/64"
        else:
            subnet = "/32"

        ip_parts = (
            new_private_ip.split(".")
            if ip_type == "ipv4"
            else new_private_ip.split(":")
        )
        if new_private_ip.endswith(".2") or new_private_ip.endswith(":2"):
            ip_parts[-1] = "1"
        else:
            ip_parts[-1] = "2"
        counterpart_ip = ".".join(ip_parts) if ip_type == "ipv4" else ":".join(ip_parts)

        new_section = []
        for line in section:
            line = re.sub(
                r"leftsubnet=\S+", f"leftsubnet={new_private_ip}{subnet}", line
            )
            line = re.sub(r"leftid=\S+", f"leftid={new_private_ip}", line)
            line = re.sub(r"right=\S+", f"right={counterpart_ip}", line)
            line = re.sub(
                r"rightsubnet=\S+", f"rightsubnet={counterpart_ip}{subnet}", line
            )
            new_section.append(line)

        new_content = content[:start_idx] + new_section + content[end_idx:]

        with open(name, "w") as f:
            f.writelines(new_content)

        print(f"\033[92m'conn wireguard_server1' section updated successfully\033[0m")
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def update_ipsec_conf_wireguard_server2(name, new_private_ip):
    try:
        with open(name, "r") as f:
            content = f.readlines()

        start_idx, end_idx = None, None
        for i, line in enumerate(content):
            if line.strip() == "conn wireguard_server2":
                start_idx = i
            elif start_idx is not None and line.strip().startswith("conn "):
                end_idx = i
                break

        if start_idx is None:
            print("\033[91m'conn wireguard_server2' section not found\033[0m")
            return

        if end_idx is None:
            end_idx = len(content)

        section = content[start_idx:end_idx]

        ip_type = (
            "ipv6"
            if isinstance(ipaddress.ip_address(new_private_ip), ipaddress.IPv6Address)
            else "ipv4"
        )

        if ip_type == "ipv6":
            subnet = "/64"
        else:
            subnet = "/32"

        ip_parts = (
            new_private_ip.split(".")
            if ip_type == "ipv4"
            else new_private_ip.split(":")
        )
        if new_private_ip.endswith(".2") or new_private_ip.endswith(":2"):
            ip_parts[-1] = "1"
        else:
            ip_parts[-1] = "2"
        counterpart_ip = ".".join(ip_parts) if ip_type == "ipv4" else ":".join(ip_parts)

        new_section = []
        for line in section:
            line = re.sub(
                r"leftsubnet=\S+", f"leftsubnet={new_private_ip}{subnet}", line
            )
            line = re.sub(r"leftid=\S+", f"leftid={new_private_ip}", line)
            line = re.sub(r"right=\S+", f"right={counterpart_ip}", line)
            line = re.sub(
                r"rightsubnet=\S+", f"rightsubnet={counterpart_ip}{subnet}", line
            )
            new_section.append(line)

        new_content = content[:start_idx] + new_section + content[end_idx:]

        with open(name, "w") as f:
            f.writelines(new_content)

        print(f"\033[92m'conn wireguard_server2' section updated successfully\033[0m")
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def update_ipsec_conf_wireguard_server3(name, new_private_ip):
    try:
        with open(name, "r") as f:
            content = f.readlines()

        start_idx, end_idx = None, None
        for i, line in enumerate(content):
            if line.strip() == "conn wireguard_server3":
                start_idx = i
            elif start_idx is not None and line.strip().startswith("conn "):
                end_idx = i
                break

        if start_idx is None:
            print("\033[91m'conn wireguard_server3' section not found\033[0m")
            return

        if end_idx is None:
            end_idx = len(content)

        section = content[start_idx:end_idx]

        ip_type = (
            "ipv6"
            if isinstance(ipaddress.ip_address(new_private_ip), ipaddress.IPv6Address)
            else "ipv4"
        )

        if ip_type == "ipv6":
            subnet = "/64"
        else:
            subnet = "/32"

        ip_parts = (
            new_private_ip.split(".")
            if ip_type == "ipv4"
            else new_private_ip.split(":")
        )
        if new_private_ip.endswith(".2") or new_private_ip.endswith(":2"):
            ip_parts[-1] = "1"
        else:
            ip_parts[-1] = "2"
        counterpart_ip = ".".join(ip_parts) if ip_type == "ipv4" else ":".join(ip_parts)

        new_section = []
        for line in section:
            line = re.sub(
                r"leftsubnet=\S+", f"leftsubnet={new_private_ip}{subnet}", line
            )
            line = re.sub(r"leftid=\S+", f"leftid={new_private_ip}", line)
            line = re.sub(r"right=\S+", f"right={counterpart_ip}", line)
            line = re.sub(
                r"rightsubnet=\S+", f"rightsubnet={counterpart_ip}{subnet}", line
            )
            new_section.append(line)

        new_content = content[:start_idx] + new_section + content[end_idx:]

        with open(name, "w") as f:
            f.writelines(new_content)

        print(f"\033[92m'conn wireguard_server3' section updated successfully\033[0m")
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def update_ipsec_conf_wireguard_server4(name, new_private_ip):
    try:
        with open(name, "r") as f:
            content = f.readlines()

        start_idx, end_idx = None, None
        for i, line in enumerate(content):
            if line.strip() == "conn wireguard_server4":
                start_idx = i
            elif start_idx is not None and line.strip().startswith("conn "):
                end_idx = i
                break

        if start_idx is None:
            print("\033[91m'conn wireguard_server4' section not found\033[0m")
            return

        if end_idx is None:
            end_idx = len(content)

        section = content[start_idx:end_idx]

        ip_type = (
            "ipv6"
            if isinstance(ipaddress.ip_address(new_private_ip), ipaddress.IPv6Address)
            else "ipv4"
        )

        if ip_type == "ipv6":
            subnet = "/64"
        else:
            subnet = "/32"

        ip_parts = (
            new_private_ip.split(".")
            if ip_type == "ipv4"
            else new_private_ip.split(":")
        )
        if new_private_ip.endswith(".2") or new_private_ip.endswith(":2"):
            ip_parts[-1] = "1"
        else:
            ip_parts[-1] = "2"
        counterpart_ip = ".".join(ip_parts) if ip_type == "ipv4" else ":".join(ip_parts)

        new_section = []
        for line in section:
            line = re.sub(
                r"leftsubnet=\S+", f"leftsubnet={new_private_ip}{subnet}", line
            )
            line = re.sub(r"leftid=\S+", f"leftid={new_private_ip}", line)
            line = re.sub(r"right=\S+", f"right={counterpart_ip}", line)
            line = re.sub(
                r"rightsubnet=\S+", f"rightsubnet={counterpart_ip}{subnet}", line
            )
            new_section.append(line)

        new_content = content[:start_idx] + new_section + content[end_idx:]

        with open(name, "w") as f:
            f.writelines(new_content)

        print(f"\033[92m'conn wireguard_server4' section updated successfully\033[0m")
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def update_ipsec_conf_wireguard_server5(name, new_private_ip):
    try:
        with open(name, "r") as f:
            content = f.readlines()

        start_idx, end_idx = None, None
        for i, line in enumerate(content):
            if line.strip() == "conn wireguard_server5":
                start_idx = i
            elif start_idx is not None and line.strip().startswith("conn "):
                end_idx = i
                break

        if start_idx is None:
            print("\033[91m'conn wireguard_server5' section not found\033[0m")
            return

        if end_idx is None:
            end_idx = len(content)

        section = content[start_idx:end_idx]

        ip_type = (
            "ipv6"
            if isinstance(ipaddress.ip_address(new_private_ip), ipaddress.IPv6Address)
            else "ipv4"
        )

        if ip_type == "ipv6":
            subnet = "/64"
        else:
            subnet = "/32"

        ip_parts = (
            new_private_ip.split(".")
            if ip_type == "ipv4"
            else new_private_ip.split(":")
        )
        if new_private_ip.endswith(".2") or new_private_ip.endswith(":2"):
            ip_parts[-1] = "1"
        else:
            ip_parts[-1] = "2"
        counterpart_ip = ".".join(ip_parts) if ip_type == "ipv4" else ":".join(ip_parts)

        new_section = []
        for line in section:
            line = re.sub(
                r"leftsubnet=\S+", f"leftsubnet={new_private_ip}{subnet}", line
            )
            line = re.sub(r"leftid=\S+", f"leftid={new_private_ip}", line)
            line = re.sub(r"right=\S+", f"right={counterpart_ip}", line)
            line = re.sub(
                r"rightsubnet=\S+", f"rightsubnet={counterpart_ip}{subnet}", line
            )
            new_section.append(line)

        new_content = content[:start_idx] + new_section + content[end_idx:]

        with open(name, "w") as f:
            f.writelines(new_content)

        print(f"\033[92m'conn wireguard_server5' section updated successfully\033[0m")
    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mout of ordinary error: {e}\033[0m")


def save_wireguardconfig_sitwire1sec(file_path, new_config):
    try:
        with open(file_path, "r") as f:
            config = f.read()

        listen_port_pattern = r"ListenPort\s*=\s*\d+"
        endpoint_pattern = r"Endpoint\s*=\s*([^\s]+):\d+"
        address_pattern = r"Address\s*=\s*[^\s]+"
        allowed_ips_pattern = r"AllowedIPs\s*=\s*[^\s]+"

        new_config_content = re.sub(
            listen_port_pattern, f'ListenPort = {new_config["ListenPort"]}', config
        )
        new_config_content = re.sub(
            address_pattern, f'Address = {new_config["Address"]}', new_config_content
        )
        new_config_content = re.sub(
            allowed_ips_pattern,
            f'AllowedIPs = {new_config["AllowedIPs"]}',
            new_config_content,
        )

        def replace_endpoint(match):
            endpoint_ip = new_config["EndpointIP"]
            return f'Endpoint = {endpoint_ip}:{new_config["ListenPort"]}'

        new_config_content = re.sub(
            endpoint_pattern, replace_endpoint, new_config_content
        )

        with open(file_path, "w") as f:
            f.write(new_config_content)

        subprocess.run(["systemctl", "daemon-reload"], check=True)

        services_to_restart = [
            "strong-azumi1",
            "wireguardping_1.service",
        ]

        wg_quick_interface = "/etc/wireguard/wireserver1.conf"
        wg_quick_down = subprocess.run(
            ["wg-quick", "down", wg_quick_interface],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
        )

        if wg_quick_down.returncode == 0:
            subprocess.run(["wg-quick", "up", wg_quick_interface], check=True)
            display_checkmark(
                f"\033[92mInterface {wg_quick_interface} brought down and up successfully!\033[0m"
            )
        else:
            print(
                f"\033[93mFailed to bring down interface {wg_quick_interface}.\033[0m"
            )

        for service_name in services_to_restart:
            service_status = subprocess.run(
                ["systemctl", "is-active", service_name],
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
            )

            if service_status.returncode == 0:
                subprocess.run(["systemctl", "restart", service_name], check=True)
                display_checkmark(
                    f"\033[92mService {service_name} restarted successfully!\033[0m"
                )
            else:
                print(
                    f"\033[93mService {service_name} doesn't exist or is inactive.\033[0m"
                )

        display_checkmark(f"\033[92mConfiguration updated successfully!\033[0m")

    except FileNotFoundError:
        print(f"\033[91mfile {file_path} not found.\033[0m")
    except subprocess.CalledProcessError as e:
        print(f"\033[91merror in managing services: {e}\033[0m")
    except Exception as e:
        print(f"\033[91merror in saving the config: {e}\033[0m")


def save_wireguardconfig_sitwire2sec(file_path, new_config):
    try:
        with open(file_path, "r") as f:
            config = f.read()

        listen_port_pattern = r"ListenPort\s*=\s*\d+"
        endpoint_pattern = r"Endpoint\s*=\s*([^\s]+):\d+"
        address_pattern = r"Address\s*=\s*[^\s]+"
        allowed_ips_pattern = r"AllowedIPs\s*=\s*[^\s]+"

        new_config_content = re.sub(
            listen_port_pattern, f'ListenPort = {new_config["ListenPort"]}', config
        )
        new_config_content = re.sub(
            address_pattern, f'Address = {new_config["Address"]}', new_config_content
        )
        new_config_content = re.sub(
            allowed_ips_pattern,
            f'AllowedIPs = {new_config["AllowedIPs"]}',
            new_config_content,
        )

        def replace_endpoint(match):
            endpoint_ip = new_config["EndpointIP"]
            return f'Endpoint = {endpoint_ip}:{new_config["ListenPort"]}'

        new_config_content = re.sub(
            endpoint_pattern, replace_endpoint, new_config_content
        )

        with open(file_path, "w") as f:
            f.write(new_config_content)

        subprocess.run(["systemctl", "daemon-reload"], check=True)

        services_to_restart = [
            "strong-azumi1",
            "wireguardping_2.service",
        ]

        wg_quick_interface = "/etc/wireguard/wireserver2.conf"
        wg_quick_down = subprocess.run(
            ["wg-quick", "down", wg_quick_interface],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
        )

        if wg_quick_down.returncode == 0:
            subprocess.run(["wg-quick", "up", wg_quick_interface], check=True)
            display_checkmark(
                f"\033[92mInterface {wg_quick_interface} brought down and up successfully!\033[0m"
            )
        else:
            print(
                f"\033[93mFailed to bring down interface {wg_quick_interface}.\033[0m"
            )

        for service_name in services_to_restart:
            service_status = subprocess.run(
                ["systemctl", "is-active", service_name],
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
            )

            if service_status.returncode == 0:
                subprocess.run(["systemctl", "restart", service_name], check=True)
                display_checkmark(
                    f"\033[92mService {service_name} restarted successfully!\033[0m"
                )
            else:
                print(
                    f"\033[93mService {service_name} doesn't exist or is inactive.\033[0m"
                )

        display_checkmark(f"\033[92mConfiguration updated successfully!\033[0m")

    except FileNotFoundError:
        print(f"\033[91mfile {file_path} not found.\033[0m")
    except subprocess.CalledProcessError as e:
        print(f"\033[91merror in managing services: {e}\033[0m")
    except Exception as e:
        print(f"\033[91merror in saving the config: {e}\033[0m")


def save_wireguardconfig_sitwire3sec(file_path, new_config):
    try:
        with open(file_path, "r") as f:
            config = f.read()

        listen_port_pattern = r"ListenPort\s*=\s*\d+"
        endpoint_pattern = r"Endpoint\s*=\s*([^\s]+):\d+"
        address_pattern = r"Address\s*=\s*[^\s]+"
        allowed_ips_pattern = r"AllowedIPs\s*=\s*[^\s]+"

        new_config_content = re.sub(
            listen_port_pattern, f'ListenPort = {new_config["ListenPort"]}', config
        )
        new_config_content = re.sub(
            address_pattern, f'Address = {new_config["Address"]}', new_config_content
        )
        new_config_content = re.sub(
            allowed_ips_pattern,
            f'AllowedIPs = {new_config["AllowedIPs"]}',
            new_config_content,
        )

        def replace_endpoint(match):
            endpoint_ip = new_config["EndpointIP"]
            return f'Endpoint = {endpoint_ip}:{new_config["ListenPort"]}'

        new_config_content = re.sub(
            endpoint_pattern, replace_endpoint, new_config_content
        )

        with open(file_path, "w") as f:
            f.write(new_config_content)

        subprocess.run(["systemctl", "daemon-reload"], check=True)

        services_to_restart = [
            "strong-azumi1",
            "wireguardping_3.service",
        ]

        wg_quick_interface = "/etc/wireguard/wireserver3.conf"
        wg_quick_down = subprocess.run(
            ["wg-quick", "down", wg_quick_interface],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
        )

        if wg_quick_down.returncode == 0:
            subprocess.run(["wg-quick", "up", wg_quick_interface], check=True)
            display_checkmark(
                f"\033[92mInterface {wg_quick_interface} brought down and up successfully!\033[0m"
            )
        else:
            print(
                f"\033[93mFailed to bring down interface {wg_quick_interface}.\033[0m"
            )

        for service_name in services_to_restart:
            service_status = subprocess.run(
                ["systemctl", "is-active", service_name],
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
            )

            if service_status.returncode == 0:
                subprocess.run(["systemctl", "restart", service_name], check=True)
                display_checkmark(
                    f"\033[92mService {service_name} restarted successfully!\033[0m"
                )
            else:
                print(
                    f"\033[93mService {service_name} doesn't exist or is inactive.\033[0m"
                )

        display_checkmark(f"\033[92mConfiguration updated successfully!\033[0m")

    except FileNotFoundError:
        print(f"\033[91mfile {file_path} not found.\033[0m")
    except subprocess.CalledProcessError as e:
        print(f"\033[91merror in managing services: {e}\033[0m")
    except Exception as e:
        print(f"\033[91merror in saving the config: {e}\033[0m")


def save_wireguardconfig_sitwire4sec(file_path, new_config):
    try:
        with open(file_path, "r") as f:
            config = f.read()

        listen_port_pattern = r"ListenPort\s*=\s*\d+"
        endpoint_pattern = r"Endpoint\s*=\s*([^\s]+):\d+"
        address_pattern = r"Address\s*=\s*[^\s]+"
        allowed_ips_pattern = r"AllowedIPs\s*=\s*[^\s]+"

        new_config_content = re.sub(
            listen_port_pattern, f'ListenPort = {new_config["ListenPort"]}', config
        )
        new_config_content = re.sub(
            address_pattern, f'Address = {new_config["Address"]}', new_config_content
        )
        new_config_content = re.sub(
            allowed_ips_pattern,
            f'AllowedIPs = {new_config["AllowedIPs"]}',
            new_config_content,
        )

        def replace_endpoint(match):
            endpoint_ip = new_config["EndpointIP"]
            return f'Endpoint = {endpoint_ip}:{new_config["ListenPort"]}'

        new_config_content = re.sub(
            endpoint_pattern, replace_endpoint, new_config_content
        )

        with open(file_path, "w") as f:
            f.write(new_config_content)

        subprocess.run(["systemctl", "daemon-reload"], check=True)

        services_to_restart = [
            "strong-azumi1",
            "wireguardping_4.service",
        ]

        wg_quick_interface = "/etc/wireguard/wireserver4.conf"
        wg_quick_down = subprocess.run(
            ["wg-quick", "down", wg_quick_interface],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
        )

        if wg_quick_down.returncode == 0:
            subprocess.run(["wg-quick", "up", wg_quick_interface], check=True)
            display_checkmark(
                f"\033[92mInterface {wg_quick_interface} brought down and up successfully!\033[0m"
            )
        else:
            print(
                f"\033[93mFailed to bring down interface {wg_quick_interface}.\033[0m"
            )

        for service_name in services_to_restart:
            service_status = subprocess.run(
                ["systemctl", "is-active", service_name],
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
            )

            if service_status.returncode == 0:
                subprocess.run(["systemctl", "restart", service_name], check=True)
                display_checkmark(
                    f"\033[92mService {service_name} restarted successfully!\033[0m"
                )
            else:
                print(
                    f"\033[93mService {service_name} doesn't exist or is inactive.\033[0m"
                )

        display_checkmark(f"\033[92mConfiguration updated successfully!\033[0m")

    except FileNotFoundError:
        print(f"\033[91mfile {file_path} not found.\033[0m")
    except subprocess.CalledProcessError as e:
        print(f"\033[91merror in managing services: {e}\033[0m")
    except Exception as e:
        print(f"\033[91merror in saving the config: {e}\033[0m")


def save_wireguardconfig_sitwire5sec(file_path, new_config):
    try:
        with open(file_path, "r") as f:
            config = f.read()

        listen_port_pattern = r"ListenPort\s*=\s*\d+"
        endpoint_pattern = r"Endpoint\s*=\s*([^\s]+):\d+"
        address_pattern = r"Address\s*=\s*[^\s]+"
        allowed_ips_pattern = r"AllowedIPs\s*=\s*[^\s]+"

        new_config_content = re.sub(
            listen_port_pattern, f'ListenPort = {new_config["ListenPort"]}', config
        )
        new_config_content = re.sub(
            address_pattern, f'Address = {new_config["Address"]}', new_config_content
        )
        new_config_content = re.sub(
            allowed_ips_pattern,
            f'AllowedIPs = {new_config["AllowedIPs"]}',
            new_config_content,
        )

        def replace_endpoint(match):
            endpoint_ip = new_config["EndpointIP"]
            return f'Endpoint = {endpoint_ip}:{new_config["ListenPort"]}'

        new_config_content = re.sub(
            endpoint_pattern, replace_endpoint, new_config_content
        )

        with open(file_path, "w") as f:
            f.write(new_config_content)

        subprocess.run(["systemctl", "daemon-reload"], check=True)

        services_to_restart = [
            "strong-azumi1",
            "wireguardping_5.service",
        ]

        wg_quick_interface = "/etc/wireguard/wireserver5.conf"
        wg_quick_down = subprocess.run(
            ["wg-quick", "down", wg_quick_interface],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
        )

        if wg_quick_down.returncode == 0:
            subprocess.run(["wg-quick", "up", wg_quick_interface], check=True)
            display_checkmark(
                f"\033[92mInterface {wg_quick_interface} brought down and up successfully!\033[0m"
            )
        else:
            print(
                f"\033[93mFailed to bring down interface {wg_quick_interface}.\033[0m"
            )

        for service_name in services_to_restart:
            service_status = subprocess.run(
                ["systemctl", "is-active", service_name],
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
            )

            if service_status.returncode == 0:
                subprocess.run(["systemctl", "restart", service_name], check=True)
                display_checkmark(
                    f"\033[92mService {service_name} restarted successfully!\033[0m"
                )
            else:
                print(
                    f"\033[93mService {service_name} doesn't exist or is inactive.\033[0m"
                )

        display_checkmark(f"\033[92mConfiguration updated successfully!\033[0m")

    except FileNotFoundError:
        print(f"\033[91mfile {file_path} not found.\033[0m")
    except subprocess.CalledProcessError as e:
        print(f"\033[91merror in managing services: {e}\033[0m")
    except Exception as e:
        print(f"\033[91merror in saving the config: {e}\033[0m")


def save_wireguardconfig_sitwiresec_client(file_path, new_config):
    try:
        with open(file_path, "r") as f:
            config = f.read()

        listen_port_pattern = r"ListenPort\s*=\s*\d+"
        endpoint_pattern = r"Endpoint\s*=\s*([^\s]+):\d+"
        address_pattern = r"Address\s*=\s*[^\s]+"
        allowed_ips_pattern = r"AllowedIPs\s*=\s*[^\s]+"

        new_config_content = re.sub(
            listen_port_pattern, f'ListenPort = {new_config["ListenPort"]}', config
        )
        new_config_content = re.sub(
            address_pattern, f'Address = {new_config["Address"]}', new_config_content
        )
        new_config_content = re.sub(
            allowed_ips_pattern,
            f'AllowedIPs = {new_config["AllowedIPs"]}',
            new_config_content,
        )

        def replace_endpoint(match):
            endpoint_ip = new_config["EndpointIP"]
            return f'Endpoint = {endpoint_ip}:{new_config["ListenPort"]}'

        new_config_content = re.sub(
            endpoint_pattern, replace_endpoint, new_config_content
        )

        with open(file_path, "w") as f:
            f.write(new_config_content)

        subprocess.run(["systemctl", "daemon-reload"], check=True)

        services_to_restart = [
            "strong-azumi1",
            "wireguardping.service",
        ]

        wg_quick_interface = "/etc/wireguard/wireclient.conf"
        wg_quick_down = subprocess.run(
            ["wg-quick", "down", wg_quick_interface],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
        )

        if wg_quick_down.returncode == 0:
            subprocess.run(["wg-quick", "up", wg_quick_interface], check=True)
            display_checkmark(
                f"\033[92mInterface {wg_quick_interface} brought down and up successfully!\033[0m"
            )
        else:
            print(
                f"\033[93mFailed to bring down interface {wg_quick_interface}.\033[0m"
            )

        for service_name in services_to_restart:
            service_status = subprocess.run(
                ["systemctl", "is-active", service_name],
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
            )

            if service_status.returncode == 0:
                subprocess.run(["systemctl", "restart", service_name], check=True)
                display_checkmark(
                    f"\033[92mService {service_name} restarted successfully!\033[0m"
                )
            else:
                print(
                    f"\033[93mService {service_name} doesn't exist or is inactive.\033[0m"
                )

        display_checkmark(f"\033[92mConfiguration updated successfully!\033[0m")

    except FileNotFoundError:
        print(f"\033[91mfile {file_path} not found.\033[0m")
    except subprocess.CalledProcessError as e:
        print(f"\033[91merror in managing services: {e}\033[0m")
    except Exception as e:
        print(f"\033[91merror in saving the config: {e}\033[0m")


def update_ipsec_conf_wireguard_46sec(name, new_private_ip):
    try:
        with open(name, "r") as f:
            content = f.read()

        ip_obj = ipaddress.ip_address(new_private_ip)
        if isinstance(ip_obj, ipaddress.IPv6Address):
            ip_parts = new_private_ip.split(":")
            subnet_suffix = "/64"
        else:
            ip_parts = new_private_ip.split(".")
            subnet_suffix = "/32"

        ip_parts[-1] = "1" if ip_parts[-1].endswith("2") else "2"
        counterpart_ip = (
            ":".join(ip_parts)
            if isinstance(ip_obj, ipaddress.IPv6Address)
            else ".".join(ip_parts)
        )

        new_content = re.sub(
            r"leftsubnet=\S+", f"leftsubnet={new_private_ip}{subnet_suffix}", content
        )
        new_content = re.sub(r"leftid=\S+", f"leftid={new_private_ip}", new_content)
        new_content = re.sub(r"right=\S+", f"right={counterpart_ip}", new_content)
        new_content = re.sub(
            r"rightsubnet=\S+",
            f"rightsubnet={counterpart_ip}{subnet_suffix}",
            new_content,
        )

        with open(name, "w") as f:
            f.write(new_content)

        print("\033[92mIPsec configuration updated successfully!\033[0m")

    except FileNotFoundError:
        print("\033[91mfile not found\033[0m")
    except Exception as e:
        print(f"\033[91mOut of ordinary error: {e}\033[0m")


def wireguardedit_sitsec_iranconfig_1():
    local_ip_private = local_ip("/etc/private1.sh")
    remote_ip_private = remote_ip("/etc/private1.sh")
    private_ip_private = private_ip1("/etc/private1.sh")
    config_path = "/etc/wireguard/wireserver1.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_sitwire_privateiran1(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )
        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mPrivate[SIT] + Wireguard\033[93m IRAN Server \033[96mConfig [1]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN Server\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mKharej Client [1] \033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6. \033[93mChange WireGuard Endpoint IP\033[0m")
        print("7.\033[94m Change IPsec Secret Key\033[0m")
        print("8. \033[92mSave All Changes\033[0m")
        print("0. \033[97mback to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Client [1]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec1(opposite_ip)
                update_ipsec_conf_wireguard_server1("/etc/ipsec1.conf", new_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "7":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secret Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")
        elif choice == "6":
            new_endpoint = input(
                "\033[93mEnter New \033[92mWireGuard Endpoint\033[93m Address:\033[0m "
            )
            if new_endpoint:
                try:
                    endpoint_ip, new_port = new_endpoint.rsplit(":", 1)
                    if endpoint.startswith(endpoint_ip):
                        endpoint = f"{endpoint_ip}:{new_port}"
                    else:
                        print(
                            "\033[97mSince Endpoint IP doesn't match with the original one, only port will be updated\033[0m"
                        )
                except ValueError:
                    print("\033[91minvalid Endpoint format\033[0m")
            else:
                print("\033[91minvalid Endpoint Address!\033[0m")
        elif choice == "8":
            save_stuff_sit1(private_ip_private, local_ip_private, remote_ip_private)
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwire1sec(config_path, new_config)
            update_ipsec_ip_multi(address_no_subnet)
            break
        elif choice == "0":
            clear()
            wireguardedit_noconjuction_sitsec_1iran_5kharej()
            break
        else:
            print("Please select a valid option.")


def wireguardedit_sitsec_iranconfig_2():
    local_ip_private = local_ip("/etc/private2.sh")
    remote_ip_private = remote_ip("/etc/private2.sh")
    private_ip_private = private_ip1("/etc/private2.sh")
    config_path = "/etc/wireguard/wireserver2.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_sitwire_privateiran2(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )
        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mPrivate[SIT] + Wireguard\033[93m IRAN Server \033[96mConfig [2]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN Server\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mKharej Client [2] \033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6. \033[93mChange WireGuard Endpoint IP\033[0m")
        print("7.\033[94m Change IPsec Secret Key\033[0m")
        print("8. \033[92mSave All Changes\033[0m")
        print("0. \033[97mback to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Client [2]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec2(opposite_ip)
                update_ipsec_conf_wireguard_server2("/etc/ipsec1.conf", new_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "7":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secret Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")
        elif choice == "6":
            new_endpoint = input(
                "\033[93mEnter New \033[92mWireGuard Endpoint\033[93m Address:\033[0m "
            )
            if new_endpoint:
                try:
                    endpoint_ip, new_port = new_endpoint.rsplit(":", 1)
                    if endpoint.startswith(endpoint_ip):
                        endpoint = f"{endpoint_ip}:{new_port}"
                    else:
                        print(
                            "\033[97mSince Endpoint IP doesn't match with the original one, only port will be updated\033[0m"
                        )
                except ValueError:
                    print("\033[91minvalid Endpoint format\033[0m")
            else:
                print("\033[91minvalid Endpoint Address!\033[0m")
        elif choice == "8":
            save_stuff_sit2(private_ip_private, local_ip_private, remote_ip_private)
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwire2sec(config_path, new_config)
            update_ipsec_ip_multi2(address_no_subnet)
            break
        elif choice == "0":
            clear()
            wireguardedit_noconjuction_sitsec_1iran_5kharej()
            break
        else:
            print("Please select a valid option.")


def wireguardedit_sitsec_iranconfig_3():
    local_ip_private = local_ip("/etc/private3.sh")
    remote_ip_private = remote_ip("/etc/private3.sh")
    private_ip_private = private_ip1("/etc/private3.sh")
    config_path = "/etc/wireguard/wireserver3.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_sitwire_privateiran3(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )
        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mPrivate[SIT] + Wireguard\033[93m IRAN Server \033[96mConfig [3]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN Server\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mKharej Client [3] \033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6. \033[93mChange WireGuard Endpoint IP\033[0m")
        print("7.\033[94m Change IPsec Secret Key\033[0m")
        print("8. \033[92mSave All Changes\033[0m")
        print("0. \033[97mback to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Client [3]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec3(opposite_ip)
                update_ipsec_conf_wireguard_server3("/etc/ipsec1.conf", new_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "7":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secret Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")
        elif choice == "6":
            new_endpoint = input(
                "\033[93mEnter New \033[92mWireGuard Endpoint\033[93m Address:\033[0m "
            )
            if new_endpoint:
                try:
                    endpoint_ip, new_port = new_endpoint.rsplit(":", 1)
                    if endpoint.startswith(endpoint_ip):
                        endpoint = f"{endpoint_ip}:{new_port}"
                    else:
                        print(
                            "\033[97mSince Endpoint IP doesn't match with the original one, only port will be updated\033[0m"
                        )
                except ValueError:
                    print("\033[91minvalid Endpoint format\033[0m")
            else:
                print("\033[91minvalid Endpoint Address!\033[0m")
        elif choice == "8":
            save_stuff_sit3(private_ip_private, local_ip_private, remote_ip_private)
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwire3sec(config_path, new_config)
            update_ipsec_ip_multi3(address_no_subnet)
            break
        elif choice == "0":
            clear()
            wireguardedit_noconjuction_sitsec_1iran_5kharej()
            break
        else:
            print("Please select a valid option.")


def wireguardedit_sitsec_iranconfig_4():
    local_ip_private = local_ip("/etc/private4.sh")
    remote_ip_private = remote_ip("/etc/private4.sh")
    private_ip_private = private_ip1("/etc/private4.sh")
    config_path = "/etc/wireguard/wireserver4.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_sitwire_privateiran4(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )
        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mPrivate[SIT] + Wireguard\033[93m IRAN Server \033[96mConfig [4]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN Server\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mKharej Client [4] \033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6. \033[93mChange WireGuard Endpoint IP\033[0m")
        print("7.\033[94m Change IPsec Secret Key\033[0m")
        print("8. \033[92mSave All Changes\033[0m")
        print("0. \033[97mback to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Client [4]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec4(opposite_ip)
                update_ipsec_conf_wireguard_server4("/etc/ipsec1.conf", new_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "7":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secret Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")
        elif choice == "6":
            new_endpoint = input(
                "\033[93mEnter New \033[92mWireGuard Endpoint\033[93m Address:\033[0m "
            )
            if new_endpoint:
                try:
                    endpoint_ip, new_port = new_endpoint.rsplit(":", 1)
                    if endpoint.startswith(endpoint_ip):
                        endpoint = f"{endpoint_ip}:{new_port}"
                    else:
                        print(
                            "\033[97mSince Endpoint IP doesn't match with the original one, only port will be updated\033[0m"
                        )
                except ValueError:
                    print("\033[91minvalid Endpoint format\033[0m")
            else:
                print("\033[91minvalid Endpoint Address!\033[0m")
        elif choice == "8":
            save_stuff_sit4(private_ip_private, local_ip_private, remote_ip_private)
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwire4sec(config_path, new_config)
            update_ipsec_ip_multi4(address_no_subnet)
            break
        elif choice == "0":
            clear()
            wireguardedit_noconjuction_sitsec_1iran_5kharej()
            break
        else:
            print("Please select a valid option.")


def wireguardedit_sitsec_iranconfig_5():
    local_ip_private = local_ip("/etc/private5.sh")
    remote_ip_private = remote_ip("/etc/private5.sh")
    private_ip_private = private_ip1("/etc/private5.sh")
    config_path = "/etc/wireguard/wireserver5.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_sitwire_privateiran5(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )
        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mPrivate[SIT] + Wireguard\033[93m IRAN Server \033[96mConfig [5]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN Server\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mKharej Client [5] \033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6. \033[93mChange WireGuard Endpoint IP\033[0m")
        print("7.\033[94m Change IPsec Secret Key\033[0m")
        print("8. \033[92mSave All Changes\033[0m")
        print("0. \033[97mback to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Client [5]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec5(opposite_ip)
                update_ipsec_conf_wireguard_server5("/etc/ipsec1.conf", new_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "7":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secret Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")
        elif choice == "6":
            new_endpoint = input(
                "\033[93mEnter New \033[92mWireGuard Endpoint\033[93m Address:\033[0m "
            )
            if new_endpoint:
                try:
                    endpoint_ip, new_port = new_endpoint.rsplit(":", 1)
                    if endpoint.startswith(endpoint_ip):
                        endpoint = f"{endpoint_ip}:{new_port}"
                    else:
                        print(
                            "\033[97mSince Endpoint IP doesn't match with the original one, only port will be updated\033[0m"
                        )
                except ValueError:
                    print("\033[91minvalid Endpoint format\033[0m")
            else:
                print("\033[91minvalid Endpoint Address!\033[0m")
        elif choice == "8":
            save_stuff_sit5(private_ip_private, local_ip_private, remote_ip_private)
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwire5sec(config_path, new_config)
            update_ipsec_ip_multi5(address_no_subnet)
            break
        elif choice == "0":
            clear()
            wireguardedit_noconjuction_sitsec_1iran_5kharej()
            break
        else:
            print("Please select a valid option.")


def wireguardudp_sitsec_kharej_client1():
    local_ip_private = local_ip("/etc/private1.sh")
    remote_ip_private = remote_ip("/etc/private1.sh")
    private_ip_private = private_ip1("/etc/private1.sh")
    config_path = "/etc/wireguard/wireclient.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_sitwire_privatekharej1(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )
        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mPrivate[SIT] + Wireguard\033[93m Kharej Client \033[96m[1]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej Client [1]\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mIRAN Server \033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6. \033[93mChange WireGuard Endpoint IP\033[0m")
        print("7.\033[94m Change IPsec Secret Key\033[0m")
        print("8. \033[92mSave All Changes\033[0m")
        print("0. \033[97mback to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Client [1]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec_client(opposite_ip)
                update_ipsec_conf_wireguard_46sec("/etc/ipsec1.conf", new_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "7":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secret Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")
        elif choice == "6":
            new_endpoint = input(
                "\033[93mEnter New \033[92mWireGuard Endpoint\033[93m Address:\033[0m "
            )
            if new_endpoint:
                try:
                    endpoint_ip, new_port = new_endpoint.rsplit(":", 1)
                    if endpoint.startswith(endpoint_ip):
                        endpoint = f"{endpoint_ip}:{new_port}"
                    else:
                        print(
                            "\033[97mSince Endpoint IP doesn't match with the original one, only port will be updated\033[0m"
                        )
                except ValueError:
                    print("\033[91minvalid Endpoint format\033[0m")
            else:
                print("\033[91minvalid Endpoint Address!\033[0m")
        elif choice == "8":
            save_stuff_sit1(private_ip_private, local_ip_private, remote_ip_private)
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwiresec_client(config_path, new_config)
            update_ipsec_ip(address_no_subnet)
            break
        elif choice == "0":
            clear()
            wireguardedit_noconjuction_sitsec_1iran_5kharej()
            break
        else:
            print("Please select a valid option.")


def wireguardudp_sitsec_kharej_client2():
    local_ip_private = local_ip("/etc/private2.sh")
    remote_ip_private = remote_ip("/etc/private2.sh")
    private_ip_private = private_ip1("/etc/private2.sh")
    config_path = "/etc/wireguard/wireclient.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_sitwire_privatekharej2(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )
        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mPrivate[SIT] + Wireguard\033[93m Kharej Client \033[96m[2]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej Client [2]\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mIRAN Server \033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6. \033[93mChange WireGuard Endpoint IP\033[0m")
        print("7.\033[94m Change IPsec Secret Key\033[0m")
        print("8. \033[92mSave All Changes\033[0m")
        print("0. \033[97mback to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Client [2]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec_client(opposite_ip)
                update_ipsec_conf_wireguard_46sec("/etc/ipsec1.conf", new_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "7":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secret Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")
        elif choice == "6":
            new_endpoint = input(
                "\033[93mEnter New \033[92mWireGuard Endpoint\033[93m Address:\033[0m "
            )
            if new_endpoint:
                try:
                    endpoint_ip, new_port = new_endpoint.rsplit(":", 1)
                    if endpoint.startswith(endpoint_ip):
                        endpoint = f"{endpoint_ip}:{new_port}"
                    else:
                        print(
                            "\033[97mSince Endpoint IP doesn't match with the original one, only port will be updated\033[0m"
                        )
                except ValueError:
                    print("\033[91minvalid Endpoint format\033[0m")
            else:
                print("\033[91minvalid Endpoint Address!\033[0m")
        elif choice == "8":
            save_stuff_sit2(private_ip_private, local_ip_private, remote_ip_private)
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwiresec_client(config_path, new_config)
            update_ipsec_ip(address_no_subnet)
            break
        elif choice == "0":
            clear()
            wireguardedit_noconjuction_sitsec_1iran_5kharej()
            break
        else:
            print("Please select a valid option.")


def wireguardudp_sitsec_kharej_client3():
    local_ip_private = local_ip("/etc/private3.sh")
    remote_ip_private = remote_ip("/etc/private3.sh")
    private_ip_private = private_ip1("/etc/private3.sh")
    config_path = "/etc/wireguard/wireclient.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_sitwire_privatekharej3(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )
        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mPrivate[SIT] + Wireguard\033[93m Kharej Client \033[96m[3]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej Client [3]\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mIRAN Server \033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6. \033[93mChange WireGuard Endpoint IP\033[0m")
        print("7.\033[94m Change IPsec Secret Key\033[0m")
        print("8. \033[92mSave All Changes\033[0m")
        print("0. \033[97mback to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Client [3]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec_client(opposite_ip)
                update_ipsec_conf_wireguard_46sec("/etc/ipsec1.conf", new_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "7":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secret Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")
        elif choice == "6":
            new_endpoint = input(
                "\033[93mEnter New \033[92mWireGuard Endpoint\033[93m Address:\033[0m "
            )
            if new_endpoint:
                try:
                    endpoint_ip, new_port = new_endpoint.rsplit(":", 1)
                    if endpoint.startswith(endpoint_ip):
                        endpoint = f"{endpoint_ip}:{new_port}"
                    else:
                        print(
                            "\033[97mSince Endpoint IP doesn't match with the original one, only port will be updated\033[0m"
                        )
                except ValueError:
                    print("\033[91minvalid Endpoint format\033[0m")
            else:
                print("\033[91minvalid Endpoint Address!\033[0m")
        elif choice == "8":
            save_stuff_sit3(private_ip_private, local_ip_private, remote_ip_private)
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwiresec_client(config_path, new_config)
            update_ipsec_ip(address_no_subnet)
            break
        elif choice == "0":
            clear()
            wireguardedit_noconjuction_sitsec_1iran_5kharej()
            break
        else:
            print("Please select a valid option.")


def wireguardudp_sitsec_kharej_client4():
    local_ip_private = local_ip("/etc/private4.sh")
    remote_ip_private = remote_ip("/etc/private4.sh")
    private_ip_private = private_ip1("/etc/private4.sh")
    config_path = "/etc/wireguard/wireclient.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_sitwire_privatekharej4(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )
        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mPrivate[SIT] + Wireguard\033[93m Kharej Client \033[96m[4]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej Client [4]\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mIRAN Server \033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6. \033[93mChange WireGuard Endpoint IP\033[0m")
        print("7.\033[94m Change IPsec Secret Key\033[0m")
        print("8. \033[92mSave All Changes\033[0m")
        print("0. \033[97mback to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Client [4]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec_client(opposite_ip)
                update_ipsec_conf_wireguard_46sec("/etc/ipsec1.conf", new_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "7":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secret Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")
        elif choice == "6":
            new_endpoint = input(
                "\033[93mEnter New \033[92mWireGuard Endpoint\033[93m Address:\033[0m "
            )
            if new_endpoint:
                try:
                    endpoint_ip, new_port = new_endpoint.rsplit(":", 1)
                    if endpoint.startswith(endpoint_ip):
                        endpoint = f"{endpoint_ip}:{new_port}"
                    else:
                        print(
                            "\033[97mSince Endpoint IP doesn't match with the original one, only port will be updated\033[0m"
                        )
                except ValueError:
                    print("\033[91minvalid Endpoint format\033[0m")
            else:
                print("\033[91minvalid Endpoint Address!\033[0m")
        elif choice == "8":
            save_stuff_sit4(private_ip_private, local_ip_private, remote_ip_private)
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwiresec_client(config_path, new_config)
            update_ipsec_ip(address_no_subnet)
            break
        elif choice == "0":
            clear()
            wireguardedit_noconjuction_sitsec_1iran_5kharej()
            break
        else:
            print("Please select a valid option.")


def wireguardudp_sitsec_kharej_client5():
    local_ip_private = local_ip("/etc/private5.sh")
    remote_ip_private = remote_ip("/etc/private5.sh")
    private_ip_private = private_ip1("/etc/private5.sh")
    config_path = "/etc/wireguard/wireclient.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_sitwire_privatekharej5(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )
        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mPrivate[SIT] + Wireguard\033[93m Kharej Client \033[96m[2]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej Client [5]\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mIRAN Server \033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6. \033[93mChange WireGuard Endpoint IP\033[0m")
        print("7.\033[94m Change IPsec Secret Key\033[0m")
        print("8. \033[92mSave All Changes\033[0m")
        print("0. \033[97mback to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Client [5]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec_client(opposite_ip)
                update_ipsec_conf_wireguard_46sec("/etc/ipsec1.conf", new_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "7":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secret Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")
        elif choice == "6":
            new_endpoint = input(
                "\033[93mEnter New \033[92mWireGuard Endpoint\033[93m Address:\033[0m "
            )
            if new_endpoint:
                try:
                    endpoint_ip, new_port = new_endpoint.rsplit(":", 1)
                    if endpoint.startswith(endpoint_ip):
                        endpoint = f"{endpoint_ip}:{new_port}"
                    else:
                        print(
                            "\033[97mSince Endpoint IP doesn't match with the original one, only port will be updated\033[0m"
                        )
                except ValueError:
                    print("\033[91minvalid Endpoint format\033[0m")
            else:
                print("\033[91minvalid Endpoint Address!\033[0m")
        elif choice == "8":
            save_stuff_sit5(private_ip_private, local_ip_private, remote_ip_private)
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwiresec_client(config_path, new_config)
            update_ipsec_ip(address_no_subnet)
            break
        elif choice == "0":
            clear()
            wireguardedit_noconjuction_sitsec_1iran_5kharej()
            break
        else:
            print("Please select a valid option.")


# 1 kharej server 5 iran client


def wireguardedit_sitsec_kharejconfig_1():
    local_ip_private = local_ip("/etc/private1.sh")
    remote_ip_private = remote_ip("/etc/private1.sh")
    private_ip_private = private_ip1("/etc/private1.sh")
    config_path = "/etc/wireguard/wireserver1.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_sitwire_privatekharej_server1(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )
        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mPrivate[SIT] + Wireguard\033[93m Kharej Server \033[96mConfig [1]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej Server\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mIRAN Client [1] \033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6. \033[93mChange WireGuard Endpoint IP\033[0m")
        print("7.\033[94m Change IPsec Secret Key\033[0m")
        print("8. \033[92mSave All Changes\033[0m")
        print("0. \033[97mback to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Client [1]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec1(opposite_ip)
                update_ipsec_conf_wireguard_server1("/etc/ipsec1.conf", new_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "7":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secret Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")
        elif choice == "6":
            new_endpoint = input(
                "\033[93mEnter New \033[92mWireGuard Endpoint\033[93m Address:\033[0m "
            )
            if new_endpoint:
                try:
                    endpoint_ip, new_port = new_endpoint.rsplit(":", 1)
                    if endpoint.startswith(endpoint_ip):
                        endpoint = f"{endpoint_ip}:{new_port}"
                    else:
                        print(
                            "\033[97mSince Endpoint IP doesn't match with the original one, only port will be updated\033[0m"
                        )
                except ValueError:
                    print("\033[91minvalid Endpoint format\033[0m")
            else:
                print("\033[91minvalid Endpoint Address!\033[0m")
        elif choice == "8":
            save_stuff_sit1(private_ip_private, local_ip_private, remote_ip_private)
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwire1sec(config_path, new_config)
            update_ipsec_ip_multi(address_no_subnet)
            break
        elif choice == "0":
            clear()
            wireguardedit_noconjuction_sitsec_kharej1_5iran()
            break
        else:
            print("Please select a valid option.")


def wireguardedit_sitsec_kharejconfig_2():
    local_ip_private = local_ip("/etc/private2.sh")
    remote_ip_private = remote_ip("/etc/private2.sh")
    private_ip_private = private_ip1("/etc/private2.sh")
    config_path = "/etc/wireguard/wireserver2.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_sitwire_privatekharej_server2(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )
        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mPrivate[SIT] + Wireguard\033[93m Kharej Server \033[96mConfig [2]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej Server\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mIRAN Client [2] \033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6. \033[93mChange WireGuard Endpoint IP\033[0m")
        print("7.\033[94m Change IPsec Secret Key\033[0m")
        print("8. \033[92mSave All Changes\033[0m")
        print("0. \033[97mback to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Client [2]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec2(opposite_ip)
                update_ipsec_conf_wireguard_server2("/etc/ipsec1.conf", new_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "7":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secret Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")
        elif choice == "6":
            new_endpoint = input(
                "\033[93mEnter New \033[92mWireGuard Endpoint\033[93m Address:\033[0m "
            )
            if new_endpoint:
                try:
                    endpoint_ip, new_port = new_endpoint.rsplit(":", 1)
                    if endpoint.startswith(endpoint_ip):
                        endpoint = f"{endpoint_ip}:{new_port}"
                    else:
                        print(
                            "\033[97mSince Endpoint IP doesn't match with the original one, only port will be updated\033[0m"
                        )
                except ValueError:
                    print("\033[91minvalid Endpoint format\033[0m")
            else:
                print("\033[91minvalid Endpoint Address!\033[0m")
        elif choice == "8":
            save_stuff_sit2(private_ip_private, local_ip_private, remote_ip_private)
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwire2sec(config_path, new_config)
            update_ipsec_ip_multi2(address_no_subnet)
            break
        elif choice == "0":
            clear()
            wireguardedit_noconjuction_sitsec_kharej1_5iran()
            break
        else:
            print("Please select a valid option.")


def wireguardedit_sitsec_kharejconfig_3():
    local_ip_private = local_ip("/etc/private3.sh")
    remote_ip_private = remote_ip("/etc/private3.sh")
    private_ip_private = private_ip1("/etc/private3.sh")
    config_path = "/etc/wireguard/wireserver3.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_sitwire_privatekharej_server3(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )
        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mPrivate[SIT] + Wireguard\033[93m Kharej Server \033[96mConfig [3]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej Server\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mIRAN Client [3] \033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6. \033[93mChange WireGuard Endpoint IP\033[0m")
        print("7.\033[94m Change IPsec Secret Key\033[0m")
        print("8. \033[92mSave All Changes\033[0m")
        print("0. \033[97mback to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Client [3]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec3(opposite_ip)
                update_ipsec_conf_wireguard_server3("/etc/ipsec1.conf", new_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "7":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secret Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")
        elif choice == "6":
            new_endpoint = input(
                "\033[93mEnter New \033[92mWireGuard Endpoint\033[93m Address:\033[0m "
            )
            if new_endpoint:
                try:
                    endpoint_ip, new_port = new_endpoint.rsplit(":", 1)
                    if endpoint.startswith(endpoint_ip):
                        endpoint = f"{endpoint_ip}:{new_port}"
                    else:
                        print(
                            "\033[97mSince Endpoint IP doesn't match with the original one, only port will be updated\033[0m"
                        )
                except ValueError:
                    print("\033[91minvalid Endpoint format\033[0m")
            else:
                print("\033[91minvalid Endpoint Address!\033[0m")
        elif choice == "8":
            save_stuff_sit3(private_ip_private, local_ip_private, remote_ip_private)
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwire3sec(config_path, new_config)
            update_ipsec_ip_multi3(address_no_subnet)
            break
        elif choice == "0":
            clear()
            wireguardedit_noconjuction_sitsec_kharej1_5iran()
            break
        else:
            print("Please select a valid option.")


def wireguardedit_sitsec_kharejconfig_4():
    local_ip_private = local_ip("/etc/private4.sh")
    remote_ip_private = remote_ip("/etc/private4.sh")
    private_ip_private = private_ip1("/etc/private4.sh")
    config_path = "/etc/wireguard/wireserver4.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_sitwire_privatekharej_server4(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )
        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mPrivate[SIT] + Wireguard\033[93m Kharej Server \033[96mConfig [4]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej Server\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mIRAN Client [4] \033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6. \033[93mChange WireGuard Endpoint IP\033[0m")
        print("7.\033[94m Change IPsec Secret Key\033[0m")
        print("8. \033[92mSave All Changes\033[0m")
        print("0. \033[97mback to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Client [4]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec4(opposite_ip)
                update_ipsec_conf_wireguard_server4("/etc/ipsec1.conf", new_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "7":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secret Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")
        elif choice == "6":
            new_endpoint = input(
                "\033[93mEnter New \033[92mWireGuard Endpoint\033[93m Address:\033[0m "
            )
            if new_endpoint:
                try:
                    endpoint_ip, new_port = new_endpoint.rsplit(":", 1)
                    if endpoint.startswith(endpoint_ip):
                        endpoint = f"{endpoint_ip}:{new_port}"
                    else:
                        print(
                            "\033[97mSince Endpoint IP doesn't match with the original one, only port will be updated\033[0m"
                        )
                except ValueError:
                    print("\033[91minvalid Endpoint format\033[0m")
            else:
                print("\033[91minvalid Endpoint Address!\033[0m")
        elif choice == "8":
            save_stuff_sit4(private_ip_private, local_ip_private, remote_ip_private)
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwire4sec(config_path, new_config)
            update_ipsec_ip_multi4(address_no_subnet)
            break
        elif choice == "0":
            clear()
            wireguardedit_noconjuction_sitsec_kharej1_5iran()
            break
        else:
            print("Please select a valid option.")


def wireguardedit_sitsec_kharejconfig_5():
    local_ip_private = local_ip("/etc/private5.sh")
    remote_ip_private = remote_ip("/etc/private5.sh")
    private_ip_private = private_ip1("/etc/private5.sh")
    config_path = "/etc/wireguard/wireserver5.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_sitwire_privatekharej_server5(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )
        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mPrivate[SIT] + Wireguard\033[93m Kharej Server \033[96mConfig [5]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mKharej Server\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mIRAN Client [5] \033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6. \033[93mChange WireGuard Endpoint IP\033[0m")
        print("7.\033[94m Change IPsec Secret Key\033[0m")
        print("8. \033[92mSave All Changes\033[0m")
        print("0. \033[97mback to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Client [5]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec5(opposite_ip)
                update_ipsec_conf_wireguard_server5("/etc/ipsec1.conf", new_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "7":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secret Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")
        elif choice == "6":
            new_endpoint = input(
                "\033[93mEnter New \033[92mWireGuard Endpoint\033[93m Address:\033[0m "
            )
            if new_endpoint:
                try:
                    endpoint_ip, new_port = new_endpoint.rsplit(":", 1)
                    if endpoint.startswith(endpoint_ip):
                        endpoint = f"{endpoint_ip}:{new_port}"
                    else:
                        print(
                            "\033[97mSince Endpoint IP doesn't match with the original one, only port will be updated\033[0m"
                        )
                except ValueError:
                    print("\033[91minvalid Endpoint format\033[0m")
            else:
                print("\033[91minvalid Endpoint Address!\033[0m")
        elif choice == "8":
            save_stuff_sit5(private_ip_private, local_ip_private, remote_ip_private)
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwire5sec(config_path, new_config)
            update_ipsec_ip_multi5(address_no_subnet)
            break
        elif choice == "0":
            clear()
            wireguardedit_noconjuction_sitsec_kharej1_5iran()
            break
        else:
            print("Please select a valid option.")


def wireguardudp_sitsec_iran_client1():
    local_ip_private = local_ip("/etc/private1.sh")
    remote_ip_private = remote_ip("/etc/private1.sh")
    private_ip_private = private_ip1("/etc/private1.sh")
    config_path = "/etc/wireguard/wireclient.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_sitwire_privateiran_client1(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )
        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mPrivate[SIT] + Wireguard\033[93m IRAN Client \033[96m[1]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN Client [1]\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mKharej Server \033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6. \033[93mChange WireGuard Endpoint IP\033[0m")
        print("7.\033[94m Change IPsec Secret Key\033[0m")
        print("8. \033[92mSave All Changes\033[0m")
        print("0. \033[97mback to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Client [1]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec_client(opposite_ip)
                update_ipsec_conf_wireguard_46sec("/etc/ipsec1.conf", new_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "7":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secret Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")
        elif choice == "6":
            new_endpoint = input(
                "\033[93mEnter New \033[92mWireGuard Endpoint\033[93m Address:\033[0m "
            )
            if new_endpoint:
                try:
                    endpoint_ip, new_port = new_endpoint.rsplit(":", 1)
                    if endpoint.startswith(endpoint_ip):
                        endpoint = f"{endpoint_ip}:{new_port}"
                    else:
                        print(
                            "\033[97mSince Endpoint IP doesn't match with the original one, only port will be updated\033[0m"
                        )
                except ValueError:
                    print("\033[91minvalid Endpoint format\033[0m")
            else:
                print("\033[91minvalid Endpoint Address!\033[0m")
        elif choice == "8":
            save_stuff_sit1(private_ip_private, local_ip_private, remote_ip_private)
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwiresec_client(config_path, new_config)
            update_ipsec_ip(address_no_subnet)
            break
        elif choice == "0":
            clear()
            wireguardedit_noconjuction_sitsec_kharej1_5iran()
            break
        else:
            print("Please select a valid option.")


def wireguardudp_sitsec_iran_client2():
    local_ip_private = local_ip("/etc/private2.sh")
    remote_ip_private = remote_ip("/etc/private2.sh")
    private_ip_private = private_ip1("/etc/private2.sh")
    config_path = "/etc/wireguard/wireclient.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_sitwire_privateiran_client2(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )
        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mPrivate[SIT] + Wireguard\033[93m IRAN Client \033[96m[2]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN Client [2]\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mKharej Server \033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6. \033[93mChange WireGuard Endpoint IP\033[0m")
        print("7.\033[94m Change IPsec Secret Key\033[0m")
        print("8. \033[92mSave All Changes\033[0m")
        print("0. \033[97mback to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Client [2]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec_client(opposite_ip)
                update_ipsec_conf_wireguard_46sec("/etc/ipsec1.conf", new_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "7":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secret Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")
        elif choice == "6":
            new_endpoint = input(
                "\033[93mEnter New \033[92mWireGuard Endpoint\033[93m Address:\033[0m "
            )
            if new_endpoint:
                try:
                    endpoint_ip, new_port = new_endpoint.rsplit(":", 1)
                    if endpoint.startswith(endpoint_ip):
                        endpoint = f"{endpoint_ip}:{new_port}"
                    else:
                        print(
                            "\033[97mSince Endpoint IP doesn't match with the original one, only port will be updated\033[0m"
                        )
                except ValueError:
                    print("\033[91minvalid Endpoint format\033[0m")
            else:
                print("\033[91minvalid Endpoint Address!\033[0m")
        elif choice == "8":
            save_stuff_sit2(private_ip_private, local_ip_private, remote_ip_private)
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwiresec_client(config_path, new_config)
            update_ipsec_ip(address_no_subnet)
            break
        elif choice == "0":
            clear()
            wireguardedit_noconjuction_sitsec_kharej1_5iran()
            break
        else:
            print("Please select a valid option.")


def wireguardudp_sitsec_iran_client3():
    local_ip_private = local_ip("/etc/private3.sh")
    remote_ip_private = remote_ip("/etc/private3.sh")
    private_ip_private = private_ip1("/etc/private3.sh")
    config_path = "/etc/wireguard/wireclient.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_sitwire_privateiran_client3(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )
        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mPrivate[SIT] + Wireguard\033[93m IRAN Client \033[96m[3]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN Client [3]\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mKharej Server \033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6. \033[93mChange WireGuard Endpoint IP\033[0m")
        print("7.\033[94m Change IPsec Secret Key\033[0m")
        print("8. \033[92mSave All Changes\033[0m")
        print("0. \033[97mback to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Client [3]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec_client(opposite_ip)
                update_ipsec_conf_wireguard_46sec("/etc/ipsec1.conf", new_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "7":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secret Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")
        elif choice == "6":
            new_endpoint = input(
                "\033[93mEnter New \033[92mWireGuard Endpoint\033[93m Address:\033[0m "
            )
            if new_endpoint:
                try:
                    endpoint_ip, new_port = new_endpoint.rsplit(":", 1)
                    if endpoint.startswith(endpoint_ip):
                        endpoint = f"{endpoint_ip}:{new_port}"
                    else:
                        print(
                            "\033[97mSince Endpoint IP doesn't match with the original one, only port will be updated\033[0m"
                        )
                except ValueError:
                    print("\033[91minvalid Endpoint format\033[0m")
            else:
                print("\033[91minvalid Endpoint Address!\033[0m")
        elif choice == "8":
            save_stuff_sit3(private_ip_private, local_ip_private, remote_ip_private)
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwiresec_client(config_path, new_config)
            update_ipsec_ip(address_no_subnet)
            break
        elif choice == "0":
            clear()
            wireguardedit_noconjuction_sitsec_kharej1_5iran()
            break
        else:
            print("Please select a valid option.")


def wireguardudp_sitsec_iran_client4():
    local_ip_private = local_ip("/etc/private4.sh")
    remote_ip_private = remote_ip("/etc/private4.sh")
    private_ip_private = private_ip1("/etc/private4.sh")
    config_path = "/etc/wireguard/wireclient.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_sitwire_privateiran_client4(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )
        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mPrivate[SIT] + Wireguard\033[93m IRAN Client \033[96m[4]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN Client [4]\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mKharej Server \033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6. \033[93mChange WireGuard Endpoint IP\033[0m")
        print("7.\033[94m Change IPsec Secret Key\033[0m")
        print("8. \033[92mSave All Changes\033[0m")
        print("0. \033[97mback to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Client [4]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec_client(opposite_ip)
                update_ipsec_conf_wireguard_46sec("/etc/ipsec1.conf", new_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "7":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secret Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")
        elif choice == "6":
            new_endpoint = input(
                "\033[93mEnter New \033[92mWireGuard Endpoint\033[93m Address:\033[0m "
            )
            if new_endpoint:
                try:
                    endpoint_ip, new_port = new_endpoint.rsplit(":", 1)
                    if endpoint.startswith(endpoint_ip):
                        endpoint = f"{endpoint_ip}:{new_port}"
                    else:
                        print(
                            "\033[97mSince Endpoint IP doesn't match with the original one, only port will be updated\033[0m"
                        )
                except ValueError:
                    print("\033[91minvalid Endpoint format\033[0m")
            else:
                print("\033[91minvalid Endpoint Address!\033[0m")
        elif choice == "8":
            save_stuff_sit4(private_ip_private, local_ip_private, remote_ip_private)
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwiresec_client(config_path, new_config)
            update_ipsec_ip(address_no_subnet)
            break
        elif choice == "0":
            clear()
            wireguardedit_noconjuction_sitsec_kharej1_5iran()
            break
        else:
            print("Please select a valid option.")


def wireguardudp_sitsec_iran_client5():
    local_ip_private = local_ip("/etc/private5.sh")
    remote_ip_private = remote_ip("/etc/private5.sh")
    private_ip_private = private_ip1("/etc/private5.sh")
    config_path = "/etc/wireguard/wireclient.conf"
    address_with_subnet, address_no_subnet, listen_port, endpoint, allowed_ips = (
        load_wireguardconfig_sitwire(config_path)
    )

    if not local_ip_private or not remote_ip_private or not private_ip_private:
        print("Couldn't retrieve IP addresses from Private file")
        return

    if not address_with_subnet or not listen_port or not endpoint:
        print("\033[91mCouldn't retrieve the Wireguard configuration.\033[0m")
        return

    while True:
        os.system("clear")
        display_stuff_sitwire_privateiran_client5(
            local_ip_private, remote_ip_private, private_ip_private
        )

        opposite_ip = wtb_opposite_ip_wireguard(private_ip_private)
        endpoint_display = f"{opposite_ip}:{listen_port}"

        display_wireguard_config_sitwire(
            address_no_subnet, listen_port, endpoint_display, allowed_ips
        )
        secret_key = ipsecsecret_key_wire("/etc/ipsec.secrets")
        if secret_key:
            display_ipsecsecret_wire(secret_key)
        print("\033[92m ^ ^\033[0m")
        print("\033[92m(\033[91mO,O\033[92m)\033[0m")
        print(
            "\033[92m(   ) \033[92mPrivate[SIT] + Wireguard\033[93m IRAN Client \033[96m[2]\033[0m"
        )
        print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
        print("\033[93m╭───────────────────────────────────────╮\033[0m")
        print("1. \033[93mChange \033[97mIRAN Client [5]\033[92m Public IP\033[0m")
        print("2. \033[93mChange \033[97mKharej Server \033[92m Public IP\033[0m")
        print("3. \033[93mChange \033[97mSIT \033[93mPrivate IPV6 \033[0m")
        print("4. \033[92mChange \033[97mWireGuard Private IP\033[92m Address\033[0m")
        print("5. \033[96mChange WireGuard Tunnel Port\033[0m")
        print("6. \033[93mChange WireGuard Endpoint IP\033[0m")
        print("7.\033[94m Change IPsec Secret Key\033[0m")
        print("8. \033[92mSave All Changes\033[0m")
        print("0. \033[97mback to the previous menu\033[0m")
        print("\033[93m╰───────────────────────────────────────╯\033[0m")
        choice = input("Enter your choice Plz: ")

        if choice == "3":
            new_ip = input(
                "\033[93mEnter \033[92New Private IPv6 \033[93maddress \033[96m[SIT]\033[93m :\033[0m "
            )
            if new_ip:
                old_ip = private_ip_private
                private_ip_private = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                endpoint = f"{opposite_ip}:{listen_port}"
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "1":
            new_ip = input(
                "\033[93mEnter \033[92mIRAN Client [5]\033[93m Public IP :\033[0m "
            )
            if new_ip:
                local_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "2":
            new_ip = input(
                "\033[93mEnter \033[92mKharej Server\033[93m Public IP :\033[0m "
            )
            if new_ip:
                remote_ip_private = new_ip
            else:
                print("\033[91mWrong IP address\033[0m")
        elif choice == "4":
            new_ip = input(
                "\033[93mEnter\033[92m New WireGuard Private IP\033[93m Address : \033[0m"
            )
            new_subnet = address_with_subnet.split("/")[-1]
            if new_ip:
                old_ip = address_no_subnet
                new_address = f"{new_ip}/{new_subnet}"
                address_with_subnet = new_address
                address_no_subnet = new_ip
                opposite_ip = wtb_opposite_ip_wireguard(new_ip)
                if ":" in new_ip:
                    allowed_ips = f"{opposite_ip}/128"
                else:
                    allowed_ips = f"{opposite_ip}/32"
                update_ufw_ruleswireguard(old_ip, new_ip, listen_port, listen_port)
                update_ping_script_opposite_ip_wirenosec_client(opposite_ip)
                update_ipsec_conf_wireguard_46sec("/etc/ipsec1.conf", new_ip)
            else:
                print("\033[91minvalid IP Address!\033[0m")
        elif choice == "5":
            new_listen_port = input(
                "\033[93mEnter New \033[92mTunnel\033[93m Port:\033[0m "
            )
            if new_listen_port.isdigit():
                old_port = listen_port
                listen_port = new_listen_port
                update_ufw_ruleswireguard(
                    address_no_subnet, address_no_subnet, old_port, new_listen_port
                )
            else:
                print("\033[91minvalid Port!\033[0m")
        elif choice == "7":
            new_secret = input(
                "\033[93mEnter\033[92m New IPsec Secret Key\033[93m:\033[0m "
            )
            if new_secret:
                update_ipsecsecret_wire("/etc/ipsec.secrets", new_secret)
            else:
                print("\033[91mInvalid IPsec Secret Key!\033[0m")
        elif choice == "6":
            new_endpoint = input(
                "\033[93mEnter New \033[92mWireGuard Endpoint\033[93m Address:\033[0m "
            )
            if new_endpoint:
                try:
                    endpoint_ip, new_port = new_endpoint.rsplit(":", 1)
                    if endpoint.startswith(endpoint_ip):
                        endpoint = f"{endpoint_ip}:{new_port}"
                    else:
                        print(
                            "\033[97mSince Endpoint IP doesn't match with the original one, only port will be updated\033[0m"
                        )
                except ValueError:
                    print("\033[91minvalid Endpoint format\033[0m")
            else:
                print("\033[91minvalid Endpoint Address!\033[0m")
        elif choice == "8":
            save_stuff_sit5(private_ip_private, local_ip_private, remote_ip_private)
            new_config = {
                "Address": address_with_subnet,
                "ListenPort": listen_port,
                "EndpointIP": opposite_ip,
                "AllowedIPs": allowed_ips,
            }
            save_wireguardconfig_sitwiresec_client(config_path, new_config)
            update_ipsec_ip(address_no_subnet)
            break
        elif choice == "0":
            clear()
            wireguardedit_noconjuction_sitsec_kharej1_5iran()
            break
        else:
            print("Please select a valid option.")


def update_ipsec_ip(new_vxlan_ip):
    def opposite_ip(ip):
        if ":" in ip:
            parts = ip.split(":")
            if parts[-1].endswith("1"):
                parts[-1] = parts[-1][:-1] + "2"
            else:
                parts[-1] = parts[-1][:-1] + "1"
            return ":".join(parts)
        else:
            octets = ip.split(".")
            if octets[-1] == "1":
                octets[-1] = "2"
            else:
                octets[-1] = "1"
            return ".".join(octets)

    secrets_file = "/etc/ipsec.secrets"
    opposite_ip_addr = opposite_ip(new_vxlan_ip)

    with open(secrets_file, "r") as file:
        lines = file.readlines()

    new_lines = []
    for line in lines:
        if ": PSK" in line:
            parts = line.split()
            if len(parts) > 2:
                new_line = (
                    f'{opposite_ip_addr} {new_vxlan_ip} : PSK "{parts[-1][1:-1]}"'
                )
                new_lines.append(new_line + "\n")
            else:
                new_lines.append(line)
        else:
            new_lines.append(line)

    with open(secrets_file, "w") as file:
        file.writelines(new_lines)


def update_ipsec_ip_multi(new_vxlan_ip):
    def opposite_ip(ip):
        if ":" in ip:
            parts = ip.split(":")
            if parts[-1].endswith("1"):
                parts[-1] = parts[-1][:-1] + "2"
            else:
                parts[-1] = parts[-1][:-1] + "1"
            return ":".join(parts)
        else:
            octets = ip.split(".")
            if octets[-1] == "1":
                octets[-1] = "2"
            else:
                octets[-1] = "1"
            return ".".join(octets)

    secrets_file = "/etc/ipsec.secrets"
    opposite_ip_addr = opposite_ip(new_vxlan_ip)

    with open(secrets_file, "r") as file:
        lines = file.readlines()

    new_lines = []
    modified = False
    for line in lines:
        if not modified and ": PSK" in line:
            parts = line.split()
            if len(parts) > 2:
                new_line = (
                    f'{opposite_ip_addr} {new_vxlan_ip} : PSK "{parts[-1][1:-1]}"'
                )
                new_lines.append(new_line + "\n")
                modified = True
            else:
                new_lines.append(line)
        else:
            new_lines.append(line)

    with open(secrets_file, "w") as file:
        file.writelines(new_lines)


def update_ipsec_ip_multi2(new_vxlan_ip):
    def opposite_ip(ip):
        if ":" in ip:
            parts = ip.split(":")
            if parts[-1].endswith("1"):
                parts[-1] = parts[-1][:-1] + "2"
            else:
                parts[-1] = parts[-1][:-1] + "1"
            return ":".join(parts)
        else:
            octets = ip.split(".")
            if octets[-1] == "1":
                octets[-1] = "2"
            else:
                octets[-1] = "1"
            return ".".join(octets)

    secrets_file = "/etc/ipsec.secrets"
    opposite_ip_addr = opposite_ip(new_vxlan_ip)

    with open(secrets_file, "r") as file:
        lines = file.readlines()

    if len(lines) < 2:
        raise ValueError("The secrets file doesn't have at least 2 lines")

    new_lines = []
    for index, line in enumerate(lines):
        if index == 1 and ": PSK" in line:
            parts = line.split()
            if len(parts) > 2:
                new_line = (
                    f'{opposite_ip_addr} {new_vxlan_ip} : PSK "{parts[-1][1:-1]}"'
                )
                new_lines.append(new_line + "\n")
            else:
                new_lines.append(line)
        else:
            new_lines.append(line)

    with open(secrets_file, "w") as file:
        file.writelines(new_lines)


def update_ipsec_ip_multi3(new_vxlan_ip):
    def opposite_ip(ip):
        if ":" in ip:
            parts = ip.split(":")
            if parts[-1].endswith("1"):
                parts[-1] = parts[-1][:-1] + "2"
            else:
                parts[-1] = parts[-1][:-1] + "1"
            return ":".join(parts)
        else:
            octets = ip.split(".")
            if octets[-1] == "1":
                octets[-1] = "2"
            else:
                octets[-1] = "1"
            return ".".join(octets)

    secrets_file = "/etc/ipsec.secrets"
    opposite_ip_addr = opposite_ip(new_vxlan_ip)

    with open(secrets_file, "r") as file:
        lines = file.readlines()

    if len(lines) < 3:
        raise ValueError("The secrets file doesn't have at least 3 lines")

    new_lines = []
    for index, line in enumerate(lines):
        if index == 2:
            parts = line.split()
            if len(parts) >= 3 and parts[2] == ":":
                new_line = (
                    f'{opposite_ip_addr} {new_vxlan_ip} : PSK "{parts[-1][1:-1]}"'
                )
                new_lines.append(new_line + "\n")
            else:
                new_lines.append(line)
        else:
            new_lines.append(line)

    with open(secrets_file, "w") as file:
        file.writelines(new_lines)


def update_ipsec_ip_multi4(new_vxlan_ip):
    def opposite_ip(ip):
        if ":" in ip:
            parts = ip.split(":")
            if parts[-1].endswith("1"):
                parts[-1] = parts[-1][:-1] + "2"
            else:
                parts[-1] = parts[-1][:-1] + "1"
            return ":".join(parts)
        else:
            octets = ip.split(".")
            if octets[-1] == "1":
                octets[-1] = "2"
            else:
                octets[-1] = "1"
            return ".".join(octets)

    secrets_file = "/etc/ipsec.secrets"
    opposite_ip_addr = opposite_ip(new_vxlan_ip)

    with open(secrets_file, "r") as file:
        lines = file.readlines()

    if len(lines) < 4:
        raise ValueError("The secrets file doesn't have at least 4 lines")

    new_lines = []
    for index, line in enumerate(lines):
        if index == 3:
            parts = line.split()
            if len(parts) >= 3 and parts[2] == ":":
                new_line = (
                    f'{opposite_ip_addr} {new_vxlan_ip} : PSK "{parts[-1][1:-1]}"'
                )
                new_lines.append(new_line + "\n")
            else:
                new_lines.append(line)
        else:
            new_lines.append(line)

    with open(secrets_file, "w") as file:
        file.writelines(new_lines)


def update_ipsec_ip_multi5(new_vxlan_ip):
    def opposite_ip(ip):
        if ":" in ip:
            parts = ip.split(":")
            if parts[-1].endswith("1"):
                parts[-1] = parts[-1][:-1] + "2"
            else:
                parts[-1] = parts[-1][:-1] + "1"
            return ":".join(parts)
        else:
            octets = ip.split(".")
            if octets[-1] == "1":
                octets[-1] = "2"
            else:
                octets[-1] = "1"
            return ".".join(octets)

    secrets_file = "/etc/ipsec.secrets"
    opposite_ip_addr = opposite_ip(new_vxlan_ip)

    with open(secrets_file, "r") as file:
        lines = file.readlines()

    if len(lines) < 5:
        raise ValueError("The secrets file doesn't have at least 5 lines")

    new_lines = []
    for index, line in enumerate(lines):
        if index == 4:
            parts = line.split()
            if len(parts) >= 3 and parts[2] == ":":
                new_line = (
                    f'{opposite_ip_addr} {new_vxlan_ip} : PSK "{parts[-1][1:-1]}"'
                )
                new_lines.append(new_line + "\n")
            else:
                new_lines.append(line)
        else:
            new_lines.append(line)

    with open(secrets_file, "w") as file:
        file.writelines(new_lines)


def clear():
    subprocess.run(["clear"])


## edit menu close##


def remote_extraction(file_path):
    with open(file_path, "r") as file:
        content = file.read()
        match_ipv4 = re.search(
            r"remote\s+(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})", content
        )
        match_ipv6 = re.search(r"remote\s+([0-9a-fA-F:]+)", content)
        if match_ipv4:
            return match_ipv4.group(1)
        elif match_ipv6:
            return match_ipv6.group(1)
    return None


def remote_extraction_sit(file_path):
    with open(file_path, "r") as file:
        content = file.read()
        match = re.search(r"remote\s+(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})", content)
        if match:
            return match.group(1)
    return None


def remote_endpoint(file_path):
    with open(file_path, "r") as file:
        content = file.read()
        match = re.search(r"\[Peer\][\s\S]*?Endpoint\s*=\s*([\d\.]+)", content)
        if match:
            return match.group(1)
    return None


def parse_wireguard_config(file_path):
    with open(file_path, "r") as file:
        content = file.read()
    endpoint = re.search(r"Endpoint\s*=\s*(\S+)", content)
    mtu = re.search(r"MTU\s*=\s*(\d+)", content)
    port = re.search(r"ListenPort\s*=\s*(\d+)", content)
    return {
        "endpoint": endpoint.group(1) if endpoint else None,
        "mtu": mtu.group(1) if mtu else None,
        "port": port.group(1) if port else None,
    }
edit_local()
